From 1103cdb6acc66a0649c01670d1a6cd814b81594a Mon Sep 17 00:00:00 2001
From: Ike Kunze <ike.kunze@comsys.rwth-aachen.de>
Date: Thu, 15 Dec 2022 14:42:39 +0100
Subject: [PATCH] ns-3 changes for EFM experimentation

---
 .gitignore                                    |     2 +
 .gitmodules                                   |     0
 scratch/.gitignore                            |     6 -
 .../EFM-Localization-Stuff/config-schema.json |   158 +
 .../config-validator.py                       |    18 +
 scratch/EFM-Localization-Stuff/config.json    |    68 +
 .../topologies/Geant-2023.txt                 |   116 +
 .../topologies/cesnet_topology.txt            |    69 +
 .../topologies/telekom-germany-formatted.txt  |   195 +
 scratch/efm-sim/configuration.cc              |   300 +
 scratch/efm-sim/configuration.h               |   159 +
 scratch/efm-sim/efm-localization-test.cc      |  1329 +
 scratch/efm-sim/groundtruth-collector.cc      |   194 +
 scratch/efm-sim/groundtruth-collector.h       |    93 +
 scratch/subdir/scratch-simulator-subdir.cc    |    29 -
 src/applications/.gitattributes               |     2 +
 src/applications/.gitignore                   |    51 +
 src/applications/CMakeLists.txt               |    58 +
 src/applications/README.md                    |    92 +
 .../doc/http-embedded-object-size.png         |   Bin 6103 -> 0 bytes
 .../doc/http-main-object-size.png             |   Bin 6385 -> 0 bytes
 .../doc/http-num-of-embedded-objects.png      |   Bin 6565 -> 0 bytes
 src/applications/doc/http-parsing-time.png    |   Bin 6444 -> 0 bytes
 src/applications/doc/http-reading-time.png    |   Bin 6861 -> 0 bytes
 src/applications/helper/better-ping-helper.cc |   137 +
 src/applications/helper/better-ping-helper.h  |   183 +
 .../applications/helper/generic-app-helper.cc |    24 +-
 src/applications/helper/generic-app-helper.h  |    59 +
 .../helper/quic-bulk-client-helper.cc         |    65 +
 .../helper/quic-bulk-client-helper.h          |    92 +
 .../helper/quic-client-server-helper.cc       |    93 +
 .../helper/quic-client-server-helper.h        |   134 +
 src/applications/helper/quic-echo-helper.cc   |   138 +
 src/applications/helper/quic-echo-helper.h    |   215 +
 .../quic-trigger-client-server-helper.cc      |    91 +
 .../quic-trigger-client-server-helper.h       |   134 +
 .../helper/tcp-client-server-helper.cc        |    93 +
 .../helper/tcp-client-server-helper.h         |   134 +
 src/applications/helper/tcp-echo-helper.cc    |   138 +
 src/applications/helper/tcp-echo-helper.h     |   215 +
 .../tcp-trigger-client-server-helper.cc       |    91 +
 .../helper/tcp-trigger-client-server-helper.h |   134 +
 src/applications/model/application-stats.cc   |    24 +
 src/applications/model/application-stats.h    |    29 +
 src/applications/model/better-ping-client.cc  |   405 +
 src/applications/model/better-ping-client.h   |   159 +
 src/applications/model/better-ping-server.cc  |   242 +
 src/applications/model/better-ping-server.h   |   101 +
 src/applications/model/better-ping-tracker.cc |   114 +
 src/applications/model/better-ping-tracker.h  |    71 +
 src/applications/model/quic-bulk-client.cc    |   242 +
 src/applications/model/quic-bulk-client.h     |   102 +
 src/applications/model/quic-client.cc         |   239 +
 src/applications/model/quic-client.h          |   102 +
 src/applications/model/quic-echo-client.cc    |   515 +
 src/applications/model/quic-echo-client.h     |   207 +
 src/applications/model/quic-echo-server.cc    |   255 +
 src/applications/model/quic-echo-server.h     |   107 +
 src/applications/model/quic-server.cc         |   184 +
 src/applications/model/quic-server.h          |   118 +
 .../model/quic-trigger-application.cc         |   195 +
 .../model/quic-trigger-application.h          |    44 +
 src/applications/model/quic-trigger-client.cc |   128 +
 src/applications/model/quic-trigger-client.h  |    33 +
 src/applications/model/quic-trigger-server.cc |    82 +
 src/applications/model/quic-trigger-server.h  |    33 +
 src/applications/model/tcp-client.cc          |   232 +
 src/applications/model/tcp-client.h           |    98 +
 src/applications/model/tcp-echo-client.cc     |   494 +
 src/applications/model/tcp-echo-client.h      |   192 +
 src/applications/model/tcp-echo-server.cc     |   265 +
 src/applications/model/tcp-echo-server.h      |    97 +
 src/applications/model/tcp-server.cc          |   184 +
 src/applications/model/tcp-server.h           |   118 +
 .../model/tcp-trigger-application.cc          |   199 +
 .../model/tcp-trigger-application.h           |    45 +
 src/applications/model/tcp-trigger-client.cc  |   129 +
 src/applications/model/tcp-trigger-client.h   |    33 +
 src/applications/model/tcp-trigger-server.cc  |   112 +
 src/applications/model/tcp-trigger-server.h   |    35 +
 src/applications/model/trigger-application.cc |   199 +
 src/applications/model/trigger-application.h  |    96 +
 src/efm-manager/.gitignore                    |    51 +
 src/efm-manager/CMakeLists.txt                |    36 +
 src/efm-manager/doc/efm-manager.rst           |    98 +
 src/efm-manager/examples/CMakeLists.txt       |     5 +
 .../examples/efm-manager-example.cc           |    26 +
 src/efm-manager/helper/efm-manager-helper.cc  |   100 +
 src/efm-manager/helper/efm-manager-helper.h   |    94 +
 src/efm-manager/model/efm-host-handler.cc     |   583 +
 src/efm-manager/model/efm-host-handler.h      |   219 +
 src/efm-manager/model/efm-host-tag.cc         |   299 +
 src/efm-manager/model/efm-host-tag.h          |   181 +
 src/efm-manager/model/efm-manager.cc          |   284 +
 src/efm-manager/model/efm-manager.h           |   159 +
 .../model/quic-efm-host-handler.cc            |   143 +
 src/efm-manager/model/quic-efm-host-handler.h |    89 +
 src/efm-manager/model/tcp-efm-host-handler.cc |   143 +
 src/efm-manager/model/tcp-efm-host-handler.h  |    89 +
 .../test/efm-manager-test-suite.cc            |    86 +
 src/efm-monitor/.gitignore                    |     1 +
 src/efm-monitor/CMakeLists.txt                |    27 +
 src/efm-monitor/README.md                     |    13 +
 src/efm-monitor/bindings/callbacks_list.py    |    15 +
 .../bindings/modulegen__gcc_ILP32.py          |  7928 +++++
 .../bindings/modulegen__gcc_LP64.py           |  7928 +++++
 src/efm-monitor/doc/flow-monitor.rst          |   229 +
 src/efm-monitor/examples/CMakeLists.txt       |     1 +
 .../examples/flowmon-parse-results.py         |   237 +
 src/efm-monitor/examples/wifi-olsr-flowmon.py |   186 +
 src/efm-monitor/helper/efm-monitor-helper.cc  |   186 +
 src/efm-monitor/helper/efm-monitor-helper.h   |   136 +
 src/efm-monitor/model/efm-flow-classifier.cc  |    53 +
 src/efm-monitor/model/efm-flow-classifier.h   |   115 +
 src/efm-monitor/model/efm-flow-probe.cc       |   783 +
 src/efm-monitor/model/efm-flow-probe.h        |   298 +
 src/efm-monitor/model/efm-monitor.cc          |   574 +
 src/efm-monitor/model/efm-monitor.h           |   349 +
 .../model/ipv4-efm-flow-classifier.cc         |   353 +
 .../model/ipv4-efm-flow-classifier.h          |   178 +
 src/efm-monitor/model/ipv4-efm-flow-probe.cc  |   633 +
 src/efm-monitor/model/ipv4-efm-flow-probe.h   |   134 +
 .../model/ipv6-efm-flow-classifier.cc         |   333 +
 .../model/ipv6-efm-flow-classifier.h          |   157 +
 src/efm-monitor/model/ipv6-efm-flow-probe.cc  |   471 +
 src/efm-monitor/model/ipv6-efm-flow-probe.h   |   134 +
 src/efm-monitor/model/tcp-flow-probe-tag.cc   |   136 +
 src/efm-monitor/model/tcp-flow-probe-tag.h    |    60 +
 src/efm-monitor/test/examples-to-run.py       |    20 +
 src/efm-qlog/CMakeLists.txt                   |    33 +
 src/efm-qlog/README.md                        |    92 +
 src/efm-qlog/doc/efm-qlog.rst                 |    98 +
 src/efm-qlog/examples/CMakeLists.txt          |     6 +
 src/efm-qlog/examples/efm-qlog-example.cc     |    26 +
 src/efm-qlog/helper/efm-qlog-helper.cc        |    11 +
 src/efm-qlog/helper/efm-qlog-helper.h         |    14 +
 src/efm-qlog/model/efm-qlog-events.cc         |   177 +
 src/efm-qlog/model/efm-qlog-events.h          |   225 +
 src/efm-qlog/model/efm-qlog-otf.cc            |   576 +
 src/efm-qlog/model/efm-qlog-otf.h             |    63 +
 src/efm-qlog/model/efm-qlog.cc                |   990 +
 src/efm-qlog/model/efm-qlog.h                 |   144 +
 src/efm-qlog/model/json.h                     | 24640 ++++++++++++++++
 src/efm-qlog/model/qlog-types.cc              |   189 +
 src/efm-qlog/model/qlog-types.h               |   146 +
 src/efm-qlog/test/efm-qlog-test-suite.cc      |    68 +
 src/internet/model/tcp-socket-base.cc         |    21 +-
 src/internet/model/tcp-socket-base.h          |    11 +
 src/internet/model/tcp-tx-buffer.cc           |    21 +-
 src/internet/model/tcp-tx-buffer.h            |     5 +
 src/network/model/application.cc              |     8 +
 src/network/model/application.h               |    15 +
 src/network/utils/bit-deserializer.h          |     3 +-
 src/network/utils/bit-serializer.h            |     1 +
 src/quic/.github/workflows/main.yml           |    42 +
 src/quic/CMakeLists.txt                       |    71 +
 src/quic/README.md                            |    79 +
 src/quic/bindings/modulegen__gcc_ILP32.py     |   727 +
 src/quic/bindings/modulegen__gcc_LP64.py      |   727 +
 src/quic/doc/quic.rst                         |    98 +
 src/quic/examples/quic-pacing.cc              |   153 +
 src/quic/examples/quic-tester-streams.cc      |   205 +
 src/quic/examples/quic-tester.cc              |   125 +
 .../quic-variants-comparison-bulksend.cc      |   376 +
 src/quic/examples/quic-variants-comparison.cc |   377 +
 src/quic/examples/wscript                     |    12 +
 src/quic/helper/quic-helper.cc                |   116 +
 src/quic/helper/quic-helper.h                 |   107 +
 src/quic/model/quic-bbr.cc                    |   820 +
 src/quic/model/quic-bbr.h                     |   398 +
 src/quic/model/quic-congestion-ops.cc         |   278 +
 src/quic/model/quic-congestion-ops.h          |   168 +
 src/quic/model/quic-header.cc                 |   566 +
 src/quic/model/quic-header.h                  |   348 +
 src/quic/model/quic-l4-protocol.cc            |   980 +
 src/quic/model/quic-l4-protocol.h             |   454 +
 src/quic/model/quic-l5-protocol.cc            |   479 +
 src/quic/model/quic-l5-protocol.h             |   240 +
 src/quic/model/quic-socket-base.cc            |  3143 ++
 src/quic/model/quic-socket-base.h             |   854 +
 src/quic/model/quic-socket-factory.cc         |    79 +
 src/quic/model/quic-socket-factory.h          |    84 +
 src/quic/model/quic-socket-rx-buffer.cc       |   219 +
 src/quic/model/quic-socket-rx-buffer.h        |   165 +
 src/quic/model/quic-socket-tx-buffer.cc       |   865 +
 src/quic/model/quic-socket-tx-buffer.h        |   376 +
 .../model/quic-socket-tx-edf-scheduler.cc     |   189 +
 src/quic/model/quic-socket-tx-edf-scheduler.h |   109 +
 .../model/quic-socket-tx-pfifo-scheduler.cc   |    89 +
 .../model/quic-socket-tx-pfifo-scheduler.h    |    66 +
 src/quic/model/quic-socket-tx-scheduler.cc    |   326 +
 src/quic/model/quic-socket-tx-scheduler.h     |   180 +
 src/quic/model/quic-socket.cc                 |   106 +
 src/quic/model/quic-socket.h                  |   170 +
 src/quic/model/quic-stream-base.cc            |   747 +
 src/quic/model/quic-stream-base.h             |   225 +
 src/quic/model/quic-stream-rx-buffer.cc       |   304 +
 src/quic/model/quic-stream-rx-buffer.h        |   182 +
 src/quic/model/quic-stream-tx-buffer.cc       |   425 +
 src/quic/model/quic-stream-tx-buffer.h        |   208 +
 src/quic/model/quic-stream.cc                 |    67 +
 src/quic/model/quic-stream.h                  |   202 +
 src/quic/model/quic-subheader.cc              |  1534 +
 src/quic/model/quic-subheader.h               |   751 +
 src/quic/model/quic-transport-parameters.cc   |   272 +
 src/quic/model/quic-transport-parameters.h    |   228 +
 src/quic/model/windowed-filter.h              |   238 +
 .../helper/quic-client-server-helper.cc       |   105 +
 .../helper/quic-client-server-helper.h        |   150 +
 .../helper/quic-echo-helper.cc                |   154 +
 .../helper/quic-echo-helper.h                 |   233 +
 .../quic-applications/model/quic-client.cc    |   229 +
 .../quic-applications/model/quic-client.h     |    98 +
 .../model/quic-echo-client.cc                 |   514 +
 .../model/quic-echo-client.h                  |   207 +
 .../model/quic-echo-server.cc                 |   240 +
 .../model/quic-echo-server.h                  |   100 +
 .../quic-applications/model/quic-server.cc    |   182 +
 .../quic-applications/model/quic-server.h     |   118 +
 src/quic/test/quic-header-test.cc             |  1212 +
 src/quic/test/quic-rx-buffer-test.cc          |   384 +
 src/quic/test/quic-tx-buffer-test.cc          |   960 +
 src/quic/wscript                              |    71 +
 src/wifi/model/block-ack-type.h               |     1 +
 224 files changed, 88559 insertions(+), 52 deletions(-)
 create mode 100644 .gitmodules
 delete mode 100644 scratch/.gitignore
 create mode 100644 scratch/EFM-Localization-Stuff/config-schema.json
 create mode 100644 scratch/EFM-Localization-Stuff/config-validator.py
 create mode 100644 scratch/EFM-Localization-Stuff/config.json
 create mode 100644 scratch/EFM-Localization-Stuff/topologies/Geant-2023.txt
 create mode 100644 scratch/EFM-Localization-Stuff/topologies/cesnet_topology.txt
 create mode 100644 scratch/EFM-Localization-Stuff/topologies/telekom-germany-formatted.txt
 create mode 100644 scratch/efm-sim/configuration.cc
 create mode 100644 scratch/efm-sim/configuration.h
 create mode 100644 scratch/efm-sim/efm-localization-test.cc
 create mode 100644 scratch/efm-sim/groundtruth-collector.cc
 create mode 100644 scratch/efm-sim/groundtruth-collector.h
 delete mode 100644 scratch/subdir/scratch-simulator-subdir.cc
 create mode 100644 src/applications/.gitattributes
 create mode 100644 src/applications/.gitignore
 create mode 100644 src/applications/README.md
 delete mode 100644 src/applications/doc/http-embedded-object-size.png
 delete mode 100644 src/applications/doc/http-main-object-size.png
 delete mode 100644 src/applications/doc/http-num-of-embedded-objects.png
 delete mode 100644 src/applications/doc/http-parsing-time.png
 delete mode 100644 src/applications/doc/http-reading-time.png
 create mode 100644 src/applications/helper/better-ping-helper.cc
 create mode 100644 src/applications/helper/better-ping-helper.h
 rename scratch/scratch-simulator.cc => src/applications/helper/generic-app-helper.cc (68%)
 create mode 100644 src/applications/helper/generic-app-helper.h
 create mode 100644 src/applications/helper/quic-bulk-client-helper.cc
 create mode 100644 src/applications/helper/quic-bulk-client-helper.h
 create mode 100644 src/applications/helper/quic-client-server-helper.cc
 create mode 100644 src/applications/helper/quic-client-server-helper.h
 create mode 100644 src/applications/helper/quic-echo-helper.cc
 create mode 100644 src/applications/helper/quic-echo-helper.h
 create mode 100644 src/applications/helper/quic-trigger-client-server-helper.cc
 create mode 100644 src/applications/helper/quic-trigger-client-server-helper.h
 create mode 100644 src/applications/helper/tcp-client-server-helper.cc
 create mode 100644 src/applications/helper/tcp-client-server-helper.h
 create mode 100644 src/applications/helper/tcp-echo-helper.cc
 create mode 100644 src/applications/helper/tcp-echo-helper.h
 create mode 100644 src/applications/helper/tcp-trigger-client-server-helper.cc
 create mode 100644 src/applications/helper/tcp-trigger-client-server-helper.h
 create mode 100644 src/applications/model/application-stats.cc
 create mode 100644 src/applications/model/application-stats.h
 create mode 100644 src/applications/model/better-ping-client.cc
 create mode 100644 src/applications/model/better-ping-client.h
 create mode 100644 src/applications/model/better-ping-server.cc
 create mode 100644 src/applications/model/better-ping-server.h
 create mode 100644 src/applications/model/better-ping-tracker.cc
 create mode 100644 src/applications/model/better-ping-tracker.h
 create mode 100644 src/applications/model/quic-bulk-client.cc
 create mode 100644 src/applications/model/quic-bulk-client.h
 create mode 100644 src/applications/model/quic-client.cc
 create mode 100644 src/applications/model/quic-client.h
 create mode 100644 src/applications/model/quic-echo-client.cc
 create mode 100644 src/applications/model/quic-echo-client.h
 create mode 100644 src/applications/model/quic-echo-server.cc
 create mode 100644 src/applications/model/quic-echo-server.h
 create mode 100644 src/applications/model/quic-server.cc
 create mode 100644 src/applications/model/quic-server.h
 create mode 100644 src/applications/model/quic-trigger-application.cc
 create mode 100644 src/applications/model/quic-trigger-application.h
 create mode 100644 src/applications/model/quic-trigger-client.cc
 create mode 100644 src/applications/model/quic-trigger-client.h
 create mode 100644 src/applications/model/quic-trigger-server.cc
 create mode 100644 src/applications/model/quic-trigger-server.h
 create mode 100644 src/applications/model/tcp-client.cc
 create mode 100644 src/applications/model/tcp-client.h
 create mode 100644 src/applications/model/tcp-echo-client.cc
 create mode 100644 src/applications/model/tcp-echo-client.h
 create mode 100644 src/applications/model/tcp-echo-server.cc
 create mode 100644 src/applications/model/tcp-echo-server.h
 create mode 100644 src/applications/model/tcp-server.cc
 create mode 100644 src/applications/model/tcp-server.h
 create mode 100644 src/applications/model/tcp-trigger-application.cc
 create mode 100644 src/applications/model/tcp-trigger-application.h
 create mode 100644 src/applications/model/tcp-trigger-client.cc
 create mode 100644 src/applications/model/tcp-trigger-client.h
 create mode 100644 src/applications/model/tcp-trigger-server.cc
 create mode 100644 src/applications/model/tcp-trigger-server.h
 create mode 100644 src/applications/model/trigger-application.cc
 create mode 100644 src/applications/model/trigger-application.h
 create mode 100644 src/efm-manager/.gitignore
 create mode 100644 src/efm-manager/CMakeLists.txt
 create mode 100644 src/efm-manager/doc/efm-manager.rst
 create mode 100644 src/efm-manager/examples/CMakeLists.txt
 create mode 100644 src/efm-manager/examples/efm-manager-example.cc
 create mode 100644 src/efm-manager/helper/efm-manager-helper.cc
 create mode 100644 src/efm-manager/helper/efm-manager-helper.h
 create mode 100644 src/efm-manager/model/efm-host-handler.cc
 create mode 100644 src/efm-manager/model/efm-host-handler.h
 create mode 100644 src/efm-manager/model/efm-host-tag.cc
 create mode 100644 src/efm-manager/model/efm-host-tag.h
 create mode 100644 src/efm-manager/model/efm-manager.cc
 create mode 100644 src/efm-manager/model/efm-manager.h
 create mode 100644 src/efm-manager/model/quic-efm-host-handler.cc
 create mode 100644 src/efm-manager/model/quic-efm-host-handler.h
 create mode 100644 src/efm-manager/model/tcp-efm-host-handler.cc
 create mode 100644 src/efm-manager/model/tcp-efm-host-handler.h
 create mode 100644 src/efm-manager/test/efm-manager-test-suite.cc
 create mode 100644 src/efm-monitor/.gitignore
 create mode 100644 src/efm-monitor/CMakeLists.txt
 create mode 100644 src/efm-monitor/README.md
 create mode 100644 src/efm-monitor/bindings/callbacks_list.py
 create mode 100644 src/efm-monitor/bindings/modulegen__gcc_ILP32.py
 create mode 100644 src/efm-monitor/bindings/modulegen__gcc_LP64.py
 create mode 100644 src/efm-monitor/doc/flow-monitor.rst
 create mode 100644 src/efm-monitor/examples/CMakeLists.txt
 create mode 100644 src/efm-monitor/examples/flowmon-parse-results.py
 create mode 100644 src/efm-monitor/examples/wifi-olsr-flowmon.py
 create mode 100644 src/efm-monitor/helper/efm-monitor-helper.cc
 create mode 100644 src/efm-monitor/helper/efm-monitor-helper.h
 create mode 100644 src/efm-monitor/model/efm-flow-classifier.cc
 create mode 100644 src/efm-monitor/model/efm-flow-classifier.h
 create mode 100644 src/efm-monitor/model/efm-flow-probe.cc
 create mode 100644 src/efm-monitor/model/efm-flow-probe.h
 create mode 100644 src/efm-monitor/model/efm-monitor.cc
 create mode 100644 src/efm-monitor/model/efm-monitor.h
 create mode 100644 src/efm-monitor/model/ipv4-efm-flow-classifier.cc
 create mode 100644 src/efm-monitor/model/ipv4-efm-flow-classifier.h
 create mode 100644 src/efm-monitor/model/ipv4-efm-flow-probe.cc
 create mode 100644 src/efm-monitor/model/ipv4-efm-flow-probe.h
 create mode 100644 src/efm-monitor/model/ipv6-efm-flow-classifier.cc
 create mode 100644 src/efm-monitor/model/ipv6-efm-flow-classifier.h
 create mode 100644 src/efm-monitor/model/ipv6-efm-flow-probe.cc
 create mode 100644 src/efm-monitor/model/ipv6-efm-flow-probe.h
 create mode 100644 src/efm-monitor/model/tcp-flow-probe-tag.cc
 create mode 100644 src/efm-monitor/model/tcp-flow-probe-tag.h
 create mode 100644 src/efm-monitor/test/examples-to-run.py
 create mode 100644 src/efm-qlog/CMakeLists.txt
 create mode 100644 src/efm-qlog/README.md
 create mode 100644 src/efm-qlog/doc/efm-qlog.rst
 create mode 100644 src/efm-qlog/examples/CMakeLists.txt
 create mode 100644 src/efm-qlog/examples/efm-qlog-example.cc
 create mode 100644 src/efm-qlog/helper/efm-qlog-helper.cc
 create mode 100644 src/efm-qlog/helper/efm-qlog-helper.h
 create mode 100644 src/efm-qlog/model/efm-qlog-events.cc
 create mode 100644 src/efm-qlog/model/efm-qlog-events.h
 create mode 100644 src/efm-qlog/model/efm-qlog-otf.cc
 create mode 100644 src/efm-qlog/model/efm-qlog-otf.h
 create mode 100644 src/efm-qlog/model/efm-qlog.cc
 create mode 100644 src/efm-qlog/model/efm-qlog.h
 create mode 100644 src/efm-qlog/model/json.h
 create mode 100644 src/efm-qlog/model/qlog-types.cc
 create mode 100644 src/efm-qlog/model/qlog-types.h
 create mode 100644 src/efm-qlog/test/efm-qlog-test-suite.cc
 create mode 100644 src/quic/.github/workflows/main.yml
 create mode 100644 src/quic/CMakeLists.txt
 create mode 100644 src/quic/README.md
 create mode 100644 src/quic/bindings/modulegen__gcc_ILP32.py
 create mode 100644 src/quic/bindings/modulegen__gcc_LP64.py
 create mode 100644 src/quic/doc/quic.rst
 create mode 100644 src/quic/examples/quic-pacing.cc
 create mode 100644 src/quic/examples/quic-tester-streams.cc
 create mode 100644 src/quic/examples/quic-tester.cc
 create mode 100644 src/quic/examples/quic-variants-comparison-bulksend.cc
 create mode 100644 src/quic/examples/quic-variants-comparison.cc
 create mode 100644 src/quic/examples/wscript
 create mode 100644 src/quic/helper/quic-helper.cc
 create mode 100644 src/quic/helper/quic-helper.h
 create mode 100644 src/quic/model/quic-bbr.cc
 create mode 100644 src/quic/model/quic-bbr.h
 create mode 100644 src/quic/model/quic-congestion-ops.cc
 create mode 100644 src/quic/model/quic-congestion-ops.h
 create mode 100644 src/quic/model/quic-header.cc
 create mode 100644 src/quic/model/quic-header.h
 create mode 100644 src/quic/model/quic-l4-protocol.cc
 create mode 100644 src/quic/model/quic-l4-protocol.h
 create mode 100644 src/quic/model/quic-l5-protocol.cc
 create mode 100644 src/quic/model/quic-l5-protocol.h
 create mode 100644 src/quic/model/quic-socket-base.cc
 create mode 100644 src/quic/model/quic-socket-base.h
 create mode 100644 src/quic/model/quic-socket-factory.cc
 create mode 100644 src/quic/model/quic-socket-factory.h
 create mode 100644 src/quic/model/quic-socket-rx-buffer.cc
 create mode 100644 src/quic/model/quic-socket-rx-buffer.h
 create mode 100644 src/quic/model/quic-socket-tx-buffer.cc
 create mode 100644 src/quic/model/quic-socket-tx-buffer.h
 create mode 100644 src/quic/model/quic-socket-tx-edf-scheduler.cc
 create mode 100644 src/quic/model/quic-socket-tx-edf-scheduler.h
 create mode 100644 src/quic/model/quic-socket-tx-pfifo-scheduler.cc
 create mode 100644 src/quic/model/quic-socket-tx-pfifo-scheduler.h
 create mode 100644 src/quic/model/quic-socket-tx-scheduler.cc
 create mode 100644 src/quic/model/quic-socket-tx-scheduler.h
 create mode 100644 src/quic/model/quic-socket.cc
 create mode 100644 src/quic/model/quic-socket.h
 create mode 100644 src/quic/model/quic-stream-base.cc
 create mode 100644 src/quic/model/quic-stream-base.h
 create mode 100644 src/quic/model/quic-stream-rx-buffer.cc
 create mode 100644 src/quic/model/quic-stream-rx-buffer.h
 create mode 100644 src/quic/model/quic-stream-tx-buffer.cc
 create mode 100644 src/quic/model/quic-stream-tx-buffer.h
 create mode 100644 src/quic/model/quic-stream.cc
 create mode 100644 src/quic/model/quic-stream.h
 create mode 100644 src/quic/model/quic-subheader.cc
 create mode 100644 src/quic/model/quic-subheader.h
 create mode 100644 src/quic/model/quic-transport-parameters.cc
 create mode 100644 src/quic/model/quic-transport-parameters.h
 create mode 100644 src/quic/model/windowed-filter.h
 create mode 100644 src/quic/quic-applications/helper/quic-client-server-helper.cc
 create mode 100644 src/quic/quic-applications/helper/quic-client-server-helper.h
 create mode 100644 src/quic/quic-applications/helper/quic-echo-helper.cc
 create mode 100644 src/quic/quic-applications/helper/quic-echo-helper.h
 create mode 100644 src/quic/quic-applications/model/quic-client.cc
 create mode 100644 src/quic/quic-applications/model/quic-client.h
 create mode 100644 src/quic/quic-applications/model/quic-echo-client.cc
 create mode 100644 src/quic/quic-applications/model/quic-echo-client.h
 create mode 100644 src/quic/quic-applications/model/quic-echo-server.cc
 create mode 100644 src/quic/quic-applications/model/quic-echo-server.h
 create mode 100644 src/quic/quic-applications/model/quic-server.cc
 create mode 100644 src/quic/quic-applications/model/quic-server.h
 create mode 100644 src/quic/test/quic-header-test.cc
 create mode 100644 src/quic/test/quic-rx-buffer-test.cc
 create mode 100644 src/quic/test/quic-tx-buffer-test.cc
 create mode 100644 src/quic/wscript

diff --git a/.gitignore b/.gitignore
index fe9a55f73..36f72e0c4 100644
--- a/.gitignore
+++ b/.gitignore
@@ -49,3 +49,5 @@ cmake-build-release/
 .vscode/*
 !.vscode/launch.json
 !.vscode/tasks.json
+
+/output
\ No newline at end of file
diff --git a/.gitmodules b/.gitmodules
new file mode 100644
index 000000000..e69de29bb
diff --git a/scratch/.gitignore b/scratch/.gitignore
deleted file mode 100644
index d29af8d20..000000000
--- a/scratch/.gitignore
+++ /dev/null
@@ -1,6 +0,0 @@
-# Ignore everything on scratch by default, except the provided examples
-/*
-!.gitignore
-!subdir/
-!scratch-simulator.cc
-!CMakeLists.txt
diff --git a/scratch/EFM-Localization-Stuff/config-schema.json b/scratch/EFM-Localization-Stuff/config-schema.json
new file mode 100644
index 000000000..f8469f51d
--- /dev/null
+++ b/scratch/EFM-Localization-Stuff/config-schema.json
@@ -0,0 +1,158 @@
+{
+    "type": "object",
+    "properties": {
+        "usedProt": {
+            "type": "string",
+            "enum": ["QUIC", "TCP"]
+        },
+        "topology": {
+            "type": "string",
+            "enum": [
+                "TELEKOM_GLOBAL",
+                "TELEKOM_GERMANY",
+                "GEANT",
+                "GEANT2",
+                "VALIDATION",
+                "DFN",
+                "LUMEN",
+                "SPRINT",
+                "GTT",
+                "CESNET"
+            ]
+        },
+        "rngSeed": {"type": "integer", "minimum": 0},
+        "rngRun": {"type": "integer", "minimum": 0},
+        "simStopMs" : {"type": "integer", "minimum": 1},
+        "bblDataRate": {"type": "string"},
+        "bblDelayMus": {"type": "integer", "minimum": 0},
+        "bblOverride": {
+            "type": "array",
+            "items": {
+                "type" : "object",
+                "properties": {
+                    "link": {"type": "string"},
+                    "delayMus": {"type": "integer", "minimum": 0}
+                },
+                "required": ["link", "delayMus"]
+            }
+        },
+        "bblQueueSize": {"type": "string"},
+        "ehlDataRate": {"type": "string"},
+        "ehlDelayMus": {"type": "integer", "minimum": 0},
+        "ehlQueueSize": {"type": "string"},
+        "l4MSS": {"type": "integer", "minimum": 500, "maximum": 1460},
+        "l4SndBufMaxBytes": {"type": "integer", "minimum": 4096, "maximum": 1073725440},
+        "l4RcvBufMaxBytes": {"type": "integer", "minimum": 4096, "maximum": 1073725440},
+        "l4RTOms": {"type": "integer", "minimum": 10, "maximum": 60000},
+        "tcpSACK": {"type": "boolean"},
+        "ehSStartMs" : {"type": "integer", "minimum": 1},
+        "ehSStartRandOffsetMs" : {"type": "integer", "minimum": 0},
+        "ehSStopMs" : {"type": "integer", "minimum": 2},
+        "ipv4PrefixLength": {"type": "integer", "minimum": 0, "maximum": 32},
+        "ipv6PrefixLength": {"type": "integer", "minimum": 0, "maximum": 128},
+        "matchPathBy": {
+            "type": "string",
+            "enum": ["SRC", "DST", "BOTH"]
+        },
+        "dartReportingIntervalMus": {"type": "integer", "minimum": 0},
+        "serverTPConnEst": {"$ref": "#/$defs/transmissionProfile"},
+        "serverTPNormalPktRcv": {"$ref": "#/$defs/transmissionProfile"},
+        "serverTPFinalPktRcv": {"$ref": "#/$defs/transmissionProfile"},
+        "clientTPConnEst": {"$ref": "#/$defs/transmissionProfile"},
+        "clientTPNormalPktRcv": {"$ref": "#/$defs/transmissionProfile"},
+        "clientTPFinalPktRcv": {"$ref": "#/$defs/transmissionProfile"},
+        "trafficScenario":{
+            "type": "string",
+            "enum": ["ALL_TO_ALL", "ALL_TO_ANY", "SOME_TO_SOME"]
+        },
+        "trafficScenarioRatio": {"type": "number", "minimum": 1},
+        "cSMatching": {"type": "array", "items": {"type": "string"}},
+        "enablePing": {"type": "boolean"},
+        "pingIntervalMs": {"type": "integer", "minimum": 1},
+        "pingPacketCount": {"type": "integer", "minimum": 1},
+        "pingScenario":{
+            "type": "string",
+            "enum": ["ALL_TO_ALL", "ALL_TO_ANY", "SOME_TO_SOME"]
+        },
+        "pingScenarioRatio": {"type": "number", "minimum": 1},
+        "cSPingMatching": {"type": "array", "items": {"type": "string"}},
+        "failedLinks": {
+            "type": "array",
+            "items": {
+                "type" : "object",
+                "properties": {
+                    "link": {"type": "string"},
+                    "lossRate": {"type": "number", "minimum": 0.0},
+                    "delayMs": {"type": "integer", "minimum": 0}
+                },
+                "anyOf" : [
+                    {"required": ["link", "lossRate"]},
+                    {"required": ["link", "delayMs"]}
+                ]
+            }
+        },
+        "pingPlacementScheme": {
+            "type": "string"
+        },
+        "pingFlowsPerHost": {
+            "type": "number"
+        },
+        "pingFlowsOverall": {
+            "type": "integer"
+        },
+        "trafficFlowsPerHost": {
+            "type": "integer"
+        },
+        "trafficFlowsOverall": {
+            "type": "integer"
+        }
+    },
+    "required":[
+        "usedProt",
+        "topology",
+        "rngSeed",
+        "rngRun",
+        "simStopMs",
+        "bblDataRate",
+        "bblDelayMus",
+        "bblQueueSize",
+        "ehlDataRate",
+        "ehlDelayMus",
+        "ehlQueueSize",
+        "l4MSS",
+        "l4SndBufMaxBytes",
+        "l4RcvBufMaxBytes",
+        "l4RTOms",
+        "ehSStartMs",
+        "ehSStartRandOffsetMs",
+        "ehSStopMs",
+        "ipv4PrefixLength",
+        "ipv6PrefixLength",
+        "matchPathBy",
+        "dartReportingIntervalMus",
+        "trafficScenario",
+        "trafficScenarioRatio",
+        "cSMatching",
+        "failedLinks"
+    ],
+    "additionalProperties": false,
+    "$defs": {
+        "transmissionProfile" : {
+            "type" : "object",
+            "properties" : {
+                "packets": {"type": "integer", "minimum": 0},
+                "maxBytes": {"type": "integer", "minimum": 0},
+                "packetSize": {"type": "integer", "minimum": 4},
+                "transmissionIntervalMus": {"type": "integer", "minimum": 0},
+                "pauseAfterPackets": {"type": "integer", "minimum": 0},
+                "pauseAfterBytes": {"type": "integer", "minimum": 0},
+                "transmissionPauseMus": {"type": "integer", "minimum": 0},
+                "initialDelayMus": {"type": "integer", "minimum": 0}
+            },
+            "anyOf": [
+                {"required": ["packets", "transmissionIntervalMus"]},
+                {"required": ["maxBytes"]}
+            ]
+        }
+    }
+}
\ No newline at end of file
diff --git a/scratch/EFM-Localization-Stuff/config-validator.py b/scratch/EFM-Localization-Stuff/config-validator.py
new file mode 100644
index 000000000..c2a508665
--- /dev/null
+++ b/scratch/EFM-Localization-Stuff/config-validator.py
@@ -0,0 +1,18 @@
+from jsonschema import validate
+import json
+import sys
+
+def validateConfig(schemaFile, configFile):
+    with open(schemaFile) as schemaFile:
+        schema = json.load(schemaFile)
+
+    with open(configFile) as configFile:
+        config = json.load(configFile)
+
+    validate(schema=schema, instance=config)
+
+if (len(sys.argv) != 2):
+    print("Usage: python config-validator.py <config-file>")
+    sys.exit(1)
+
+validateConfig("./config-schema.json", sys.argv[1])
diff --git a/scratch/EFM-Localization-Stuff/config.json b/scratch/EFM-Localization-Stuff/config.json
new file mode 100644
index 000000000..7e1eae2aa
--- /dev/null
+++ b/scratch/EFM-Localization-Stuff/config.json
@@ -0,0 +1,68 @@
+{
+    "usedProt": "TCP",
+    "topology": "GEANT",
+    "rngSeed": 1,
+    "rngRun": 2,
+    "simStopMs": 1200000,
+    "bblDataRate": "100Gbps",
+    "bblDelayMus": 1000,
+    "bblOverride": [
+        {
+            "link": "1:33",
+            "delayMus": 10000
+        }
+    ],
+    "bblQueueSize": "100kp",
+    "ehlDataRate": "50Mb/s",
+    "ehlDelayMus": 10000,
+    "ehlQueueSize": "200p",
+    "l4MSS": 1400,
+    "l4SndBufMaxBytes": 524288,
+    "l4RcvBufMaxBytes": 524288,
+    "l4RTOms": 200,
+    "tcpSACK": false,
+    "ehSStartMs": 2000,
+    "ehSStartRandOffsetMs": 0,
+    "ehSStopMs": 600000,
+    "ipv4PrefixLength": 24,
+    "ipv6PrefixLength": 64,
+    "matchPathBy": "BOTH",
+    "dartReportingIntervalMus": 5000,
+    "clientTPConnEst": {
+        "packets": 1,
+        "maxBytes": 0,
+        "packetSize": 1000,
+        "transmissionIntervalMus": 1,
+        "pauseAfterPackets": 0,
+        "pauseAfterBytes": 0,
+        "transmissionPauseMus": 0,
+        "initialDelayMus": 0
+    },
+    "serverTPFinalPktRcv": {
+        "packets": 0,
+        "maxBytes": 5000000,
+        "packetSize": 1400,
+        "transmissionIntervalMus": 0,
+        "pauseAfterPackets": 0,
+        "pauseAfterBytes": 0,
+        "transmissionPauseMus": 0,
+        "initialDelayMus": 0
+    },
+    "trafficScenario": "ALL_TO_ANY",
+    "trafficScenarioRatio": 1,
+    "cSMatching": [
+        "1:1"
+    ],
+    "enablePing": true,
+    "pingIntervalMs": 1000,
+    "pingPacketCount": 200,
+    "pingScenario": "ALL_TO_ALL",
+    "pingScenarioRatio": 1,
+    "cSPingMatching": [],
+    "failedLinks": [
+        {
+            "link": "2:4",
+            "lossRate": 0.01
+        }
+    ]
+}
\ No newline at end of file
diff --git a/scratch/EFM-Localization-Stuff/topologies/Geant-2023.txt b/scratch/EFM-Localization-Stuff/topologies/Geant-2023.txt
new file mode 100644
index 000000000..faee71e55
--- /dev/null
+++ b/scratch/EFM-Localization-Stuff/topologies/Geant-2023.txt
@@ -0,0 +1,116 @@
+node,0,"Porto"
+node,1,"Lisbon"
+node,2,"Sines"
+node,3,"Bilbao"
+node,4,"Madrid"
+node,5,"Paris"
+node,6,"London"
+node,7,"Dublin"
+node,8,"Cork"
+node,9,"Reykjavík"
+node,10,"Oslo"
+node,11,"Stockholm"
+node,12,"Helsinki"
+node,13,"Copenhagen"
+node,14,"Amsterdam"
+node,15,"Brussels"
+node,16,"Luxembourg"
+node,17,"Hamburg"
+node,18,"Frankfurt"
+node,19,"Geneva"
+node,20,"Marseille"
+node,21,"Milan"
+node,22,"Berlin"
+node,23,"Prague"
+node,24,"Vienna"
+node,25,"Tartu"
+node,26,"Riga"
+node,27,"Kaunas"
+node,28,"Poznań"
+node,29,"Bratislava"
+node,30,"Budapest"
+node,31,"Ljubljana"
+node,32,"Zagreb"
+node,33,"Belgrad"
+node,34,"Kyiv"
+node,35,"Chișinău"
+node,36,"Bucharest"
+node,37,"Sofia"
+node,38,"Skopje"
+node,39,"Istanbul"
+node,40,"Thessaloniki"
+node,41,"Athens"
+node,42,"Nicosia"
+node,43,"Tel Aviv"
+node,44,"Tirana"
+node,45,"Podgorica"
+node,46,"Valletta"
+link,2,1,0
+link,1,0,1
+link,0,3,2
+link,1,4,3
+link,3,4,4
+link,4,20,5
+link,3,5,6
+link,5,8,7
+link,7,8,8
+link,7,6,9
+link,9,13,10
+link,6,14,11
+link,6,5,12
+link,5,15,13
+link,5,19,14
+link,19,20,15
+link,20,21,16
+link,20,46,17
+link,20,43,18
+link,46,21,19
+link,14,15,20
+link,15,16,21
+link,16,18,22
+link,14,17,23
+link,14,18,24
+link,18,19,25
+link,19,21,26
+link,13,17,27
+link,13,10,28
+link,10,11,29
+link,11,12,30
+link,12,13,31
+link,13,22,32
+link,17,22,33
+link,18,23,34
+link,21,24,35
+link,21,31,36
+link,21,44,37
+link,21,41,38
+link,21,43,39
+link,20,42,40
+link,41,42,41
+link,41,40,42
+link,40,44,43
+link,44,45,44
+link,39,40,45
+link,37,39,46
+link,37,40,47
+link,38,40,48
+link,38,37,49
+link,45,33,50
+link,33,37,51
+link,32,33,52
+link,31,32,53
+link,37,36,54
+link,36,35,55
+link,35,34,56
+link,34,28,57
+link,30,36,58
+link,30,32,59
+link,29,30,60
+link,29,24,61
+link,24,23,62
+link,23,28,63
+link,28,22,64
+link,28,27,65
+link,27,26,66
+link,26,25,67
+link,12,25,68
diff --git a/scratch/EFM-Localization-Stuff/topologies/cesnet_topology.txt b/scratch/EFM-Localization-Stuff/topologies/cesnet_topology.txt
new file mode 100644
index 000000000..5ab3d6bf4
--- /dev/null
+++ b/scratch/EFM-Localization-Stuff/topologies/cesnet_topology.txt
@@ -0,0 +1,69 @@
+node,0,ACONET
+node,1,Brno
+node,2,Lednice
+node,3,SANET
+node,4,Vyškov
+node,5,České Budějovice
+node,6,Jindřichův Hradec
+node,7,Tábor
+node,8,Děčín
+node,9,Most
+node,10,Jihlava
+node,11,Plzeň
+node,12,Telč
+node,13,Hradec Králové
+node,14,Liberec
+node,15,Ústí nad Labem
+node,16,Olomouc
+node,17,Ostrava
+node,18,Karviná
+node,19,Opava
+node,20,Pionier
+node,21,Pardubice
+node,22,Cheb
+node,23,Praha
+node,24,Poděbrady
+node,25,AMS-IX
+node,26,GÉANT2
+node,27,NIX.cz
+node,28,Public Internet
+node,29,Zlín
+link,0,1,0
+link,1,2,1
+link,1,3,2
+link,1,4,3
+link,5,6,4
+link,5,7,5
+link,8,9,6
+link,1,10,7
+link,10,6,8
+link,10,11,9
+link,10,12,10
+link,13,14,11
+link,14,15,12
+link,9,11,13
+link,1,16,14
+link,13,16,15
+link,16,17,16
+link,1,17,17
+link,18,17,18
+link,19,17,19
+link,17,20,20
+link,13,21,21
+link,22,11,22
+link,11,23,23
+link,24,23,24
+link,25,23,25
+link,1,23,26
+link,5,23,27
+link,26,23,28
+link,13,23,29
+link,27,23,30
+link,21,23,31
+link,23,28,32
+link,23,15,33
+link,22,15,34
+link,8,15,35
+link,9,15,36
+link,1,29,37
+link,16,29,38
diff --git a/scratch/EFM-Localization-Stuff/topologies/telekom-germany-formatted.txt b/scratch/EFM-Localization-Stuff/topologies/telekom-germany-formatted.txt
new file mode 100644
index 000000000..caa7c9167
--- /dev/null
+++ b/scratch/EFM-Localization-Stuff/topologies/telekom-germany-formatted.txt
@@ -0,0 +1,195 @@
+node,0,"Flensburg"
+node,1,"Kiel"
+node,2,"Rostock"
+node,3,"Greifswald"
+node,4,"Lübeck"
+node,5,"Bremerhaven"
+node,6,"Hamburg"
+node,7,"Schwering"
+node,8,"Neubrandenburg"
+node,9,"Leer"
+node,10,"Oldenburg"
+node,11,"Bremen"
+node,12,"Lingen"
+node,13,"Osnabrück"
+node,14,"Hannover"
+node,15,"Berlin"
+node,16,"Braunschweig"
+node,17,"Brandenburg"
+node,18,"Frankfurt_Oder"
+node,19,"Münster"
+node,20,"Bielefeld"
+node,21,"Magdeburg"
+node,22,"Cottbus"
+node,23,"Wesel"
+node,24,"Paderborn"
+node,25,"Duisburg"
+node,26,"Essen"
+node,27,"Bochum"
+node,28,"Dortmund"
+node,29,"Meschede"
+node,30,"Göttingen"
+node,31,"Kassel"
+node,32,"Halle"
+node,33,"Leipzig"
+node,34,"Krefeld"
+node,35,"Düsseldorf"
+node,36,"Wuppertal"
+node,37,"Bautzen"
+node,38,"Dresden"
+node,39,"Köln"
+node,40,"Erfurt"
+node,41,"Aachen"
+node,42,"Siegen"
+node,43,"Bonn"
+node,44,"Gera"
+node,45,"Chemnitz"
+node,46,"Gießen"
+node,47,"Fulda"
+node,48,"Koblenz"
+node,49,"Frankfurt"
+node,50,"Hof"
+node,51,"Trier"
+node,52,"Mainz"
+node,53,"Darmstadt"
+node,54,"Würzburg"
+node,55,"Bayreuth"
+node,56,"Saarbrücken"
+node,57,"Kaiserslautern"
+node,58,"Manheim"
+node,59,"Nürnberg"
+node,60,"Heilbronn"
+node,61,"Karlsruhe"
+node,62,"Regensburg"
+node,63,"Stuttgart"
+node,64,"Offenburg"
+node,65,"Ulm"
+node,66,"Ausgburg"
+node,67,"Passau"
+node,68,"München"
+node,69,"Freiburg"
+node,70,"Rottweil"
+node,71,"Konstanz"
+node,72,"Kempten"
+node,73,"Traunstein"
+link,0,1,0
+link,0,6,1
+link,1,6,2
+link,2,4,3
+link,2,6,4
+link,3,8,5
+link,3,15,6
+link,4,6,7
+link,4,7,8
+link,5,10,9
+link,5,14,10
+link,6,7,11
+link,6,14,12
+link,6,33,13
+link,8,15,14
+link,9,10,15
+link,9,14,16
+link,10,11,17
+link,10,14,18
+link,11,14,19
+link,12,19,20
+link,12,28,21
+link,13,14,22
+link,13,20,23
+link,14,15,24
+link,14,16,25
+link,14,20,26
+link,14,24,27
+link,14,28,28
+link,14,30,29
+link,14,31,30
+link,14,39,31
+link,14,49,32
+link,15,17,33
+link,15,18,34
+link,15,22,35
+link,15,33,36
+link,16,30,37
+link,17,22,38
+link,18,22,39
+link,19,28,40
+link,19,29,41
+link,20,24,42
+link,21,32,43
+link,21,33,44
+link,21,40,45
+link,23,25,46
+link,23,28,47
+link,25,28,48
+link,26,28,49
+link,27,28,50
+link,28,29,51
+link,28,49,52
+link,30,31,53
+link,32,33,54
+link,33,14,55
+link,33,37,56
+link,33,38,57
+link,33,40,58
+link,33,44,59
+link,33,45,60
+link,33,49,61
+link,33,50,62
+link,33,63,63
+link,33,65,64
+link,33,68,65
+link,34,39,66
+link,35,36,67
+link,35,39,68
+link,36,39,69
+link,37,38,70
+link,38,45,71
+link,39,41,72
+link,39,42,73
+link,39,43,74
+link,39,49,75
+link,42,43,76
+link,44,50,77
+link,46,47,78
+link,46,48,79
+link,46,49,80
+link,47,49,81
+link,48,49,82
+link,49,51,83
+link,49,52,84
+link,49,53,85
+link,49,54,86
+link,49,56,87
+link,49,57,88
+link,49,58,89
+link,49,63,90
+link,49,65,91
+link,49,68,92
+link,51,52,93
+link,51,57,94
+link,52,53,95
+link,53,54,96
+link,55,59,97
+link,55,68,98
+link,56,57,99
+link,57,58,100
+link,59,62,101
+link,59,68,102
+link,60,61,103
+link,60,63,104
+link,61,63,105
+link,61,64,106
+link,62,68,107
+link,63,64,108
+link,63,69,109
+link,63,70,110
+link,64,69,111
+link,64,70,112
+link,65,66,113
+link,65,71,114
+link,65,72,115
+link,66,71,116
+link,66,72,117
+link,67,68,118
+link,67,73,119
+link,68,73,120
diff --git a/scratch/efm-sim/configuration.cc b/scratch/efm-sim/configuration.cc
new file mode 100644
index 000000000..5d29fbd78
--- /dev/null
+++ b/scratch/efm-sim/configuration.cc
@@ -0,0 +1,300 @@
+/*
+ * Copyright (C) 2025  RWTH Aachen University
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ * Authors: 
+ *  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+ *  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+ */
+
+#include "configuration.h"
+
+namespace simconfig
+{
+using json = nlohmann::json;
+
+void
+to_json(json &j, const Configuration &c)
+{
+  j = json{{"usedProt", c.usedProt},
+           {"topology", c.topology},
+           {"rngSeed", c.rngSeed},
+           {"rngRun", c.rngRun},
+           {"simStopMs", c.simStopMs},
+           {"bblDataRate", c.bblDataRate},
+           {"bblDelayMus", c.bblDelayMus},
+           {"bblOverride", c.bblOverride},
+           {"bblQueueSize", c.bblQueueSize},
+           {"ehlDataRate", c.ehlDataRate},
+           {"ehlDelayMus", c.ehlDelayMus},
+           {"ehlQueueSize", c.ehlQueueSize},
+           {"l4MSS", c.l4MSS},
+           {"l4SndBufMaxBytes", c.l4SndBufMaxBytes},
+           {"l4RcvBufMaxBytes", c.l4RcvBufMaxBytes},
+           {"l4RTOms", c.l4RTOms},
+           {"tcpSACK", c.tcpSACK},
+           {"ehSStartMs", c.ehSStartMs},
+           {"ehSStartRandOffsetMs", c.ehSStartRandOffsetMs},
+           {"ehSStopMs", c.ehSStopMs},
+           {"ipv4PrefixLength", c.ipv4PrefixLength},
+           {"ipv6PrefixLength", c.ipv6PrefixLength},
+           {"matchPathBy", c.matchPathBy},
+           {"dartReportingIntervalMus", c.dartReportingIntervalMus},
+           {"trafficScenario", c.trafficScenario},
+           {"trafficScenarioRatio", c.trafficScenarioRatio},
+           {"enablePing", c.enablePing},
+           {"failedLinks", c.failedLinks}};
+
+  if (c.enablePing)
+    {
+      j["pingIntervalMs"] = c.pingIntervalMs;
+      j["pingPacketCount"] = c.pingPacketCount;
+      j["pingScenario"] = c.pingScenario;
+      j["pingScenarioRatio"] = c.pingScenarioRatio;
+
+      json cSPingMatching = json::array ();
+
+      for (auto it = c.cSPingMatching.begin (); it != c.cSPingMatching.end (); it++)
+        {
+          for (auto sit = it->second.begin (); sit != it->second.end (); sit++)
+            {
+              cSPingMatching.push_back (std::to_string (it->first) + ":" + std::to_string (*sit));
+            }
+        }
+      j["cSPingMatching"] = cSPingMatching;
+    }
+
+  if (c.serverTPConnEst)
+    j["serverTPConnEst"] = *c.serverTPConnEst;
+  if (c.serverTPNormalPktRcv)
+    j["serverTPNormalPktRcv"] = *c.serverTPNormalPktRcv;
+  if (c.serverTPFinalPktRcv)
+    j["serverTPFinalPktRcv"] = *c.serverTPFinalPktRcv;
+  if (c.clientTPConnEst)
+    j["clientTPConnEst"] = *c.clientTPConnEst;
+  if (c.clientTPNormalPktRcv)
+    j["clientTPNormalPktRcv"] = *c.clientTPNormalPktRcv;
+  if (c.clientTPFinalPktRcv)
+    j["clientTPFinalPktRcv"] = *c.clientTPFinalPktRcv;
+  if (c.pingPlacementScheme != "-42")
+    j["pingPlacementScheme"] = c.pingPlacementScheme;
+  if (c.pingFlowsPerHost)
+    j["pingFlowsPerHost"] = c.pingFlowsPerHost;
+  if (c.pingFlowsOverall)
+    j["pingFlowsOverall"] = c.pingFlowsOverall;
+  if (c.trafficFlowsPerHost)
+    j["trafficFlowsPerHost"] = c.trafficFlowsPerHost;
+  if (c.trafficFlowsOverall)
+    j["trafficFlowsOverall"] = c.trafficFlowsOverall;
+
+  json csMatching = json::array ();
+
+  for (auto it = c.cSMatching.begin (); it != c.cSMatching.end (); it++)
+    {
+      for (auto sit = it->second.begin (); sit != it->second.end (); sit++)
+        {
+          csMatching.push_back (std::to_string (it->first) + ":" + std::to_string (*sit));
+        }
+    }
+  j["cSMatching"] = csMatching;
+}
+
+void
+from_json(const json &j, Configuration &c)
+{
+    j.at("usedProt").get_to(c.usedProt);
+    j.at("topology").get_to(c.topology);
+    j.at("rngSeed").get_to(c.rngSeed);
+    j.at("rngRun").get_to(c.rngRun);
+    j.at("simStopMs").get_to(c.simStopMs);
+    j.at("bblDataRate").get_to(c.bblDataRate);
+    j.at("bblDelayMus").get_to(c.bblDelayMus);
+
+    if (j.contains ("bblOverride"))
+      {
+        j.at ("bblOverride").get_to (c.bblOverride);
+      }
+    else
+      {
+        c.bblOverride = std::vector<LinkConfig> ();
+      }
+
+    j.at("bblQueueSize").get_to(c.bblQueueSize);
+    j.at("ehlDataRate").get_to(c.ehlDataRate);
+    j.at("ehlDelayMus").get_to(c.ehlDelayMus);
+    j.at("ehlQueueSize").get_to(c.ehlQueueSize);
+    j.at("l4MSS").get_to(c.l4MSS);
+    j.at("l4SndBufMaxBytes").get_to(c.l4SndBufMaxBytes);
+    j.at("l4RcvBufMaxBytes").get_to(c.l4RcvBufMaxBytes);
+    j.at("l4RTOms").get_to(c.l4RTOms);
+    c.tcpSACK = j.value("tcpSACK", false);
+    j.at("ehSStartMs").get_to(c.ehSStartMs);
+    j.at("ehSStartRandOffsetMs").get_to(c.ehSStartRandOffsetMs);
+    j.at("ehSStopMs").get_to(c.ehSStopMs);
+    j.at ("ipv4PrefixLength").get_to (c.ipv4PrefixLength);
+    j.at ("ipv6PrefixLength").get_to (c.ipv6PrefixLength);
+    j.at ("matchPathBy").get_to (c.matchPathBy);
+    j.at ("dartReportingIntervalMus").get_to (c.dartReportingIntervalMus);
+    if (j.contains ("serverTPConnEst"))
+    c.serverTPConnEst = j.at ("serverTPConnEst").get<TransmissionProfileConfig> ();
+    if (j.contains("serverTPNormalPktRcv"))
+        c.serverTPNormalPktRcv = j.at("serverTPNormalPktRcv").get<TransmissionProfileConfig>();
+    if (j.contains("serverTPFinalPktRcv"))
+        c.serverTPFinalPktRcv = j.at("serverTPFinalPktRcv").get<TransmissionProfileConfig>();
+    if (j.contains("clientTPConnEst"))
+        c.clientTPConnEst = j.at("clientTPConnEst").get<TransmissionProfileConfig>();
+    if (j.contains("clientTPNormalPktRcv"))
+        c.clientTPNormalPktRcv = j.at("clientTPNormalPktRcv").get<TransmissionProfileConfig>();
+    if (j.contains("clientTPFinalPktRcv"))
+        c.clientTPFinalPktRcv = j.at("clientTPFinalPktRcv").get<TransmissionProfileConfig>();
+    if (j.contains("pingPlacementScheme"))
+         j.at ("pingPlacementScheme").get_to (c.pingPlacementScheme);
+    if (j.contains("pingFlowsPerHost"))
+         j.at ("pingFlowsPerHost").get_to (c.pingFlowsPerHost);
+    if (j.contains("pingFlowsOverall"))
+         j.at ("pingFlowsOverall").get_to (c.pingFlowsOverall);
+    if (j.contains("trafficFlowsPerHost"))
+         j.at ("trafficFlowsPerHost").get_to (c.trafficFlowsPerHost);
+    if (j.contains("trafficFlowsOverall"))
+         j.at ("trafficFlowsOverall").get_to (c.trafficFlowsOverall);
+
+    j.at("trafficScenario").get_to(c.trafficScenario);
+    j.at ("trafficScenarioRatio").get_to (c.trafficScenarioRatio);
+
+    if (j.contains ("enablePing"))
+        c.enablePing = j.at ("enablePing").get_to (c.enablePing);
+    else
+        c.enablePing = false;
+
+    if (c.enablePing)
+        {
+      if (!(j.contains ("pingIntervalMs") && j.contains ("pingPacketCount") &&
+            j.contains ("pingScenario") && j.contains ("pingScenarioRatio") &&
+            j.contains ("cSPingMatching")))
+        {
+          NS_FATAL_ERROR ("Ping enabled but not all required parameters are present");
+        }
+      j.at ("pingIntervalMs").get_to (c.pingIntervalMs);
+      j.at ("pingPacketCount").get_to (c.pingPacketCount);
+      j.at ("pingScenario").get_to (c.pingScenario);
+      j.at ("pingScenarioRatio").get_to (c.pingScenarioRatio);
+
+      json cspJ = j.at ("cSPingMatching");
+      NS_ASSERT (cspJ.is_array ());
+      for (json::iterator it = cspJ.begin (); it != cspJ.end (); ++it)
+        {
+          std::string content = it->get<std::string> ();
+          size_t index = content.find (':');
+          uint32_t clientId = std::stoi (content.substr (0, index));
+          uint32_t serverId = std::stoi (content.substr (index + 1));
+
+          if (clientId == serverId)
+            NS_FATAL_ERROR (
+                "Ping enabled but client and server are the same node in cSPingMatching");
+
+          std::set<uint32_t> &servers = c.cSPingMatching[clientId];
+          servers.insert (serverId);
+        }
+        }
+
+    j.at("failedLinks").get_to(c.failedLinks);
+
+    json csJ = j.at("cSMatching");
+    NS_ASSERT(csJ.is_array());
+    for (json::iterator it = csJ.begin(); it != csJ.end(); ++it)
+    {
+        std::string content = it->get<std::string>();
+        size_t index = content.find(':');
+        uint32_t clientId = std::stoi(content.substr(0, index));
+        uint32_t serverId = std::stoi(content.substr(index + 1));
+
+        std::set<uint32_t> &servers = c.cSMatching[clientId];
+        servers.insert(serverId);
+    }
+}
+
+void
+to_json(nlohmann::json &j, const FailedLink &fl)
+{
+    j = json{
+        {"link", fl.link},
+        {"lossRate", fl.lossRate},
+        {"delayMs", fl.delayMs}
+    };
+}
+
+void
+from_json(const nlohmann::json &j, FailedLink &fl)
+{
+    j.at("link").get_to(fl.link);
+    fl.lossRate = j.value("lossRate", 0.0);
+    fl.delayMs = j.value("delayMs", 0);
+}
+
+void
+to_json (nlohmann::json &j, const LinkConfig &lc)
+{
+  j = json{{"link", lc.link}, {"delayMus", lc.delayMus}};
+}
+
+void
+from_json (const nlohmann::json &j, LinkConfig &lc)
+{
+  j.at ("link").get_to (lc.link);
+  j.at ("delayMus").get_to (lc.delayMus);
+}
+
+void
+to_json(nlohmann::json &j, const TransmissionProfileConfig &tpc)
+{
+    if (tpc.packets)
+        j["packets"] = *tpc.packets;
+    if (tpc.maxBytes)
+        j["maxBytes"] = *tpc.maxBytes;
+    if (tpc.packetSize)
+        j["packetSize"] = *tpc.packetSize;
+    if (tpc.transmissionIntervalMus)
+        j["transmissionIntervalMus"] = *tpc.transmissionIntervalMus;
+    if (tpc.pauseAfterPackets)
+        j["pauseAfterPackets"] = *tpc.pauseAfterPackets;
+    if (tpc.pauseAfterBytes)
+        j["pauseAfterBytes"] = *tpc.pauseAfterBytes;
+    if (tpc.transmissionPauseMus)
+        j["transmissionPauseMus"] = *tpc.transmissionPauseMus;
+    if (tpc.initialDelayMus)
+        j["initialDelayMus"] = *tpc.initialDelayMus;
+}
+
+void
+from_json(const nlohmann::json &j, TransmissionProfileConfig &tpc)
+{
+    if (j.contains("packets"))
+        tpc.packets = j.at("packets").get<uint32_t>();
+    if (j.contains("maxBytes"))
+        tpc.maxBytes = j.at("maxBytes").get<uint32_t>();
+    if (j.contains("packetSize"))
+        tpc.packetSize = j.at("packetSize").get<uint32_t>();
+    if (j.contains("transmissionIntervalMus"))
+        tpc.transmissionIntervalMus = j.at("transmissionIntervalMus").get<uint32_t>();
+    if (j.contains("pauseAfterPackets"))
+        tpc.pauseAfterPackets = j.at("pauseAfterPackets").get<uint32_t>();
+    if (j.contains("pauseAfterBytes"))
+        tpc.pauseAfterBytes = j.at("pauseAfterBytes").get<uint32_t>();
+    if (j.contains("transmissionPauseMus"))
+        tpc.transmissionPauseMus = j.at("transmissionPauseMus").get<uint32_t>();
+    if (j.contains("packets"))
+        tpc.packets = j.at("packets").get<uint32_t>();
+}
+
+}
\ No newline at end of file
diff --git a/scratch/efm-sim/configuration.h b/scratch/efm-sim/configuration.h
new file mode 100644
index 000000000..f6884d2c4
--- /dev/null
+++ b/scratch/efm-sim/configuration.h
@@ -0,0 +1,159 @@
+/*
+ * Copyright (C) 2025  RWTH Aachen University
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ * Authors: 
+ *  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+ *  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+ */
+
+#ifndef CONFIGURATION_H
+#define CONFIGURATION_H
+
+#include "ns3/efm-qlog-module.h"
+
+namespace simconfig
+{
+
+
+enum class Protocol{
+  TCP,
+  QUIC
+};
+
+NLOHMANN_JSON_SERIALIZE_ENUM(Protocol, {
+  {Protocol::TCP, "TCP"},
+  {Protocol::QUIC, "QUIC"}
+})
+
+enum class Topology { TELEKOM_GLOBAL, TELEKOM_GERMANY, GEANT, GEANT2, VALIDATION, DFN, SPRINT, LUMEN, GTT, CESNET};
+
+NLOHMANN_JSON_SERIALIZE_ENUM (Topology, {{Topology::TELEKOM_GLOBAL, "TELEKOM_GLOBAL"},
+                                         {Topology::TELEKOM_GERMANY, "TELEKOM_GERMANY"},
+                                         {Topology::GEANT, "GEANT"},
+                                         {Topology::GEANT2, "GEANT2"},
+                                         {Topology::VALIDATION, "VALIDATION"},
+                                         {Topology::DFN, "DFN"},
+                                         {Topology::SPRINT, "SPRINT"},
+                                         {Topology::LUMEN, "LUMEN"},
+                                         {Topology::GTT, "GTT"},
+                                         {Topology::CESNET, "CESNET"}})
+
+struct TransmissionProfileConfig {
+  std::optional<uint32_t> packets;
+  std::optional<uint32_t> maxBytes;
+  std::optional<uint32_t> packetSize;
+  std::optional<uint32_t> transmissionIntervalMus;
+  std::optional<uint32_t> pauseAfterPackets;
+  std::optional<uint32_t> pauseAfterBytes;
+  std::optional<uint32_t> transmissionPauseMus;
+  std::optional<uint32_t> initialDelayMus;
+};
+
+void to_json(nlohmann::json &j, const TransmissionProfileConfig &tpc);
+void from_json(const nlohmann::json &j, TransmissionProfileConfig &tpc);
+
+enum class TrafficScenario{
+  ALL_TO_ALL,
+  ALL_TO_ANY,
+  SOME_TO_SOME
+};
+
+NLOHMANN_JSON_SERIALIZE_ENUM(TrafficScenario, {
+  {TrafficScenario::ALL_TO_ALL, "ALL_TO_ALL"},
+  {TrafficScenario::ALL_TO_ANY, "ALL_TO_ANY"},
+  {TrafficScenario::SOME_TO_SOME, "SOME_TO_SOME"}
+})
+
+enum class PathMatching { SRC, DST, BOTH };
+
+NLOHMANN_JSON_SERIALIZE_ENUM (PathMatching, {{PathMatching::SRC, "SRC"},
+                                             {PathMatching::DST, "DST"},
+                                             {PathMatching::BOTH, "BOTH"}})
+
+struct FailedLink
+{
+  std::string link;
+  double lossRate;
+  uint16_t delayMs;
+};
+
+void to_json(nlohmann::json &j, const FailedLink &fl);
+void from_json(const nlohmann::json &j, FailedLink &fl);
+
+struct LinkConfig
+{
+  std::string link;
+  uint16_t delayMus;
+};
+
+void to_json (nlohmann::json &j, const LinkConfig &lc);
+void from_json (const nlohmann::json &j, LinkConfig &lc);
+
+struct Configuration
+{
+  Protocol usedProt;
+  Topology topology;
+  uint32_t rngSeed;
+  uint32_t rngRun;
+  uint32_t simStopMs;
+  std::string bblDataRate;
+  uint32_t bblDelayMus;
+  std::vector<LinkConfig> bblOverride;
+  std::string bblQueueSize;
+  std::string ehlDataRate;
+  uint32_t ehlDelayMus;
+  std::string ehlQueueSize;
+  uint32_t l4MSS;
+  uint32_t l4SndBufMaxBytes;
+  uint32_t l4RcvBufMaxBytes;
+  uint32_t l4RTOms;
+  bool tcpSACK;
+  uint32_t ehSStartMs;
+  uint32_t ehSStartRandOffsetMs;
+  uint32_t ehSStopMs;
+  uint32_t ipv4PrefixLength;
+  uint32_t ipv6PrefixLength;
+  PathMatching matchPathBy;
+  uint32_t dartReportingIntervalMus;
+  std::optional<TransmissionProfileConfig> serverTPConnEst;
+  std::optional<TransmissionProfileConfig> serverTPNormalPktRcv;
+  std::optional<TransmissionProfileConfig> serverTPFinalPktRcv;
+  std::optional<TransmissionProfileConfig> clientTPConnEst;
+  std::optional<TransmissionProfileConfig> clientTPNormalPktRcv;
+  std::optional<TransmissionProfileConfig> clientTPFinalPktRcv;
+  TrafficScenario trafficScenario;
+  uint32_t trafficScenarioRatio;
+  std::map<uint32_t, std::set<uint32_t>> cSMatching; //Matches clients with servers for sending via nodeId
+  bool enablePing;
+  uint32_t pingIntervalMs;
+  uint32_t pingPacketCount;
+  TrafficScenario pingScenario;
+  uint32_t pingScenarioRatio;
+  std::map<uint32_t, std::set<uint32_t>>
+      cSPingMatching; //Matches ping clients with servers for sending via nodeId
+  std::vector<FailedLink> failedLinks;
+  std::string pingPlacementScheme = "-42";
+  double pingFlowsPerHost;
+  uint32_t pingFlowsOverall;
+  uint32_t trafficFlowsPerHost;
+  uint32_t trafficFlowsOverall;
+};
+
+void to_json(nlohmann::json &j, const Configuration &c);
+void from_json(const nlohmann::json &j, Configuration &c);
+
+}
+
+#endif // CONFIGURATION_H
diff --git a/scratch/efm-sim/efm-localization-test.cc b/scratch/efm-sim/efm-localization-test.cc
new file mode 100644
index 000000000..2c5c27e81
--- /dev/null
+++ b/scratch/efm-sim/efm-localization-test.cc
@@ -0,0 +1,1329 @@
+/*
+ * Copyright (C) 2025  RWTH Aachen University
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ * Authors: 
+ *  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+ *  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+ */
+
+#include "ns3/core-module.h"
+#include "ns3/network-module.h"
+#include "ns3/internet-module.h"
+#include "ns3/quic-module.h"
+#include "ns3/point-to-point-module.h"
+#include "ns3/point-to-point-layout-module.h"
+#include "ns3/traffic-control-module.h"
+#include "ns3/applications-module.h"
+#include "ns3/v4traceroute-helper.h"
+//#include "ns3/flow-monitor-module.h"
+#include "ns3/efm-monitor-module.h"
+#include "ns3/efm-manager-module.h"
+#include <iostream>
+#include <fstream>
+#include <filesystem>
+#include "ns3/efm-qlog-module.h"
+#include "ns3/better-ping-tracker.h"
+
+#include "configuration.h"
+#include "groundtruth-collector.h"
+
+// Network Topology
+//
+// 10.1.1.0   10.1.2.0  10.1.3.0
+// n0 ----- n1 ------ n2 ------ n3
+//    dumbbell topology with 1 leaf node on each side
+//    allows to spin bit implementation with a very simple setup
+//
+
+#include <cstdint>
+
+class TopologyNode
+{
+
+public:
+  int id;
+  std::string label;
+  TopologyNode ()
+  {
+  }
+};
+
+class TopologyLink
+{
+
+public:
+  int node_1_id;
+  int node_2_id;
+  std::string link_id;
+  TopologyLink ()
+  {
+  }
+};
+
+struct CLIOptions
+{
+  std::string qlog_output_file_base = "efm-qlog";
+  std::string config_file_path = "scratch/EFM-Localization-Stuff/config.json";
+  std::string topology_dir = "scratch/EFM-Localization-Stuff/topologies/";
+  std::string output_dir = "output/";
+  uint32_t number_of_runs = 1;
+  uint32_t traces_per_file = 0;
+  uint32_t trace_events_per_file = 0;
+  uint32_t run_number_offset = 0;
+  bool disableObsvTraces = false;
+  bool disableHostTraces = false;
+  bool onTheFlyQlog = false;
+  bool disableOnTheFlyCompression = false; // For backwards compatibility
+};
+
+using namespace ns3;
+using simconfig::Configuration;
+
+NS_LOG_COMPONENT_DEFINE ("EFM Localization Test");
+
+static const uint32_t SERVER_PORT_OFFSET = 10;
+static std::map<simconfig::Topology, std::string> TOPOLOGY_FILES = {
+    {simconfig::Topology::GEANT2, "Geant-2023.txt"},
+    {simconfig::Topology::TELEKOM_GERMANY, "telekom-germany-formatted.txt"},
+    {simconfig::Topology::CESNET, "cesnet_topology.txt"}};
+
+//Entry [i][j] stores the netDev used by node i to connect to node j
+typedef std::map<uint32_t, std::map<uint32_t, Ptr<NetDevice>>> NetDevMap;
+
+Ipv4Address
+GetIpv4AddrOfNode (Ptr<Node> node)
+{
+  return node->GetObject<Ipv4L3Protocol> ()->GetInterface (1)->GetAddress (0).GetLocal ();
+}
+
+uint32_t
+GetNodeIdOfIPv4Address (Ipv4Address addr)
+{
+  for (auto it = NodeList::Begin (); it != NodeList::End (); it++)
+    {
+      if ((*it)->GetObject<Ipv4L3Protocol> ()->GetInterfaceForAddress (addr) != -1)
+        return (*it)->GetId ();
+    }
+  NS_FATAL_ERROR ("No node has this IP address: " << addr);
+}
+
+std::vector<uint32_t>
+GetNodeIdsOfIPv4Prefix (Ipv4Address addr, Ipv4Mask mask)
+{
+  std::vector<uint32_t> nodes;
+  for (auto it = NodeList::Begin (); it != NodeList::End (); it++)
+    {
+      if ((*it)->GetObject<Ipv4L3Protocol> ()->GetInterfaceForPrefix (addr, mask) != -1)
+        nodes.push_back ((*it)->GetId ());
+    }
+  return nodes;
+}
+
+Configuration
+ReadConfig (std::string filePath)
+{
+  std::ifstream configFile;
+  configFile.open (filePath);
+  if (!configFile.is_open ())
+    {
+      NS_FATAL_ERROR ("Could not open config file.");
+    }
+
+  json config_j;
+  configFile >> config_j; //Parse json
+  configFile.close ();
+  return config_j.get<Configuration> ();
+}
+
+void
+GenerateMissingConfigs (Configuration &config, uint32_t nodeCount)
+{
+
+  //Handle client-server matching
+  if (config.trafficScenario == simconfig::TrafficScenario::ALL_TO_ALL)
+    {
+      for (uint32_t clientId = 0; clientId < nodeCount; clientId++)
+        {
+          std::set<uint32_t> &servers = config.cSMatching[clientId];
+          for (uint32_t serverId = 0; serverId < nodeCount; serverId++)
+            {
+              servers.insert (serverId);
+            }
+        }
+    }
+  else if (config.trafficScenario == simconfig::TrafficScenario::ALL_TO_ANY)
+    {
+      uint32_t serversPerClient =
+          config.trafficScenarioRatio > nodeCount ? nodeCount : config.trafficScenarioRatio;
+      Ptr<UniformRandomVariable> randVar = CreateObject<UniformRandomVariable> ();
+      for (uint32_t clientId = 0; clientId < nodeCount; clientId++)
+        {
+          std::set<uint32_t> &servers = config.cSMatching[clientId];
+          while (servers.size () < serversPerClient)
+            {
+              servers.insert (randVar->GetInteger (0, nodeCount - 1));
+            }
+        }
+    }
+
+  // Handle ping matching
+  if (config.enablePing)
+    {
+      if (config.pingScenario == simconfig::TrafficScenario::ALL_TO_ALL)
+        {
+          for (uint32_t clientId = 0; clientId < nodeCount; clientId++)
+            {
+              std::set<uint32_t> &servers = config.cSPingMatching[clientId];
+              for (uint32_t serverId = 0; serverId < nodeCount; serverId++)
+                {
+                  if (clientId != serverId)
+                    servers.insert (serverId);
+                }
+            }
+        }
+      else if (config.pingScenario == simconfig::TrafficScenario::ALL_TO_ANY)
+        {
+          uint32_t serversPerClient =
+              config.pingScenarioRatio > (nodeCount -1) ? (nodeCount -1) : config.pingScenarioRatio;
+          Ptr<UniformRandomVariable> randVar = CreateObject<UniformRandomVariable> ();
+          for (uint32_t clientId = 0; clientId < nodeCount; clientId++)
+            {
+              std::set<uint32_t> &servers = config.cSPingMatching[clientId];
+              while (servers.size () < serversPerClient)
+                {
+                  auto server = randVar->GetInteger (0, nodeCount - 1);
+                  if (clientId != server)
+                    servers.insert (server);
+                }
+            }
+        }
+    }
+}
+
+void
+ReadTopology (const Configuration &config, std::string basePath, std::vector<TopologyNode> &nodes,
+              std::vector<TopologyLink> &links)
+{
+  std::ifstream myfile;
+  myfile.open (basePath + TOPOLOGY_FILES[config.topology]);
+  if (myfile.is_open ())
+    {
+      std::string line;
+      std::string delimiter = ",";
+
+      while (std::getline (myfile, line))
+        {
+
+          size_t pos = 0;
+          std::string token;
+          if ((pos = line.find (delimiter)) != std::string::npos)
+            {
+              token = line.substr (0, pos);
+
+              if (token == "node")
+                {
+                  line.erase (0, pos + delimiter.length ());
+
+                  TopologyNode myNode = TopologyNode ();
+
+                  pos = line.find (delimiter);
+                  token = line.substr (0, pos);
+                  myNode.id = std::stoi (token);
+                  line.erase (0, pos + delimiter.length ());
+
+                  token = line;
+                  myNode.label = token;
+
+                  nodes.push_back (myNode);
+                }
+              else if (token == "link")
+                {
+                  line.erase (0, pos + delimiter.length ());
+
+                  TopologyLink myLink = TopologyLink ();
+
+                  pos = line.find (delimiter);
+                  token = line.substr (0, pos);
+                  myLink.node_1_id = std::stoi (token);
+                  line.erase (0, pos + delimiter.length ());
+
+                  pos = line.find (delimiter);
+                  token = line.substr (0, pos);
+                  myLink.node_2_id = std::stoi (token);
+                  line.erase (0, pos + delimiter.length ());
+
+                  token = line;
+                  myLink.link_id = token;
+
+                  links.push_back (myLink);
+                }
+            }
+        }
+      myfile.close ();
+    }
+  else
+    {
+      NS_FATAL_ERROR ("Could not open topology file.");
+    }
+}
+
+void
+SetGlobalDefaults (const Configuration &config)
+{
+  //Set global defaults
+  if (config.usedProt == simconfig::Protocol::QUIC)
+    {
+      Config::SetDefault ("ns3::QuicSocketBase::MaxPacketSize", UintegerValue (config.l4MSS));
+      Config::SetDefault ("ns3::QuicSocketBase::SocketSndBufSize",
+                          UintegerValue (config.l4SndBufMaxBytes));
+      Config::SetDefault ("ns3::QuicSocketBase::SocketRcvBufSize",
+                          UintegerValue (config.l4RcvBufMaxBytes));
+      Config::SetDefault ("ns3::QuicSocketBase::kMinRTOTimeout",
+                          TimeValue (MilliSeconds (config.l4RTOms)));
+    }
+  else if (config.usedProt == simconfig::Protocol::TCP)
+    {
+      Config::SetDefault ("ns3::TcpSocket::SegmentSize", UintegerValue (config.l4MSS));
+      Config::SetDefault ("ns3::TcpSocket::SndBufSize", UintegerValue (config.l4SndBufMaxBytes));
+      Config::SetDefault ("ns3::TcpSocket::RcvBufSize", UintegerValue (config.l4RcvBufMaxBytes));
+      Config::SetDefault ("ns3::TcpSocketBase::MinRto", TimeValue (MilliSeconds (config.l4RTOms)));
+      Config::SetDefault ("ns3::TcpSocketBase::Sack", BooleanValue (config.tcpSACK));
+    }
+  else
+    NS_FATAL_ERROR ("Invalid protocol config.");
+}
+
+void
+SetupBackbone (const Configuration &config, uint32_t nodeCount,
+               const std::vector<TopologyLink> &link_specs, Ipv4AddressHelper &ipAddrHelper,
+               NodeContainer &nodes, NetDevMap &netDevMap)
+{
+  nodes.Create (nodeCount);
+
+  // Equip backbone nodes with Internet stack
+  InternetStackHelper internet_stack_builder;
+  internet_stack_builder.Install (nodes);
+
+  // Point to point helper to set up links between backbone nodes
+  PointToPointHelper linkCreator_Backbone;
+  linkCreator_Backbone.SetDeviceAttribute ("DataRate", StringValue (config.bblDataRate));
+  linkCreator_Backbone.SetQueue ("ns3::DropTailQueue<Packet>", "MaxSize",
+                                 QueueSizeValue (QueueSize (config.bblQueueSize)));
+  linkCreator_Backbone.SetChannelAttribute ("Delay", TimeValue (MicroSeconds (config.bblDelayMus)));
+
+  //Used to find nodes without links
+  std::set<uint32_t> unassignedNodes;
+  for (uint32_t i = 0; i < nodes.GetN (); i++)
+    {
+      unassignedNodes.insert (i);
+    }
+
+  // Create one ns3 link for each link in the topology file
+  for (const TopologyLink &current_link : link_specs)
+    {
+      NetDeviceContainer cur_net_devices = linkCreator_Backbone.Install (
+          nodes.Get (current_link.node_1_id), nodes.Get (current_link.node_2_id));
+
+      ipAddrHelper.Assign (cur_net_devices);
+      ipAddrHelper.NewNetwork ();
+      netDevMap[current_link.node_1_id][current_link.node_2_id] = cur_net_devices.Get (0);
+      netDevMap[current_link.node_2_id][current_link.node_1_id] = cur_net_devices.Get (1);
+
+      unassignedNodes.erase (current_link.node_1_id);
+      unassignedNodes.erase (current_link.node_2_id);
+    }
+
+  if (unassignedNodes.size () > 0)
+    {
+      std::cout << "Nodes without links:";
+      for (auto it = unassignedNodes.begin (); it != unassignedNodes.end (); ++it)
+        std::cout << ' ' << *it;
+      std::cout << std::endl;
+    }
+}
+
+std::vector<TopologyLink>
+EndhostSetupHelper (const NodeContainer &backbone_nodes, Ipv4AddressHelper &ipAddrHelper,
+                    PointToPointHelper &linkCreator_Edge, NodeContainer &nodes,
+                    NetDevMap &netDevMap, uint32_t &linkIdOffset)
+{
+  nodes.Create (backbone_nodes.GetN ());
+
+  QuicHelper stack;
+  stack.InstallQuic (nodes);
+
+  std::vector<TopologyLink> links;
+
+  for (uint32_t i = 0; i < backbone_nodes.GetN (); i++)
+    {
+      NetDeviceContainer cur_net_devices =
+          linkCreator_Edge.Install (backbone_nodes.Get (i), nodes.Get (i));
+      TopologyLink edgeLink;
+      edgeLink.node_1_id = backbone_nodes.Get (i)->GetId ();
+      edgeLink.node_2_id = nodes.Get (i)->GetId ();
+      edgeLink.link_id = "el_" + std::to_string (linkIdOffset);
+      linkIdOffset++;
+      links.push_back (edgeLink);
+      ipAddrHelper.Assign (cur_net_devices);
+      ipAddrHelper.NewNetwork ();
+      netDevMap[backbone_nodes.Get (i)->GetId ()][nodes.Get (i)->GetId ()] =
+          cur_net_devices.Get (0);
+      netDevMap[nodes.Get (i)->GetId ()][backbone_nodes.Get (i)->GetId ()] =
+          cur_net_devices.Get (1);
+    }
+  return links;
+}
+
+std::vector<TopologyLink>
+SetupEndhosts (const Configuration &config, const NodeContainer &backbone_nodes,
+               Ipv4AddressHelper &ipAddrHelper, NodeContainer &server_nodes,
+               NodeContainer &client_nodes, NetDevMap &netDevMap)
+{
+  // Set up point to point helper
+  PointToPointHelper linkCreator_Edge;
+  linkCreator_Edge.SetDeviceAttribute ("DataRate", StringValue (config.ehlDataRate));
+  linkCreator_Edge.SetChannelAttribute ("Delay", TimeValue (MicroSeconds (config.ehlDelayMus)));
+  linkCreator_Edge.SetQueue ("ns3::DropTailQueue<Packet>", "MaxSize",
+                             QueueSizeValue (QueueSize (config.ehlQueueSize)));
+
+  uint32_t firstEdgeLinkId = 0;
+  std::vector<TopologyLink> edgeLinks = EndhostSetupHelper (
+      backbone_nodes, ipAddrHelper, linkCreator_Edge, server_nodes, netDevMap, firstEdgeLinkId);
+  std::vector<TopologyLink> edgeLinksClients = EndhostSetupHelper (
+      backbone_nodes, ipAddrHelper, linkCreator_Edge, client_nodes, netDevMap, firstEdgeLinkId);
+  edgeLinks.insert (edgeLinks.end (), edgeLinksClients.begin (), edgeLinksClients.end ());
+  return edgeLinks;
+}
+
+TransmissionProfile
+ConvertTransmissionProfileConfig (const simconfig::TransmissionProfileConfig &tpc)
+{
+  TransmissionProfile tp;
+  if (tpc.packets)
+    tp.packets = *tpc.packets;
+  if (tpc.maxBytes)
+    tp.maxBytes = *tpc.maxBytes;
+  if (tpc.packetSize)
+    tp.packetSize = *tpc.packetSize;
+  if (tpc.transmissionIntervalMus)
+    tp.transInt = MicroSeconds (*tpc.transmissionIntervalMus);
+  if (tpc.pauseAfterPackets)
+    tp.pauseAfterPackets = *tpc.pauseAfterPackets;
+  if (tpc.pauseAfterBytes)
+    tp.pauseAfterBytes = *tpc.pauseAfterBytes;
+  if (tpc.transmissionPauseMus)
+    tp.transPause = MicroSeconds (*tpc.transmissionPauseMus);
+  if (tpc.initialDelayMus)
+    tp.initialDelay = MicroSeconds (*tpc.initialDelayMus);
+
+  return tp;
+}
+
+GenericAppHelper *
+SetupClientAppHelper (const Configuration &config)
+{
+  GenericAppHelper *appHelper = 0;
+  if (config.usedProt == simconfig::Protocol::QUIC)
+    {
+      appHelper = new QuicTriggerClientHelper ();
+    }
+  else if (config.usedProt == simconfig::Protocol::TCP)
+    {
+      appHelper = new TcpTriggerClientHelper ();
+    }
+  else
+    NS_FATAL_ERROR ("Invalid protocol config.");
+
+  if (config.clientTPConnEst)
+    appHelper->SetAttribute (
+        "ConnEstTP",
+        TransmissionProfileValue (ConvertTransmissionProfileConfig (*config.clientTPConnEst)));
+  if (config.clientTPNormalPktRcv)
+    appHelper->SetAttribute (
+        "OnPacketRecvTP",
+        TransmissionProfileValue (ConvertTransmissionProfileConfig (*config.clientTPNormalPktRcv)));
+  if (config.clientTPFinalPktRcv)
+    appHelper->SetAttribute (
+        "OnFinalPacketTP",
+        TransmissionProfileValue (ConvertTransmissionProfileConfig (*config.clientTPFinalPktRcv)));
+
+  return appHelper;
+}
+
+GenericAppHelper *
+SetupServerAppHelper (const Configuration &config)
+{
+  GenericAppHelper *appHelper = 0;
+  if (config.usedProt == simconfig::Protocol::QUIC)
+    {
+      appHelper = new QuicTriggerServerHelper (443); //Port number gets overwritten later
+    }
+  else if (config.usedProt == simconfig::Protocol::TCP)
+    {
+      appHelper = new TcpTriggerServerHelper (443); //Port number gets overwritten later
+    }
+  else
+    NS_FATAL_ERROR ("Invalid protocol config.");
+
+  if (config.serverTPConnEst)
+    appHelper->SetAttribute (
+        "ConnEstTP",
+        TransmissionProfileValue (ConvertTransmissionProfileConfig (*config.serverTPConnEst)));
+  if (config.serverTPNormalPktRcv)
+    appHelper->SetAttribute (
+        "OnPacketRecvTP",
+        TransmissionProfileValue (ConvertTransmissionProfileConfig (*config.serverTPNormalPktRcv)));
+  if (config.serverTPFinalPktRcv)
+    appHelper->SetAttribute (
+        "OnFinalPacketTP",
+        TransmissionProfileValue (ConvertTransmissionProfileConfig (*config.serverTPFinalPktRcv)));
+
+  return appHelper;
+}
+
+void
+SetupClientServerApps (const Configuration &config, const NodeContainer &client_nodes,
+                       const NodeContainer &server_nodes, ApplicationContainer &clientApps,
+                       ApplicationContainer &serverApps)
+{
+  GenericAppHelper *serverHelper = SetupServerAppHelper (config);
+  GenericAppHelper *clientHelper = SetupClientAppHelper (config);
+
+  for (auto it = config.cSMatching.begin (); it != config.cSMatching.end (); it++)
+    {
+      if (it->first >= client_nodes.GetN ())
+        NS_FATAL_ERROR ("CS-Matching client ID too high in supplied config.");
+      for (auto sit = it->second.begin (); sit != it->second.end (); sit++)
+        {
+          if (*sit >= server_nodes.GetN ())
+            NS_FATAL_ERROR ("CS-Matching server ID too high in supplied config.");
+
+          serverHelper->SetAttribute (
+              "Port",
+              UintegerValue (SERVER_PORT_OFFSET +
+                             it->first)); //Set server port to offset + client ID to avoid overlap
+
+          serverApps.Add (serverHelper->Install (server_nodes.Get (*sit)));
+
+          clientHelper->SetAttribute ("RemotePort", UintegerValue (SERVER_PORT_OFFSET + it->first));
+          clientHelper->SetAttribute ("RemoteAddress",
+                                      AddressValue (GetIpv4AddrOfNode (server_nodes.Get (*sit))));
+          clientApps.Add (clientHelper->Install (client_nodes.Get (it->first)));
+        }
+    }
+
+  delete serverHelper;
+  delete clientHelper;
+}
+
+Ptr<BetterPingTracker>
+SetupPingApps (const Configuration &config, const NodeContainer &backbone_nodes,
+               ApplicationContainer &pingApps,
+               std::vector<std::pair<Ptr<BetterPingClient>, Ptr<BetterPingServer>>> &pingAppPairs)
+{
+
+  BetterPingClientHelper clientHelper;
+
+  clientHelper.SetAttribute ("Interval", TimeValue (MilliSeconds (config.pingIntervalMs)));
+  clientHelper.SetAttribute ("MaxPackets", UintegerValue (config.pingPacketCount));
+
+  for (auto it = config.cSPingMatching.begin (); it != config.cSPingMatching.end (); it++)
+    {
+      if (it->first >= backbone_nodes.GetN ())
+        NS_FATAL_ERROR ("Ping client ID too high in supplied config.");
+      for (auto sit = it->second.begin (); sit != it->second.end (); sit++)
+        {
+          if (*sit >= backbone_nodes.GetN ())
+            NS_FATAL_ERROR ("Ping server ID too high in supplied config.");
+
+          Ptr<BetterPingServer> server = CreateObject<BetterPingServer> ();
+          server->SetAttribute (
+              "Port",
+              UintegerValue (SERVER_PORT_OFFSET +
+                             it->first)); //Set server port to offset + client ID to avoid overlap
+          backbone_nodes.Get (*sit)->AddApplication (server);
+
+          clientHelper.SetAttribute ("RemotePort", UintegerValue (SERVER_PORT_OFFSET + it->first));
+          clientHelper.SetAttribute ("RemoteAddress",
+                                     AddressValue (GetIpv4AddrOfNode (backbone_nodes.Get (*sit))));
+          Ptr<BetterPingClient> client = StaticCast<BetterPingClient> (
+              clientHelper.Install (backbone_nodes.Get (it->first)).Get (0));
+
+          pingApps.Add (client);
+          pingApps.Add (server);
+          pingAppPairs.push_back (std::make_pair (client, server));
+        }
+    }
+
+  Ptr<BetterPingTracker> tracker = CreateObject<BetterPingTracker> ();
+  tracker->Install (backbone_nodes);
+  return tracker;
+}
+
+std::shared_ptr<EfmQlog>
+SetupQlogger (const Configuration &config, Ptr<EfmMonitor> efmMonitor, Ptr<EfmManager> efmManager,
+              std::string simId, const CLIOptions &cliOptions, std::filesystem::path &qlogFilePath,
+              std::vector<std::pair<Ptr<BetterPingClient>, Ptr<BetterPingServer>>> pingApps)
+{
+  json j_config = config;
+
+  if (cliOptions.onTheFlyQlog)
+    {
+      std::shared_ptr<EfmQlogOtf> qlogger;
+      qlogger = std::make_shared<EfmQlogOtf> (
+          simId, j_config, qlogFilePath, !cliOptions.disableHostTraces,
+          !cliOptions.disableObsvTraces, false, cliOptions.traces_per_file,
+          cliOptions.trace_events_per_file, !cliOptions.disableOnTheFlyCompression);
+
+      if (!cliOptions.disableObsvTraces)
+        {
+          qlogger->Install (efmMonitor);
+          if (config.enablePing)
+            qlogger->Install (pingApps);
+        }
+      if (!cliOptions.disableHostTraces)
+        qlogger->Install (efmManager);
+
+      return qlogger;
+    }
+  else
+    {
+      std::shared_ptr<EfmQlog> qlogger;
+      qlogger = std::make_shared<EfmQlog> (simId, j_config);
+      if (!cliOptions.disableObsvTraces)
+        {
+          qlogger->Install (efmMonitor);
+          if (config.enablePing)
+            qlogger->Install (pingApps);
+        }
+      if (!cliOptions.disableHostTraces)
+        qlogger->Install (efmManager);
+
+      return qlogger;
+    }
+}
+
+std::pair<uint32_t, uint32_t>
+DoSetupBackboneOverrides (const simconfig::LinkConfig &linkConfig,
+                          const NodeContainer &backbone_nodes, NetDevMap &netDevMap)
+{
+  //Parse link
+  size_t index = linkConfig.link.find (':');
+  uint32_t nodeAIndex = std::stoi (linkConfig.link.substr (0, index));
+  uint32_t nodeBIndex = std::stoi (linkConfig.link.substr (index + 1));
+
+  if (nodeAIndex >= backbone_nodes.GetN () || nodeBIndex >= backbone_nodes.GetN ())
+    NS_FATAL_ERROR ("Link " + linkConfig.link + " does not exist.");
+
+  uint32_t nodeAId = backbone_nodes.Get (nodeAIndex)->GetId ();
+  uint32_t nodeBId = backbone_nodes.Get (nodeBIndex)->GetId ();
+
+  // We use the netDev to access the channel, so it does not matter if we access the netDev in A -> B or B -> A direction
+  auto it = netDevMap.find (nodeBId);
+  if (it == netDevMap.end ())
+    NS_FATAL_ERROR ("Link " + linkConfig.link + " does not exist.");
+
+  auto subIt = it->second.find (nodeAId);
+  if (subIt == it->second.end ())
+    NS_FATAL_ERROR ("Link " + linkConfig.link + " does not exist.");
+
+  Ptr<NetDevice> netDev = subIt->second;
+
+  Ptr<Channel> chan = netDev->GetChannel ();
+  if (!chan)
+    NS_LOG_WARN ("Error accessing channel for backbone link override.");
+  else
+    {
+      chan->SetAttribute ("Delay", TimeValue (MicroSeconds (linkConfig.delayMus)));
+    }
+
+  return std::make_pair (nodeAId, nodeBId);
+}
+
+void
+SetupAndStoreBackboneOverrides (const Configuration &config, NodeContainer &backbone_nodes,
+                                NetDevMap &netDevMap, EfmQlog &qlogger)
+{
+  json backboneOverrides = json::array ();
+  for (auto it = config.bblOverride.begin (); it != config.bblOverride.end (); it++)
+    {
+      auto fl = DoSetupBackboneOverrides (*it, backbone_nodes, netDevMap);
+      backboneOverrides.push_back (
+          {{"nodeA", fl.first}, {"nodeB", fl.second}, {"delayMus", it->delayMus}});
+    }
+  qlogger.AddToSummary ("backbone_overrides", backboneOverrides);
+}
+
+uint32_t
+DoGetFailedNodeId (std::string node, const NodeContainer &backbone_nodes,
+                   const NodeContainer &server_nodes, const NodeContainer &client_nodes)
+{
+  if (node.rfind ('C', 0) == 0)
+    { //Starts with C? => Client
+      uint32_t nodeIndex = std::stoi (node.substr (1));
+      return client_nodes.Get (nodeIndex)->GetId ();
+    }
+  else if (node.rfind ('S', 0) == 0) //Starts with S? => Server
+    {
+      uint32_t nodeIndex = std::stoi (node.substr (1));
+      return server_nodes.Get (nodeIndex)->GetId ();
+    }
+  else
+    {
+      uint32_t nodeIndex = std::stoi (node);
+      return backbone_nodes.Get (nodeIndex)->GetId ();
+    }
+}
+
+std::pair<uint32_t, uint32_t>
+DoSetupFault (const simconfig::FailedLink &failedLink, const NodeContainer &backbone_nodes,
+              const NodeContainer &server_nodes, const NodeContainer &client_nodes,
+              NetDevMap &netDevMap)
+{
+  //Parse link
+  size_t index = failedLink.link.find (':');
+  std::string nodeA = failedLink.link.substr (0, index);
+  std::string nodeB = failedLink.link.substr (index + 1);
+  uint32_t nodeAId = DoGetFailedNodeId (nodeA, backbone_nodes, server_nodes, client_nodes);
+  uint32_t nodeBId = DoGetFailedNodeId (nodeB, backbone_nodes, server_nodes, client_nodes);
+
+  //We need to set the RECEIVE error model, so get the net device node B uses to connect to node A
+  auto it = netDevMap.find (nodeBId);
+  if (it == netDevMap.end ())
+    NS_FATAL_ERROR ("Link " + failedLink.link + " does not exist.");
+
+  auto subIt = it->second.find (nodeAId);
+  if (subIt == it->second.end ())
+    NS_FATAL_ERROR ("Link " + failedLink.link + " does not exist.");
+
+  Ptr<NetDevice> netDev = subIt->second;
+
+  if (failedLink.lossRate > 0.0)
+    {
+      Ptr<RateErrorModel> rem = CreateObject<RateErrorModel> ();
+      // Ptr<UniformRandomVariable> uv = CreateObject<UniformRandomVariable> ();
+      // rem->SetRandomVariable (uv);
+      rem->SetAttribute ("ErrorUnit", EnumValue (RateErrorModel::ERROR_UNIT_PACKET));
+      rem->SetRate (failedLink.lossRate);
+      netDev->SetAttribute ("ReceiveErrorModel", PointerValue (rem));
+    }
+
+  if (failedLink.delayMs > 0)
+    {
+      Ptr<Channel> chan = netDev->GetChannel ();
+      if (!chan)
+        NS_LOG_WARN ("Error accessing channel for fault setup.");
+      else
+        {
+          chan->SetAttribute ("Delay", TimeValue (MilliSeconds (failedLink.delayMs)));
+        }
+    }
+
+  return std::make_pair (nodeAId, nodeBId);
+}
+
+void
+SetupAndStoreFaults (const Configuration &config, const NodeContainer &backbone_nodes,
+                     const NodeContainer &server_nodes, const NodeContainer &client_nodes,
+                     NetDevMap &netDevMap, EfmQlog &qlogger)
+{
+  json failedLinks = json::array ();
+  for (auto it = config.failedLinks.begin (); it != config.failedLinks.end (); it++)
+    {
+      auto fl = DoSetupFault (*it, backbone_nodes, server_nodes, client_nodes, netDevMap);
+      failedLinks.push_back ({{"nodeA", fl.first},
+                              {"nodeB", fl.second},
+                              {"lossRate", it->lossRate},
+                              {"delayMs", it->delayMs}});
+    }
+  qlogger.AddToSummary ("failed_links", failedLinks);
+}
+
+void
+SetupTimings (const Configuration &config, ApplicationContainer &serverApps,
+              ApplicationContainer &clientApps, ApplicationContainer &pingApps)
+{
+
+  serverApps.Start (MilliSeconds (0.0));
+  serverApps.Stop (MilliSeconds (config.simStopMs + 1000));
+
+  if (config.enablePing)
+    {
+      pingApps.Start (MilliSeconds (0.0));
+      pingApps.Stop (MilliSeconds (config.simStopMs));
+    }
+
+  Ptr<UniformRandomVariable> urv = CreateObject<UniformRandomVariable> ();
+
+  for (auto it = clientApps.Begin (); it != clientApps.End (); it++)
+    {
+      (*it)->SetStartTime (
+          MilliSeconds (config.ehSStartMs + urv->GetInteger (0, config.ehSStartRandOffsetMs)));
+    }
+
+  clientApps.Stop (MilliSeconds (config.ehSStopMs));
+
+  Simulator::Stop (MilliSeconds (config.simStopMs));
+}
+
+std::vector<uint32_t>
+ComputeRoute (uint32_t src, uint32_t dst, const NodeContainer &backbone_nodes)
+{
+  std::vector<uint32_t> route;
+  route.push_back (src);
+  route.push_back (dst);
+  return route;
+}
+
+void
+StoreFinalStats (const Configuration &config, EfmQlog &qlogger, Ptr<EfmMonitor> monitor,
+                 Ptr<EfmManager> efmManager, ApplicationContainer &serverApps,
+                 ApplicationContainer &clientApps, Ptr<BetterPingTracker> pingTracker,
+                 std::vector<TopologyLink> &coreLinks, std::vector<TopologyLink> &edgeLinks,
+                 Ptr<GroundtruthCollector> gtCollector)
+{
+  json clientStats;
+  for (auto it = clientApps.Begin (); it != clientApps.End (); it++)
+    {
+      ApplicationStats *appStats = dynamic_cast<ApplicationStats *> (PeekPointer (*it));
+      std::string cId = std::to_string ((*it)->GetNode ()->GetId ());
+      clientStats[cId] = json::object ();
+      clientStats[cId]["total_rcv"] = appStats->GetTotalReceived ();
+      clientStats[cId]["total_snt_fail"] = appStats->GetTotalSentFail ();
+      clientStats[cId]["total_sent_succ"] = appStats->GetTotalSentSuccess ();
+    }
+  qlogger.AddToSummary ("client_stats", clientStats);
+
+  json serverStats;
+  for (auto it = serverApps.Begin (); it != serverApps.End (); it++)
+    {
+      ApplicationStats *appStats = dynamic_cast<ApplicationStats *> (PeekPointer (*it));
+      std::string sId = std::to_string ((*it)->GetNode ()->GetId ());
+      serverStats[sId] = json::object ();
+      serverStats[sId]["total_rcv"] = appStats->GetTotalReceived ();
+      serverStats[sId]["total_snt_fail"] = appStats->GetTotalSentFail ();
+      serverStats[sId]["total_sent_succ"] = appStats->GetTotalSentSuccess ();
+    }
+  qlogger.AddToSummary ("server_stats", serverStats);
+
+  json observerStats;
+  const EfmMonitor::EfmFlowProbeContainer &probes = monitor->GetAllProbes ();
+  for (auto it = probes.begin (); it != probes.end (); it++)
+    {
+      EfmFlowProbe::EfmFlowStatsMap stats = (*it)->GetFlowStats ();
+      if (stats.size () == 0)
+        continue;
+      std::string oId = std::to_string ((*it)->GetNodeId ());
+      observerStats[oId] = json::object ();
+      for (auto subIt = stats.begin (); subIt != stats.end (); subIt++)
+        {
+          std::string fId = std::to_string (subIt->first);
+          observerStats[oId][fId] = json::object ();
+          observerStats[oId][fId]["total_packets"] = subIt->second.packets;
+          observerStats[oId][fId]["total_efm_packets"] = subIt->second.efmPackets;
+        }
+    }
+  qlogger.AddToSummary ("observer_stats", observerStats);
+
+  json hostConnStats;
+  const std::map<EfmManager::FiveTuple, uint32_t> &hostConns = efmManager->GetConnections ();
+  for (auto it = hostConns.begin (); it != hostConns.end (); it++)
+    {
+      std::string cId = std::to_string (it->second);
+      hostConnStats[cId] = json::object ();
+      hostConnStats[cId]["client_node_id"] = GetNodeIdOfIPv4Address (it->first.clientAddress);
+      hostConnStats[cId]["client_port"] = it->first.clientPort;
+      hostConnStats[cId]["server_node_id"] = GetNodeIdOfIPv4Address (it->first.serverAddress);
+      hostConnStats[cId]["server_port"] = it->first.serverPort;
+      hostConnStats[cId]["prot"] = int (it->first.protocol);
+    }
+  qlogger.AddToSummary ("host_connections", hostConnStats);
+
+  json obsvFlowStats;
+  json obsvPathStats;
+
+  std::stringstream ss; //Used for IP address conversion
+  for (auto fc : monitor->GetFlowClassifiers ())
+    {
+      Ptr<Ipv4EfmFlowClassifier> fc4 = DynamicCast<Ipv4EfmFlowClassifier> (fc);
+      if (fc4)
+        {
+          std::map<Ipv4EfmFlowClassifier::FiveTuple, EfmFlowId> flowMap = fc4->GetFlowMap ();
+          for (auto it = flowMap.begin (); it != flowMap.end (); it++)
+            {
+              std::string fId = std::to_string (it->second);
+              obsvFlowStats[fId] = json::object ();
+              obsvFlowStats[fId]["src_node_id"] = GetNodeIdOfIPv4Address (it->first.sourceAddress);
+              obsvFlowStats[fId]["src_port"] = it->first.sourcePort;
+              obsvFlowStats[fId]["dst_node_id"] =
+                  GetNodeIdOfIPv4Address (it->first.destinationAddress);
+              obsvFlowStats[fId]["dst_port"] = it->first.destinationPort;
+              obsvFlowStats[fId]["prot"] = int (it->first.protocol);
+            }
+
+          std::map<Ipv4EfmFlowClassifier::Ipv4Pair, EfmPathId> pathMap = fc4->GetPathMap ();
+          for (auto const &kvp : pathMap)
+            {
+              std::string pId = std::to_string (kvp.second);
+              obsvPathStats[pId] = json::object ();
+              ss << kvp.first.sourceNet;
+              obsvPathStats[pId]["src_net_addr"] = ss.str ();
+              ss.str ("");
+              ss.clear ();
+              ss << kvp.first.destinationNet;
+              obsvPathStats[pId]["dst_net_addr"] = ss.str ();
+              ss.str ("");
+              ss.clear ();
+              obsvPathStats[pId]["src_node_ids"] =
+                  GetNodeIdsOfIPv4Prefix (kvp.first.sourceNet, fc4->GetPathNetmask ());
+              obsvPathStats[pId]["dst_node_ids"] =
+                  GetNodeIdsOfIPv4Prefix (kvp.first.destinationNet, fc4->GetPathNetmask ());
+            }
+        }
+    }
+
+  qlogger.AddToSummary ("observer_flows", obsvFlowStats);
+  qlogger.AddToSummary ("observer_paths", obsvPathStats);
+
+  if (config.enablePing)
+    {
+      json pingRoutes;
+      auto pathMap = pingTracker->GetPingPathMap ();
+
+      for (auto it = pathMap.begin (); it != pathMap.end (); it++)
+        {
+          uint32_t srcId = GetNodeIdOfIPv4Address (it->first.first);
+          uint32_t dstId = GetNodeIdOfIPv4Address (it->first.second);
+          if (*it->second.begin() != srcId || *it->second.rbegin() != dstId)
+            {
+              NS_FATAL_ERROR ("Ping path is not complete");
+              continue;
+            }
+          json path = json::array ();
+          for (auto const &nodeId : it->second)
+            {
+              path.push_back (nodeId);
+            }
+          pingRoutes[std::to_string (srcId) + "/" + std::to_string (dstId)] = path;
+        }
+      qlogger.AddToSummary ("ping_routes", pingRoutes);
+    }
+
+  json link_sets;
+  json core_links = json::array ();
+  for (const auto &link : coreLinks)
+    {
+      json j_link = json::object ();
+      j_link["name"] = link.link_id;
+      j_link["src"] = link.node_1_id;
+      j_link["dst"] = link.node_2_id;
+      json j_link2 = json::object ();
+      j_link2["name"] = link.link_id;
+      j_link2["src"] = link.node_2_id;
+      j_link2["dst"] = link.node_1_id;
+      core_links.push_back (j_link);
+      core_links.push_back (j_link2);
+    }
+  link_sets["core_links"] = core_links;
+
+  json edge_links = json::array ();
+  for (const auto &link : edgeLinks)
+    {
+      json j_link = json::object ();
+      j_link["name"] = link.link_id;
+      j_link["src"] = link.node_1_id;
+      j_link["dst"] = link.node_2_id;
+      json j_link2 = json::object ();
+      j_link2["name"] = link.link_id;
+      j_link2["src"] = link.node_2_id;
+      j_link2["dst"] = link.node_1_id;
+      edge_links.push_back (j_link);
+      edge_links.push_back (j_link2);
+    }
+  link_sets["edge_links"] = edge_links;
+  qlogger.AddToSummary ("link_sets", link_sets);
+
+  json gt_stats = json::array ();
+  GroundtruthCollector::LinkDataMap &linkDataMap = gtCollector->GetLinkData ();
+  for (const auto &[link, data] : linkDataMap)
+    {
+      json j_link = json::object ();
+      j_link["src"] = link.first;
+      j_link["dst"] = link.second;
+      j_link["lost"] = data.packetsLost;
+      j_link["recv"] = data.packetsReceived;
+      if (data.delayMmntsMicros.size () > 0)
+        {
+          std::vector<uint32_t> tmpVec = data.delayMmntsMicros;
+          std::sort (tmpVec.begin (), tmpVec.end ());
+
+          double avg = std::reduce (tmpVec.begin (), tmpVec.end (), 0.0) / (double) tmpVec.size ();
+          j_link["dy_avg"] = avg;
+
+          // TODO: Recheck computation
+          if (tmpVec.size () % 2 == 0)
+            j_link["dy_med"] = (tmpVec[tmpVec.size () / 2 - 1] + tmpVec[tmpVec.size () / 2]) / 2.0;
+          else
+            j_link["dy_med"] = tmpVec[tmpVec.size () / 2];
+
+          j_link["dy_min"] = tmpVec[0];
+          j_link["dy_max"] = tmpVec[tmpVec.size () - 1];
+          // TODO: Recheck computation
+          j_link["dy_99"] = tmpVec[(uint32_t) (tmpVec.size () * 0.99)];
+
+          double variance = 0;
+          for (auto val : tmpVec)
+            {
+              variance += std::pow (val - avg, 2);
+            }
+          j_link["dy_std"] = sqrt (variance / (tmpVec.size () - 1));
+        }
+      gt_stats.push_back (j_link);
+    }
+  qlogger.AddToSummary ("gt_stats", gt_stats);
+}
+
+std::string
+CurrensNanosecondsAsString ()
+{
+  using namespace std::chrono;
+  long long t_now =
+      time_point_cast<nanoseconds> (system_clock::now ()).time_since_epoch ().count ();
+  return std::to_string (t_now);
+}
+
+void
+PrintStatus (std::shared_ptr<EfmQlog> qlogger)
+{
+  using namespace std::chrono;
+  static bool first = true;
+  static uint8_t realInterval = 10;
+  static uint8_t simInterval = 1;
+  static uint64_t t_last =
+      duration_cast<milliseconds> (system_clock::now ().time_since_epoch ()).count ();
+  static uint32_t lastEventCount = 0;
+  if (first)
+    {
+      std::cout << "\rCurrent simulated time / events processed: "
+                << Simulator::Now ().GetSeconds () << "s / " << qlogger->GetTotalEventsProcessed ()
+                << std::flush;
+      lastEventCount = qlogger->GetTotalEventsProcessed ();
+      first = false;
+    }
+  else
+    {
+      uint64_t t_now =
+          duration_cast<milliseconds> (system_clock::now ().time_since_epoch ()).count ();
+      if (t_now - t_last >= realInterval * 1000)
+        {
+          // 4: Length of "s / "
+          std::cout
+              << "\033["
+              << std::to_string ((int) Simulator::Now ().GetSeconds () - simInterval).length () +
+                     std::to_string (lastEventCount).length () + 4
+              << "D\033[0K" << Simulator::Now ().GetSeconds () << "s / "
+              << qlogger->GetTotalEventsProcessed () << std::flush;
+          lastEventCount = qlogger->GetTotalEventsProcessed ();
+        }
+
+      t_last = t_now;
+    }
+  Simulator::Schedule (Seconds (simInterval), &PrintStatus, qlogger);
+}
+
+void
+RunOnTheFlyQlog (std::shared_ptr<EfmQlogOtf> qlogger)
+{
+  qlogger->PerformOnTheFlySerialization ();
+  Simulator::Schedule (Seconds (1), &RunOnTheFlyQlog, qlogger);
+}
+
+void
+RunSimulation (std::string baseId, uint32_t runNumber, Configuration config,
+               std::vector<TopologyNode> &node_specs, std::vector<TopologyLink> &link_specs,
+               CLIOptions &cliOpts)
+{
+  std::cout << "\n#################### SET-UP RUN " << runNumber << " ####################\n"
+            << std::endl;
+
+  config.rngRun = runNumber;
+
+  //Generate simulation id
+  std::string simId =
+      baseId + "_" + std::to_string (runNumber) + "_" + CurrensNanosecondsAsString ();
+
+  RngSeedManager::SetSeed (config.rngSeed);
+  RngSeedManager::SetRun (config.rngRun);
+
+  //Randomly generate underspecified config values, e.g., client-server matching
+  GenerateMissingConfigs (config, node_specs.size ());
+
+  //Set global default attributes based on config
+  SetGlobalDefaults (config);
+
+  /**************
+   * Use the topology information to setup the backbone topology in the simulation
+   * ***********/
+
+  //Prepare IP address helper
+  Ipv4AddressHelper ip_address_assigner;
+  ip_address_assigner.SetBase ("10.1.0.0", "255.255.255.0");
+
+  NetDevMap netDevMap;
+
+  NodeContainer backbone_nodes;
+  SetupBackbone (config, node_specs.size (), link_specs, ip_address_assigner, backbone_nodes,
+                 netDevMap);
+
+  /**************
+   * Setup the client-server nodes + relationships
+   * ****************/
+
+  NodeContainer server_nodes;
+  NodeContainer client_nodes;
+
+  std::vector<TopologyLink> edgeLinks = SetupEndhosts (config, backbone_nodes, ip_address_assigner,
+                                                       server_nodes, client_nodes, netDevMap);
+
+  NS_ASSERT (backbone_nodes.Get (0)->GetId () == 0);
+  NS_ASSERT (backbone_nodes.Get (server_nodes.GetN () - 1)->GetId () == node_specs.size () - 1);
+  NS_ASSERT (server_nodes.Get (0)->GetId () == node_specs.size ());
+  NS_ASSERT (server_nodes.Get (server_nodes.GetN () - 1)->GetId () == (node_specs.size () * 2) - 1);
+  NS_ASSERT (client_nodes.Get (0)->GetId () == (node_specs.size () * 2));
+  NS_ASSERT (client_nodes.Get (server_nodes.GetN () - 1)->GetId () == (node_specs.size () * 3) - 1);
+
+  // Set up servers and clients
+  ApplicationContainer serverApps;
+  ApplicationContainer clientApps;
+
+  SetupClientServerApps (config, client_nodes, server_nodes, clientApps, serverApps);
+
+  /* Use Traceroute to check topology
+
+  V4TraceRouteHelper traceroute (GetIpv4AddrOfNode(endhost_nodes.Get(0))); //size - 1
+  traceroute.SetAttribute ("Verbose", BooleanValue (true));
+  ApplicationContainer p = traceroute.Install (endhost_nodes.Get(1));
+
+  // Used when we wish to dump the traceroute results into a file
+
+  //Ptr<OutputStreamWrapper> printstrm = Create<OutputStreamWrapper> ("mytrace", std::ios::out);
+  //traceroute.PrintTraceRouteAt(nodes.Get(0),printstrm);
+
+  */
+
+  // Setup routing
+  Ipv4GlobalRoutingHelper::PopulateRoutingTables ();
+  //Ptr<OutputStreamWrapper> routingStream = Create<OutputStreamWrapper> ("ROUTES.txt", std::ios::out);
+  // Ipv4GlobalRoutingHelper::PrintRoutingTableAllAt (Seconds (4), routingStream);
+
+  //Enable packet metadata
+  //Packet::EnablePrinting ();
+  //Packet::EnableChecking ();
+
+  // Enable pcap traces
+  // PointToPointHelper ptph;
+  // //linkCreator_Edge.EnablePcapAll ("quic");
+  // ptph.EnablePcap("quic-source-file",endhost_nodes.Get(0)->GetDevice(1));
+  // ptph.EnablePcap("quic-dest-file",endhost_nodes.Get(1)->GetDevice(1));
+
+  //Install EFM manager
+  Ptr<EfmManager> efmManager;
+  EfmManagerHelper efmHelper;
+  efmManager = efmHelper.InstallClient (clientApps);
+  efmHelper.InstallServer (serverApps);
+
+  //Install flow monitor
+
+  Ptr<EfmMonitor> flowMonitor;
+  //Prepare flow monitor config
+  if (config.ipv4PrefixLength > 32)
+    NS_FATAL_ERROR ("IPv4 prefix length must be <= 32");
+  if (config.ipv6PrefixLength > 128)
+    NS_FATAL_ERROR ("IPv6 prefix length must be <= 128");
+  PathMatching matching;
+  switch (config.matchPathBy)
+    {
+    case simconfig::PathMatching::SRC:
+      matching = PathMatching::SRC;
+      break;
+    case simconfig::PathMatching::DST:
+      matching = PathMatching::DST;
+      break;
+    case simconfig::PathMatching::BOTH:
+      matching = PathMatching::BOTH;
+      break;
+    default:
+      NS_FATAL_ERROR ("Unknown path matching type");
+    }
+
+  EfmMonitorHelper flowHelper ((uint8_t) config.ipv4PrefixLength, (uint8_t) config.ipv6PrefixLength,
+                               matching);
+  flowHelper.SetMonitorAttribute ("DartReportingInterval",
+                                  TimeValue (MicroSeconds (config.dartReportingIntervalMus)));
+  // flowMonitor = flowHelper.Install(backbone_nodes);
+  //Do not enable IPv6 tracking, we do not use it
+  flowMonitor = flowHelper.InstallAll (true, false);
+
+  // std::cout << flowMonitor->GetAllProbes().size() << std::endl;
+
+  std::vector<std::pair<Ptr<BetterPingClient>, Ptr<BetterPingServer>>> pingAppPairs;
+  ApplicationContainer pingApps;
+  Ptr<BetterPingTracker> pingTracker;
+  // Install ping applications if enabled
+  if (config.enablePing)
+    {
+      pingTracker = SetupPingApps (config, backbone_nodes, pingApps, pingAppPairs);
+    }
+
+  // Setup Groundtruth Collector
+  Ptr<GroundtruthCollector> gtCollector = CreateObject<GroundtruthCollector> ();
+  for (auto &[srcNode, innerMap] : netDevMap)
+    {
+      for (auto &[dstNode, srcNetDev] : innerMap)
+        {
+          // Reverse link because the gtcollector expects the dstNetDev
+          gtCollector->AddLink (dstNode, srcNode, DynamicCast<PointToPointNetDevice> (srcNetDev));
+        }
+    }
+
+  //Install Qlogger
+  std::filesystem::path qlogFilePath = cliOpts.output_dir;
+  if (cliOpts.output_dir.back () != '/' && cliOpts.qlog_output_file_base.front () != '/')
+    qlogFilePath += "/";
+  qlogFilePath += cliOpts.qlog_output_file_base;
+  qlogFilePath.replace_filename (
+      qlogFilePath.stem ().string () + "-" + std::to_string (runNumber) +
+      (qlogFilePath.has_extension () ? qlogFilePath.extension ().string () : ".json"));
+  std::shared_ptr<EfmQlog> qlogger =
+      SetupQlogger (config, flowMonitor, efmManager, simId, cliOpts, qlogFilePath, pingAppPairs);
+
+  //Setup Backbone overrides
+  SetupAndStoreBackboneOverrides (config, backbone_nodes, netDevMap, *qlogger);
+
+  //Setup Faults
+  SetupAndStoreFaults (config, backbone_nodes, server_nodes, client_nodes, netDevMap, *qlogger);
+
+  //Setup Simulation/Application start/stop and sim resolution
+  SetupTimings (config, serverApps, clientApps, pingApps);
+
+  Simulator::Schedule (Seconds (0.0), &PrintStatus, qlogger);
+  if (cliOpts.onTheFlyQlog)
+    Simulator::Schedule (Seconds (1), &RunOnTheFlyQlog,
+                         std::dynamic_pointer_cast<EfmQlogOtf> (qlogger));
+
+  std::cout << "\n#################### STARTING RUN ####################\n\n" << std::endl;
+
+  Simulator::Run ();
+
+  std::cout << "\n\n#################### RUN FINISHED ####################" << std::endl;
+
+  //Save data and cleanup
+  // flowMonitor->SerializeToXmlFile(monitor_output_file, true, true);
+  StoreFinalStats (config, *qlogger, flowMonitor, efmManager, serverApps, clientApps, pingTracker,
+                   link_specs, edgeLinks, gtCollector);
+
+  //Save qlog
+  if (cliOpts.onTheFlyQlog)
+    std::dynamic_pointer_cast<EfmQlogOtf> (qlogger)->PerformFinalSerialization ();
+  else
+    qlogger->SerializeToJsonFile (qlogFilePath, true, true, false, cliOpts.traces_per_file,
+                                  cliOpts.trace_events_per_file);
+
+  Simulator::Destroy ();
+}
+
+int
+main (int argc, char *argv[])
+{
+
+  // ##################################
+  // ###### Command line parsing ######
+  // ##################################
+  // std::string monitor_output_file ("efm-monitor-stats.xml");
+
+  CommandLine cmd (__FILE__);
+
+  CLIOptions cliOptions;
+
+  // cmd.AddValue ("monitorOutputFile", "Define output file for (EFM) monitor", monitor_output_file);
+  cmd.AddValue ("qlogFilePrefix",
+                "Define file prefix (excl. extension) for EFM qlog, may contain / for paths "
+                "relative to output folder",
+                cliOptions.qlog_output_file_base);
+  cmd.AddValue ("configFile", "Define config file to use (opt. incl. path)",
+                cliOptions.config_file_path);
+  cmd.AddValue ("topologyDir", "Set the topology files directory", cliOptions.topology_dir);
+  cmd.AddValue ("outputDir", "Set the output directory", cliOptions.output_dir);
+  cmd.AddValue ("numberOfRuns", "Define number of simulation runs to perform",
+                cliOptions.number_of_runs);
+  cmd.AddValue ("tracesPerFile",
+                "Define number of traces per JSON file for qlog output (0 to disable splitting))",
+                cliOptions.traces_per_file);
+  cmd.AddValue ("traceEventsPerFile",
+                "Define number of trace events per JSON file until split for qlog output (0 to "
+                "disable splitting))",
+                cliOptions.trace_events_per_file);
+  cmd.AddValue ("runNumberOffset", "Sets the rng run number for the first sim run, default 0.",
+                cliOptions.run_number_offset);
+  cmd.AddValue ("disableObsvTraces", "Disables observer traces in qlog output.",
+                cliOptions.disableObsvTraces);
+  cmd.AddValue ("disableHostTraces", "Disables host traces in qlog output.",
+                cliOptions.disableHostTraces);
+  cmd.AddValue ("enableOnTheFlyQLog", "Enables on the fly qlog output.", cliOptions.onTheFlyQlog);
+  cmd.AddValue ("disableOnTheFlyCompression", "Disables on the fly qlog compression.",
+                cliOptions.disableOnTheFlyCompression);
+  cmd.Parse (argc, argv);
+
+  if (cliOptions.trace_events_per_file > 0 && cliOptions.trace_events_per_file < 1000000)
+    std::cout << "WARNING: A low value for trace_events_per_file can lead to a huge number of "
+                 "files for larger simulations!"
+              << std::endl;
+
+  std::cout << "\n#################### SIMULATION SET-UP ####################\n" << std::endl;
+
+  // #########################
+  // ###### Read config ######
+  // #########################
+  if (cliOptions.config_file_path.find ("/") == std::string::npos)
+    cliOptions.config_file_path = "scratch/EFM-Localization-Stuff/" + cliOptions.config_file_path;
+  Configuration config = ReadConfig (cliOptions.config_file_path);
+
+  // ###########################
+  // ###### Read topology ######
+  // ###########################
+  if (cliOptions.topology_dir.back () != '/')
+    cliOptions.topology_dir = cliOptions.topology_dir + "/";
+  std::vector<TopologyNode> node_specs;
+  std::vector<TopologyLink> link_specs;
+  ReadTopology (config, cliOptions.topology_dir, node_specs, link_specs);
+  std::cout << "Using a topology with " << node_specs.size () << " nodes and " << link_specs.size ()
+            << " links." << std::endl;
+
+  // Resolution may only be set once
+  Time::SetResolution (Time::NS);
+
+  std::string simBaseId = "SIM_" + CurrensNanosecondsAsString ();
+
+  // Perform simulation runs
+  for (uint32_t i = cliOptions.run_number_offset;
+       i < cliOptions.run_number_offset + cliOptions.number_of_runs; i++)
+    {
+      RunSimulation (simBaseId, i, config, node_specs, link_specs, cliOptions);
+    }
+
+  std::cout << "\n#################### SIMULATION END ####################\n\n" << std::endl;
+
+  return 0;
+}
diff --git a/scratch/efm-sim/groundtruth-collector.cc b/scratch/efm-sim/groundtruth-collector.cc
new file mode 100644
index 000000000..5a87f15e5
--- /dev/null
+++ b/scratch/efm-sim/groundtruth-collector.cc
@@ -0,0 +1,194 @@
+/*
+ * Copyright (C) 2025  RWTH Aachen University
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ * Authors: 
+ *  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+ *  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+ */
+
+#include "groundtruth-collector.h"
+#include "ns3/simulator.h"
+
+namespace ns3 {
+
+// ##########################
+// ##### GroundtruthTag #####
+// ##########################
+
+GroundtruthTag::GroundtruthTag () : Tag (), m_nodeId (0), m_nsReceived (0)
+{
+}
+
+GroundtruthTag::GroundtruthTag (uint32_t m_nodeId, uint64_t m_nsReceived)
+    : Tag (), m_nodeId (m_nodeId), m_nsReceived (m_nsReceived)
+{
+}
+
+TypeId
+GroundtruthTag::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::GroundtruthTag")
+                          .SetParent<Tag> ()
+                          .SetGroupName ("GroundTruthCollector")
+                          .AddConstructor<GroundtruthTag> ();
+  return tid;
+}
+TypeId
+GroundtruthTag::GetInstanceTypeId (void) const
+{
+  return GetTypeId ();
+}
+
+uint32_t
+GroundtruthTag::GetSerializedSize (void) const
+{
+  return 4 + 8;
+}
+
+void
+GroundtruthTag::Serialize (TagBuffer buf) const
+{
+  buf.WriteU32 (m_nodeId);
+  buf.WriteU64 (m_nsReceived);
+}
+
+void
+GroundtruthTag::Deserialize (TagBuffer buf)
+{
+  m_nodeId = buf.ReadU32 ();
+  m_nsReceived = buf.ReadU64 ();
+}
+
+void
+GroundtruthTag::Print (std::ostream &os) const
+{
+  os << "nodeId=" << m_nodeId << " nsReceived=" << m_nsReceived;
+}
+
+void
+GroundtruthTag::SetNodeId (uint32_t nodeId)
+{
+  m_nodeId = nodeId;
+}
+
+void
+GroundtruthTag::SetReceivedTS (Time receivedTS)
+{
+  m_nsReceived = receivedTS.GetNanoSeconds ();
+}
+
+uint32_t
+GroundtruthTag::GetNodeId (void) const
+{
+  return m_nodeId;
+}
+
+Time
+GroundtruthTag::GetReceivedTS (void) const
+{
+  return Time (NanoSeconds (m_nsReceived));
+}
+
+// ############################
+// ### GroundtruthCollector ###
+// ############################
+
+NS_LOG_COMPONENT_DEFINE ("Groundtruth_Collector");
+NS_OBJECT_ENSURE_REGISTERED (GroundtruthCollector);
+
+/* static */
+TypeId
+GroundtruthCollector::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::GroundtruthCollector")
+                          .SetParent<Object> ()
+                          .SetGroupName ("GroundTruthCollector")
+                          .AddConstructor<GroundtruthCollector> ();
+
+  return tid;
+}
+
+TypeId
+GroundtruthCollector::GetInstanceTypeId (void) const
+{
+  return GetTypeId ();
+}
+
+void
+GroundtruthCollector::AddLink (uint32_t src, uint32_t dst, Ptr<PointToPointNetDevice> dstDevice)
+{
+  NS_LOG_FUNCTION (this << src << dst << dstDevice);
+
+  std::string context = std::to_string (src) + "/" + std::to_string (dst);
+
+  dstDevice->TraceConnect ("PhyRxDrop", context,
+                           MakeCallback (&GroundtruthCollector::PacketReceiveDropHandler, this));
+  dstDevice->TraceConnect ("PhyRxEnd", context,
+                           MakeCallback (&GroundtruthCollector::PacketReceiveSuccHandler, this));
+  dstDevice->TraceConnect ("MacTxDrop", context,
+                           MakeCallback (&GroundtruthCollector::PacketSendDropHandler, this));
+  dstDevice->TraceConnect ("PhyTxDrop", context,
+                           MakeCallback (&GroundtruthCollector::PacketSendDropHandler, this));
+}
+
+static std::pair<uint32_t, uint32_t>
+ContextToIds (std::string &context)
+{
+  size_t index = context.find ('/');
+  return std::make_pair (std::stoi (context.substr (0, index)),
+                         std::stoi (context.substr (index + 1)));
+}
+
+void
+GroundtruthCollector::PacketReceiveSuccHandler (std::string context, Ptr<const Packet> packet)
+{
+  std::pair<uint32_t, uint32_t> link = ContextToIds (context);
+  LinkData &linkData = m_linkData[link];
+  linkData.packetsReceived++;
+
+  GroundtruthTag tag;
+  if (packet->PeekPacketTag (tag))
+    {
+      NS_ASSERT (tag.GetNodeId () == link.first);
+      // Process tag info
+      linkData.delayMmntsMicros.push_back (
+          (Simulator::Now () - tag.GetReceivedTS ()).GetMicroSeconds ());
+    }
+  // Update tag
+  tag.SetNodeId (link.second);
+  tag.SetReceivedTS (Simulator::Now ());
+
+  // The underlying packet is actually not const, so we can use ConstCast without undefined behavior
+  ConstCast<Packet> (packet)->ReplacePacketTag (tag);
+}
+
+void
+GroundtruthCollector::PacketReceiveDropHandler (std::string context, Ptr<const Packet> packet)
+{
+  std::pair<uint32_t, uint32_t> link = ContextToIds (context);
+  LinkData &linkData = m_linkData[link];
+  linkData.packetsLost++;
+}
+
+void
+GroundtruthCollector::PacketSendDropHandler (std::string context, Ptr<const Packet> packet)
+{
+  std::pair<uint32_t, uint32_t> link = ContextToIds (context);
+  //reverse link because this is a send drop of the destination device
+  LinkData &linkData = m_linkData[{link.second, link.first}];
+  linkData.packetsLost++;
+}
+
+} // namespace ns3
\ No newline at end of file
diff --git a/scratch/efm-sim/groundtruth-collector.h b/scratch/efm-sim/groundtruth-collector.h
new file mode 100644
index 000000000..c3321f16f
--- /dev/null
+++ b/scratch/efm-sim/groundtruth-collector.h
@@ -0,0 +1,93 @@
+/*
+ * Copyright (C) 2025  RWTH Aachen University
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ * Authors: 
+ *  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+ *  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+ */
+
+#ifndef GROUNDTRUTH_COLLECTOR_H
+#define GROUNDTRUTH_COLLECTOR_H
+
+#include "ns3/object.h"
+#include "ns3/point-to-point-net-device.h"
+
+namespace ns3 {
+
+class GroundtruthTag : public Tag
+{
+public:
+  static TypeId GetTypeId (void);
+  virtual TypeId GetInstanceTypeId (void) const;
+  virtual uint32_t GetSerializedSize (void) const;
+  virtual void Serialize (TagBuffer buf) const;
+  virtual void Deserialize (TagBuffer buf);
+  virtual void Print (std::ostream &os) const;
+  GroundtruthTag ();
+  GroundtruthTag (uint32_t m_nodeId, uint64_t m_nsReceived);
+
+  void SetNodeId (uint32_t nodeId);
+  void SetReceivedTS (Time receivedTS);
+
+  uint32_t GetNodeId (void) const;
+  Time GetReceivedTS (void) const;
+
+private:
+  uint32_t m_nodeId; //!< Node ID of the receiver
+  uint64_t m_nsReceived; //!< Timestamp (nanoseconds) when the packet was received
+};
+
+class GroundtruthCollector : public Object
+{
+public:
+  GroundtruthCollector () = default;
+  virtual ~GroundtruthCollector () = default;
+
+  // Delete copy constructor and assignment operator to avoid misuse
+  GroundtruthCollector (GroundtruthCollector const &) = delete;
+  GroundtruthCollector &operator= (GroundtruthCollector const &) = delete;
+
+  /// Register this type.
+  /// \return The TypeId.
+  static TypeId GetTypeId (void);
+  virtual TypeId GetInstanceTypeId () const;
+
+  struct LinkData
+  {
+    uint32_t packetsReceived = 0;
+    uint32_t packetsLost = 0;
+    std::vector<uint32_t> delayMmntsMicros;
+  };
+
+  typedef std::map<std::pair<uint32_t, uint32_t>, LinkData> LinkDataMap;
+  LinkDataMap &
+  GetLinkData ()
+  {
+    return m_linkData;
+  }
+
+  void AddLink (uint32_t src, uint32_t dst, Ptr<PointToPointNetDevice> dstDevice);
+
+private:
+  LinkDataMap m_linkData;
+
+  void PacketReceiveSuccHandler (std::string context, Ptr<const Packet> packet);
+  void PacketReceiveDropHandler (std::string context, Ptr<const Packet> packet);
+  void PacketSendDropHandler (std::string context, Ptr<const Packet> packet);
+};
+
+} // namespace ns3
+
+#endif // GROUNDTRUTH_COLLECTOR_H
\ No newline at end of file
diff --git a/scratch/subdir/scratch-simulator-subdir.cc b/scratch/subdir/scratch-simulator-subdir.cc
deleted file mode 100644
index ef16be0be..000000000
--- a/scratch/subdir/scratch-simulator-subdir.cc
+++ /dev/null
@@ -1,29 +0,0 @@
-/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
-/*
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation;
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- */
-
-#include "ns3/core-module.h"
-
-using namespace ns3;
-
-NS_LOG_COMPONENT_DEFINE ("ScratchSimulator");
-
-int 
-main (int argc, char *argv[])
-{
-  NS_LOG_UNCOND ("Scratch Simulator");
-  CommandLine cmd;
-  cmd.Parse (argc, argv);
-}
diff --git a/src/applications/.gitattributes b/src/applications/.gitattributes
new file mode 100644
index 000000000..1def899c0
--- /dev/null
+++ b/src/applications/.gitattributes
@@ -0,0 +1,2 @@
+bindings/* linguist-generated=true
+
diff --git a/src/applications/.gitignore b/src/applications/.gitignore
new file mode 100644
index 000000000..fe9a55f73
--- /dev/null
+++ b/src/applications/.gitignore
@@ -0,0 +1,51 @@
+*.diff
+*.orig
+*.patch
+*.rej
+
+*.o
+*.pyc
+*.pyo
+
+*.cwnd
+*.dat
+*.log
+*.mob
+*.pcap
+*.plt
+*.routes
+*.tr
+[D|U]l[A-Z][a-z]*Stats.txt
+
+\#*#
+*~
+
+testpy-output
+
+bindings/python/pybindgen/
+
+ms_print.*
+massif.*
+coverity
+TAGS
+
+.lock-ns3_*
+
+build-dir/
+build/
+/.cproject
+/.project
+
+version.cache
+
+.gitlab-ci-local/
+.idea/
+cmake-cache/
+cmake-build-debug/
+cmake-build-relwithdebinfo/
+cmake-build-minsizerel/
+cmake-build-release/
+
+.vscode/*
+!.vscode/launch.json
+!.vscode/tasks.json
diff --git a/src/applications/CMakeLists.txt b/src/applications/CMakeLists.txt
index 77b0993ad..6e00ffe6f 100644
--- a/src/applications/CMakeLists.txt
+++ b/src/applications/CMakeLists.txt
@@ -1,6 +1,29 @@
 build_lib(
   LIBNAME applications
   SOURCE_FILES
+    model/better-ping-tracker.cc
+    helper/better-ping-helper.cc
+    model/better-ping-client.cc
+    model/better-ping-server.cc
+    helper/quic-trigger-client-server-helper.cc
+    model/quic-trigger-server.cc
+    model/quic-trigger-client.cc
+    model/quic-trigger-application.cc
+    helper/tcp-trigger-client-server-helper.cc
+    model/tcp-trigger-server.cc
+    model/tcp-trigger-client.cc
+    model/tcp-trigger-application.cc
+    model/trigger-application.cc
+    model/application-stats.cc
+    helper/generic-app-helper.cc
+    model/quic-echo-client.cc
+    model/quic-echo-server.cc
+    model/quic-bulk-client.cc
+    model/quic-client.cc
+    model/quic-server.cc
+    helper/quic-echo-helper.cc
+    helper/quic-client-server-helper.cc
+    helper/quic-bulk-client-helper.cc
     helper/bulk-send-helper.cc
     helper/on-off-helper.cc
     helper/packet-sink-helper.cc
@@ -15,6 +38,12 @@ build_lib(
     model/seq-ts-echo-header.cc
     model/seq-ts-header.cc
     model/seq-ts-size-header.cc
+    helper/tcp-echo-helper.cc
+    helper/tcp-client-server-helper.cc
+    model/tcp-echo-client.cc
+    model/tcp-echo-server.cc
+    model/tcp-client.cc
+    model/tcp-server.cc
     model/three-gpp-http-client.cc
     model/three-gpp-http-header.cc
     model/three-gpp-http-server.cc
@@ -25,6 +54,29 @@ build_lib(
     model/udp-server.cc
     model/udp-trace-client.cc
   HEADER_FILES
+    model/better-ping-tracker.h
+    helper/better-ping-helper.h
+    model/better-ping-client.h
+    model/better-ping-server.h
+    helper/quic-trigger-client-server-helper.h
+    model/quic-trigger-server.h
+    model/quic-trigger-client.h
+    model/quic-trigger-application.h
+    helper/tcp-trigger-client-server-helper.h
+    model/tcp-trigger-server.h
+    model/tcp-trigger-client.h
+    model/tcp-trigger-application.h
+    model/trigger-application.h
+    model/application-stats.h
+    helper/generic-app-helper.h
+    helper/quic-bulk-client-helper.h
+    model/quic-echo-client.h
+    model/quic-echo-server.h
+    model/quic-bulk-client.h
+    model/quic-client.h
+    model/quic-server.h
+    helper/quic-echo-helper.h
+    helper/quic-client-server-helper.h
     helper/bulk-send-helper.h
     helper/on-off-helper.h
     helper/packet-sink-helper.h
@@ -39,6 +91,12 @@ build_lib(
     model/seq-ts-echo-header.h
     model/seq-ts-header.h
     model/seq-ts-size-header.h
+    model/tcp-echo-client.h
+    model/tcp-echo-server.h
+    model/tcp-client.h
+    model/tcp-server.h
+    helper/tcp-echo-helper.h
+    helper/tcp-client-server-helper.h
     model/three-gpp-http-client.h
     model/three-gpp-http-header.h
     model/three-gpp-http-server.h
diff --git a/src/applications/README.md b/src/applications/README.md
new file mode 100644
index 000000000..27592127e
--- /dev/null
+++ b/src/applications/README.md
@@ -0,0 +1,92 @@
+# Ns 3 Applications
+
+
+
+## Getting started
+
+To make it easy for you to get started with GitLab, here's a list of recommended next steps.
+
+Already a pro? Just edit this README.md and make it your own. Want to make it easy? [Use the template at the bottom](#editing-this-readme)!
+
+## Add your files
+
+- [ ] [Create](https://docs.gitlab.com/ee/user/project/repository/web_editor.html#create-a-file) or [upload](https://docs.gitlab.com/ee/user/project/repository/web_editor.html#upload-a-file) files
+- [ ] [Add files using the command line](https://docs.gitlab.com/ee/gitlab-basics/add-file.html#add-a-file-using-the-command-line) or push an existing Git repository with the following command:
+
+```
+cd existing_repo
+git remote add origin https://laboratory.comsys.rwth-aachen.de/projects-kunze/ns-3-for-network-telemetry/ns-3-applications.git
+git branch -M main
+git push -uf origin main
+```
+
+## Integrate with your tools
+
+- [ ] [Set up project integrations](https://laboratory.comsys.rwth-aachen.de/projects-kunze/ns-3-for-network-telemetry/ns-3-applications/-/settings/integrations)
+
+## Collaborate with your team
+
+- [ ] [Invite team members and collaborators](https://docs.gitlab.com/ee/user/project/members/)
+- [ ] [Create a new merge request](https://docs.gitlab.com/ee/user/project/merge_requests/creating_merge_requests.html)
+- [ ] [Automatically close issues from merge requests](https://docs.gitlab.com/ee/user/project/issues/managing_issues.html#closing-issues-automatically)
+- [ ] [Enable merge request approvals](https://docs.gitlab.com/ee/user/project/merge_requests/approvals/)
+- [ ] [Automatically merge when pipeline succeeds](https://docs.gitlab.com/ee/user/project/merge_requests/merge_when_pipeline_succeeds.html)
+
+## Test and Deploy
+
+Use the built-in continuous integration in GitLab.
+
+- [ ] [Get started with GitLab CI/CD](https://docs.gitlab.com/ee/ci/quick_start/index.html)
+- [ ] [Analyze your code for known vulnerabilities with Static Application Security Testing(SAST)](https://docs.gitlab.com/ee/user/application_security/sast/)
+- [ ] [Deploy to Kubernetes, Amazon EC2, or Amazon ECS using Auto Deploy](https://docs.gitlab.com/ee/topics/autodevops/requirements.html)
+- [ ] [Use pull-based deployments for improved Kubernetes management](https://docs.gitlab.com/ee/user/clusters/agent/)
+- [ ] [Set up protected environments](https://docs.gitlab.com/ee/ci/environments/protected_environments.html)
+
+***
+
+# Editing this README
+
+When you're ready to make this README your own, just edit this file and use the handy template below (or feel free to structure it however you want - this is just a starting point!). Thank you to [makeareadme.com](https://www.makeareadme.com/) for this template.
+
+## Suggestions for a good README
+Every project is different, so consider which of these sections apply to yours. The sections used in the template are suggestions for most open source projects. Also keep in mind that while a README can be too long and detailed, too long is better than too short. If you think your README is too long, consider utilizing another form of documentation rather than cutting out information.
+
+## Name
+Choose a self-explaining name for your project.
+
+## Description
+Let people know what your project can do specifically. Provide context and add a link to any reference visitors might be unfamiliar with. A list of Features or a Background subsection can also be added here. If there are alternatives to your project, this is a good place to list differentiating factors.
+
+## Badges
+On some READMEs, you may see small images that convey metadata, such as whether or not all the tests are passing for the project. You can use Shields to add some to your README. Many services also have instructions for adding a badge.
+
+## Visuals
+Depending on what you are making, it can be a good idea to include screenshots or even a video (you'll frequently see GIFs rather than actual videos). Tools like ttygif can help, but check out Asciinema for a more sophisticated method.
+
+## Installation
+Within a particular ecosystem, there may be a common way of installing things, such as using Yarn, NuGet, or Homebrew. However, consider the possibility that whoever is reading your README is a novice and would like more guidance. Listing specific steps helps remove ambiguity and gets people to using your project as quickly as possible. If it only runs in a specific context like a particular programming language version or operating system or has dependencies that have to be installed manually, also add a Requirements subsection.
+
+## Usage
+Use examples liberally, and show the expected output if you can. It's helpful to have inline the smallest example of usage that you can demonstrate, while providing links to more sophisticated examples if they are too long to reasonably include in the README.
+
+## Support
+Tell people where they can go to for help. It can be any combination of an issue tracker, a chat room, an email address, etc.
+
+## Roadmap
+If you have ideas for releases in the future, it is a good idea to list them in the README.
+
+## Contributing
+State if you are open to contributions and what your requirements are for accepting them.
+
+For people who want to make changes to your project, it's helpful to have some documentation on how to get started. Perhaps there is a script that they should run or some environment variables that they need to set. Make these steps explicit. These instructions could also be useful to your future self.
+
+You can also document commands to lint the code or run tests. These steps help to ensure high code quality and reduce the likelihood that the changes inadvertently break something. Having instructions for running tests is especially helpful if it requires external setup, such as starting a Selenium server for testing in a browser.
+
+## Authors and acknowledgment
+Show your appreciation to those who have contributed to the project.
+
+## License
+For open source projects, say how it is licensed.
+
+## Project status
+If you have run out of energy or time for your project, put a note at the top of the README saying that development has slowed down or stopped completely. Someone may choose to fork your project or volunteer to step in as a maintainer or owner, allowing your project to keep going. You can also make an explicit request for maintainers.
diff --git a/src/applications/doc/http-embedded-object-size.png b/src/applications/doc/http-embedded-object-size.png
deleted file mode 100644
index d0d1393353292762b90ee21763dfaf3543f8f5a3..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 6103
zcmb7I2UJttvOWn3QUt;ef&v0clOjc$NDEa!Is$@HM3EYZD2UVuh>8kG`9X>_DS{xq
zm(WC-pmYKfM35E;y_0tm?|X0Eb?;s4y{wa*?7ipgnfYes+mpO7HoVF}$3X`G0E4cM
zrYQhGF#rI;(@=pkP$scqaB#_3|GE~5L;`2h)6>Z}EC66gSbzkqtYDGAmoI>t%QOkg
z3t*5~3`x=+^AZ4%7=VN!1(OD|MMS_yk@$Y_ISvjEX=!N#1A}|_?ga-2zkU0*tgH-+
z#rE{{%+Ah&Du|aZMXy8`j?NLyiFgueWio_R+5Bl`g){<y+JL*@XYl!#=fz)IQpPXO
zoI!)806_1vuS)>gL=y1z8;LcR6l_eyU`SfPKE`X|Z$IMPtA;AK>Tvq4t%-CDFDV;X
z30a8)1}4)dqm7Z~ZW0()0K>|PL4p?sV~@qylQ3lak)(9+vL~gZNmwii^oNA)t$If!
z5z{Msn@P>R*x~>ZGM&WR*w~nsmd3-w)6~>tXJ<DxHKnSm+N9Kt0)3`M>sUPi0LC`*
z8xk+d$O!;!*K{@2uKT7CQt6Yj^4YX!>vFG7|3cnBHmeQ^!SktUxC-4bT+w?=9MwBk
zA6<9m0QdR#FN~eqP<L0-v$tpA`K>e^Jgli(x8FyMD9uPrHl%b~pXHhYD)yD7>l589
z?`{$|SfCR#Ps@zDG~h8=duV5-i+k6Cy^fw)jC9E3k(eCABB4+>TH@0(yZC3;C-j@#
zaokp>Mtv(!hD2SOQZ^-m4jrGZ_2FupHX2>ZO|<K<Yxc!=iWd%#vUyZ_LXU0^c#EUI
zI_iBhh}T;06e(H^7x=wrZ>*6U6N=LL+pb4lc8MjmuhB}pLyJTGY-QU!v*b;>F4*ZH
z|7(rc=hW8{RBW284Zp-D41ax^JR9QCriTgj(fX@#*u%Z&;lLB0?`92K_m^+{n6X@r
zD3x7tY-DL?EkV?++5A@3oe^R0dmGW5TGD&r!>m1LX(^)A*hT!#@$|Ct!tCyVOYG?M
zy15s;9V(;iXDM<mqb(|VHZ19$Idttx3_X*8_uSG!kOfq~I~Z+eD&KR$+R=d1EvL%I
z@2$!!;Y)CtTDx}hE5Eoxa^qYTM#Ddf&9`6YmamDZNU2p(&PGJrHjmvz>!h*j9adWz
z=DAo1L?@sUY}+PbiRGU<sscY9oo!7>S6qMe16}NzFV>q%B)Fe9OiMJs<v2jazAVb>
z>83*7wN32%EqA4=7n@$UaOV`WeN$ax-Yb=+{1h-uMNEGD?n&Q1HHnIKijGJ6H5A0u
zG8J&3>vhAl&79}l89!eZ6p>@ci#QyrjI{I2I5xZV%iZk@8SfT2VvOxRv*lD~Mkn<E
zGS|f9id{CVu)83N;*Q6vnM{ON03EBs6B-8F@-^4p1KkKg49;@F?Sf^oq@!eSw2TzD
zyM_hZUuIG(In??Rxo<ZU9^ERSMc=%@<c39!&9MjYR6<{MJXXx^b<6TF!YHD!9-Y$6
z=^i=MRwpBSd(g!UR#r4tdEVl^`-&-j<*OFCtPU2;_)233=9PGCWngN;VBif}$%mX8
zzpJE=sT6lY0teUl3ZAWb`to5D&$DGNjg0x+IMu}Az=LM=5v-3A;vyRqp51zOrdHhX
zvcJ)HdXKs-;iuAmT9^`C?M2ohF`+p2IP3VrruzE#E3JB%$>qySug2D>4Bw=lD5@$P
zr$cun$OiqKWUT?rRPn!XV;fXO>R$Ass(7vuF{dg1ge(Wnf@==)pXmFoOb?!BI&=yM
z&vX~@poN8X*1WII%Lj1;*fsU_k9RH{JPBBwf?sb_zPDKSdySu%%KWc|iZK$h(P_CT
zd)u!$_6hFIMgHk<0UR5=W$N3~Ju4jtYlQl>RQd@-tT?|^z<jmuu1!o0-h*wiSd5>V
zc;YVfVOfbHD^0MDIJP)lgB#9kdJ|*CiC$z_9kch7^UbHv7@4_7tlunRpCA~tYh&;q
z#9>QE7@w~3T6p54gbPS;Mk4I%Mbz0+p9Z{*<w+<kDh`3*^+n)U*Y4tS`=F2@`B>4`
z@-e5W%|lvnV5acd=5$P7BMi1X*)!{$pr!vCmG=E?TGAn5(^>CR71A|Q?rN7$QvT5`
zdQe;qbFaet+xlmTm1Iv~mfPT|@|*R*#P7Xt9CR871~*=xB3-k+CV}r$!+7g>G>;8y
zjYS$IGo&Xurkgf0nN=#7a>OjlY#qKoc8l101~hR^!O!>+7zYZKEDlbi<S`L9<38@(
zwzjxur13MKs5Lba+`g}Yv5R#58+EFsHLxP6EQoWY%}7HXdmekbbkb$<3}yXmxk;F+
z{!;#yiuN9^oVtg5&<XnLoT8$E@)HiCoPM(ZZn$-&_cvFbECRK02}AXdXTpuYTxwaM
z?-_h~a=bR_dMd@O33tjT0g>ew<zwJ#TXbq_4!63*u6EDt{Mm1yBL#u4Dmjq?L0EU5
z9QOzOJf&p=*SF|*ACST2eI5d+vBGFFd65V>B;*1OLQ@UHyKlpbof7mP#4Sh7YG8=s
z4^?iqEo-ZT-+JoB+BYW*golKp##@a2<J*pxnD=Oix!+o4iWFWo^`&ivXKb(4<w>7!
z+G9UX;1$G@1ZYxQS7&4g#rO)mAbuZpVK<yKkMkOWv-c04b08p%w5p~<w4KY5KD22U
zq55{Vr{7E+9$4n9!gjlN1yc&3GrI?ej@+)nyx4BOb&^3`Dj)RFX7l5@Kw~OU*8w!(
zwx)_K@8vn~wOdB~ZdBtgm_RPqCJF2k-?|G`2%q@LMI}))iBTgYk9AeBaoNd=DR%rU
z^Pb&zdc#O&{LSa|p^@K{JEk6e)~~aCe4n!AVKV3x;x32;9TaBrA3*v~OTujSBb-^U
z7ScT6NghEXM#(Q!N?rn<`Wb+tba^VueS~qY1Xk9&8p-YjCcQ9AdZf2?P`$>gdTW>;
zjK=5!i@hNK0s1i_)-X?=2ElFCz>@jh{dKZQcG{R0Mn2~Trszjm>&9%&B?x2TS<bNi
z7d9~8I}z~tdv6&hDbs$n-V&F`cm_j3r6oZ8&7^J>Bl~r&_(*qNBr%0KT@Fs`r`%Zn
zKw@<2Q(c1|3nb)s&&6ub1VRl{$qy#y+>b6)Ei8r))hG5__KrW-?Rtm*{&=+Bvj3K>
z$d~OTIaji8VJ3YQ12@rx+CS>^Ui*li2|q>|)X@+>v(oo_i(Q|-bR<MLkL7&undx+}
z2o5xU&Yhw9agjx{IJ90$2!}baon@y8WU?z=aC~==Au$RHQLFw>QpV953k+6);GLAE
z%*A;@7Mt<mPsUTwng{XBXiW`sL*)p!;epqS<R|9_?ZeDyyU1IbsR+B|LmuT;H#oCH
zek88Xj!_fFF%^F2Xb?)XRruOQXBZ9lA%?f>?c-*ph|tBjy4&M=8`G6O%=p&|gz(3q
zWUsp1u=%HWp<yprJQA&=p2(9Ih1t_HSfE?rJF}k_Vlp3wx$saO8Mn?6t*c9<CZm&b
zinqH=&Ae-C@F2O^Wr^%J7_>mojxR|9ei<UU6OyiD&nt4s3Jeu88Ona9U&?hwniX44
zz{%LfRYAN5$_X2Vwc-??+M*BFvV$A#h?G_Qb82!vdM&cKpYUilPLMu;*Uc(eUpZ$S
zD;<O^K(`_tztR{d$H4q5u2%docmgy(m}8r$>V2SU?{tO4QcMkLk#hQb4juI*E%N1x
zcdW7$_Z1jT$Mr|8yES~>EHf6X$z&!LN5(rY4VP(R&^`WeXQpQoVCK|YVv2C3vL)|u
zVSs0kKMu2@S(|$M5Cn7xKDxA)ZO~!xfIj?AK7GHRYPvzGHU_Q#0Z>#G{<_)MasHvU
zK@bRepD=5>+;|nix>b(BI945^J?X8l7m~zEXH4KSFZ)NJy-FGKT&UE|7k5JX$moUZ
z>Qd^k8XkJ#a;6&Vgd{Irq%-0v2ST%%nIW^Ep4x;+MWL=~5PmX3=vE9x(iJ4Nt1{2k
zB~EKLGf_D1=}pP!A$%N~%?wl&$vlV}E7vz(x(0g${2zJe(M;JME`O3DnL!ORL2HIy
z*bGr)1rvr`^@jA(wvvOeKXfVVttmmtQT>c}eu0;o&rk|ru`>w|1SBCj9UuA*<akCd
zlXKEKW1&$}4UEIg!cE+$nkt1ByjAT#C2JMgKJ!^!lY+vGydnGk-Z={7ps=S~JGuEE
zwUNuklRe$^=zcjZm^J*a*a}5v$dA+G7+$@%fO(CnKUmHisFAaLNMGdJB7I9SB;{!3
zP~}z1(6`)fE5m=y>trH0Y)|*{QOv7?h|04u^ZG`3o4Z{4{*IFDqLm)TUCWifZ7axZ
zRRUBjd}h?DQmveo{ZrCt?x^;*hk0EKhBQ>B8G^I2_(A#%>ahHN5TLHryd)5kXYtI)
ze>qI_N`ThE^IYGIW6Pp``u+tq7iPuV&#m=~nKGK+)&!#?1k)7$1Zh>SZlu)2FlG|T
ziE#DWW~*21KGY&BFV<0b?qzCJd3Ny+iwND#E4Si;!k9cxQ%<dquYgQRQAW+%jxfYi
zvJDp6fQd7h6XXT_2?~Xq3SyUOiwmW=A&`(<eaw{w|9O!k1dQfg%T2UX`0!2$F5_$c
zWpKQX;_$l@C#9^ho*@X9_CNarl6!Wijz5J7c$jW<L&_*<J!Z)B9~ds61|c=9fYjaY
zH<HbJZOuJgv7E@rq%cP767P43znBv~0{^ykC)MQ<%O55l`dn^Pu$iUPKtHq*@m*zZ
z#ZQ~ePbjQUA`eXU9otW*KF1^tu#g^0_}0X#=x529jBiu;KK}qB4;`$Vu>>`C!7ne&
zFD%}0gH#^LMese2qJ;0aA~7iN@8~KBs_794l?S<<v)@J2;1T1xiq>@j-7Ir!RkGn5
z2WvI8bj6#pX_uw;X*x^o`Ic6uQwipiF7oHW^TLV;echtah6BN?FUd{m4k#sXIrBHS
zRv<Yzaf+Fuk=iH(Z%?tE<a4iK<|9VR^d|<hUU)Sn$3b}J!;pdGvIH9pg*CBi`Fwli
zB8AaXMujwQRw!ck9LZ0mj0?NGa$g8T8i3r`YV>EW5Hcppm=Dsz7u)+F<?&^n;>*mC
z+XYMaPveq3!62<6aoW|Zl=`FG1$yv2TfVrv&_%;euDS=c3}0dqd7Zk-W0jvhh8Un>
zZ_82<;dj)`|JxkGiH|Z8wB%E;Tz|=j4rB^hVY{R|rnXnXJxv2&&(l-F{RtvOqL<~p
zo?Xx2OgHje#glTdDCYan!&JsZHj>E6`wt%4d!DUuY4I16T}#Ks-Y39n`~T&(2VurH
zAi<J8N{uNuxu)@L`@{m+qUEo~4Zfb76@Qh??Jo}Y112h51rkfan|=Y`Ha22@aGxRb
zb)#9#C*fGQ5`tGL(@#jVuv7~}qyfQUr7OOb3y0pC>Lj0QeAvwDa>(>aGG7aF%036C
znTO!c4LtpFxa74Avi<q==<8qu-7g}3VS_?DTX5eWWcmTaCVa|%sA7x*Mk9T)1N#4J
ziqeFTY+_BP(uA;Cz^?B9shtX_1kNN9H^5ue`Q|>%zv)rCc4!c}c%yY?s8R&Xj^R(A
zww?`rue>W7@BxT|;&HnWh$&}~v??z)ONYn+b}h3VurEiuxLqm8y*G#%cA^KwHS1N7
z!;TG9Kgwk0+4?<*PtJxa6XEzNPzJQ^D%4wH8o2Eql15k3=p~g^?)rZvQvVP`-sxa>
z<Hi+=V@WMbO+->V8^1^(rzczbl}qbCIQoT&sylOOq#gOAlmQuH0hH_1?$qYoR8z3$
zr8PhP(<B-JSRQbG^_0B{CsE1Bj3i%0rNMBcZ#&uO(9G=GyIoN*v@U6zA$=QSTfrMf
z?o`8NM-_kV|L6{alUbdUI7~mj9kMibY)u=u>e!^|H297u$@6EoX>cI``KO<CcyTU+
zVWspPK6Zm7w106FVW{iZ3o-SdZreCX#+itP#Qj==lOU7Xv$lknHU-@YNAg^T!%Frv
zGc^t^gl3g-{ikaeW^c1etqB|ix^XJbyX7Pd274aJ4!q_J%@zN9*ADz;7+g9BDd8u}
zKM_!5g8N0UOTJ9pjR|DOp9r;+YIxsxx6Z%aM?auq^qHZu;ilx49s05{$>dOMdK-_}
z5}VBui)l+(RxP=aw7-gKvacO#94)fjK2S&zeS}#E|ImwI@nDL0MaT(=d+PTs2xlv&
zoZIM*+upB5rR^pycqBq8(*DraQIUmPCN#9f(m>@~@}Q9G%@4=51mQJ-fnjscCPAc;
zQya{8=vanxX;J=7&upz1;nN5vL4OCeu?MXmrZ#p!VcoV1N#aFGj2}MP9dx6x*K&T3
zH4?5?LHs9|jfR!5^5HhP^MVuHT$x_6ze|lJMtSb3w#p8i+Y-Qy=gN$@ceIVXoIHg)
zH4xlBeYcm&;ST@*3Xc$W`~oWyOzq0f-g<25E)j(7ZZ9gb-L|_gW3>U`PV_z2uT~y)
zv^t(v>uUXwbq<95fvbP#X3YM0#SWYjBMH_6^MQYg?>`2rU%m~V@#eaH)ESy5bW(0W
zrp5q0Ho-05az-U7baKO$4jq*-|4Zp0YgE2wb<X+BlfwnBFTW<CN>cLf!OCd{D+da$
z&AQIUE$dnws*bk<?!U~+D^^05Rt}`+%o_b2YG9m%%oaT<W)gVpnnb1Ia6<MB*HZC~
zQyrtdGODPq)}G&TsXK9X=0QbSr4J&{Iew8dEDL3FWKKV5v7WKLmF!mksE|FWH0$(r
zpJGNY=Y;Qp9A#fJBlnz8SJ=-TrMp>n>lm;+HNV`9&Sj`!5+5zxmF}ZSG7ERt%2iW`
zyZ{s}<98F*UVG$pb;!?5vM(3>W!Zc2L^5y3<~^O#QB9PO$Lz-HSBXew2Svei`Mx3N
zj#KI^t)_a<w8cr0BK?U@Wt(b;kJxMvQ!jGwK0aEZ+Bxb7MMWFk8Nff*jSyH2pnnZr
z@JA&uxi{UF676WSj~9GZQ-@~J(CCUToY#XHW4fX;f!3=vDrvBbO%}8kCT3-Yv?ye5
zldgqJQ$VK@yS*==q6yWPA?3(9{?hT7Bl@Qf#)`nE@llVlQZ2F?s@HS=b?pa;O-gaO
zmGpwdYQIW8#Aanid05n-&}`rR14K2I53+dAHM-sQy=uQ}U^Kj4{u(FRHEPx**}Fle
zyLNS5=iPgTM9?nzoYzOc%+p2!H93i`3V-1xcN}ffzSn-b!Q|1&8qeh($~FE-(>q3s
zW5_$vrs>?3=dreEPL-D>XLThmD^Df*5BOa)RQMdX8PfE0Ru}xUW{@fGu<-r}Q#D-@
z%kn<tcb*yUqx6H`!HYrIJ<VEvpV)oK1ITBV<(%U$ad&jarcZ=nUru6<gwD|uvO4^f
zXrEZtL5wV9mU0w{Z%`sw+=dRX*8ElT6u%p4mpG{ZWGH@MPxXSNf9UQURUdgqSIbbd
JNZmf<zW^=r6^{S_

diff --git a/src/applications/doc/http-main-object-size.png b/src/applications/doc/http-main-object-size.png
deleted file mode 100644
index db953059db0d57520ef6e4a2c91bc47d34069777..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 6385
zcmb7IXIN8Pmrg=}&?MnfB!C1EMG%4%sX{0spcJW6lp;-f?~o&cSSTt;5s`o*3Q`oM
zmjKd>C?#BqH0dQsM@r^|@6OEgJu~xTctUpe-mC1r*88q?l81)+S6CR)j1UNfMMqoH
z2m*lt5D0VvK?AP9SkDiF6Dh-MCYLD`3b;Zb5U2wY0s$yQ2nDjbO2k3h+8}CoCMiS=
z1i%piili;@7y`io5DGxSQ~Gm7ML|{EL@%g^Mx&*rrS<gmoSdBSczk+#dTD7Xkx1<7
z>YACE0bQ&~Nj+J8QaCibX1X>(p{$NYQOX*MS63+{2<Q#s0KVe|9}7x6Hb0&}=H~VW
zj{<>o$M!5is7ItgdcITGlPGw@H2|PohWr717g9pkX5(th-74-gZEcMb01PD;vKqCT
z4Cxyqj6E^LnYv*Cb_l@E4&cBS0N4@%TM9ruKaN5GU$zv2H-$)~fcK#gyUSm#QPv1$
z-3^q6ZemF|1xKJ@>gwvUva<O3`RnWJZES4D$H!GwRqK^IJ-|CNcxzkuK_Dl-QvadP
z#ZK@*AY6_*nrbG&FIO^|$_n0bLL6)BUVHmaI3F1YN9E+C;Z8)0m=-9to_?hCQG!t|
zun#ozfBY$*dRp{Ot@ix#AHCm^&!70RMJCg3Jlxc{_I=8p`{LJ0a^r5RQMG|w_|~jV
z)UZlk$#P0c^T*oJq&>}#{7lesKLLWSvFk7kg)Mnsq51dL-nZT|^Ds8A*I^&~49W^)
z#_oQ9+$29hbFT>b=j~Hnk@w>-Ia};Ptpa8>`wfZ>yfX6gmo_u5p4;FYvo4TnH63J0
z%^B=2yZO-5n)Ai<Q7YkuxNhwam!%Sq6-T!qRyA0W*V3gG)en1`8?9_sxH*FgrV#eq
z<*ZE5LtZ#<?$PS<Z}QuMSDv??{Bd~@DY?Yl=aX*TJ04Q7+2q?{Sw18&vt8iMBjNSI
zxynPMmT)i4Y~iirA-+#<X_&ygFCu%h+G-?HG>G*sEPrgfC-$Zr?y#O^ev^Up?fZK>
zOE-!DviF-B@z4jo^?kX;QH^m9?P9pmXBU}fV_iN3S1ywBav3iv@Zjkvgcn)}?az!k
z+2rq+_i;>Dl|?j-X^fs5@~m%OM#!%g(PkRVM>>ujX<!IhhcUaGpUJrjU($*#vFXyq
zH|4GS+)0<WC105-7uw4y*OYn6FPmM!<~vgM2X?M6mi{vPT1V%%Qxeg0*y;AmPe}7(
z><Vcv0dRF0g)KL2KbPHS{e1A6hBX%Lt(Y-XP*C_u{`|G2cLO)fiA|4MO#^vey-_B2
z?4?eAs7v%+_e$}ZOEn-)zZxa6hAzXc?E~S;2O6Uc!AHEUtWb$7&^#K~Z`mDtt<|RP
z5lYNQXv55-N~MBjIsdJpi=)p8FN1h?P8MCiSc>;-lFbAz&X%Cp4xXQLz9jF%>3uU0
z>tZ>{TibJ%Fo*W0l#KTdOnbA)+ej6fTjseDBa$QLiar;mYvFiGg$RBu6?l1@i^T<k
zgsgi&S;QTl`b;S-^Hs5-4~n%iZ9acmBiX#i8nF|R8s>=}O+Ic{mRhC>BPmrnckW3o
zTQ(F%c-$P}Jm7+sI~BzLjq0WI{}bI~?o{P7SaO^=&jq`s<n>LO9<imOsz{e+3!-0M
zYH0`6T4yA&66>%KD6J-2Ez%qsKd>_Bc_cyjnY3@m2i-XYR#PWd=w<8#Cg##~TP{l0
z!&{lmS_0F;V(VK|17fqZD7*tfWYX0KcjEpRs*NTbcCmH$Vuhk&eO`6JFxZ|hHlub6
z+@%vCE*FrW`Z}F5EOKmC<=tlA3pzY~KoISZbb8qGGg&$^2&3Hpm=dTq5Wla}1@WEa
zG91qvv%~zFQ^zR{+^d!_G4O>Rk^sNbp>jFT(V`cdvGu8aO+`(PKQ)T28ZyaeJm4R|
zMZDx8pfUX_j{eg0ryzY8xW*h?-{*G|>*zHXGRC+a*o?6qNLD?V5dxx)hhVhVC#6Hq
z84Yp%hRk%VkI7O^V4h882mjGJYBW9fA*n2n<f*=A+j+&?dD*ty!>CWVI*E^6E>Fkz
zRgbE6`)%Dfv!WKyk_<(+iY;bX@q38XI1WQTBW@3aE{FON<BWjzS#949sg)$*LUIK|
z?$5K92VOfT|3DdyRHBqhm1vdT$CaIJ5ubbiUcw_QEhDvEC*?EVIn{76!jK}{aCAtV
z#DXWgp!eisYN$`v@bnW>TSPwpV6t#)&9$X_-gx6n-&!NP@&6@>>P~TL2>kPSI%&Eu
zAmQLpX**tzxRvRr{yqr4ze5vS9}W*{k&$$w*$Ei9Q2cb?--bp}^_vo`h#btOTYDE>
zf}VBYpH=VHarAF<`=t_41WgP{AEXb;kWj}JL6_`~w&U*Vi@w&lCA70p(>TZ&xGv@K
zckr^(t7s!^HitE;v)oxRC(}eLwnnSRxH@WO#cy3oq5WAGRiIrJr`B-=LVFIs+xh<(
z43#b?;`W+sRHDvKAM}sxwyq0ceyLXlJr*JBA`q2^oeu09WKZ=6kvqm2e6H9)H+-1p
z5i9SJY!sz1nR)Jdo6jkdd+T_0{nl{y_7X~4TCjf4nZh)g3Re~<@?SV1JJKd<j%y+W
z!rpQ}Rju5?_N&6frJUa6bLxa#sU9L-gzm87Pd*(#*ymd0hpBM;G2|5x0}g8UOPIgZ
zBiE);dlaWedrjh;AXn_K%PcOj!~3)cO%K9dalPkDCl^v4__4@$(JYg)w<Dpd{7=8h
zVq69nZ~@;sMj0>45fTe~(EaWjD~GU1Wx*^n$&=vT*{zh{JDEm)J)%N+e6D1!H6@{S
z6tW`<Fid8K{Ym0jl&ewtD~}(CED`*{G;d%wWUW7{!*WA*fp*z(TE}c?KJXH(@#!Y)
z&tC&FdSZu48pM1ZEI~fG`h382a}Tn_wN7|~KnIVO9%t))v#7Yz)ovCG$gUT<5odya
zZ`Y{6%=F%xt(~)&+@cB}y9ln8rn0F%dN+yV)+#f!;Qn}2wg>`oSq&$`2vffvMY|j-
zD=T4=rOY7$suO@r^oXa+{USb7ds<Y9Ya={)1Yzu~a0iaKA!G+rH2%R1?YkGw289hG
z;*lb{B|z0ro|er%KLOh@IMX|_6kj!Ap;9Fd0(Com1DBmQTZJ}xaT+A_)05ELM}K1!
zsUOpfOHK`(SD@9<6+{b!M%u~M`wSzHC0g_M@8)1I?84T>B9gINFDpWafzwd*y|dKl
zm`C!lrY&>}a}p)5M{!1BY~#Of(iBnV9#Vak(OI88rOyu@OZ%6sZECQj?LFZ6U*8!|
z#TYK^XQN6y=jo%VwrQc+B6hGxe18k#i0Ev(<27MxoPubT9Yz+#_ua_}u9zcm?z(ET
zY|pQ6?}b3Ahv+zD*<Dq0YqvSQ+T)8IynXZctJM`fog-_X2&GISiMi}2_56)_&OEtw
zbm8NS3y#z69C<dIS@qNy8Z=}_d^fM0LQ^x>k?i1dDZ~|7;%UFibYlP9swIx1w}QAK
zJ2@ulF>&af3JYCz7Bsis(hO><nVCX+&qvIS-$$4DPSr4Gr^aK=M;$k~p#^7hc+RXj
z+v1BVZq>z8BVdi=P(0O}A?9hZX7U;|x4<L7e+2+!pVgt(eW=;{9}APR7&&1zx{9;#
zM{Hu4zEU-##)!pkof|g~2q_q9o@}9E(q$%6m$9dX^Lez~H8Q0&L4#}qsKN@d6KsE(
z(un#ttJyaeLvy)}4Duzkb-zA2SjawWBl#vK!Q~iTIr<GvZRbw@U{jHemDvgSETfJQ
zzHkWK+clDl6W%JC*m;05%ui#<5t1JO5I3L~@@ylV$#VNpR0+)f?QE|qO&&j2JYc%f
zIVK5i|2Jxp$VVWl*x}JR(Tqds8B-=%kx?f=oa3Om&zz?E2D9AH=uq!`7gqE$z^3LL
z15^xSi1QkZ`AWr&A&vTV!D6Ummn=cmZPJk{$Zged^dW{s-E~-|2ie$e8O%pTlNQv*
zL3~q-8pz-5;h8c$#~5o#aDhkfI4s|1K&}ORQip#4;`qK>(=>)j4Fa|9;TB9-DstL~
zP%Gd5vC}ho<L5sPBrzPvr`OWdxPB7Fa@kH9!ybeBZpiM66VdHKeSb<lMK9z19FPIW
zG|jUWVdMk%tLz9O{-Dx35X98cg;wMGKe&!DmSjH;`k164yJAkZNIw`J>i8LC`zCl_
zFk)=tm_l1^29WgB$uO$+sW>&uxU5j_$_9F>Q}`blkrC)_B+c0?lYiduG|#Vm)gtCI
z6!yCJl<)A!D=?DIe&T<Tomwm?&s4#7^7Lrp<{^0Bi#DXQt#1TgA&T5^@NkI*T7MI(
zEDR<XtX)a$4iSQ_tojXkK@&dVSBY=A)Hg{>a)=veZ3>}RLagP^TL{2ZxQhNoON4RQ
z-|kc|2*j<%8l#&PfPO;b7DGI8jcs-SxnZ@Ya%FPc;bz4#3oGn9FZyzTOc*NoB`1_g
zB{W0vP}Oxrz@oO!Nowv&0HXk7>70?4%F~I*1&QdWZ1$9=54BdQDW|T>tbLg{$99XR
zrx59i(`F=rReDW2{|yK8LS=Io0<mlT-zfX1a!k@>rq+Xz*R{t#nodP(>k@$1mMt1w
z>2G+USxiD;xMkD{B9pR&OZ3i<sUAPkEg$$D2p^ZIZT98ba%DX#+RD?Y3RmA4Xec=y
z%ax&|&KPjU0;U>r%*QpVD-LqGvh}9VFSp?HJ1@AQQ2y3hCoLSY)u%Weg<SI)okp*H
zh8PGmbs>%%Vwyxu$X0w{C?Zq|sutNjD5=jXG+^cV!8FvlFq!<J#AC~NPn4Q$Nob}G
z5KEdy9Xxa`YDEd!4n#AE1bMLTz2%!S7|8W+bS2~HKq3*1z4KZIKSz!H9*gjaga%Y?
z_PAld{t*1){w+Ng%Yk~nXLtd^&myH)HMf&E1Sh7o#}Sp<W)-vgRmaIO7TX2gk_v6f
z-$bazh<5X=81LJ+SLaq*Kt#1mVzvY=CPfZzUH~_D(5QGIQRoKoztYIhx?4vxn@ELZ
zGzs`*?vdb%1aG&9F5$Uiu~}ye59fUv|HSM;zg&xe?Z8)rymszz5r>okHMWx^V5Q;!
z`Es}Hi3qe(b>mKSc~rTv*Kl1^qAQ3_M!6MwO=2EWVnR7Ne|h-^Vpl$j*1CuIY5o8J
zKYJ=l!(b{gLzQ+NJ;$dCcZ&X<N{xITQd*V3CK{0fh9@H<focT!R|(Se*Tg<Vf4WSq
zjXzPDjxw&)-ZO^E#8M+ZlrSH6e35S~N!d)j$F;hKjvcIom;9S>$5i}n<y{P?F%r0d
z3Q_-sDGMP<9oO0C=XAc6YYD-Pz>4cZ`SuqT((Wv~LX}g<wR4)cXru(uKiH%NEu-Tf
zY|lOF>-?D+aRwuOS~=Ql=8@ax;WY+Y<vNJmj1|~;G7FiYlWpbe(f|2a!9c!m5j?`U
z?W`+h@eGMf&>RGy_dXrKPE<)~;^f)F7$a4sqik?V=N3MfCi*oCOc*}^8(Z~V3ff!Y
zZaJ1w6YPuZ-Y(-k2?L!iNn)#^&R`-x#y{C<`gl+|RTOj|Fio<<<*S;H&QKpkJXHkI
zP_n+is_pvzGjMM2*~#nw_Q@|fXDR{>x-Vpq4hMO^BZ7lGRj$auerB$ry;rY-{rOF_
z4NbnyOChTEF1P6-1I#$D!yQ@TyZV#0ZRjAwF9>QtCe~K$_46Jp%hH3&83x^VfuOlr
zV?WHqSmnQMF&q1ZqrpJ7-Tnhzcv^Qh5e3qy91|*UR(IUNtr}F*!EOOM^ZszeB`qv4
zF~(2~#Y-8p!G7|g1&&(|oH6aYG02gV(2W}p0MmP5-I!x&^YSg93W2@ioJjrW$x5BJ
zOGeHLgu=!s*ez;kx#1uO+;{x8LWQ)&G2N3&Pj2DxpBn4<UNk6`UfV_^q4@Mo*tTz|
zys%h5{?Nkn_z^Dn`G*oUoP5$P+(#@a<j3b%nmULZa^viVq0Z))iTQguz^jn>AHrgq
z#EkVXZp7@JOnin{Kj7bbAenC2Fy|1H>L(grNT*4(Ib92YrJ^>Rhl->7HtIF)jH&$3
zF3E8T*$$YjSxLf<r2f@lb@gCB_&4tLpPpFY6ES!WGvYWpVagb63E2Nr1_PMdnr(d+
zIl<74(?K(7cP}F5&lAhlaHYgAw&#$&)r{dx@XaFFI1E}_KrF}MoH-=u>RDia%p1O9
z?*exVaHo)K-J&KjA!@{4Q^^ZVh}}CrPvG!4iG&xD!ie3usR=A*qP6)t$6E-rkAt2c
z0Pxt=Yc$yy+m@+`ONg}B^7&tFk!xbjc2gXP-La{6ysQ}8g(*=k6cnFZ!6m~w8wOKU
zV2(hIcBhd!b{tUkX9!76y*v%~;@VBDnY-`2o;|zw0;qj?%Ke0f7rfs40r}P_6FG9T
z>qr(l_Bo~w@q<5!awOZWx{>y#;_LSr5ee5s{(;x;FCD!AJcre7;M{d<?X~#9`f-`J
zZvbe)OFd=mLA*1QJohen+<<3e8a9h9`T)T4=d56L^>o+b&Y6<{g$_M~!Qx4+8K>8&
z@p8A_2EE!U>8{=Iq+31Hu>v3UJ$b5am!-0B!hdFV!ZT-7pC}$XdAB-31CjQ{`rp5_
z1NFWErB1vW*b~jQHy#ka(1`p<8KFzwp5zj`{Kq#;+S|nOVYy7IoST-wz(K9ov5;4+
z(@DogUulj4?&Kpuwp68IHUEWaaeZta{do5apIqk7dBT?pE+*8xUYE$~=b6BeM+0%0
zRLN?_G?kxI)+hQCFIP}a&FJ}LrDWs|nZ3XY`cy7SPVw4!*-4O}?_X7$no&RRk@0#o
zJ9XjlN=r!6*O`3Jm&Ih?@Y<NY2<S}OYiof&o6RSx&>ffw`J1JI!#Fszn8=Kr%(zxS
zBD%yY<2($lxTOunAE3P@TQ?<0KxcfJ$16A4-)(NhTNjTqWN)K9eXyMNCsQM1KF=(Q
zmzjAtddmuiRK(x8H^0=$`<rui-KqOVwAJY27({3Yv$Rg7o2u=UHw!2-B5RuveAN$(
z9Q(*=RyWX0PA8vH>Ii-E_5zpCk5r}2ZSw@?->`p=_3^B~bBjfO>QGc|CQWHw-;16j
zztyVA80l;A#4aeJ*4mAEycqvr|GmG>Lz>q~{Lv+HVet&`xC);x)xW>J_xF0Z9x3;(
zfg>k%wz%KVJDulrN_B^6-q(r&qrfPUk6AjlsuBI4i_*MwvQBE*UF5WM4>RbDOnBd8
z;*mFYK9{v|6mjl;rDk=uctCA7>uTcs?4ssEI$lfR8r$~9*ic`#CrO&{Qa^0AKabpV
zA*lA@;pX+esvg<QTXqz6(y7_B7i1lkm6jBh#qt^6wz6#Tt%P#zMp}CnZhdE2u}(>Y
zzc7k7>Hi+MmU;WF^V4ocgU5GRT=d-I{av%q<CVm_s>+-=e}Cq&s`~zcJPR9SAq^<@
zG$g8ZnVTfVgoQ1KvyZrKDEL^E6v!LXFPoFY6x^}Qhh|@M5{5baM&mQ{aN^_-Ji|t0
z`KwTCOkB8cI&ZFNhjnpgcS+)Y%vQ>bMvOD#ClWARZ&47z8CG7i;Td{If20&xx?fm(
zt7cqT-21L%-ne7vyE;BPJWGXs;wQ5!_9V?q13)OBQkJFk{@g_un*pF|bK$g`$zQQ7
zdhh!I)<)jRK!uTRY1Uo1vNcT)mxJ5wO@9`btn_wk#USCPK$dy;@)VV3hmrQ!i{#Ps
zd&^CYWV;@BdxepOQ%HsUN%#9Q;@96>6_zO|%Nfv%KUy^%T)F=xHkicdx#G4o{GyO!
zdD%%k;*riG*D`yzlZIsjt0w>cUfkPwbj)I`*~{*VWqS5mxY7=de*Sq=<MJ&U33Kl;
z&lM*UYcR4mMP;CAqsFvKv)b;8D(1t%N4_<Q6}9~-=Sz_ccU8-2eqIY2EUdr2AE-x*
qz`_|c>d=*I;4h7@?fwC$XDbETY_(V*7G$zcUDCO%uUVvS8}%Q@1*Mz-

diff --git a/src/applications/doc/http-num-of-embedded-objects.png b/src/applications/doc/http-num-of-embedded-objects.png
deleted file mode 100644
index 4ec1aa6159f31d9ecaf4d8fcd2091bd0e193c24d..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 6565
zcmb7Ic|4SF*S}{NWbD~@S(7bUvyJSE>}!@v_7K_1a%az;C9=&FKTCw{TZ|}MN+@cq
zNp|K(mWX-pnP2bc`8@CQdH;BPhU2=f`)t=a-*e8~4^52qXsJ1=0RW&i(APEt05}K$
zusJF+Xa`O&@fljknq0BaArJ`A4hDlE5-b3K1S~)RHaD>-puZo`^q41L`2i4x1qm|F
zU=jeJK!5-eA_?PviHk$5sJRh{kCT)0!i5V)Mn<l#u91<EPo6xfudl~qvG3l!TU=a(
zRN!T0(>K#!O#Z-I;^zp2&FLsYQ+LhgCSd}Av;i*A-^epbXQYy>N$VsI4nN2g02q#c
zzXlLZBmnO}5|}dyktTQ$B<KK#p#RF_d-xy8ubRDD;*h($Qy7q+@E5QdwV4HsO=G6h
zO;DCz(jYScGBblH=mUbzSkRdO675G3Fwn=Dfbk<>u>{B;0(Q8$2v5Lcnufax-NV@0
zFaiog;P340M5EDse0*J9T~1C;v$L}r8X8@yL$@KHPx<NF1^@tEFYy<aeU6R`0N6PU
zv^6b43N{Lnd6i-ex{LX^O22@)n*@7yO-++47%nZQ_fHI}|2BPmpa_S53WUV`KR<j4
zVs4&h9&gR|?%i1PEN+>ZZ~4((%^~`m?2u_!w6CGX=0vV{em3P-npJ#9J)zsm0QOd2
z|DhUf>>K;9tV<_fF`d2RLP^TUv2cr9RgWjP2GoO*G6KS{<(T_+*EGy$oj9346omMV
zE^L?03l}*S{8;o29F1(aIbk52HO`e28)~Oesi{F%cE`5MTS4QK%yLS8_HM%U<Dso4
zhj&)jud;Fr#f56b+S*)YY-CyA!D@@Tou@xzqjY<l-cRJU!>1x9`??lp^Anx2QzN%O
zQ$)vb?|BDkY!!uV8VXL71$Aj;M+0sZH6LaYub+KFvlcaeR^;u#`UOdk<|)=fiC3de
zxSMZyUb<-nRi1YCOCO<J4xk%)?VQS8cFz7tJ<W*5bCuNqf$TGy=csz<Jn^Q}=v0nG
zw@!<j$1@;1__u&S`|-^W?V__mf4!gHxfT8hIBqBitZ>O~Mx2fEA1wKd9y@HTzN@zm
zZ?F%B9a5h1xcZds`*Pto?{kw&4<7F7&r265#JZ&)RlIfx?>lDRk-oUk=$*EIx(=tY
z(|NXI6dy#Mv-=VLlX__A!<{S<O4)&@Iqxzjq_{VGB7D8g&_Ppy!FDpNB9YxQN$2dl
z)h9%*7~lNegj|9QE;towz4dS{V=;^|Uhb!LyM^sJf$fm6-1NQTQosD8ufBaNb?SED
zQJ3q>SwkzIOeIN)BeAkc6EL0!jU3^bBd}ciLcJI2`t9%1eh%#^#*d)`{+$V0oQIWZ
zY0kd4g#>h3R?@=?Ln3U^1E$~*IxBp$VvgSXL-N~*ygjnt_n*H1m3!RA;G8c1>qOf-
z_DJ>o{8V75ZtYps=wR_?uXM7nF3L{50<_1Ut|HilN{+An0GDugj2q~`OQ4#$SuY;S
zka66ACuhMnaykckY(X==x$KrbLBU&CXSCPp>V8fs^8D8qY)+RsgvW=eWivXbr|+G9
z40}}*@aT7eJ72#h*wp5Bt}9yhT<Hr|?;r;&BY(#e{;Tl2dIboj{Wi&B<k;Pc#n!y(
zx{)J)6&&?`tHRT1`C)FK`Hr)yJss99)75R&9_HV!A@?$+%)$GO^7{HmFPCUDeScB=
z=!Mui31P2$;W@Js8_23v)~xF9tiG`Ym*UPg2b!WeErKo5W)s}LitIJ0D*7XiuH`2*
zlkqAb+>{!~eA=I@3CC%v%sG*l)9NyfKH0^=qR*u?k?}HZsGL`RB^4f~G8-YNk==^^
z9QReaEVk=qns%2g=Y`qq$TOv~@c+cJ32fpj?xfUOx`RPcrAK$Q!yV9Jzt#NyeeKJ%
z7FY<(r(xSrn!|>yMu_{AQrH2z>46d)X8ioY`Db`5aya*q)EN|PH~<Yq%gzNgopf-0
zxiK~sa-`Q9wp-jRa!;0gQciK^WT1hp%^<hNI1b4F@gAqKY+H4l$&XSpBkWD=1L7ny
zhdU?_F4}c?vDGbFuOL;92^3JQHMLxwJvrnJll59{RYK0R(Le31-&H$sSx+jxZ8oYF
zF(%NFNeC$XKK?#vH8>BsaQTa*=0U|5ba}@V!lI;;5}ka1ER@RlF4Y#ZuK(zmDz02l
zv#gc>eI|}64t<YT;BWMP;XN2j1*CI9Eh>6WJ05QwuWvl9p7IKJqw3e4q9{qngNh~N
z<F$<4eTwETqQr`*cg5pL5w)pWCC>tcMA^KALawhyKCD$K#4BpdJJp@c%t2nwWimP@
zQylp_aYu4Tw%KkSO9u5wp_&)DBUU*E4(~_foMxl1x~3dBvmSS>vR8=xUReUWzb`!i
zrXTAcREVaNDfDo5_Ark}K{n~@Ea@9p(}b`bFZ;bq7eEby8?~iHrp^on%M2CE+yeu;
zYX0^G@<)qJ+OMyw#n}02c~`h`J|ntAVs%u(B=z!8jof}1gBFh<x(l-?IoYWBFNo%v
z#VfL1-^g(K&L?x0zHD1V6KwziSH97&c&6v$8SysrHTcwt4ycHUvkX|fuPD&F{K~W5
zVI#JAzw-WfL2Qlgd#^5696>#7!mItO3T@WPquJw0f;kGDP5x-oykA9)aL>&W#mcH}
zvuzxgtkT0GE|iu%XU$053wpU01Uqz!T!uJ)|2d&5t4B=`)PH|%`|3o6pHSP5v>FZ5
z24|C|<b<UCQMga)Qdo_j{i2lQDQDljkbi`sQF_6%?qGe?0z}RVqGkErDe~i29%nbQ
zdQ)INgewkT{B)aiI4y{_lVNY78F6`FPdL()e0FWTS%Lm*_1+y=XQ`e#Jf@8wRX#`y
zr@6trhfBLt*thwBlB(8V5Gj-E<5BTi`W9U)v%b`<z!_}mS!t|k(9t>WVy)?dR6xKm
z6vlgl*++vJ9>czf5K9dzGhJmZS59^e-v(d`1IKW=@R7FAvov(32#7h<lFpqywb5C_
zjtB0YVVw=D`9Q=@sa<V~X?acxV8r8+5Ll)I8kswSn#r$U@ubW0_qNO%=`$4jO-1BB
zlH7hov@3*-#!?eBVIij?l57_kU9sJBMo$S|YG#;%(KCQje!pkjNK2#gHIp`IlqrH*
zX~gu0cnzY}P@qwU2o|F_n<b;xFRcnKFA0-B&yYYBZW#sqT4`l)#t9)uI!1UhN|z1`
ziMlcnVn4^PjnRJahA^)T&k|n(uhBC&XMR_W>WiTN;4ni*J}JbJogU~->3azyB-ewo
zWZ<_Db^v?Idy6^fPF7)%r!Fu<;oU27K@Fy%L|!4JNpKY7!?B-)K_a*E2DllJL{#P<
zfF1iz@rGzuhAl-h{f6W>B73qOULr<(mM#Ur#RZ|tso^otp?DeQ0kM4!y!==Z0m^?i
z+JMC>_qYe6E^^xWPZ-@3;-0y@N?fDM)L`3%f?;6g7E?tg74_DEQx}r2F6J=|E8a=&
zdq|nm{*!oq_|v<7{1!IZu3xNOf28Fy(bN)+sCwKpJ_OCf5D>`!{x%3pDUf-CsC0mX
zt>Blq6tCRoDA9?PVVUsFkd_$kbelWFnbS0xbhl6;#`oxQ)%ZiQ9E9Ab{vtXkn|Iyc
ziL5XBt;0P?oR9-3-mc*+_vg^3D#nGl{r#<>e(7~crlQp)Sz^fiZwd>Ik(4O&M`z4Y
zu%Cuo4zTc#)oYrL?#kuG*RF06v(2Cm=(}SV^!Un0q|Sh69OHfZrEQX>o(WdTiP5iJ
z7QsZDJ0`h5Wijh*ouU?OS;EDaPqyWmq}c~AX~|h2V3#cGc)Q2m39=7nsLRL8jRpL)
zfMN>8ClkX#L7gdxs_>`lC*9?H!H{*8udt^Q%H{#f6WGNg9YJjAQx1yfQNUAiDu(|<
zGQ_dnG>PUnf1SF>;5;ToZ6faRLuF&Zyeb<{wA-^EQQ7`L)4(J{8<yB_cAa?f>13BI
zWrsl7r!*mnrseb;!|&{_n9)%VPDCx7r><$=hSZ&%rBfR8L3e9O=YL^l;Mazr84{Ma
z#u35jJeCznjy`jD<rK?fyLVTxo=WDO0*6AVv7|^x>S!&C2UN8lgNi-e2>0l~H*_L4
z*LSjf6X=G(vE{23oGR=Ph<<VVWfkUZe9^p8x~|k4H!eU_$H4PeEDL8h2r?|jZQ4X6
zzm{z3Z%|ESX>?Z7ink!;<%l5X^Gj*&<<!Tpr{X^o;+_-z@L6U&CS{WeGVb{Z9SOB8
zyxk@&oX?($6A=TYD(OKY{V$)%_J)}u<1!#T5MfcGpuIJ<NW_e`T8iur7)FBIs)zrh
zR9SNN6uXcW;+ciompNY!c(R^k2Ql#nQZ~Ti^)seOX;QKk0}KE8@3tXq&;}z!KB*wh
zjA3gW*|=2u`g5o)hfJ~^``^SE<^gYfvn~!wF*V{zc<^X5>yajBPy3@%&cUeb9vk=n
zTHvBKZDm8OO;wfOq93J_vNWVo1^M)uZ@>@{X+qF+M{BP5Cc21?B)$%4KCz*>693G_
z`qFYbwXnel*n}OGGCy;yEL3fdABtBXv_f+^VE-rah}k#*Z&1tkNQle$-kG>yM8zy@
z3f6yZlbcmCXf6K9F_#kB!~2n{R(PhCDGIPZqej{AVXmE2fu4}j<@DSqtP`(nO3&|Z
zROK0>p`kqngN)9XT~<9-i!WUJCxd;2U8Hy==wJ%8!!o409NP1Qk-_<L$9%aG`6QFC
z(gir&`=Me12MpHK%k@4P1ni?A!x!V8Fh;S*j<pnB?^rjC2J%b8RGb-#O~hM^<_~G9
z;of=MaPC{pePY~Ybg<WCqvY)UZuh46=Glu)*1h;hCBz6Et-Rkax|@D8rrHSXk@!Xl
z^%;XOa(d5ABgqytIwdIy>9<)X<roVUy-eQH>lT+ctWvJFfA2%Id{z1!RoqPtIg?cr
z(>nxCxM_h#0p^mE$l<o4?s3gHn_UEig-{s9d1{qG5TDL<u|)R<^Qz*RL_3*+r+RW0
z!nWWWN<kh{Uzy><hmyUUC0$(+*`VoeuuC+Av${dBNA>bsgqDHqIe}LUe^I`Lur$Cp
zCzQP!@7Qlodfbs>eQ86-Z~nRf#4zgBeN^1+jT3--b3zqHd<A|@g-J$*l^IfoJ8dJY
z!JifLgb^d&8qg!7C&w%t?i%w1TB|DWkcmGX)bl`rx3wbw)g^Sb8n|Zfq!Fv{DAzOJ
zm6Wdn*tY{d37x~lirPy1aX*xpZ{a?<TzLQ)spc<%QHE4m@viJ7Ou2L*d9yKE;>;p~
z#t8-5GFx_}0_CD(I9h+r^wfh47kO>m2T4*655pd^Q0fdwkc|p*4rYuA+PUl{q*DCT
zUx+aK8*?Xz_+YCk5pkLeQhyLfYB06P5r4E7UZF&>$Gc=AiZA9$VyNFBjL{kC@&i;Z
ztYhF;72RhnIDg?%6u|d3Q45qzcc8eUF*k7wyFh(#Ll&X5yHbBMr7ns5Pebz&7AjV;
zQvK6jHrLZRX*q*Q6+m&5F$J*aZ|A8!Xn{a2r`#he%5%2lVD1XESTPT%8cd>4lO{D^
z#UepYSQF|VT}x9JRLo3AhrrcO0osCCR{h9lhH9G5D<)5%X@;8^DyZ;pzcmlw$Fhbj
zR46kzBRl>c=ccMf%!GK-kx#;XRplw+-VYRu^2lIK*h2Gw@5HN*`P0%}g8SM?F<EJx
z%h5Bu1i3fE;}sTI0vQNjQJxzT6c&I4FBwwpG{|FBkoXpOXSz0Qrrew~nRMvILdgTo
z9>g~GFCuISDh>~ShGPCyfb+S3G!V@myVn=Ou}Ja1nLVAh2HPMu1f*ZqP)?Gmdn7+9
z!3-L}!Z`OA+BD9QP)HLM)xzhQs}rU#3azbAL6Az)d;@Vg3Zr^F>|z_7W2x{-p_Ux@
zLvLu;=Q(13VLrYhTH8(ODg(d6PFK!0ak^~d6CMPq@W|GAqXfR<k>gz5-6cC2`0q>V
zD-J~RFT4NUi^XE{ewEg(g<|rMYcMqZKLgO8IfzKYN&%15U!3aZU>^(q<)3CioN3*V
z>0kT%cD}$>tHCs~e{N>+GP%Aj-uxF6jMo}l20|s$Nd(3F2K_eY6ut#E!vl?#zsz7o
zVk_sFzh6d#w2F3cyr4?2!W(($fIf&zVbYGGsL=CzTS*9ag3iOO?jdsaUYX=j{0&$e
z%eeLPZCO~V|F639G&gz2ndUqYQDMT;r{@G*hQCC&2t_<55XNS6?)O?v;Yw~EEQO<`
zsm(&406iE7MtUh`d_5I@X`c5HOHIEKK@v&$%o2(5Dr{zR-rw2TaY?%fUq3nC-`Z+Y
z&#9&fM2KNR9fh%Fx3K5-xMd3Mt5@BB&hC**dDK${vmdkTNpnD@Q|2B1Ti@@TfpZya
zvwLSf>S?HC-tzXy3?=a$MY2lkS4YkSpUsa&fu<B(J$Qs;*cJbIv48(Mjq<3b@H)xx
zU|!tVYvR(;EPf?#sRSz#^SUcnsB3AOKXf}UR#t6?+9_N;Ct5x--eQeb%rkhsO!$q9
zX>su6_!UE^NX_E<4V3k$Y4~F1CYRm8YGk)q`+@VYQ(k_Pl)CVSr+KM#ux4=&t%Cdx
zrlt#HDvFI#Xz!eutvmQch#E>g?9!dOX^j)V-Ow@Yn71bFJ{~9_wX*EJ)3M#Gku&tt
zUq^zqp_1T^<SNv)o%|tFQ%cQg+0*fO)bQf-l)S3O-y0tm&B?`<zUjuYBXI?H<IHTp
z9WxuA2KeQR;*TZ#az)8=-(AdIoesdh+)6}_$dtc^kEc23J4~?5>1Dx01Kei2Xj*6+
zHipWci>)o&ZAp6n3{I{~qW}C`-chn8%fa4N%H6{Lt5>)1Y3!${A$IvdhC*AGhE~^4
zJv`Rv;YG+*!9*O-Vw1^8xfi8G5pZ~j<P5xp%}6y)>YjgG`C-Yk_Q%$w+kG+j;0qU7
z<S*Kp-#YDlL?+>Omvf^%F(Y-=4lij<|L=hztxS?iuAg74B5M`t-K8s&|K_R1m@sHc
z`!cZYRR_XgUsrX#&E5<&{h`MNeJlOMfFnO0$vjun#Cm!T-IpqW^-Q=vtlk^M_U<Q(
ztJ3T3TNL`ZzX?8VBCkSK?m5VZJk>catV*eWXuSG}^p25w-Ii;f#@fHJhO+KzJ%dlv
zW3RGZzjg!q8|N3oQ$P1a4`b3k7K-ATs0Er<{K8<XTwl%||3#@^IWJ?I&At)-_+Gy4
zt>F!oP=)s*KmBSJ6)2%MiSZY_6=EWp)MCLYiaTCMqv}b+zv1GmKW{ivx2CpCH`~!i
zN4qIYp5eBZE@9e|x%Fv6py}nS2LNT^<=mRZ`1Q{pYkr(8ujK8)XSwMXw&+xBx!g{#
zJ$UV;bo*k#^?HG}h0f0_bI+>_c^9`8Ki2FRZ`f~~bazv{un6E?xqs>}hI@u>EBx5^
zM@*SrGG_@^HI*^V;!_?+7xQIe6~Zz0O1>m9zcVMV*Sq%q65H2oXy+0wWBc{)a<%H<
zm`@O2^Jfn02W*yQ=MFBu6TBTEglf;{vXO|2epT4EU~C1liSXL6{e8h3u6pmr$wsy{
zMMsd`QvXn&yLiOtv0lx1w}WB}C-uvj_7elT<vNk(HyGnzms>K?WJN|TRb#heyGwgG
znh^8o-Vd-{*Zrxm<pzr%r$g43yf^zMug=s9;F%0x&aj(r$erdcK#1i;Qr2J>r-$@8
zWF`lw@h&%{Ef7ee2nDWZDw}Kfzt?Hsx9MHE!#gaB|9p>~+dK7+@TZx5l8haZn`iT`
z?%0AmR`j15yDIiSxq8OW(1cFk5j}^^Jf*zmVHwlxH*;61$5rb<^rO71!_KEB!Nxgc
z8C#=4v664)u8dNM@|KWWK&nR#BA*Pyj7#}wn_7f+_%L*r0W(|T%6XyVOuCoe&cwQk
zEv)EDFAhczy|aY6XLI<3|12iUr>)hUQdQ}NJ*=$p^Gjdo9pGwYpTSaCgv#6uHG($7
z3U**FKOa_`ugGI3YKn+ODB(C3FoB=za68i{cT>kWkBxmwPGJ8a#UzCQv&R5WFc%n0
Pi8}^5#@f}FoTL5+q>0yp

diff --git a/src/applications/doc/http-parsing-time.png b/src/applications/doc/http-parsing-time.png
deleted file mode 100644
index bb4112786417abf84ee443796d32a0b2ee52876e..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 6444
zcma)gXHZjJyLJ+S1nEsW1ds=$Mgl4z5F=ITARP%Py%zzIvZW&(rB@N97@9~&2qHGB
zB1L+y0zpMO`F4EX@65b2=f}w;*|XNZ_qxk<-Pc;P<Meek=+1JTg+L&5TAHec5C{x_
zK%lb-3UCI-ATa_CWc0O-)kq`~I8#(qM7|Ip5P(F0kRV%I1PtWkN60njIT8U00WbuB
zgu(&w5C{f<kN{E`>DzNLG4N5$>>&6Y7Z(>Ajn>i8ad2=53k%E6&aSJgBM=C^y}e6I
zOP~v)j7-W_O6Axx@fLBGMB17PCpC0dZ*7rAA)q(NUGP6lFkVn9-t_M{o|DrH3<Uz|
zi|OBhkV7Ov`oEA^ACtoLi2y)SgB$`rYZ*br<%Bnlu1(Q2yStM`0Fv|^vK7Ad1Tr*L
zG?k){x#cPiutES<RsaKj0RTq;a3p{nKZaBUesQECFA{-30`nme`Wg#}Bw|rRUni-v
zk5Cg#!W5B^?d|P_g@ye5{2d(~Ha0dhGczhGDjipQ+`*iwy)?~zArSg^<R3I$oSqv3
zVK35By=EMkx0z4f@=}ZovbzyrI=4))C0ROo!@F7ZS)(epG9Rl(gxOic?~0Pa`QJZ4
zuV|O>@QucIp+9!_mVq7JvYME|kTfZVf(VwS<!#k~i^GTGD+828A(=kv4=yQfR&)uK
z)x5c`LAc3-5bY`nDnLWs+HW>bp-!D&uCF5Oy#@W?ZIK18zr)6>1_UkAO=Z;t?p}x*
zA5&Qy53R!w@0PnC?j7}Y-83I{S$Oh!KQ5@(EBfw+hj!QgU~tx4ijNjfS=&Gx`lK~N
zLV#_8fxQZ*8}>mc;Y&j8u*L1>NOb5t67eP7+S+9sS#+5js`xZ?WT!dho{eC|2N63_
zF1gJby@^8fl17+<SUKN|p6@^7mQ;U>l$8xPo2!(39b_=-r<RB@pSQR)Kviz9bZp9D
zxe{Og5-?PJ%hAV^8#>#fXW{p2bTHhk-ClAcwAzq{2KweZqO7n>H-EJyw;=YbD1W_A
z@b@H!h1?zy6KMDEq#c0;)J<5AZAQ~b-;nZ+Nvv!JgJ*mE>Cai_t9-Tx>et;4A1YR&
zoX*%DOV#t8g9RDojOM>!>bm84g>C)2*HV6=+atxEW{ZBJ$A=x>=93iftb<QJ975&`
zNOhlOlV7c?p4D@S>5R4V;hedgy0ue{-`bZLHD1O<0n=_igi~xCYyXWqU56zz8dbu=
z*9m<|<BH2M{xKJmOn*#U_n(-cj4;2p=Y#`&;phgPD-$7mDlz0R>ey;XnOAMDKi}C7
z>Kn_caNm?Knp}e4oW_M}swCWhPwIze;{7`Akw(oiLJc$Wv!?;6??Y$1ZWET8%}2_A
zhyA?s#Zjc_IjvKhQ6{%!0=k{&z2?Z3*xOPxB1KHOoJsC8A>RYPvytm}#Z+(Q^R|8j
zTZMAdG;(#uMQwD2LJ^v&hllwaoeUnQ7|;~3n9-wo?pD3zpfb>^_pRJ326~u!$1+%N
z@tQitSnwsx*gIueyv1TXFTqBPD6A!)Kj-zDG?&|yb1%HL37>3?k=z89V_YhEy>u|H
zR6G=8)Mfsh6XB0~U{V^WI}?%5LJS$~X6Ua(Mgff|E8Iv0o<Z4h@vSY=xursKym|L6
z13y%n=S-UVRE10bJ!v8n@vZIu(ly0T_0YBLWw$PGn+aS~=NQtKkXC*6B98GQMZ{Gn
z)mmM2ZClE+F$@x5Th`Eq!2}}QpEUl#Cdw@_(=y=LYn<N4Z9qJhlX<)@U#gA#K`m9}
z$(drXXU=l^`*LwuSxz4f94<bm7p5qCQh#T>Cw}1u0_M<1SK491Vl&_@EuA64pbD80
zI9*HThpL_@U#__{RjvF!J0HWP5-yFtWdHGV;P%aY<@v(XeWu{-ozdJ(r@@&c#7;ya
ze`jWP=o|n1IX{a5=PjzsRWSRuZzG;!z0<yb(jO-b7b&<W{Q_)|f;&R{GIfAYUDcOE
zyR3tN5P9iNS?R31QeW>{w|}z2uJ8H8lbn;Q{$n{VJZ3iP6mqf2zRhaXQ>-CgmRD+~
zL{eZ^v5a)qk#yVZa6yA;A1$Uiir6)_S-Dg9G4;SuskbNU$2n&UK6;Y~A9)*+{Lx<c
z5I>lK(YcKrnqPe<K1X&(KG||MGculLlvWKtGE)wt>cXV2oREXNPI*UGf8b?9JWsat
zF3(_-k|(0ctyV%{m%@kO#$kHOan|L1i+ZkFQg5a@r&p`y&`(_Gi$9DhGC1Xgj%i#`
zZPgctRH0u>O<fi=m&j3MNM;C^oJLxBscUyk4>G#rU0<6oehie~Mm7H7jF;sU7ooG1
zxT#4=f-%MY|HA*L{{M%|wJlX8iXFYMV}#-RreVvmqn`rE$taXYyyk{30udmv@uhjE
z-BP}np?*?7w{<*od|GesV_4^!H0d(4ViGIU)L8ZXtuW8&jr`VeY5K^uRGZ^m()L>#
zI1dRqOGiu3<~kr|M0jZ80*hWtooU@07*>I6XFn~iVAisD(Av9Q30r4i4_ag=oi-oF
z02k1#bH?YIes^5ve^K>^3RbX{O7eUssSej>zbJp6-iOfq@{KitM(O7#=(USFnlD`h
z)j4Z;700BlH#cDg+o^h-jI6tPG36QQwdbzVVzw)aH@{UY2h=yx1h!}>*W)<M92U2R
za}Q@mUuC{(^mOCPYaO4U41S@Z48vM6G8X$p03+RJlUEis2zYAgqLA9RP+QCLGtjz!
z+JHn+iFh_K7w6W;iGVrFZOjo??$H!hD+rFr5}Biv*!A0G-z}UHU_$Bfu@Z5ee(>I$
z75MAQq36R1;9P+?1s6;6wh)GJwYmIUn<bt|JevUAC$D1{<y!hN0>OyV^JrqRvjOjD
zBC_NrX`;*8G%#mA*nfHemp#QuA(5)x=7g5ikPz&p&P<pZ0q@OPlVN?UQO(jcpB9gV
zIV9!+cAK^?R~a~<u;sX1;QbTX%C6tYQzj&?K%e?y*%g|ypKlsyRFv3Z%ZYVBg`%&i
zqRzlQF&Mm;#SwaIApF&vxg0RL1)-u8Wqx7;1p4dU3iG7##?Q%4a^O2<k!1%_46W(6
zlfYY%4ji#(VOZlyN<6o@$5veAUwd<mKvd2rFFtqHtN&S6B<rhp&MBH4#QtjvDbf@Z
zIXX}JChe;{3S^rB860mD8ut*$UNE59`fM2O88dzM<7!h|psOO76%6zNLNosluH4&*
zT<k@FkqsVM)<h$!aG;9Twmpq{x8oGc=b#=~A;1MicW#(i*%rE7)g;^A&S#ob##xJd
zn4SMNo=yX;dmp0zHH(4|f9aX6jd<0j>K6+|7D3!dlit7x^{q3<)-=wlw&vm<RwdVX
zGyvfKd?>ZQdwfGRi;sj9D0W8T!k-SEZgawWxeC2IJsRhKz%oM4nOV}Qf@pX~m-Bq+
z;zg86b+&T#hE_JIVOl7c9|oX%^?ukB?ycoSL~hC>VK0&jO{HXuYw&EP%jvZYqSpxc
z9j9pTHaa&jpmc2g;=hiiiu^VioNUB(hr=t+3gJc~t0VKs6+Ry<ym<F7=fnj>$f!`;
zP|I_YOZtGG!(N{m_M*S%LnIQnzJGTA+iy2S7WJ00T$h@e$z?TiJ`%X0*C+k+<rjjO
zP%LdZwx8=?`Vz_9YvU?jT6i|kh`QJ2gE^SA@FqWLkGYs25#&-X1@DC?OC6kC|1}oW
z3Eq%Zz5W-Id(<Au(I#hN$xI1xp}&|QRn1owiMk@?9Xt-5kTF5i!v2X*2C#?01T-1y
z!kaZ*7M!KLjL^s3jxO}~xUU3vIDw7gDcgm_y#g6d2^A1SAPlZy{!)t!yBJQ1_R(XV
zeQE_plq(M<t0Ap#zDZiN6C&;z5Faq2rF&hKoR=uh`Tn^}WFJ15*hh|>`d6MnE92QN
zb@f^}id@hj+@-dmX^=JvoJ{8jyE#}9Cv+GyWfz4&n7pM4tkI`~g(ng-aYu&MF12s#
z?>fcJdO|sKpNP$I7jMG+Z%weD>Gp<8k<ruGci?CR{xFbg&F1*SkOFTnt4{O)ANbWl
z#VDk>R9qura^(qcKu^63nemaHv7lE?PDcFXAa75LneD_!@p_!EP)S#*LWv+Q2uyj&
zNU4|!rKCJ8#04E%Fgk($&me*aRHW<4tG<657}SG7dW6A22H>ZylcaY$oC(FN{GBlo
zSR;ON;DBq#=v`73!YQOsV2%Hs#z=A$|E%=K_zInefIZX%zi#Xl3ob%SVenLds~AgO
z%;CE1n^$RbJ@q)aHXz+dA&7&Kb;gpwJ`Ao81px>LyKOXjH9c1l<eK;Ia;5@)BDwwF
zeJS-fUt8Uy!pF1G4^$SC^{8)fxqBuwjL>do`}DjzW{kO=w}wfr)&^fw`jUyUA(EZw
z^fc$j7(+B!KnW4gTfPa(ArO`Y%wA>PNTl2S8-y3Hcz-N{uw>Eer9(?ieypRy(Xg+Q
z#G@u^v!JZ;*tf6D=5{)zRsh7l{bXBOJ%|LT*W?8kmTztNN{_XW?}JRqLpMwWRe_y-
z<pEnT>gzvbX6z+Yg7V@&Uq$A79wqB5kNA=H)%&sk4)ZErd2(eX0o1eB)c0*-jN!*J
zTk^AJGy+tSMJ4)Y7Lz7pygP~?WsZh35g(sNp<%F4PEdyai?oj(XsoPlyK)zUCi~Nm
z9&G0`!jI1<!Tf#J8BUV4K9j}~g@XBfUl99RWsw-;NngSNSMXm^E0D)cy=kP?tj?02
ze?aYFQ%E5=TdIjm^8v#sP_Dlf@Ykw6Jw<BY4s1=iHMuV2Y$*m4dqV*&gq#)8vNg`T
zClnmv=b(-u=%w}dB6`$4VuRzragAqW=3_TbMrcPT9a?CNT^#>AK=NO5QoWWo88Z$!
zbslE_caK};_Xpv`TC{#ef}%+6Gzs+}Z6$lXHnV*Q)O^svJY}1CmmCxuQZA)7F{T^`
zmOYTV%HEW&ezxLBPHIb^@XGD<Up2^%R{yhW_Wk%r+V*3LGv;{Ez4rbMggu5h`@(|g
zQH$N(Glw<{?NPs_ak9aqOhBn`&*N4o8D|%FTkL$z2j=+cPpmq@b5;UJ?9|L9gEV<W
zaq0myv;M1gqFm-vsdOO3f$7kVDi#|~_5@&tP{(YTZom4FTq9*z1NL)8)eUbAvR-c4
z6Do2&;8c9)!ojd_)7+MRV>?05gmO*uq*}}%wtBOB{h&I@{$BeL(ebbj7-BOEwhzU?
zkIzu|ClE)~1G(FMyMi5(oWPkaw2)t69w!uPlQeJ)ym~Tc>Wm?@eJW7_b0BX`<Q94+
z5M)s{_X6Q@E`?iAy8Dg5Va9Y>cO57p?eyExtF7dA+HsF<mkf7=FB%?Snp}x)eoC#M
zJo|-*5o#0hfZi;$h1qV3YW}e)sG{xk;Ie^}G#+;kcInFz`wCY_sF~cG`&-Zb-Da!P
z)4m0}8e@^?Z_|DG6&CPU5_2g+-7BxagXIhC3CVk4DM#mqgj)PIm_pi2tlBsY8;`s+
zwj@j1P4aq_8B<F~9vOw*kr)C1X_4J~SVrPf)8#JhV>~5)^%G;`VQ;tryhN0PcYtT`
zsnJL+@W)wc9_&I6rkR_>?QAA`%GZ<Ktzm!NP1_R+`LBplG$d{wTBcAqB$Wd0yT1N-
zb=Hjf`A1!@m%)>Yr|@Dx06wCA{#`N|*a8c2kDsH((l7^|5waR8Pj3R9AA|*PBm1;H
zZo@YOI;kB0?$Ui1b4<g6KoEj?@Aok!0@YngR6OD}TFbyBb5hI$PW^vS8n2CD#PeIG
z#!vr2(7rKt*!c(giCPGwIQvCC5Dr%*l-*U5qk_E`*(jH1L@Ar=^?BE%wtS2LXJdNQ
zn=<jG%NWA`zcwq;<?{XHZ4(Q!Q=JmZaM_SE6t=x(7NAB{hV})_@lCpRYT=*wDL|X3
z_qNP*g2cg?gTc0jo8G_@_VuZ+5kNA))VmD`+)AKA?l2MgXh6y_f`l4>=1B=XxrD_r
zGD4q)14-P?tTPm_f^o!CFE-+f=I>|Wy*ymSN|$|v>3is4<hIC-xE`X7`6X;6+(wqY
zC{_gG!CRWK*i+j^Gut6P-m`yuI3}J=5cvZ<y|yc4?g(Ch>in3Y<pEz_ad#Fr!P;GF
zvG4?_JqDieS*L#X#4bvUM$>>OJ4XpBL11thD_nLD$^f22e~#KkeISd3mox`CJOl?D
zxpv^0zTD`7KNXbXg-1>dAcdTrD(@;Jr$`CzTVjYnoAqyMptl%9Dn-P;@%r6Z6GoKo
zI_e?NSn9DHjBpAE76F56gi@nYQ6~T}FrtDdJW=4BL%`Yvb`!1<n#vsunFMFW4F^nB
z;lZ}+@(+RP8%iAsjL?~^Aay>$*$pE-Zg_CWx^n~|t*aEHg<vA0%S+dUV4;e;0}+6Y
zj#4UUtWt0|s-#MgH6-C<5m_edg}=ZPhxU~24we!1?Ay%hoG*;am19e2|Ff1ha@X|!
zeirbaD>?(A?9a@idBU5y_5tpuN<vlJf(L<Ik&AD>kxCE)cVJu_qh^9l3y!CkNh%lA
z1YewHri)mIXcHEeTHdQP9`}->NmJ>E+-z|vE#;GcrffJ}#$o43rzfo!cdJEzj(lVD
zrj!tPP{2$y<s{0C_$~7geXt^dmI~E0tKToJs<UozMF&LM-gLY`aa(7V*7N4dJ*bj+
zQM=omq^;RkbJtFG7KQGKulKDn3^P$LSLA3t&qn<EZH)E2N%h}v0|>KDHOtNL@#SMW
z522^)MJw;J{od`g_pg<WI(Fm~=%ar_>wka#O;@&g!+FheCAYsT-*AtIe&lL8kWxC3
zmaT78f1)RG`?2oRmb(077j<m@bCt<#zi*i??r#*8hB#{y(}N$WThS6Ui<}1nb}lj-
z4pdGxDh-uWJRcew7U{@I9i)UN`c>RedepNfihrY8IA8PZ^gCRarYU*R%IxxUqqsVo
zKF!s)&6mEe_1nDmR~c*;S4Gl)_?)jZ>t}eR`95qZbI6(7TPeRq@nkq5^6pf=<ddzh
z^4Yl_VaVO#`5ilGcQd~OyZ-$uz_w(l!c8a=u(lDc9N=^+G5TYU3+X3pGWZFg=?D)f
zubRGXzd+?yA(#MA?3T+syioLN*=o8zZso>-IK)$uqM@&RqguEKX-_DxpEuUdDBS;+
zd^baQ1GSbXxe9;A)P2zVK7&wiK};Jw*a%Ne3JQIG&h1#n)TPrG+okr)s^7i@eSCB^
z^D)=jyLK2q!^m&F+4<o~%`zriSj!-N(}`Uvxgb$8MX9<Ir3O?7b{8jbtQrw=CoH1U
z4KFR36?P|9*I4@wsvS$7k=~@~PvmvT-GP_5bY5%cxPylNH?)68tSUjbPS^b|^fR=)
z<`Z7mv}}4<8{rq=aGcP!ACEDjz{46w6|%cFI0oDwIKVTz2>GscXvx((ISWbmA_wtZ
zGSS!ATr@NB_T|g5T>l_MOE15FI*wJ!rW&kxxc1AzeBfvmt(q9|t@r#RJFN#(rf$l3
zUW3Fz(fR>ZKG!o3vnij1>{M(D|Dcn|^_Ot#qr7r&S$rvNRT{vqUysY^^BH$UN0}J7
zrRn!NOCMEaBffEqoy-Zg{-~;&yJuQe*ev^%ZTiD9GhY3W-j{+SW7m`RU^?X}HXrC(
zb}oFHff`_}r)RQE6Mg+UGi1f8GS^WUm0adSSP~2N_$bwuUd}9-F*?-j!SzMAdh}ZK
z!XPOhi29?y<%pNr`!ZCpm;X|1DepAson4UQsWzyDNR-7vdzueNkd<zAhRkenggkay
zsz@1Vmi=RyELW<u?dp*Dd^dL3O6+cvyCJ@`u6*2I=}2kws&7tt*Nl8ostWHS;5+_x
zQZLu4JLugUdJ%{-$QekOA8}hK?$Q^0dCEFiR^noh`DK<HvS*K3h*d9tEQ7Pa8)_Q7
zE`B^@MNpRvoHi&MUpJ)Tt9aS1j=A;HedVyqgk~i9`Dpk=?Rwitc+7!yf>4EtfJ<lj
ztFvVe9PZ=FVdABxM>0iU=*Qv(_Fxs((f)ZCQxB}K6D+`&h<j5F6fPQh<51UeXlIzi
zPfP$-wuvPToxh#u)>#_2a@%X9to2@ECRC*KnR4Vb>OVB%UnFf@_jmVX6wD;gXsPL{
JR$+1B{}1!>z<&S$

diff --git a/src/applications/doc/http-reading-time.png b/src/applications/doc/http-reading-time.png
deleted file mode 100644
index f07f8ad4473dfa972edbe412768cc833f8f8ff8b..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 6861
zcmaJ`XH*kiw@!tG8mcHI0i*~by$A}Si*!URv<Qkc>0Qdui=ZeVMUW~*sUk(B1VKOq
z0jbhedIzZ@<W6|sb=UX(xOdh}vd+nzbDq8T^Xz?Q5^bQTNlSHx3Ic)9YF$w?f<RyZ
z1OlB#!NDFF{rMrVAz`3ntWF}4z@DtEEb<o-0s%-w2nn*bM#MupIv~n+KS)Fz1i%vk
zk{AJa1cBfI2niqskp^A~34ufL)4kxhGiT07N=oYL>e|@Y1O)}9rlwX_RuYNCuCA`x
z*;#Oj4GD?(wfK^exsB@^(<IW`L<p(6xomBXGz<Y(gWLr_gLoeCTzGWjr2XjhX%`R*
z1kxS(bs0j2NP>LrBQYnCf($kQfTRxj1Gp_d_uH6@ZK!dmjiBDy8P5W6q*su&khMfe
z|3ubAyaE2YgDAiZ0hpNqJa_^Cfd~*t02x1?lm(syQkDyeNF;&wkciziFE>aVS=HUm
zq~>m7xjzY?MZz^UHfCmKVzJn!rY1{E%c-d;B_*Y%OJ5#<Hltmx+;WFN=vv7aG)b6_
z9RfM6tfi)G?32ElLH#^e5TZV7JS;TMfm#cq77;`R3gOiP*I%X@>p-F>HSl3~z)Ak!
z1EAyX;p0oux0?B-NIL%0Oyk_)|E50jtgh1}9NY0@z3uP4*Vj54MWa6l?^s8*`PDRJ
zw2xix@IRbAvMOueBSx}Aze^ScG6?ZgMq*VTTNVek%1y2Y`*#jnKD^vWsW=kewx!vn
zjpn{<*c=%w@v-o)o3G@fSqGWVUlOLj%zqiSPtZ;H>!y7#PP}BcTWo<%o}0-%OER_K
zL1tH8)}ADdDP4!1D8GJ-_|~-W^se_rXy^3vvd==ox?a0eu20cNl3fBAvBXe7GD*`j
zK>zzY<EZ={+UwH17mV2|(j|)8-DEWQEvw(8M&J1w8Y3=({Y=_RVPa~Lay~pOkF3Nd
zi2tsde5BQRU}C8gfV?}zb(dn#^6t9N?PvL>-}LyqdZd(E?oz`d+%Ub0;gy$q`s*9A
zTZ_2R)lM-x_l|m7N05n`SKd%|mZUh~8}u_mzCZaqa=gRZrqvnkzc0Q!*UgubLbKM?
zF}dk@onk^qj?(6BB@(L2y>>6s{q+U;C7llMrOr1~9QF!x#;HvHR9AMNr0%5pmBG`P
zy8_caG8*Kx-cQvjwH^EPOpT(lBQMuBb##Aqq0uhRd{3gu5J9nZW+Ti>C10miCP&O{
z+n`%^W1jI&b5C20jTXCDz5FV7`mtRG@)Fe?)xvQ@0|L7{J+~a6VLkGDvz!d%B312Q
z)uCa7xxbZ@)G~@xuI8|}*Oap+Q{MK(`3gb13tASh9a%k-4|;gKERvN_*26b_Kok?;
zKuw>|@?AIa)Ht;KYZ2^DQ(Fj6dy<jzu;iOw^Gdtc@b^dNq7U`(^QYc_e^2$Wl;cAa
z2H}D+s0s1><!!YDuc!*S-aE^yJpYPK4sB~y3+vp?j_=lFx|T0j@$0ngq2a^S2x_RV
zQOn}k?<sm%8rkeTIq^3vj!klu8b>q<WW$w-cB_<Tj|D$0P@2I-@35WH*79WB80Xa3
zZg&WZeZ060Upsg62ymd&gQewd@18oDW+9$aI6ouWT`8-R6`>Pc*SJzLva|;mvgZ1P
z^O#qMA3~G3*Nr!OO}CNjl>dixe5fAAL<d-pPrB?RV%sP}jpeTCq|lZ|B6@!Ij6nR+
z1ucr7!oG{qtK;$UtTy`MKO75XX<#9FH=p=mWe^2hPY1uh=7DWU)xchBEf4&@!$gDl
zyl(&#%C{Cy0rY$=i1eO#)2`64o_S=VUP!{%#Vv`gmWaP^5XKMU7wum<p+>mTdUXco
zK~}osjw?q%jVB)LI;Z#NtU$w1^b6X?2E$65{+cZqRY6{Yg^>kOJJI8tcBgjte#xvc
zitk=kUj4ww(WGXL`N}kYWue8q<izCLH=m?hWHcWaGhXd<)bcGtPJC+8cd9Fy&5LX<
zS-yDj#n3n1Pz9egzrM5g4+;y~pZznXh%NN{9j)8|Roy=yoR<cZw{L5${n1GlmVN(4
zGr+=bGjnI@5FV2SE*Rp8_IfTgDw}Bfb*|B)-^DC*(QB69;h?Z5^^dI2;f(<;(Q~3z
zS!p=Qf~}H<*7iFAyx!Lu7Ytnsc2c{(_%aCIAKGr(pI@~!6legagPq=;W!>%$a2uC%
zN<;r%b>2Sp0hoL7d&@9$W4El3Y_`3!w3rDzBbY1F5WALd4wG+r#sTe?Jq03z@DXH-
z9|ac1q*dnikyq+3f^!Yumk^y-&+<pAah79;tn+C+o=eFWJI^?kLU&EdD-{!bFN(ru
z&*5%2b5?Ll4l=BsxAV9;)$x4*>fxLT{#<GM>;oz>h*NBzl37{H7b<G_jcn62-&OfV
zzFB0wnid&3kSs`c_^Ay>zKrc>TQG~9yac_#z(BWoXuXahj1G?I!kbXy2xD?Jev!)+
z{umcks;D;`xdwZ73|^;EFsEWZ9Ks({t^2WZ(wo=bPtaXem%d8CWT8fLMwOVK{ae2D
z){`dh^_`{c-L~NS8Z-1wf0VE|!WY5Fh=99E!dWU}+C;EhbnWQRA4;gHMx1dHPsNwM
z3x6uj@rSdI7!F$2%gTZ<<@bzP^jL#!{x%%GrLAgW5c5+zUXQWl;wF6P?dJBo1_S3G
zh6RfAVEJ(Ig}28?8C{nED^7xQ#Hb}Tn-UM!6OR+`$9;L3RK-%vh0knP?%JwfCXdm0
z(xEBLCRhzKU<n@EKa3VJy0BX^5$acXR0XWZc0>X=Q4HoT5*AVn>W2k|dTW#gust1Q
zLQ+MklndZ+9aoK@tBa9)ahp%V?QsO>Jm%iiz!Aq3=?|q_Fz7?xS3o-5VZ26VcG!4(
z>U-Z{py8<zzRc5fq8?A2ymAg#u{Z6wB76h;QI$B^!IR}Dw=8i9u@Yx=mH1#^7O_G*
z097`5RuiHbI1(SkjT_lub@>^~(B?xl%2M$>iuM$>X(_;BYC=CWUn53$|9TfC87KMs
zhC%ms)}ED2ZJ_(pWGr(?#t#8p)mld1@}Vs~1gg-gkH3HQ%n$L)SC}#7s#iH_;ZTKU
zQ~a&9=!1jB_v2(>8>|M^rt_a2{7Oa1R<xMnzbB}ueRGgOti)rW=cuDGNvBXF?A*x&
z#kDW)0-e+#WI!Y8%tr~zaddPC*rfGn0g9Q0aZZ$b!A$_u{TUbinS=VjS(p_XXXv?H
zH-6R2bwY*~pvQcu1u4rhJ$8S7{U$ps58L}U^MWX*TvkOJFS+TGM#h6GhU<N%fYV{h
zwPClLCArVvQ<6fgJheK6aucxs2Ii*#uHs4>8I~aEGcYnSO@N1usCNqiuS1FOP<xZg
zFu58P0dzBY2s_oLUSHtG5h4+^8mJfy9byGTihMT2=;F7YeHJwWKkl#WHXedn`U~2f
z!gN3N+H67;tUqczg}Ha9GI4@_zw&tirrccRC3PUlBz=GmCKDGV+m*86Tgw9GzUB!r
zbTGjA(-Oun3gIR^L3p&})zcOOV3#OPl^1b|{tP!xm_<s(;|9+5DRUgAvqRDTi(~BA
zA1O2Q4keMnaK>^bMky8kD#2lo5iwzpiJmef7`7(Fb|XXA;+D$69o6IOxoB=&`4xkz
z!}6=kM^zj!uPcQBSAQjg!kzopY?>F}`SB0K54j1E`_vtS>M3zAwJgwu`6HRhozpwH
zd|=$`kuzrJgNxdk8){&;E8o1d@f~}e40=7J?oP*K?LKBJhfc88+{a?|6gahkrqpjg
zp~wAqL|1odC*pErdcSCDliimDbUBpBW!D|IrqzC*_BcG_i6{K9q|AHGuv}?8{BGj6
zLG*H5$tlD0$yTiWRBi5B4;aPH2F2I(O_~d|o&%%zi22yy8wAQu2`UU>9`Y$xTg-=*
zRCKX$N$a#_W*QtOqkBau3uiGQHZ_BU?P^2;iQ#HdCxnaFF0W6X>!;sWC(|fQr~A&7
zfp#L901FY&TfqQM_+RA?@Zs88r8IS6Rxx1|MOt{XDE8JHM6Jur?LM8SV?Z-}sIHv8
zu74`-yo06`!jVoN8s}Xwe-4X)c|{cfGe0MO;fZw0Xw+NAo0NHl@DNR9VYa)-qkk7j
zCd9LNsD&11u~XcA)%e&pw!=Q=j5b&VG16XYs>F!G3KkkDdrn&*xeG+}s#9C+%*Ry&
zYfUMt=7_>~>=dwSl>p8@O!+wj&<Vz)475;FZad+WQSEOjafW5q?oY`!ojZgIROx_(
zn9gMjOW*n{M3#sVRmb91PV%r6`_}qSS|k`&Ba0B{p$D84D3sJWg`DUH%KNGp9{QZ-
z0$tbXl=2W-Ha|+wfbsryhWno8b_w7o?VwP6wh$2p=*GWA)EB|20zHp7RYaRH<!B=>
zHFx=yR}+n{9|lmM@Doc2<UrS*s%&1wo@6o){8HY!FUBFX*erzxs*v}Mq0g4OMkR?i
z$B?dCwShN>o4_=nz=eUyDF4$iHiKFH$YU+^R+G9)<S%SwiG7(;SM&jk2`B7;GEO2u
zzc?UOiD~}^?^6x0pMc#-lK9hVM+js4iB!9<Q|0sLY|0ws{55=HXw}c<guupnHK?n8
zsnzHLWf(9B`$zp$2*e2oR#8!nM4?Tl_<F0QVX#^i(<_yYAfU>Of9n~;r>G-<!Jn&4
zSMl*M=Q2jc*t`?rmg`D#uef;~7LYY7g1eW%*7~mO@ab8y%j=QjZPqN?1bKvG@U#Z%
zcJs8>Uu|L)i;)*P>IL^;-)&9|%p`)ul4R0H6#*pmeI<lJVMC~Y(fmg(afTl34(IZw
zNxbzwl}6h<9N;SbdP68x6QO45VIDRa^ShQwqUidM{1%FP9=cYI8MAxYj2PHZSOFk8
z)~5PU#|Yet<rHj*v76C2qrqat!x$UYc#Hq0K(mD)C@kr-wqY2BJ8pjW`gKaz1yzZ3
zo1)Mi=@H4#rqFpqnqliRWc@w|`d8iN+s`^9&H69;)n9g@1XJ)f<9Wqo0J{Y29fkv(
z&j`=l^pcaGX37o~zNVGv9@YX&6^hv)_Qo8?$HG#j3jRjtEIQN$)Pu0`y`QT(j>{L$
z4n?HiP<D9^#<!Gs+jhf3jH)>e0QFMR9Sea9=QbDoG@vbx9<tHEbKgAuZ)Zs=g9}UP
zW3OdE5b-9fIh6rN(0w;fkAezAKw0dg7sjEineDu-(31*gUv=5`trtj3Opo?P>zrX#
zNc;C+?`!w#&tfnc;_APebl~@6#oCxI49BbBi}NkyR%KOiguZ`k1(_p%Fc{h&R-3H7
zzwYEYYu$pW5LGs@^eJ!QHe*P{3O$K2-c2T7gaS;Vh(Tz9Z$6qc4B%uOL7hfx$)3f4
zNihltk&w~j&0ahykxg`RU&rF6?>-3!lf|Ypay@y{IDo9kUV7BqpQ6+9bffpZif=Mf
zM;&tW{S=w@Lgp8>{i0t)hJ_-(?RTLlcU(j+Jnnse=h9r%<GFA!)XyVGT`2cglDv3g
z4muSZ&oEbUwdDp`czx|Yc+}1F|B?x;Z7;%E8Ruq^&_0%%%*UL4(VDq*>q!8n92cUH
zqnfq*Ov*-e<Hb8L;9*{Bkzz&n>d35OhQZ=U<6=L|f%FTaiCCH1+Ob6kSPs`sx??^Z
z+9}MZWNc|}whBbTs?zDiX0;xiu2hGjhdzXpbM-j&Tx=Na6<P+D4|QZh+!P3-dRrE@
zrrPI;f2Z1svwfAvSB|Q+0aHlZC_5htWGGFDe9jK(C2DX-VCc%BhB7RNqf5^g&9-f@
z(b_ReuUi~<IGJ99G}BycX)Z<#L0_;j1TZkq@Z43CvI8%~`6#Y-xC$`@05D=;Zim@?
zYGSv^4W17v3&{~lk0vsTSs6T6`i^Mzvp7ICAZo-UKRz(nP;B-jE@7{R0O|}232e(R
zIjLdKHEenF<_<uW1cO-{W`hKSUyRs;^QUugR{{%EUCJHSsVb$+->j5yRL%bT`rQ?2
zvQ^`tp4a=kIr=P=U0DJ-NsKP5L3Ry@uu#!omXvq9yBLnn33B)|kc5Sjm=O7<Lhgc^
zL}`Q%avPq5>7qiYai=6DUUOGFDPx^Q7kN(hhqD753@5qN&Hi!J$(~SNTGNM|@(A{H
zs1z2RZr43*9n2DX1j?ck20}IoiL~a+GlRNb){6)dmOC(VokiE$M@BOl{Z!(3RNxpS
z7{lb!`$$Nccy~V;h|aunrjyx)KIV-JV=oF#MfH+`Y^)E}eoO&KP8EdC18z`6C=|5v
znF=1<iP$tdF3A4%%AW!eo9^2&qU4Iy-{-eP__`|<Hc>zg=@fNf(2M34f=Z4lvJX&E
zIUC%JD4&L_Zw}|21nyDWuEk8xja%<iv5CpDS1`%2&(XfHal2ex<pV8?QQ6=`->$|Y
z(luQr%g?~PIu2n%dQYA^hC855d@0qXH=vBD{cJj)rm0cTUHcF;V#Z?xOOR!si?a_k
z`?^H|RX7_AsO;=VOS@LynS5sq=6lP8pSz<c^jV=j(r_{H79Kg16JtL;OpqIbD+dJ<
ztj=RLK4;<B$R?in4>w(-yxKlzz(PX-Q)KnH#z02_g(e`7jd(oh@PBUWN2u%eGNDp%
zf)qN3aA*QjoqGX}&|zoxhmhTeCnhQf^(q{pQ7MXrhf)GA0N{)ak4VN7y+d;%=OBnK
zW@hjv4rSNVGI*kya^EErJaI+&&<i9jO^oyv96?<9p$H{60j;dCmL3euB39qtf<Yfq
z*>kLDsG@GV^l||Jl5)bfPA&}Kqnv1WpS>ii6%2f$ke*A8V+{sakem^_X9O|jX<0+F
zK4V=zrCe~B$?1U-wxRR9h+?_IL3dgx76OZ)yc~PKuq*}zeSwyjQ+DXXz^a+HYg4RP
z=)+Zr8X=|60`}|hIKr~Bey&B(SC&t)*V{Q@-(Dnv&obY#ls@<h6+R4?iD`7Sq5!ua
zw!<E&$vj_;Zz$6TjCrkYzP;%`+Cu|#tE)E%JchxZvu!Wr9c-Uwmq7X4to0N~1xSIB
znU*`ZJG4qf3e9!s^eFdtSKkx2uS<mjYu^UfPDMXnY?{iP`qY%8XHTt6UsDj-EOJg%
zyx`%)iYoEd_Tf><OkOqDwu`u^IvyrJ8vrG}hPVCpzIzMS)_!b1tYtl1w_H5Y1LiMY
zrJ$#40wOy~*C}Hk9SxTDx0QMh-$F9K#u}tIUD-{@d-$4#gXQpzxxi!d<<j4izzeqb
zOOb28jkn(~KU;&4-xB}#VVnFRQd&uTDVw$eZNSKG+7-6BV6HEjnk#W(-%E5#jYg}v
z_3=d){w<8_xX#S_V^ba{?9g8b_S06Vtv@W}X~)Eu395_b;`YOdqNnGjF3H?mE}G(v
z$Rk*_bI39IM#(wxZ+W+iu%y$q%(kRq<NF5omqrkC(Q0df95pm*tD`hD^l=SQAI{~S
z4EiFMeJJ}hGU}HNPmuSxk*k8i6y<4AiQuQNTNs%h4w1Zay&mwWxAI%QBG9%`KPlnW
z<gAfCS)it;^8iQE{lq8M?U0@_qBHbU?e0wQ*D*dh9vN3l__cCa1h!VhY}|G1_=mse
zxY4Gr%>u^@AfAM>MkYRpvSY3Aoe#rs)hrhvV&z;+r7x`2KFDrTaEjjNkz9uB8KO5_
z_f_z|=lax@&Cr7E&;vy5MVC6Hq(Arc4bZ;69cVV4#$DK0Ws$Y<O4X5ueF?mcvsO2)
z_E)}W^Vng|68MBXOz#k=a>Fi{iA~4hf>^bDFw>*)sxd0MM-Qq(G`Z40@)O2`dDq5L
zI;J>ljK>v=51@KYI)uyT#Ve4xUy{N!)<&gNc&wIVMp(tgklL0Y^E&1poJ2)pjce#H
z(MufDhjxtQ<F9_7%uwaPbWUtn@s+v`6~9+ku>1Xf)FmgA#wK~E|7O5{w7OLk6)k@+
zZnDcOZG?S&8N%T~bLI|b_m{S&kiRTJyCdzAx&3>Ns8|`N$W^<DO?o(qxp%&=?Ec(h
z#am@+-)S2ECxMBE$Aj+j=&#%7^|!bqR~ftbs}=V|Te?49YU>ylU>LN<$VW*k4CG}p
zPF-Ug&@qZE-^P3&{qdZZ>AnWT2-R)8P4}YIwF5JD%d(9AdbFVak)U~wHd|*DOQz%0
zTahRQg@NPp8a-tmVYdM~;d$nGY{$%?`Vd0)d#`JZ?+k-~oG04E^Pyxxg0T^cR2?F*
z=je@_e!$fyu-DEtIH#+fY69T_?It(PUw7LCLhnb)v&W!^r%eoW<5RC43<bQ*bY!`d
zjT~1Te|brXYQa(NocLwS9xj_;@YQiyYbr&vKS99mZT2r_$z{m?nYZQx6o&^xPb+p9
zOgUTo+EWi^ZWDi7R|`OA)$;9mu)i;ragJ-bP5mfz2%p+p0wfILo($rzz1}d4G7r9n
zwpHYeV24g@ErKxZI;ch5LuiKvxRMo&T@7H>q4FgTp50O+!>Q1y>tpWQhMA9p&<ip~
zd-7Rm>(z;{%frwN&ZVmbe-NHTo16M?Bn+z6!yUaO<WcgH+4;VyBZl~cB0HqR2M(z2
zRVwdJ$q$>^rp;Cl<kw54wRT(N6pX*)g=;U%V2w4mtyq4j=(>KaWs4r8uU)p@fnTsH
zuLSsCNk^?wdLYt^1Bucr71&-dOmXNV0Nh_Th7Ek=vaEo3tJK*HE#vmLwsr2+o*I|k
q(&MBz0{+n4+Mvw+-#<ctw0-(NZO5CnO3AcjwrQ#Bsg<e_LjDI@o-ro?

diff --git a/src/applications/helper/better-ping-helper.cc b/src/applications/helper/better-ping-helper.cc
new file mode 100644
index 000000000..d2b45e944
--- /dev/null
+++ b/src/applications/helper/better-ping-helper.cc
@@ -0,0 +1,137 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2008 INRIA
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Mathieu Lacage <mathieu.lacage@sophia.inria.fr>
+ */
+#include "better-ping-helper.h"
+#include "ns3/better-ping-server.h"
+#include "ns3/better-ping-client.h"
+#include "ns3/uinteger.h"
+#include "ns3/names.h"
+
+namespace ns3 {
+
+BetterPingServerHelper::BetterPingServerHelper ()
+{
+  m_factory.SetTypeId (BetterPingServer::GetTypeId ());
+}
+
+BetterPingServerHelper::BetterPingServerHelper (uint16_t port)
+{
+  m_factory.SetTypeId (BetterPingServer::GetTypeId ());
+  SetAttribute ("Port", UintegerValue (port));
+}
+
+void
+BetterPingServerHelper::SetAttribute (std::string name, const AttributeValue &value)
+{
+  m_factory.Set (name, value);
+}
+
+ApplicationContainer
+BetterPingServerHelper::Install (Ptr<Node> node) const
+{
+  return ApplicationContainer (InstallPriv (node));
+}
+
+ApplicationContainer
+BetterPingServerHelper::Install (std::string nodeName) const
+{
+  Ptr<Node> node = Names::Find<Node> (nodeName);
+  return ApplicationContainer (InstallPriv (node));
+}
+
+ApplicationContainer
+BetterPingServerHelper::Install (NodeContainer c) const
+{
+  ApplicationContainer apps;
+  for (NodeContainer::Iterator i = c.Begin (); i != c.End (); ++i)
+    {
+      apps.Add (InstallPriv (*i));
+    }
+
+  return apps;
+}
+
+Ptr<Application>
+BetterPingServerHelper::InstallPriv (Ptr<Node> node) const
+{
+  Ptr<Application> app = m_factory.Create<BetterPingServer> ();
+  node->AddApplication (app);
+
+  return app;
+}
+
+BetterPingClientHelper::BetterPingClientHelper ()
+{
+  m_factory.SetTypeId (BetterPingClient::GetTypeId ());
+}
+
+BetterPingClientHelper::BetterPingClientHelper (Address address, uint16_t port)
+{
+  m_factory.SetTypeId (BetterPingClient::GetTypeId ());
+  SetAttribute ("RemoteAddress", AddressValue (address));
+  SetAttribute ("RemotePort", UintegerValue (port));
+}
+
+BetterPingClientHelper::BetterPingClientHelper (Address address)
+{
+  m_factory.SetTypeId (BetterPingClient::GetTypeId ());
+  SetAttribute ("RemoteAddress", AddressValue (address));
+}
+
+void
+BetterPingClientHelper::SetAttribute (std::string name, const AttributeValue &value)
+{
+  m_factory.Set (name, value);
+}
+
+ApplicationContainer
+BetterPingClientHelper::Install (Ptr<Node> node) const
+{
+  return ApplicationContainer (InstallPriv (node));
+}
+
+ApplicationContainer
+BetterPingClientHelper::Install (std::string nodeName) const
+{
+  Ptr<Node> node = Names::Find<Node> (nodeName);
+  return ApplicationContainer (InstallPriv (node));
+}
+
+ApplicationContainer
+BetterPingClientHelper::Install (NodeContainer c) const
+{
+  ApplicationContainer apps;
+  for (NodeContainer::Iterator i = c.Begin (); i != c.End (); ++i)
+    {
+      apps.Add (InstallPriv (*i));
+    }
+
+  return apps;
+}
+
+Ptr<Application>
+BetterPingClientHelper::InstallPriv (Ptr<Node> node) const
+{
+  Ptr<Application> app = m_factory.Create<BetterPingClient> ();
+  node->AddApplication (app);
+
+  return app;
+}
+
+} // namespace ns3
diff --git a/src/applications/helper/better-ping-helper.h b/src/applications/helper/better-ping-helper.h
new file mode 100644
index 000000000..ddf403ffd
--- /dev/null
+++ b/src/applications/helper/better-ping-helper.h
@@ -0,0 +1,183 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2008 INRIA
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Mathieu Lacage <mathieu.lacage@sophia.inria.fr>
+ */
+#ifndef BETTER_PING_HELPER_H
+#define BETTER_PING_HELPER_H
+
+#include <stdint.h>
+#include "ns3/application-container.h"
+#include "ns3/node-container.h"
+#include "ns3/object-factory.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/ipv6-address.h"
+
+namespace ns3 {
+
+/**
+ * \ingroup BetterPing
+ * \brief Create a server application which waits for input UDP packets
+ *        and sends them back to the original sender.
+ */
+class BetterPingServerHelper
+{
+public:
+  BetterPingServerHelper ();
+  /**
+   * Create BetterPingServerHelper which will make life easier for people trying
+   * to set up simulations with echos.
+   *
+   * \param port The port the server will wait on for incoming packets
+   */
+  BetterPingServerHelper (uint16_t port);
+
+  /**
+   * Record an attribute to be set in each Application after it is is created.
+   *
+   * \param name the name of the attribute to set
+   * \param value the value of the attribute to set
+   */
+  void SetAttribute (std::string name, const AttributeValue &value);
+
+  /**
+   * Create a BetterPingServerApplication on the specified Node.
+   *
+   * \param node The node on which to create the Application.  The node is
+   *             specified by a Ptr<Node>.
+   *
+   * \returns An ApplicationContainer holding the Application created,
+   */
+  ApplicationContainer Install (Ptr<Node> node) const;
+
+  /**
+   * Create a BetterPingServerApplication on specified node
+   *
+   * \param nodeName The node on which to create the application.  The node
+   *                 is specified by a node name previously registered with
+   *                 the Object Name Service.
+   *
+   * \returns An ApplicationContainer holding the Application created.
+   */
+  ApplicationContainer Install (std::string nodeName) const;
+
+  /**
+   * \param c The nodes on which to create the Applications.  The nodes
+   *          are specified by a NodeContainer.
+   *
+   * Create one udp echo server application on each of the Nodes in the
+   * NodeContainer.
+   *
+   * \returns The applications created, one Application per Node in the 
+   *          NodeContainer.
+   */
+  ApplicationContainer Install (NodeContainer c) const;
+
+private:
+  /**
+   * Install an ns3::BetterPingServer on the node configured with all the
+   * attributes set with SetAttribute.
+   *
+   * \param node The node on which an BetterPingServer will be installed.
+   * \returns Ptr to the application installed.
+   */
+  Ptr<Application> InstallPriv (Ptr<Node> node) const;
+
+  ObjectFactory m_factory; //!< Object factory.
+};
+
+/**
+ * \ingroup BetterPing
+ * \brief Create an application which sends a UDP packet and waits for an echo of this packet
+ */
+class BetterPingClientHelper
+{
+public:
+  BetterPingClientHelper ();
+  /**
+   * Create BetterPingClientHelper which will make life easier for people trying
+   * to set up simulations with echos. Use this variant with addresses that do
+   * not include a port value (e.g., Ipv4Address and Ipv6Address).
+   *
+   * \param ip The IP address of the remote udp echo server
+   * \param port The port number of the remote udp echo server
+   */
+  BetterPingClientHelper (Address ip, uint16_t port);
+  /**
+   * Create BetterPingClientHelper which will make life easier for people trying
+   * to set up simulations with echos. Use this variant with addresses that do
+   * include a port value (e.g., InetSocketAddress and Inet6SocketAddress).
+   *
+   * \param addr The address of the remote udp echo server
+   */
+  BetterPingClientHelper (Address addr);
+
+  /**
+   * Record an attribute to be set in each Application after it is is created.
+   *
+   * \param name the name of the attribute to set
+   * \param value the value of the attribute to set
+   */
+  void SetAttribute (std::string name, const AttributeValue &value);
+
+  /**
+   * Create a udp echo client application on the specified node.  The Node
+   * is provided as a Ptr<Node>.
+   *
+   * \param node The Ptr<Node> on which to create the BetterPingClientApplication.
+   *
+   * \returns An ApplicationContainer that holds a Ptr<Application> to the 
+   *          application created
+   */
+  ApplicationContainer Install (Ptr<Node> node) const;
+
+  /**
+   * Create a udp echo client application on the specified node.  The Node
+   * is provided as a string name of a Node that has been previously 
+   * associated using the Object Name Service.
+   *
+   * \param nodeName The name of the node on which to create the BetterPingClientApplication
+   *
+   * \returns An ApplicationContainer that holds a Ptr<Application> to the 
+   *          application created
+   */
+  ApplicationContainer Install (std::string nodeName) const;
+
+  /**
+   * \param c the nodes
+   *
+   * Create one udp echo client application on each of the input nodes
+   *
+   * \returns the applications created, one application per input node.
+   */
+  ApplicationContainer Install (NodeContainer c) const;
+
+private:
+  /**
+   * Install an ns3::BetterPingClient on the node configured with all the
+   * attributes set with SetAttribute.
+   *
+   * \param node The node on which an BetterPingClient will be installed.
+   * \returns Ptr to the application installed.
+   */
+  Ptr<Application> InstallPriv (Ptr<Node> node) const;
+  ObjectFactory m_factory; //!< Object factory.
+};
+
+} // namespace ns3
+
+#endif /* BETTER_PING_HELPER_H */
diff --git a/scratch/scratch-simulator.cc b/src/applications/helper/generic-app-helper.cc
similarity index 68%
rename from scratch/scratch-simulator.cc
rename to src/applications/helper/generic-app-helper.cc
index aa7cc6fa4..9b77516b8 100644
--- a/scratch/scratch-simulator.cc
+++ b/src/applications/helper/generic-app-helper.cc
@@ -1,5 +1,7 @@
 /* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
 /*
+ * Copyright (c) 2008 INRIA
+ *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
  * published by the Free Software Foundation;
@@ -12,19 +14,19 @@
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Mohamed Amine Ismail <amine.ismail@sophia.inria.fr>
  */
+#include "generic-app-helper.h"
+#include "ns3/uinteger.h"
+#include "ns3/string.h"
 
-#include "ns3/core-module.h"
-
-using namespace ns3;
+namespace ns3 {
 
-NS_LOG_COMPONENT_DEFINE ("ScratchSimulator");
-
-int 
-main (int argc, char *argv[])
+void
+GenericAppHelper::SetAttribute (std::string name, const AttributeValue &value)
 {
-  NS_LOG_UNCOND ("Scratch Simulator");
-
-  Simulator::Run ();
-  Simulator::Destroy ();
+  m_factory.Set (name, value);
 }
+
+} // namespace ns3
diff --git a/src/applications/helper/generic-app-helper.h b/src/applications/helper/generic-app-helper.h
new file mode 100644
index 000000000..9323b3717
--- /dev/null
+++ b/src/applications/helper/generic-app-helper.h
@@ -0,0 +1,59 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2008 INRIA
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Mohamed Amine Ismail <amine.ismail@sophia.inria.fr>
+ */
+#ifndef GENERIC_APP_HELPER_H
+#define GENERIC_APP_HELPER_H
+
+#include <stdint.h>
+#include "ns3/application-container.h"
+#include "ns3/node-container.h"
+#include "ns3/object-factory.h"
+#include "ns3/ipv4-address.h"
+namespace ns3 {
+
+class GenericAppHelper
+{
+public:
+
+  virtual ~GenericAppHelper() = default;
+
+  /**
+   * Record an attribute to be set in each Application after it is is created.
+   *
+   * \param name the name of the attribute to set
+   * \param value the value of the attribute to set
+   */
+  virtual void SetAttribute (std::string name, const AttributeValue &value);
+
+  /**
+   *
+   * \param c The nodes on which to create the Applications.  The nodes
+   *          are specified by a NodeContainer.
+   * \returns The applications created, one Application per Node in the
+   *          NodeContainer.
+   */
+  virtual ApplicationContainer Install (NodeContainer c) = 0;
+
+protected:
+  ObjectFactory m_factory; //!< Object factory.
+};
+
+} // namespace ns3
+
+#endif /* GENERIC_APP_HELPER_H */
diff --git a/src/applications/helper/quic-bulk-client-helper.cc b/src/applications/helper/quic-bulk-client-helper.cc
new file mode 100644
index 000000000..35ba13b5c
--- /dev/null
+++ b/src/applications/helper/quic-bulk-client-helper.cc
@@ -0,0 +1,65 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2008 INRIA
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Mohamed Amine Ismail <amine.ismail@sophia.inria.fr>
+ */
+#include "quic-bulk-client-helper.h"
+#include "ns3/quic-bulk-client.h"
+#include "ns3/uinteger.h"
+#include "ns3/string.h"
+
+namespace ns3 {
+
+QuicBulkClientHelper::QuicBulkClientHelper ()
+{
+  m_factory.SetTypeId (QuicBulkClient::GetTypeId ());
+}
+
+QuicBulkClientHelper::QuicBulkClientHelper (Address address, uint16_t port)
+{
+  m_factory.SetTypeId (QuicBulkClient::GetTypeId ());
+  SetAttribute ("RemoteAddress", AddressValue (address));
+  SetAttribute ("RemotePort", UintegerValue (port));
+}
+
+QuicBulkClientHelper::QuicBulkClientHelper (Address address)
+{
+  m_factory.SetTypeId (QuicBulkClient::GetTypeId ());
+  SetAttribute ("RemoteAddress", AddressValue (address));
+}
+
+void
+QuicBulkClientHelper::SetAttribute (std::string name, const AttributeValue &value)
+{
+  m_factory.Set (name, value);
+}
+
+ApplicationContainer
+QuicBulkClientHelper::Install (NodeContainer c)
+{
+  ApplicationContainer apps;
+  for (NodeContainer::Iterator i = c.Begin (); i != c.End (); ++i)
+    {
+      Ptr<Node> node = *i;
+      Ptr<QuicBulkClient> client = m_factory.Create<QuicBulkClient> ();
+      node->AddApplication (client);
+      apps.Add (client);
+    }
+  return apps;
+}
+
+} // namespace ns3
diff --git a/src/applications/helper/quic-bulk-client-helper.h b/src/applications/helper/quic-bulk-client-helper.h
new file mode 100644
index 000000000..4eacbfc02
--- /dev/null
+++ b/src/applications/helper/quic-bulk-client-helper.h
@@ -0,0 +1,92 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2008 INRIA
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Mohamed Amine Ismail <amine.ismail@sophia.inria.fr>
+ */
+#ifndef QUIC_BULK_CLIENT_HELPER_H
+#define QUIC_BULK_CLIENT_HELPER_H
+
+#include <stdint.h>
+#include "ns3/application-container.h"
+#include "ns3/node-container.h"
+#include "ns3/object-factory.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/quic-bulk-client.h"
+namespace ns3 {
+/**
+ * \ingroup quicbulkclient
+ * \brief Create a bulk sender client application which sends QUIC packets carrying
+ *  a 32bit sequence number and a 64 bit time stamp.
+ *
+ */
+class QuicBulkClientHelper
+{
+
+public:
+  /**
+   * Create QuicBulkClientHelper which will make life easier for people trying
+   * to set up simulations with quic-bulk-client.
+   *
+   */
+  QuicBulkClientHelper ();
+
+  /**
+   *  Create QuicBulkClientHelper which will make life easier for people trying
+   * to set up simulations with quic-bulk-client. Use this variant with
+   * addresses that do not include a port value (e.g., Ipv4Address and
+   * Ipv6Address).
+   *
+   * \param ip The IP address of the remote QUIC server
+   * \param port The port number of the remote QUIC server
+   */
+
+  QuicBulkClientHelper (Address ip, uint16_t port);
+  /**
+   *  Create QuicBulkClientHelper which will make life easier for people trying
+   * to set up simulations with quic-bulk-client. Use this variant with
+   * addresses that do include a port value (e.g., InetSocketAddress and
+   * Inet6SocketAddress).
+   *
+   * \param addr The address of the remote QUIC server
+   */
+
+  QuicBulkClientHelper (Address addr);
+
+  /**
+   * Record an attribute to be set in each Application after it is is created.
+   *
+   * \param name the name of the attribute to set
+   * \param value the value of the attribute to set
+   */
+  void SetAttribute (std::string name, const AttributeValue &value);
+
+  /**
+     * \param c the nodes
+     *
+     * Create one QUIC client application on each of the input nodes
+     *
+     * \returns the applications created, one application per input node.
+     */
+  ApplicationContainer Install (NodeContainer c);
+
+private:
+  ObjectFactory m_factory; //!< Object factory.
+};
+
+} // namespace ns3
+
+#endif /* QUIC_BULK_CLIENT_HELPER_H */
diff --git a/src/applications/helper/quic-client-server-helper.cc b/src/applications/helper/quic-client-server-helper.cc
new file mode 100644
index 000000000..efe0ace60
--- /dev/null
+++ b/src/applications/helper/quic-client-server-helper.cc
@@ -0,0 +1,93 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2008 INRIA
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Mohamed Amine Ismail <amine.ismail@sophia.inria.fr>
+ */
+#include "quic-client-server-helper.h"
+#include "ns3/quic-server.h"
+#include "ns3/quic-client.h"
+#include "ns3/uinteger.h"
+#include "ns3/string.h"
+
+namespace ns3 {
+
+QuicServerHelper::QuicServerHelper ()
+{
+  m_factory.SetTypeId (QuicServer::GetTypeId ());
+}
+
+QuicServerHelper::QuicServerHelper (uint16_t port)
+{
+  m_factory.SetTypeId (QuicServer::GetTypeId ());
+  SetAttribute ("Port", UintegerValue (port));
+}
+
+ApplicationContainer
+QuicServerHelper::Install (NodeContainer c)
+{
+  ApplicationContainer apps;
+  for (NodeContainer::Iterator i = c.Begin (); i != c.End (); ++i)
+    {
+      Ptr<Node> node = *i;
+
+      m_server = m_factory.Create<QuicServer> ();
+      node->AddApplication (m_server);
+      apps.Add (m_server);
+
+    }
+  return apps;
+}
+
+Ptr<QuicServer>
+QuicServerHelper::GetServer (void)
+{
+  return m_server;
+}
+
+QuicClientHelper::QuicClientHelper ()
+{
+  m_factory.SetTypeId (QuicClient::GetTypeId ());
+}
+
+QuicClientHelper::QuicClientHelper (Address address, uint16_t port)
+{
+  m_factory.SetTypeId (QuicClient::GetTypeId ());
+  SetAttribute ("RemoteAddress", AddressValue (address));
+  SetAttribute ("RemotePort", UintegerValue (port));
+}
+
+QuicClientHelper::QuicClientHelper (Address address)
+{
+  m_factory.SetTypeId (QuicClient::GetTypeId ());
+  SetAttribute ("RemoteAddress", AddressValue (address));
+}
+
+ApplicationContainer
+QuicClientHelper::Install (NodeContainer c)
+{
+  ApplicationContainer apps;
+  for (NodeContainer::Iterator i = c.Begin (); i != c.End (); ++i)
+    {
+      Ptr<Node> node = *i;
+      Ptr<QuicClient> client = m_factory.Create<QuicClient> ();
+      node->AddApplication (client);
+      apps.Add (client);
+    }
+  return apps;
+}
+
+} // namespace ns3
diff --git a/src/applications/helper/quic-client-server-helper.h b/src/applications/helper/quic-client-server-helper.h
new file mode 100644
index 000000000..f3e301fb6
--- /dev/null
+++ b/src/applications/helper/quic-client-server-helper.h
@@ -0,0 +1,134 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2008 INRIA
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Mohamed Amine Ismail <amine.ismail@sophia.inria.fr>
+ */
+#ifndef QUIC_CLIENT_SERVER_HELPER_H
+#define QUIC_CLIENT_SERVER_HELPER_H
+
+#include <stdint.h>
+#include "ns3/application-container.h"
+#include "ns3/node-container.h"
+#include "ns3/object-factory.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/quic-server.h"
+#include "ns3/quic-client.h"
+#include "ns3/generic-app-helper.h"
+
+namespace ns3 {
+/**
+ * \ingroup quicclientserver
+ * \brief Create a server application which waits for input QUIC packets
+ *        and uses the information carried into their payload to compute
+ *        delay and to determine if some packets are lost.
+ */
+class QuicServerHelper : public GenericAppHelper
+{
+public:
+  /**
+   * Create QuicServerHelper which will make life easier for people trying
+   * to set up simulations with quic-client-server application.
+   *
+   */
+  QuicServerHelper ();
+
+  /**
+   * Create QuicServerHelper which will make life easier for people trying
+   * to set up simulations with quic-client-server application.
+   *
+   * \param port The port the server will wait on for incoming packets
+   */
+  QuicServerHelper (uint16_t port);
+
+  /**
+   * Create one QUIC server application on each of the Nodes in the
+   * NodeContainer.
+   *
+   * \param c The nodes on which to create the Applications.  The nodes
+   *          are specified by a NodeContainer.
+   * \returns The applications created, one Application per Node in the
+   *          NodeContainer.
+   */
+  ApplicationContainer Install (NodeContainer c);
+
+  /**
+   * \brief Return the last created server.
+   *
+   * This function is mainly used for testing.
+   *
+   * \returns a Ptr to the last created server application
+   */
+  Ptr<QuicServer> GetServer (void);
+
+private:
+  Ptr<QuicServer> m_server; //!< The last created server application
+};
+
+/**
+ * \ingroup quicclientserver
+ * \brief Create a client application which sends QUIC packets carrying
+ *  a 32bit sequence number and a 64 bit time stamp.
+ *
+ */
+class QuicClientHelper : public GenericAppHelper
+{
+
+public:
+  /**
+   * Create QuicClientHelper which will make life easier for people trying
+   * to set up simulations with quic-client-server.
+   *
+   */
+  QuicClientHelper ();
+
+  /**
+   *  Create QuicClientHelper which will make life easier for people trying
+   * to set up simulations with quic-client-server. Use this variant with
+   * addresses that do not include a port value (e.g., Ipv4Address and
+   * Ipv6Address).
+   *
+   * \param ip The IP address of the remote QUIC server
+   * \param port The port number of the remote QUIC server
+   */
+
+  QuicClientHelper (Address ip, uint16_t port);
+  /**
+   *  Create QuicClientHelper which will make life easier for people trying
+   * to set up simulations with quic-client-server. Use this variant with
+   * addresses that do include a port value (e.g., InetSocketAddress and
+   * Inet6SocketAddress).
+   *
+   * \param addr The address of the remote QUIC server
+   */
+
+  QuicClientHelper (Address addr);
+
+  /**
+     * \param c the nodes
+     *
+     * Create one QUIC client application on each of the input nodes
+     *
+     * \returns the applications created, one application per input node.
+     */
+  ApplicationContainer Install (NodeContainer c);
+
+private:
+};
+
+} // namespace ns3
+
+#endif /* QUIC_CLIENT_SERVER_H */
diff --git a/src/applications/helper/quic-echo-helper.cc b/src/applications/helper/quic-echo-helper.cc
new file mode 100644
index 000000000..fd3ca4448
--- /dev/null
+++ b/src/applications/helper/quic-echo-helper.cc
@@ -0,0 +1,138 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Davide Marcato <davide.marcato.4@studenti.unipd.it>
+ *          Stefano Ravazzolo <stefano.ravazzolo@studenti.unipd.it>
+ *          Alvise De Biasio <alvise.debiasio@studenti.unipd.it>
+ */
+
+#include "quic-echo-helper.h"
+#include "ns3/quic-echo-server.h"
+#include "ns3/quic-echo-client.h"
+#include "ns3/uinteger.h"
+#include "ns3/names.h"
+#include "ns3/log.h"
+
+NS_LOG_COMPONENT_DEFINE ("QuicEchoHelper");
+
+namespace ns3 {
+
+QuicEchoServerHelper::QuicEchoServerHelper (uint16_t port)
+{
+  m_factory.SetTypeId (QuicEchoServer::GetTypeId ());
+  SetAttribute ("Port", UintegerValue (port));
+}
+
+ApplicationContainer
+QuicEchoServerHelper::Install (Ptr<Node> node)
+{
+  return ApplicationContainer (InstallPriv (node));
+}
+
+ApplicationContainer
+QuicEchoServerHelper::Install (std::string nodeName)
+{
+  Ptr<Node> node = Names::Find<Node> (nodeName);
+  return ApplicationContainer (InstallPriv (node));
+}
+
+ApplicationContainer
+QuicEchoServerHelper::Install (NodeContainer c)
+{
+  ApplicationContainer apps;
+  for (NodeContainer::Iterator i = c.Begin (); i != c.End (); ++i)
+    {
+      apps.Add (InstallPriv (*i));
+    }
+
+  return apps;
+}
+
+Ptr<Application>
+QuicEchoServerHelper::InstallPriv (Ptr<Node> node)
+{
+
+  Ptr<Application> app = m_factory.Create<QuicEchoServer> ();
+  node->AddApplication (app);
+  NS_LOG_INFO ("Installing app " << app << " in node " << node);
+  return app;
+}
+
+QuicEchoClientHelper::QuicEchoClientHelper (Address address, uint16_t port)
+{
+  m_factory.SetTypeId (QuicEchoClient::GetTypeId ());
+  SetAttribute ("RemoteAddress", AddressValue (address));
+  SetAttribute ("RemotePort", UintegerValue (port));
+}
+
+QuicEchoClientHelper::QuicEchoClientHelper (Address address)
+{
+  m_factory.SetTypeId (QuicEchoClient::GetTypeId ());
+  SetAttribute ("RemoteAddress", AddressValue (address));
+}
+
+void
+QuicEchoClientHelper::SetFill (Ptr<Application> app, std::string fill)
+{
+  app->GetObject<QuicEchoClient>()->SetFill (fill);
+}
+
+void
+QuicEchoClientHelper::SetFill (Ptr<Application> app, uint8_t fill, uint32_t dataLength)
+{
+  app->GetObject<QuicEchoClient>()->SetFill (fill, dataLength);
+}
+
+void
+QuicEchoClientHelper::SetFill (Ptr<Application> app, uint8_t *fill, uint32_t fillLength, uint32_t dataLength)
+{
+  app->GetObject<QuicEchoClient>()->SetFill (fill, fillLength, dataLength);
+}
+
+ApplicationContainer
+QuicEchoClientHelper::Install (Ptr<Node> node)
+{
+  return ApplicationContainer (InstallPriv (node));
+}
+
+ApplicationContainer
+QuicEchoClientHelper::Install (std::string nodeName)
+{
+  Ptr<Node> node = Names::Find<Node> (nodeName);
+  return ApplicationContainer (InstallPriv (node));
+}
+
+ApplicationContainer
+QuicEchoClientHelper::Install (NodeContainer c)
+{
+  ApplicationContainer apps;
+  for (NodeContainer::Iterator i = c.Begin (); i != c.End (); ++i)
+    {
+      apps.Add (InstallPriv (*i));
+    }
+
+  return apps;
+}
+
+Ptr<Application>
+QuicEchoClientHelper::InstallPriv (Ptr<Node> node)
+{
+  Ptr<Application> app = m_factory.Create<QuicEchoClient> ();
+  node->AddApplication (app);
+
+  return app;
+}
+
+} // namespace ns3
diff --git a/src/applications/helper/quic-echo-helper.h b/src/applications/helper/quic-echo-helper.h
new file mode 100644
index 000000000..5ee26c9b7
--- /dev/null
+++ b/src/applications/helper/quic-echo-helper.h
@@ -0,0 +1,215 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Davide Marcato <davide.marcato.4@studenti.unipd.it>
+ *          Stefano Ravazzolo <stefano.ravazzolo@studenti.unipd.it>
+ *          Alvise De Biasio <alvise.debiasio@studenti.unipd.it>
+ */
+
+#ifndef QUIC_ECHO_HELPER_H
+#define QUIC_ECHO_HELPER_H
+
+#include <stdint.h>
+#include "ns3/application-container.h"
+#include "ns3/node-container.h"
+#include "ns3/object-factory.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/ipv6-address.h"
+#include "ns3/generic-app-helper.h"
+
+namespace ns3 {
+
+/**
+ * \ingroup quicecho
+ * \brief Create a server application which waits for input QUIC packets
+ *        and sends them back to the original sender.
+ */
+class QuicEchoServerHelper : public GenericAppHelper
+{
+public:
+  /**
+   * Create QuicEchoServerHelper which will make life easier for people trying
+   * to set up simulations with echos.
+   *
+   * \param port The port the server will wait on for incoming packets
+   */
+  QuicEchoServerHelper (uint16_t port);
+
+  /**
+   * Create a QuicEchoServerApplication on the specified Node.
+   *
+   * \param node The node on which to create the Application.  The node is
+   *             specified by a Ptr<Node>.
+   *
+   * \returns An ApplicationContainer holding the Application created,
+   */
+  ApplicationContainer Install (Ptr<Node> node);
+
+  /**
+   * Create a QuicEchoServerApplication on specified node
+   *
+   * \param nodeName The node on which to create the application.  The node
+   *                 is specified by a node name previously registered with
+   *                 the Object Name Service.
+   *
+   * \returns An ApplicationContainer holding the Application created.
+   */
+  ApplicationContainer Install (std::string nodeName);
+
+  /**
+   * \param c The nodes on which to create the Applications.  The nodes
+   *          are specified by a NodeContainer.
+   *
+   * Create one quic echo server application on each of the Nodes in the
+   * NodeContainer.
+   *
+   * \returns The applications created, one Application per Node in the
+   *          NodeContainer.
+   */
+  ApplicationContainer Install (NodeContainer c);
+
+private:
+  /**
+   * Install an ns3::QuicEchoServer on the node configured with all the
+   * attributes set with SetAttribute.
+   *
+   * \param node The node on which an QuicEchoServer will be installed.
+   * \returns Ptr to the application installed.
+   */
+  Ptr<Application> InstallPriv (Ptr<Node> node);
+};
+
+/**
+ * \ingroup quicecho
+ * \brief Create an application which sends a QUIC packet and waits for an echo of this packet
+ */
+class QuicEchoClientHelper : public GenericAppHelper
+{
+public:
+  /**
+   * Create QuicEchoClientHelper which will make life easier for people trying
+   * to set up simulations with echos. Use this variant with addresses that do
+   * not include a port value (e.g., Ipv4Address and Ipv6Address).
+   *
+   * \param ip The IP address of the remote quic echo server
+   * \param port The port number of the remote quic echo server
+   */
+  QuicEchoClientHelper (Address ip, uint16_t port);
+  /**
+   * Create QuicEchoClientHelper which will make life easier for people trying
+   * to set up simulations with echos. Use this variant with addresses that do
+   * include a port value (e.g., InetSocketAddress and Inet6SocketAddress).
+   *
+   * \param addr The address of the remote quic echo server
+   */
+  QuicEchoClientHelper (Address addr);
+
+  /**
+   * Given a pointer to a QuicEchoClient application, set the data fill of the
+   * packet (what is sent as data to the server) to the contents of the fill
+   * string (including the trailing zero terminator).
+   *
+   * \warning The size of resulting echo packets will be automatically adjusted
+   * to reflect the size of the fill string -- this means that the PacketSize
+   * attribute may be changed as a result of this call.
+   *
+   * \param app Smart pointer to the application (real type must be QuicEchoClient).
+   * \param fill The string to use as the actual echo data bytes.
+   */
+  void SetFill (Ptr<Application> app, std::string fill);
+
+  /**
+   * Given a pointer to a QuicEchoClient application, set the data fill of the
+   * packet (what is sent as data to the server) to the contents of the fill
+   * byte.
+   *
+   * The fill byte will be used to initialize the contents of the data packet.
+   *
+   * \warning The size of resulting echo packets will be automatically adjusted
+   * to reflect the dataLength parameter -- this means that the PacketSize
+   * attribute may be changed as a result of this call.
+   *
+   * \param app Smart pointer to the application (real type must be QuicEchoClient).
+   * \param fill The byte to be repeated in constructing the packet data..
+   * \param dataLength The desired length of the resulting echo packet data.
+   */
+  void SetFill (Ptr<Application> app, uint8_t fill, uint32_t dataLength);
+
+  /**
+   * Given a pointer to a QuicEchoClient application, set the data fill of the
+   * packet (what is sent as data to the server) to the contents of the fill
+   * buffer, repeated as many times as is required.
+   *
+   * Initializing the fill to the contents of a single buffer is accomplished
+   * by providing a complete buffer with fillLength set to your desired
+   * dataLength
+   *
+   * \warning The size of resulting echo packets will be automatically adjusted
+   * to reflect the dataLength parameter -- this means that the PacketSize
+   * attribute of the Application may be changed as a result of this call.
+   *
+   * \param app Smart pointer to the application (real type must be QuicEchoClient).
+   * \param fill The fill pattern to use when constructing packets.
+   * \param fillLength The number of bytes in the provided fill pattern.
+   * \param dataLength The desired length of the final echo data.
+   */
+  void SetFill (Ptr<Application> app, uint8_t *fill, uint32_t fillLength, uint32_t dataLength);
+
+  /**
+   * Create a quic echo client application on the specified node.  The Node
+   * is provided as a Ptr<Node>.
+   *
+   * \param node The Ptr<Node> on which to create the QuicEchoClientApplication.
+   *
+   * \returns An ApplicationContainer that holds a Ptr<Application> to the
+   *          application created
+   */
+  ApplicationContainer Install (Ptr<Node> node);
+
+  /**
+   * Create a quic echo client application on the specified node.  The Node
+   * is provided as a string name of a Node that has been previously
+   * associated using the Object Name Service.
+   *
+   * \param nodeName The name of the node on which to create the QuicEchoClientApplication
+   *
+   * \returns An ApplicationContainer that holds a Ptr<Application> to the
+   *          application created
+   */
+  ApplicationContainer Install (std::string nodeName);
+
+  /**
+   * \param c the nodes
+   *
+   * Create one quic echo client application on each of the input nodes
+   *
+   * \returns the applications created, one application per input node.
+   */
+  ApplicationContainer Install (NodeContainer c);
+
+private:
+  /**
+   * Install an ns3::QuicEchoClient on the node configured with all the
+   * attributes set with SetAttribute.
+   *
+   * \param node The node on which an QuicEchoClient will be installed.
+   * \returns Ptr to the application installed.
+   */
+  Ptr<Application> InstallPriv (Ptr<Node> node);
+};
+
+} // namespace ns3
+
+#endif /* QUIC_ECHO_HELPER_H */
diff --git a/src/applications/helper/quic-trigger-client-server-helper.cc b/src/applications/helper/quic-trigger-client-server-helper.cc
new file mode 100644
index 000000000..80668e6ef
--- /dev/null
+++ b/src/applications/helper/quic-trigger-client-server-helper.cc
@@ -0,0 +1,91 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2008 INRIA
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Mohamed Amine Ismail <amine.ismail@sophia.inria.fr>
+ */
+#include "quic-trigger-client-server-helper.h"
+#include "ns3/uinteger.h"
+#include "ns3/string.h"
+
+namespace ns3 {
+
+QuicTriggerServerHelper::QuicTriggerServerHelper ()
+{
+  m_factory.SetTypeId (QuicTriggerServer::GetTypeId ());
+}
+
+QuicTriggerServerHelper::QuicTriggerServerHelper (uint16_t port)
+{
+  m_factory.SetTypeId (QuicTriggerServer::GetTypeId ());
+  SetAttribute ("Port", UintegerValue (port));
+}
+
+ApplicationContainer
+QuicTriggerServerHelper::Install (NodeContainer c)
+{
+  ApplicationContainer apps;
+  for (NodeContainer::Iterator i = c.Begin (); i != c.End (); ++i)
+    {
+      Ptr<Node> node = *i;
+
+      m_server = m_factory.Create<QuicTriggerServer> ();
+      node->AddApplication (m_server);
+      apps.Add (m_server);
+
+    }
+  return apps;
+}
+
+Ptr<QuicTriggerServer>
+QuicTriggerServerHelper::GetServer (void)
+{
+  return m_server;
+}
+
+QuicTriggerClientHelper::QuicTriggerClientHelper ()
+{
+  m_factory.SetTypeId (QuicTriggerClient::GetTypeId ());
+}
+
+QuicTriggerClientHelper::QuicTriggerClientHelper (Address address, uint16_t port)
+{
+  m_factory.SetTypeId (QuicTriggerClient::GetTypeId ());
+  SetAttribute ("RemoteAddress", AddressValue (address));
+  SetAttribute ("RemotePort", UintegerValue (port));
+}
+
+QuicTriggerClientHelper::QuicTriggerClientHelper (Address address)
+{
+  m_factory.SetTypeId (QuicTriggerClient::GetTypeId ());
+  SetAttribute ("RemoteAddress", AddressValue (address));
+}
+
+ApplicationContainer
+QuicTriggerClientHelper::Install (NodeContainer c)
+{
+  ApplicationContainer apps;
+  for (NodeContainer::Iterator i = c.Begin (); i != c.End (); ++i)
+    {
+      Ptr<Node> node = *i;
+      Ptr<QuicTriggerClient> client = m_factory.Create<QuicTriggerClient> ();
+      node->AddApplication (client);
+      apps.Add (client);
+    }
+  return apps;
+}
+
+} // namespace ns3
diff --git a/src/applications/helper/quic-trigger-client-server-helper.h b/src/applications/helper/quic-trigger-client-server-helper.h
new file mode 100644
index 000000000..77463d562
--- /dev/null
+++ b/src/applications/helper/quic-trigger-client-server-helper.h
@@ -0,0 +1,134 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2008 INRIA
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Mohamed Amine Ismail <amine.ismail@sophia.inria.fr>
+ */
+#ifndef QUIC_TRIGGER_CLIENT_SERVER_HELPER_H
+#define QUIC_TRIGGER_CLIENT_SERVER_HELPER_H
+
+#include <stdint.h>
+#include "ns3/application-container.h"
+#include "ns3/node-container.h"
+#include "ns3/object-factory.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/quic-trigger-server.h"
+#include "ns3/quic-trigger-client.h"
+#include "ns3/generic-app-helper.h"
+
+namespace ns3 {
+/**
+ * \ingroup quicclientserver
+ * \brief Create a server application which waits for input QUIC packets
+ *        and uses the information carried into their payload to compute
+ *        delay and to determine if some packets are lost.
+ */
+class QuicTriggerServerHelper : public GenericAppHelper
+{
+public:
+  /**
+   * Create QuicTriggerServerHelper which will make life easier for people trying
+   * to set up simulations with quic-client-server application.
+   *
+   */
+  QuicTriggerServerHelper ();
+
+  /**
+   * Create QuicTriggerServerHelper which will make life easier for people trying
+   * to set up simulations with quic-client-server application.
+   *
+   * \param port The port the server will wait on for incoming packets
+   */
+  QuicTriggerServerHelper (uint16_t port);
+
+  /**
+   * Create one QUIC trigger server application on each of the Nodes in the
+   * NodeContainer.
+   *
+   * \param c The nodes on which to create the Applications.  The nodes
+   *          are specified by a NodeContainer.
+   * \returns The applications created, one Application per Node in the
+   *          NodeContainer.
+   */
+  ApplicationContainer Install (NodeContainer c);
+
+  /**
+   * \brief Return the last created server.
+   *
+   * This function is mainly used for testing.
+   *
+   * \returns a Ptr to the last created server application
+   */
+  Ptr<QuicTriggerServer> GetServer (void);
+
+private:
+  Ptr<QuicTriggerServer> m_server; //!< The last created server application
+};
+
+/**
+ * \ingroup quicclientserver
+ * \brief Create a client application which sends QUIC packets carrying
+ *  a 32bit sequence number and a 64 bit time stamp.
+ *
+ */
+class QuicTriggerClientHelper : public GenericAppHelper
+{
+
+public:
+  /**
+   * Create QuicTriggerClientHelper which will make life easier for people trying
+   * to set up simulations with quic-client-server.
+   *
+   */
+  QuicTriggerClientHelper ();
+
+  /**
+   *  Create QuicTriggerClientHelper which will make life easier for people trying
+   * to set up simulations with quic-client-server. Use this variant with
+   * addresses that do not include a port value (e.g., Ipv4Address and
+   * Ipv6Address).
+   *
+   * \param ip The IP address of the remote QUIC server
+   * \param port The port number of the remote QUIC server
+   */
+
+  QuicTriggerClientHelper (Address ip, uint16_t port);
+  /**
+   *  Create QuicTriggerClientHelper which will make life easier for people trying
+   * to set up simulations with quic-client-server. Use this variant with
+   * addresses that do include a port value (e.g., InetSocketAddress and
+   * Inet6SocketAddress).
+   *
+   * \param addr The address of the remote QUIC server
+   */
+
+  QuicTriggerClientHelper (Address addr);
+
+  /**
+     * \param c the nodes
+     *
+     * Create one QUIC trigger client application on each of the input nodes
+     *
+     * \returns the applications created, one application per input node.
+     */
+  ApplicationContainer Install (NodeContainer c);
+
+private:
+};
+
+} // namespace ns3
+
+#endif /* QUIC_TRIGGER_CLIENT_SERVER_HELPER_H */
diff --git a/src/applications/helper/tcp-client-server-helper.cc b/src/applications/helper/tcp-client-server-helper.cc
new file mode 100644
index 000000000..85aa3703e
--- /dev/null
+++ b/src/applications/helper/tcp-client-server-helper.cc
@@ -0,0 +1,93 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2008 INRIA
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Mohamed Amine Ismail <amine.ismail@sophia.inria.fr>
+ */
+#include "tcp-client-server-helper.h"
+#include "ns3/tcp-server.h"
+#include "ns3/tcp-client.h"
+#include "ns3/uinteger.h"
+#include "ns3/string.h"
+
+namespace ns3 {
+
+TcpServerHelper::TcpServerHelper ()
+{
+  m_factory.SetTypeId (TcpServer::GetTypeId ());
+}
+
+TcpServerHelper::TcpServerHelper (uint16_t port)
+{
+  m_factory.SetTypeId (TcpServer::GetTypeId ());
+  SetAttribute ("Port", UintegerValue (port));
+}
+
+ApplicationContainer
+TcpServerHelper::Install (NodeContainer c)
+{
+  ApplicationContainer apps;
+  for (NodeContainer::Iterator i = c.Begin (); i != c.End (); ++i)
+    {
+      Ptr<Node> node = *i;
+
+      m_server = m_factory.Create<TcpServer> ();
+      node->AddApplication (m_server);
+      apps.Add (m_server);
+
+    }
+  return apps;
+}
+
+Ptr<TcpServer>
+TcpServerHelper::GetServer (void)
+{
+  return m_server;
+}
+
+TcpClientHelper::TcpClientHelper ()
+{
+  m_factory.SetTypeId (TcpClient::GetTypeId ());
+}
+
+TcpClientHelper::TcpClientHelper (Address address, uint16_t port)
+{
+  m_factory.SetTypeId (TcpClient::GetTypeId ());
+  SetAttribute ("RemoteAddress", AddressValue (address));
+  SetAttribute ("RemotePort", UintegerValue (port));
+}
+
+TcpClientHelper::TcpClientHelper (Address address)
+{
+  m_factory.SetTypeId (TcpClient::GetTypeId ());
+  SetAttribute ("RemoteAddress", AddressValue (address));
+}
+
+ApplicationContainer
+TcpClientHelper::Install (NodeContainer c)
+{
+  ApplicationContainer apps;
+  for (NodeContainer::Iterator i = c.Begin (); i != c.End (); ++i)
+    {
+      Ptr<Node> node = *i;
+      Ptr<TcpClient> client = m_factory.Create<TcpClient> ();
+      node->AddApplication (client);
+      apps.Add (client);
+    }
+  return apps;
+}
+
+} // namespace ns3
diff --git a/src/applications/helper/tcp-client-server-helper.h b/src/applications/helper/tcp-client-server-helper.h
new file mode 100644
index 000000000..e19e1c61f
--- /dev/null
+++ b/src/applications/helper/tcp-client-server-helper.h
@@ -0,0 +1,134 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2008 INRIA
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Mohamed Amine Ismail <amine.ismail@sophia.inria.fr>
+ */
+#ifndef TCP_CLIENT_SERVER_HELPER_H
+#define TCP_CLIENT_SERVER_HELPER_H
+
+#include <stdint.h>
+#include "ns3/application-container.h"
+#include "ns3/node-container.h"
+#include "ns3/object-factory.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/tcp-server.h"
+#include "ns3/tcp-client.h"
+#include "ns3/generic-app-helper.h"
+
+namespace ns3 {
+/**
+ * \ingroup tcpclientserver
+ * \brief Create a server application which waits for input TCP packets
+ *        and uses the information carried into their payload to compute
+ *        delay and to determine if some packets are lost.
+ */
+class TcpServerHelper : public GenericAppHelper
+{
+public:
+  /**
+   * Create TcpServerHelper which will make life easier for people trying
+   * to set up simulations with tcp-client-server application.
+   *
+   */
+  TcpServerHelper ();
+
+  /**
+   * Create TcpServerHelper which will make life easier for people trying
+   * to set up simulations with tcp-client-server application.
+   *
+   * \param port The port the server will wait on for incoming packets
+   */
+  TcpServerHelper (uint16_t port);
+
+  /**
+   * Create one TCP server application on each of the Nodes in the
+   * NodeContainer.
+   *
+   * \param c The nodes on which to create the Applications.  The nodes
+   *          are specified by a NodeContainer.
+   * \returns The applications created, one Application per Node in the
+   *          NodeContainer.
+   */
+  ApplicationContainer Install (NodeContainer c);
+
+  /**
+   * \brief Return the last created server.
+   *
+   * This function is mainly used for testing.
+   *
+   * \returns a Ptr to the last created server application
+   */
+  Ptr<TcpServer> GetServer (void);
+
+private:
+  Ptr<TcpServer> m_server; //!< The last created server application
+};
+
+/**
+ * \ingroup tcpclientserver
+ * \brief Create a client application which sends TCP packets carrying
+ *  a 32bit sequence number and a 64 bit time stamp.
+ *
+ */
+class TcpClientHelper : public GenericAppHelper
+{
+
+public:
+  /**
+   * Create TcpClientHelper which will make life easier for people trying
+   * to set up simulations with tcp-client-server.
+   *
+   */
+  TcpClientHelper ();
+
+  /**
+   *  Create TcpClientHelper which will make life easier for people trying
+   * to set up simulations with tcp-client-server. Use this variant with
+   * addresses that do not include a port value (e.g., Ipv4Address and
+   * Ipv6Address).
+   *
+   * \param ip The IP address of the remote TCP server
+   * \param port The port number of the remote TCP server
+   */
+
+  TcpClientHelper (Address ip, uint16_t port);
+  /**
+   *  Create TcpClientHelper which will make life easier for people trying
+   * to set up simulations with tcp-client-server. Use this variant with
+   * addresses that do include a port value (e.g., InetSocketAddress and
+   * Inet6SocketAddress).
+   *
+   * \param addr The address of the remote TCP server
+   */
+
+  TcpClientHelper (Address addr);
+
+  /**
+     * \param c the nodes
+     *
+     * Create one TCP client application on each of the input nodes
+     *
+     * \returns the applications created, one application per input node.
+     */
+  ApplicationContainer Install (NodeContainer c);
+
+private:
+};
+
+} // namespace ns3
+
+#endif /* TCP_CLIENT_SERVER_H */
diff --git a/src/applications/helper/tcp-echo-helper.cc b/src/applications/helper/tcp-echo-helper.cc
new file mode 100644
index 000000000..b0ff14519
--- /dev/null
+++ b/src/applications/helper/tcp-echo-helper.cc
@@ -0,0 +1,138 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Davide Marcato <davide.marcato.4@studenti.unipd.it>
+ *          Stefano Ravazzolo <stefano.ravazzolo@studenti.unipd.it>
+ *          Alvise De Biasio <alvise.debiasio@studenti.unipd.it>
+ */
+
+#include "tcp-echo-helper.h"
+#include "ns3/tcp-echo-server.h"
+#include "ns3/tcp-echo-client.h"
+#include "ns3/uinteger.h"
+#include "ns3/names.h"
+#include "ns3/log.h"
+
+NS_LOG_COMPONENT_DEFINE ("TcpEchoHelper");
+
+namespace ns3 {
+
+TcpEchoServerHelper::TcpEchoServerHelper (uint16_t port)
+{
+  m_factory.SetTypeId (TcpEchoServer::GetTypeId ());
+  SetAttribute ("Port", UintegerValue (port));
+}
+
+ApplicationContainer
+TcpEchoServerHelper::Install (Ptr<Node> node)
+{
+  return ApplicationContainer (InstallPriv (node));
+}
+
+ApplicationContainer
+TcpEchoServerHelper::Install (std::string nodeName)
+{
+  Ptr<Node> node = Names::Find<Node> (nodeName);
+  return ApplicationContainer (InstallPriv (node));
+}
+
+ApplicationContainer
+TcpEchoServerHelper::Install (NodeContainer c)
+{
+  ApplicationContainer apps;
+  for (NodeContainer::Iterator i = c.Begin (); i != c.End (); ++i)
+    {
+      apps.Add (InstallPriv (*i));
+    }
+
+  return apps;
+}
+
+Ptr<Application>
+TcpEchoServerHelper::InstallPriv (Ptr<Node> node)
+{
+
+  Ptr<Application> app = m_factory.Create<TcpEchoServer> ();
+  node->AddApplication (app);
+  NS_LOG_INFO ("Installing app " << app << " in node " << node);
+  return app;
+}
+
+TcpEchoClientHelper::TcpEchoClientHelper (Address address, uint16_t port)
+{
+  m_factory.SetTypeId (TcpEchoClient::GetTypeId ());
+  SetAttribute ("RemoteAddress", AddressValue (address));
+  SetAttribute ("RemotePort", UintegerValue (port));
+}
+
+TcpEchoClientHelper::TcpEchoClientHelper (Address address)
+{
+  m_factory.SetTypeId (TcpEchoClient::GetTypeId ());
+  SetAttribute ("RemoteAddress", AddressValue (address));
+}
+
+void
+TcpEchoClientHelper::SetFill (Ptr<Application> app, std::string fill)
+{
+  app->GetObject<TcpEchoClient>()->SetFill (fill);
+}
+
+void
+TcpEchoClientHelper::SetFill (Ptr<Application> app, uint8_t fill, uint32_t dataLength)
+{
+  app->GetObject<TcpEchoClient>()->SetFill (fill, dataLength);
+}
+
+void
+TcpEchoClientHelper::SetFill (Ptr<Application> app, uint8_t *fill, uint32_t fillLength, uint32_t dataLength)
+{
+  app->GetObject<TcpEchoClient>()->SetFill (fill, fillLength, dataLength);
+}
+
+ApplicationContainer
+TcpEchoClientHelper::Install (Ptr<Node> node)
+{
+  return ApplicationContainer (InstallPriv (node));
+}
+
+ApplicationContainer
+TcpEchoClientHelper::Install (std::string nodeName)
+{
+  Ptr<Node> node = Names::Find<Node> (nodeName);
+  return ApplicationContainer (InstallPriv (node));
+}
+
+ApplicationContainer
+TcpEchoClientHelper::Install (NodeContainer c)
+{
+  ApplicationContainer apps;
+  for (NodeContainer::Iterator i = c.Begin (); i != c.End (); ++i)
+    {
+      apps.Add (InstallPriv (*i));
+    }
+
+  return apps;
+}
+
+Ptr<Application>
+TcpEchoClientHelper::InstallPriv (Ptr<Node> node)
+{
+  Ptr<Application> app = m_factory.Create<TcpEchoClient> ();
+  node->AddApplication (app);
+
+  return app;
+}
+
+} // namespace ns3
diff --git a/src/applications/helper/tcp-echo-helper.h b/src/applications/helper/tcp-echo-helper.h
new file mode 100644
index 000000000..beba064d8
--- /dev/null
+++ b/src/applications/helper/tcp-echo-helper.h
@@ -0,0 +1,215 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Davide Marcato <davide.marcato.4@studenti.unipd.it>
+ *          Stefano Ravazzolo <stefano.ravazzolo@studenti.unipd.it>
+ *          Alvise De Biasio <alvise.debiasio@studenti.unipd.it>
+ */
+
+#ifndef TCP_ECHO_HELPER_H
+#define TCP_ECHO_HELPER_H
+
+#include <stdint.h>
+#include "ns3/application-container.h"
+#include "ns3/node-container.h"
+#include "ns3/object-factory.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/ipv6-address.h"
+#include "ns3/generic-app-helper.h"
+
+namespace ns3 {
+
+/**
+ * \ingroup tcpecho
+ * \brief Create a server application which waits for input TCP packets
+ *        and sends them back to the original sender.
+ */
+class TcpEchoServerHelper : public GenericAppHelper
+{
+public:
+  /**
+   * Create TcpEchoServerHelper which will make life easier for people trying
+   * to set up simulations with echos.
+   *
+   * \param port The port the server will wait on for incoming packets
+   */
+  TcpEchoServerHelper (uint16_t port);
+
+  /**
+   * Create a TcpEchoServerApplication on the specified Node.
+   *
+   * \param node The node on which to create the Application.  The node is
+   *             specified by a Ptr<Node>.
+   *
+   * \returns An ApplicationContainer holding the Application created,
+   */
+  ApplicationContainer Install (Ptr<Node> node);
+
+  /**
+   * Create a TcpEchoServerApplication on specified node
+   *
+   * \param nodeName The node on which to create the application.  The node
+   *                 is specified by a node name previously registered with
+   *                 the Object Name Service.
+   *
+   * \returns An ApplicationContainer holding the Application created.
+   */
+  ApplicationContainer Install (std::string nodeName);
+
+  /**
+   * \param c The nodes on which to create the Applications.  The nodes
+   *          are specified by a NodeContainer.
+   *
+   * Create one tcp echo server application on each of the Nodes in the
+   * NodeContainer.
+   *
+   * \returns The applications created, one Application per Node in the
+   *          NodeContainer.
+   */
+  ApplicationContainer Install (NodeContainer c);
+
+private:
+  /**
+   * Install an ns3::TcpEchoServer on the node configured with all the
+   * attributes set with SetAttribute.
+   *
+   * \param node The node on which an TcpEchoServer will be installed.
+   * \returns Ptr to the application installed.
+   */
+  Ptr<Application> InstallPriv (Ptr<Node> node);
+};
+
+/**
+ * \ingroup tcpecho
+ * \brief Create an application which sends a TCP packet and waits for an echo of this packet
+ */
+class TcpEchoClientHelper : public GenericAppHelper
+{
+public:
+  /**
+   * Create TcpEchoClientHelper which will make life easier for people trying
+   * to set up simulations with echos. Use this variant with addresses that do
+   * not include a port value (e.g., Ipv4Address and Ipv6Address).
+   *
+   * \param ip The IP address of the remote tcp echo server
+   * \param port The port number of the remote tcp echo server
+   */
+  TcpEchoClientHelper (Address ip, uint16_t port);
+  /**
+   * Create TcpEchoClientHelper which will make life easier for people trying
+   * to set up simulations with echos. Use this variant with addresses that do
+   * include a port value (e.g., InetSocketAddress and Inet6SocketAddress).
+   *
+   * \param addr The address of the remote tcp echo server
+   */
+  TcpEchoClientHelper (Address addr);
+
+  /**
+   * Given a pointer to a TcpEchoClient application, set the data fill of the
+   * packet (what is sent as data to the server) to the contents of the fill
+   * string (including the trailing zero terminator).
+   *
+   * \warning The size of resulting echo packets will be automatically adjusted
+   * to reflect the size of the fill string -- this means that the PacketSize
+   * attribute may be changed as a result of this call.
+   *
+   * \param app Smart pointer to the application (real type must be TcpEchoClient).
+   * \param fill The string to use as the actual echo data bytes.
+   */
+  void SetFill (Ptr<Application> app, std::string fill);
+
+  /**
+   * Given a pointer to a TcpEchoClient application, set the data fill of the
+   * packet (what is sent as data to the server) to the contents of the fill
+   * byte.
+   *
+   * The fill byte will be used to initialize the contents of the data packet.
+   *
+   * \warning The size of resulting echo packets will be automatically adjusted
+   * to reflect the dataLength parameter -- this means that the PacketSize
+   * attribute may be changed as a result of this call.
+   *
+   * \param app Smart pointer to the application (real type must be TcpEchoClient).
+   * \param fill The byte to be repeated in constructing the packet data..
+   * \param dataLength The desired length of the resulting echo packet data.
+   */
+  void SetFill (Ptr<Application> app, uint8_t fill, uint32_t dataLength);
+
+  /**
+   * Given a pointer to a TcpEchoClient application, set the data fill of the
+   * packet (what is sent as data to the server) to the contents of the fill
+   * buffer, repeated as many times as is required.
+   *
+   * Initializing the fill to the contents of a single buffer is accomplished
+   * by providing a complete buffer with fillLength set to your desired
+   * dataLength
+   *
+   * \warning The size of resulting echo packets will be automatically adjusted
+   * to reflect the dataLength parameter -- this means that the PacketSize
+   * attribute of the Application may be changed as a result of this call.
+   *
+   * \param app Smart pointer to the application (real type must be TcpEchoClient).
+   * \param fill The fill pattern to use when constructing packets.
+   * \param fillLength The number of bytes in the provided fill pattern.
+   * \param dataLength The desired length of the final echo data.
+   */
+  void SetFill (Ptr<Application> app, uint8_t *fill, uint32_t fillLength, uint32_t dataLength);
+
+  /**
+   * Create a tcp echo client application on the specified node.  The Node
+   * is provided as a Ptr<Node>.
+   *
+   * \param node The Ptr<Node> on which to create the TcpEchoClientApplication.
+   *
+   * \returns An ApplicationContainer that holds a Ptr<Application> to the
+   *          application created
+   */
+  ApplicationContainer Install (Ptr<Node> node);
+
+  /**
+   * Create a tcp echo client application on the specified node.  The Node
+   * is provided as a string name of a Node that has been previously
+   * associated using the Object Name Service.
+   *
+   * \param nodeName The name of the node on which to create the TcpEchoClientApplication
+   *
+   * \returns An ApplicationContainer that holds a Ptr<Application> to the
+   *          application created
+   */
+  ApplicationContainer Install (std::string nodeName);
+
+  /**
+   * \param c the nodes
+   *
+   * Create one tcp echo client application on each of the input nodes
+   *
+   * \returns the applications created, one application per input node.
+   */
+  ApplicationContainer Install (NodeContainer c);
+
+private:
+  /**
+   * Install an ns3::TcpEchoClient on the node configured with all the
+   * attributes set with SetAttribute.
+   *
+   * \param node The node on which an TcpEchoClient will be installed.
+   * \returns Ptr to the application installed.
+   */
+  Ptr<Application> InstallPriv (Ptr<Node> node);
+};
+
+} // namespace ns3
+
+#endif /* TCP_ECHO_HELPER_H */
diff --git a/src/applications/helper/tcp-trigger-client-server-helper.cc b/src/applications/helper/tcp-trigger-client-server-helper.cc
new file mode 100644
index 000000000..3e8b3fb62
--- /dev/null
+++ b/src/applications/helper/tcp-trigger-client-server-helper.cc
@@ -0,0 +1,91 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2008 INRIA
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Mohamed Amine Ismail <amine.ismail@sophia.inria.fr>
+ */
+#include "tcp-trigger-client-server-helper.h"
+#include "ns3/uinteger.h"
+#include "ns3/string.h"
+
+namespace ns3 {
+
+TcpTriggerServerHelper::TcpTriggerServerHelper ()
+{
+  m_factory.SetTypeId (TcpTriggerServer::GetTypeId ());
+}
+
+TcpTriggerServerHelper::TcpTriggerServerHelper (uint16_t port)
+{
+  m_factory.SetTypeId (TcpTriggerServer::GetTypeId ());
+  SetAttribute ("Port", UintegerValue (port));
+}
+
+ApplicationContainer
+TcpTriggerServerHelper::Install (NodeContainer c)
+{
+  ApplicationContainer apps;
+  for (NodeContainer::Iterator i = c.Begin (); i != c.End (); ++i)
+    {
+      Ptr<Node> node = *i;
+
+      m_server = m_factory.Create<TcpTriggerServer> ();
+      node->AddApplication (m_server);
+      apps.Add (m_server);
+
+    }
+  return apps;
+}
+
+Ptr<TcpTriggerServer>
+TcpTriggerServerHelper::GetServer (void)
+{
+  return m_server;
+}
+
+TcpTriggerClientHelper::TcpTriggerClientHelper ()
+{
+  m_factory.SetTypeId (TcpTriggerClient::GetTypeId ());
+}
+
+TcpTriggerClientHelper::TcpTriggerClientHelper (Address address, uint16_t port)
+{
+  m_factory.SetTypeId (TcpTriggerClient::GetTypeId ());
+  SetAttribute ("RemoteAddress", AddressValue (address));
+  SetAttribute ("RemotePort", UintegerValue (port));
+}
+
+TcpTriggerClientHelper::TcpTriggerClientHelper (Address address)
+{
+  m_factory.SetTypeId (TcpTriggerClient::GetTypeId ());
+  SetAttribute ("RemoteAddress", AddressValue (address));
+}
+
+ApplicationContainer
+TcpTriggerClientHelper::Install (NodeContainer c)
+{
+  ApplicationContainer apps;
+  for (NodeContainer::Iterator i = c.Begin (); i != c.End (); ++i)
+    {
+      Ptr<Node> node = *i;
+      Ptr<TcpTriggerClient> client = m_factory.Create<TcpTriggerClient> ();
+      node->AddApplication (client);
+      apps.Add (client);
+    }
+  return apps;
+}
+
+} // namespace ns3
diff --git a/src/applications/helper/tcp-trigger-client-server-helper.h b/src/applications/helper/tcp-trigger-client-server-helper.h
new file mode 100644
index 000000000..573744e29
--- /dev/null
+++ b/src/applications/helper/tcp-trigger-client-server-helper.h
@@ -0,0 +1,134 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2008 INRIA
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Mohamed Amine Ismail <amine.ismail@sophia.inria.fr>
+ */
+#ifndef TCP_TRIGGER_CLIENT_SERVER_HELPER_H
+#define TCP_TRIGGER_CLIENT_SERVER_HELPER_H
+
+#include <stdint.h>
+#include "ns3/application-container.h"
+#include "ns3/node-container.h"
+#include "ns3/object-factory.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/tcp-trigger-server.h"
+#include "ns3/tcp-trigger-client.h"
+#include "ns3/generic-app-helper.h"
+
+namespace ns3 {
+/**
+ * \ingroup tcpclientserver
+ * \brief Create a server application which waits for input TCP packets
+ *        and uses the information carried into their payload to compute
+ *        delay and to determine if some packets are lost.
+ */
+class TcpTriggerServerHelper : public GenericAppHelper
+{
+public:
+  /**
+   * Create TcpTriggerServerHelper which will make life easier for people trying
+   * to set up simulations with tcp-client-server application.
+   *
+   */
+  TcpTriggerServerHelper ();
+
+  /**
+   * Create TcpTriggerServerHelper which will make life easier for people trying
+   * to set up simulations with tcp-client-server application.
+   *
+   * \param port The port the server will wait on for incoming packets
+   */
+  TcpTriggerServerHelper (uint16_t port);
+
+  /**
+   * Create one TCP trigger server application on each of the Nodes in the
+   * NodeContainer.
+   *
+   * \param c The nodes on which to create the Applications.  The nodes
+   *          are specified by a NodeContainer.
+   * \returns The applications created, one Application per Node in the
+   *          NodeContainer.
+   */
+  ApplicationContainer Install (NodeContainer c);
+
+  /**
+   * \brief Return the last created server.
+   *
+   * This function is mainly used for testing.
+   *
+   * \returns a Ptr to the last created server application
+   */
+  Ptr<TcpTriggerServer> GetServer (void);
+
+private:
+  Ptr<TcpTriggerServer> m_server; //!< The last created server application
+};
+
+/**
+ * \ingroup tcpclientserver
+ * \brief Create a client application which sends TCP packets carrying
+ *  a 32bit sequence number and a 64 bit time stamp.
+ *
+ */
+class TcpTriggerClientHelper : public GenericAppHelper
+{
+
+public:
+  /**
+   * Create TcpTriggerClientHelper which will make life easier for people trying
+   * to set up simulations with tcp-client-server.
+   *
+   */
+  TcpTriggerClientHelper ();
+
+  /**
+   *  Create TcpTriggerClientHelper which will make life easier for people trying
+   * to set up simulations with tcp-client-server. Use this variant with
+   * addresses that do not include a port value (e.g., Ipv4Address and
+   * Ipv6Address).
+   *
+   * \param ip The IP address of the remote TCP server
+   * \param port The port number of the remote TCP server
+   */
+
+  TcpTriggerClientHelper (Address ip, uint16_t port);
+  /**
+   *  Create TcpTriggerClientHelper which will make life easier for people trying
+   * to set up simulations with tcp-client-server. Use this variant with
+   * addresses that do include a port value (e.g., InetSocketAddress and
+   * Inet6SocketAddress).
+   *
+   * \param addr The address of the remote TCP server
+   */
+
+  TcpTriggerClientHelper (Address addr);
+
+  /**
+     * \param c the nodes
+     *
+     * Create one TCP trigger client application on each of the input nodes
+     *
+     * \returns the applications created, one application per input node.
+     */
+  ApplicationContainer Install (NodeContainer c);
+
+private:
+};
+
+} // namespace ns3
+
+#endif /* TCP_TRIGGER_CLIENT_SERVER_HELPER_H */
diff --git a/src/applications/model/application-stats.cc b/src/applications/model/application-stats.cc
new file mode 100644
index 000000000..e699c6418
--- /dev/null
+++ b/src/applications/model/application-stats.cc
@@ -0,0 +1,24 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+
+#include "application-stats.h"
+
+namespace ns3
+{
+uint32_t
+ApplicationStats::GetTotalReceived ()
+{
+  return m_totalReceived;
+}
+
+uint32_t
+ApplicationStats::GetTotalSentFail ()
+{
+  return m_totalSentFail;
+}
+
+uint32_t
+ApplicationStats::GetTotalSentSuccess ()
+{
+  return m_totalSentSuccess;
+}
+} // namespace ns3
diff --git a/src/applications/model/application-stats.h b/src/applications/model/application-stats.h
new file mode 100644
index 000000000..ca31b5246
--- /dev/null
+++ b/src/applications/model/application-stats.h
@@ -0,0 +1,29 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+
+#ifndef APPLICATION_STATS_H
+#define APPLICATION_STATS_H
+
+#include "ns3/application.h"
+
+namespace ns3
+{
+    
+class ApplicationStats
+{
+public:
+    uint32_t GetTotalReceived();
+    uint32_t GetTotalSentFail();
+    uint32_t GetTotalSentSuccess();
+
+protected:
+    uint32_t m_totalReceived = 0;
+    uint32_t m_totalSentFail = 0;
+    uint32_t m_totalSentSuccess = 0;
+};
+
+
+} // namespace ns3
+
+
+
+#endif // APPLICATION_STATS_H
\ No newline at end of file
diff --git a/src/applications/model/better-ping-client.cc b/src/applications/model/better-ping-client.cc
new file mode 100644
index 000000000..922b81b3e
--- /dev/null
+++ b/src/applications/model/better-ping-client.cc
@@ -0,0 +1,405 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright 2007 University of Washington
+ * 
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+#include "ns3/log.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/ipv6-address.h"
+#include "ns3/nstime.h"
+#include "ns3/inet-socket-address.h"
+#include "ns3/inet6-socket-address.h"
+#include "ns3/socket.h"
+#include "ns3/simulator.h"
+#include "ns3/socket-factory.h"
+#include "ns3/packet.h"
+#include "ns3/uinteger.h"
+#include "ns3/trace-source-accessor.h"
+#include "better-ping-client.h"
+
+namespace ns3 {
+
+// ------ BetterPingTag ------
+
+TypeId
+BetterPingTag::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::BetterPingTag")
+                          .SetParent<Tag> ()
+                          .SetGroupName ("Applications")
+                          .AddConstructor<BetterPingTag> ();
+  return tid;
+}
+TypeId
+BetterPingTag::GetInstanceTypeId (void) const
+{
+  return GetTypeId ();
+}
+uint32_t
+BetterPingTag::GetSerializedSize (void) const
+{
+  return 4 + 8;
+}
+void
+BetterPingTag::Serialize (TagBuffer buf) const
+{
+  buf.WriteU32 (m_seq);
+  buf.WriteU64 (m_ts);
+}
+void
+BetterPingTag::Deserialize (TagBuffer buf)
+{
+  m_seq = buf.ReadU32 ();
+  m_ts = buf.ReadU64 ();
+}
+void
+BetterPingTag::Print (std::ostream &os) const
+{
+  os << " Seq=" << m_seq;
+  os << " Ts=" << m_ts;
+}
+BetterPingTag::BetterPingTag () : Tag (), m_seq (0), m_ts (0)
+{
+}
+
+void
+BetterPingTag::SetSeq (uint32_t seq)
+{
+  m_seq = seq;
+}
+
+void
+BetterPingTag::SetTs (uint64_t ts)
+{
+  m_ts = ts;
+}
+
+uint32_t
+BetterPingTag::GetSeq (void) const
+{
+  return m_seq;
+}
+
+uint64_t
+BetterPingTag::GetTs (void) const
+{
+  return m_ts;
+}
+
+// ------ BetterPingClient ------
+
+NS_LOG_COMPONENT_DEFINE ("BetterPingClientApplication");
+
+NS_OBJECT_ENSURE_REGISTERED (BetterPingClient);
+
+TypeId
+BetterPingClient::GetTypeId (void)
+{
+  static TypeId tid =
+      TypeId ("ns3::BetterPingClient")
+          .SetParent<Application> ()
+          .SetGroupName ("Applications")
+          .AddConstructor<BetterPingClient> ()
+          .AddAttribute ("MaxPackets", "The maximum number of packets the application will send",
+                         UintegerValue (100), MakeUintegerAccessor (&BetterPingClient::m_count),
+                         MakeUintegerChecker<uint32_t> ())
+          .AddAttribute ("Interval", "The time to wait between packets", TimeValue (Seconds (1.0)),
+                         MakeTimeAccessor (&BetterPingClient::m_interval), MakeTimeChecker ())
+          .AddAttribute ("RemoteAddress", "The destination Address of the outbound packets",
+                         AddressValue (), MakeAddressAccessor (&BetterPingClient::m_peerAddress),
+                         MakeAddressChecker ())
+          .AddAttribute ("RemotePort", "The destination port of the outbound packets",
+                         UintegerValue (0), MakeUintegerAccessor (&BetterPingClient::m_peerPort),
+                         MakeUintegerChecker<uint16_t> ())
+          .AddTraceSource ("Tx", "A new packet is created and is sent",
+                           MakeTraceSourceAccessor (&BetterPingClient::m_txTrace),
+                           "ns3::Packet::TracedCallback")
+          .AddTraceSource ("Rx", "A packet has been received",
+                           MakeTraceSourceAccessor (&BetterPingClient::m_rxTrace),
+                           "ns3::Packet::TracedCallback")
+          .AddTraceSource ("TxWithAddresses", "A new packet is created and is sent",
+                           MakeTraceSourceAccessor (&BetterPingClient::m_txTraceWithAddresses),
+                           "ns3::Packet::TwoAddressTracedCallback")
+          .AddTraceSource ("RxWithAddresses", "A packet has been received",
+                           MakeTraceSourceAccessor (&BetterPingClient::m_rxTraceWithAddresses),
+                           "ns3::Packet::TwoAddressTracedCallback")
+          .AddTraceSource ("LossMmnt", "A loss measurement has been completed.",
+                           MakeTraceSourceAccessor (&BetterPingClient::m_lossTrace),
+                           "ns3::BetterPingClient::TotalLossWithPktCntTrace")
+          .AddTraceSource ("DelayMmnt", "A delay measurement has been completed.",
+                           MakeTraceSourceAccessor (&BetterPingClient::m_delayTrace),
+                           "ns3::BetterPingClient::DelayTrace");
+
+  return tid;
+}
+
+BetterPingClient::BetterPingClient ()
+{
+  NS_LOG_FUNCTION (this);
+  m_sent = 0;
+  m_socket = 0;
+  m_sendEvent = EventId ();
+}
+
+BetterPingClient::~BetterPingClient ()
+{
+  NS_LOG_FUNCTION (this);
+  m_socket = 0;
+}
+
+void
+BetterPingClient::SetRemote (Address ip, uint16_t port)
+{
+  NS_LOG_FUNCTION (this << ip << port);
+  m_peerAddress = ip;
+  m_peerPort = port;
+}
+
+void
+BetterPingClient::SetRemote (Address addr)
+{
+  NS_LOG_FUNCTION (this << addr);
+  m_peerAddress = addr;
+}
+
+void
+BetterPingClient::DoDispose (void)
+{
+  NS_LOG_FUNCTION (this);
+  Application::DoDispose ();
+}
+
+void
+BetterPingClient::StartApplication (void)
+{
+  NS_LOG_FUNCTION (this);
+
+  if (m_socket == 0)
+    {
+      TypeId tid = TypeId::LookupByName ("ns3::UdpSocketFactory");
+      m_socket = Socket::CreateSocket (GetNode (), tid);
+      if (Ipv4Address::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind () == -1)
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (
+              InetSocketAddress (Ipv4Address::ConvertFrom (m_peerAddress), m_peerPort));
+        }
+      else if (Ipv6Address::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind6 () == -1)
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (
+              Inet6SocketAddress (Ipv6Address::ConvertFrom (m_peerAddress), m_peerPort));
+        }
+      else if (InetSocketAddress::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind () == -1)
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (m_peerAddress);
+        }
+      else if (Inet6SocketAddress::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind6 () == -1)
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (m_peerAddress);
+        }
+      else
+        {
+          NS_ASSERT_MSG (false, "Incompatible address type: " << m_peerAddress);
+        }
+    }
+
+  m_socket->SetRecvCallback (MakeCallback (&BetterPingClient::HandleRead, this));
+  ScheduleTransmit (Seconds (0.));
+}
+
+void
+BetterPingClient::StopApplication ()
+{
+  NS_LOG_FUNCTION (this);
+
+  if (m_socket != 0)
+    {
+      m_socket->Close ();
+      m_socket->SetRecvCallback (MakeNullCallback<void, Ptr<Socket>> ());
+      m_socket = 0;
+    }
+
+  Simulator::Cancel (m_sendEvent);
+}
+
+void
+BetterPingClient::ScheduleTransmit (Time dt)
+{
+  NS_LOG_FUNCTION (this << dt);
+  m_sendEvent = Simulator::Schedule (dt, &BetterPingClient::Send, this);
+}
+
+void
+BetterPingClient::Send (void)
+{
+  NS_LOG_FUNCTION (this);
+
+  NS_ASSERT (m_sendEvent.IsExpired ());
+
+  BetterPingTag bpTag;
+  bpTag.SetSeq (m_nextSeq);
+  m_nextSeq++;
+  bpTag.SetTs (Simulator::Now ().GetNanoSeconds ());
+
+  Ptr<Packet> p;
+  p = Create<Packet> (bpTag.GetSerializedSize ());
+
+  p->AddPacketTag (bpTag);
+
+  Address localAddress;
+  m_socket->GetSockName (localAddress);
+  // call to the trace sinks before the packet is actually sent,
+  // so that tags added to the packet can be sent as well
+  m_txTrace (p);
+  if (Ipv4Address::IsMatchingType (m_peerAddress))
+    {
+      m_txTraceWithAddresses (
+          p, localAddress,
+          InetSocketAddress (Ipv4Address::ConvertFrom (m_peerAddress), m_peerPort));
+    }
+  else if (Ipv6Address::IsMatchingType (m_peerAddress))
+    {
+      m_txTraceWithAddresses (
+          p, localAddress,
+          Inet6SocketAddress (Ipv6Address::ConvertFrom (m_peerAddress), m_peerPort));
+    }
+  m_socket->Send (p);
+  ++m_sent;
+
+  if (Ipv4Address::IsMatchingType (m_peerAddress))
+    {
+      NS_LOG_INFO ("At time " << Simulator::Now ().As (Time::S) << " client sent "
+                              << bpTag.GetSerializedSize () << " bytes to "
+                              << Ipv4Address::ConvertFrom (m_peerAddress) << " port "
+                              << m_peerPort);
+    }
+  else if (Ipv6Address::IsMatchingType (m_peerAddress))
+    {
+      NS_LOG_INFO ("At time " << Simulator::Now ().As (Time::S) << " client sent "
+                              << bpTag.GetSerializedSize () << " bytes to "
+                              << Ipv6Address::ConvertFrom (m_peerAddress) << " port "
+                              << m_peerPort);
+    }
+  else if (InetSocketAddress::IsMatchingType (m_peerAddress))
+    {
+      NS_LOG_INFO ("At time " << Simulator::Now ().As (Time::S) << " client sent "
+                              << bpTag.GetSerializedSize () << " bytes to "
+                              << InetSocketAddress::ConvertFrom (m_peerAddress).GetIpv4 ()
+                              << " port "
+                              << InetSocketAddress::ConvertFrom (m_peerAddress).GetPort ());
+    }
+  else if (Inet6SocketAddress::IsMatchingType (m_peerAddress))
+    {
+      NS_LOG_INFO ("At time " << Simulator::Now ().As (Time::S) << " client sent "
+                              << bpTag.GetSerializedSize () << " bytes to "
+                              << Inet6SocketAddress::ConvertFrom (m_peerAddress).GetIpv6 ()
+                              << " port "
+                              << Inet6SocketAddress::ConvertFrom (m_peerAddress).GetPort ());
+    }
+
+  if (m_sent < m_count)
+    {
+      ScheduleTransmit (m_interval);
+    }
+}
+
+void
+BetterPingClient::HandleRead (Ptr<Socket> socket)
+{
+  NS_LOG_FUNCTION (this << socket);
+  Ptr<Packet> packet;
+  Address from;
+  Address localAddress;
+  while ((packet = socket->RecvFrom (from)))
+    {
+      if (InetSocketAddress::IsMatchingType (from))
+        {
+          NS_LOG_INFO ("At time " << Simulator::Now ().As (Time::S) << " client received "
+                                  << packet->GetSize () << " bytes from "
+                                  << InetSocketAddress::ConvertFrom (from).GetIpv4 () << " port "
+                                  << InetSocketAddress::ConvertFrom (from).GetPort ());
+        }
+      else if (Inet6SocketAddress::IsMatchingType (from))
+        {
+          NS_LOG_INFO ("At time " << Simulator::Now ().As (Time::S) << " client received "
+                                  << packet->GetSize () << " bytes from "
+                                  << Inet6SocketAddress::ConvertFrom (from).GetIpv6 () << " port "
+                                  << Inet6SocketAddress::ConvertFrom (from).GetPort ());
+        }
+      socket->GetSockName (localAddress);
+      m_rxTrace (packet);
+      m_rxTraceWithAddresses (packet, from, localAddress);
+
+      BetterPingTag bpTag;
+      if (!packet->RemovePacketTag (bpTag))
+        {
+          NS_LOG_WARN ("Packet received with no BetterPing tag");
+          continue;
+        }
+      m_rcvPktCount++;
+
+      ProcessBetterPingTag (bpTag);
+    }
+}
+
+void
+BetterPingClient::ProcessBetterPingTag (const BetterPingTag &tag)
+{
+  if (tag.GetSeq () < m_highestSeq)
+    {
+      //Decrease packet loss counter to correct for faulty loss detection caused by out-of-order packet
+      if (m_totalRTLoss > 0)
+        m_totalRTLoss--;
+      else
+        NS_LOG_ERROR ("Negative totalEtELoss");
+      //Use the receive pkt count to maintain consistency with server loss trace
+      m_lossTrace (m_totalRTLoss, m_rcvPktCount);
+    }
+  else if (tag.GetSeq () == m_highestSeq)
+    NS_LOG_WARN ("Duplicate betterPing seq detected");
+  else
+    {
+
+      if (tag.GetSeq () > m_highestSeq + 1)
+        {
+          //Increase packet loss counter by hole in seq space
+          m_totalRTLoss += (tag.GetSeq () - m_highestSeq - 1);
+          //Use the receive pkt count to maintain consistency with server loss trace
+          m_lossTrace (m_totalRTLoss, m_rcvPktCount);
+        }
+      //Update highest seq
+      m_highestSeq = tag.GetSeq ();
+    }
+
+  m_delayTrace (
+      (Simulator::Now () - Time::FromInteger (tag.GetTs (), Time::Unit::NS)).GetMilliSeconds ());
+}
+
+} // Namespace ns3
diff --git a/src/applications/model/better-ping-client.h b/src/applications/model/better-ping-client.h
new file mode 100644
index 000000000..b9711443b
--- /dev/null
+++ b/src/applications/model/better-ping-client.h
@@ -0,0 +1,159 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright 2007 University of Washington
+ * 
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#ifndef BETTER_PING_CLIENT_H
+#define BETTER_PING_CLIENT_H
+
+#include "ns3/application.h"
+#include "ns3/event-id.h"
+#include "ns3/ptr.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/traced-callback.h"
+
+namespace ns3 {
+
+class Socket;
+class Packet;
+
+class BetterPingTag : public Tag
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+  virtual TypeId GetInstanceTypeId (void) const;
+  virtual uint32_t GetSerializedSize (void) const;
+  virtual void Serialize (TagBuffer buf) const;
+  virtual void Deserialize (TagBuffer buf);
+  virtual void Print (std::ostream &os) const;
+  BetterPingTag ();
+
+  void SetSeq (uint32_t seq);
+
+  void SetTs (uint64_t ts);
+
+  uint32_t GetSeq (void) const;
+
+  uint64_t GetTs (void) const;
+
+private:
+  uint32_t m_seq; //!< sequence number
+  uint64_t m_ts; //!< timestamp
+};
+
+/**
+ * \ingroup udpecho
+ * \brief A Udp Echo client
+ *
+ * Every packet sent should be returned by the server and received here.
+ */
+class BetterPingClient : public Application
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+
+  BetterPingClient ();
+
+  virtual ~BetterPingClient ();
+
+  /**
+   * \brief set the remote address and port
+   * \param ip remote IP address
+   * \param port remote port
+   */
+  void SetRemote (Address ip, uint16_t port);
+  /**
+   * \brief set the remote address
+   * \param addr remote address
+   */
+  void SetRemote (Address addr);
+
+protected:
+  virtual void DoDispose (void);
+
+private:
+  virtual void StartApplication (void);
+  virtual void StopApplication (void);
+
+  /**
+   * \brief Schedule the next packet transmission
+   * \param dt time interval between packets.
+   */
+  void ScheduleTransmit (Time dt);
+  /**
+   * \brief Send a packet
+   */
+  void Send (void);
+
+  /**
+   * \brief Handle a packet reception.
+   *
+   * This function is called by lower layers.
+   *
+   * \param socket the socket the packet was received to.
+   */
+  void HandleRead (Ptr<Socket> socket);
+
+  void ProcessBetterPingTag (const BetterPingTag &tag);
+
+  uint32_t m_count; //!< Maximum number of packets the application will send
+  Time m_interval; //!< Packet inter-send time
+
+  uint32_t m_sent; //!< Counter for sent packets
+  Ptr<Socket> m_socket; //!< Socket
+  Address m_peerAddress; //!< Remote peer address
+  uint16_t m_peerPort; //!< Remote peer port
+  EventId m_sendEvent; //!< Event to send the next packet
+
+  /// Callbacks for tracing the packet Tx events
+  TracedCallback<Ptr<const Packet>> m_txTrace;
+
+  /// Callbacks for tracing the packet Rx events
+  TracedCallback<Ptr<const Packet>> m_rxTrace;
+
+  /// Callbacks for tracing the packet Tx events, includes source and destination addresses
+  TracedCallback<Ptr<const Packet>, const Address &, const Address &> m_txTraceWithAddresses;
+
+  /// Callbacks for tracing the packet Rx events, includes source and destination addresses
+  TracedCallback<Ptr<const Packet>, const Address &, const Address &> m_rxTraceWithAddresses;
+
+  /// Callbacks for tracing loss measurements
+  typedef void (*TotalLossWithPktCntTrace) (uint32_t totalRtLoss, uint32_t pktCount);
+  TracedCallback<uint32_t, uint32_t> m_lossTrace;
+
+  /// Callbacks for tracing delay measurements
+  typedef void (*DelayTrace) (uint32_t rtDelay);
+  TracedCallback<uint32_t> m_delayTrace;
+
+  uint32_t m_nextSeq = 1; // Start at 1 because the server's 'highestSeq' is initialized to 0
+
+  /// Measurement variables
+  uint32_t m_totalRTLoss = 0;
+  uint32_t m_rcvPktCount = 0;
+  uint32_t m_highestSeq = 0;
+};
+
+} // namespace ns3
+
+#endif /* BETTER_PING_CLIENT_H */
diff --git a/src/applications/model/better-ping-server.cc b/src/applications/model/better-ping-server.cc
new file mode 100644
index 000000000..822205005
--- /dev/null
+++ b/src/applications/model/better-ping-server.cc
@@ -0,0 +1,242 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright 2007 University of Washington
+ * 
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#include "ns3/log.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/ipv6-address.h"
+#include "ns3/address-utils.h"
+#include "ns3/nstime.h"
+#include "ns3/inet-socket-address.h"
+#include "ns3/inet6-socket-address.h"
+#include "ns3/socket.h"
+#include "ns3/udp-socket.h"
+#include "ns3/simulator.h"
+#include "ns3/socket-factory.h"
+#include "ns3/packet.h"
+#include "ns3/uinteger.h"
+
+#include "better-ping-server.h"
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("BetterPingServerApplication");
+
+NS_OBJECT_ENSURE_REGISTERED (BetterPingServer);
+
+TypeId
+BetterPingServer::GetTypeId (void)
+{
+  static TypeId tid =
+      TypeId ("ns3::BetterPingServer")
+          .SetParent<Application> ()
+          .SetGroupName ("Applications")
+          .AddConstructor<BetterPingServer> ()
+          .AddAttribute ("Port", "Port on which we listen for incoming packets.", UintegerValue (9),
+                         MakeUintegerAccessor (&BetterPingServer::m_port),
+                         MakeUintegerChecker<uint16_t> ())
+          .AddTraceSource ("Rx", "A packet has been received",
+                           MakeTraceSourceAccessor (&BetterPingServer::m_rxTrace),
+                           "ns3::Packet::TracedCallback")
+          .AddTraceSource ("RxWithAddresses", "A packet has been received",
+                           MakeTraceSourceAccessor (&BetterPingServer::m_rxTraceWithAddresses),
+                           "ns3::Packet::TwoAddressTracedCallback")
+          .AddTraceSource ("LossMmnt", "A loss measurement has been completed.",
+                           MakeTraceSourceAccessor (&BetterPingServer::m_lossTrace),
+                           "ns3::BetterPingServer::TotalLossWithPktCntTrace")
+          .AddTraceSource ("DelayMmnt", "A delay measurement has been completed.",
+                           MakeTraceSourceAccessor (&BetterPingServer::m_delayTrace),
+                           "ns3::BetterPingServer::DelayTrace");
+
+  return tid;
+}
+
+BetterPingServer::BetterPingServer ()
+{
+  NS_LOG_FUNCTION (this);
+}
+
+BetterPingServer::~BetterPingServer ()
+{
+  NS_LOG_FUNCTION (this);
+  m_socket = 0;
+  m_socket6 = 0;
+}
+
+void
+BetterPingServer::DoDispose (void)
+{
+  NS_LOG_FUNCTION (this);
+  Application::DoDispose ();
+}
+
+void
+BetterPingServer::StartApplication (void)
+{
+  NS_LOG_FUNCTION (this);
+
+  if (m_socket == 0)
+    {
+      TypeId tid = TypeId::LookupByName ("ns3::UdpSocketFactory");
+      m_socket = Socket::CreateSocket (GetNode (), tid);
+      InetSocketAddress local = InetSocketAddress (Ipv4Address::GetAny (), m_port);
+      if (m_socket->Bind (local) == -1)
+        {
+          NS_FATAL_ERROR ("Failed to bind socket");
+        }
+    }
+
+  if (m_socket6 == 0)
+    {
+      TypeId tid = TypeId::LookupByName ("ns3::UdpSocketFactory");
+      m_socket6 = Socket::CreateSocket (GetNode (), tid);
+      Inet6SocketAddress local6 = Inet6SocketAddress (Ipv6Address::GetAny (), m_port);
+      if (m_socket6->Bind (local6) == -1)
+        {
+          NS_FATAL_ERROR ("Failed to bind socket");
+        }
+      if (addressUtils::IsMulticast (local6))
+        {
+          Ptr<UdpSocket> udpSocket = DynamicCast<UdpSocket> (m_socket6);
+          if (udpSocket)
+            {
+              // equivalent to setsockopt (MCAST_JOIN_GROUP)
+              udpSocket->MulticastJoinGroup (0, local6);
+            }
+          else
+            {
+              NS_FATAL_ERROR ("Error: Failed to join multicast group");
+            }
+        }
+    }
+
+  m_socket->SetRecvCallback (MakeCallback (&BetterPingServer::HandleRead, this));
+  m_socket6->SetRecvCallback (MakeCallback (&BetterPingServer::HandleRead, this));
+}
+
+void
+BetterPingServer::StopApplication ()
+{
+  NS_LOG_FUNCTION (this);
+
+  if (m_socket != 0)
+    {
+      m_socket->Close ();
+      m_socket->SetRecvCallback (MakeNullCallback<void, Ptr<Socket>> ());
+    }
+  if (m_socket6 != 0)
+    {
+      m_socket6->Close ();
+      m_socket6->SetRecvCallback (MakeNullCallback<void, Ptr<Socket>> ());
+    }
+}
+
+void
+BetterPingServer::HandleRead (Ptr<Socket> socket)
+{
+  NS_LOG_FUNCTION (this << socket);
+
+  Ptr<Packet> packet;
+  Address from;
+  Address localAddress;
+  while ((packet = socket->RecvFrom (from)))
+    {
+      socket->GetSockName (localAddress);
+      m_rxTrace (packet);
+      m_rxTraceWithAddresses (packet, from, localAddress);
+      if (InetSocketAddress::IsMatchingType (from))
+        {
+          NS_LOG_INFO ("At time " << Simulator::Now ().As (Time::S) << " server received "
+                                  << packet->GetSize () << " bytes from "
+                                  << InetSocketAddress::ConvertFrom (from).GetIpv4 () << " port "
+                                  << InetSocketAddress::ConvertFrom (from).GetPort ());
+        }
+      else if (Inet6SocketAddress::IsMatchingType (from))
+        {
+          NS_LOG_INFO ("At time " << Simulator::Now ().As (Time::S) << " server received "
+                                  << packet->GetSize () << " bytes from "
+                                  << Inet6SocketAddress::ConvertFrom (from).GetIpv6 () << " port "
+                                  << Inet6SocketAddress::ConvertFrom (from).GetPort ());
+        }
+
+      BetterPingTag bpTag;
+      if (!packet->RemovePacketTag (bpTag))
+        {
+          NS_LOG_WARN ("Packet received with no BetterPing tag");
+          continue;
+        }
+      m_pktCount++;
+
+      ProcessBetterPingTag (bpTag);
+
+      packet->RemoveAllPacketTags ();
+      packet->RemoveAllByteTags ();
+
+      packet->AddPacketTag (bpTag);
+
+      NS_LOG_LOGIC ("Echoing packet");
+      socket->SendTo (packet, 0, from);
+
+      if (InetSocketAddress::IsMatchingType (from))
+        {
+          NS_LOG_INFO ("At time " << Simulator::Now ().As (Time::S) << " server sent "
+                                  << packet->GetSize () << " bytes to "
+                                  << InetSocketAddress::ConvertFrom (from).GetIpv4 () << " port "
+                                  << InetSocketAddress::ConvertFrom (from).GetPort ());
+        }
+      else if (Inet6SocketAddress::IsMatchingType (from))
+        {
+          NS_LOG_INFO ("At time " << Simulator::Now ().As (Time::S) << " server sent "
+                                  << packet->GetSize () << " bytes to "
+                                  << Inet6SocketAddress::ConvertFrom (from).GetIpv6 () << " port "
+                                  << Inet6SocketAddress::ConvertFrom (from).GetPort ());
+        }
+    }
+}
+
+void
+BetterPingServer::ProcessBetterPingTag (const BetterPingTag &tag)
+{
+  if (tag.GetSeq () < m_highestSeq)
+    {
+      //Decrease packet loss counter to correct for faulty loss detection caused by out-of-order packet
+      if (m_totalEtELoss > 0)
+        m_totalEtELoss--;
+      else
+        NS_LOG_ERROR ("Negative totalEtELoss");
+      m_lossTrace (m_totalEtELoss, m_pktCount);
+    }
+  else if (tag.GetSeq () == m_highestSeq)
+    NS_LOG_WARN ("Duplicate betterPing seq detected");
+  else
+    {
+
+      if (tag.GetSeq () > m_highestSeq + 1)
+        {
+          //Increase packet loss counter by hole in seq space
+          m_totalEtELoss += (tag.GetSeq () - m_highestSeq - 1);
+          m_lossTrace (m_totalEtELoss, m_pktCount);
+        }
+      //Update highest seq
+      m_highestSeq = tag.GetSeq ();
+    }
+
+  m_delayTrace (
+      (Simulator::Now () - Time::FromInteger (tag.GetTs (), Time::Unit::NS)).GetMilliSeconds ());
+}
+
+} // Namespace ns3
diff --git a/src/applications/model/better-ping-server.h b/src/applications/model/better-ping-server.h
new file mode 100644
index 000000000..2c9191625
--- /dev/null
+++ b/src/applications/model/better-ping-server.h
@@ -0,0 +1,101 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright 2007 University of Washington
+ * 
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#ifndef BETTER_PING_SERVER_H
+#define BETTER_PING_SERVER_H
+
+#include "ns3/application.h"
+#include "ns3/event-id.h"
+#include "ns3/ptr.h"
+#include "ns3/address.h"
+#include "ns3/traced-callback.h"
+#include "better-ping-client.h"
+
+namespace ns3 {
+
+class Socket;
+class Packet;
+
+/**
+ * \ingroup applications 
+ * \defgroup udpecho UdpEcho
+ */
+
+/**
+ * \ingroup udpecho
+ * \brief A Udp Echo server
+ *
+ * Every packet received is sent back.
+ */
+class BetterPingServer : public Application
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+  BetterPingServer ();
+  virtual ~BetterPingServer ();
+
+protected:
+  virtual void DoDispose (void);
+
+private:
+  virtual void StartApplication (void);
+  virtual void StopApplication (void);
+
+  /**
+   * \brief Handle a packet reception.
+   *
+   * This function is called by lower layers.
+   *
+   * \param socket the socket the packet was received to.
+   */
+  void HandleRead (Ptr<Socket> socket);
+
+  void ProcessBetterPingTag (const BetterPingTag &tag);
+
+  uint16_t m_port; //!< Port on which we listen for incoming packets.
+  Ptr<Socket> m_socket; //!< IPv4 Socket
+  Ptr<Socket> m_socket6; //!< IPv6 Socket
+  Address m_local; //!< local multicast address
+
+  /// Callbacks for tracing the packet Rx events
+  TracedCallback<Ptr<const Packet>> m_rxTrace;
+
+  /// Callbacks for tracing the packet Rx events, includes source and destination addresses
+  TracedCallback<Ptr<const Packet>, const Address &, const Address &> m_rxTraceWithAddresses;
+
+  /// Callbacks for tracing end-to-end loss measurements
+  typedef void (*TotalLossWithPktCntTrace) (uint32_t totalEtELoss, uint32_t pktCount);
+  TracedCallback<uint32_t, uint32_t> m_lossTrace;
+
+  /// Callbacks for tracing end-to-end delay measurements
+  typedef void (*DelayTrace) (uint32_t eTeDelay);
+  TracedCallback<uint32_t> m_delayTrace;
+
+  /// Measurement variables
+  uint32_t m_totalEtELoss = 0;
+  uint32_t m_pktCount = 0;
+  uint32_t m_highestSeq = 0;
+};
+
+} // namespace ns3
+
+#endif /* BETTER_PING_SERVER_H */
diff --git a/src/applications/model/better-ping-tracker.cc b/src/applications/model/better-ping-tracker.cc
new file mode 100644
index 000000000..eb9f5ab6f
--- /dev/null
+++ b/src/applications/model/better-ping-tracker.cc
@@ -0,0 +1,114 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright 2007 University of Washington
+ * 
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#include "ns3/log.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/ipv6-address.h"
+#include "ns3/address-utils.h"
+#include "ns3/nstime.h"
+#include "ns3/inet-socket-address.h"
+#include "ns3/inet6-socket-address.h"
+#include "ns3/socket.h"
+#include "ns3/udp-socket.h"
+#include "ns3/simulator.h"
+#include "ns3/socket-factory.h"
+#include "ns3/packet.h"
+#include "ns3/uinteger.h"
+
+#include "better-ping-tracker.h"
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("BetterPingTracker");
+
+NS_OBJECT_ENSURE_REGISTERED (BetterPingTracker);
+
+TypeId
+BetterPingTracker::GetTypeId (void)
+{
+  static TypeId tid =
+      TypeId ("ns3::BetterPingTracker").SetParent<Object> ().AddConstructor<BetterPingTracker> ();
+  return tid;
+}
+
+BetterPingTracker::BetterPingTracker ()
+{
+  NS_LOG_FUNCTION (this);
+}
+
+void
+BetterPingTracker::Install (NodeContainer nodes)
+{
+  for (auto it = nodes.Begin (); it != nodes.End (); it++)
+    {
+      auto node = *it;
+      auto ipv4 = node->GetObject<Ipv4L3Protocol> ();
+
+      if (!ipv4->TraceConnect (
+              "SendOutgoing", std::to_string (node->GetId ()),
+              MakeCallback (&BetterPingTracker::PacketHandler, Ptr<BetterPingTracker> (this))))
+        {
+          NS_FATAL_ERROR ("trace fail");
+        }
+
+      if (!ipv4->TraceConnect (
+              "UnicastForward", std::to_string (node->GetId ()),
+              MakeCallback (&BetterPingTracker::PacketHandler, Ptr<BetterPingTracker> (this))))
+        {
+          NS_FATAL_ERROR ("trace fail");
+        }
+
+      if (!ipv4->TraceConnect (
+              "LocalDeliver", std::to_string (node->GetId ()),
+              MakeCallback (&BetterPingTracker::PacketHandler, Ptr<BetterPingTracker> (this))))
+        {
+          NS_FATAL_ERROR ("trace fail");
+        }
+    }
+}
+
+void
+BetterPingTracker::DoDispose (void)
+{
+  NS_LOG_FUNCTION (this);
+  Object::DoDispose ();
+}
+
+void
+BetterPingTracker::PacketHandler (std::string context, const Ipv4Header &ipHeader,
+                                  Ptr<const Packet> ipPayload, uint32_t)
+{
+  BetterPingTag tag;
+  if (!ipPayload->PeekPacketTag (tag))
+    {
+      return; //Only consider better ping packets
+    }
+  uint32_t nodeId = std::stoi (context);
+  auto &accelerator =
+      m_pingPathAcceleratorMap[std::make_pair (ipHeader.GetSource (), ipHeader.GetDestination ())];
+  if (accelerator.find (nodeId) != accelerator.end ())
+    {
+      return; //Already seen this flow
+    }
+
+  auto &path = m_pingPathMap[std::make_pair (ipHeader.GetSource (), ipHeader.GetDestination ())];
+  path.push_back (nodeId);
+  accelerator.insert (nodeId);
+}
+
+} // Namespace ns3
diff --git a/src/applications/model/better-ping-tracker.h b/src/applications/model/better-ping-tracker.h
new file mode 100644
index 000000000..b0c78cb57
--- /dev/null
+++ b/src/applications/model/better-ping-tracker.h
@@ -0,0 +1,71 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright 2007 University of Washington
+ * 
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#ifndef BETTER_PING_TRACKER_H
+#define BETTER_PING_TRACKER_H
+
+#include "ns3/application.h"
+#include "ns3/event-id.h"
+#include "ns3/ptr.h"
+#include "ns3/address.h"
+#include "ns3/traced-callback.h"
+#include "ns3/node-container.h"
+#include "better-ping-client.h"
+#include "ns3/ipv4-l3-protocol.h"
+
+namespace ns3 {
+
+class Socket;
+class Packet;
+
+class BetterPingTracker : public Object
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+  BetterPingTracker ();
+
+  BetterPingTracker (const BetterPingTracker &tracker) = delete;
+  BetterPingTracker &operator= (const BetterPingTracker &tracker) = delete;
+
+  void Install (NodeContainer nodes);
+
+  std::map<std::pair<Ipv4Address, Ipv4Address>, std::vector<uint32_t>>
+  GetPingPathMap (void) const
+  {
+    return m_pingPathMap;
+  }
+
+protected:
+  virtual void DoDispose (void);
+
+private:
+  void PacketHandler (std::string context, const Ipv4Header &ipHeader, Ptr<const Packet> ipPayload,
+                      uint32_t interface);
+
+  // Maps source-destination pair to a vector of route node Ids
+  std::map<std::pair<Ipv4Address, Ipv4Address>, std::vector<uint32_t>> m_pingPathMap;
+  std::map<std::pair<Ipv4Address, Ipv4Address>, std::set<uint32_t>> m_pingPathAcceleratorMap;
+};
+
+} // namespace ns3
+
+#endif /* BETTER_PING_TRACKER_H */
diff --git a/src/applications/model/quic-bulk-client.cc b/src/applications/model/quic-bulk-client.cc
new file mode 100644
index 000000000..513d431c2
--- /dev/null
+++ b/src/applications/model/quic-bulk-client.cc
@@ -0,0 +1,242 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2007,2008,2009 INRIA, UDCAST
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Amine Ismail <amine.ismail@sophia.inria.fr>
+ *                      <amine.ismail@udcast.com>
+ */
+#include "ns3/log.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/nstime.h"
+#include "ns3/inet-socket-address.h"
+#include "ns3/inet6-socket-address.h"
+#include "ns3/socket.h"
+#include "ns3/simulator.h"
+#include "ns3/socket-factory.h"
+#include "ns3/packet.h"
+#include "ns3/uinteger.h"
+#include "quic-bulk-client.h"
+#include "seq-ts-header.h"
+#include <cstdlib>
+#include <cstdio>
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("QuicBulkClient");
+
+NS_OBJECT_ENSURE_REGISTERED (QuicBulkClient);
+
+TypeId
+QuicBulkClient::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicBulkClient")
+    .SetParent<Application> ()
+    .SetGroupName ("Applications")
+    .AddConstructor<QuicBulkClient> ()
+    .AddAttribute ("MaxBytes",
+                   "The total number of bytes to send. "
+                   "Once these bytes are sent, "
+                   "no data  is sent again. The value zero means "
+                   "that there is no limit.",
+                   UintegerValue (0),
+                   MakeUintegerAccessor (&QuicBulkClient::m_maxBytes),
+                   MakeUintegerChecker<uint64_t> ())
+    .AddAttribute ("MaxPackets",
+                   "The maximum number of packets the application will send",
+                   UintegerValue (100),
+                   MakeUintegerAccessor (&QuicBulkClient::m_count),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddAttribute ("RemoteAddress",
+                   "The destination Address of the outbound packets",
+                   AddressValue (),
+                   MakeAddressAccessor (&QuicBulkClient::m_peerAddress),
+                   MakeAddressChecker ())
+    .AddAttribute ("RemotePort", "The destination port of the outbound packets",
+                   UintegerValue (100),
+                   MakeUintegerAccessor (&QuicBulkClient::m_peerPort),
+                   MakeUintegerChecker<uint16_t> ())
+    .AddAttribute ("PacketSize",
+                   "Size of packets generated. The minimum packet size is 12 bytes which is the size of the header carrying the sequence number and the time stamp.",
+                   UintegerValue (1024),
+                   MakeUintegerAccessor (&QuicBulkClient::m_size),
+                   MakeUintegerChecker<uint32_t> (12,1500))
+    .AddAttribute ("NumStreams",
+                   "Number of streams to be used in the underlying QUIC socket",
+                   UintegerValue (1),
+                   MakeUintegerAccessor (&QuicBulkClient::m_numStreams),
+                   MakeUintegerChecker<uint32_t> (1,20)) // TODO check the max value
+  ;
+  return tid;
+}
+
+QuicBulkClient::QuicBulkClient ()
+{
+  NS_LOG_FUNCTION (this);
+  m_sent = 0;
+  m_totBytes = 0;
+  m_socket = 0;
+  m_lastUsedStream = 1;
+  m_sendEvent = EventId ();
+}
+
+QuicBulkClient::~QuicBulkClient ()
+{
+  NS_LOG_FUNCTION (this);
+}
+
+void
+QuicBulkClient::SetRemote (Address ip, uint16_t port)
+{
+  NS_LOG_FUNCTION (this << ip << port);
+  m_peerAddress = ip;
+  m_peerPort = port;
+}
+
+void
+QuicBulkClient::SetRemote (Address addr)
+{
+  NS_LOG_FUNCTION (this << addr);
+  m_peerAddress = addr;
+}
+
+void
+QuicBulkClient::DoDispose (void)
+{
+  NS_LOG_FUNCTION (this);
+  Application::DoDispose ();
+}
+
+void
+QuicBulkClient::StartApplication (void)
+{
+  NS_LOG_FUNCTION (this);
+
+  if (m_socket == 0)
+    {
+      TypeId tid = TypeId::LookupByName ("ns3::QuicSocketFactory");
+      m_socket = Socket::CreateSocket (GetNode (), tid);
+      NotifySocketCreation(m_socket);
+      if (Ipv4Address::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind () == -1)
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (InetSocketAddress (Ipv4Address::ConvertFrom (m_peerAddress), m_peerPort));
+        }
+      else if (Ipv6Address::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind6 () == -1)
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (Inet6SocketAddress (Ipv6Address::ConvertFrom (m_peerAddress), m_peerPort));
+        }
+      else if (InetSocketAddress::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind () == -1)
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (m_peerAddress);
+        }
+      else if (Inet6SocketAddress::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind6 () == -1) \
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (m_peerAddress);
+        }
+      else
+        {
+          NS_ASSERT_MSG (false, "Incompatible address type: " << m_peerAddress);
+        }
+    }
+
+  m_socket->SetRecvCallback (MakeCallback (&QuicBulkClient::HandleRead, this));
+  m_socket->SetAllowBroadcast (true);
+  m_sendEvent = Simulator::Schedule (Seconds (0), &QuicBulkClient::Send, this);
+}
+
+void
+QuicBulkClient::StopApplication (void)
+{
+  NS_LOG_FUNCTION (this);
+  Simulator::Cancel (m_sendEvent);
+  if (m_socket != 0)
+    {
+      m_socket->Close ();
+      m_socket = 0;
+    }
+}
+
+void
+QuicBulkClient::Send (void)
+{
+  NS_LOG_FUNCTION (this);
+  NS_ASSERT (m_sendEvent.IsExpired ());
+  SeqTsHeader seqTs;
+  seqTs.SetSeq (m_sent);
+  Ptr<Packet> p = Create<Packet> (m_size); // 8+4 : the size of the seqTs header
+  // p->AddHeader (seqTs);
+
+  std::stringstream peerAddressStringStream;
+  if (Ipv4Address::IsMatchingType (m_peerAddress))
+    {
+      peerAddressStringStream << Ipv4Address::ConvertFrom (m_peerAddress);
+    }
+  else if (Ipv6Address::IsMatchingType (m_peerAddress))
+    {
+      peerAddressStringStream << Ipv6Address::ConvertFrom (m_peerAddress);
+    }
+
+  if ((m_socket->Send (p, m_lastUsedStream)) >= 0)
+    {
+      ++m_sent;
+      m_totBytes = m_totBytes + m_size;
+      NS_LOG_INFO ("TraceDelay TX " << m_size << " bytes to "
+                                    << peerAddressStringStream.str () << " Uid: "
+                                    << p->GetUid () << " Time: "
+                                    << (Simulator::Now ()).GetSeconds ());
+
+    }
+  else
+    {
+      NS_LOG_INFO ("Error while sending " << m_size << " bytes to "
+                                          << peerAddressStringStream.str ());
+    }
+
+  // apply a round robin policy for the streams (i.e., one packet per stream)
+  m_lastUsedStream++;
+  if (m_lastUsedStream > m_numStreams)
+    {
+      m_lastUsedStream = 1;
+    }
+
+  if (m_sent < m_count && m_totBytes < m_maxBytes)
+    {
+      m_sendEvent = Simulator::Schedule (Seconds (0.0005), &QuicBulkClient::Send, this);
+    }
+}
+
+void
+QuicBulkClient::HandleRead (Ptr<Socket> socket)
+{
+  socket->Recv(); //Needed to empty the TCP receive buffer
+}
+
+} // Namespace ns3
diff --git a/src/applications/model/quic-bulk-client.h b/src/applications/model/quic-bulk-client.h
new file mode 100644
index 000000000..90537ca52
--- /dev/null
+++ b/src/applications/model/quic-bulk-client.h
@@ -0,0 +1,102 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2007,2008,2009 INRIA, UDCAST
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Amine Ismail <amine.ismail@sophia.inria.fr>
+ *                      <amine.ismail@udcast.com>
+ *
+ */
+
+#ifndef QUIC_BULK_CLIENT_H
+#define QUIC_BULK_CLIENT_H
+
+#include "ns3/application.h"
+#include "ns3/event-id.h"
+#include "ns3/ptr.h"
+#include "ns3/ipv4-address.h"
+
+namespace ns3 {
+
+class Socket;
+class Packet;
+
+/**
+ * \ingroup quicclientserver
+ *
+ * \brief A QUIC bulk client. Sends QUIC packet carrying sequence number and time stamp
+ *  in their payloads
+ *
+ */
+class QuicBulkClient : public Application
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+
+  QuicBulkClient ();
+
+  virtual ~QuicBulkClient ();
+
+  /**
+   * \brief set the remote address and port
+   * \param ip remote IP address
+   * \param port remote port
+   */
+  void SetRemote (Address ip, uint16_t port);
+  /**
+   * \brief set the remote address
+   * \param addr remote address
+   */
+  void SetRemote (Address addr);
+
+protected:
+  virtual void DoDispose (void);
+
+private:
+
+  virtual void StartApplication (void);
+  virtual void StopApplication (void);
+
+  /**
+   * \brief Send a packet
+   */
+  void Send (void);
+
+  void HandleRead (Ptr<Socket> socket);
+
+
+  uint32_t m_count; //!< Maximum number of packets the application will send
+  uint32_t m_size; //!< Size of the sent packet (including the SeqTsHeader)
+
+  uint32_t m_sent; //!< Counter for sent packets
+  uint32_t m_maxBytes; //!< Limit total number of bytes sent
+  uint32_t m_totBytes; //!< Total bytes sent so far
+  Ptr<Socket> m_socket; //!< Socket
+  Address m_peerAddress; //!< Remote peer address
+  uint16_t m_peerPort; //!< Remote peer port
+  EventId m_sendEvent; //!< Event to send the next packet
+
+  uint32_t m_numStreams;
+  uint32_t m_lastUsedStream;
+
+};
+
+} // namespace ns3
+
+#endif /* QUIC_CLIENT_H */
diff --git a/src/applications/model/quic-client.cc b/src/applications/model/quic-client.cc
new file mode 100644
index 000000000..bd8f08359
--- /dev/null
+++ b/src/applications/model/quic-client.cc
@@ -0,0 +1,239 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2007,2008,2009 INRIA, UDCAST
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Amine Ismail <amine.ismail@sophia.inria.fr>
+ *                      <amine.ismail@udcast.com>
+ */
+#include "ns3/log.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/nstime.h"
+#include "ns3/inet-socket-address.h"
+#include "ns3/inet6-socket-address.h"
+#include "ns3/socket.h"
+#include "ns3/simulator.h"
+#include "ns3/socket-factory.h"
+#include "ns3/packet.h"
+#include "ns3/uinteger.h"
+#include "quic-client.h"
+#include "seq-ts-header.h"
+#include <cstdlib>
+#include <cstdio>
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("QuicClient");
+
+NS_OBJECT_ENSURE_REGISTERED (QuicClient);
+
+TypeId
+QuicClient::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicClient")
+    .SetParent<Application> ()
+    .SetGroupName ("Applications")
+    .AddConstructor<QuicClient> ()
+    .AddAttribute ("MaxPackets",
+                   "The maximum number of packets the application will send",
+                   UintegerValue (100),
+                   MakeUintegerAccessor (&QuicClient::m_count),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddAttribute ("Interval",
+                   "The time to wait between packets", TimeValue (Seconds (1.0)),
+                   MakeTimeAccessor (&QuicClient::m_interval),
+                   MakeTimeChecker ())
+    .AddAttribute ("RemoteAddress",
+                   "The destination Address of the outbound packets",
+                   AddressValue (),
+                   MakeAddressAccessor (&QuicClient::m_peerAddress),
+                   MakeAddressChecker ())
+    .AddAttribute ("RemotePort", "The destination port of the outbound packets",
+                   UintegerValue (100),
+                   MakeUintegerAccessor (&QuicClient::m_peerPort),
+                   MakeUintegerChecker<uint16_t> ())
+    .AddAttribute ("PacketSize",
+                   "Size of packets generated. The minimum packet size is 12 bytes which is the size of the header carrying the sequence number and the time stamp.",
+                   UintegerValue (1024),
+                   MakeUintegerAccessor (&QuicClient::m_size),
+                   MakeUintegerChecker<uint32_t> (12,1500))
+    .AddAttribute ("NumStreams",
+                   "Number of streams to be used in the underlying QUIC socket",
+                   UintegerValue (1),
+                   MakeUintegerAccessor (&QuicClient::m_numStreams),
+                   MakeUintegerChecker<uint32_t> (1,20)) // TODO check the max value
+  ;
+  return tid;
+}
+
+QuicClient::QuicClient ()
+{
+  NS_LOG_FUNCTION (this);
+  m_sent = 0;
+  m_socket = 0;
+  m_lastUsedStream = 1;
+  m_sendEvent = EventId ();
+}
+
+QuicClient::~QuicClient ()
+{
+  NS_LOG_FUNCTION (this);
+}
+
+void
+QuicClient::SetRemote (Address ip, uint16_t port)
+{
+  NS_LOG_FUNCTION (this << ip << port);
+  m_peerAddress = ip;
+  m_peerPort = port;
+}
+
+void
+QuicClient::SetRemote (Address addr)
+{
+  NS_LOG_FUNCTION (this << addr);
+  m_peerAddress = addr;
+}
+
+void
+QuicClient::DoDispose (void)
+{
+  NS_LOG_FUNCTION (this);
+  Application::DoDispose ();
+}
+
+void
+QuicClient::StartApplication (void)
+{
+  NS_LOG_FUNCTION (this);
+
+  if (m_socket == 0)
+    {
+      TypeId tid = TypeId::LookupByName ("ns3::QuicSocketFactory");
+      m_socket = Socket::CreateSocket (GetNode (), tid);
+      NotifySocketCreation(m_socket);
+      if (Ipv4Address::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind () == -1)
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (InetSocketAddress (Ipv4Address::ConvertFrom (m_peerAddress), m_peerPort));
+        }
+      else if (Ipv6Address::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind6 () == -1)
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (Inet6SocketAddress (Ipv6Address::ConvertFrom (m_peerAddress), m_peerPort));
+        }
+      else if (InetSocketAddress::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind () == -1)
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (m_peerAddress);
+        }
+      else if (Inet6SocketAddress::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind6 () == -1) \
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (m_peerAddress);
+        }
+      else
+        {
+          NS_ASSERT_MSG (false, "Incompatible address type: " << m_peerAddress);
+        }
+    }
+
+  m_socket->SetRecvCallback (MakeCallback (&QuicClient::HandleRead, this));
+  m_socket->SetAllowBroadcast (true);
+  m_sendEvent = Simulator::Schedule (Seconds (0), &QuicClient::Send, this);
+}
+
+void
+QuicClient::StopApplication (void)
+{
+  NS_LOG_FUNCTION (this);
+  Simulator::Cancel (m_sendEvent);
+  if (m_socket != 0)
+    {
+      m_socket->Close ();
+      m_socket = 0;
+    }
+}
+
+void
+QuicClient::Send (void)
+{
+  NS_LOG_FUNCTION (this);
+  NS_ASSERT (m_sendEvent.IsExpired ());
+  SeqTsHeader seqTs;
+  seqTs.SetSeq (m_sent);
+  Ptr<Packet> p = Create<Packet> (m_size); // 8+4 : the size of the seqTs header
+  // p->AddHeader (seqTs);
+
+  std::stringstream peerAddressStringStream;
+  if (Ipv4Address::IsMatchingType (m_peerAddress))
+    {
+      peerAddressStringStream << Ipv4Address::ConvertFrom (m_peerAddress);
+    }
+  else if (Ipv6Address::IsMatchingType (m_peerAddress))
+    {
+      peerAddressStringStream << Ipv6Address::ConvertFrom (m_peerAddress);
+    }
+
+  if ((m_socket->Send (p, m_lastUsedStream)) >= 0)
+    {
+      ++m_sent;
+      m_totalSentSuccess++;
+      NS_LOG_INFO ("TraceDelay TX " << p->GetSize() << " bytes to "
+                                    << peerAddressStringStream.str () << " Uid: "
+                                    << p->GetUid () << " Time: "
+                                    << (Simulator::Now ()).GetSeconds ());
+
+    }
+  else
+    {
+      m_totalSentFail++;
+      NS_LOG_INFO ("Error while sending " << p->GetSize() << " bytes to "
+                                          << peerAddressStringStream.str ());
+    }
+
+  // apply a round robin policy for the streams (i.e., one packet per stream)
+  m_lastUsedStream++;
+  if (m_lastUsedStream > m_numStreams)
+    {
+      m_lastUsedStream = 1;
+    }
+
+  if (m_sent < m_count)
+    {
+      m_sendEvent = Simulator::Schedule (m_interval, &QuicClient::Send, this);
+    }
+}
+
+void
+QuicClient::HandleRead (Ptr<Socket> socket)
+{
+  socket->Recv();
+  m_totalReceived++;
+}
+
+} // Namespace ns3
diff --git a/src/applications/model/quic-client.h b/src/applications/model/quic-client.h
new file mode 100644
index 000000000..fa84ecd14
--- /dev/null
+++ b/src/applications/model/quic-client.h
@@ -0,0 +1,102 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2007,2008,2009 INRIA, UDCAST
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Amine Ismail <amine.ismail@sophia.inria.fr>
+ *                      <amine.ismail@udcast.com>
+ *
+ */
+
+#ifndef QUIC_CLIENT_H
+#define QUIC_CLIENT_H
+
+#include "ns3/application.h"
+#include "ns3/event-id.h"
+#include "ns3/ptr.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/application-stats.h"
+
+namespace ns3 {
+
+class Socket;
+class Packet;
+
+/**
+ * \ingroup quicclientserver
+ *
+ * \brief A QUIC client. Sends QUIC packet carrying sequence number and time stamp
+ *  in their payloads
+ *
+ */
+class QuicClient : public Application, public ApplicationStats
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+
+  QuicClient ();
+
+  virtual ~QuicClient ();
+
+  /**
+   * \brief set the remote address and port
+   * \param ip remote IP address
+   * \param port remote port
+   */
+  void SetRemote (Address ip, uint16_t port);
+  /**
+   * \brief set the remote address
+   * \param addr remote address
+   */
+  void SetRemote (Address addr);
+
+protected:
+  virtual void DoDispose (void);
+
+private:
+
+  virtual void StartApplication (void);
+  virtual void StopApplication (void);
+
+  /**
+   * \brief Send a packet
+   */
+  void Send (void);
+
+  void HandleRead (Ptr<Socket> socket);
+
+
+  uint32_t m_count; //!< Maximum number of packets the application will send
+  Time m_interval; //!< Packet inter-send time
+  uint32_t m_size; //!< Size of the sent packet (including the SeqTsHeader)
+
+  uint32_t m_sent; //!< Counter for sent packets
+  Ptr<Socket> m_socket; //!< Socket
+  Address m_peerAddress; //!< Remote peer address
+  uint16_t m_peerPort; //!< Remote peer port
+  EventId m_sendEvent; //!< Event to send the next packet
+
+  uint32_t m_numStreams;
+  uint32_t m_lastUsedStream;
+
+};
+
+} // namespace ns3
+
+#endif /* QUIC_CLIENT_H */
diff --git a/src/applications/model/quic-echo-client.cc b/src/applications/model/quic-echo-client.cc
new file mode 100644
index 000000000..a6b5c8467
--- /dev/null
+++ b/src/applications/model/quic-echo-client.cc
@@ -0,0 +1,515 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Davide Marcato <davide.marcato.4@studenti.unipd.it>
+ *          Stefano Ravazzolo <stefano.ravazzolo@studenti.unipd.it>
+ *          Alvise De Biasio <alvise.debiasio@studenti.unipd.it>
+ */
+
+#include "ns3/log.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/ipv6-address.h"
+#include "ns3/nstime.h"
+#include "ns3/inet-socket-address.h"
+#include "ns3/inet6-socket-address.h"
+#include "ns3/socket.h"
+#include "ns3/simulator.h"
+#include "ns3/socket-factory.h"
+#include "ns3/packet.h"
+#include "ns3/uinteger.h"
+#include "ns3/trace-source-accessor.h"
+#include "quic-echo-client.h"
+#include "ns3/quic-header.h"
+
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("QuicEchoClientApplication");
+
+NS_OBJECT_ENSURE_REGISTERED (QuicEchoClient);
+
+TypeId
+QuicEchoClient::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicEchoClient")
+    .SetParent<Application> ()
+    .SetGroupName ("Applications")
+    .AddConstructor<QuicEchoClient> ()
+    .AddAttribute ("MaxPackets",
+                   "The maximum number of packets the application will send",
+                   UintegerValue (100),
+                   MakeUintegerAccessor (&QuicEchoClient::m_count),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddAttribute ("Interval",
+                   "The time to wait between packets",
+                   TimeValue (Seconds (1.0)),
+                   MakeTimeAccessor (&QuicEchoClient::m_interval),
+                   MakeTimeChecker ())
+    .AddAttribute ("RemoteAddress",
+                   "The destination Address of the outbound packets",
+                   AddressValue (),
+                   MakeAddressAccessor (&QuicEchoClient::m_peerAddress),
+                   MakeAddressChecker ())
+    .AddAttribute ("RemotePort",
+                   "The destination port of the outbound packets",
+                   UintegerValue (0),
+                   MakeUintegerAccessor (&QuicEchoClient::m_peerPort),
+                   MakeUintegerChecker<uint16_t> ())
+    .AddAttribute ("PacketSize", "Size of echo data in outbound packets",
+                   UintegerValue (100),
+                   MakeUintegerAccessor (&QuicEchoClient::GetDataSize,
+                                         &QuicEchoClient::SetDataSize),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddAttribute ("StreamId",
+                   "Identifier of the stream to be used in the QUIC connection",
+                   UintegerValue (2),
+                   MakeUintegerAccessor (&QuicEchoClient::GetStreamId,
+                                         &QuicEchoClient::SetStreamId),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddTraceSource ("Tx", "A new packet is created and is sent",
+                     MakeTraceSourceAccessor (&QuicEchoClient::m_txTrace),
+                     "ns3::Packet::TracedCallback")
+  ;
+  return tid;
+}
+
+
+QuicEchoClient::QuicEchoClient ()
+{
+  NS_LOG_FUNCTION (this);
+  m_sent = 0;
+  m_socket = 0;
+  m_sendEvent = EventId ();
+  m_data = 0;
+  m_dataSize = 0;
+}
+
+QuicEchoClient::~QuicEchoClient ()
+{
+  NS_LOG_FUNCTION (this);
+  m_socket = 0;
+
+  delete [] m_data;
+  m_data = 0;
+  m_dataSize = 0;
+}
+
+void
+QuicEchoClient::SetRemote (Address ip, uint16_t port)
+{
+  NS_LOG_FUNCTION (this << ip << port);
+  m_peerAddress = ip;
+  m_peerPort = port;
+}
+
+void
+QuicEchoClient::SetRemote (Address addr)
+{
+  NS_LOG_FUNCTION (this << addr);
+  m_peerAddress = addr;
+}
+
+void
+QuicEchoClient::DoDispose (void)
+{
+  NS_LOG_FUNCTION (this);
+  Application::DoDispose ();
+}
+
+void
+QuicEchoClient::StartApplication (void)
+{
+  NS_LOG_INFO ("##########  QUIC Echo Client START at time " << Simulator::Now ().GetSeconds () << " ##########");
+  NS_LOG_FUNCTION (this);
+
+  if (m_socket == 0)
+    {
+      TypeId tid = TypeId::LookupByName ("ns3::QuicSocketFactory");
+
+      m_socket = Socket::CreateSocket (GetNode (), tid);
+      NotifySocketCreation(m_socket);
+      if (Ipv4Address::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind () == -1)
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (InetSocketAddress (Ipv4Address::ConvertFrom (m_peerAddress), m_peerPort));
+        }
+      else if (Ipv6Address::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind6 () == -1)
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (Inet6SocketAddress (Ipv6Address::ConvertFrom (m_peerAddress), m_peerPort));
+        }
+      else if (InetSocketAddress::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind () == -1)
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (m_peerAddress);
+        }
+      else if (Inet6SocketAddress::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind6 () == -1)
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (m_peerAddress);
+        }
+      else
+        {
+          NS_ASSERT_MSG (false, "Incompatible address type: " << m_peerAddress);
+        }
+    }
+
+  m_socket->SetRecvCallback (MakeCallback (&QuicEchoClient::HandleRead, this));
+  m_socket->SetAllowBroadcast (true);
+  ScheduleTransmit (Seconds (2.));
+}
+
+void
+QuicEchoClient::StopApplication ()
+{
+  NS_LOG_INFO ("##########  QUIC Echo Client STOP at time " << Simulator::Now ().GetSeconds () << " ##########");
+  NS_LOG_FUNCTION (this);
+
+  if (m_socket != 0)
+    {
+      m_socket->Close ();
+      m_socket->SetRecvCallback (MakeNullCallback<void, Ptr<Socket> > ());
+      m_socket = 0;
+    }
+
+  Simulator::Cancel (m_sendEvent);
+}
+
+void
+QuicEchoClient::SetDataSize (uint32_t dataSize)
+{
+  NS_LOG_FUNCTION (this << dataSize);
+
+  //
+  // If the client is setting the echo packet data size this way, we infer
+  // that she doesn't care about the contents of the packet at all, so
+  // neither will we.
+  //
+  delete [] m_data;
+  m_data = 0;
+  m_dataSize = 0;
+  m_size = dataSize;
+}
+
+uint32_t
+QuicEchoClient::GetDataSize (void) const
+{
+  NS_LOG_FUNCTION (this);
+  return m_size;
+}
+
+void
+QuicEchoClient::SetFill (std::string fill)
+{
+  NS_LOG_FUNCTION (this << fill);
+
+  uint32_t dataSize = fill.size () + 1;
+
+  if (dataSize != m_dataSize)
+    {
+      delete [] m_data;
+      m_data = new uint8_t [dataSize];
+      m_dataSize = dataSize;
+    }
+
+  memcpy (m_data, fill.c_str (), dataSize);
+
+  //
+  // Overwrite packet size attribute.
+  //
+  m_size = dataSize;
+}
+
+void
+QuicEchoClient::SetFill (uint8_t fill, uint32_t dataSize)
+{
+  NS_LOG_FUNCTION (this << fill << dataSize);
+  if (dataSize != m_dataSize)
+    {
+      delete [] m_data;
+      m_data = new uint8_t [dataSize];
+      m_dataSize = dataSize;
+    }
+
+  memset (m_data, fill, dataSize);
+
+  //
+  // Overwrite packet size attribute.
+  //
+  m_size = dataSize;
+}
+
+void
+QuicEchoClient::SetFill (uint8_t *fill, uint32_t fillSize, uint32_t dataSize)
+{
+  NS_LOG_FUNCTION (this << fill << fillSize << dataSize);
+  if (dataSize != m_dataSize)
+    {
+      delete [] m_data;
+      m_data = new uint8_t [dataSize];
+      m_dataSize = dataSize;
+    }
+
+  if (fillSize >= dataSize)
+    {
+      memcpy (m_data, fill, dataSize);
+      m_size = dataSize;
+      return;
+    }
+
+  //
+  // Do all but the final fill.
+  //
+  uint32_t filled = 0;
+  while (filled + fillSize < dataSize)
+    {
+      memcpy (&m_data[filled], fill, fillSize);
+      filled += fillSize;
+    }
+
+  //
+  // Last fill may be partial
+  //
+  memcpy (&m_data[filled], fill, dataSize - filled);
+
+  //
+  // Overwrite packet size attribute.
+  //
+  m_size = dataSize;
+}
+
+void
+QuicEchoClient::ScheduleTransmit (Time dt)
+{
+  NS_LOG_FUNCTION (this << dt);
+  m_sendEvent = Simulator::Schedule (dt, &QuicEchoClient::Send, this);
+}
+
+void
+QuicEchoClient::ScheduleClosing (Time dt)
+{
+  NS_LOG_FUNCTION (this << dt);
+  m_closeEvent = Simulator::Schedule (dt, &QuicEchoClient::Close, this);
+}
+
+void
+QuicEchoClient::ScheduleRestart (Time dt)
+{
+  NS_LOG_FUNCTION (this << dt);
+  m_connectEvent = Simulator::Schedule (dt, &QuicEchoClient::Restart, this);
+}
+
+void
+QuicEchoClient::Restart (void)
+{
+  NS_LOG_INFO ("##########  QUIC Echo Client RESTART at time " << Simulator::Now ().GetSeconds () << " ##########");
+  NS_LOG_FUNCTION (this);
+  NS_ASSERT (m_connectEvent.IsExpired ());
+
+  TypeId tid = TypeId::LookupByName ("ns3::QuicSocketFactory");
+  //NS_LOG_INFO("node is "<< GetNode());
+  m_socket = Socket::CreateSocket (GetNode (), tid);
+  if (Ipv4Address::IsMatchingType (m_peerAddress) == true)
+    {
+      if (m_socket->Bind () == -1)
+        {
+          NS_FATAL_ERROR ("Failed to bind socket");
+        }
+      m_socket->Connect (InetSocketAddress (Ipv4Address::ConvertFrom (m_peerAddress), m_peerPort));
+    }
+  else if (Ipv6Address::IsMatchingType (m_peerAddress) == true)
+    {
+      if (m_socket->Bind6 () == -1)
+        {
+          NS_FATAL_ERROR ("Failed to bind socket");
+        }
+      m_socket->Connect (Inet6SocketAddress (Ipv6Address::ConvertFrom (m_peerAddress), m_peerPort));
+    }
+  else if (InetSocketAddress::IsMatchingType (m_peerAddress) == true)
+    {
+      if (m_socket->Bind () == -1)
+        {
+          NS_FATAL_ERROR ("Failed to bind socket");
+        }
+      m_socket->Connect (m_peerAddress);
+    }
+  else if (Inet6SocketAddress::IsMatchingType (m_peerAddress) == true)
+    {
+      if (m_socket->Bind6 () == -1)
+        {
+          NS_FATAL_ERROR ("Failed to bind socket");
+        }
+      m_socket->Connect (m_peerAddress);
+    }
+  else
+    {
+      NS_ASSERT_MSG (false, "Incompatible address type: " << m_peerAddress);
+    }
+
+  m_socket->SetRecvCallback (MakeCallback (&QuicEchoClient::HandleRead, this));
+  m_socket->SetAllowBroadcast (true);
+  SetFill ("Re-Hello World");
+  ScheduleTransmit (Seconds (2.));
+}
+
+
+void
+QuicEchoClient::Close (void)
+{
+  NS_LOG_INFO ("##########  QUIC Echo Client CLOSING at time " << Simulator::Now ().GetSeconds () << " ##########");
+  NS_LOG_FUNCTION (this);
+  NS_ASSERT (m_closeEvent.IsExpired ());
+
+  m_socket->Close ();
+}
+
+
+void
+QuicEchoClient::Send (void)
+{
+  NS_LOG_INFO ("##########  QUIC Echo Client SENDING at time " << Simulator::Now ().GetSeconds () << " ##########");
+  NS_LOG_FUNCTION (this);
+
+  NS_ASSERT (m_sendEvent.IsExpired ());
+
+  Ptr<Packet> p;
+  if (m_dataSize)
+    {
+      // If m_dataSize is non-zero, we have a data buffer of the same size that we
+      // are expected to copy and send.  This state of affairs is created if one of
+      // the Fill functions is called.  In this case, m_size must have been set
+      // to agree with m_dataSize
+      //
+      NS_ASSERT_MSG (m_dataSize == m_size, "QuicEchoClient::Send(): m_size and m_dataSize inconsistent");
+      NS_ASSERT_MSG (m_data, "QuicEchoClient::Send(): m_dataSize but no m_data");
+      p = Create<Packet> (m_data, m_dataSize);
+    }
+  else
+    {
+      NS_LOG_INFO ("no data");
+      //
+      // If m_dataSize is zero, the client has indicated that it doesn't care
+      // about the data itself either by specifying the data size by setting
+      // the corresponding attribute or by not calling a SetFill function.  In
+      // this case, we don't worry about it either.  But we do allow m_size
+      // to have a value different from the (zero) m_dataSize.
+      //
+      p = Create<Packet> (m_size);
+    }
+  // call to the trace sinks before the packet is actually sent,
+  // so that tags added to the packet can be sent as well
+  m_txTrace (p);
+
+  // send and use the flags param in the Send API to let the QUIC socket know
+  // about which stream should be used for data
+  int sent = m_socket->Send (p, m_streamId);
+
+  NS_ASSERT_MSG (sent - p->GetSize () == 0, "Could not send data (packet and sent size inconsistent)");
+
+  ++m_sent;
+
+  if (Ipv4Address::IsMatchingType (m_peerAddress))
+    {
+      NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s client sent " << m_size << " bytes to " <<
+                   Ipv4Address::ConvertFrom (m_peerAddress) << " port " << m_peerPort);
+    }
+  else if (Ipv6Address::IsMatchingType (m_peerAddress))
+    {
+      NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s client sent " << m_size << " bytes to " <<
+                   Ipv6Address::ConvertFrom (m_peerAddress) << " port " << m_peerPort);
+    }
+  else if (InetSocketAddress::IsMatchingType (m_peerAddress))
+    {
+      NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s client sent " << m_size << " bytes to " <<
+                   InetSocketAddress::ConvertFrom (m_peerAddress).GetIpv4 () << " port " << InetSocketAddress::ConvertFrom (m_peerAddress).GetPort ());
+    }
+  else if (Inet6SocketAddress::IsMatchingType (m_peerAddress))
+    {
+      NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s client sent " << m_size << " bytes to " <<
+                   Inet6SocketAddress::ConvertFrom (m_peerAddress).GetIpv6 () << " port " << Inet6SocketAddress::ConvertFrom (m_peerAddress).GetPort ());
+    }
+
+  uint8_t *buffer = new uint8_t[p->GetSize ()];
+  p->CopyData (buffer, p->GetSize ());
+  std::string s = std::string ((char*)buffer);
+  NS_LOG_INFO ("Client sent: " << s << "");
+
+  if (m_sent < m_count)
+    {
+      ScheduleTransmit (m_interval);
+    }
+}
+
+void
+QuicEchoClient::HandleRead (Ptr<Socket> socket)
+{
+  NS_LOG_INFO ("##########  QUIC Echo Client RECEIVING at time " << Simulator::Now ().GetSeconds () << " ##########");
+  NS_LOG_FUNCTION (this);
+
+  Ptr<Packet> packet;
+  Address from;
+  while ((packet = socket->RecvFrom (from)))
+    {
+      packet->RemoveAllByteTags ();
+      packet->RemoveAllPacketTags ();
+
+      if (InetSocketAddress::IsMatchingType (from))
+        {
+          NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s client received " << packet->GetSize () << " bytes from " <<
+                       InetSocketAddress::ConvertFrom (from).GetIpv4 () << " port " <<
+                       InetSocketAddress::ConvertFrom (from).GetPort ());
+        }
+      else if (Inet6SocketAddress::IsMatchingType (from))
+        {
+          NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s client received " << packet->GetSize () << " bytes from " <<
+                       Inet6SocketAddress::ConvertFrom (from).GetIpv6 () << " port " <<
+                       Inet6SocketAddress::ConvertFrom (from).GetPort ());
+        }
+
+      uint8_t *buffer = new uint8_t[packet->GetSize ()];
+      packet->CopyData (buffer, packet->GetSize ());
+      std::string s = std::string ((char*)buffer);
+      NS_LOG_INFO ("Client received: " << s << "");
+    }
+}
+
+void
+QuicEchoClient::SetStreamId (uint32_t streamId)
+{
+  NS_LOG_FUNCTION (this << streamId);
+  NS_ABORT_MSG_IF (streamId == 0, "Stream 0 cannot be used for application data");
+
+  m_streamId = streamId;
+}
+
+uint32_t
+QuicEchoClient::GetStreamId (void) const
+{
+  return m_streamId;
+}
+
+} // Namespace ns3
diff --git a/src/applications/model/quic-echo-client.h b/src/applications/model/quic-echo-client.h
new file mode 100644
index 000000000..1ba6fba19
--- /dev/null
+++ b/src/applications/model/quic-echo-client.h
@@ -0,0 +1,207 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Davide Marcato <davide.marcato.4@studenti.unipd.it>
+ *          Stefano Ravazzolo <stefano.ravazzolo@studenti.unipd.it>
+ *          Alvise De Biasio <alvise.debiasio@studenti.unipd.it>
+ */
+
+#ifndef QUIC_ECHO_CLIENT_H
+#define QUIC_ECHO_CLIENT_H
+
+#include "ns3/application.h"
+#include "ns3/event-id.h"
+#include "ns3/ptr.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/traced-callback.h"
+
+namespace ns3 {
+
+class Socket;
+class Packet;
+
+/**
+ * \ingroup quicecho
+ * \brief A Quic Echo client
+ *
+ * Every packet sent should be returned by the server and received here.
+ */
+class QuicEchoClient : public Application
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+
+  QuicEchoClient ();
+
+  virtual ~QuicEchoClient ();
+
+  /**
+   * \brief set the remote address and port
+   * \param ip remote IP address
+   * \param port remote port
+   */
+  void SetRemote (Address ip, uint16_t port);
+  /**
+   * \brief set the remote address
+   * \param addr remote address
+   */
+  void SetRemote (Address addr);
+
+  /**
+   * Set the data size of the packet (the number of bytes that are sent as data
+   * to the server).  The contents of the data are set to unspecified (don't
+   * care) by this call.
+   *
+   * \warning If you have set the fill data for the echo client using one of the
+   * SetFill calls, this will undo those effects.
+   *
+   * \param dataSize The size of the echo data you want to sent.
+   */
+  void SetDataSize (uint32_t dataSize);
+
+  /**
+   * Get the number of data bytes that will be sent to the server.
+   *
+   * \warning The number of bytes may be modified by calling any one of the
+   * SetFill methods.  If you have called SetFill, then the number of
+   * data bytes will correspond to the size of an initialized data buffer.
+   * If you have not called a SetFill method, the number of data bytes will
+   * correspond to the number of don't care bytes that will be sent.
+   *
+   * \returns The number of data bytes.
+   */
+  uint32_t GetDataSize (void) const;
+
+  /**
+   * Set the data fill of the packet (what is sent as data to the server) to
+   * the zero-terminated contents of the fill string string.
+   *
+   * \warning The size of resulting echo packets will be automatically adjusted
+   * to reflect the size of the fill string -- this means that the PacketSize
+   * attribute may be changed as a result of this call.
+   *
+   * \param fill The string to use as the actual echo data bytes.
+   */
+  void SetFill (std::string fill);
+
+  /**
+   * Set the data fill of the packet (what is sent as data to the server) to
+   * the repeated contents of the fill byte.  i.e., the fill byte will be
+   * used to initialize the contents of the data packet.
+   *
+   * \warning The size of resulting echo packets will be automatically adjusted
+   * to reflect the dataSize parameter -- this means that the PacketSize
+   * attribute may be changed as a result of this call.
+   *
+   * \param fill The byte to be repeated in constructing the packet data..
+   * \param dataSize The desired size of the resulting echo packet data.
+   */
+  void SetFill (uint8_t fill, uint32_t dataSize);
+
+  /**
+   * Set the data fill of the packet (what is sent as data to the server) to
+   * the contents of the fill buffer, repeated as many times as is required.
+   *
+   * Initializing the packet to the contents of a provided single buffer is
+   * accomplished by setting the fillSize set to your desired dataSize
+   * (and providing an appropriate buffer).
+   *
+   * \warning The size of resulting echo packets will be automatically adjusted
+   * to reflect the dataSize parameter -- this means that the PacketSize
+   * attribute of the Application may be changed as a result of this call.
+   *
+   * \param fill The fill pattern to use when constructing packets.
+   * \param fillSize The number of bytes in the provided fill pattern.
+   * \param dataSize The desired size of the final echo data.
+   */
+  void SetFill (uint8_t *fill, uint32_t fillSize, uint32_t dataSize);
+
+  void ScheduleClosing (Time dt);
+
+  void ScheduleRestart (Time dt);
+
+  /**
+   * Set the ID of the stream to be used in the underlying QUIC socket
+   *
+   * \param streamId the ID of the stream (>0)
+   */
+  void SetStreamId (uint32_t streamId);
+
+  /**
+   * Get the stream ID to be used in the underlying QUIC socket
+   *
+   * \return the stream ID
+   */
+  uint32_t GetStreamId (void) const;
+
+protected:
+  virtual void DoDispose (void);
+
+private:
+
+  virtual void StartApplication (void);
+  virtual void StopApplication (void);
+
+  /**
+   * \brief Schedule the next packet transmission
+   * \param dt time interval between packets.
+   */
+  void ScheduleTransmit (Time dt);
+
+  /**
+   * \brief Send a packet
+   */
+  void Send (void);
+  void Close (void);
+  void Restart (void);
+
+  /**
+ * \brief Handle a packet reception.
+ *
+ * This function is called by lower layers.
+ *
+ * \param socket the socket the packet was received to.
+ */
+  void HandleRead (Ptr<Socket> socket);
+
+  uint32_t m_count; //!< Maximum number of packets the application will send
+  Time m_interval; //!< Packet inter-send time
+  uint32_t m_size; //!< Size of the sent packet
+
+  uint32_t m_dataSize; //!< packet payload size (must be equal to m_size)
+  uint8_t *m_data; //!< packet payload data
+
+  uint32_t m_sent; //!< Counter for sent packets
+  Ptr<Socket> m_socket; //!< Socket
+  Address m_peerAddress; //!< Remote peer address
+  uint16_t m_peerPort; //!< Remote peer port
+  EventId m_sendEvent; //!< Event to send the next packet
+  EventId m_closeEvent;
+  EventId m_connectEvent;
+
+
+  /// Callbacks for tracing the packet Tx events
+  TracedCallback<Ptr<const Packet> > m_txTrace;
+
+  uint32_t m_streamId;
+};
+
+} // namespace ns3
+
+#endif /* QUIC_ECHO_CLIENT_H */
diff --git a/src/applications/model/quic-echo-server.cc b/src/applications/model/quic-echo-server.cc
new file mode 100644
index 000000000..34addbbb0
--- /dev/null
+++ b/src/applications/model/quic-echo-server.cc
@@ -0,0 +1,255 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Davide Marcato <davide.marcato.4@studenti.unipd.it>
+ *          Stefano Ravazzolo <stefano.ravazzolo@studenti.unipd.it>
+ *          Alvise De Biasio <alvise.debiasio@studenti.unipd.it>
+ */
+
+#include "ns3/log.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/ipv6-address.h"
+#include "ns3/address-utils.h"
+#include "ns3/nstime.h"
+#include "ns3/inet-socket-address.h"
+#include "ns3/inet6-socket-address.h"
+#include "ns3/socket.h"
+#include "ns3/quic-socket.h"
+#include "ns3/simulator.h"
+#include "ns3/socket-factory.h"
+#include "ns3/packet.h"
+#include "ns3/uinteger.h"
+
+#include "quic-echo-server.h"
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("QuicEchoServerApplication");
+
+NS_OBJECT_ENSURE_REGISTERED (QuicEchoServer);
+
+TypeId
+QuicEchoServer::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicEchoServer")
+    .SetParent<Application> ()
+    .SetGroupName ("Applications")
+    .AddConstructor<QuicEchoServer> ()
+    .AddAttribute ("Port", "Port on which we listen for incoming packets.",
+                   UintegerValue (9),
+                   MakeUintegerAccessor (&QuicEchoServer::m_port),
+                   MakeUintegerChecker<uint16_t> ())
+    .AddAttribute ("StreamId",
+                   "Identifier of the stream to be used in the QUIC connection",
+                   UintegerValue (2),
+                   MakeUintegerAccessor (&QuicEchoServer::GetStreamId,
+                                         &QuicEchoServer::SetStreamId),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddAttribute ("EchoNth", "Echo every nth packet.",
+                   UintegerValue (1),
+                   MakeUintegerAccessor (&QuicEchoServer::m_echonNth),
+                   MakeUintegerChecker<uint32_t> (1))
+    .AddAttribute ("EchoCount", "How many packets to send on each echo (zero to disable).",
+                   UintegerValue (1),
+                   MakeUintegerAccessor (&QuicEchoServer::m_echoCount),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddAttribute ("EchoInterval",
+                   "Sending interval between packets when sending multiple packets per echo.",
+                   TimeValue (MicroSeconds (500)),
+                   MakeTimeAccessor (&QuicEchoServer::m_echoInterval),
+                   MakeTimeChecker ())
+  ;
+  return tid;
+}
+
+QuicEchoServer::QuicEchoServer ()
+{
+  NS_LOG_FUNCTION (this);
+}
+
+QuicEchoServer::~QuicEchoServer ()
+{
+  NS_LOG_FUNCTION (this);
+  m_socket = 0;
+  m_socket6 = 0;
+}
+
+void
+QuicEchoServer::DoDispose (void)
+{
+  NS_LOG_FUNCTION (this);
+  Application::DoDispose ();
+}
+
+void
+QuicEchoServer::StartApplication (void)
+{
+  NS_LOG_INFO ("##########  QUIC Echo Server START at time " << Simulator::Now ().GetSeconds () << " ##########");
+  NS_LOG_FUNCTION (this);
+  //il client ha bisogno di un socket udp per ogni socket quic
+  //il server per tutti i socket quic gli basta un socket udp che ascolta
+
+  if (m_socket == 0)
+    {
+      //NS_LOG_INFO("Need to create IPv4");
+      TypeId tid = TypeId::LookupByName ("ns3::QuicSocketFactory");
+      //NS_LOG_INFO("node is "<< GetNode());
+      m_socket = Socket::CreateSocket (GetNode (), tid);
+      NotifySocketCreation(m_socket);
+      //NS_LOG_INFO("Created IPv4 socket");
+      InetSocketAddress local = InetSocketAddress (Ipv4Address::GetAny (), m_port);
+      if (m_socket->Bind (local) == -1)
+        {
+          NS_FATAL_ERROR ("Failed to bind socket");
+        }
+      if (addressUtils::IsMulticast (m_local))
+        {
+          NS_FATAL_ERROR ("Error: Failed to join multicast group");
+        }
+    }
+
+//  if (m_socket6 == 0)
+//    {
+//      NS_LOG_INFO("Need to create IPv6");
+//      TypeId tid = TypeId::LookupByName ("ns3::QuicSocketFactory");
+//      m_socket6 = Socket::CreateSocket (GetNode (), tid);
+//      Inet6SocketAddress local6 = Inet6SocketAddress (Ipv6Address::GetAny (), m_port);
+//      if (m_socket6->Bind (local6) == -1)
+//        {
+//          NS_FATAL_ERROR ("Failed to bind socket");
+//        }
+//      if (addressUtils::IsMulticast (local6))
+//      {
+//       NS_FATAL_ERROR ("Error: Failed to join multicast group");
+//      }
+//    }
+
+  m_socket->Listen ();
+  m_socket->SetRecvCallback (MakeCallback (&QuicEchoServer::HandleRead, this));
+  //m_socket6->SetRecvCallback (MakeCallback (&QuicEchoServer::HandleRead, this));
+}
+
+void
+QuicEchoServer::StopApplication ()
+{
+  NS_LOG_INFO ("##########  QUIC Echo Server STOP at time " << Simulator::Now ().GetSeconds () << " ##########");
+  NS_LOG_FUNCTION (this);
+  if (m_socket != 0)
+    {
+      m_socket->Close ();
+      m_socket->SetRecvCallback (MakeNullCallback<void, Ptr<Socket> > ());
+    }
+  if (m_socket6 != 0)
+    {
+      m_socket6->Close ();
+      m_socket6->SetRecvCallback (MakeNullCallback<void, Ptr<Socket> > ());
+    }
+}
+
+void
+QuicEchoServer::HandleRead (Ptr<Socket> socket)
+{
+  NS_LOG_INFO ("QUIC Echo Server RECEIVING at time " << Simulator::Now ().GetSeconds ());
+  NS_LOG_FUNCTION (this);
+
+  Ptr<Packet> packet;
+  Address from;
+  while ((packet = socket->RecvFrom (from)))
+    {
+      m_totalReceived++;
+      if (InetSocketAddress::IsMatchingType (from))
+        {
+          NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s server received " << packet->GetSize () << " bytes from " <<
+                       InetSocketAddress::ConvertFrom (from).GetIpv4 () << " port " <<
+                       InetSocketAddress::ConvertFrom (from).GetPort ());
+        }
+      else if (Inet6SocketAddress::IsMatchingType (from))
+        {
+          NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s server received " << packet->GetSize () << " bytes from " <<
+                       Inet6SocketAddress::ConvertFrom (from).GetIpv6 () << " port " <<
+                       Inet6SocketAddress::ConvertFrom (from).GetPort ());
+        }
+
+      packet->RemoveAllPacketTags ();
+      packet->RemoveAllByteTags ();
+
+      // print the received packet
+      uint8_t *buffer = new uint8_t[packet->GetSize ()];
+      packet->CopyData (buffer, packet->GetSize ());
+      std::string s = std::string ((char*)buffer);
+      delete[] buffer;
+      NS_LOG_INFO ("Server received: " << s);
+
+      if (s != "CONNECTION_CLOSE" && m_totalReceived % m_echonNth == 0)
+      {
+        for (uint32_t i = 0; i < m_echoCount; i++)
+        {
+          Simulator::Schedule(i * m_echoInterval, &QuicEchoServer::EchoPacket, this, socket, packet, from);
+        }
+
+      }
+    }
+}
+
+void
+QuicEchoServer::EchoPacket(Ptr<Socket> socket, Ptr<Packet> packet, Address dest)
+{
+  NS_LOG_INFO ("QUIC Echo Server ECHOING at time " << Simulator::Now ().GetSeconds ());
+  int res = socket->SendTo (packet, 0, dest); //DEBUG: Shouldn't this consider the stream id attribute?
+  if (res == -1)
+  {
+    NS_LOG_WARN("QUIC Echo Server: Echo failed (socket error).");
+    m_totalSentFail++;
+  }
+  else
+  {
+    m_totalSentSuccess++;
+    if (InetSocketAddress::IsMatchingType (dest))
+      {
+        NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s server sent " << packet->GetSize () << " bytes to " <<
+                    InetSocketAddress::ConvertFrom (dest).GetIpv4 () << " port " <<
+                    InetSocketAddress::ConvertFrom (dest).GetPort ());
+      }
+    else if (Inet6SocketAddress::IsMatchingType (dest))
+      {
+        NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s server sent " << packet->GetSize () << " bytes to " <<
+                    Inet6SocketAddress::ConvertFrom (dest).GetIpv6 () << " port " <<
+                    Inet6SocketAddress::ConvertFrom (dest).GetPort ());
+      }
+  }
+}
+
+Ptr<Socket>
+QuicEchoServer::GetSocket ()
+{
+  return m_socket;
+}
+
+void
+QuicEchoServer::SetStreamId (uint32_t streamId)
+{
+  NS_LOG_FUNCTION (this << streamId);
+  NS_ABORT_MSG_IF (streamId == 0, "Stream 0 cannot be used for application data");
+
+  m_streamId = streamId;
+}
+
+uint32_t
+QuicEchoServer::GetStreamId (void) const
+{
+  return m_streamId;
+}
+
+} // Namespace ns3
diff --git a/src/applications/model/quic-echo-server.h b/src/applications/model/quic-echo-server.h
new file mode 100644
index 000000000..71c9eaf3c
--- /dev/null
+++ b/src/applications/model/quic-echo-server.h
@@ -0,0 +1,107 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Davide Marcato <davide.marcato.4@studenti.unipd.it>
+ *          Stefano Ravazzolo <stefano.ravazzolo@studenti.unipd.it>
+ *          Alvise De Biasio <alvise.debiasio@studenti.unipd.it>
+ */
+
+#ifndef QUIC_ECHO_SERVER_H
+#define QUIC_ECHO_SERVER_H
+
+#include "ns3/application.h"
+#include "ns3/event-id.h"
+#include "ns3/ptr.h"
+#include "ns3/address.h"
+#include "ns3/application-stats.h"
+
+namespace ns3 {
+
+class Socket;
+class Packet;
+
+/**
+ * \ingroup applications
+ * \defgroup quicecho QuicEcho
+ */
+
+/**
+ * \ingroup quicecho
+ * \brief A Quic Echo server
+ *
+ * Every packet received is sent back.
+ */
+class QuicEchoServer : public Application, public ApplicationStats
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+  QuicEchoServer ();
+  virtual ~QuicEchoServer ();
+
+  Ptr<Socket> GetSocket ();
+
+  /**
+   * Set the ID of the stream to be used in the underlying QUIC socket
+   *
+   * \param streamId the ID of the stream (>0)
+   */
+  void SetStreamId (uint32_t streamId);
+
+  /**
+   * Get the stream ID to be used in the underlying QUIC socket
+   *
+   * \return the stream ID
+   */
+  uint32_t GetStreamId (void) const;
+
+protected:
+  virtual void DoDispose (void);
+
+private:
+
+  virtual void StartApplication (void);
+  virtual void StopApplication (void);
+
+  /**
+   * \brief Handle a packet reception.
+   *
+   * This function is called by lower layers.
+   *
+   * \param socket the socket the packet was received to.
+   */
+  void HandleRead (Ptr<Socket> socket);
+
+  void EchoPacket(Ptr<Socket> socket, Ptr<Packet> packet, Address dest);
+
+
+  uint16_t m_port; //!< Port on which we listen for incoming packets.
+  Ptr<Socket> m_socket; //!< IPv4 Socket
+  Ptr<Socket> m_socket6; //!< IPv6 Socket
+  Address m_local; //!< local multicast address
+  uint32_t m_echonNth; //!< Echo every nth packet (i.e., for value 1, echoes every packet)
+  uint32_t m_echoCount; //!< How many times to send each echoed packet
+  Time m_echoInterval; //!< How many times to send each echoed packet
+
+  uint32_t m_streamId;
+};
+
+} // namespace ns3
+
+#endif /* QUIC_ECHO_SERVER_H */
+
diff --git a/src/applications/model/quic-server.cc b/src/applications/model/quic-server.cc
new file mode 100644
index 000000000..2fcb541cd
--- /dev/null
+++ b/src/applications/model/quic-server.cc
@@ -0,0 +1,184 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ *  Copyright (c) 2007,2008,2009 INRIA, UDCAST
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Amine Ismail <amine.ismail@sophia.inria.fr>
+ *                      <amine.ismail@udcast.com>
+ */
+
+#include "ns3/log.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/nstime.h"
+#include "ns3/inet-socket-address.h"
+#include "ns3/inet6-socket-address.h"
+#include "ns3/socket.h"
+#include "ns3/simulator.h"
+#include "ns3/socket-factory.h"
+#include "ns3/packet.h"
+#include "ns3/uinteger.h"
+#include "ns3/string.h"
+#include "packet-loss-counter.h"
+
+#include "seq-ts-header.h"
+#include "quic-server.h"
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("QuicServer");
+
+NS_OBJECT_ENSURE_REGISTERED (QuicServer);
+
+
+TypeId
+QuicServer::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicServer")
+    .SetParent<Application> ()
+    .SetGroupName ("Applications")
+    .AddConstructor<QuicServer> ()
+    .AddAttribute ("Port",
+                   "Port on which we listen for incoming packets.",
+                   UintegerValue (100),
+                   MakeUintegerAccessor (&QuicServer::m_port),
+                   MakeUintegerChecker<uint16_t> ())
+    .AddAttribute ("PacketWindowSize",
+                   "The size of the window used to compute the packet loss. This value should be a multiple of 8.",
+                   UintegerValue (128),
+                   MakeUintegerAccessor (&QuicServer::GetPacketWindowSize,
+                                         &QuicServer::SetPacketWindowSize),
+                   MakeUintegerChecker<uint16_t> (8,256))
+    .AddAttribute ("OutputFilename",
+                   "A string with the name of the file in which rx packets will be logged",
+                   StringValue ("QuicServerRx.txt"),
+                   MakeStringAccessor (&QuicServer::m_outFilename),
+                   MakeStringChecker ())
+  ;
+  return tid;
+}
+
+QuicServer::QuicServer ()
+  : m_lossCounter (0)
+{
+  NS_LOG_FUNCTION (this);
+  m_received = 0;
+}
+
+QuicServer::~QuicServer ()
+{
+  NS_LOG_FUNCTION (this);
+}
+
+uint16_t
+QuicServer::GetPacketWindowSize () const
+{
+  NS_LOG_FUNCTION (this);
+  return m_lossCounter.GetBitMapSize ();
+}
+
+void
+QuicServer::SetPacketWindowSize (uint16_t size)
+{
+  NS_LOG_FUNCTION (this << size);
+  m_lossCounter.SetBitMapSize (size);
+}
+
+uint32_t
+QuicServer::GetLost (void) const
+{
+  NS_LOG_FUNCTION (this);
+  return m_lossCounter.GetLost ();
+}
+
+uint64_t
+QuicServer::GetReceived (void) const
+{
+  NS_LOG_FUNCTION (this);
+  return m_received;
+}
+
+void
+QuicServer::DoDispose (void)
+{
+  NS_LOG_FUNCTION (this);
+  Application::DoDispose ();
+}
+
+void
+QuicServer::StartApplication (void)
+{
+  NS_LOG_FUNCTION (this);
+
+  if (m_socket == 0)
+    {
+      TypeId tid = TypeId::LookupByName ("ns3::QuicSocketFactory");
+      m_socket = Socket::CreateSocket (GetNode (), tid);
+      NotifySocketCreation(m_socket);
+      InetSocketAddress local = InetSocketAddress (Ipv4Address::GetAny (),
+                                                   m_port);
+      if (m_socket->Bind (local) == -1)
+        {
+          NS_FATAL_ERROR ("Failed to bind socket");
+        }
+    }
+
+  m_socket->Listen ();
+  m_socket->SetRecvCallback (MakeCallback (&QuicServer::HandleRead, this));
+
+  if (m_socket6 == 0)
+    {
+      TypeId tid = TypeId::LookupByName ("ns3::QuicSocketFactory");
+      m_socket6 = Socket::CreateSocket (GetNode (), tid);
+      NotifySocketCreation(m_socket6);
+      Inet6SocketAddress local = Inet6SocketAddress (Ipv6Address::GetAny (),
+                                                     m_port);
+      if (m_socket6->Bind (local) == -1)
+        {
+          NS_FATAL_ERROR ("Failed to bind socket");
+        }
+    }
+
+  m_socket->Listen ();
+  m_socket6->SetRecvCallback (MakeCallback (&QuicServer::HandleRead, this));
+
+}
+
+void
+QuicServer::StopApplication ()
+{
+  NS_LOG_FUNCTION (this);
+
+  if (m_socket != 0)
+    {
+      m_socket->SetRecvCallback (MakeNullCallback<void, Ptr<Socket> > ());
+    }
+}
+
+void
+QuicServer::HandleRead (Ptr<Socket> socket)
+{
+  NS_LOG_FUNCTION (this << socket);
+  Ptr<Packet> packet;
+  Address from;
+  while ((packet = socket->RecvFrom (from)))
+    {
+      if (packet->GetSize () > 0)
+        {
+          m_received++;
+        }
+    }
+}
+
+} // Namespace ns3
diff --git a/src/applications/model/quic-server.h b/src/applications/model/quic-server.h
new file mode 100644
index 000000000..630630266
--- /dev/null
+++ b/src/applications/model/quic-server.h
@@ -0,0 +1,118 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2007,2008,2009 INRIA, UDCAST
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Amine Ismail <amine.ismail@sophia.inria.fr>
+ *                      <amine.ismail@udcast.com>
+ *
+ */
+
+#ifndef QUIC_SERVER_H
+#define QUIC_SERVER_H
+
+#include "ns3/application.h"
+#include "ns3/event-id.h"
+#include "ns3/ptr.h"
+#include "ns3/address.h"
+#include "packet-loss-counter.h"
+#include <iostream>
+#include <fstream>
+
+namespace ns3 {
+/**
+ * \ingroup applications
+ * \defgroup quicclientserver QuicClientServer
+ */
+
+/**
+ * \ingroup quicclientserver
+ *
+ * \brief A QUIC server, receives QUIC packets from a remote host.
+ *
+ * QUIC packets carry a 32bits sequence number followed by a 64bits time
+ * stamp in their payloads. The application uses the sequence number
+ * to determine if a packet is lost, and the time stamp to compute the delay.
+ */
+class QuicServer : public Application
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+  QuicServer ();
+  virtual ~QuicServer ();
+  /**
+   * \brief Returns the number of lost packets
+   * \return the number of lost packets
+   */
+  uint32_t GetLost (void) const;
+
+  /**
+   * \brief Returns the number of received packets
+   * \return the number of received packets
+   */
+  uint64_t GetReceived (void) const;
+
+  /**
+   * \brief Returns the size of the window used for checking loss.
+   * \return the size of the window used for checking loss.
+   */
+  uint16_t GetPacketWindowSize () const;
+
+  /**
+   * \brief Set the size of the window used for checking loss. This value should
+   *  be a multiple of 8
+   * \param size the size of the window used for checking loss. This value should
+   *  be a multiple of 8
+   */
+  void SetPacketWindowSize (uint16_t size);
+
+protected:
+  virtual void DoDispose (void);
+
+private:
+
+  virtual void StartApplication (void);
+  virtual void StopApplication (void);
+
+  /**
+   * \brief Handle a packet reception.
+   *
+   * This function is called by lower layers.
+   *
+   * \param socket the socket the packet was received to.
+   */
+  void HandleRead (Ptr<Socket> socket);
+
+  uint16_t m_port; //!< Port on which we listen for incoming packets.
+  Ptr<Socket> m_socket; //!< IPv4 Socket
+  Ptr<Socket> m_socket6; //!< IPv6 Socket
+  uint64_t m_received; //!< Number of received packets
+  PacketLossCounter m_lossCounter; //!< Lost packet counter
+
+  Time m_txTs; //!< Time at which the last packet with header was received
+  // uint32_t m_currentSequenceNumber; //!< SN of the last packet with header
+  // uint32_t m_hSize; //!< Size of the last header received
+
+  std::string m_outFilename;
+  std::ofstream m_outFile;
+};
+
+} // namespace ns3
+
+#endif /* QUIC_SERVER_H */
diff --git a/src/applications/model/quic-trigger-application.cc b/src/applications/model/quic-trigger-application.cc
new file mode 100644
index 000000000..1ccec0c10
--- /dev/null
+++ b/src/applications/model/quic-trigger-application.cc
@@ -0,0 +1,195 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+
+#include "quic-trigger-application.h"
+
+namespace ns3
+{
+
+NS_LOG_COMPONENT_DEFINE ("QuicTriggerApplication");
+NS_OBJECT_ENSURE_REGISTERED (QuicTriggerApplication);
+
+TypeId 
+QuicTriggerApplication::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicTriggerApplication")
+    .SetParent<TriggerApplication> ()
+    .SetGroupName("Applications")
+  ;
+  return tid;
+}
+
+QuicTriggerApplication::QuicTriggerApplication() : m_socket (0), m_connected (false), m_unsentPacket (0)
+{
+  NS_LOG_FUNCTION (this);
+}
+
+QuicTriggerApplication::~QuicTriggerApplication()
+{
+  NS_LOG_FUNCTION (this);
+}
+
+void
+QuicTriggerApplication::DoDispose (void)
+{
+  NS_LOG_FUNCTION (this);
+  m_socket = 0;
+  m_unsentPacket = 0;
+  // chain up
+  Application::DoDispose ();
+}
+
+
+
+void
+QuicTriggerApplication::SendData()
+{
+  NS_LOG_FUNCTION (this);
+  if (!m_connected)
+    return;
+  while (!m_packetQueue.empty() || m_unsentPacket)
+  { // Time to send more
+
+    uint32_t toSend;
+    Ptr<Packet> packet;
+
+    if (m_unsentPacket)
+    {
+      packet = m_unsentPacket;
+      toSend = packet->GetSize ();
+    }
+    else
+    {
+      PacketSendReq &sreq = m_packetQueue.front();
+      toSend = std::min(sreq.totalBytes, sreq.maxBytesPerPkt);
+
+      bool finalPacket = false;
+      if (toSend <= TransmissionProfile::MIN_PACKET_SIZE)
+      {
+        if (toSend < sreq.totalBytes)
+            NS_FATAL_ERROR("Invalid packet size in trigger application");
+        //Make final packet at least min size
+        toSend = TransmissionProfile::MIN_PACKET_SIZE;
+        finalPacket = true;
+      }
+      else if (toSend == sreq.totalBytes){
+        finalPacket = true;
+      }
+      else
+      {
+          uint32_t remaining = sreq.totalBytes - toSend;
+          if (remaining < TransmissionProfile::MIN_PACKET_SIZE)
+          {
+            //The remaining packet would not have enough bytes
+            //First, try to make the current one smaller
+            if (toSend - TransmissionProfile::MIN_PACKET_SIZE >= TransmissionProfile::MIN_PACKET_SIZE - remaining)
+            {
+              toSend -= (TransmissionProfile::MIN_PACKET_SIZE - remaining);
+            }
+            else
+            {
+              //This packet is not big enough to make it smaller, so make it bigger instead
+              finalPacket = true;
+              toSend += remaining;
+            }
+          }
+      }
+
+      if (finalPacket)
+      {
+        m_packetQueue.pop();
+        if (sreq.includeFinal)
+        {
+          std::string msg = TriggerApplication::FINAL_MESSAGE;
+          //String size does not include null termination, so add 1
+          NS_ASSERT(msg.size() + 1 <= toSend);
+          msg.insert(msg.begin(), toSend - (msg.size() + 1), ' ');
+          packet = Create<Packet> (reinterpret_cast<const uint8_t*>(msg.c_str()), toSend);
+        }
+        else
+        {
+          packet = Create<Packet> (toSend);
+        }
+      }
+      else
+      {
+        NS_ASSERT(sreq.totalBytes > toSend);
+        sreq.totalBytes -= toSend;
+        packet = Create<Packet> (toSend);
+      }
+
+    }
+    if (!m_unsentPacket)
+      NS_ASSERT(packet->GetSize() >= TransmissionProfile::MIN_PACKET_SIZE);
+    int actual = m_socket->Send (packet);
+    if ((unsigned) actual == toSend)
+    {
+      m_unsentPacket = 0;
+      m_totalSentSuccess++;
+      NS_LOG_INFO ("QUIC trigger application succesfully sent packet with size " << std::to_string(packet->GetSize()));
+    }
+    else if (actual <= 0)
+    {
+      // We exit this loop when actual < toSend as the send side
+      // buffer is full. The "DataSent" callback will pop when
+      // some buffer space has freed up.
+      NS_LOG_DEBUG ("Unable to send packet; caching for later attempt");
+      m_unsentPacket = packet;
+      m_totalSentFail++;
+      break;
+    }
+    else if (actual > 0 && (unsigned) actual < toSend)
+    {
+      // A Linux socket (non-blocking, such as in DCE) may return
+      // a quantity less than the packet size. Split the packet
+      // into two, trace the sent packet, save the unsent packet
+      NS_LOG_DEBUG ("Packet size: " << packet->GetSize () << "; sent: " << actual << "; fragment saved: " << toSend - (unsigned) actual);
+      // Ptr<Packet> sent = packet->CreateFragment (0, actual);
+      Ptr<Packet> unsent = packet->CreateFragment (actual, (toSend - (unsigned) actual));
+      m_unsentPacket = unsent;
+      m_totalSentSuccess++;
+      m_totalSentFail++;
+      break;
+    }
+    else
+    {
+      NS_FATAL_ERROR ("Unexpected return value from m_socket->Send ()");
+    }
+  }
+}
+
+void QuicTriggerApplication::DataSend (Ptr<Socket> socket, uint32_t)
+{
+  NS_LOG_FUNCTION (this);
+  SendData ();
+}
+
+void
+QuicTriggerApplication::HandleRead (Ptr<Socket> socket)
+{
+  if (m_socket == 0)
+    m_socket = socket;
+  NS_ASSERT(m_socket == socket);
+  Ptr<Packet> recvP;
+  while (recvP = socket->Recv())
+  {
+    m_totalReceived++;
+    uint8_t *buffer = new uint8_t[recvP->GetSize ()];
+    recvP->CopyData(buffer, recvP->GetSize());
+    std::string recvMsg = std::string ((char*)buffer);
+    delete[] buffer;
+
+    if (recvMsg.find(TriggerApplication::FINAL_MESSAGE) != std::string::npos)
+    {
+      NS_LOG_DEBUG("Final packet received.");
+      HandleFinalPktRecv();
+    }
+    else
+    {
+      HandleNormalPktRecv();
+    }
+  }
+  
+}
+
+
+} // namespace ns3
diff --git a/src/applications/model/quic-trigger-application.h b/src/applications/model/quic-trigger-application.h
new file mode 100644
index 000000000..27d27830e
--- /dev/null
+++ b/src/applications/model/quic-trigger-application.h
@@ -0,0 +1,44 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+
+#ifndef QUIC_TRIGGER_APPLICATION_H
+#define QUIC_TRIGGER_APPLICATION_H
+
+#include "ns3/trigger-application.h"
+#include "ns3/uinteger.h"
+
+namespace ns3
+{
+
+class QuicTriggerApplication : public TriggerApplication
+{
+public:
+
+  static TypeId GetTypeId (void);
+  QuicTriggerApplication ();
+  virtual ~QuicTriggerApplication ();
+
+protected:
+  virtual void DoDispose (void);
+
+  virtual void SendData();
+
+  void DataSend (Ptr<Socket> socket, uint32_t);
+  void HandleRead (Ptr<Socket> socket);
+
+  Ptr<Socket> m_socket; //!< Socket used to communciate with the peer
+  bool m_connected;
+  Ptr<Packet> m_unsentPacket; //!< Cache unsent packet
+
+
+private:
+  virtual void StartApplication (void) = 0;
+  virtual void StopApplication (void) = 0;
+};
+
+
+
+
+} // namespace ns3
+
+
+#endif // QUIC_TRIGGER_APPLICATION_H
\ No newline at end of file
diff --git a/src/applications/model/quic-trigger-client.cc b/src/applications/model/quic-trigger-client.cc
new file mode 100644
index 000000000..1891b2ff2
--- /dev/null
+++ b/src/applications/model/quic-trigger-client.cc
@@ -0,0 +1,128 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+
+#include "quic-trigger-client.h"
+
+namespace ns3
+{
+
+NS_LOG_COMPONENT_DEFINE ("QuicTriggerClient");
+NS_OBJECT_ENSURE_REGISTERED (QuicTriggerClient);
+
+TypeId 
+QuicTriggerClient::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicTriggerClient")
+    .SetParent<QuicTriggerApplication> ()
+    .SetGroupName("Applications")
+    .AddConstructor<QuicTriggerClient> ()
+    .AddAttribute ("RemoteAddress",
+                   "The destination Address of the outbound packets",
+                   AddressValue (),
+                   MakeAddressAccessor (&QuicTriggerClient::m_peerAddress),
+                   MakeAddressChecker ())
+    .AddAttribute ("RemotePort", "The destination port of the outbound packets",
+                   UintegerValue (100),
+                   MakeUintegerAccessor (&QuicTriggerClient::m_peerPort),
+                   MakeUintegerChecker<uint16_t> ())
+  ;
+  return tid;
+}
+
+QuicTriggerClient::QuicTriggerClient()
+{
+  NS_LOG_FUNCTION (this);
+}
+
+QuicTriggerClient::~QuicTriggerClient()
+{
+  NS_LOG_FUNCTION (this);
+}
+void
+QuicTriggerClient::StartApplication()
+{
+  NS_LOG_FUNCTION (this);
+  Address from;
+
+  // Create the socket if not already
+  if (!m_socket)
+  {
+    TypeId tid = TypeId::LookupByName ("ns3::QuicSocketFactory");
+    m_socket = Socket::CreateSocket (GetNode (), tid);
+    NotifySocketCreation(m_socket);
+
+    if (Ipv4Address::IsMatchingType (m_peerAddress) == true)
+    {
+      if (m_socket->Bind () == -1)
+      {
+        NS_FATAL_ERROR ("Failed to bind socket");
+      }
+      m_socket->Connect (InetSocketAddress (Ipv4Address::ConvertFrom (m_peerAddress), m_peerPort));
+    }
+    else if (Ipv6Address::IsMatchingType (m_peerAddress) == true)
+    {
+      if (m_socket->Bind6 () == -1)
+      {
+        NS_FATAL_ERROR ("Failed to bind socket");
+      }
+      m_socket->Connect (Inet6SocketAddress (Ipv6Address::ConvertFrom (m_peerAddress), m_peerPort));
+    }
+    else if (InetSocketAddress::IsMatchingType (m_peerAddress) == true)
+    {
+      if (m_socket->Bind () == -1)
+      {
+        NS_FATAL_ERROR ("Failed to bind socket");
+      }
+      m_socket->Connect (m_peerAddress);
+    }
+    else if (Inet6SocketAddress::IsMatchingType (m_peerAddress) == true)
+    {
+      if (m_socket->Bind6 () == -1) \
+      {
+        NS_FATAL_ERROR ("Failed to bind socket");
+      }
+      m_socket->Connect (m_peerAddress);
+    }
+    else
+    {
+      NS_ASSERT_MSG (false, "Incompatible address type: " << m_peerAddress);
+    }
+
+    m_socket->SetConnectCallback (
+      MakeCallback (&QuicTriggerClient::ConnectionSucceeded, this),
+      MakeCallback (&QuicTriggerClient::ConnectionFailed, this));
+    m_socket->SetSendCallback (MakeCallback (&QuicTriggerClient::DataSend, this));
+    m_socket->SetRecvCallback (MakeCallback (&QuicTriggerClient::HandleRead, this));
+  }
+}
+
+void
+QuicTriggerClient::StopApplication()
+{
+  NS_LOG_FUNCTION (this);
+  if (m_socket != 0)
+  {
+    m_socket->Close ();
+    m_connected = false;
+  }
+  else
+  {
+    NS_LOG_WARN ("QuicTriggerClient found null socket to close in StopApplication");
+  }
+}
+
+void QuicTriggerClient::ConnectionSucceeded (Ptr<Socket> socket)
+{
+  NS_LOG_FUNCTION (this << socket);
+  NS_LOG_LOGIC ("QuicTriggerClient Connection succeeded");
+  m_connected = true;
+  HandleConnEst();
+  SendData ();
+}
+
+void QuicTriggerClient::ConnectionFailed (Ptr<Socket> socket)
+{
+  NS_LOG_FUNCTION (this << socket);
+  NS_LOG_WARN ("QuicTriggerClient Connection Failed");
+}
+
+} // namespace ns3
diff --git a/src/applications/model/quic-trigger-client.h b/src/applications/model/quic-trigger-client.h
new file mode 100644
index 000000000..accda7d8f
--- /dev/null
+++ b/src/applications/model/quic-trigger-client.h
@@ -0,0 +1,33 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+
+#ifndef QUIC_TRIGGER_CLIENT_H
+#define QUIC_TRIGGER_CLIENT_H
+
+#include "ns3/quic-trigger-application.h"
+
+namespace ns3
+{
+
+class QuicTriggerClient : public QuicTriggerApplication
+{
+public:
+  static TypeId GetTypeId (void);
+  QuicTriggerClient ();
+  virtual ~QuicTriggerClient ();
+
+protected:
+  void ConnectionSucceeded (Ptr<Socket> socket);
+  void ConnectionFailed (Ptr<Socket> socket);
+
+private:
+  virtual void StartApplication (void);
+  virtual void StopApplication (void);
+
+  Address m_peerAddress; //!< Remote peer address
+  uint16_t m_peerPort; //!< Remote peer port
+
+};
+
+} // namespace ns3
+
+#endif // QUIC_TRIGGER_CLIENT_H
\ No newline at end of file
diff --git a/src/applications/model/quic-trigger-server.cc b/src/applications/model/quic-trigger-server.cc
new file mode 100644
index 000000000..157590b97
--- /dev/null
+++ b/src/applications/model/quic-trigger-server.cc
@@ -0,0 +1,82 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+
+#include "quic-trigger-server.h"
+
+namespace ns3
+{
+
+NS_LOG_COMPONENT_DEFINE ("QuicTriggerServer");
+NS_OBJECT_ENSURE_REGISTERED (QuicTriggerServer);
+
+TypeId 
+QuicTriggerServer::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicTriggerServer")
+    .SetParent<QuicTriggerApplication> ()
+    .SetGroupName("Applications")
+    .AddConstructor<QuicTriggerServer> ()
+    .AddAttribute ("Port",
+                   "Port on which we listen for incoming packets.",
+                   UintegerValue (100),
+                   MakeUintegerAccessor (&QuicTriggerServer::m_port),
+                   MakeUintegerChecker<uint16_t> ())
+  ;
+  return tid;
+}
+
+QuicTriggerServer::QuicTriggerServer() : m_listenSocket (0)
+{
+  NS_LOG_FUNCTION (this);
+}
+
+QuicTriggerServer::~QuicTriggerServer()
+{
+  NS_LOG_FUNCTION (this);
+}
+
+void
+QuicTriggerServer::StartApplication()
+{
+  NS_LOG_FUNCTION (this);
+  if (m_listenSocket == 0)
+  {
+    TypeId tid = TypeId::LookupByName ("ns3::QuicSocketFactory");
+    m_listenSocket = Socket::CreateSocket (GetNode (), tid);
+    NotifySocketCreation(m_listenSocket);
+    InetSocketAddress local = InetSocketAddress (Ipv4Address::GetAny (),
+                                                  m_port);
+    if (m_listenSocket->Bind (local) == -1)
+    {
+      NS_FATAL_ERROR ("Failed to bind socket");
+    }
+  }
+  m_listenSocket->Listen ();
+  m_listenSocket->SetRecvCallback (MakeCallback (&QuicTriggerServer::HandleRead, this));
+  
+}
+
+void
+QuicTriggerServer::StopApplication()
+{
+  NS_LOG_FUNCTION (this);
+  if (m_socket != 0)
+  {
+    m_socket->Close();
+    m_connected = false;
+  }
+  else
+  {
+    NS_LOG_WARN ("QuicTriggerServer found null peer socket to close in StopApplication");
+  }
+
+  if (m_listenSocket != 0)
+  {
+    m_listenSocket->Close ();
+  }
+  else
+  {
+    NS_LOG_WARN ("QuicTriggerServer found null listen socket to close in StopApplication");
+  }
+}
+
+} // namespace ns3
diff --git a/src/applications/model/quic-trigger-server.h b/src/applications/model/quic-trigger-server.h
new file mode 100644
index 000000000..9c067a593
--- /dev/null
+++ b/src/applications/model/quic-trigger-server.h
@@ -0,0 +1,33 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+
+#ifndef QUIC_TRIGGER_SERVER_H
+#define QUIC_TRIGGER_SERVER_H
+
+#include "ns3/quic-trigger-application.h"
+
+namespace ns3
+{
+
+class QuicTriggerServer : public QuicTriggerApplication
+{
+public:
+  static TypeId GetTypeId (void);
+  QuicTriggerServer ();
+  virtual ~QuicTriggerServer ();
+
+protected:
+
+private:
+  virtual void StartApplication (void);
+  virtual void StopApplication (void);
+
+  uint16_t m_port; //!< Port on which we listen for incoming packets.
+  Ptr<Socket> m_listenSocket; //!< Socket used to listen on
+  
+    
+};
+
+} // namespace ns3
+
+
+#endif // QUIC_TRIGGER_SERVER_H
\ No newline at end of file
diff --git a/src/applications/model/tcp-client.cc b/src/applications/model/tcp-client.cc
new file mode 100644
index 000000000..614f12b8d
--- /dev/null
+++ b/src/applications/model/tcp-client.cc
@@ -0,0 +1,232 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2007,2008,2009 INRIA, UDCAST
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Amine Ismail <amine.ismail@sophia.inria.fr>
+ *                      <amine.ismail@udcast.com>
+ */
+#include "ns3/log.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/nstime.h"
+#include "ns3/inet-socket-address.h"
+#include "ns3/inet6-socket-address.h"
+#include "ns3/socket.h"
+#include "ns3/simulator.h"
+#include "ns3/socket-factory.h"
+#include "ns3/packet.h"
+#include "ns3/uinteger.h"
+#include "tcp-client.h"
+#include "seq-ts-header.h"
+#include <cstdlib>
+#include <cstdio>
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("TcpClient");
+
+NS_OBJECT_ENSURE_REGISTERED (TcpClient);
+
+TypeId
+TcpClient::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::TcpClient")
+    .SetParent<Application> ()
+    .SetGroupName ("Applications")
+    .AddConstructor<TcpClient> ()
+    .AddAttribute ("MaxPackets",
+                   "The maximum number of packets the application will send",
+                   UintegerValue (100),
+                   MakeUintegerAccessor (&TcpClient::m_count),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddAttribute ("Interval",
+                   "The time to wait between packets", TimeValue (Seconds (1.0)),
+                   MakeTimeAccessor (&TcpClient::m_interval),
+                   MakeTimeChecker ())
+    .AddAttribute ("RemoteAddress",
+                   "The destination Address of the outbound packets",
+                   AddressValue (),
+                   MakeAddressAccessor (&TcpClient::m_peerAddress),
+                   MakeAddressChecker ())
+    .AddAttribute ("RemotePort", "The destination port of the outbound packets",
+                   UintegerValue (100),
+                   MakeUintegerAccessor (&TcpClient::m_peerPort),
+                   MakeUintegerChecker<uint16_t> ())
+    .AddAttribute ("PacketSize",
+                   "Size of packets generated. The minimum packet size is 12 bytes which is the size of the header carrying the sequence number and the time stamp.",
+                   UintegerValue (1024),
+                   MakeUintegerAccessor (&TcpClient::m_size),
+                   MakeUintegerChecker<uint32_t> (12,1500))
+  ;
+  return tid;
+}
+
+TcpClient::TcpClient ()
+{
+  NS_LOG_FUNCTION (this);
+  m_sent = 0;
+  m_socket = 0;
+  m_sendEvent = EventId ();
+}
+
+TcpClient::~TcpClient ()
+{
+  NS_LOG_FUNCTION (this);
+}
+
+void
+TcpClient::SetRemote (Address ip, uint16_t port)
+{
+  NS_LOG_FUNCTION (this << ip << port);
+  m_peerAddress = ip;
+  m_peerPort = port;
+}
+
+void
+TcpClient::SetRemote (Address addr)
+{
+  NS_LOG_FUNCTION (this << addr);
+  m_peerAddress = addr;
+}
+
+void
+TcpClient::DoDispose (void)
+{
+  NS_LOG_FUNCTION (this);
+  Application::DoDispose ();
+}
+
+void
+TcpClient::StartApplication (void)
+{
+  NS_LOG_FUNCTION (this);
+
+  if (m_socket == 0)
+    {
+      TypeId tid = TypeId::LookupByName ("ns3::TcpSocketFactory");
+      m_socket = Socket::CreateSocket (GetNode (), tid);
+      NotifySocketCreation(m_socket);
+      if (Ipv4Address::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind () == -1)
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (InetSocketAddress (Ipv4Address::ConvertFrom (m_peerAddress), m_peerPort));
+        }
+      else if (Ipv6Address::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind6 () == -1)
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (Inet6SocketAddress (Ipv6Address::ConvertFrom (m_peerAddress), m_peerPort));
+        }
+      else if (InetSocketAddress::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind () == -1)
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (m_peerAddress);
+        }
+      else if (Inet6SocketAddress::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind6 () == -1) \
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (m_peerAddress);
+        }
+      else
+        {
+          NS_ASSERT_MSG (false, "Incompatible address type: " << m_peerAddress);
+        }
+    }
+
+  m_socket->SetRecvCallback (MakeCallback (&TcpClient::HandleRead, this));
+  m_socket->SetAllowBroadcast (true);
+  m_sendEvent = Simulator::Schedule (Seconds (0), &TcpClient::Send, this);
+}
+
+void
+TcpClient::StopApplication (void)
+{
+  NS_LOG_FUNCTION (this);
+  Simulator::Cancel (m_sendEvent);
+  if (m_socket != 0)
+    {
+      m_socket->Close ();
+      m_socket = 0;
+    }
+}
+
+void
+TcpClient::Send (void)
+{
+  NS_LOG_FUNCTION (this);
+  NS_ASSERT (m_sendEvent.IsExpired ());
+  SeqTsHeader seqTs;
+  seqTs.SetSeq (m_sent);
+  // uint8_t *buffer = new uint8_t[m_size];
+  // std::string message = "Hello World";
+  // for (uint i = 0; i < message.length(); i++){
+  //   buffer[i] = message[i];
+  // }
+  Ptr<Packet> pkt = Create<Packet> (m_size); // 8+4 : the size of the seqTs header
+  // p->AddHeader (seqTs);
+  std::stringstream peerAddressStringStream;
+  if (Ipv4Address::IsMatchingType (m_peerAddress))
+    {
+      peerAddressStringStream << Ipv4Address::ConvertFrom (m_peerAddress);
+    }
+  else if (Ipv6Address::IsMatchingType (m_peerAddress))
+    {
+      peerAddressStringStream << Ipv6Address::ConvertFrom (m_peerAddress);
+    }
+
+  if ((m_socket->Send (pkt)) >= 0)
+    {
+      ++m_sent;
+      m_totalSentSuccess++;
+      NS_LOG_INFO ("TraceDelay TX " << m_size << " bytes to "
+                                    << peerAddressStringStream.str () << " Uid: "
+                                    << pkt->GetUid () << " Time: "
+                                    << (Simulator::Now ()).GetSeconds ());
+      NS_LOG_DEBUG ("TCP Client sent " << m_sent << " packets total.");
+
+    }
+  else
+    {
+      m_totalSentFail++;
+      NS_LOG_DEBUG ("Error while sending " << m_size << " bytes to "
+                                          << peerAddressStringStream.str ());
+    }
+
+  if (m_sent < m_count)
+    {
+      m_sendEvent = Simulator::Schedule (m_interval, &TcpClient::Send, this);
+    }
+}
+
+void
+TcpClient::HandleRead (Ptr<Socket> socket)
+{
+  socket->Recv(); //Needed to empty the TCP receive buffer
+  m_totalReceived++;
+}
+
+
+} // Namespace ns3
diff --git a/src/applications/model/tcp-client.h b/src/applications/model/tcp-client.h
new file mode 100644
index 000000000..dbe3dec7e
--- /dev/null
+++ b/src/applications/model/tcp-client.h
@@ -0,0 +1,98 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2007,2008,2009 INRIA, UDCAST
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Amine Ismail <amine.ismail@sophia.inria.fr>
+ *                      <amine.ismail@udcast.com>
+ *
+ */
+
+#ifndef TCP_CLIENT_H
+#define TCP_CLIENT_H
+
+#include "ns3/application.h"
+#include "ns3/event-id.h"
+#include "ns3/ptr.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/application-stats.h"
+
+namespace ns3 {
+
+class Socket;
+class Packet;
+
+/**
+ * \ingroup tcpclientserver
+ *
+ * \brief A TCP client. Sends TCP packet carrying sequence number and time stamp
+ *  in their payloads
+ *
+ */
+class TcpClient : public Application, public ApplicationStats
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+
+  TcpClient ();
+
+  virtual ~TcpClient ();
+
+  /**
+   * \brief set the remote address and port
+   * \param ip remote IP address
+   * \param port remote port
+   */
+  void SetRemote (Address ip, uint16_t port);
+  /**
+   * \brief set the remote address
+   * \param addr remote address
+   */
+  void SetRemote (Address addr);
+
+protected:
+  virtual void DoDispose (void);
+
+private:
+
+  virtual void StartApplication (void);
+  virtual void StopApplication (void);
+
+  /**
+   * \brief Send a packet
+   */
+  void Send (void);
+
+  void HandleRead (Ptr<Socket> socket);
+
+  uint32_t m_count; //!< Maximum number of packets the application will send
+  Time m_interval; //!< Packet inter-send time
+  uint32_t m_size; //!< Size of the sent packet (including the SeqTsHeader)
+
+  uint32_t m_sent; //!< Counter for sent packets
+  Ptr<Socket> m_socket; //!< Socket
+  Address m_peerAddress; //!< Remote peer address
+  uint16_t m_peerPort; //!< Remote peer port
+  EventId m_sendEvent; //!< Event to send the next packet
+
+};
+
+} // namespace ns3
+
+#endif /* TCP_CLIENT_H */
diff --git a/src/applications/model/tcp-echo-client.cc b/src/applications/model/tcp-echo-client.cc
new file mode 100644
index 000000000..9885ca302
--- /dev/null
+++ b/src/applications/model/tcp-echo-client.cc
@@ -0,0 +1,494 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Davide Marcato <davide.marcato.4@studenti.unipd.it>
+ *          Stefano Ravazzolo <stefano.ravazzolo@studenti.unipd.it>
+ *          Alvise De Biasio <alvise.debiasio@studenti.unipd.it>
+ */
+
+#include "ns3/log.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/ipv6-address.h"
+#include "ns3/nstime.h"
+#include "ns3/inet-socket-address.h"
+#include "ns3/inet6-socket-address.h"
+#include "ns3/socket.h"
+#include "ns3/simulator.h"
+#include "ns3/socket-factory.h"
+#include "ns3/packet.h"
+#include "ns3/uinteger.h"
+#include "ns3/trace-source-accessor.h"
+#include "tcp-echo-client.h"
+#include "ns3/tcp-header.h"
+
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("TcpEchoClientApplication");
+
+NS_OBJECT_ENSURE_REGISTERED (TcpEchoClient);
+
+TypeId
+TcpEchoClient::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::TcpEchoClient")
+    .SetParent<Application> ()
+    .SetGroupName ("Applications")
+    .AddConstructor<TcpEchoClient> ()
+    .AddAttribute ("MaxPackets",
+                   "The maximum number of packets the application will send",
+                   UintegerValue (100),
+                   MakeUintegerAccessor (&TcpEchoClient::m_count),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddAttribute ("Interval",
+                   "The time to wait between packets",
+                   TimeValue (Seconds (1.0)),
+                   MakeTimeAccessor (&TcpEchoClient::m_interval),
+                   MakeTimeChecker ())
+    .AddAttribute ("RemoteAddress",
+                   "The destination Address of the outbound packets",
+                   AddressValue (),
+                   MakeAddressAccessor (&TcpEchoClient::m_peerAddress),
+                   MakeAddressChecker ())
+    .AddAttribute ("RemotePort",
+                   "The destination port of the outbound packets",
+                   UintegerValue (0),
+                   MakeUintegerAccessor (&TcpEchoClient::m_peerPort),
+                   MakeUintegerChecker<uint16_t> ())
+    .AddAttribute ("PacketSize", "Size of echo data in outbound packets",
+                   UintegerValue (100),
+                   MakeUintegerAccessor (&TcpEchoClient::GetDataSize,
+                                         &TcpEchoClient::SetDataSize),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddTraceSource ("Tx", "A new packet is created and is sent",
+                     MakeTraceSourceAccessor (&TcpEchoClient::m_txTrace),
+                     "ns3::Packet::TracedCallback")
+  ;
+  return tid;
+}
+
+
+TcpEchoClient::TcpEchoClient ()
+{
+  NS_LOG_FUNCTION (this);
+  m_sent = 0;
+  m_socket = 0;
+  m_sendEvent = EventId ();
+  m_data = 0;
+  m_dataSize = 0;
+}
+
+TcpEchoClient::~TcpEchoClient ()
+{
+  NS_LOG_FUNCTION (this);
+  m_socket = 0;
+
+  delete [] m_data;
+  m_data = 0;
+  m_dataSize = 0;
+}
+
+void
+TcpEchoClient::SetRemote (Address ip, uint16_t port)
+{
+  NS_LOG_FUNCTION (this << ip << port);
+  m_peerAddress = ip;
+  m_peerPort = port;
+}
+
+void
+TcpEchoClient::SetRemote (Address addr)
+{
+  NS_LOG_FUNCTION (this << addr);
+  m_peerAddress = addr;
+}
+
+void
+TcpEchoClient::DoDispose (void)
+{
+  NS_LOG_FUNCTION (this);
+  Application::DoDispose ();
+}
+
+void
+TcpEchoClient::StartApplication (void)
+{
+  NS_LOG_INFO ("##########  TCP Echo Client START at time " << Simulator::Now ().GetSeconds () << " ##########");
+  NS_LOG_FUNCTION (this);
+
+  if (m_socket == 0)
+    {
+      TypeId tid = TypeId::LookupByName ("ns3::TcpSocketFactory");
+
+      m_socket = Socket::CreateSocket (GetNode (), tid);
+      NotifySocketCreation(m_socket);
+      if (Ipv4Address::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind () == -1)
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (InetSocketAddress (Ipv4Address::ConvertFrom (m_peerAddress), m_peerPort));
+        }
+      else if (Ipv6Address::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind6 () == -1)
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (Inet6SocketAddress (Ipv6Address::ConvertFrom (m_peerAddress), m_peerPort));
+        }
+      else if (InetSocketAddress::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind () == -1)
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (m_peerAddress);
+        }
+      else if (Inet6SocketAddress::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind6 () == -1)
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (m_peerAddress);
+        }
+      else
+        {
+          NS_ASSERT_MSG (false, "Incompatible address type: " << m_peerAddress);
+        }
+    }
+
+  m_socket->SetRecvCallback (MakeCallback (&TcpEchoClient::HandleRead, this));
+  m_socket->SetAllowBroadcast (true);
+  ScheduleTransmit (Seconds (2.));
+}
+
+void
+TcpEchoClient::StopApplication ()
+{
+  NS_LOG_INFO ("##########  TCP Echo Client STOP at time " << Simulator::Now ().GetSeconds () << " ##########");
+  NS_LOG_FUNCTION (this);
+
+  if (m_socket != 0)
+    {
+      m_socket->Close ();
+      m_socket->SetRecvCallback (MakeNullCallback<void, Ptr<Socket> > ());
+      m_socket = 0;
+    }
+
+  Simulator::Cancel (m_sendEvent);
+}
+
+void
+TcpEchoClient::SetDataSize (uint32_t dataSize)
+{
+  NS_LOG_FUNCTION (this << dataSize);
+
+  //
+  // If the client is setting the echo packet data size this way, we infer
+  // that she doesn't care about the contents of the packet at all, so
+  // neither will we.
+  //
+  delete [] m_data;
+  m_data = 0;
+  m_dataSize = 0;
+  m_size = dataSize;
+}
+
+uint32_t
+TcpEchoClient::GetDataSize (void) const
+{
+  NS_LOG_FUNCTION (this);
+  return m_size;
+}
+
+void
+TcpEchoClient::SetFill (std::string fill)
+{
+  NS_LOG_FUNCTION (this << fill);
+
+  uint32_t dataSize = fill.size () + 1;
+
+  if (dataSize != m_dataSize)
+    {
+      delete [] m_data;
+      m_data = new uint8_t [dataSize];
+      m_dataSize = dataSize;
+    }
+
+  memcpy (m_data, fill.c_str (), dataSize);
+
+  //
+  // Overwrite packet size attribute.
+  //
+  m_size = dataSize;
+}
+
+void
+TcpEchoClient::SetFill (uint8_t fill, uint32_t dataSize)
+{
+  NS_LOG_FUNCTION (this << fill << dataSize);
+  if (dataSize != m_dataSize)
+    {
+      delete [] m_data;
+      m_data = new uint8_t [dataSize];
+      m_dataSize = dataSize;
+    }
+
+  memset (m_data, fill, dataSize);
+
+  //
+  // Overwrite packet size attribute.
+  //
+  m_size = dataSize;
+}
+
+void
+TcpEchoClient::SetFill (uint8_t *fill, uint32_t fillSize, uint32_t dataSize)
+{
+  NS_LOG_FUNCTION (this << fill << fillSize << dataSize);
+  if (dataSize != m_dataSize)
+    {
+      delete [] m_data;
+      m_data = new uint8_t [dataSize];
+      m_dataSize = dataSize;
+    }
+
+  if (fillSize >= dataSize)
+    {
+      memcpy (m_data, fill, dataSize);
+      m_size = dataSize;
+      return;
+    }
+
+  //
+  // Do all but the final fill.
+  //
+  uint32_t filled = 0;
+  while (filled + fillSize < dataSize)
+    {
+      memcpy (&m_data[filled], fill, fillSize);
+      filled += fillSize;
+    }
+
+  //
+  // Last fill may be partial
+  //
+  memcpy (&m_data[filled], fill, dataSize - filled);
+
+  //
+  // Overwrite packet size attribute.
+  //
+  m_size = dataSize;
+}
+
+void
+TcpEchoClient::ScheduleTransmit (Time dt)
+{
+  NS_LOG_FUNCTION (this << dt);
+  m_sendEvent = Simulator::Schedule (dt, &TcpEchoClient::Send, this);
+}
+
+void
+TcpEchoClient::ScheduleClosing (Time dt)
+{
+  NS_LOG_FUNCTION (this << dt);
+  m_closeEvent = Simulator::Schedule (dt, &TcpEchoClient::Close, this);
+}
+
+void
+TcpEchoClient::ScheduleRestart (Time dt)
+{
+  NS_LOG_FUNCTION (this << dt);
+  m_connectEvent = Simulator::Schedule (dt, &TcpEchoClient::Restart, this);
+}
+
+void
+TcpEchoClient::Restart (void)
+{
+  NS_LOG_INFO ("##########  TCP Echo Client RESTART at time " << Simulator::Now ().GetSeconds () << " ##########");
+  NS_LOG_FUNCTION (this);
+  NS_ASSERT (m_connectEvent.IsExpired ());
+
+  TypeId tid = TypeId::LookupByName ("ns3::TcpSocketFactory");
+  //NS_LOG_INFO("node is "<< GetNode());
+  m_socket = Socket::CreateSocket (GetNode (), tid);
+  //TODO: Think about socket creation event handling
+  if (Ipv4Address::IsMatchingType (m_peerAddress) == true)
+    {
+      if (m_socket->Bind () == -1)
+        {
+          NS_FATAL_ERROR ("Failed to bind socket");
+        }
+      m_socket->Connect (InetSocketAddress (Ipv4Address::ConvertFrom (m_peerAddress), m_peerPort));
+    }
+  else if (Ipv6Address::IsMatchingType (m_peerAddress) == true)
+    {
+      if (m_socket->Bind6 () == -1)
+        {
+          NS_FATAL_ERROR ("Failed to bind socket");
+        }
+      m_socket->Connect (Inet6SocketAddress (Ipv6Address::ConvertFrom (m_peerAddress), m_peerPort));
+    }
+  else if (InetSocketAddress::IsMatchingType (m_peerAddress) == true)
+    {
+      if (m_socket->Bind () == -1)
+        {
+          NS_FATAL_ERROR ("Failed to bind socket");
+        }
+      m_socket->Connect (m_peerAddress);
+    }
+  else if (Inet6SocketAddress::IsMatchingType (m_peerAddress) == true)
+    {
+      if (m_socket->Bind6 () == -1)
+        {
+          NS_FATAL_ERROR ("Failed to bind socket");
+        }
+      m_socket->Connect (m_peerAddress);
+    }
+  else
+    {
+      NS_ASSERT_MSG (false, "Incompatible address type: " << m_peerAddress);
+    }
+
+  m_socket->SetRecvCallback (MakeCallback (&TcpEchoClient::HandleRead, this));
+  m_socket->SetAllowBroadcast (true);
+  SetFill ("Re-Hello World");
+  ScheduleTransmit (Seconds (2.));
+}
+
+
+void
+TcpEchoClient::Close (void)
+{
+  NS_LOG_INFO ("##########  TCP Echo Client CLOSING at time " << Simulator::Now ().GetSeconds () << " ##########");
+  NS_LOG_FUNCTION (this);
+  NS_ASSERT (m_closeEvent.IsExpired ());
+
+  m_socket->Close ();
+}
+
+
+void
+TcpEchoClient::Send (void)
+{
+  NS_LOG_INFO ("##########  TCP Echo Client SENDING at time " << Simulator::Now ().GetSeconds () << " ##########");
+  NS_LOG_FUNCTION (this);
+
+  NS_ASSERT (m_sendEvent.IsExpired ());
+
+  Ptr<Packet> p;
+  if (m_dataSize)
+    {
+      // If m_dataSize is non-zero, we have a data buffer of the same size that we
+      // are expected to copy and send.  This state of affairs is created if one of
+      // the Fill functions is called.  In this case, m_size must have been set
+      // to agree with m_dataSize
+      //
+      NS_ASSERT_MSG (m_dataSize == m_size, "TcpEchoClient::Send(): m_size and m_dataSize inconsistent");
+      NS_ASSERT_MSG (m_data, "TcpEchoClient::Send(): m_dataSize but no m_data");
+      p = Create<Packet> (m_data, m_dataSize);
+    }
+  else
+    {
+      NS_LOG_INFO ("no data");
+      //
+      // If m_dataSize is zero, the client has indicated that it doesn't care
+      // about the data itself either by specifying the data size by setting
+      // the corresponding attribute or by not calling a SetFill function.  In
+      // this case, we don't worry about it either.  But we do allow m_size
+      // to have a value different from the (zero) m_dataSize.
+      //
+      p = Create<Packet> (m_size);
+    }
+  // call to the trace sinks before the packet is actually sent,
+  // so that tags added to the packet can be sent as well
+  m_txTrace (p);
+
+  // send
+  int sent = m_socket->Send (p);
+
+  NS_ASSERT_MSG (sent - p->GetSize () == 0, "Could not send data (packet and sent size inconsistent)");
+
+  ++m_sent;
+
+  if (Ipv4Address::IsMatchingType (m_peerAddress))
+    {
+      NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s client sent " << m_size << " bytes to " <<
+                   Ipv4Address::ConvertFrom (m_peerAddress) << " port " << m_peerPort);
+    }
+  else if (Ipv6Address::IsMatchingType (m_peerAddress))
+    {
+      NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s client sent " << m_size << " bytes to " <<
+                   Ipv6Address::ConvertFrom (m_peerAddress) << " port " << m_peerPort);
+    }
+  else if (InetSocketAddress::IsMatchingType (m_peerAddress))
+    {
+      NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s client sent " << m_size << " bytes to " <<
+                   InetSocketAddress::ConvertFrom (m_peerAddress).GetIpv4 () << " port " << InetSocketAddress::ConvertFrom (m_peerAddress).GetPort ());
+    }
+  else if (Inet6SocketAddress::IsMatchingType (m_peerAddress))
+    {
+      NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s client sent " << m_size << " bytes to " <<
+                   Inet6SocketAddress::ConvertFrom (m_peerAddress).GetIpv6 () << " port " << Inet6SocketAddress::ConvertFrom (m_peerAddress).GetPort ());
+    }
+
+  uint8_t *buffer = new uint8_t[p->GetSize ()];
+  p->CopyData (buffer, p->GetSize ());
+  std::string s = std::string ((char*)buffer);
+  NS_LOG_INFO ("Client sent: " << s << "");
+
+  if (m_sent < m_count)
+    {
+      ScheduleTransmit (m_interval);
+    }
+}
+
+void
+TcpEchoClient::HandleRead (Ptr<Socket> socket)
+{
+  NS_LOG_INFO ("##########  TCP Echo Client RECEIVING at time " << Simulator::Now ().GetSeconds () << " ##########");
+  NS_LOG_FUNCTION (this);
+
+  Ptr<Packet> packet;
+  Address from;
+  while ((packet = socket->RecvFrom (from)))
+    {
+      packet->RemoveAllByteTags ();
+      packet->RemoveAllPacketTags ();
+
+      if (InetSocketAddress::IsMatchingType (from))
+        {
+          NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s client received " << packet->GetSize () << " bytes from " <<
+                       InetSocketAddress::ConvertFrom (from).GetIpv4 () << " port " <<
+                       InetSocketAddress::ConvertFrom (from).GetPort ());
+        }
+      else if (Inet6SocketAddress::IsMatchingType (from))
+        {
+          NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s client received " << packet->GetSize () << " bytes from " <<
+                       Inet6SocketAddress::ConvertFrom (from).GetIpv6 () << " port " <<
+                       Inet6SocketAddress::ConvertFrom (from).GetPort ());
+        }
+
+      uint8_t *buffer = new uint8_t[packet->GetSize ()];
+      packet->CopyData (buffer, packet->GetSize ());
+      std::string s = std::string ((char*)buffer);
+      NS_LOG_INFO ("Client received: " << s << "");
+    }
+}
+
+} // Namespace ns3
diff --git a/src/applications/model/tcp-echo-client.h b/src/applications/model/tcp-echo-client.h
new file mode 100644
index 000000000..33949f22b
--- /dev/null
+++ b/src/applications/model/tcp-echo-client.h
@@ -0,0 +1,192 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Davide Marcato <davide.marcato.4@studenti.unipd.it>
+ *          Stefano Ravazzolo <stefano.ravazzolo@studenti.unipd.it>
+ *          Alvise De Biasio <alvise.debiasio@studenti.unipd.it>
+ */
+
+#ifndef TCP_ECHO_CLIENT_H
+#define TCP_ECHO_CLIENT_H
+
+#include "ns3/application.h"
+#include "ns3/event-id.h"
+#include "ns3/ptr.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/traced-callback.h"
+
+namespace ns3 {
+
+class Socket;
+class Packet;
+
+/**
+ * \ingroup tcpecho
+ * \brief A Tcp Echo client
+ *
+ * Every packet sent should be returned by the server and received here.
+ */
+class TcpEchoClient : public Application
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+
+  TcpEchoClient ();
+
+  virtual ~TcpEchoClient ();
+
+  /**
+   * \brief set the remote address and port
+   * \param ip remote IP address
+   * \param port remote port
+   */
+  void SetRemote (Address ip, uint16_t port);
+  /**
+   * \brief set the remote address
+   * \param addr remote address
+   */
+  void SetRemote (Address addr);
+
+  /**
+   * Set the data size of the packet (the number of bytes that are sent as data
+   * to the server).  The contents of the data are set to unspecified (don't
+   * care) by this call.
+   *
+   * \warning If you have set the fill data for the echo client using one of the
+   * SetFill calls, this will undo those effects.
+   *
+   * \param dataSize The size of the echo data you want to sent.
+   */
+  void SetDataSize (uint32_t dataSize);
+
+  /**
+   * Get the number of data bytes that will be sent to the server.
+   *
+   * \warning The number of bytes may be modified by calling any one of the
+   * SetFill methods.  If you have called SetFill, then the number of
+   * data bytes will correspond to the size of an initialized data buffer.
+   * If you have not called a SetFill method, the number of data bytes will
+   * correspond to the number of don't care bytes that will be sent.
+   *
+   * \returns The number of data bytes.
+   */
+  uint32_t GetDataSize (void) const;
+
+  /**
+   * Set the data fill of the packet (what is sent as data to the server) to
+   * the zero-terminated contents of the fill string string.
+   *
+   * \warning The size of resulting echo packets will be automatically adjusted
+   * to reflect the size of the fill string -- this means that the PacketSize
+   * attribute may be changed as a result of this call.
+   *
+   * \param fill The string to use as the actual echo data bytes.
+   */
+  void SetFill (std::string fill);
+
+  /**
+   * Set the data fill of the packet (what is sent as data to the server) to
+   * the repeated contents of the fill byte.  i.e., the fill byte will be
+   * used to initialize the contents of the data packet.
+   *
+   * \warning The size of resulting echo packets will be automatically adjusted
+   * to reflect the dataSize parameter -- this means that the PacketSize
+   * attribute may be changed as a result of this call.
+   *
+   * \param fill The byte to be repeated in constructing the packet data..
+   * \param dataSize The desired size of the resulting echo packet data.
+   */
+  void SetFill (uint8_t fill, uint32_t dataSize);
+
+  /**
+   * Set the data fill of the packet (what is sent as data to the server) to
+   * the contents of the fill buffer, repeated as many times as is required.
+   *
+   * Initializing the packet to the contents of a provided single buffer is
+   * accomplished by setting the fillSize set to your desired dataSize
+   * (and providing an appropriate buffer).
+   *
+   * \warning The size of resulting echo packets will be automatically adjusted
+   * to reflect the dataSize parameter -- this means that the PacketSize
+   * attribute of the Application may be changed as a result of this call.
+   *
+   * \param fill The fill pattern to use when constructing packets.
+   * \param fillSize The number of bytes in the provided fill pattern.
+   * \param dataSize The desired size of the final echo data.
+   */
+  void SetFill (uint8_t *fill, uint32_t fillSize, uint32_t dataSize);
+
+  void ScheduleClosing (Time dt);
+
+  void ScheduleRestart (Time dt);
+
+protected:
+  virtual void DoDispose (void);
+
+private:
+
+  virtual void StartApplication (void);
+  virtual void StopApplication (void);
+
+  /**
+   * \brief Schedule the next packet transmission
+   * \param dt time interval between packets.
+   */
+  void ScheduleTransmit (Time dt);
+
+  /**
+   * \brief Send a packet
+   */
+  void Send (void);
+  void Close (void);
+  void Restart (void);
+
+  /**
+ * \brief Handle a packet reception.
+ *
+ * This function is called by lower layers.
+ *
+ * \param socket the socket the packet was received to.
+ */
+  void HandleRead (Ptr<Socket> socket);
+
+  uint32_t m_count; //!< Maximum number of packets the application will send
+  Time m_interval; //!< Packet inter-send time
+  uint32_t m_size; //!< Size of the sent packet
+
+  uint32_t m_dataSize; //!< packet payload size (must be equal to m_size)
+  uint8_t *m_data; //!< packet payload data
+
+  uint32_t m_sent; //!< Counter for sent packets
+  Ptr<Socket> m_socket; //!< Socket
+  Address m_peerAddress; //!< Remote peer address
+  uint16_t m_peerPort; //!< Remote peer port
+  EventId m_sendEvent; //!< Event to send the next packet
+  EventId m_closeEvent;
+  EventId m_connectEvent;
+
+
+  /// Callbacks for tracing the packet Tx events
+  TracedCallback<Ptr<const Packet> > m_txTrace;
+
+};
+
+} // namespace ns3
+
+#endif /* TCP_ECHO_CLIENT_H */
diff --git a/src/applications/model/tcp-echo-server.cc b/src/applications/model/tcp-echo-server.cc
new file mode 100644
index 000000000..259b77989
--- /dev/null
+++ b/src/applications/model/tcp-echo-server.cc
@@ -0,0 +1,265 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Davide Marcato <davide.marcato.4@studenti.unipd.it>
+ *          Stefano Ravazzolo <stefano.ravazzolo@studenti.unipd.it>
+ *          Alvise De Biasio <alvise.debiasio@studenti.unipd.it>
+ * 
+ * Partly copied from https://github.com/samueljero/snake
+ */
+
+#include "ns3/log.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/ipv6-address.h"
+#include "ns3/address-utils.h"
+#include "ns3/nstime.h"
+#include "ns3/inet-socket-address.h"
+#include "ns3/inet6-socket-address.h"
+#include "ns3/socket.h"
+#include "ns3/tcp-socket.h"
+#include "ns3/simulator.h"
+#include "ns3/socket-factory.h"
+#include "ns3/packet.h"
+#include "ns3/uinteger.h"
+
+#include "tcp-echo-server.h"
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("TcpEchoServerApplication");
+
+NS_OBJECT_ENSURE_REGISTERED (TcpEchoServer);
+
+TypeId
+TcpEchoServer::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::TcpEchoServer")
+    .SetParent<Application> ()
+    .SetGroupName ("Applications")
+    .AddConstructor<TcpEchoServer> ()
+    .AddAttribute ("Port", "Port on which we listen for incoming packets.",
+                   UintegerValue (9),
+                   MakeUintegerAccessor (&TcpEchoServer::m_port),
+                   MakeUintegerChecker<uint16_t> ())
+    .AddAttribute ("EchoNth", "Echo every nth packet.",
+                   UintegerValue (1),
+                   MakeUintegerAccessor (&TcpEchoServer::m_echonNth),
+                   MakeUintegerChecker<uint32_t> (1))
+    .AddAttribute ("EchoCount", "How many packets to send on each echo (zero to disable).",
+                   UintegerValue (1),
+                   MakeUintegerAccessor (&TcpEchoServer::m_echoCount),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddAttribute ("EchoInterval",
+                   "Sending interval between packets when sending multiple packets per echo.",
+                   TimeValue (MicroSeconds (500)),
+                   MakeTimeAccessor (&TcpEchoServer::m_echoInterval),
+                   MakeTimeChecker ())
+  ;
+  return tid;
+}
+
+TcpEchoServer::TcpEchoServer ()
+{
+  NS_LOG_FUNCTION (this);
+}
+
+TcpEchoServer::~TcpEchoServer ()
+{
+  NS_LOG_FUNCTION (this);
+  m_socket = 0;
+  m_socket6 = 0;
+}
+
+void
+TcpEchoServer::DoDispose (void)
+{
+  NS_LOG_FUNCTION (this);
+  Application::DoDispose ();
+}
+
+void
+TcpEchoServer::StartApplication (void)
+{
+  NS_LOG_INFO ("##########  TCP Echo Server START at time " << Simulator::Now ().GetSeconds () << " ##########");
+  NS_LOG_FUNCTION (this);
+  //il client ha bisogno di un socket udp per ogni socket tcp
+  //il server per tutti i socket tcp gli basta un socket udp che ascolta
+
+  if (m_socket == 0)
+    {
+      //NS_LOG_INFO("Need to create IPv4");
+      TypeId tid = TypeId::LookupByName ("ns3::TcpSocketFactory");
+      //NS_LOG_INFO("node is "<< GetNode());
+      m_socket = Socket::CreateSocket (GetNode (), tid);
+      NotifySocketCreation(m_socket);
+      //NS_LOG_INFO("Created IPv4 socket");
+      InetSocketAddress local = InetSocketAddress (Ipv4Address::GetAny (), m_port);
+      if (m_socket->Bind (local) == -1)
+        {
+          NS_FATAL_ERROR ("Failed to bind socket");
+        }
+      if (addressUtils::IsMulticast (m_local))
+        {
+          NS_FATAL_ERROR ("Error: Failed to join multicast group");
+        }
+    }
+
+//  if (m_socket6 == 0)
+//    {
+//      NS_LOG_INFO("Need to create IPv6");
+//      TypeId tid = TypeId::LookupByName ("ns3::TcpSocketFactory");
+//      m_socket6 = Socket::CreateSocket (GetNode (), tid);
+//      Inet6SocketAddress local6 = Inet6SocketAddress (Ipv6Address::GetAny (), m_port);
+//      if (m_socket6->Bind (local6) == -1)
+//        {
+//          NS_FATAL_ERROR ("Failed to bind socket");
+//        }
+//      if (addressUtils::IsMulticast (local6))
+//      {
+//       NS_FATAL_ERROR ("Error: Failed to join multicast group");
+//      }
+//    }
+
+  m_socket->Listen ();
+  m_socket->SetRecvCallback (MakeCallback (&TcpEchoServer::HandleRead, this));
+  //m_socket6->SetRecvCallback (MakeCallback (&TcpEchoServer::HandleRead, this));
+
+  m_socket->SetAcceptCallback (
+    MakeCallback (&TcpEchoServer::HandleAcceptRequest, this),
+    MakeCallback (&TcpEchoServer::HandleAccept, this));
+
+  m_socket->SetCloseCallbacks(MakeCallback(&TcpEchoServer::HandleClose, this), MakeCallback(&TcpEchoServer::HandleClose, this));
+}
+
+void
+TcpEchoServer::StopApplication ()
+{
+  NS_LOG_INFO ("##########  TCP Echo Server STOP at time " << Simulator::Now ().GetSeconds () << " ##########");
+  NS_LOG_FUNCTION (this);
+  if (m_socket != 0)
+    {
+      m_socket->Close ();
+      m_socket->SetRecvCallback (MakeNullCallback<void, Ptr<Socket> > ());
+    }
+  if (m_socket6 != 0)
+    {
+      m_socket6->Close ();
+      m_socket6->SetRecvCallback (MakeNullCallback<void, Ptr<Socket> > ());
+    }
+}
+
+
+
+void
+TcpEchoServer::HandleRead (Ptr<Socket> socket)
+{
+  NS_LOG_INFO ("TCP Echo Server RECEIVING at time " << Simulator::Now ().GetSeconds ());
+  NS_LOG_FUNCTION (this);
+
+  Ptr<Packet> packet;
+  Address from;
+  while ((packet = socket->RecvFrom (from)))
+    {
+      m_totalReceived++;
+      NS_LOG_DEBUG("TCP echo server received " << m_totalReceived << " packets in total.");
+      if (InetSocketAddress::IsMatchingType (from))
+        {
+          NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s server received " << packet->GetSize () << " bytes from " <<
+                       InetSocketAddress::ConvertFrom (from).GetIpv4 () << " port " <<
+                       InetSocketAddress::ConvertFrom (from).GetPort ());
+        }
+      else if (Inet6SocketAddress::IsMatchingType (from))
+        {
+          NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s server received " << packet->GetSize () << " bytes from " <<
+                       Inet6SocketAddress::ConvertFrom (from).GetIpv6 () << " port " <<
+                       Inet6SocketAddress::ConvertFrom (from).GetPort ());
+        }
+
+      packet->RemoveAllPacketTags ();
+      packet->RemoveAllByteTags ();
+
+      // print the received packet
+      uint8_t *buffer = new uint8_t[packet->GetSize ()];
+      packet->CopyData (buffer, packet->GetSize ());
+      std::string s = std::string ((char*)buffer);
+      delete[] buffer;
+      NS_LOG_INFO ("Server received: " << s);
+
+      if (s != "CONNECTION_CLOSE" && m_totalReceived % m_echonNth == 0)
+        {
+          for (uint32_t i = 0; i < m_echoCount; i++)
+          {
+            Simulator::Schedule(i * m_echoInterval, &TcpEchoServer::EchoPacket, this, socket, packet, from);
+          }
+        }
+    }
+}
+
+void
+TcpEchoServer::EchoPacket(Ptr<Socket> socket, Ptr<Packet> packet, Address dest)
+{
+  NS_LOG_INFO ("TCP Echo Server ECHOING at time " << Simulator::Now ().GetSeconds ());
+  int res = socket->SendTo (packet, 0, dest);
+  if (res == -1)
+  {
+    NS_LOG_WARN("TCP Echo Server: Echo failed (socket error).");
+    m_totalSentFail++;
+  }
+  else
+  {
+    m_totalSentSuccess++;
+    if (InetSocketAddress::IsMatchingType (dest))
+      {
+        NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s server sent " << packet->GetSize () << " bytes to " <<
+                    InetSocketAddress::ConvertFrom (dest).GetIpv4 () << " port " <<
+                    InetSocketAddress::ConvertFrom (dest).GetPort ());
+      }
+    else if (Inet6SocketAddress::IsMatchingType (dest))
+      {
+        NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s server sent " << packet->GetSize () << " bytes to " <<
+                    Inet6SocketAddress::ConvertFrom (dest).GetIpv6 () << " port " <<
+                    Inet6SocketAddress::ConvertFrom (dest).GetPort ());
+      }
+  }
+}
+
+bool
+TcpEchoServer::HandleAcceptRequest (Ptr<Socket> s, const Address& from)
+{
+  NS_LOG_INFO(" HANDLE ACCEPT REQUEST FROM " << InetSocketAddress::ConvertFrom(from));
+  return true;
+}
+
+void
+TcpEchoServer::HandleAccept (Ptr<Socket> s, const Address& from)
+{
+  NS_LOG_FUNCTION (this << s << from);
+  NS_LOG_INFO("ACCEPT IN ECHO SERVER from " << InetSocketAddress::ConvertFrom(from).GetIpv4());
+  s->SetRecvCallback (MakeCallback (&TcpEchoServer::HandleRead, this));
+}
+
+void
+TcpEchoServer::HandleClose(Ptr<Socket> s1)
+{
+  NS_LOG_INFO(" PEER CLOSE ");
+}
+
+Ptr<Socket>
+TcpEchoServer::GetSocket ()
+{
+  return m_socket;
+}
+
+} // Namespace ns3
diff --git a/src/applications/model/tcp-echo-server.h b/src/applications/model/tcp-echo-server.h
new file mode 100644
index 000000000..fa146598c
--- /dev/null
+++ b/src/applications/model/tcp-echo-server.h
@@ -0,0 +1,97 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Davide Marcato <davide.marcato.4@studenti.unipd.it>
+ *          Stefano Ravazzolo <stefano.ravazzolo@studenti.unipd.it>
+ *          Alvise De Biasio <alvise.debiasio@studenti.unipd.it>
+ */
+
+#ifndef TCP_ECHO_SERVER_H
+#define TCP_ECHO_SERVER_H
+
+#include "ns3/application.h"
+#include "ns3/event-id.h"
+#include "ns3/ptr.h"
+#include "ns3/address.h"
+#include "ns3/application-stats.h"
+
+namespace ns3 {
+
+class Socket;
+class Packet;
+
+/**
+ * \ingroup applications
+ * \defgroup tcpecho TcpEcho
+ */
+
+/**
+ * \ingroup tcpecho
+ * \brief A Tcp Echo server
+ *
+ * Every packet received is sent back.
+ */
+class TcpEchoServer : public Application, public ApplicationStats
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+  TcpEchoServer ();
+  virtual ~TcpEchoServer ();
+
+  Ptr<Socket> GetSocket ();
+
+protected:
+  virtual void DoDispose (void);
+
+private:
+
+  virtual void StartApplication (void);
+  virtual void StopApplication (void);
+
+  /**
+   * \brief Handle a packet reception.
+   *
+   * This function is called by lower layers.
+   *
+   * \param socket the socket the packet was received to.
+   */
+  void HandleRead (Ptr<Socket> socket);
+
+  bool HandleAcceptRequest (Ptr<Socket> s, const Address& from);
+
+  void HandleAccept (Ptr<Socket> s, const Address& from);
+
+  void HandleClose(Ptr<Socket> s1);
+
+  void EchoPacket(Ptr<Socket> socket, Ptr<Packet> packet, Address dest);
+
+  uint16_t m_port; //!< Port on which we listen for incoming packets.
+  Ptr<Socket> m_socket; //!< IPv4 Socket
+  Ptr<Socket> m_socket6; //!< IPv6 Socket
+  Address m_local; //!< local multicast address
+  uint32_t m_echonNth; //!< Echo every nth packet (i.e., for value 1, echoes every packet)
+  uint32_t m_echoCount; //!< How many times to send each echoed packet
+  Time m_echoInterval; //!< How many times to send each echoed packet
+
+};
+
+} // namespace ns3
+
+#endif /* TCP_ECHO_SERVER_H */
+
diff --git a/src/applications/model/tcp-server.cc b/src/applications/model/tcp-server.cc
new file mode 100644
index 000000000..46d14d548
--- /dev/null
+++ b/src/applications/model/tcp-server.cc
@@ -0,0 +1,184 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ *  Copyright (c) 2007,2008,2009 INRIA, UDCAST
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Amine Ismail <amine.ismail@sophia.inria.fr>
+ *                      <amine.ismail@udcast.com>
+ */
+
+#include "ns3/log.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/nstime.h"
+#include "ns3/inet-socket-address.h"
+#include "ns3/inet6-socket-address.h"
+#include "ns3/socket.h"
+#include "ns3/simulator.h"
+#include "ns3/socket-factory.h"
+#include "ns3/packet.h"
+#include "ns3/uinteger.h"
+#include "ns3/string.h"
+#include "packet-loss-counter.h"
+
+#include "seq-ts-header.h"
+#include "tcp-server.h"
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("TcpServer");
+
+NS_OBJECT_ENSURE_REGISTERED (TcpServer);
+
+
+TypeId
+TcpServer::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::TcpServer")
+    .SetParent<Application> ()
+    .SetGroupName ("Applications")
+    .AddConstructor<TcpServer> ()
+    .AddAttribute ("Port",
+                   "Port on which we listen for incoming packets.",
+                   UintegerValue (100),
+                   MakeUintegerAccessor (&TcpServer::m_port),
+                   MakeUintegerChecker<uint16_t> ())
+    .AddAttribute ("PacketWindowSize",
+                   "The size of the window used to compute the packet loss. This value should be a multiple of 8.",
+                   UintegerValue (128),
+                   MakeUintegerAccessor (&TcpServer::GetPacketWindowSize,
+                                         &TcpServer::SetPacketWindowSize),
+                   MakeUintegerChecker<uint16_t> (8,256))
+    .AddAttribute ("OutputFilename",
+                   "A string with the name of the file in which rx packets will be logged",
+                   StringValue ("TcpServerRx.txt"),
+                   MakeStringAccessor (&TcpServer::m_outFilename),
+                   MakeStringChecker ())
+  ;
+  return tid;
+}
+
+TcpServer::TcpServer ()
+  : m_lossCounter (0)
+{
+  NS_LOG_FUNCTION (this);
+  m_received = 0;
+}
+
+TcpServer::~TcpServer ()
+{
+  NS_LOG_FUNCTION (this);
+}
+
+uint16_t
+TcpServer::GetPacketWindowSize () const
+{
+  NS_LOG_FUNCTION (this);
+  return m_lossCounter.GetBitMapSize ();
+}
+
+void
+TcpServer::SetPacketWindowSize (uint16_t size)
+{
+  NS_LOG_FUNCTION (this << size);
+  m_lossCounter.SetBitMapSize (size);
+}
+
+uint32_t
+TcpServer::GetLost (void) const
+{
+  NS_LOG_FUNCTION (this);
+  return m_lossCounter.GetLost ();
+}
+
+uint64_t
+TcpServer::GetReceived (void) const
+{
+  NS_LOG_FUNCTION (this);
+  return m_received;
+}
+
+void
+TcpServer::DoDispose (void)
+{
+  NS_LOG_FUNCTION (this);
+  Application::DoDispose ();
+}
+
+void
+TcpServer::StartApplication (void)
+{
+  NS_LOG_FUNCTION (this);
+
+  if (m_socket == 0)
+    {
+      TypeId tid = TypeId::LookupByName ("ns3::TcpSocketFactory");
+      m_socket = Socket::CreateSocket (GetNode (), tid);
+      NotifySocketCreation(m_socket);
+      InetSocketAddress local = InetSocketAddress (Ipv4Address::GetAny (),
+                                                   m_port);
+      if (m_socket->Bind (local) == -1)
+        {
+          NS_FATAL_ERROR ("Failed to bind socket");
+        }
+    }
+
+  m_socket->Listen ();
+  m_socket->SetRecvCallback (MakeCallback (&TcpServer::HandleRead, this));
+
+  if (m_socket6 == 0)
+    {
+      TypeId tid = TypeId::LookupByName ("ns3::TcpSocketFactory");
+      m_socket6 = Socket::CreateSocket (GetNode (), tid);
+      NotifySocketCreation(m_socket6);
+      Inet6SocketAddress local = Inet6SocketAddress (Ipv6Address::GetAny (),
+                                                     m_port);
+      if (m_socket6->Bind (local) == -1)
+        {
+          NS_FATAL_ERROR ("Failed to bind socket");
+        }
+    }
+
+  m_socket->Listen ();
+  m_socket6->SetRecvCallback (MakeCallback (&TcpServer::HandleRead, this));
+
+}
+
+void
+TcpServer::StopApplication ()
+{
+  NS_LOG_FUNCTION (this);
+
+  if (m_socket != 0)
+    {
+      m_socket->SetRecvCallback (MakeNullCallback<void, Ptr<Socket> > ());
+    }
+}
+
+void
+TcpServer::HandleRead (Ptr<Socket> socket)
+{
+  NS_LOG_FUNCTION (this << socket);
+  Ptr<Packet> packet;
+  Address from;
+  while ((packet = socket->RecvFrom (from)))
+    {
+      if (packet->GetSize () > 0)
+        {
+          m_received++;
+        }
+    }
+}
+
+} // Namespace ns3
diff --git a/src/applications/model/tcp-server.h b/src/applications/model/tcp-server.h
new file mode 100644
index 000000000..31ed279de
--- /dev/null
+++ b/src/applications/model/tcp-server.h
@@ -0,0 +1,118 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2007,2008,2009 INRIA, UDCAST
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Amine Ismail <amine.ismail@sophia.inria.fr>
+ *                      <amine.ismail@udcast.com>
+ *
+ */
+
+#ifndef TCP_SERVER_H
+#define TCP_SERVER_H
+
+#include "ns3/application.h"
+#include "ns3/event-id.h"
+#include "ns3/ptr.h"
+#include "ns3/address.h"
+#include "packet-loss-counter.h"
+#include <iostream>
+#include <fstream>
+
+namespace ns3 {
+/**
+ * \ingroup applications
+ * \defgroup tcpclientserver TcpClientServer
+ */
+
+/**
+ * \ingroup tcpclientserver
+ *
+ * \brief A TCP server, receives TCP packets from a remote host.
+ *
+ * TCP packets carry a 32bits sequence number followed by a 64bits time
+ * stamp in their payloads. The application uses the sequence number
+ * to determine if a packet is lost, and the time stamp to compute the delay.
+ */
+class TcpServer : public Application
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+  TcpServer ();
+  virtual ~TcpServer ();
+  /**
+   * \brief Returns the number of lost packets
+   * \return the number of lost packets
+   */
+  uint32_t GetLost (void) const;
+
+  /**
+   * \brief Returns the number of received packets
+   * \return the number of received packets
+   */
+  uint64_t GetReceived (void) const;
+
+  /**
+   * \brief Returns the size of the window used for checking loss.
+   * \return the size of the window used for checking loss.
+   */
+  uint16_t GetPacketWindowSize () const;
+
+  /**
+   * \brief Set the size of the window used for checking loss. This value should
+   *  be a multiple of 8
+   * \param size the size of the window used for checking loss. This value should
+   *  be a multiple of 8
+   */
+  void SetPacketWindowSize (uint16_t size);
+
+protected:
+  virtual void DoDispose (void);
+
+private:
+
+  virtual void StartApplication (void);
+  virtual void StopApplication (void);
+
+  /**
+   * \brief Handle a packet reception.
+   *
+   * This function is called by lower layers.
+   *
+   * \param socket the socket the packet was received to.
+   */
+  void HandleRead (Ptr<Socket> socket);
+
+  uint16_t m_port; //!< Port on which we listen for incoming packets.
+  Ptr<Socket> m_socket; //!< IPv4 Socket
+  Ptr<Socket> m_socket6; //!< IPv6 Socket
+  uint64_t m_received; //!< Number of received packets
+  PacketLossCounter m_lossCounter; //!< Lost packet counter
+
+  Time m_txTs; //!< Time at which the last packet with header was received
+  // uint32_t m_currentSequenceNumber; //!< SN of the last packet with header
+  // uint32_t m_hSize; //!< Size of the last header received
+
+  std::string m_outFilename;
+  std::ofstream m_outFile;
+};
+
+} // namespace ns3
+
+#endif /* TCP_SERVER_H */
diff --git a/src/applications/model/tcp-trigger-application.cc b/src/applications/model/tcp-trigger-application.cc
new file mode 100644
index 000000000..7447ce291
--- /dev/null
+++ b/src/applications/model/tcp-trigger-application.cc
@@ -0,0 +1,199 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+
+#include "tcp-trigger-application.h"
+
+namespace ns3
+{
+
+NS_LOG_COMPONENT_DEFINE ("TcpTriggerApplication");
+NS_OBJECT_ENSURE_REGISTERED (TcpTriggerApplication);
+
+TypeId 
+TcpTriggerApplication::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::TcpTriggerApplication")
+    .SetParent<TriggerApplication> ()
+    .SetGroupName("Applications")
+  ;
+  return tid;
+}
+
+TcpTriggerApplication::TcpTriggerApplication() : m_socket (0), m_connected (false), m_unsentPacket (0)
+{
+  NS_LOG_FUNCTION (this);
+}
+
+TcpTriggerApplication::~TcpTriggerApplication()
+{
+  NS_LOG_FUNCTION (this);
+}
+
+void
+TcpTriggerApplication::DoDispose (void)
+{
+  NS_LOG_FUNCTION (this);
+  m_socket = 0;
+  m_unsentPacket = 0;
+  // chain up
+  Application::DoDispose ();
+}
+
+
+
+void
+TcpTriggerApplication::SendData()
+{
+  NS_LOG_FUNCTION (this);
+  // NS_LOG_WARN("SendData called, node " << GetNode()->GetId() << ", connected: " << m_connected << ", queue size: " << m_packetQueue.size() << ", unsent packet: " << m_unsentPacket);
+  if (!m_connected)
+    return;
+  while (!m_packetQueue.empty() || m_unsentPacket)
+  { // Time to send more
+    uint32_t toSend;
+    Ptr<Packet> packet;
+    if (m_unsentPacket)
+    {
+      packet = m_unsentPacket;
+      toSend = packet->GetSize ();
+    }
+    else
+    {
+      PacketSendReq &sreq = m_packetQueue.front();
+      // NS_LOG_WARN("Bytes left: " << sreq.totalBytes);
+      toSend = std::min(sreq.totalBytes, sreq.maxBytesPerPkt);
+
+      bool finalPacket = false;
+      if (toSend <= TransmissionProfile::MIN_PACKET_SIZE)
+      {
+        if (toSend < sreq.totalBytes)
+            NS_FATAL_ERROR("Invalid packet size in trigger application");
+        //Make final packet at least min size
+        toSend = TransmissionProfile::MIN_PACKET_SIZE;
+        finalPacket = true;
+      }
+      else if (toSend == sreq.totalBytes){
+        finalPacket = true;
+      }
+      else
+      {
+          uint32_t remaining = sreq.totalBytes - toSend;
+          if (remaining < TransmissionProfile::MIN_PACKET_SIZE)
+          {
+            //The remaining packet would not have enough bytes
+            //First, try to make the current one smaller
+            if (toSend - TransmissionProfile::MIN_PACKET_SIZE >= TransmissionProfile::MIN_PACKET_SIZE - remaining)
+            {
+              toSend -= (TransmissionProfile::MIN_PACKET_SIZE - remaining);
+            }
+            else
+            {
+              //This packet is not big enough to make it smaller, so make it bigger instead
+              finalPacket = true;
+              toSend += remaining;
+            }
+          }
+      }
+
+      if (finalPacket)
+      {
+        m_packetQueue.pop();
+        if (sreq.includeFinal)
+        {
+          std::string msg = TriggerApplication::FINAL_MESSAGE;
+          //String size does not include null termination, so add 1
+          NS_ASSERT(msg.size() + 1 <= toSend);
+          msg.insert(msg.begin(), toSend - (msg.size() + 1), ' ');
+          packet = Create<Packet> (reinterpret_cast<const uint8_t*>(msg.c_str()), toSend);
+        }
+        else
+        {
+          packet = Create<Packet> (toSend);
+        }
+        // NS_LOG_WARN("Sending final packet");
+      }
+      else
+      {
+        NS_ASSERT(sreq.totalBytes > toSend);
+        sreq.totalBytes -= toSend;
+        packet = Create<Packet> (toSend);
+      }
+
+    }
+    NS_ASSERT(packet->GetSize() >= TransmissionProfile::MIN_PACKET_SIZE);
+    int actual = m_socket->Send (packet);
+    if ((unsigned) actual == toSend)
+    {
+      m_unsentPacket = 0;
+      m_totalSentSuccess++;
+      NS_LOG_INFO ("TCP trigger application succesfully sent packet with size " << std::to_string(packet->GetSize()));
+    }
+    else if (actual == -1)
+    {
+      // We exit this loop when actual < toSend as the send side
+      // buffer is full. The "DataSent" callback will pop when
+      // some buffer space has freed up.
+      NS_LOG_DEBUG ("Unable to send packet; caching for later attempt");
+      m_unsentPacket = packet;
+      m_totalSentFail++;
+      break;
+    }
+    else if (actual > 0 && (unsigned) actual < toSend)
+    {
+      // A Linux socket (non-blocking, such as in DCE) may return
+      // a quantity less than the packet size. Split the packet
+      // into two, trace the sent packet, save the unsent packet
+      NS_LOG_DEBUG ("Packet size: " << packet->GetSize () << "; sent: " << actual << "; fragment saved: " << toSend - (unsigned) actual);
+      // Ptr<Packet> sent = packet->CreateFragment (0, actual);
+      Ptr<Packet> unsent = packet->CreateFragment (actual, (toSend - (unsigned) actual));
+      m_unsentPacket = unsent;
+      m_totalSentSuccess++;
+      m_totalSentFail++;
+      break;
+    }
+    else
+    {
+      NS_FATAL_ERROR ("Unexpected return value from m_socket->Send ()");
+    }
+  }
+}
+
+void TcpTriggerApplication::DataSend (Ptr<Socket> socket, uint32_t)
+{
+  NS_LOG_FUNCTION (this);
+  SendData ();
+}
+
+void
+TcpTriggerApplication::HandleRead (Ptr<Socket> socket)
+{
+  NS_ASSERT(m_socket == socket);
+  Ptr<Packet> recvP;
+  while (recvP = socket->Recv())
+  {
+    m_totalReceived++;
+    uint8_t *buffer = new uint8_t[recvP->GetSize ()];
+    recvP->CopyData(buffer, recvP->GetSize());
+    std::string recvMsg = std::string ((char*)buffer);
+    delete[] buffer;
+
+    if (recvMsg.find(TriggerApplication::FINAL_MESSAGE) != std::string::npos)
+    {
+      NS_LOG_DEBUG("Final packet received.");
+      HandleFinalPktRecv();
+    }
+    else
+    {
+      HandleNormalPktRecv();
+    }
+  }
+  
+}
+
+void
+TcpTriggerApplication::HandleClose (Ptr<Socket> socket)
+{
+  NS_LOG_INFO("Connection closed.");
+  m_connected = false;
+}
+
+} // namespace ns3
diff --git a/src/applications/model/tcp-trigger-application.h b/src/applications/model/tcp-trigger-application.h
new file mode 100644
index 000000000..a0bb78362
--- /dev/null
+++ b/src/applications/model/tcp-trigger-application.h
@@ -0,0 +1,45 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+
+#ifndef TCP_TRIGGER_APPLICATION_H
+#define TCP_TRIGGER_APPLICATION_H
+
+#include "ns3/trigger-application.h"
+#include "ns3/uinteger.h"
+
+namespace ns3
+{
+
+class TcpTriggerApplication : public TriggerApplication
+{
+public:
+
+  static TypeId GetTypeId (void);
+  TcpTriggerApplication ();
+  virtual ~TcpTriggerApplication ();
+
+protected:
+  virtual void DoDispose (void);
+
+  virtual void SendData();
+
+  void DataSend (Ptr<Socket> socket, uint32_t);
+  void HandleRead (Ptr<Socket> socket);
+  void HandleClose(Ptr<Socket> socket);
+
+  Ptr<Socket> m_socket; //!< Socket used to communciate with the peer
+  bool m_connected;
+  Ptr<Packet> m_unsentPacket; //!< Cache unsent packet
+
+
+private:
+  virtual void StartApplication (void) = 0;
+  virtual void StopApplication (void) = 0;
+};
+
+
+
+
+} // namespace ns3
+
+
+#endif // TCP_TRIGGER_APPLICATION_H
\ No newline at end of file
diff --git a/src/applications/model/tcp-trigger-client.cc b/src/applications/model/tcp-trigger-client.cc
new file mode 100644
index 000000000..a4be6f17e
--- /dev/null
+++ b/src/applications/model/tcp-trigger-client.cc
@@ -0,0 +1,129 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+
+#include "tcp-trigger-client.h"
+
+namespace ns3
+{
+
+NS_LOG_COMPONENT_DEFINE ("TcpTriggerClient");
+NS_OBJECT_ENSURE_REGISTERED (TcpTriggerClient);
+
+TypeId 
+TcpTriggerClient::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::TcpTriggerClient")
+    .SetParent<TcpTriggerApplication> ()
+    .SetGroupName("Applications")
+    .AddConstructor<TcpTriggerClient> ()
+    .AddAttribute ("RemoteAddress",
+                   "The destination Address of the outbound packets",
+                   AddressValue (),
+                   MakeAddressAccessor (&TcpTriggerClient::m_peerAddress),
+                   MakeAddressChecker ())
+    .AddAttribute ("RemotePort", "The destination port of the outbound packets",
+                   UintegerValue (100),
+                   MakeUintegerAccessor (&TcpTriggerClient::m_peerPort),
+                   MakeUintegerChecker<uint16_t> ())
+  ;
+  return tid;
+}
+
+TcpTriggerClient::TcpTriggerClient()
+{
+  NS_LOG_FUNCTION (this);
+}
+
+TcpTriggerClient::~TcpTriggerClient()
+{
+  NS_LOG_FUNCTION (this);
+}
+void
+TcpTriggerClient::StartApplication()
+{
+  NS_LOG_FUNCTION (this);
+  Address from;
+
+  // Create the socket if not already
+  if (!m_socket)
+  {
+    TypeId tid = TypeId::LookupByName ("ns3::TcpSocketFactory");
+    m_socket = Socket::CreateSocket (GetNode (), tid);
+    NotifySocketCreation(m_socket);
+
+    if (Ipv4Address::IsMatchingType (m_peerAddress) == true)
+    {
+      if (m_socket->Bind () == -1)
+      {
+        NS_FATAL_ERROR ("Failed to bind socket");
+      }
+      m_socket->Connect (InetSocketAddress (Ipv4Address::ConvertFrom (m_peerAddress), m_peerPort));
+    }
+    else if (Ipv6Address::IsMatchingType (m_peerAddress) == true)
+    {
+      if (m_socket->Bind6 () == -1)
+      {
+        NS_FATAL_ERROR ("Failed to bind socket");
+      }
+      m_socket->Connect (Inet6SocketAddress (Ipv6Address::ConvertFrom (m_peerAddress), m_peerPort));
+    }
+    else if (InetSocketAddress::IsMatchingType (m_peerAddress) == true)
+    {
+      if (m_socket->Bind () == -1)
+      {
+        NS_FATAL_ERROR ("Failed to bind socket");
+      }
+      m_socket->Connect (m_peerAddress);
+    }
+    else if (Inet6SocketAddress::IsMatchingType (m_peerAddress) == true)
+    {
+      if (m_socket->Bind6 () == -1) \
+      {
+        NS_FATAL_ERROR ("Failed to bind socket");
+      }
+      m_socket->Connect (m_peerAddress);
+    }
+    else
+    {
+      NS_ASSERT_MSG (false, "Incompatible address type: " << m_peerAddress);
+    }
+
+    m_socket->SetConnectCallback (
+      MakeCallback (&TcpTriggerClient::ConnectionSucceeded, this),
+      MakeCallback (&TcpTriggerClient::ConnectionFailed, this));
+    m_socket->SetSendCallback (MakeCallback (&TcpTriggerClient::DataSend, this));
+    m_socket->SetRecvCallback (MakeCallback (&TcpTriggerClient::HandleRead, this));
+    m_socket->SetCloseCallbacks(MakeCallback(&TcpTriggerClient::HandleClose, this), MakeCallback(&TcpTriggerClient::HandleClose, this));
+  }
+}
+
+void
+TcpTriggerClient::StopApplication()
+{
+  NS_LOG_FUNCTION (this);
+  if (m_socket != 0)
+  {
+    m_socket->Close ();
+    m_connected = false;
+  }
+  else
+  {
+    NS_LOG_WARN ("TcpTriggerClient found null socket to close in StopApplication");
+  }
+}
+
+void TcpTriggerClient::ConnectionSucceeded (Ptr<Socket> socket)
+{
+  NS_LOG_FUNCTION (this << socket);
+  NS_LOG_LOGIC ("TcpTriggerClient Connection succeeded");
+  m_connected = true;
+  HandleConnEst();
+  SendData ();
+}
+
+void TcpTriggerClient::ConnectionFailed (Ptr<Socket> socket)
+{
+  NS_LOG_FUNCTION (this << socket);
+  NS_LOG_WARN ("TcpTriggerClient Connection Failed");
+}
+
+} // namespace ns3
diff --git a/src/applications/model/tcp-trigger-client.h b/src/applications/model/tcp-trigger-client.h
new file mode 100644
index 000000000..e3669ce92
--- /dev/null
+++ b/src/applications/model/tcp-trigger-client.h
@@ -0,0 +1,33 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+
+#ifndef TCP_TRIGGER_CLIENT_H
+#define TCP_TRIGGER_CLIENT_H
+
+#include "ns3/tcp-trigger-application.h"
+
+namespace ns3
+{
+
+class TcpTriggerClient : public TcpTriggerApplication
+{
+public:
+  static TypeId GetTypeId (void);
+  TcpTriggerClient ();
+  virtual ~TcpTriggerClient ();
+
+protected:
+  void ConnectionSucceeded (Ptr<Socket> socket);
+  void ConnectionFailed (Ptr<Socket> socket);
+
+private:
+  virtual void StartApplication (void);
+  virtual void StopApplication (void);
+
+  Address m_peerAddress; //!< Remote peer address
+  uint16_t m_peerPort; //!< Remote peer port
+
+};
+
+} // namespace ns3
+
+#endif // TCP_TRIGGER_CLIENT_H
\ No newline at end of file
diff --git a/src/applications/model/tcp-trigger-server.cc b/src/applications/model/tcp-trigger-server.cc
new file mode 100644
index 000000000..64696bf45
--- /dev/null
+++ b/src/applications/model/tcp-trigger-server.cc
@@ -0,0 +1,112 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+
+#include "tcp-trigger-server.h"
+
+namespace ns3
+{
+
+NS_LOG_COMPONENT_DEFINE ("TcpTriggerServer");
+NS_OBJECT_ENSURE_REGISTERED (TcpTriggerServer);
+
+TypeId 
+TcpTriggerServer::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::TcpTriggerServer")
+    .SetParent<TcpTriggerApplication> ()
+    .SetGroupName("Applications")
+    .AddConstructor<TcpTriggerServer> ()
+    .AddAttribute ("Port",
+                   "Port on which we listen for incoming packets.",
+                   UintegerValue (100),
+                   MakeUintegerAccessor (&TcpTriggerServer::m_port),
+                   MakeUintegerChecker<uint16_t> ())
+  ;
+  return tid;
+}
+
+TcpTriggerServer::TcpTriggerServer() : m_listenSocket (0)
+{
+  NS_LOG_FUNCTION (this);
+}
+
+TcpTriggerServer::~TcpTriggerServer()
+{
+  NS_LOG_FUNCTION (this);
+}
+
+void
+TcpTriggerServer::StartApplication()
+{
+  NS_LOG_FUNCTION (this);
+  if (m_listenSocket == 0)
+  {
+    TypeId tid = TypeId::LookupByName ("ns3::TcpSocketFactory");
+    m_listenSocket = Socket::CreateSocket (GetNode (), tid);
+    NotifySocketCreation(m_listenSocket);
+    InetSocketAddress local = InetSocketAddress (Ipv4Address::GetAny (),
+                                                  m_port);
+    if (m_listenSocket->Bind (local) == -1)
+    {
+      NS_FATAL_ERROR ("Failed to bind socket");
+    }
+  }
+  m_listenSocket->Listen ();
+  m_listenSocket->SetRecvCallback (MakeCallback (&TcpTriggerServer::HandleRead, this));
+  m_listenSocket->SetAcceptCallback (
+    MakeCallback (&TcpTriggerServer::HandleAcceptRequest, this),
+    MakeCallback (&TcpTriggerServer::HandleAccept, this));
+  m_listenSocket->SetCloseCallbacks(MakeCallback(&TcpTriggerServer::HandleClose, this), MakeCallback(&TcpTriggerServer::HandleClose, this));
+  
+}
+
+void
+TcpTriggerServer::StopApplication()
+{
+  NS_LOG_FUNCTION (this);
+  if (m_socket != 0)
+  {
+    m_socket->Close();
+    m_connected = false;
+  }
+  else
+  {
+    NS_LOG_WARN ("TcpTriggerServer found null peer socket to close in StopApplication");
+  }
+
+  if (m_listenSocket != 0)
+  {
+    m_listenSocket->Close ();
+  }
+  else
+  {
+    NS_LOG_WARN ("TcpTriggerServer found null listen socket to close in StopApplication");
+  }
+}
+
+bool
+TcpTriggerServer::HandleAcceptRequest (Ptr<Socket> s, const Address& from)
+{
+  if (m_connected)
+  {
+    NS_LOG_ERROR("TcpTriggerServer received connection request, but is already connected!");
+    return false;
+  }
+  else
+  {
+    NS_LOG_INFO("TcpTriggerServer accept request from " << InetSocketAddress::ConvertFrom(from).GetIpv4());
+    return true;
+  }
+}
+
+void
+TcpTriggerServer::HandleAccept (Ptr<Socket> skt, const Address& from)
+{
+  NS_LOG_FUNCTION (this << skt << from);
+  NS_LOG_INFO("TcpTriggerServer new connection from " << InetSocketAddress::ConvertFrom(from).GetIpv4());
+  skt->SetRecvCallback (MakeCallback (&TcpTriggerServer::HandleRead, this));
+  skt->SetSendCallback (MakeCallback (&TcpTriggerServer::DataSend, this));
+  m_socket = skt;
+  m_connected = true;
+}
+
+} // namespace ns3
diff --git a/src/applications/model/tcp-trigger-server.h b/src/applications/model/tcp-trigger-server.h
new file mode 100644
index 000000000..56d595200
--- /dev/null
+++ b/src/applications/model/tcp-trigger-server.h
@@ -0,0 +1,35 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+
+#ifndef TCP_TRIGGER_SERVER_H
+#define TCP_TRIGGER_SERVER_H
+
+#include "ns3/tcp-trigger-application.h"
+
+namespace ns3
+{
+
+class TcpTriggerServer : public TcpTriggerApplication
+{
+public:
+  static TypeId GetTypeId (void);
+  TcpTriggerServer ();
+  virtual ~TcpTriggerServer ();
+
+protected:
+  bool HandleAcceptRequest (Ptr<Socket> s, const Address& from);
+  void HandleAccept (Ptr<Socket> s, const Address& from);
+
+private:
+  virtual void StartApplication (void);
+  virtual void StopApplication (void);
+
+  uint16_t m_port; //!< Port on which we listen for incoming packets.
+  Ptr<Socket> m_listenSocket; //!< Socket used to listen on
+  
+    
+};
+
+} // namespace ns3
+
+
+#endif // TCP_TRIGGER_SERVER_H
\ No newline at end of file
diff --git a/src/applications/model/trigger-application.cc b/src/applications/model/trigger-application.cc
new file mode 100644
index 000000000..25b726b31
--- /dev/null
+++ b/src/applications/model/trigger-application.cc
@@ -0,0 +1,199 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+
+#include "trigger-application.h"
+
+namespace ns3
+{
+
+// -------------------------------
+// ----- TransmissionProfile -----
+// -------------------------------
+ATTRIBUTE_HELPER_CPP(TransmissionProfile);
+
+std::ostream &
+operator << (std::ostream &os, const TransmissionProfile &tp)
+{
+  os << tp.packets << "|" << tp.maxBytes << "|" << tp.packetSize << "|"
+     << tp.transInt << "|" << tp.pauseAfterPackets << "|" << tp.pauseAfterBytes << "|" << tp.transPause << "|" << tp.initialDelay;
+  return os;
+}
+std::istream &
+operator >> (std::istream &is, TransmissionProfile &tp)
+ {
+  char c1, c2, c3, c4, c5, c6, c7;
+  is >> tp.packets >> c1 >> tp.maxBytes >> c2 >> tp.packetSize >> c3
+     >> tp.transInt >> c4 >> tp.pauseAfterPackets >> c5 >> tp.pauseAfterBytes >> c6 >> tp.transPause >> c7 >> tp.initialDelay;
+  if (c1 != '|' ||
+      c2 != '|' ||
+      c3 != '|' ||
+      c4 != '|' ||
+      c5 != '|' ||
+      c6 != '|' ||
+      c7 != '|')
+    {
+      is.setstate (std::ios_base::failbit);
+    }
+  return is;
+}
+
+
+// ------------------------------
+// ----- TriggerApplication -----
+// ------------------------------
+
+NS_LOG_COMPONENT_DEFINE ("TriggerApplication");
+NS_OBJECT_ENSURE_REGISTERED (TriggerApplication);
+
+TypeId 
+TriggerApplication::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::TriggerApplication")
+    .SetParent<Application> ()
+    .SetGroupName("Applications")
+    .AddAttribute ("ConnEstTP", "Transmission profile to be used on connection establishment.",
+                   TransmissionProfileValue(TransmissionProfile(false)),
+                   MakeTransmissionProfileAccessor (&TriggerApplication::m_TpOnConnEst),
+                   MakeTransmissionProfileChecker ())
+    .AddAttribute ("OnPacketRecvTP", "Transmission profile to be used if a normal packet is received.",
+                   TransmissionProfileValue(TransmissionProfile(false)),
+                   MakeTransmissionProfileAccessor (&TriggerApplication::m_TpOnPacketRecv),
+                   MakeTransmissionProfileChecker ())
+    .AddAttribute ("OnFinalPacketTP", "Transmission profile to be used if a final packet is received.",
+                   TransmissionProfileValue(TransmissionProfile(false)),
+                   MakeTransmissionProfileAccessor (&TriggerApplication::m_TpOnFinalPacket),
+                   MakeTransmissionProfileChecker ())
+  ;
+  return tid;
+}
+
+// \brief TriggerApplication Constructor
+TriggerApplication::TriggerApplication()
+{
+  NS_LOG_FUNCTION (this);
+}
+
+// \brief TriggerApplication Destructor
+TriggerApplication::~TriggerApplication()
+{
+  NS_LOG_FUNCTION (this);
+}
+
+const char TriggerApplication::FINAL_MESSAGE[] = "END";
+
+void
+TriggerApplication::TriggerApplication::HandleConnEst ()
+{
+  if (m_TpOnConnEst.active)
+    ExecuteTransProfile(TransmissionProfileState(m_TpOnConnEst));
+}
+
+void
+TriggerApplication::TriggerApplication::HandleNormalPktRecv ()
+{
+  if (m_TpOnPacketRecv.active)
+  {
+    ExecuteTransProfile(TransmissionProfileState(m_TpOnPacketRecv));
+  }
+}
+
+void
+TriggerApplication::TriggerApplication::HandleFinalPktRecv ()
+{
+  if (m_TpOnFinalPacket.active)
+    ExecuteTransProfile(TransmissionProfileState(m_TpOnFinalPacket));
+}
+
+void
+TriggerApplication::ExecuteTransProfile (TransmissionProfileState tps)
+{
+  //Handle initial delay
+  if (!tps.initialDelayPassed)
+  {
+    tps.initialDelayPassed = true;
+    if (tps.associatedTp.initialDelay > Time(0))
+    {
+      Simulator::Schedule(tps.associatedTp.initialDelay, &TriggerApplication::ExecuteTransProfile, this, tps);
+      return;
+    }
+  }
+
+  //Handle transmission pause
+  // if ((tps.associatedTp.pauseAfterBytes > 0 && ))
+
+  if (tps.associatedTp.transInt > Time(0)) //Periodic transmission
+  {
+    bool finalPacket = false;
+    uint32_t packetSize = tps.associatedTp.packetSize;
+    //Check packets limit
+    if (tps.associatedTp.packets > 0 && tps.associatedTp.packets - tps.packets == 1)
+      finalPacket = true;
+    
+
+    //Check max bytes limit
+    //Make this the final packet if the next one could not have at least the minimum size
+    if (tps.associatedTp.maxBytes > 0 && tps.associatedTp.maxBytes - tps.bytes < tps.associatedTp.packetSize + TransmissionProfile::MIN_PACKET_SIZE)
+    {
+      finalPacket = true;
+      packetSize = std::min<uint32_t>(tps.associatedTp.packetSize, tps.associatedTp.maxBytes - tps.bytes);
+    }
+
+    bool pause = tps.associatedTp.pauseAfterBytes > 0 && (tps.bytes / tps.associatedTp.pauseAfterBytes < (tps.bytes + packetSize) / tps.associatedTp.pauseAfterBytes);
+    pause = pause || (tps.associatedTp.pauseAfterPackets > 0 && (tps.packets / tps.associatedTp.pauseAfterPackets < (tps.packets + 1) / tps.associatedTp.pauseAfterPackets));
+
+    //Add packet to queue
+    SendPackets(packetSize, tps.associatedTp.packetSize, finalPacket);
+    tps.bytes += packetSize;
+    tps.packets++;
+
+    if (finalPacket)
+        return;
+
+    //Schedule new event
+    if (pause)
+      Simulator::Schedule(tps.associatedTp.transPause, &TriggerApplication::ExecuteTransProfile, this, tps);
+    else
+      Simulator::Schedule(tps.associatedTp.transInt, &TriggerApplication::ExecuteTransProfile, this, tps);
+
+  }
+  else //Bulk transmission
+  {
+    bool finalPacket = true;
+    uint32_t byteCount = 0;
+
+    if (tps.associatedTp.maxBytes > 0)
+      byteCount = tps.associatedTp.maxBytes - tps.bytes;
+    else
+      NS_FATAL_ERROR("Max bytes unspecified in bulk transmission profile.");
+    
+    //Handle pause
+    if (tps.associatedTp.pauseAfterBytes > 0)
+    {
+      uint32_t leftUntilPause = tps.bytes % tps.associatedTp.pauseAfterBytes;
+      //If this is 0, we just paused, so dont pause again to prevent inifinite pause
+      if (leftUntilPause > 0)
+      {
+        leftUntilPause = std::max<uint32_t>(leftUntilPause, TransmissionProfile::MIN_PACKET_SIZE);
+        if (byteCount - TransmissionProfile::MIN_PACKET_SIZE > leftUntilPause)
+        {
+          finalPacket = false;
+          byteCount = leftUntilPause;
+          //We dont send all remaining bytes due to pause, so schedule the rest after the pause
+          Simulator::Schedule(tps.associatedTp.transPause, &TriggerApplication::ExecuteTransProfile, this, tps);
+        }
+      }
+    }
+    
+    SendPackets(byteCount, tps.associatedTp.packetSize, finalPacket);
+    tps.bytes += byteCount;
+  }
+
+}
+
+void
+TriggerApplication::SendPackets (uint32_t totalBytes, uint32_t maxBytesPerPkt, bool includeFinal)
+{
+  m_packetQueue.push(PacketSendReq(totalBytes, maxBytesPerPkt, includeFinal));
+  SendData();
+}
+
+} // namespace ns3
diff --git a/src/applications/model/trigger-application.h b/src/applications/model/trigger-application.h
new file mode 100644
index 000000000..dbf73dc86
--- /dev/null
+++ b/src/applications/model/trigger-application.h
@@ -0,0 +1,96 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+
+#ifndef TRIGGER_APPLICATION_H
+#define TRIGGER_APPLICATION_H
+
+#include "ns3/application.h"
+#include "ns3/application-stats.h"
+#include "ns3/simulator.h"
+#include <queue>
+
+namespace ns3
+{
+
+struct TransmissionProfile
+{
+    static const uint8_t MIN_PACKET_SIZE = 4;
+    TransmissionProfile () = default;
+    TransmissionProfile (bool _active) : active (_active) {}
+    bool active = true;
+    uint32_t packets = 0; //!< Number of packets to send, not considered in bulk scenario
+    uint32_t maxBytes = 0; //!< Maximum number of bytes to send
+    uint32_t packetSize = 500; //!< Packet size in bytes
+    Time transInt = MilliSeconds(0); //!< Transmission interval, 0 for bulk
+    uint32_t pauseAfterPackets = 0; //!< Pause after x packets have been sent, 0 to disable
+    uint32_t pauseAfterBytes = 0; //!< Pause after x bytes have been sent, 0 to disable
+    Time transPause = MilliSeconds(0); //!< Transmission pause length
+    Time initialDelay = MilliSeconds(0); //!< Initial delay before beginning transmission
+};
+
+std::ostream &operator << (std::ostream &os, const TransmissionProfile &tp);
+std::istream &operator >> (std::istream &is, TransmissionProfile &tp);
+
+ATTRIBUTE_HELPER_HEADER(TransmissionProfile);
+
+//TODO: Make transmission profile usable as attribute
+// ATTRIBUTE_VALUE_DEFINE (TransmissionProfile);
+// ATTRIBUTE_ACCESSOR_DEFINE (TransmissionProfile);
+
+class TriggerApplication : public Application, public ApplicationStats
+{
+public:
+
+    static TypeId GetTypeId (void);
+    TriggerApplication ();
+    virtual ~TriggerApplication ();
+
+protected:
+
+    struct TransmissionProfileState
+    {
+        TransmissionProfileState (TransmissionProfile tp) : associatedTp (tp) {}
+        TransmissionProfile associatedTp;
+        uint32_t packets = 0; //!< Number of packets already sent
+        uint32_t bytes = 0; //!< Number of bytes already sent
+        bool initialDelayPassed = false;
+    };
+
+    struct PacketSendReq
+    {
+        PacketSendReq (uint32_t _totalBytes, uint32_t _maxBytesPerPkt, bool _includeFinal) : totalBytes (_totalBytes), maxBytesPerPkt (_maxBytesPerPkt), includeFinal (_includeFinal) {}
+        uint32_t totalBytes;
+        uint32_t maxBytesPerPkt;
+        bool includeFinal;
+    };
+
+    static const char FINAL_MESSAGE[];
+
+    void HandleConnEst ();
+    void HandleNormalPktRecv ();
+    void HandleFinalPktRecv ();
+
+    virtual void ExecuteTransProfile (TransmissionProfileState tps);
+
+    void SendPackets (uint32_t totalBytes, uint32_t maxBytesPerPkt, bool includeFinal);
+    
+    virtual void SendData () = 0; //Handle the packet queue
+
+
+    TransmissionProfile m_TpOnConnEst; //!< Transmission profile to be used on connection established
+    TransmissionProfile m_TpOnPacketRecv; //!< Transmission profile to be used if a normal packet is received
+    TransmissionProfile m_TpOnFinalPacket; //!< Transmission profile to be used if a final packet is received
+
+
+    std::queue<PacketSendReq> m_packetQueue; //!< Queue of remaining packets to be sent
+
+private:
+    virtual void StartApplication (void) = 0;
+    virtual void StopApplication (void) = 0;
+};
+
+
+
+} // namespace ns3
+
+
+#endif // TRIGGER_APPLICATION_H
\ No newline at end of file
diff --git a/src/efm-manager/.gitignore b/src/efm-manager/.gitignore
new file mode 100644
index 000000000..fe9a55f73
--- /dev/null
+++ b/src/efm-manager/.gitignore
@@ -0,0 +1,51 @@
+*.diff
+*.orig
+*.patch
+*.rej
+
+*.o
+*.pyc
+*.pyo
+
+*.cwnd
+*.dat
+*.log
+*.mob
+*.pcap
+*.plt
+*.routes
+*.tr
+[D|U]l[A-Z][a-z]*Stats.txt
+
+\#*#
+*~
+
+testpy-output
+
+bindings/python/pybindgen/
+
+ms_print.*
+massif.*
+coverity
+TAGS
+
+.lock-ns3_*
+
+build-dir/
+build/
+/.cproject
+/.project
+
+version.cache
+
+.gitlab-ci-local/
+.idea/
+cmake-cache/
+cmake-build-debug/
+cmake-build-relwithdebinfo/
+cmake-build-minsizerel/
+cmake-build-release/
+
+.vscode/*
+!.vscode/launch.json
+!.vscode/tasks.json
diff --git a/src/efm-manager/CMakeLists.txt b/src/efm-manager/CMakeLists.txt
new file mode 100644
index 000000000..8f643cf4a
--- /dev/null
+++ b/src/efm-manager/CMakeLists.txt
@@ -0,0 +1,36 @@
+check_include_file_cxx(stdint.h HAVE_STDINT_H)
+if(HAVE_STDINT_H)
+    add_definitions(-DHAVE_STDINT_H)
+endif()
+
+set(examples_as_tests_sources)
+if(${ENABLE_EXAMPLES})
+    set(examples_as_tests_sources    
+        #test/efm-manager-examples-test-suite.cc
+        )
+endif()    
+
+build_lib(
+    LIBNAME efm-manager
+    SOURCE_FILES
+        helper/efm-manager-helper.cc
+        model/efm-manager.cc
+        model/efm-host-tag.cc
+        model/efm-host-handler.cc
+        model/quic-efm-host-handler.cc
+        model/tcp-efm-host-handler.cc
+    HEADER_FILES
+        helper/efm-manager-helper.h
+        model/efm-manager.h
+        model/efm-host-tag.h
+        model/efm-host-handler.h
+        model/quic-efm-host-handler.h
+        model/tcp-efm-host-handler.h
+    LIBRARIES_TO_LINK ${libinternet}
+                      ${libconfig-store}
+                      ${libquic}
+                      ${libudp}
+    TEST_SOURCES test/efm-manager-test-suite.cc
+                 ${examples_as_tests_sources}
+)
+    
diff --git a/src/efm-manager/doc/efm-manager.rst b/src/efm-manager/doc/efm-manager.rst
new file mode 100644
index 000000000..af530615d
--- /dev/null
+++ b/src/efm-manager/doc/efm-manager.rst
@@ -0,0 +1,98 @@
+Example Module Documentation
+----------------------------
+
+.. include:: replace.txt
+.. highlight:: cpp
+
+.. heading hierarchy:
+   ------------- Chapter
+   ************* Section (#.#)
+   ============= Subsection (#.#.#)
+   ############# Paragraph (no number)
+
+This is a suggested outline for adding new module documentation to |ns3|.
+See ``src/click/doc/click.rst`` for an example.
+
+The introductory paragraph is for describing what this code is trying to
+model.
+
+For consistency (italicized formatting), please use |ns3| to refer to
+ns-3 in the documentation (and likewise, |ns2| for ns-2).  These macros
+are defined in the file ``replace.txt``.
+
+Model Description
+*****************
+
+The source code for the new module lives in the directory ``src/efm-manager``.
+
+Add here a basic description of what is being modeled.
+
+Design
+======
+
+Briefly describe the software design of the model and how it fits into 
+the existing ns-3 architecture. 
+
+Scope and Limitations
+=====================
+
+What can the model do?  What can it not do?  Please use this section to
+describe the scope and limitations of the model.
+
+References
+==========
+
+Add academic citations here, such as if you published a paper on this
+model, or if readers should read a particular specification or other work.
+
+Usage
+*****
+
+This section is principally concerned with the usage of your model, using
+the public API.  Focus first on most common usage patterns, then go
+into more advanced topics.
+
+Building New Module
+===================
+
+Include this subsection only if there are special build instructions or
+platform limitations.
+
+Helpers
+=======
+
+What helper API will users typically use?  Describe it here.
+
+Attributes
+==========
+
+What classes hold attributes, and what are the key ones worth mentioning?
+
+Output
+======
+
+What kind of data does the model generate?  What are the key trace
+sources?   What kind of logging output can be enabled?
+
+Advanced Usage
+==============
+
+Go into further details (such as using the API outside of the helpers)
+in additional sections, as needed.
+
+Examples
+========
+
+What examples using this new code are available?  Describe them here.
+
+Troubleshooting
+===============
+
+Add any tips for avoiding pitfalls, etc.
+
+Validation
+**********
+
+Describe how the model has been tested/validated.  What tests run in the
+test suite?  How much API and code is covered by the tests?  Again, 
+references to outside published work may help here.
diff --git a/src/efm-manager/examples/CMakeLists.txt b/src/efm-manager/examples/CMakeLists.txt
new file mode 100644
index 000000000..8d409325f
--- /dev/null
+++ b/src/efm-manager/examples/CMakeLists.txt
@@ -0,0 +1,5 @@
+build_lib_example(
+    NAME efm-manager-example
+    SOURCE_FILES efm-manager-example.cc
+    LIBRARIES_TO_LINK ${libefm-manager}
+)
diff --git a/src/efm-manager/examples/efm-manager-example.cc b/src/efm-manager/examples/efm-manager-example.cc
new file mode 100644
index 000000000..11d5010ab
--- /dev/null
+++ b/src/efm-manager/examples/efm-manager-example.cc
@@ -0,0 +1,26 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+
+#include "ns3/core-module.h"
+#include "ns3/efm-manager-helper.h"
+
+using namespace ns3;
+
+
+int 
+main (int argc, char *argv[])
+{
+  bool verbose = true;
+
+  CommandLine cmd (__FILE__);
+  cmd.AddValue ("verbose", "Tell application to log if true", verbose);
+
+  cmd.Parse (argc,argv);
+
+  /* ... */
+
+  Simulator::Run ();
+  Simulator::Destroy ();
+  return 0;
+}
+
+
diff --git a/src/efm-manager/helper/efm-manager-helper.cc b/src/efm-manager/helper/efm-manager-helper.cc
new file mode 100644
index 000000000..a6fc474fc
--- /dev/null
+++ b/src/efm-manager/helper/efm-manager-helper.cc
@@ -0,0 +1,100 @@
+// -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*-
+//
+// Copyright (c) 2009 INESC Porto
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 2 as
+// published by the Free Software Foundation;
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+// Author: Gustavo J. A. M. Carneiro  <gjc@inescporto.pt> <gjcarneiro@gmail.com>
+// Modifications by:
+//  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+//  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+//
+
+#include "efm-manager-helper.h"
+
+#include "ns3/efm-manager.h"
+
+namespace ns3 {
+
+EfmManagerHelper::EfmManagerHelper ()
+{
+  m_managerFactory.SetTypeId ("ns3::EfmManager");
+}
+
+EfmManagerHelper::~EfmManagerHelper ()
+{
+  if (m_efmManager)
+    {
+      m_efmManager->Dispose ();
+      m_efmManager = 0;
+    }
+}
+
+void
+EfmManagerHelper::SetManagerAttribute (std::string n1, const AttributeValue &v1)
+{
+  m_managerFactory.Set (n1, v1);
+}
+
+Ptr<EfmManager>
+EfmManagerHelper::GetManager ()
+{
+  if (!m_efmManager)
+    {
+      m_efmManager = m_managerFactory.Create<EfmManager> ();
+    }
+  return m_efmManager;
+}
+
+Ptr<EfmManager>
+EfmManagerHelper::InstallClient (ApplicationContainer apps)
+{
+  for (ApplicationContainer::Iterator i = apps.Begin (); i != apps.End (); ++i)
+    {
+      Ptr<Application> app = *i;
+      InstallClient (app);
+    }
+  return m_efmManager;
+}
+
+Ptr<EfmManager>
+EfmManagerHelper::InstallServer (ApplicationContainer apps)
+{
+  for (ApplicationContainer::Iterator i = apps.Begin (); i != apps.End (); ++i)
+    {
+      Ptr<Application> app = *i;
+      InstallServer (app);
+    }
+  return m_efmManager;
+}
+
+Ptr<EfmManager>
+EfmManagerHelper::InstallClient (Ptr<Application> app)
+{
+  Ptr<EfmManager> manager = GetManager ();
+  app->TraceConnectWithoutContext (
+      "SocketCreation", MakeCallback (&EfmManager::ClientSocketCreationHandler, manager));
+  return m_efmManager;
+}
+
+Ptr<EfmManager>
+EfmManagerHelper::InstallServer (Ptr<Application> app)
+{
+  Ptr<EfmManager> manager = GetManager ();
+  app->TraceConnectWithoutContext (
+      "SocketCreation", MakeCallback (&EfmManager::ServerSocketCreationHandler, manager));
+  return m_efmManager;
+}
+
+} // namespace ns3
diff --git a/src/efm-manager/helper/efm-manager-helper.h b/src/efm-manager/helper/efm-manager-helper.h
new file mode 100644
index 000000000..abd22b3e8
--- /dev/null
+++ b/src/efm-manager/helper/efm-manager-helper.h
@@ -0,0 +1,94 @@
+// -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*-
+//
+// Copyright (c) 2009 INESC Porto
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 2 as
+// published by the Free Software Foundation;
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+// Author: Gustavo J. A. M. Carneiro  <gjc@inescporto.pt> <gjcarneiro@gmail.com>
+// Modifications by:
+//  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+//  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+//
+#ifndef EFM_MANAGER_HELPER_H
+#define EFM_MANAGER_HELPER_H
+
+#include "ns3/object-factory.h"
+#include "ns3/efm-manager.h"
+#include "ns3/application-container.h"
+#include <string>
+
+namespace ns3 {
+
+class AttributeValue;
+
+/**
+ * \ingroup efm-manager
+ * \brief Helper to enable IP flow managering on a set of Nodes
+ */
+class EfmManagerHelper
+{
+public:
+  EfmManagerHelper ();
+  ~EfmManagerHelper ();
+
+  // Delete copy constructor and assignment operator to avoid misuse
+  EfmManagerHelper (const EfmManagerHelper &) = delete;
+  EfmManagerHelper &operator= (const EfmManagerHelper &) = delete;
+
+  /**
+   * \brief Set an attribute for the to-be-created EfmManager object
+   * \param n1 attribute name
+   * \param v1 attribute value
+   */
+  void SetManagerAttribute (std::string n1, const AttributeValue &v1);
+
+  /**
+   * \brief Enable EFM on a set of applications acting as clients
+   * \param apps An ApplicationContainer holding the set of apps to work with.
+   * \returns a pointer to the EfmManager object
+   */
+  Ptr<EfmManager> InstallClient (ApplicationContainer apps);
+  /**
+   * \brief Enable EFM on a set of applications acting as servers
+   * \param apps An ApplicationContainer holding the set of apps to work with.
+   * \returns a pointer to the EfmManager object
+   */
+  Ptr<EfmManager> InstallServer (ApplicationContainer apps);
+  /**
+   * \brief Enable EFM on a single application acting as client
+   * \param app A Ptr<SocketTraceApplication> to the app on which to enable EFM.
+   * \returns a pointer to the EfmManager object
+   */
+  Ptr<EfmManager> InstallClient (Ptr<Application> app);
+  /**
+   * \brief Enable EFM on a single application acting as server
+   * \param app A Ptr<SocketTraceApplication> to the app on which to enable EFM.
+   * \returns a pointer to the EfmManager object
+   */
+  Ptr<EfmManager> InstallServer (Ptr<Application> app);
+
+  /**
+   * \brief Retrieve the EfmManager object created by the Install* methods
+   * \returns a pointer to the EfmManager object
+   */
+  Ptr<EfmManager> GetManager ();
+
+private:
+  ObjectFactory m_managerFactory; //!< Object factory
+  Ptr<EfmManager> m_efmManager; //!< the EfmManager object
+};
+
+} // namespace ns3
+
+#endif /* EFM_MANAGER_HELPER_H */
diff --git a/src/efm-manager/model/efm-host-handler.cc b/src/efm-manager/model/efm-host-handler.cc
new file mode 100644
index 000000000..2a6f87464
--- /dev/null
+++ b/src/efm-manager/model/efm-host-handler.cc
@@ -0,0 +1,583 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+//
+// Copyright (c) 2009 INESC Porto
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 2 as
+// published by the Free Software Foundation;
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+// Author: Gustavo J. A. M. Carneiro  <gjc@inescporto.pt> <gjcarneiro@gmail.com>
+// Modifications by:
+//  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+//  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+//
+
+#include "efm-host-handler.h"
+#include "ns3/efm-manager.h"
+#include "ns3/simulator.h"
+#include <numeric>
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("EFM_Host_Handler");
+
+NS_OBJECT_ENSURE_REGISTERED (EfmHostHandler);
+
+/* static */
+TypeId
+EfmHostHandler::GetTypeId (void)
+{
+  static TypeId tid =
+      TypeId ("ns3::EfmHostHandler")
+          .SetParent<Object> ()
+          .SetGroupName ("EfmManager")
+          // No AddConstructor because this class has no default constructor.
+          .AddTraceSource ("TransDelayMeasured",
+                           "Emitted on packet receival when a new groundtruth delay measurement "
+                           "excluding application delay is available.",
+                           MakeTraceSourceAccessor (&EfmHostHandler::m_gtTransDelayEventTrace),
+                           "ns3::EfmHostHandler::GroundtruthDelayEventTracedCallback")
+          .AddTraceSource ("AppDelayMeasured",
+                           "Emitted on packet receival when a new groundtruth delay measurement "
+                           "including application delay is available.",
+                           MakeTraceSourceAccessor (&EfmHostHandler::m_gtAppDelayEventTrace),
+                           "ns3::EfmHostHandler::GroundtruthDelayEventTracedCallback")
+          .AddTraceSource ("SpinBitUpdated",
+                           "Emitted on packet transmission when the spin bit changes value.",
+                           MakeTraceSourceAccessor (&EfmHostHandler::m_spinBitUpdateTrace),
+                           "ns3::EfmHostHandler::EfmBitStateUpdatedTracedCallback")
+          .AddTraceSource ("QBitUpdated",
+                           "Emitted on packet transmission when the Q bit changes value.",
+                           MakeTraceSourceAccessor (&EfmHostHandler::m_qBitUpdateTrace),
+                           "ns3::EfmHostHandler::EfmBitStateUpdatedTracedCallback")
+          .AddTraceSource ("RBitUpdated",
+                           "Emitted on packet transmission when the R bit changes value.",
+                           MakeTraceSourceAccessor (&EfmHostHandler::m_rBitUpdateTrace),
+                           "ns3::EfmHostHandler::EfmBitStateUpdatedTracedCallback")
+          .AddTraceSource ("LBitSet", "Emitted on packet transmission when the L bit is set.",
+                           MakeTraceSourceAccessor (&EfmHostHandler::m_lBitSetTrace),
+                           "ns3::EfmHostHandler::EfmBitSetTracedCallback")
+          .AddTraceSource ("TBitSet", "Emitted on packet transmission when the T bit is set.",
+                           MakeTraceSourceAccessor (&EfmHostHandler::m_tBitSetTrace),
+                           "ns3::EfmHostHandler::EfmBitSetTracedCallback")
+          .AddTraceSource ("LBitCounterUpdated",
+                           "Emitted when the internal loss counter used by the L bit is changed. "
+                           "Does not include decrementation due to L bit transmission.",
+                           MakeTraceSourceAccessor (&EfmHostHandler::m_lBitCounterUpdateTrace),
+                           "ns3::EfmHostHandler::EfmLBitCounterUpdatedTracedCallback")
+          .AddTraceSource ("RBitBlockLenUpdated",
+                           "Emitted when the targeted R bit block length changes.",
+                           MakeTraceSourceAccessor (&EfmHostHandler::m_rBitBlockLenUpdateTrace),
+                           "ns3::EfmHostHandler::EfmRBitWidthUpdatedTracedCallback")
+          .AddTraceSource ("TBitPhaseUpdated",
+                           "Emitted when the internal when the internal T bit phase changes.",
+                           MakeTraceSourceAccessor (&EfmHostHandler::m_tBitPhaseUpdateTrace),
+                           "ns3::EfmHostHandler::EfmTBitPhaseUpdatedTracedCallback");
+
+  return tid;
+}
+
+TypeId
+EfmHostHandler::GetInstanceTypeId (void) const
+{
+  return GetTypeId ();
+}
+
+EfmHostHandler::~EfmHostHandler ()
+{
+}
+
+EfmHostHandler::EfmHostHandler (Ptr<EfmManager> efmManager, EfmHostMode hostMode, Ptr<Node> node)
+    : m_efmManager (efmManager), m_hostMode (hostMode), m_nodeId (node->GetId ())
+{
+  m_efmManager->AddHostHandler (this);
+}
+
+void
+EfmHostHandler::DoDispose (void)
+{
+  m_efmManager = 0;
+  Object::DoDispose ();
+}
+
+EfmHostHandler::EfmConnectionState &
+EfmHostHandler::GetConnState (EfmHostConnId connId)
+{
+  auto it = m_connStates.find (connId);
+  if (it == m_connStates.end ())
+    {
+      EfmConnectionState ecs (connId);
+      ecs.q_snt_counter = m_efmManager->GetQBitBlockSize ();
+      return ((m_connStates.insert (std::pair (connId, ecs))).first)->second;
+    }
+  else
+    return it->second;
+}
+
+uint32_t
+EfmHostHandler::GetNodeId () const
+{
+  return m_nodeId;
+}
+
+EfmHostMode
+EfmHostHandler::GetHostMode () const
+{
+  return m_hostMode;
+}
+
+void
+EfmHostHandler::PacketTransmitHandler (const Ptr<const Packet> packet, EfmHostConnId connId)
+{
+  EfmConnectionState &connState = GetConnState (connId);
+  EfmHostTag efmTag;
+
+  efmTag.SetSentByClient (m_hostMode == EfmHostMode::CLIENT);
+  efmTag.SetConnId (connId);
+  if (connId == 0)
+    NS_LOG_WARN ("PacketTransmitHandler encountered connId zero.");
+
+  //Groundtruth loss
+  connState.seq++;
+  efmTag.SetSeq (connState.seq);
+  NS_LOG_DEBUG ("EfmHostHandler: Transmitted packet from node " << GetNodeId () << " with seq "
+                                                                << efmTag.GetSeq () << " size "
+                                                                << packet->GetSize ());
+  if (packet->GetSize () == 0)
+    connState.ackSeq++;
+  efmTag.SetAckSeq (connState.ackSeq);
+
+  //Groundtruth delay
+  if (Simulator::Now ().GetNanoSeconds () > 0)
+    efmTag.SetNsSent (Simulator::Now ().GetNanoSeconds ());
+  else
+    efmTag.SetNsSent (
+        1); //The efm tag timestamps use 0 as "unset" value, so we must use at least 1 for valid values, and one nanosecond difference is accurate enough
+
+  efmTag.SetNsLastReceived (connState.nsLastReceived);
+  efmTag.SetNsLastPeerSent (connState.nsLastPeerSent);
+  efmTag.SetNsLastPeerReceived (connState.nsLastPeerReceived);
+
+  //Spin bit
+  efmTag.SetSpinBit (connState.spinBit);
+  if (connState.spinFlipped)
+    {
+      m_spinBitUpdateTrace (connState.connId, connState.spinBit, connState.seq);
+      connState.spinFlipped = false;
+    }
+
+  //L bit
+  if (connState.l_counter == 0)
+    {
+      efmTag.SetLBit (false);
+    }
+  else
+    {
+      efmTag.SetLBit (true);
+      m_lBitSetTrace (connState.connId, connState.seq);
+      connState.l_counter--;
+    }
+
+  //Q bit
+  if (connState.q_snt_counter == 0)
+    {
+      connState.qBit = !connState.qBit;
+      connState.q_snt_counter = m_efmManager->GetQBitBlockSize ();
+      m_qBitUpdateTrace (connState.connId, connState.qBit, connState.seq);
+    }
+
+  efmTag.SetQBit (connState.qBit);
+
+  NS_ASSERT (connState.q_snt_counter > 0);
+  connState.q_snt_counter--;
+
+  //R Bit
+  bool oldR = connState.rBit;
+  efmTag.SetRBit (RBitCalcOut (connState));
+  if (oldR != connState.rBit)
+    m_rBitUpdateTrace (connState.connId, connState.rBit, connState.seq);
+
+  // SQ Bits
+  // Either SQ1 or SQ2 has to be set to indicate that SQ is enabled
+  // In the current variant, we only use 2 of the 3 enabled states, so just set SQ1 always
+  efmTag.SetSQ1Bit (1);
+  // SQ2 is set to 1 with a probability of 1/SQFrequency
+  if (m_efmManager->GetUniformRNG ()->GetInteger (1, m_efmManager->GetSQFrequency ()) == 1)
+    efmTag.SetSQ2Bit (1);
+  else
+    efmTag.SetSQ2Bit (0);
+
+  //Consider host mode
+  if (m_hostMode == CLIENT)
+    {
+      DoHandlePacketTransmitClient (packet, efmTag, connState);
+    }
+  else if (m_hostMode == SERVER)
+    {
+      DoHandlePacketTransmitServer (packet, efmTag, connState);
+    }
+
+  packet->AddPacketTag (efmTag);
+}
+
+void
+EfmHostHandler::PacketReceiveHandler (const Ptr<const Packet> packet, EfmHostConnId connId)
+{
+  EfmHostTag efmTag;
+  if (!packet->PeekPacketTag (efmTag))
+    {
+      NS_LOG_DEBUG ("Node " << GetNodeId () << ": No EFM host tag found!");
+      return;
+    }
+
+  if (connId == 0)
+    connId = efmTag.GetConnId ();
+  else
+    NS_ASSERT_MSG (connId == efmTag.GetConnId (),
+                   "Tag conn id: " << efmTag.GetConnId () << ", connId: " << connId);
+
+  EfmConnectionState &connState = GetConnState (connId);
+
+  connState.nsLastReceived = Simulator::Now ().GetNanoSeconds ();
+  connState.nsLastPeerSent = efmTag.GetNsSent ();
+  connState.nsLastPeerReceived = efmTag.GetNsLastReceived ();
+  HandleGTDelayMeasurement (connState, efmTag);
+
+  QRBitProcessRecv (connState, efmTag.GetQBit ());
+
+  //T bit
+  if (connState.t_generation_token_counter < m_efmManager->GetTBitGenTokenCap ())
+    {
+      connState.t_generation_token_counter++;
+    }
+
+  //Consider host mode!
+  if (m_hostMode == CLIENT)
+    {
+      DoHandlePacketReceiveClient (packet, efmTag, connState);
+    }
+  else if (m_hostMode == SERVER)
+    {
+      DoHandlePacketReceiveServer (packet, efmTag, connState);
+    }
+}
+
+void
+EfmHostHandler::PacketLostHandler (int32_t lostCount, EfmHostConnId connId)
+{
+  EfmConnectionState &connState = GetConnState (connId);
+
+  //Do not decrement counter below zero as per L bit specification
+  int32_t tmp = connState.l_counter + lostCount;
+  int32_t oldV = connState.l_counter;
+  if (tmp >= 0)
+    connState.l_counter = tmp;
+  else
+    connState.l_counter = 0;
+  m_lBitCounterUpdateTrace (connState.connId, oldV, connState.l_counter);
+}
+
+void
+EfmHostHandler::DoHandlePacketTransmitClient (const Ptr<const Packet> packet, EfmHostTag &tag,
+                                              EfmConnectionState &connState)
+{
+  tag.SetTBit (TBitCalcOutClient (connState));
+  if (tag.GetTBit ())
+    m_tBitSetTrace (connState.connId, tag.GetSeq ());
+}
+
+void
+EfmHostHandler::DoHandlePacketTransmitServer (const Ptr<const Packet> packet, EfmHostTag &tag,
+                                              EfmConnectionState &connState)
+{
+  //T bit
+  if (connState.t_counter > 0)
+    {
+      connState.t_counter--;
+      tag.SetTBit (true);
+      m_tBitSetTrace (connState.connId, tag.GetSeq ());
+    }
+  else
+    {
+      tag.SetTBit (false);
+    }
+}
+
+void
+EfmHostHandler::DoHandlePacketReceiveClient (const Ptr<const Packet> packet, EfmHostTag &tag,
+                                             EfmConnectionState &connState)
+{
+  //Handle spin flip BEFORE Tbit Counter
+  if (tag.GetSpinBit () == connState.spinBit)
+    {
+      connState.spinBit = !connState.spinBit; //Flip spin bit
+      connState.spinFlipped = true;
+      TBitClientPhase oldPhase = connState.t_phase;
+      TBitHandleSpinFlip (connState, tag.GetTBit ());
+      if (oldPhase != connState.t_phase)
+        {
+          m_tBitPhaseUpdateTrace (connState.connId, oldPhase, connState.t_phase);
+        }
+    }
+
+  if (tag.GetTBit ())
+    {
+      connState.t_phase_without_t_bit = false;
+
+      // Implicitly enable reflection_counter using dedicated phases
+      if (connState.t_phase == GEN2 or connState.t_phase == PAUSE_GEN or connState.t_phase == REF1)
+        {
+          connState.t_reflection_counter++;
+        }
+    }
+}
+
+void
+EfmHostHandler::DoHandlePacketReceiveServer (const Ptr<const Packet> packet, EfmHostTag &tag,
+                                             EfmConnectionState &connState)
+{
+  connState.spinBit = tag.GetSpinBit ();
+
+  if (tag.GetTBit ())
+    {
+      connState.t_counter++;
+    }
+}
+
+void
+EfmHostHandler::QRBitProcessRecv (EfmConnectionState &connState, bool recv_qbit)
+{
+  // Q-bit has not changed
+  if (recv_qbit == connState.q_cur_recv)
+    {
+      connState.q_recv_counter++;
+    }
+  // Q-bit has changed
+  else
+    {
+      connState.q_thresh_counter++;
+
+      if (connState.q_thresh_counter == connState.q_thresh)
+        {
+          connState.q_cur_recv = recv_qbit;
+
+          // Handle R bit
+
+          //Activate R bit and
+          //set R bit to 1 on initial activation
+          if (!connState.r_active)
+            {
+              connState.r_active = true;
+              connState.rBit = true;
+            }
+          connState.r_buf_new_q_blocks.push_front (connState.q_recv_counter);
+          double refl_block_sum =
+              (double) std::accumulate (std::begin (connState.r_buf_new_q_blocks),
+                                        std::end (connState.r_buf_new_q_blocks), 0);
+          double avg_buf_size = refl_block_sum / (double) connState.r_buf_new_q_blocks.size ();
+          uint16_t oldWidth = connState.r_cur_block_width;
+          connState.r_cur_block_width = (uint16_t) floor (avg_buf_size + 0.5);
+          if (oldWidth != connState.r_cur_block_width)
+            {
+              m_rBitBlockLenUpdateTrace (connState.connId, connState.r_cur_block_width);
+            }
+          NS_LOG_DEBUG ("Update R refl. width: " << connState.r_cur_block_width);
+
+          //Update q counters
+          connState.q_recv_counter = connState.q_thresh;
+          connState.q_thresh_counter = 0;
+        }
+    }
+}
+
+bool
+EfmHostHandler::RBitCalcOut (EfmConnectionState &connState)
+{
+  if (connState.r_active)
+    {
+      connState.r_cur_block_counter++;
+
+      if (connState.r_cur_block_counter > connState.r_cur_block_width)
+        {
+          connState.rBit = !connState.rBit;
+          connState.r_cur_block_counter = 1;
+
+          // if there were completely received Q blocks since the last R bit flip: clear them
+          if (connState.r_buf_new_q_blocks.size () > 0)
+            {
+              connState.r_buf_new_q_blocks.clear ();
+            }
+        }
+    }
+
+  return connState.rBit;
+}
+
+void
+EfmHostHandler::TBitHandleSpinFlip (EfmConnectionState &connState, bool tBit)
+{
+  if (tBit)
+    connState.t_phase_without_t_bit = false;
+
+  // Phase transitions are triggered by spin bit flips.
+  switch (connState.t_phase)
+    {
+    // Generation Probing -> Generation Generation
+    case GEN1:
+      connState.t_phase = GEN2;
+      // Implictly enable reflection_counter by resetting it to 0 here and using a dedicated phase for counting
+      connState.t_reflection_counter = 0;
+      break;
+
+    // Generation Generation -> Pause 1
+    case GEN2:
+      connState.t_phase = PAUSE_GEN;
+      if (!tBit)
+        connState.t_phase_without_t_bit = true;
+      break;
+
+    case PAUSE_GEN:
+      // There was an entire spin bit phase without any set TBit -> leave pause phase
+      if (connState.t_phase_without_t_bit)
+        {
+          connState.t_phase = REF1;
+        }
+      else if (!tBit)
+        {
+          connState.t_phase_without_t_bit = true;
+        }
+      break;
+
+    // Reflection Generation -> Reflection Counting
+    case REF1:
+      // Implicitly lock reflection_counter by having a dedicated phase that does not use it
+      connState.t_phase = REF2;
+      break;
+
+    // Reflection Counting -> Pause 2
+    case REF2:
+      // Only leave reflection phase once the reflection counter has reached zero
+      if (connState.t_reflection_counter == 0)
+        connState.t_phase = PAUSE_REF;
+      if (!tBit)
+        connState.t_phase_without_t_bit = true;
+      break;
+
+    case PAUSE_REF:
+      // There was an entire spin bit phase without any set TBit -> leave pause phase
+      if (connState.t_phase_without_t_bit)
+        {
+          connState.t_phase = GEN1;
+          connState.t_generation_token_counter = 0;
+        }
+      else if (!tBit)
+        {
+          connState.t_phase_without_t_bit = true;
+        }
+      break;
+    }
+}
+
+bool
+EfmHostHandler::TBitCalcOutClient (EfmConnectionState &connState)
+{
+  switch (connState.t_phase)
+    {
+    // Generation
+    case GEN1:
+      // Send out as many packets with a set T bit as specified by the generation token counter
+      if (connState.t_generation_token_counter > 0)
+        {
+          connState.t_generation_token_counter--;
+          return true;
+        }
+      break;
+
+    case GEN2:
+      // Send out as many packets with a set T bit as specified by the generation token counter
+      if (connState.t_generation_token_counter > 0)
+        {
+          connState.t_generation_token_counter--;
+          return true;
+        }
+      break;
+
+    // Pause
+    case PAUSE_GEN:
+      return false;
+      break;
+
+    // Reflection
+    case REF1:
+      // Send out as many packets with a set T bit as specified by the generation token counter and the reflection counter
+      if (connState.t_reflection_counter > 0 && connState.t_generation_token_counter > 0)
+        {
+          connState.t_reflection_counter--;
+          connState.t_generation_token_counter--;
+          return true;
+        }
+      break;
+
+    case REF2:
+      // Send out as many packets with a set T bit as specified by the generation token counter and the reflection counter
+      if (connState.t_reflection_counter > 0 && connState.t_generation_token_counter > 0)
+        {
+          connState.t_reflection_counter--;
+          connState.t_generation_token_counter--;
+          return true;
+        }
+      break;
+
+    case PAUSE_REF:
+      return false;
+      break;
+
+    default:
+      return false;
+    }
+  return false;
+}
+
+//Called on packet receive
+void
+EfmHostHandler::HandleGTDelayMeasurement (EfmConnectionState &connState, EfmHostTag &tag)
+{
+  if (tag.GetNsLastPeerSent () > 0 && tag.GetNsLastReceived () > 0)
+    {
+      NS_ASSERT (tag.GetNsSent () > 0);
+      uint32_t halfTransDelayMs =
+          (Simulator::Now () - Time::FromInteger (tag.GetNsSent (), Time::Unit::NS))
+              .GetMilliSeconds ();
+      uint32_t peerAppDelayMs = (Time::FromInteger (tag.GetNsSent (), Time::Unit::NS) -
+                                 Time::FromInteger (tag.GetNsLastReceived (), Time::Unit::NS))
+                                    .GetMilliSeconds ();
+      uint32_t rtTransDelayMs =
+          (Simulator::Now () - Time::FromInteger (tag.GetNsLastPeerSent (), Time::Unit::NS))
+              .GetMilliSeconds () -
+          peerAppDelayMs;
+      m_gtTransDelayEventTrace (connState.connId, halfTransDelayMs, rtTransDelayMs);
+
+      if (tag.GetNsLastPeerReceived () > 0)
+        { //Calculate measurement including application delay
+          NS_ASSERT (tag.GetNsLastPeerSent () >= tag.GetNsLastPeerReceived ());
+          uint32_t ownAppDelayMs =
+              (Time::FromInteger (tag.GetNsLastPeerSent (), Time::Unit::NS) -
+               Time::FromInteger (tag.GetNsLastPeerReceived (), Time::Unit::NS))
+                  .GetMilliSeconds ();
+          m_gtAppDelayEventTrace (connState.connId, halfTransDelayMs + peerAppDelayMs,
+                                  rtTransDelayMs + peerAppDelayMs + ownAppDelayMs);
+          // NS_LOG_WARN("halfTransDelayMs " << halfTransDelayMs << " peerAppDelayMs " << peerAppDelayMs << " rtTransDelayMs " << rtTransDelayMs << " ownAppDelayMs " << ownAppDelayMs);
+        }
+    }
+}
+
+} // namespace ns3
diff --git a/src/efm-manager/model/efm-host-handler.h b/src/efm-manager/model/efm-host-handler.h
new file mode 100644
index 000000000..0d69499bc
--- /dev/null
+++ b/src/efm-manager/model/efm-host-handler.h
@@ -0,0 +1,219 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+//
+// Copyright (c) 2009 INESC Porto
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 2 as
+// published by the Free Software Foundation;
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+// Author: Gustavo J. A. M. Carneiro  <gjc@inescporto.pt> <gjcarneiro@gmail.com>
+// Modifications by:
+//  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+//  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+//
+
+#ifndef EFM_HOST_HANDLER_H
+#define EFM_HOST_HANDLER_H
+
+#include <map>
+#include <vector>
+
+#include "ns3/object.h"
+#include "ns3/nstime.h"
+#include "ns3/packet.h"
+#include "ns3/efm-host-tag.h"
+#include "ns3/traced-callback.h"
+#include "ns3/node.h"
+
+namespace ns3 {
+
+typedef uint32_t EfmHostConnId;
+
+class EfmManager;
+
+enum EfmHostMode { CLIENT, SERVER };
+
+//Used for the connection state of the client
+enum TBitClientPhase { GEN1, GEN2, PAUSE_GEN, REF1, REF2, PAUSE_REF };
+
+/// The EfmHostHandler class is responsible for listening for packet events
+/// in a specific point of the simulated space, report those events to
+/// the global EfmManager, and collect its own flow statistics
+/// regarding only the packets that pass through that probe.
+class EfmHostHandler : public Object
+{
+protected:
+  /// Constructor
+  /// \param efmManager the EfmManager this handler is associated with
+  EfmHostHandler (Ptr<EfmManager> efmManager, EfmHostMode hostMode, Ptr<Node> node);
+  virtual void DoDispose (void);
+
+public:
+  virtual ~EfmHostHandler ();
+
+  // Delete copy constructor and assignment operator to avoid misuse
+  EfmHostHandler (EfmHostHandler const &) = delete;
+  EfmHostHandler &operator= (EfmHostHandler const &) = delete;
+
+  /// Register this type.
+  /// \return The TypeId.
+  static TypeId GetTypeId (void);
+  virtual TypeId GetInstanceTypeId () const;
+
+  /// Structure to hold the statistics of a flow
+  struct EfmConnectionState
+  {
+    EfmConnectionState (EfmHostConnId connectionId)
+        : connId (connectionId), nsLastReceived (0), nsLastPeerSent (0), nsLastPeerReceived (0)
+    {
+    }
+
+    EfmHostConnId connId;
+
+    //groundtruth
+    uint32_t seq = 0;
+    uint32_t ackSeq = 0;
+
+    uint64_t nsLastReceived; //!< Timestamp (nanoseconds) when the most recent packet was received
+    uint64_t nsLastPeerSent; //!< Most recent nsSent received from peer
+    uint64_t nsLastPeerReceived; //!< Most recent nsLastReceived received from peer
+
+    //Spin bit
+    bool spinBit = false; //!< Current spin bit value
+    bool spinFlipped = false; //!< For tracing purposes
+
+    //Q bit
+    bool qBit = false; //!< Current q bit value
+    uint8_t q_snt_counter = 64; //!< Current q bit counter
+    uint16_t q_recv_counter = 0;
+    uint16_t q_thresh_counter = 0;
+    uint16_t q_thresh = 8;
+    bool q_cur_recv = false;
+
+    //R bit
+    bool rBit = false; //!< Current r bit value
+    uint16_t r_cur_block_width = 0;
+    uint16_t r_cur_block_counter = 0;
+    bool r_active = false;
+    std::list<uint16_t> r_buf_new_q_blocks;
+
+    //L bit
+    int32_t l_counter = 0; //!< Current l bit counter
+
+    // T bit
+    uint16_t t_counter = 0; //!< Only used by the server
+
+    uint16_t t_generation_token_counter = 0; //!< Only used by the client
+    uint16_t t_reflection_counter = 0; //!< Only used by the client
+    TBitClientPhase t_phase = GEN1; //!< Only used by the client
+    bool t_phase_without_t_bit = false; //!< Only used by the client
+  };
+
+  uint32_t GetNodeId () const;
+  EfmHostMode GetHostMode () const;
+
+  typedef void (*EfmBitStateUpdatedTracedCallback) (EfmHostConnId connId, bool newState,
+                                                    uint32_t seq);
+  typedef void (*EfmBitSetTracedCallback) (EfmHostConnId connId, uint32_t seq);
+  typedef void (*EfmLBitCounterUpdatedTracedCallback) (EfmHostConnId connId, uint32_t oldValue,
+                                                       uint32_t newValue);
+  typedef void (*EfmRBitWidthUpdatedTracedCallback) (EfmHostConnId connId, uint32_t newValue);
+  typedef void (*EfmTBitPhaseUpdatedTracedCallback) (EfmHostConnId connId, TBitClientPhase oldPhase,
+                                                     TBitClientPhase newPhase);
+  typedef void (*GroundtruthDelayEventTracedCallback) (EfmHostConnId connId, uint32_t halfDelay,
+                                                       uint32_t fullDelay);
+
+protected:
+  Ptr<EfmManager> m_efmManager; //!< the EfmManager instance
+  EfmHostMode m_hostMode;
+
+  std::map<EfmHostConnId, EfmConnectionState> m_connStates; //!< The connection state
+  uint32_t m_nodeId;
+
+  EfmConnectionState &GetConnState (EfmHostConnId connId);
+
+  TracedCallback<EfmHostConnId, uint32_t, uint32_t>
+      m_gtTransDelayEventTrace; //For groundtruth delay based measurements excluding application delay
+  TracedCallback<EfmHostConnId, uint32_t, uint32_t>
+      m_gtAppDelayEventTrace; //For groundtruth delay based measurements including application delay
+
+  TracedCallback<EfmHostConnId, bool, uint32_t> m_spinBitUpdateTrace;
+  TracedCallback<EfmHostConnId, bool, uint32_t> m_qBitUpdateTrace;
+  TracedCallback<EfmHostConnId, bool, uint32_t> m_rBitUpdateTrace;
+  TracedCallback<EfmHostConnId, uint32_t> m_lBitSetTrace;
+  TracedCallback<EfmHostConnId, uint32_t> m_tBitSetTrace;
+  TracedCallback<EfmHostConnId, uint32_t, uint32_t> m_lBitCounterUpdateTrace;
+  TracedCallback<EfmHostConnId, uint32_t> m_rBitBlockLenUpdateTrace;
+  TracedCallback<EfmHostConnId, TBitClientPhase, TBitClientPhase> m_tBitPhaseUpdateTrace;
+
+  /// Handle a packet being transmitted by applying the EfmHostTag and
+  /// updating the local EFM connection state
+  /// \param packet The packet being transmitted
+  void PacketTransmitHandler (const Ptr<const Packet> packet, EfmHostConnId connId);
+
+  /// Handle a packet being received by updating the local EFM connection state
+  /// \param packet The packet being received
+  void PacketReceiveHandler (const Ptr<const Packet> packet, EfmHostConnId connId);
+
+  /// Handle a number of packets being reported as lost
+  /// \param lostCount The number of packets that are considered lost
+  void PacketLostHandler (int32_t lostCount, EfmHostConnId connId);
+
+private:
+  /// Handle a packet being transmitted by applying the EfmHostTag and
+  /// updating the local EFM connection state based on EFM client behavior
+  /// \param packet The packet being transmitted
+  /// \param tag The EfmHostTag to be constructed
+  void DoHandlePacketTransmitClient (const Ptr<const Packet> packet, EfmHostTag &tag,
+                                     EfmConnectionState &connState);
+
+  /// Handle a packet being transmitted by applying the EfmHostTag and
+  /// updating the local EFM connection state based on EFM server behavior
+  /// \param packet The packet being transmitted
+  /// \param tag The EfmHostTag to be constructed
+  void DoHandlePacketTransmitServer (const Ptr<const Packet> packet, EfmHostTag &tag,
+                                     EfmConnectionState &connState);
+
+  /// Handle a packet being received by updating the local EFM connection state
+  /// based on EFM client behavior
+  /// \param packet The packet being received
+  /// \param tag The EfmHostTag retrieved from the packet
+  void DoHandlePacketReceiveClient (const Ptr<const Packet> packet, EfmHostTag &tag,
+                                    EfmConnectionState &connState);
+
+  /// Handle a packet being received by updating the local EFM connection state
+  /// based on EFM server behavior
+  /// \param packet The packet being received
+  /// \param tag The EfmHostTag retrieved from the packet
+  void DoHandlePacketReceiveServer (const Ptr<const Packet> packet, EfmHostTag &tag,
+                                    EfmConnectionState &connState);
+
+  //Process value of received Q bit to modify Q and R bit states
+  void QRBitProcessRecv (EfmConnectionState &connState, bool recv_qbit);
+
+  /// Calculate the value of the R bit for the next outgoing packet
+  /// \return The next R bit value
+  bool RBitCalcOut (EfmConnectionState &connState);
+
+  /// Handle T bit state transitions on spin flip
+  void TBitHandleSpinFlip (EfmConnectionState &connState, bool tBit);
+
+  /// Calculate the value of the T bit for the next outgoing packet in client mode
+  /// \return The next T bit value
+  bool TBitCalcOutClient (EfmConnectionState &connState);
+
+  void HandleGTDelayMeasurement (EfmConnectionState &connState, EfmHostTag &tag);
+};
+
+} // namespace ns3
+
+#endif /* HOST_HANDLER_H */
diff --git a/src/efm-manager/model/efm-host-tag.cc b/src/efm-manager/model/efm-host-tag.cc
new file mode 100644
index 000000000..64b0557b5
--- /dev/null
+++ b/src/efm-manager/model/efm-host-tag.cc
@@ -0,0 +1,299 @@
+/*
+ * Copyright (C) 2025  RWTH Aachen University
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ * Authors: 
+ *  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+ *  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+ */
+
+#include "efm-host-tag.h"
+
+namespace ns3 {
+
+TypeId
+EfmHostTag::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::EfmHostTag")
+                          .SetParent<Tag> ()
+                          .SetGroupName ("EfmManager")
+                          .AddConstructor<EfmHostTag> ();
+  return tid;
+}
+TypeId
+EfmHostTag::GetInstanceTypeId (void) const
+{
+  return GetTypeId ();
+}
+uint32_t
+EfmHostTag::GetSerializedSize (void) const
+{
+  return 1 + 1 + 1 + 1 + 1 + 1 + 4 + 4 + 8 + 8 + 8 + 8 + 1 + 4;
+}
+void
+EfmHostTag::Serialize (TagBuffer buf) const
+{
+  buf.WriteU8 (m_spin);
+  buf.WriteU8 (m_q);
+  buf.WriteU8 (m_r);
+  buf.WriteU8 (m_l);
+  buf.WriteU8 (m_t);
+  buf.WriteU8 (m_sq);
+  buf.WriteU32 (m_seq);
+  buf.WriteU32 (m_ackSeq);
+  buf.WriteU64 (m_nsSent);
+  buf.WriteU64 (m_nsLastPeerSent);
+  buf.WriteU64 (m_nsLastReceived);
+  buf.WriteU64 (m_nsLastPeerReceived);
+  buf.WriteU8 (m_sentByClient);
+  buf.WriteU32 (m_connId);
+}
+void
+EfmHostTag::Deserialize (TagBuffer buf)
+{
+  m_spin = buf.ReadU8 ();
+  m_q = buf.ReadU8 ();
+  m_r = buf.ReadU8 ();
+  m_l = buf.ReadU8 ();
+  m_t = buf.ReadU8 ();
+  m_sq = buf.ReadU8 ();
+  m_seq = buf.ReadU32 ();
+  m_ackSeq = buf.ReadU32 ();
+  m_nsSent = buf.ReadU64 ();
+  m_nsLastPeerSent = buf.ReadU64 ();
+  m_nsLastReceived = buf.ReadU64 ();
+  m_nsLastPeerReceived = buf.ReadU64 ();
+  m_sentByClient = buf.ReadU8 ();
+  m_connId = buf.ReadU32 ();
+}
+void
+EfmHostTag::Print (std::ostream &os) const
+{
+  os << "SpinBit=" << m_spin;
+  os << " QBit=" << m_q;
+  os << " RBit=" << m_r;
+  os << " LBit=" << m_l;
+  os << " TBit=" << m_t;
+  os << " Seq=" << m_seq;
+}
+EfmHostTag::EfmHostTag ()
+    : Tag (),
+      m_spin (false),
+      m_q (false),
+      m_r (false),
+      m_l (false),
+      m_t (false),
+      m_sq (0),
+      m_seq (0),
+      m_ackSeq (0),
+      m_nsSent (0),
+      m_nsLastReceived (0),
+      m_nsLastPeerSent (0),
+      m_nsLastPeerReceived (0),
+      m_sentByClient (false),
+      m_connId (0)
+{
+}
+
+void
+EfmHostTag::SetSpinBit (uint8_t spinBit)
+{
+  m_spin = spinBit;
+}
+
+void
+EfmHostTag::SetQBit (uint8_t qBit)
+{
+  m_q = qBit;
+}
+
+void
+EfmHostTag::SetRBit (uint8_t rBit)
+{
+  m_r = rBit;
+}
+
+void
+EfmHostTag::SetLBit (uint8_t lBit)
+{
+  m_l = lBit;
+}
+
+void
+EfmHostTag::SetTBit (uint8_t tBit)
+{
+  m_t = tBit;
+}
+
+void
+EfmHostTag::SetSQ1Bit (uint8_t sq1Bit)
+{
+  if (sq1Bit == 0)
+    m_sq &= 0b11111110;
+  else if (sq1Bit == 1)
+    m_sq |= 0b00000001;
+  else
+    NS_FATAL_ERROR ("Invalid SQ1 bit value");
+}
+
+void
+EfmHostTag::SetSQ2Bit (uint8_t sq2Bit)
+{
+  if (sq2Bit == 0)
+    m_sq &= 0b11111101;
+  else if (sq2Bit == 1)
+    m_sq |= 0b00000010;
+  else
+    NS_FATAL_ERROR ("Invalid SQ2 bit value");
+}
+
+void
+EfmHostTag::SetSeq (uint32_t seq)
+{
+  m_seq = seq;
+}
+
+void
+EfmHostTag::SetAckSeq (uint32_t ackSeq)
+{
+  m_ackSeq = ackSeq;
+}
+
+void
+EfmHostTag::SetNsSent (uint64_t ns)
+{
+  m_nsSent = ns;
+}
+
+void
+EfmHostTag::SetNsLastPeerSent (uint64_t ns)
+{
+  m_nsLastPeerSent = ns;
+}
+
+void
+EfmHostTag::SetNsLastReceived (uint64_t ns)
+{
+  m_nsLastReceived = ns;
+}
+
+void
+EfmHostTag::SetNsLastPeerReceived (uint64_t ns)
+{
+  m_nsLastPeerReceived = ns;
+}
+
+void
+EfmHostTag::SetSentByClient (uint8_t sentByClient)
+{
+  m_sentByClient = sentByClient;
+}
+
+void
+EfmHostTag::SetConnId (uint32_t connId)
+{
+  m_connId = connId;
+}
+
+uint8_t
+EfmHostTag::GetSpinBit (void) const
+{
+  return m_spin;
+}
+
+uint8_t
+EfmHostTag::GetQBit (void) const
+{
+  return m_q;
+}
+
+uint8_t
+EfmHostTag::GetRBit (void) const
+{
+  return m_r;
+}
+
+uint8_t
+EfmHostTag::GetLBit (void) const
+{
+  return m_l;
+}
+
+uint8_t
+EfmHostTag::GetTBit (void) const
+{
+  return m_t;
+}
+
+uint8_t
+EfmHostTag::GetSQ1Bit (void) const
+{
+  return m_sq & 0b00000001;
+}
+
+uint8_t
+EfmHostTag::GetSQ2Bit (void) const
+{
+  return (m_sq & 0b00000010) >> 1;
+}
+
+uint32_t
+EfmHostTag::GetSeq (void) const
+{
+  return m_seq;
+}
+
+uint32_t
+EfmHostTag::GetAckSeq (void) const
+{
+  return m_ackSeq;
+}
+
+uint64_t
+EfmHostTag::GetNsSent (void) const
+{
+  return m_nsSent;
+}
+
+uint64_t
+EfmHostTag::GetNsLastPeerSent (void) const
+{
+  return m_nsLastPeerSent;
+}
+
+uint64_t
+EfmHostTag::GetNsLastReceived (void) const
+{
+  return m_nsLastReceived;
+}
+
+uint64_t
+EfmHostTag::GetNsLastPeerReceived (void) const
+{
+  return m_nsLastPeerReceived;
+}
+
+uint8_t
+EfmHostTag::GetSentByClient (void) const
+{
+  return m_sentByClient;
+}
+
+uint32_t
+EfmHostTag::GetConnId (void) const
+{
+  return m_connId;
+}
+
+} // namespace ns3
diff --git a/src/efm-manager/model/efm-host-tag.h b/src/efm-manager/model/efm-host-tag.h
new file mode 100644
index 000000000..597273488
--- /dev/null
+++ b/src/efm-manager/model/efm-host-tag.h
@@ -0,0 +1,181 @@
+/*
+ * Copyright (C) 2025  RWTH Aachen University
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ * Authors: 
+ *  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+ *  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+ */
+
+#ifndef EFM_HOST_TAG_H
+#define EFM_HOST_TAG_H
+
+#include "ns3/packet.h"
+#include "ns3/nstime.h"
+
+namespace ns3 {
+/**
+ *
+ * \brief Tag used to store the EFM measurement bits
+ *
+ * This tag is added by EfmHostHandler on outgoing packets
+ */
+class EfmHostTag : public Tag
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+  virtual TypeId GetInstanceTypeId (void) const;
+  virtual uint32_t GetSerializedSize (void) const;
+  virtual void Serialize (TagBuffer buf) const;
+  virtual void Deserialize (TagBuffer buf);
+  virtual void Print (std::ostream &os) const;
+  EfmHostTag ();
+  /**
+   * \brief Set the spin bit
+   * \param spinBit the value of the spin bit
+   */
+  void SetSpinBit (uint8_t spinBit);
+  /**
+   * \brief Set the spin bit
+   * \param qBit the value of the spin bit
+   */
+  void SetQBit (uint8_t qBit);
+  /**
+   * \brief Set the spin bit
+   * \param rBit the value of the spin bit
+   */
+  void SetRBit (uint8_t rBit);
+  /**
+   * \brief Set the spin bit
+   * \param lBit the value of the spin bit
+   */
+  void SetLBit (uint8_t lBit);
+  /**
+   * \brief Set the spin bit
+   * \param tBit the value of the spin bit
+   */
+  void SetTBit (uint8_t tBit);
+
+  void SetSQ1Bit (uint8_t sq1Bit);
+
+  void SetSQ2Bit (uint8_t sq2Bit);
+
+  void SetSeq (uint32_t seq);
+
+  void SetAckSeq (uint32_t ackSeq);
+
+  void SetNsSent (uint64_t ns);
+
+  void SetNsLastPeerSent (uint64_t ns);
+
+  void SetNsLastReceived (uint64_t ns);
+
+  void SetNsLastPeerReceived (uint64_t ns);
+
+  void SetSentByClient (uint8_t sentByClient);
+
+  void SetConnId (uint32_t connId);
+
+  /**
+   * \brief Get the value of the spin bit
+   * \returns the value of the spin bit
+   */
+  uint8_t GetSpinBit (void) const;
+  /**
+   * \brief Get the value of the Q bit
+   * \returns the value of the Q bit
+   */
+  uint8_t GetQBit (void) const;
+  /**
+   * \brief Get the value of the R bit
+   * \returns the value of the R bit
+   */
+  uint8_t GetRBit (void) const;
+  /**
+   * \brief Get the value of the L bit
+   * \returns the value of the L bit
+   */
+  uint8_t GetLBit (void) const;
+  /**
+   * \brief Get the value of the T bit
+   * \returns the value of the T bit
+   */
+  uint8_t GetTBit (void) const;
+
+  uint8_t GetSQ1Bit (void) const;
+
+  uint8_t GetSQ2Bit (void) const;
+
+  uint32_t GetSeq (void) const;
+
+  uint32_t GetAckSeq (void) const;
+
+  // Get the timestamp (nanoseconds) of when the packet associated with this tag was transmitted
+  uint64_t GetNsSent (void) const;
+
+  // Get the value of GetNsSent() for the packet most recently received by the peer at the point of transmission of the packet associated with this tag
+  uint64_t GetNsLastPeerSent (void) const;
+
+  // Get the timestamp (nanoseconds) of when the most recent packet was received by the peer at the point of transmission of the packet associated with this tag
+  uint64_t GetNsLastReceived (void) const;
+
+  // Get the value of GetNsLastReceived() for the packet most recently received by the peer at the point of transmission of the packet associated with this tag
+  uint64_t GetNsLastPeerReceived (void) const;
+
+  uint8_t GetSentByClient (void) const;
+
+  uint32_t GetConnId (void) const;
+
+private:
+  uint8_t m_spin; //!< spin bit
+  uint8_t m_q; //!< Q bit
+  uint8_t m_r; //!< R bit
+  uint8_t m_l; //!< L bit
+  uint8_t m_t; //!< T bit
+  uint8_t m_sq; //!< stateless Q bits (stored in the 2 LSBs)
+  uint32_t m_seq; //!< sequence number
+  uint32_t m_ackSeq; //!< ack sequence number
+  uint64_t m_nsSent; //!< Timestamp (nanoseconds) when the associated packet was transmitted
+  uint64_t m_nsLastReceived; //!< Timestamp (nanoseconds) when the most recent packet was received
+  uint64_t m_nsLastPeerSent; //!< Most recent nsSent received from peer
+  uint64_t m_nsLastPeerReceived; //!< Most recent nsLastReceived received from peer
+  uint8_t m_sentByClient; //!< to indicate if tagged packet was sent by a client or a server
+  uint32_t m_connId; //!< connection identifier
+
+  /* 
+    ----- Explanation of timestamps -----
+    For a connection between hosts A and B, define the following points in time:
+    t0: time when a packet P0 is received by A
+    t1: time when a packet P1 is sent by A
+    t2: time when packet P1 is received by B
+    t3: time after t2 when a packet P2 is sent by B
+    t4: time when packet P2 is received by A
+
+    The following holds for the timestamps in the tag associated with P2, assuming
+    a) no other packet sent by B was received by A between t0 and t1 and
+    b) no other packet sent by A was received by B between t2 and t3:
+    t0 = m_nsLastPeerReceived
+    t1 = m_nsLastPeerSent
+    t2 = m_nsLastReceived
+    t3 = m_nsSent
+  */
+};
+
+} // namespace ns3
+
+#endif /* EFM_HOST_TAG_H */
diff --git a/src/efm-manager/model/efm-manager.cc b/src/efm-manager/model/efm-manager.cc
new file mode 100644
index 000000000..c8f8ee14c
--- /dev/null
+++ b/src/efm-manager/model/efm-manager.cc
@@ -0,0 +1,284 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+//
+// Copyright (c) 2009 INESC Porto
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 2 as
+// published by the Free Software Foundation;
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+// Author: Gustavo J. A. M. Carneiro  <gjc@inescporto.pt> <gjcarneiro@gmail.com>
+// Modifications by:
+//  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+//  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+//
+
+#include "efm-manager.h"
+#include "ns3/simulator.h"
+#include "ns3/log.h"
+#include "ns3/double.h"
+#include "ns3/socket.h"
+#include "ns3/quic-socket-base.h"
+#include "ns3/tcp-socket-base.h"
+#include "ns3/quic-efm-host-handler.h"
+#include "ns3/tcp-efm-host-handler.h"
+#include <fstream>
+#include <sstream>
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("EfmManager");
+
+NS_OBJECT_ENSURE_REGISTERED (EfmManager);
+
+TypeId
+EfmManager::GetTypeId (void)
+{
+  static TypeId tid =
+      TypeId ("ns3::EfmManager")
+          .SetParent<Object> ()
+          .SetGroupName ("EfmManager")
+          .AddConstructor<EfmManager> ()
+          .AddAttribute ("QbitBlockSize", "The size of Q bit blocks.", IntegerValue (64),
+                         MakeIntegerAccessor (&EfmManager::m_qbit_block_size),
+                         MakeUintegerChecker<uint16_t> (1))
+          .AddAttribute ("TbitGenTokenCap",
+                         "The maximum number of generation tokens stored at once by EFM clients.",
+                         IntegerValue (1), MakeIntegerAccessor (&EfmManager::m_tbit_gen_token_cap),
+                         MakeUintegerChecker<uint8_t> (1))
+          .AddAttribute ("SQFrequency", "The frequency in packets of sending SQ2.",
+                         IntegerValue (64), MakeIntegerAccessor (&EfmManager::m_sq_frequency),
+                         MakeUintegerChecker<uint16_t> (1))
+          .AddTraceSource ("EfmHostHandlerCreated", "New Efm host handler created for new socket",
+                           MakeTraceSourceAccessor (&EfmManager::m_efmHstHndlrCrtdTrace),
+                           "ns3::EfmManager::EfmHstHndlrCrtdTracedCallback");
+  return tid;
+}
+
+TypeId
+EfmManager::GetInstanceTypeId (void) const
+{
+  return GetTypeId ();
+}
+
+EfmManager::EfmManager () : m_enabled (true)
+{
+  NS_LOG_FUNCTION (this);
+  m_uniformRNG = CreateObject<UniformRandomVariable> ();
+}
+
+Ptr<UniformRandomVariable>
+EfmManager::GetUniformRNG ()
+{
+  return m_uniformRNG;
+}
+
+void
+EfmManager::DoDispose (void)
+{
+  NS_LOG_FUNCTION (this);
+  Simulator::Cancel (m_startEvent);
+  Simulator::Cancel (m_stopEvent);
+  for (uint32_t i = 0; i < m_hostHandlers.size (); i++)
+    {
+      m_hostHandlers[i]->Dispose ();
+      m_hostHandlers[i] = 0;
+    }
+  Object::DoDispose ();
+}
+
+void
+EfmManager::AddHostHandler (Ptr<EfmHostHandler> handler)
+{
+  m_hostHandlers.push_back (handler);
+}
+
+const EfmManager::EfmHostHandlerContainer &
+EfmManager::GetAllHostHandlers () const
+{
+  return m_hostHandlers;
+}
+
+void
+EfmManager::ServerSocketCreationHandler (Ptr<Socket> socket)
+{
+  NS_LOG_FUNCTION (this << socket);
+  Ptr<QuicSocketBase> quic_socket = socket->GetObject<QuicSocketBase> ();
+  if (quic_socket)
+    {
+      Ptr<QuicEfmHostHandler> quicHandler = Create<QuicEfmHostHandler> (this, quic_socket, SERVER);
+      m_efmHstHndlrCrtdTrace (quicHandler);
+      NS_LOG_DEBUG ("Efm host handler bound to QUIC server socket.");
+      return;
+    }
+
+  Ptr<TcpSocketBase> tcp_socket = socket->GetObject<TcpSocketBase> ();
+  if (tcp_socket)
+    {
+      Ptr<TcpEfmHostHandler> tcpHandler = Create<TcpEfmHostHandler> (this, tcp_socket, SERVER);
+      m_efmHstHndlrCrtdTrace (tcpHandler);
+      NS_LOG_DEBUG ("Efm host handler bound to TCP server socket.");
+      return;
+    }
+
+  NS_LOG_WARN ("EFM-Manager: Unsupported server socket type!");
+}
+
+void
+EfmManager::ClientSocketCreationHandler (Ptr<Socket> socket)
+{
+  NS_LOG_FUNCTION (this << socket);
+  Ptr<QuicSocketBase> quic_socket = socket->GetObject<QuicSocketBase> ();
+  if (quic_socket)
+    {
+      Ptr<QuicEfmHostHandler> quicHandler = Create<QuicEfmHostHandler> (this, quic_socket, CLIENT);
+      m_efmHstHndlrCrtdTrace (quicHandler);
+      NS_LOG_DEBUG ("Efm host handler bound to QUIC client socket.");
+      return;
+    }
+
+  Ptr<TcpSocketBase> tcp_socket = socket->GetObject<TcpSocketBase> ();
+  if (tcp_socket)
+    {
+      Ptr<TcpEfmHostHandler> tcpHandler = Create<TcpEfmHostHandler> (this, tcp_socket, CLIENT);
+      m_efmHstHndlrCrtdTrace (tcpHandler);
+      NS_LOG_DEBUG ("Efm host handler bound to TCP client socket.");
+      return;
+    }
+
+  NS_LOG_WARN ("EFM-Manager: Unsupported client socket type!");
+}
+
+uint16_t
+EfmManager::GetQBitBlockSize (void) const
+{
+  return m_qbit_block_size;
+}
+
+uint8_t
+EfmManager::GetTBitGenTokenCap (void) const
+{
+  return m_tbit_gen_token_cap;
+}
+
+uint16_t
+EfmManager::GetSQFrequency (void) const
+{
+  return m_sq_frequency;
+}
+
+uint32_t
+EfmManager::ClassifyConnection (Address &client, Address &server, uint8_t protocol)
+{
+  if (InetSocketAddress::IsMatchingType (client) && InetSocketAddress::IsMatchingType (server))
+    {
+      InetSocketAddress _client = InetSocketAddress::ConvertFrom (client);
+      InetSocketAddress _server = InetSocketAddress::ConvertFrom (server);
+
+      FiveTuple ft;
+      ft.clientAddress = _client.GetIpv4 ();
+      ft.clientPort = _client.GetPort ();
+      ft.serverAddress = _server.GetIpv4 ();
+      ft.serverPort = _server.GetPort ();
+      ft.protocol = protocol;
+
+      // NS_LOG_WARN("client address: " << ft.clientAddress << " client port: " << ft.clientPort << " Protocol: " << (uint16_t)ft.protocol);
+      // NS_LOG_WARN("server address: " << ft.serverAddress << " server port: " << ft.serverPort << " Protocol: " << (uint16_t)ft.protocol);
+
+      if (ft.clientAddress == Ipv4Address::GetZero ())
+        {
+          //This is usually correctable via the connId contained in the EfmHost Tag
+          NS_LOG_DEBUG (
+              "EfmManager could not classify host connection: Invalid client IP address.");
+          return 0;
+        }
+
+      if (ft.serverAddress == Ipv4Address::GetZero ())
+        {
+          //This is usually correctable via the connId contained in the EfmHost Tag
+          NS_LOG_DEBUG ("EfmManager could not classify host connection: Invalid peer IP address.");
+          return 0;
+        }
+
+      auto it = m_ConnMap.find (ft);
+      if (it != m_ConnMap.end ())
+        return it->second;
+
+      m_ConnMap[ft] = m_nextConnId++; //Use old value of nextConnId and increment
+
+      return m_nextConnId - 1;
+    }
+  else
+    {
+      NS_FATAL_ERROR ("Undhandled address classification.");
+    }
+}
+
+bool
+operator<(const EfmManager::FiveTuple &t1, const EfmManager::FiveTuple &t2)
+{
+  if (t1.clientAddress < t2.clientAddress)
+    {
+      return true;
+    }
+  if (t1.clientAddress != t2.clientAddress)
+    {
+      return false;
+    }
+
+  if (t1.serverAddress < t2.serverAddress)
+    {
+      return true;
+    }
+  if (t1.serverAddress != t2.serverAddress)
+    {
+      return false;
+    }
+
+  if (t1.protocol < t2.protocol)
+    {
+      return true;
+    }
+  if (t1.protocol != t2.protocol)
+    {
+      return false;
+    }
+
+  if (t1.clientPort < t2.clientPort)
+    {
+      return true;
+    }
+  if (t1.clientPort != t2.clientPort)
+    {
+      return false;
+    }
+
+  if (t1.serverPort < t2.serverPort)
+    {
+      return true;
+    }
+  if (t1.serverPort != t2.serverPort)
+    {
+      return false;
+    }
+
+  return false;
+}
+
+bool
+operator== (const EfmManager::FiveTuple &t1, const EfmManager::FiveTuple &t2)
+{
+  return (t1.clientAddress == t2.clientAddress && t1.serverAddress == t2.serverAddress &&
+          t1.protocol == t2.protocol && t1.clientPort == t2.clientPort &&
+          t1.serverPort == t2.serverPort);
+}
+
+} // namespace ns3
diff --git a/src/efm-manager/model/efm-manager.h b/src/efm-manager/model/efm-manager.h
new file mode 100644
index 000000000..c42d8a03e
--- /dev/null
+++ b/src/efm-manager/model/efm-manager.h
@@ -0,0 +1,159 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+//
+// Copyright (c) 2009 INESC Porto
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 2 as
+// published by the Free Software Foundation;
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+// Author: Gustavo J. A. M. Carneiro  <gjc@inescporto.pt> <gjcarneiro@gmail.com>
+// Modifications by:
+//  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+//  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+//
+
+#ifndef EFM_MANAGER_H
+#define EFM_MANAGER_H
+
+#include <vector>
+#include <map>
+
+#include "ns3/ptr.h"
+#include "ns3/object.h"
+#include "ns3/efm-host-handler.h"
+#include "ns3/nstime.h"
+#include "ns3/event-id.h"
+#include "ns3/socket.h"
+#include "ns3/random-variable-stream.h"
+
+namespace ns3 {
+
+/**
+ * \defgroup efm-manager Endhost Manager
+ * \brief  Handles the EFM implementation logic for endhosts
+ */
+
+/**
+ * \ingroup efm-manager
+ * \brief An object that manages the EFM logic for endhosts
+ *
+ * The EfmManager class is responsible for adding tags with EFM data to outgoing packets
+ *
+ */
+class EfmManager : public Object
+{
+public:
+  struct EfmConfig
+  {
+    uint16_t qbit_block_size = 64;
+    uint8_t tbit_gen_token_cap = 1;
+  };
+
+  //A five tuple used to identify a connection
+  struct FiveTuple
+  {
+    Ipv4Address clientAddress;
+    Ipv4Address serverAddress;
+    uint8_t protocol;
+    uint16_t clientPort;
+    uint16_t serverPort;
+  };
+
+  /* see http://www.iana.org/assignments/protocol-numbers */
+  static const uint8_t TCP_PROT_NUMBER = 6; //!< TCP Protocol number
+  static const uint8_t UDP_PROT_NUMBER = 17; //!< UDP Protocol number
+
+  // --- basic methods ---
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId ();
+  virtual TypeId GetInstanceTypeId () const;
+  EfmManager ();
+
+  // --- methods to be used by the EfmHostHandler's only ---
+  /// Register a new EfmHostHandler that will begin monitoring and report
+  /// events to this monitor.  This method is normally only used by
+  /// EfmHostHandler implementations.
+  /// \param handler the handler to add
+  void AddHostHandler (Ptr<EfmHostHandler> handler);
+
+  // --- other methods ---
+
+  /// Container: EfmHostHandler
+  typedef std::vector<Ptr<EfmHostHandler>> EfmHostHandlerContainer;
+  /// Container Iterator: EfmHostHandler
+  typedef std::vector<Ptr<EfmHostHandler>>::iterator EfmHostHandlerContainerI;
+  /// Container Const Iterator: EfmHostHandler
+  typedef std::vector<Ptr<EfmHostHandler>>::const_iterator EfmHostHandlerContainerCI;
+
+  /// Get a list of all EfmHostHandler's associated with this EfmMonitor
+  /// \returns a list of all the host handlers
+  const EfmHostHandlerContainer &GetAllHostHandlers () const;
+
+  /// Handles a new socket creation by attaching an appropriate subclasss of efm-host-handler
+  /// \param socket a newly created socket
+  void ServerSocketCreationHandler (Ptr<Socket> socket);
+
+  /// Handles a new socket creation by attaching an appropriate subclasss of efm-host-handler
+  /// \param socket a newly created socket
+  void ClientSocketCreationHandler (Ptr<Socket> socket);
+
+  uint16_t GetQBitBlockSize (void) const;
+
+  uint8_t GetTBitGenTokenCap (void) const;
+
+  uint16_t GetSQFrequency (void) const;
+
+  uint32_t ClassifyConnection (Address &host, Address &peer, uint8_t protocol);
+
+  typedef void (*EfmHstHndlrCrtdTracedCallback) (const Ptr<EfmHostHandler> hostHandler);
+
+  const std::map<FiveTuple, uint32_t> &
+  GetConnections ()
+  {
+    return m_ConnMap;
+  }
+
+  Ptr<UniformRandomVariable> GetUniformRNG ();
+
+protected:
+  // virtual void NotifyConstructionCompleted ();
+  virtual void DoDispose (void);
+
+private:
+  std::map<FiveTuple, uint32_t> m_ConnMap;
+  uint32_t m_nextConnId = 1;
+
+  EfmHostHandlerContainer m_hostHandlers; //!< all the EfmHostHandlers
+
+  //EFM Config
+  uint16_t m_qbit_block_size = 64;
+  uint8_t m_tbit_gen_token_cap = 1;
+  uint16_t m_sq_frequency = 64;
+
+  EventId m_startEvent; //!< Start event
+  EventId m_stopEvent; //!< Stop event
+  bool m_enabled; //!< EfmMan is enabled
+
+  TracedCallback<Ptr<EfmHostHandler>> m_efmHstHndlrCrtdTrace;
+
+  Ptr<UniformRandomVariable> m_uniformRNG; //!< Uniform RNG instance to be used by all host handlers
+};
+
+bool operator<(const EfmManager::FiveTuple &t1, const EfmManager::FiveTuple &t2);
+bool operator== (const EfmManager::FiveTuple &t1, const EfmManager::FiveTuple &t2);
+
+} // namespace ns3
+
+#endif /* EFM_MANAGER_H */
diff --git a/src/efm-manager/model/quic-efm-host-handler.cc b/src/efm-manager/model/quic-efm-host-handler.cc
new file mode 100644
index 000000000..d92be5a19
--- /dev/null
+++ b/src/efm-manager/model/quic-efm-host-handler.cc
@@ -0,0 +1,143 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+//
+// Copyright (c) 2009 INESC Porto
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 2 as
+// published by the Free Software Foundation;
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+// Author: Gustavo J. A. M. Carneiro  <gjc@inescporto.pt> <gjcarneiro@gmail.com>
+// Modifications by:
+//  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+//  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+//
+
+#include "ns3/quic-efm-host-handler.h"
+#include "ns3/node.h"
+#include "ns3/packet.h"
+#include "ns3/efm-manager.h"
+#include "ns3/log.h"
+#include "ns3/pointer.h"
+#include "ns3/config.h"
+#include "ns3/flow-id-tag.h"
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("QuicEfmHostHandler");
+
+////////////////////////////////////////
+// QuicEfmHostHandler class implementation //
+////////////////////////////////////////
+
+QuicEfmHostHandler::QuicEfmHostHandler (Ptr<EfmManager> manager, Ptr<QuicSocketBase> socket,
+                                        EfmHostMode hostMode)
+    : EfmHostHandler (manager, hostMode, socket->GetNode ())
+{
+  NS_LOG_FUNCTION (this << manager << socket << hostMode);
+
+  m_socket = socket;
+
+  if (!m_socket->TraceConnectWithoutContext (
+          "Tx", MakeCallback (&QuicEfmHostHandler::SocketTransmitHandler,
+                              Ptr<QuicEfmHostHandler> (this))))
+    {
+      NS_FATAL_ERROR ("trace fail");
+    }
+  if (!m_socket->TraceConnectWithoutContext (
+          "Rx",
+          MakeCallback (&QuicEfmHostHandler::SocketReceiveHandler, Ptr<QuicEfmHostHandler> (this))))
+    {
+      NS_FATAL_ERROR ("trace fail");
+    }
+  if (!m_socket->TraceConnectWithoutContext (
+          "PacketsLost",
+          MakeCallback (&QuicEfmHostHandler::SocketLostHandler, Ptr<QuicEfmHostHandler> (this))))
+    {
+      NS_FATAL_ERROR ("trace fail");
+    }
+}
+
+QuicEfmHostHandler::~QuicEfmHostHandler ()
+{
+}
+
+/* static */
+TypeId
+QuicEfmHostHandler::GetTypeId (void)
+{
+  static TypeId tid =
+      TypeId ("ns3::QuicEfmHostHandler").SetParent<EfmHostHandler> ().SetGroupName ("EfmManager")
+      // No AddConstructor because this class has no default constructor.
+      ;
+
+  return tid;
+}
+
+void
+QuicEfmHostHandler::DoDispose ()
+{
+  m_socket = 0;
+  EfmHostHandler::DoDispose ();
+}
+
+EfmHostConnId
+QuicEfmHostHandler::GetConnId (const Ptr<const QuicSocketBase> socket)
+{
+  uint32_t connId = 0;
+  Address from;
+  if (socket->GetSockName (from) == -1)
+    {
+      NS_LOG_ERROR ("QuicHostHandler could not get local socket address.");
+    }
+  else
+    {
+      Address to;
+      if (socket->GetPeerName (to) == -1)
+        {
+          NS_LOG_ERROR ("QuicHostHandler could not get peer socket address.");
+        }
+      else
+        {
+          if (m_hostMode == EfmHostMode::CLIENT)
+            connId = m_efmManager->ClassifyConnection (from, to, EfmManager::UDP_PROT_NUMBER);
+          else
+            connId = m_efmManager->ClassifyConnection (to, from, EfmManager::UDP_PROT_NUMBER);
+        }
+    }
+  return connId;
+}
+
+void
+QuicEfmHostHandler::SocketTransmitHandler (const Ptr<const Packet> packet, const QuicHeader &header,
+                                           const Ptr<const QuicSocketBase> socket)
+{
+  //Only consider short headers
+  if (header.IsShort ())
+    PacketTransmitHandler (packet, GetConnId (socket));
+}
+
+void
+QuicEfmHostHandler::SocketReceiveHandler (const Ptr<const Packet> packet, const QuicHeader &header,
+                                          const Ptr<const QuicSocketBase> socket)
+{
+  if (header.IsShort ())
+    PacketReceiveHandler (packet, GetConnId (socket));
+}
+
+void
+QuicEfmHostHandler::SocketLostHandler (int32_t packetsLost, const Ptr<const QuicSocketBase> socket)
+{
+  NS_LOG_DEBUG ("Packets reported lost: " << packetsLost);
+  PacketLostHandler (packetsLost, GetConnId (socket));
+}
+
+} // namespace ns3
diff --git a/src/efm-manager/model/quic-efm-host-handler.h b/src/efm-manager/model/quic-efm-host-handler.h
new file mode 100644
index 000000000..4f5f02d74
--- /dev/null
+++ b/src/efm-manager/model/quic-efm-host-handler.h
@@ -0,0 +1,89 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+//
+// Copyright (c) 2009 INESC Porto
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 2 as
+// published by the Free Software Foundation;
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+// Author: Gustavo J. A. M. Carneiro  <gjc@inescporto.pt> <gjcarneiro@gmail.com>
+// Modifications by:
+//  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+//  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+//
+
+#ifndef QUIC_HOST_HANDLER_H
+#define QUIC_HOST_HANDLER_H
+
+#include "ns3/efm-host-handler.h"
+#include "ns3/udp-l4-protocol.h"
+#include "ns3/quic-socket-base.h"
+#include "ns3/udp-header.h"
+#include "ns3/queue-item.h"
+
+namespace ns3 {
+
+class EfmManager;
+class Node;
+
+/// \ingroup efm-manager
+/// \brief Class that managers flows at the Quic layer of a Node
+///
+/// For each node in the simulation, one instance of the class
+/// QuicEfmHostHandler is created to manage that node. QuicEfmHostHandler
+/// accomplishes this by connecting callbacks to trace sources in the
+/// QuicSockets of the node.
+class QuicEfmHostHandler : public EfmHostHandler
+{
+
+public:
+  /// \brief Constructor
+  /// \param manager the EfmManager this probe is associated with
+  /// \param classifier the QuicEfmFlowClassifier this probe is associated with
+  /// \param node the Node this probe is associated with
+  QuicEfmHostHandler (Ptr<EfmManager> manager, Ptr<QuicSocketBase> socket, EfmHostMode hostMode);
+  virtual ~QuicEfmHostHandler ();
+
+  /// Register this type.
+  /// \return The TypeId.
+  static TypeId GetTypeId (void);
+
+protected:
+  virtual void DoDispose (void);
+
+private:
+  /// Handle a packet being sent on the associated QUIC socket
+  /// \param packet The packet.
+  /// \param header The QuicHeaders
+  /// \param socket The QUIC socket
+  void SocketTransmitHandler (const Ptr<const Packet> packet, const QuicHeader &header,
+                              const Ptr<const QuicSocketBase> socket);
+  /// Handle a packet being received on the associated QUIC socket
+  /// \param packet The packet.
+  /// \param header The QuicHeaders
+  /// \param socket The QUIC socket
+  void SocketReceiveHandler (const Ptr<const Packet> packet, const QuicHeader &header,
+                             const Ptr<const QuicSocketBase> socket);
+
+  /// Handle a number of packets being reported as lost by the socket
+  /// \param packetsLost The number of packets that are considered lost
+  /// \param socket The QUIC socket
+  void SocketLostHandler (int32_t packetsLost, const Ptr<const QuicSocketBase> socket);
+
+  EfmHostConnId GetConnId (const Ptr<const QuicSocketBase> socket);
+
+  Ptr<QuicSocketBase> m_socket; //!< the QuicSocket this probe is bound to
+};
+
+} // namespace ns3
+
+#endif /* IPV4_HOST_HANDLER_H */
diff --git a/src/efm-manager/model/tcp-efm-host-handler.cc b/src/efm-manager/model/tcp-efm-host-handler.cc
new file mode 100644
index 000000000..705ca2e0a
--- /dev/null
+++ b/src/efm-manager/model/tcp-efm-host-handler.cc
@@ -0,0 +1,143 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+//
+// Copyright (c) 2009 INESC Porto
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 2 as
+// published by the Free Software Foundation;
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+// Author: Gustavo J. A. M. Carneiro  <gjc@inescporto.pt> <gjcarneiro@gmail.com>
+// Modifications by:
+//  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+//  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+//
+
+#include "ns3/tcp-efm-host-handler.h"
+#include "ns3/node.h"
+#include "ns3/packet.h"
+#include "ns3/efm-manager.h"
+#include "ns3/log.h"
+#include "ns3/pointer.h"
+#include "ns3/config.h"
+#include "ns3/flow-id-tag.h"
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("TcpEfmHostHandler");
+
+////////////////////////////////////////
+// TcpEfmHostHandler class implementation //
+////////////////////////////////////////
+
+TcpEfmHostHandler::TcpEfmHostHandler (Ptr<EfmManager> manager, Ptr<TcpSocketBase> socket,
+                                      EfmHostMode hostMode)
+    : EfmHostHandler (manager, hostMode, socket->GetNode ())
+{
+  NS_LOG_FUNCTION (this << manager << socket << hostMode);
+
+  m_socket = socket;
+
+  if (!m_socket->TraceConnectWithoutContext (
+          "Tx",
+          MakeCallback (&TcpEfmHostHandler::SocketTransmitHandler, Ptr<TcpEfmHostHandler> (this))))
+    {
+      NS_FATAL_ERROR ("trace fail");
+    }
+  if (!m_socket->TraceConnectWithoutContext (
+          "Rx",
+          MakeCallback (&TcpEfmHostHandler::SocketReceiveHandler, Ptr<TcpEfmHostHandler> (this))))
+    {
+      NS_FATAL_ERROR ("trace fail");
+    }
+  if (!m_socket->TraceConnectWithoutContext (
+          "PacketsLost",
+          MakeCallback (&TcpEfmHostHandler::SocketLostHandler, Ptr<TcpEfmHostHandler> (this))))
+    {
+      NS_FATAL_ERROR ("trace fail");
+    }
+}
+
+TcpEfmHostHandler::~TcpEfmHostHandler ()
+{
+}
+
+/* static */
+TypeId
+TcpEfmHostHandler::GetTypeId (void)
+{
+  static TypeId tid =
+      TypeId ("ns3::TcpEfmHostHandler").SetParent<EfmHostHandler> ().SetGroupName ("EfmManager")
+      // No AddConstructor because this class has no default constructor.
+      ;
+
+  return tid;
+}
+
+void
+TcpEfmHostHandler::DoDispose ()
+{
+  m_socket = 0;
+  EfmHostHandler::DoDispose ();
+}
+
+EfmHostConnId
+TcpEfmHostHandler::GetConnId (const Ptr<const TcpSocketBase> socket)
+{
+  uint32_t connId = 0;
+  Address from;
+  if (socket->GetSockName (from) == -1)
+    {
+      NS_LOG_ERROR ("TcpHostHandler could not get local socket address.");
+    }
+  else
+    {
+      Address to;
+      if (socket->GetPeerName (to) == -1)
+        {
+          NS_LOG_ERROR ("TcpHostHandler could not get peer socket address.");
+        }
+      else
+        {
+          if (m_hostMode == EfmHostMode::CLIENT)
+            connId = m_efmManager->ClassifyConnection (from, to, EfmManager::TCP_PROT_NUMBER);
+          else
+            connId = m_efmManager->ClassifyConnection (to, from, EfmManager::TCP_PROT_NUMBER);
+        }
+    }
+  return connId;
+}
+
+void
+TcpEfmHostHandler::SocketTransmitHandler (const Ptr<const Packet> packet, const TcpHeader &header,
+                                          const Ptr<const TcpSocketBase> socket)
+{
+  PacketTransmitHandler (packet, GetConnId (socket));
+}
+
+void
+TcpEfmHostHandler::SocketReceiveHandler (const Ptr<const Packet> packet, const TcpHeader &header,
+                                         const Ptr<const TcpSocketBase> socket)
+{
+  // Address a;
+  // socket->GetPeerName(a);
+  // NS_LOG_WARN("Receive packet from " << InetSocketAddress::ConvertFrom(a).GetIpv4() << " with size " << std::to_string(packet->GetSize()));
+  PacketReceiveHandler (packet, GetConnId (socket));
+}
+
+void
+TcpEfmHostHandler::SocketLostHandler (int32_t packetsLost, const Ptr<const TcpSocketBase> socket)
+{
+  NS_LOG_DEBUG ("Packets reported lost: " << packetsLost);
+  PacketLostHandler (packetsLost, GetConnId (socket));
+}
+
+} // namespace ns3
diff --git a/src/efm-manager/model/tcp-efm-host-handler.h b/src/efm-manager/model/tcp-efm-host-handler.h
new file mode 100644
index 000000000..8cf73d662
--- /dev/null
+++ b/src/efm-manager/model/tcp-efm-host-handler.h
@@ -0,0 +1,89 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+//
+// Copyright (c) 2009 INESC Porto
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 2 as
+// published by the Free Software Foundation;
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+// Author: Gustavo J. A. M. Carneiro  <gjc@inescporto.pt> <gjcarneiro@gmail.com>
+// Modifications by:
+//  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+//  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+//
+
+#ifndef TCP_HOST_HANDLER_H
+#define TCP_HOST_HANDLER_H
+
+#include "ns3/efm-host-handler.h"
+// #include "ns3/udp-l4-protocol.h"
+#include "ns3/tcp-socket-base.h"
+// #include "ns3/udp-header.h"
+#include "ns3/queue-item.h"
+
+namespace ns3 {
+
+class EfmManager;
+class Node;
+
+/// \ingroup efm-manager
+/// \brief Class that managers flows at the Tcp layer of a Node
+///
+/// For each node in the simulation, one instance of the class
+/// TcpEfmHostHandler is created to manage that node. TcpEfmHostHandler
+/// accomplishes this by connecting callbacks to trace sources in the
+/// TcpSockets of the node.
+class TcpEfmHostHandler : public EfmHostHandler
+{
+
+public:
+  /// \brief Constructor
+  /// \param manager the EfmManager this probe is associated with
+  /// \param classifier the TcpEfmFlowClassifier this probe is associated with
+  /// \param node the Node this probe is associated with
+  TcpEfmHostHandler (Ptr<EfmManager> manager, Ptr<TcpSocketBase> socket, EfmHostMode hostMode);
+  virtual ~TcpEfmHostHandler ();
+
+  /// Register this type.
+  /// \return The TypeId.
+  static TypeId GetTypeId (void);
+
+protected:
+  virtual void DoDispose (void);
+
+private:
+  /// Handle a packet being sent on the associated TCP socket
+  /// \param packet The packet.
+  /// \param header The TcpHeader
+  /// \param socket The TCP socket
+  void SocketTransmitHandler (const Ptr<const Packet> packet, const TcpHeader &header,
+                              const Ptr<const TcpSocketBase> socket);
+  /// Handle a packet being received on the associated TCP socket
+  /// \param packet The packet.
+  /// \param header The TcpHeader
+  /// \param socket The TCP socket
+  void SocketReceiveHandler (const Ptr<const Packet> packet, const TcpHeader &header,
+                             const Ptr<const TcpSocketBase> socket);
+
+  /// Handle a number of packets being reported as lost by the socket
+  /// \param packetsLost The number of packets that are considered lost
+  /// \param socket The TCP socket
+  void SocketLostHandler (int32_t packetsLost, const Ptr<const TcpSocketBase> socket);
+
+  EfmHostConnId GetConnId (const Ptr<const TcpSocketBase> socket);
+
+  Ptr<TcpSocketBase> m_socket; //!< the TCPSocket this probe is bound to
+};
+
+} // namespace ns3
+
+#endif /* TCP_HOST_HANDLER_H */
diff --git a/src/efm-manager/test/efm-manager-test-suite.cc b/src/efm-manager/test/efm-manager-test-suite.cc
new file mode 100644
index 000000000..241f1ea98
--- /dev/null
+++ b/src/efm-manager/test/efm-manager-test-suite.cc
@@ -0,0 +1,86 @@
+/*
+ * Copyright (C) 2025  RWTH Aachen University
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ * Authors: 
+ *  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+ *  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+ */
+
+// Include a header file from your module to test.
+#include "ns3/efm-manager.h"
+
+// An essential include is test.h
+#include "ns3/test.h"
+
+// Do not put your test classes in namespace ns3.  You may find it useful
+// to use the using directive to access the ns3 namespace directly
+using namespace ns3;
+
+// This is an example TestCase.
+class EfmManagerTestCase1 : public TestCase
+{
+public:
+  EfmManagerTestCase1 ();
+  virtual ~EfmManagerTestCase1 ();
+
+private:
+  virtual void DoRun (void);
+};
+
+// Add some help text to this case to describe what it is intended to test
+EfmManagerTestCase1::EfmManagerTestCase1 ()
+  : TestCase ("EfmManager test case (does nothing)")
+{
+}
+
+// This destructor does nothing but we include it as a reminder that
+// the test case should clean up after itself
+EfmManagerTestCase1::~EfmManagerTestCase1 ()
+{
+}
+
+//
+// This method is the pure virtual method from class TestCase that every
+// TestCase must implement
+//
+void
+EfmManagerTestCase1::DoRun (void)
+{
+  // A wide variety of test macros are available in src/core/test.h
+  NS_TEST_ASSERT_MSG_EQ (true, true, "true doesn't equal true for some reason");
+  // Use this one for floating point comparisons
+  NS_TEST_ASSERT_MSG_EQ_TOL (0.01, 0.01, 0.001, "Numbers are not equal within tolerance");
+}
+
+// The TestSuite class names the TestSuite, identifies what type of TestSuite,
+// and enables the TestCases to be run.  Typically, only the constructor for
+// this class must be defined
+//
+class EfmManagerTestSuite : public TestSuite
+{
+public:
+  EfmManagerTestSuite ();
+};
+
+EfmManagerTestSuite::EfmManagerTestSuite ()
+  : TestSuite ("efm-manager", UNIT)
+{
+  // TestDuration for TestCase can be QUICK, EXTENSIVE or TAKES_FOREVER
+  AddTestCase (new EfmManagerTestCase1, TestCase::QUICK);
+}
+
+// Do not forget to allocate an instance of this TestSuite
+static EfmManagerTestSuite sefmManagerTestSuite;
+
diff --git a/src/efm-monitor/.gitignore b/src/efm-monitor/.gitignore
new file mode 100644
index 000000000..5509140f2
--- /dev/null
+++ b/src/efm-monitor/.gitignore
@@ -0,0 +1 @@
+*.DS_Store
diff --git a/src/efm-monitor/CMakeLists.txt b/src/efm-monitor/CMakeLists.txt
new file mode 100644
index 000000000..6e91e3bf5
--- /dev/null
+++ b/src/efm-monitor/CMakeLists.txt
@@ -0,0 +1,27 @@
+build_lib(
+  LIBNAME efm-monitor
+  SOURCE_FILES
+    helper/efm-monitor-helper.cc
+    model/efm-flow-classifier.cc
+    model/efm-monitor.cc
+    model/efm-flow-probe.cc
+    model/ipv4-efm-flow-classifier.cc
+    model/ipv4-efm-flow-probe.cc
+    model/ipv6-efm-flow-classifier.cc
+    model/ipv6-efm-flow-probe.cc
+    model/tcp-flow-probe-tag.cc
+  HEADER_FILES
+    helper/efm-monitor-helper.h
+    model/efm-flow-classifier.h
+    model/efm-monitor.h
+    model/efm-flow-probe.h
+    model/ipv4-efm-flow-classifier.h
+    model/ipv4-efm-flow-probe.h
+    model/ipv6-efm-flow-classifier.h
+    model/ipv6-efm-flow-probe.h
+    model/tcp-flow-probe-tag.h
+  LIBRARIES_TO_LINK ${libinternet}
+                    ${libconfig-store}
+                    ${libquic}
+                    ${libudp}
+)
diff --git a/src/efm-monitor/README.md b/src/efm-monitor/README.md
new file mode 100644
index 000000000..05e82ef81
--- /dev/null
+++ b/src/efm-monitor/README.md
@@ -0,0 +1,13 @@
+# Ns 3 Efm Monitor
+
+This repository contains the module implementing the EFM-based monitoring.
+It builds upon the basic structure provided by the flow-monitor module.
+
+## Use
+
+### Clone this repository into the ns-3/src folder.
+
+```bash
+cd /path/to/ns-3/src/
+git clone git@laboratory.comsys.rwth-aachen.de:projects-kunze/ns-3-for-network-telemetry/ns-3-efm-monitor.git src/efm-monitor
+```
diff --git a/src/efm-monitor/bindings/callbacks_list.py b/src/efm-monitor/bindings/callbacks_list.py
new file mode 100644
index 000000000..30fd82a30
--- /dev/null
+++ b/src/efm-monitor/bindings/callbacks_list.py
@@ -0,0 +1,15 @@
+callback_classes = [
+    ['ns3::ObjectBase *', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
+    ['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'const ns3::Address &', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
+    ['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
+    ['void', 'ns3::Ptr<ns3::Socket>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
+    ['bool', 'ns3::Ptr<ns3::Socket>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
+    ['void', 'ns3::Ptr<ns3::Socket>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
+    ['void', 'ns3::Ptr<ns3::Socket>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
+    ['void', 'const ns3::Ipv4Header &', 'ns3::Ptr<const ns3::Packet>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
+    ['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ptr<ns3::Ipv4>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
+    ['void', 'const ns3::Ipv4Header &', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ipv4L3Protocol::DropReason', 'ns3::Ptr<ns3::Ipv4>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
+    ['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ptr<ns3::Ipv6>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
+    ['void', 'const ns3::Ipv6Header &', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ipv6L3Protocol::DropReason', 'ns3::Ptr<ns3::Ipv6>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
+    ['void', 'const ns3::Ipv6Header &', 'ns3::Ptr<const ns3::Packet>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
+]
diff --git a/src/efm-monitor/bindings/modulegen__gcc_ILP32.py b/src/efm-monitor/bindings/modulegen__gcc_ILP32.py
new file mode 100644
index 000000000..2898d670d
--- /dev/null
+++ b/src/efm-monitor/bindings/modulegen__gcc_ILP32.py
@@ -0,0 +1,7928 @@
+from pybindgen import Module, FileCodeSink, param, retval, cppclass, typehandlers
+
+
+import pybindgen.settings
+import warnings
+
+class ErrorHandler(pybindgen.settings.ErrorHandler):
+    def handle_error(self, wrapper, exception, traceback_):
+        warnings.warn("exception %r in wrapper %s" % (exception, wrapper))
+        return True
+pybindgen.settings.error_handler = ErrorHandler()
+
+
+import sys
+
+def module_init():
+    root_module = Module('ns.flow_monitor', cpp_namespace='::ns3')
+    return root_module
+
+def register_types(module):
+    root_module = module.get_root()
+    
+    ## log.h (module 'core'): ns3::LogLevel [enumeration]
+    module.add_enum('LogLevel', ['LOG_NONE', 'LOG_ERROR', 'LOG_LEVEL_ERROR', 'LOG_WARN', 'LOG_LEVEL_WARN', 'LOG_DEBUG', 'LOG_LEVEL_DEBUG', 'LOG_INFO', 'LOG_LEVEL_INFO', 'LOG_FUNCTION', 'LOG_LEVEL_FUNCTION', 'LOG_LOGIC', 'LOG_LEVEL_LOGIC', 'LOG_ALL', 'LOG_LEVEL_ALL', 'LOG_PREFIX_FUNC', 'LOG_PREFIX_TIME', 'LOG_PREFIX_NODE', 'LOG_PREFIX_LEVEL', 'LOG_PREFIX_ALL'], import_from_module='ns.core')
+    ## address.h (module 'network'): ns3::Address [class]
+    module.add_class('Address', import_from_module='ns.network')
+    ## address.h (module 'network'): ns3::Address::MaxSize_e [enumeration]
+    module.add_enum('MaxSize_e', ['MAX_SIZE'], outer_class=root_module['ns3::Address'], import_from_module='ns.network')
+    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList [class]
+    module.add_class('AttributeConstructionList', import_from_module='ns.core')
+    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item [struct]
+    module.add_class('Item', import_from_module='ns.core', outer_class=root_module['ns3::AttributeConstructionList'])
+    typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator', 'ns3::AttributeConstructionList::CIterator')
+    typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator*', 'ns3::AttributeConstructionList::CIterator*')
+    typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator&', 'ns3::AttributeConstructionList::CIterator&')
+    ## buffer.h (module 'network'): ns3::Buffer [class]
+    module.add_class('Buffer', import_from_module='ns.network')
+    ## buffer.h (module 'network'): ns3::Buffer::Iterator [class]
+    module.add_class('Iterator', import_from_module='ns.network', outer_class=root_module['ns3::Buffer'])
+    ## packet.h (module 'network'): ns3::ByteTagIterator [class]
+    module.add_class('ByteTagIterator', import_from_module='ns.network')
+    ## packet.h (module 'network'): ns3::ByteTagIterator::Item [class]
+    module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::ByteTagIterator'])
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList [class]
+    module.add_class('ByteTagList', import_from_module='ns.network')
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator [class]
+    module.add_class('Iterator', import_from_module='ns.network', outer_class=root_module['ns3::ByteTagList'])
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item [struct]
+    module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::ByteTagList::Iterator'])
+    ## callback.h (module 'core'): ns3::CallbackBase [class]
+    module.add_class('CallbackBase', import_from_module='ns.core')
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeAccessor> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeAccessor'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeChecker> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeChecker'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeValue> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeValue'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::CallbackImplBase> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::CallbackImplBase'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::EventImpl> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::EventImpl'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::FlowClassifier> [struct]
+    module.add_class('DefaultDeleter', template_parameters=['ns3::FlowClassifier'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Hash::Implementation> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::Hash::Implementation'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::NixVector> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::NixVector'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Packet> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::Packet'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::TraceSourceAccessor> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::TraceSourceAccessor'])
+    ## event-id.h (module 'core'): ns3::EventId [class]
+    module.add_class('EventId', import_from_module='ns.core')
+    ## event-id.h (module 'core'): ns3::EventId::UID [enumeration]
+    module.add_enum('UID', ['INVALID', 'NOW', 'DESTROY', 'RESERVED', 'VALID'], outer_class=root_module['ns3::EventId'], import_from_module='ns.core')
+    ## flow-monitor-helper.h (module 'flow-monitor'): ns3::FlowMonitorHelper [class]
+    module.add_class('FlowMonitorHelper')
+    ## hash.h (module 'core'): ns3::Hasher [class]
+    module.add_class('Hasher', import_from_module='ns.core')
+    ## histogram.h (module 'stats'): ns3::Histogram [class]
+    module.add_class('Histogram', import_from_module='ns.stats')
+    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress [class]
+    module.add_class('Inet6SocketAddress', import_from_module='ns.network')
+    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress [class]
+    root_module['ns3::Inet6SocketAddress'].implicitly_converts_to(root_module['ns3::Address'])
+    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress [class]
+    module.add_class('InetSocketAddress', import_from_module='ns.network')
+    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress [class]
+    root_module['ns3::InetSocketAddress'].implicitly_converts_to(root_module['ns3::Address'])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Address [class]
+    module.add_class('Ipv4Address', import_from_module='ns.network')
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Address [class]
+    root_module['ns3::Ipv4Address'].implicitly_converts_to(root_module['ns3::Address'])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressHash [class]
+    module.add_class('Ipv4AddressHash', import_from_module='ns.network')
+    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4InterfaceAddress [class]
+    module.add_class('Ipv4InterfaceAddress', import_from_module='ns.internet')
+    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e [enumeration]
+    module.add_enum('InterfaceAddressScope_e', ['HOST', 'LINK', 'GLOBAL'], outer_class=root_module['ns3::Ipv4InterfaceAddress'], import_from_module='ns.internet')
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask [class]
+    module.add_class('Ipv4Mask', import_from_module='ns.network')
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Address [class]
+    module.add_class('Ipv6Address', import_from_module='ns.network')
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Address [class]
+    root_module['ns3::Ipv6Address'].implicitly_converts_to(root_module['ns3::Address'])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressHash [class]
+    module.add_class('Ipv6AddressHash', import_from_module='ns.network')
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress [class]
+    module.add_class('Ipv6InterfaceAddress', import_from_module='ns.internet')
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress::State_e [enumeration]
+    module.add_enum('State_e', ['TENTATIVE', 'DEPRECATED', 'PREFERRED', 'PERMANENT', 'HOMEADDRESS', 'TENTATIVE_OPTIMISTIC', 'INVALID'], outer_class=root_module['ns3::Ipv6InterfaceAddress'], import_from_module='ns.internet')
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress::Scope_e [enumeration]
+    module.add_enum('Scope_e', ['HOST', 'LINKLOCAL', 'GLOBAL'], outer_class=root_module['ns3::Ipv6InterfaceAddress'], import_from_module='ns.internet')
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix [class]
+    module.add_class('Ipv6Prefix', import_from_module='ns.network')
+    ## log.h (module 'core'): ns3::LogComponent [class]
+    module.add_class('LogComponent', import_from_module='ns.core')
+    typehandlers.add_type_alias('std::map< std::string, ns3::LogComponent * >', 'ns3::LogComponent::ComponentList')
+    typehandlers.add_type_alias('std::map< std::string, ns3::LogComponent * >*', 'ns3::LogComponent::ComponentList*')
+    typehandlers.add_type_alias('std::map< std::string, ns3::LogComponent * >&', 'ns3::LogComponent::ComponentList&')
+    ## mac48-address.h (module 'network'): ns3::Mac48Address [class]
+    module.add_class('Mac48Address', import_from_module='ns.network')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )', 'ns3::Mac48Address::TracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )*', 'ns3::Mac48Address::TracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )&', 'ns3::Mac48Address::TracedCallback&')
+    ## mac48-address.h (module 'network'): ns3::Mac48Address [class]
+    root_module['ns3::Mac48Address'].implicitly_converts_to(root_module['ns3::Address'])
+    ## mac8-address.h (module 'network'): ns3::Mac8Address [class]
+    module.add_class('Mac8Address', import_from_module='ns.network')
+    ## mac8-address.h (module 'network'): ns3::Mac8Address [class]
+    root_module['ns3::Mac8Address'].implicitly_converts_to(root_module['ns3::Address'])
+    ## node-container.h (module 'network'): ns3::NodeContainer [class]
+    module.add_class('NodeContainer', import_from_module='ns.network')
+    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator', 'ns3::NodeContainer::Iterator')
+    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator*', 'ns3::NodeContainer::Iterator*')
+    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator&', 'ns3::NodeContainer::Iterator&')
+    ## object-base.h (module 'core'): ns3::ObjectBase [class]
+    module.add_class('ObjectBase', allow_subclassing=True, import_from_module='ns.core')
+    ## object.h (module 'core'): ns3::ObjectDeleter [struct]
+    module.add_class('ObjectDeleter', import_from_module='ns.core')
+    ## object-factory.h (module 'core'): ns3::ObjectFactory [class]
+    module.add_class('ObjectFactory', import_from_module='ns.core')
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata [class]
+    module.add_class('PacketMetadata', import_from_module='ns.network')
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item [struct]
+    module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::PacketMetadata'])
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::ItemType [enumeration]
+    module.add_enum('ItemType', ['PAYLOAD', 'HEADER', 'TRAILER'], outer_class=root_module['ns3::PacketMetadata::Item'], import_from_module='ns.network')
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator [class]
+    module.add_class('ItemIterator', import_from_module='ns.network', outer_class=root_module['ns3::PacketMetadata'])
+    ## packet.h (module 'network'): ns3::PacketTagIterator [class]
+    module.add_class('PacketTagIterator', import_from_module='ns.network')
+    ## packet.h (module 'network'): ns3::PacketTagIterator::Item [class]
+    module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::PacketTagIterator'])
+    ## packet-tag-list.h (module 'network'): ns3::PacketTagList [class]
+    module.add_class('PacketTagList', import_from_module='ns.network')
+    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData [struct]
+    module.add_class('TagData', import_from_module='ns.network', outer_class=root_module['ns3::PacketTagList'])
+    ## log.h (module 'core'): ns3::ParameterLogger [class]
+    module.add_class('ParameterLogger', import_from_module='ns.core')
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::ObjectBase'], template_parameters=['ns3::Object', 'ns3::ObjectBase', 'ns3::ObjectDeleter'])
+    ## simulator.h (module 'core'): ns3::Simulator [class]
+    module.add_class('Simulator', destructor_visibility='private', import_from_module='ns.core')
+    ## simulator.h (module 'core'): ns3::Simulator [enumeration]
+    module.add_enum('', ['NO_CONTEXT'], outer_class=root_module['ns3::Simulator'], import_from_module='ns.core')
+    ## tag.h (module 'network'): ns3::Tag [class]
+    module.add_class('Tag', import_from_module='ns.network', parent=root_module['ns3::ObjectBase'])
+    ## tag-buffer.h (module 'network'): ns3::TagBuffer [class]
+    module.add_class('TagBuffer', import_from_module='ns.network')
+    ## nstime.h (module 'core'): ns3::Time [class]
+    module.add_class('Time', import_from_module='ns.core')
+    ## nstime.h (module 'core'): ns3::Time::Unit [enumeration]
+    module.add_enum('Unit', ['Y', 'D', 'H', 'MIN', 'S', 'MS', 'US', 'NS', 'PS', 'FS', 'LAST', 'AUTO'], outer_class=root_module['ns3::Time'], import_from_module='ns.core')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Time )', 'ns3::Time::TracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Time )*', 'ns3::Time::TracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Time )&', 'ns3::Time::TracedCallback&')
+    ## nstime.h (module 'core'): ns3::TimeWithUnit [class]
+    module.add_class('TimeWithUnit', import_from_module='ns.core')
+    ## type-id.h (module 'core'): ns3::TypeId [class]
+    module.add_class('TypeId', import_from_module='ns.core')
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeFlag [enumeration]
+    module.add_enum('AttributeFlag', ['ATTR_GET', 'ATTR_SET', 'ATTR_CONSTRUCT', 'ATTR_SGC'], outer_class=root_module['ns3::TypeId'], import_from_module='ns.core')
+    ## type-id.h (module 'core'): ns3::TypeId::SupportLevel [enumeration]
+    module.add_enum('SupportLevel', ['SUPPORTED', 'DEPRECATED', 'OBSOLETE'], outer_class=root_module['ns3::TypeId'], import_from_module='ns.core')
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation [struct]
+    module.add_class('AttributeInformation', import_from_module='ns.core', outer_class=root_module['ns3::TypeId'])
+    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation [struct]
+    module.add_class('TraceSourceInformation', import_from_module='ns.core', outer_class=root_module['ns3::TypeId'])
+    typehandlers.add_type_alias('uint32_t', 'ns3::TypeId::hash_t')
+    typehandlers.add_type_alias('uint32_t*', 'ns3::TypeId::hash_t*')
+    typehandlers.add_type_alias('uint32_t&', 'ns3::TypeId::hash_t&')
+    ## empty.h (module 'core'): ns3::empty [class]
+    module.add_class('empty', import_from_module='ns.core')
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t [class]
+    module.add_class('int64x64_t', import_from_module='ns.core')
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::impl_type [enumeration]
+    module.add_enum('impl_type', ['int128_impl', 'cairo_impl', 'ld_impl'], outer_class=root_module['ns3::int64x64_t'], import_from_module='ns.core')
+    ## chunk.h (module 'network'): ns3::Chunk [class]
+    module.add_class('Chunk', import_from_module='ns.network', parent=root_module['ns3::ObjectBase'])
+    ## header.h (module 'network'): ns3::Header [class]
+    module.add_class('Header', import_from_module='ns.network', parent=root_module['ns3::Chunk'])
+    ## ipv4-header.h (module 'internet'): ns3::Ipv4Header [class]
+    module.add_class('Ipv4Header', import_from_module='ns.internet', parent=root_module['ns3::Header'])
+    ## ipv4-header.h (module 'internet'): ns3::Ipv4Header::DscpType [enumeration]
+    module.add_enum('DscpType', ['DscpDefault', 'DSCP_CS1', 'DSCP_AF11', 'DSCP_AF12', 'DSCP_AF13', 'DSCP_CS2', 'DSCP_AF21', 'DSCP_AF22', 'DSCP_AF23', 'DSCP_CS3', 'DSCP_AF31', 'DSCP_AF32', 'DSCP_AF33', 'DSCP_CS4', 'DSCP_AF41', 'DSCP_AF42', 'DSCP_AF43', 'DSCP_CS5', 'DSCP_EF', 'DSCP_CS6', 'DSCP_CS7'], outer_class=root_module['ns3::Ipv4Header'], import_from_module='ns.internet')
+    ## ipv4-header.h (module 'internet'): ns3::Ipv4Header::EcnType [enumeration]
+    module.add_enum('EcnType', ['ECN_NotECT', 'ECN_ECT1', 'ECN_ECT0', 'ECN_CE'], outer_class=root_module['ns3::Ipv4Header'], import_from_module='ns.internet')
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Header [class]
+    module.add_class('Ipv6Header', import_from_module='ns.internet', parent=root_module['ns3::Header'])
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Header::DscpType [enumeration]
+    module.add_enum('DscpType', ['DscpDefault', 'DSCP_CS1', 'DSCP_AF11', 'DSCP_AF12', 'DSCP_AF13', 'DSCP_CS2', 'DSCP_AF21', 'DSCP_AF22', 'DSCP_AF23', 'DSCP_CS3', 'DSCP_AF31', 'DSCP_AF32', 'DSCP_AF33', 'DSCP_CS4', 'DSCP_AF41', 'DSCP_AF42', 'DSCP_AF43', 'DSCP_CS5', 'DSCP_EF', 'DSCP_CS6', 'DSCP_CS7'], outer_class=root_module['ns3::Ipv6Header'], import_from_module='ns.internet')
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Header::NextHeader_e [enumeration]
+    module.add_enum('NextHeader_e', ['IPV6_EXT_HOP_BY_HOP', 'IPV6_IPV4', 'IPV6_TCP', 'IPV6_UDP', 'IPV6_IPV6', 'IPV6_EXT_ROUTING', 'IPV6_EXT_FRAGMENTATION', 'IPV6_EXT_CONFIDENTIALITY', 'IPV6_EXT_AUTHENTIFICATION', 'IPV6_ICMPV6', 'IPV6_EXT_END', 'IPV6_EXT_DESTINATION', 'IPV6_SCTP', 'IPV6_EXT_MOBILITY', 'IPV6_UDP_LITE'], outer_class=root_module['ns3::Ipv6Header'], import_from_module='ns.internet')
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Header::EcnType [enumeration]
+    module.add_enum('EcnType', ['ECN_NotECT', 'ECN_ECT1', 'ECN_ECT0', 'ECN_CE'], outer_class=root_module['ns3::Ipv6Header'], import_from_module='ns.internet')
+    ## object.h (module 'core'): ns3::Object [class]
+    module.add_class('Object', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter >'])
+    ## object.h (module 'core'): ns3::Object::AggregateIterator [class]
+    module.add_class('AggregateIterator', import_from_module='ns.core', outer_class=root_module['ns3::Object'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor>> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::AttributeAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeAccessor>'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker>> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::AttributeChecker', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeChecker>'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue>> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::AttributeValue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeValue>'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase>> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::CallbackImplBase', 'ns3::empty', 'ns3::DefaultDeleter<ns3::CallbackImplBase>'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl>> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::EventImpl', 'ns3::empty', 'ns3::DefaultDeleter<ns3::EventImpl>'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::FlowClassifier, ns3::empty, ns3::DefaultDeleter<ns3::FlowClassifier>> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::FlowClassifier', 'ns3::empty', 'ns3::DefaultDeleter<ns3::FlowClassifier>'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation>> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::Hash::Implementation', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Hash::Implementation>'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute>> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::Ipv4MulticastRoute', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv4MulticastRoute>'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route>> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::Ipv4Route', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv4Route>'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector>> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::NixVector', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NixVector>'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper>> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::OutputStreamWrapper', 'ns3::empty', 'ns3::DefaultDeleter<ns3::OutputStreamWrapper>'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet>> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::Packet', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Packet>'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem>> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::QueueItem', 'ns3::empty', 'ns3::DefaultDeleter<ns3::QueueItem>'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor>> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::TraceSourceAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::TraceSourceAccessor>'])
+    ## socket.h (module 'network'): ns3::Socket [class]
+    module.add_class('Socket', import_from_module='ns.network', parent=root_module['ns3::Object'])
+    ## socket.h (module 'network'): ns3::Socket::SocketErrno [enumeration]
+    module.add_enum('SocketErrno', ['ERROR_NOTERROR', 'ERROR_ISCONN', 'ERROR_NOTCONN', 'ERROR_MSGSIZE', 'ERROR_AGAIN', 'ERROR_SHUTDOWN', 'ERROR_OPNOTSUPP', 'ERROR_AFNOSUPPORT', 'ERROR_INVAL', 'ERROR_BADF', 'ERROR_NOROUTETOHOST', 'ERROR_NODEV', 'ERROR_ADDRNOTAVAIL', 'ERROR_ADDRINUSE', 'SOCKET_ERRNO_LAST'], outer_class=root_module['ns3::Socket'], import_from_module='ns.network')
+    ## socket.h (module 'network'): ns3::Socket::SocketType [enumeration]
+    module.add_enum('SocketType', ['NS3_SOCK_STREAM', 'NS3_SOCK_SEQPACKET', 'NS3_SOCK_DGRAM', 'NS3_SOCK_RAW'], outer_class=root_module['ns3::Socket'], import_from_module='ns.network')
+    ## socket.h (module 'network'): ns3::Socket::SocketPriority [enumeration]
+    module.add_enum('SocketPriority', ['NS3_PRIO_BESTEFFORT', 'NS3_PRIO_FILLER', 'NS3_PRIO_BULK', 'NS3_PRIO_INTERACTIVE_BULK', 'NS3_PRIO_INTERACTIVE', 'NS3_PRIO_CONTROL'], outer_class=root_module['ns3::Socket'], import_from_module='ns.network')
+    ## socket.h (module 'network'): ns3::Socket::Ipv6MulticastFilterMode [enumeration]
+    module.add_enum('Ipv6MulticastFilterMode', ['INCLUDE', 'EXCLUDE'], outer_class=root_module['ns3::Socket'], import_from_module='ns.network')
+    ## socket.h (module 'network'): ns3::SocketIpTosTag [class]
+    module.add_class('SocketIpTosTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
+    ## socket.h (module 'network'): ns3::SocketIpTtlTag [class]
+    module.add_class('SocketIpTtlTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
+    ## socket.h (module 'network'): ns3::SocketIpv6HopLimitTag [class]
+    module.add_class('SocketIpv6HopLimitTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
+    ## socket.h (module 'network'): ns3::SocketIpv6TclassTag [class]
+    module.add_class('SocketIpv6TclassTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
+    ## socket.h (module 'network'): ns3::SocketPriorityTag [class]
+    module.add_class('SocketPriorityTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
+    ## socket.h (module 'network'): ns3::SocketSetDontFragmentTag [class]
+    module.add_class('SocketSetDontFragmentTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
+    ## trace-source-accessor.h (module 'core'): ns3::TraceSourceAccessor [class]
+    module.add_class('TraceSourceAccessor', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >'])
+    ## trailer.h (module 'network'): ns3::Trailer [class]
+    module.add_class('Trailer', import_from_module='ns.network', parent=root_module['ns3::Chunk'])
+    ## attribute.h (module 'core'): ns3::AttributeAccessor [class]
+    module.add_class('AttributeAccessor', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >'])
+    ## attribute.h (module 'core'): ns3::AttributeChecker [class]
+    module.add_class('AttributeChecker', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >'])
+    ## attribute.h (module 'core'): ns3::AttributeValue [class]
+    module.add_class('AttributeValue', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >'])
+    ## callback.h (module 'core'): ns3::CallbackChecker [class]
+    module.add_class('CallbackChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
+    ## callback.h (module 'core'): ns3::CallbackImplBase [class]
+    module.add_class('CallbackImplBase', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >'])
+    ## callback.h (module 'core'): ns3::CallbackValue [class]
+    module.add_class('CallbackValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## attribute.h (module 'core'): ns3::EmptyAttributeAccessor [class]
+    module.add_class('EmptyAttributeAccessor', import_from_module='ns.core', parent=root_module['ns3::AttributeAccessor'])
+    ## attribute.h (module 'core'): ns3::EmptyAttributeChecker [class]
+    module.add_class('EmptyAttributeChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
+    ## attribute.h (module 'core'): ns3::EmptyAttributeValue [class]
+    module.add_class('EmptyAttributeValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## event-impl.h (module 'core'): ns3::EventImpl [class]
+    module.add_class('EventImpl', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >'])
+    ## flow-classifier.h (module 'flow-monitor'): ns3::FlowClassifier [class]
+    module.add_class('FlowClassifier', parent=root_module['ns3::SimpleRefCount< ns3::FlowClassifier, ns3::empty, ns3::DefaultDeleter<ns3::FlowClassifier> >'])
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor [class]
+    module.add_class('FlowMonitor', parent=root_module['ns3::Object'])
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats [struct]
+    module.add_class('FlowStats', outer_class=root_module['ns3::FlowMonitor'])
+    typehandlers.add_type_alias('std::map< unsigned int, ns3::FlowMonitor::FlowStats >', 'ns3::FlowMonitor::FlowStatsContainer')
+    typehandlers.add_type_alias('std::map< unsigned int, ns3::FlowMonitor::FlowStats >*', 'ns3::FlowMonitor::FlowStatsContainer*')
+    typehandlers.add_type_alias('std::map< unsigned int, ns3::FlowMonitor::FlowStats >&', 'ns3::FlowMonitor::FlowStatsContainer&')
+    typehandlers.add_type_alias('std::map< unsigned int, ns3::FlowMonitor::FlowStats > iterator', 'ns3::FlowMonitor::FlowStatsContainerI')
+    typehandlers.add_type_alias('std::map< unsigned int, ns3::FlowMonitor::FlowStats > iterator*', 'ns3::FlowMonitor::FlowStatsContainerI*')
+    typehandlers.add_type_alias('std::map< unsigned int, ns3::FlowMonitor::FlowStats > iterator&', 'ns3::FlowMonitor::FlowStatsContainerI&')
+    typehandlers.add_type_alias('std::map< unsigned int, ns3::FlowMonitor::FlowStats > const_iterator', 'ns3::FlowMonitor::FlowStatsContainerCI')
+    typehandlers.add_type_alias('std::map< unsigned int, ns3::FlowMonitor::FlowStats > const_iterator*', 'ns3::FlowMonitor::FlowStatsContainerCI*')
+    typehandlers.add_type_alias('std::map< unsigned int, ns3::FlowMonitor::FlowStats > const_iterator&', 'ns3::FlowMonitor::FlowStatsContainerCI&')
+    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::FlowProbe > >', 'ns3::FlowMonitor::FlowProbeContainer')
+    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::FlowProbe > >*', 'ns3::FlowMonitor::FlowProbeContainer*')
+    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::FlowProbe > >&', 'ns3::FlowMonitor::FlowProbeContainer&')
+    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::FlowProbe > > iterator', 'ns3::FlowMonitor::FlowProbeContainerI')
+    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::FlowProbe > > iterator*', 'ns3::FlowMonitor::FlowProbeContainerI*')
+    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::FlowProbe > > iterator&', 'ns3::FlowMonitor::FlowProbeContainerI&')
+    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::FlowProbe > > const_iterator', 'ns3::FlowMonitor::FlowProbeContainerCI')
+    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::FlowProbe > > const_iterator*', 'ns3::FlowMonitor::FlowProbeContainerCI*')
+    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::FlowProbe > > const_iterator&', 'ns3::FlowMonitor::FlowProbeContainerCI&')
+    ## flow-probe.h (module 'flow-monitor'): ns3::FlowProbe [class]
+    module.add_class('FlowProbe', parent=root_module['ns3::Object'])
+    ## flow-probe.h (module 'flow-monitor'): ns3::FlowProbe::FlowStats [struct]
+    module.add_class('FlowStats', outer_class=root_module['ns3::FlowProbe'])
+    typehandlers.add_type_alias('std::map< unsigned int, ns3::FlowProbe::FlowStats >', 'ns3::FlowProbe::Stats')
+    typehandlers.add_type_alias('std::map< unsigned int, ns3::FlowProbe::FlowStats >*', 'ns3::FlowProbe::Stats*')
+    typehandlers.add_type_alias('std::map< unsigned int, ns3::FlowProbe::FlowStats >&', 'ns3::FlowProbe::Stats&')
+    ## ipv4.h (module 'internet'): ns3::Ipv4 [class]
+    module.add_class('Ipv4', import_from_module='ns.internet', parent=root_module['ns3::Object'])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressChecker [class]
+    module.add_class('Ipv4AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue [class]
+    module.add_class('Ipv4AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): ns3::Ipv4FlowClassifier [class]
+    module.add_class('Ipv4FlowClassifier', parent=root_module['ns3::FlowClassifier'])
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): ns3::Ipv4FlowClassifier::FiveTuple [struct]
+    module.add_class('FiveTuple', outer_class=root_module['ns3::Ipv4FlowClassifier'])
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): ns3::Ipv4FlowClassifier::SortByCount [class]
+    module.add_class('SortByCount', outer_class=root_module['ns3::Ipv4FlowClassifier'])
+    ## ipv4-flow-probe.h (module 'flow-monitor'): ns3::Ipv4FlowProbe [class]
+    module.add_class('Ipv4FlowProbe', parent=root_module['ns3::FlowProbe'])
+    ## ipv4-flow-probe.h (module 'flow-monitor'): ns3::Ipv4FlowProbe::DropReason [enumeration]
+    module.add_enum('DropReason', ['DROP_NO_ROUTE', 'DROP_TTL_EXPIRE', 'DROP_BAD_CHECKSUM', 'DROP_QUEUE', 'DROP_QUEUE_DISC', 'DROP_INTERFACE_DOWN', 'DROP_ROUTE_ERROR', 'DROP_FRAGMENT_TIMEOUT', 'DROP_INVALID_REASON'], outer_class=root_module['ns3::Ipv4FlowProbe'])
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ipv4L3Protocol [class]
+    module.add_class('Ipv4L3Protocol', import_from_module='ns.internet', parent=root_module['ns3::Ipv4'])
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ipv4L3Protocol::DropReason [enumeration]
+    module.add_enum('DropReason', ['DROP_TTL_EXPIRED', 'DROP_NO_ROUTE', 'DROP_BAD_CHECKSUM', 'DROP_INTERFACE_DOWN', 'DROP_ROUTE_ERROR', 'DROP_FRAGMENT_TIMEOUT', 'DROP_DUPLICATE'], outer_class=root_module['ns3::Ipv4L3Protocol'], import_from_module='ns.internet')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )', 'ns3::Ipv4L3Protocol::SentTracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )*', 'ns3::Ipv4L3Protocol::SentTracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )&', 'ns3::Ipv4L3Protocol::SentTracedCallback&')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )', 'ns3::Ipv4L3Protocol::TxRxTracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )*', 'ns3::Ipv4L3Protocol::TxRxTracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )&', 'ns3::Ipv4L3Protocol::TxRxTracedCallback&')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )', 'ns3::Ipv4L3Protocol::DropTracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )*', 'ns3::Ipv4L3Protocol::DropTracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )&', 'ns3::Ipv4L3Protocol::DropTracedCallback&')
+    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskChecker [class]
+    module.add_class('Ipv4MaskChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue [class]
+    module.add_class('Ipv4MaskValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4MulticastRoute [class]
+    module.add_class('Ipv4MulticastRoute', import_from_module='ns.internet', parent=root_module['ns3::SimpleRefCount< ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> >'])
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4Route [class]
+    module.add_class('Ipv4Route', import_from_module='ns.internet', parent=root_module['ns3::SimpleRefCount< ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> >'])
+    ## ipv4-routing-protocol.h (module 'internet'): ns3::Ipv4RoutingProtocol [class]
+    module.add_class('Ipv4RoutingProtocol', import_from_module='ns.internet', parent=root_module['ns3::Object'])
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv4RoutingProtocol::UnicastForwardCallback')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv4RoutingProtocol::UnicastForwardCallback*')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv4RoutingProtocol::UnicastForwardCallback&')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv4RoutingProtocol::MulticastForwardCallback')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv4RoutingProtocol::MulticastForwardCallback*')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv4RoutingProtocol::MulticastForwardCallback&')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv4RoutingProtocol::LocalDeliverCallback')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv4RoutingProtocol::LocalDeliverCallback*')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv4RoutingProtocol::LocalDeliverCallback&')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv4RoutingProtocol::ErrorCallback')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv4RoutingProtocol::ErrorCallback*')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv4RoutingProtocol::ErrorCallback&')
+    ## ipv6.h (module 'internet'): ns3::Ipv6 [class]
+    module.add_class('Ipv6', import_from_module='ns.internet', parent=root_module['ns3::Object'])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressChecker [class]
+    module.add_class('Ipv6AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue [class]
+    module.add_class('Ipv6AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): ns3::Ipv6FlowClassifier [class]
+    module.add_class('Ipv6FlowClassifier', parent=root_module['ns3::FlowClassifier'])
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): ns3::Ipv6FlowClassifier::FiveTuple [struct]
+    module.add_class('FiveTuple', outer_class=root_module['ns3::Ipv6FlowClassifier'])
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): ns3::Ipv6FlowClassifier::SortByCount [class]
+    module.add_class('SortByCount', outer_class=root_module['ns3::Ipv6FlowClassifier'])
+    ## ipv6-flow-probe.h (module 'flow-monitor'): ns3::Ipv6FlowProbe [class]
+    module.add_class('Ipv6FlowProbe', parent=root_module['ns3::FlowProbe'])
+    ## ipv6-flow-probe.h (module 'flow-monitor'): ns3::Ipv6FlowProbe::DropReason [enumeration]
+    module.add_enum('DropReason', ['DROP_NO_ROUTE', 'DROP_TTL_EXPIRE', 'DROP_BAD_CHECKSUM', 'DROP_QUEUE', 'DROP_QUEUE_DISC', 'DROP_INTERFACE_DOWN', 'DROP_ROUTE_ERROR', 'DROP_UNKNOWN_PROTOCOL', 'DROP_UNKNOWN_OPTION', 'DROP_MALFORMED_HEADER', 'DROP_FRAGMENT_TIMEOUT', 'DROP_INVALID_REASON'], outer_class=root_module['ns3::Ipv6FlowProbe'])
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ipv6L3Protocol [class]
+    module.add_class('Ipv6L3Protocol', import_from_module='ns.internet', parent=root_module['ns3::Ipv6'])
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ipv6L3Protocol::DropReason [enumeration]
+    module.add_enum('DropReason', ['DROP_TTL_EXPIRED', 'DROP_NO_ROUTE', 'DROP_INTERFACE_DOWN', 'DROP_ROUTE_ERROR', 'DROP_UNKNOWN_PROTOCOL', 'DROP_UNKNOWN_OPTION', 'DROP_MALFORMED_HEADER', 'DROP_FRAGMENT_TIMEOUT'], outer_class=root_module['ns3::Ipv6L3Protocol'], import_from_module='ns.internet')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )', 'ns3::Ipv6L3Protocol::SentTracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )*', 'ns3::Ipv6L3Protocol::SentTracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )&', 'ns3::Ipv6L3Protocol::SentTracedCallback&')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )', 'ns3::Ipv6L3Protocol::TxRxTracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )*', 'ns3::Ipv6L3Protocol::TxRxTracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )&', 'ns3::Ipv6L3Protocol::TxRxTracedCallback&')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )', 'ns3::Ipv6L3Protocol::DropTracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )*', 'ns3::Ipv6L3Protocol::DropTracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )&', 'ns3::Ipv6L3Protocol::DropTracedCallback&')
+    ## ipv6-pmtu-cache.h (module 'internet'): ns3::Ipv6PmtuCache [class]
+    module.add_class('Ipv6PmtuCache', import_from_module='ns.internet', parent=root_module['ns3::Object'])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixChecker [class]
+    module.add_class('Ipv6PrefixChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue [class]
+    module.add_class('Ipv6PrefixValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
+    ## mac48-address.h (module 'network'): ns3::Mac48AddressChecker [class]
+    module.add_class('Mac48AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
+    ## mac48-address.h (module 'network'): ns3::Mac48AddressValue [class]
+    module.add_class('Mac48AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
+    ## net-device.h (module 'network'): ns3::NetDevice [class]
+    module.add_class('NetDevice', import_from_module='ns.network', parent=root_module['ns3::Object'])
+    ## net-device.h (module 'network'): ns3::NetDevice::PacketType [enumeration]
+    module.add_enum('PacketType', ['PACKET_HOST', 'NS3_PACKET_HOST', 'PACKET_BROADCAST', 'NS3_PACKET_BROADCAST', 'PACKET_MULTICAST', 'NS3_PACKET_MULTICAST', 'PACKET_OTHERHOST', 'NS3_PACKET_OTHERHOST'], outer_class=root_module['ns3::NetDevice'], import_from_module='ns.network')
+    typehandlers.add_type_alias('void ( * ) (  )', 'ns3::NetDevice::LinkChangeTracedCallback')
+    typehandlers.add_type_alias('void ( * ) (  )*', 'ns3::NetDevice::LinkChangeTracedCallback*')
+    typehandlers.add_type_alias('void ( * ) (  )&', 'ns3::NetDevice::LinkChangeTracedCallback&')
+    typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::NetDevice::ReceiveCallback')
+    typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::NetDevice::ReceiveCallback*')
+    typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::NetDevice::ReceiveCallback&')
+    typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'ns3::NetDevice::PromiscReceiveCallback')
+    typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::NetDevice::PromiscReceiveCallback*')
+    typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::NetDevice::PromiscReceiveCallback&')
+    ## nix-vector.h (module 'network'): ns3::NixVector [class]
+    module.add_class('NixVector', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >'])
+    ## node.h (module 'network'): ns3::Node [class]
+    module.add_class('Node', import_from_module='ns.network', parent=root_module['ns3::Object'])
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Node::ProtocolHandler')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Node::ProtocolHandler*')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Node::ProtocolHandler&')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Node::DeviceAdditionListener')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Node::DeviceAdditionListener*')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Node::DeviceAdditionListener&')
+    ## object-factory.h (module 'core'): ns3::ObjectFactoryChecker [class]
+    module.add_class('ObjectFactoryChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
+    ## object-factory.h (module 'core'): ns3::ObjectFactoryValue [class]
+    module.add_class('ObjectFactoryValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## output-stream-wrapper.h (module 'network'): ns3::OutputStreamWrapper [class]
+    module.add_class('OutputStreamWrapper', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> >'])
+    ## packet.h (module 'network'): ns3::Packet [class]
+    module.add_class('Packet', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >'])
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )', 'ns3::Packet::TracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )*', 'ns3::Packet::TracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )&', 'ns3::Packet::TracedCallback&')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )', 'ns3::Packet::AddressTracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )*', 'ns3::Packet::AddressTracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )&', 'ns3::Packet::AddressTracedCallback&')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )', 'ns3::Packet::TwoAddressTracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )*', 'ns3::Packet::TwoAddressTracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )&', 'ns3::Packet::TwoAddressTracedCallback&')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )', 'ns3::Packet::Mac48AddressTracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )*', 'ns3::Packet::Mac48AddressTracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )&', 'ns3::Packet::Mac48AddressTracedCallback&')
+    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )', 'ns3::Packet::SizeTracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )*', 'ns3::Packet::SizeTracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )&', 'ns3::Packet::SizeTracedCallback&')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )', 'ns3::Packet::SinrTracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )*', 'ns3::Packet::SinrTracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )&', 'ns3::Packet::SinrTracedCallback&')
+    ## queue-item.h (module 'network'): ns3::QueueItem [class]
+    module.add_class('QueueItem', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> >'])
+    ## queue-item.h (module 'network'): ns3::QueueItem::Uint8Values [enumeration]
+    module.add_enum('Uint8Values', ['IP_DSFIELD'], outer_class=root_module['ns3::QueueItem'], import_from_module='ns.network')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::QueueItem const > )', 'ns3::QueueItem::TracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::QueueItem const > )*', 'ns3::QueueItem::TracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::QueueItem const > )&', 'ns3::QueueItem::TracedCallback&')
+    ## nstime.h (module 'core'): ns3::TimeValue [class]
+    module.add_class('TimeValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## type-id.h (module 'core'): ns3::TypeIdChecker [class]
+    module.add_class('TypeIdChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
+    ## type-id.h (module 'core'): ns3::TypeIdValue [class]
+    module.add_class('TypeIdValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## address.h (module 'network'): ns3::AddressChecker [class]
+    module.add_class('AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
+    ## address.h (module 'network'): ns3::AddressValue [class]
+    module.add_class('AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['bool', 'ns3::Ptr<ns3::Socket>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['ns3::ObjectBase *', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::Ipv4Header &', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ipv4L3Protocol::DropReason', 'ns3::Ptr<ns3::Ipv4>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::Ipv4Header &', 'ns3::Ptr<const ns3::Packet>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::Ipv6Header &', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ipv6L3Protocol::DropReason', 'ns3::Ptr<ns3::Ipv6>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::Ipv6Header &', 'ns3::Ptr<const ns3::Packet>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ptr<ns3::Ipv4>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ptr<ns3::Ipv6>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'const ns3::Address &', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
+    ## queue-item.h (module 'network'): ns3::QueueDiscItem [class]
+    module.add_class('QueueDiscItem', import_from_module='ns.network', parent=root_module['ns3::QueueItem'])
+    module.add_container('std::map< std::string, ns3::LogComponent * >', ('std::basic_string< char, std::char_traits< char >, std::allocator< char > >', 'ns3::LogComponent *'), container_type='map')
+    module.add_container('std::vector< ns3::Ipv6Address >', 'ns3::Ipv6Address', container_type='vector')
+    module.add_container('std::vector< unsigned int >', 'unsigned int', container_type='vector')
+    module.add_container('std::vector< unsigned long long >', 'long unsigned int', container_type='vector')
+    module.add_container('std::map< unsigned int, ns3::FlowMonitor::FlowStats >', ('unsigned int', 'ns3::FlowMonitor::FlowStats'), container_type='map')
+    module.add_container('std::vector< ns3::Ptr< ns3::FlowProbe > >', 'ns3::Ptr< ns3::FlowProbe >', container_type='vector')
+    module.add_container('std::map< unsigned int, ns3::FlowProbe::FlowStats >', ('unsigned int', 'ns3::FlowProbe::FlowStats'), container_type='map')
+    module.add_container('ns3::FlowProbe::Stats', ('unsigned int', 'ns3::FlowProbe::FlowStats'), container_type='map')
+    module.add_container('std::vector< std::pair< ns3::Ipv4Header::DscpType, unsigned int > >', 'std::pair< ns3::Ipv4Header::DscpType, unsigned int >', container_type='vector')
+    module.add_container('std::map< unsigned int, unsigned int >', ('unsigned int', 'unsigned int'), container_type='map')
+    module.add_container('std::vector< std::pair< ns3::Ipv6Header::DscpType, unsigned int > >', 'std::pair< ns3::Ipv6Header::DscpType, unsigned int >', container_type='vector')
+    typehandlers.add_type_alias('uint32_t', 'ns3::FlowId')
+    typehandlers.add_type_alias('uint32_t*', 'ns3::FlowId*')
+    typehandlers.add_type_alias('uint32_t&', 'ns3::FlowId&')
+    typehandlers.add_type_alias('uint32_t', 'ns3::FlowPacketId')
+    typehandlers.add_type_alias('uint32_t*', 'ns3::FlowPacketId*')
+    typehandlers.add_type_alias('uint32_t&', 'ns3::FlowPacketId&')
+    typehandlers.add_type_alias('void ( * ) ( std::ostream & )', 'ns3::TimePrinter')
+    typehandlers.add_type_alias('void ( * ) ( std::ostream & )*', 'ns3::TimePrinter*')
+    typehandlers.add_type_alias('void ( * ) ( std::ostream & )&', 'ns3::TimePrinter&')
+    typehandlers.add_type_alias('void ( * ) ( std::ostream & )', 'ns3::NodePrinter')
+    typehandlers.add_type_alias('void ( * ) ( std::ostream & )*', 'ns3::NodePrinter*')
+    typehandlers.add_type_alias('void ( * ) ( std::ostream & )&', 'ns3::NodePrinter&')
+    
+    ## Register a nested module for the namespace FatalImpl
+    
+    nested_module = module.add_cpp_namespace('FatalImpl')
+    register_types_ns3_FatalImpl(nested_module)
+    
+    
+    ## Register a nested module for the namespace Hash
+    
+    nested_module = module.add_cpp_namespace('Hash')
+    register_types_ns3_Hash(nested_module)
+    
+    
+    ## Register a nested module for the namespace TracedValueCallback
+    
+    nested_module = module.add_cpp_namespace('TracedValueCallback')
+    register_types_ns3_TracedValueCallback(nested_module)
+    
+
+def register_types_ns3_FatalImpl(module):
+    root_module = module.get_root()
+    
+
+def register_types_ns3_Hash(module):
+    root_module = module.get_root()
+    
+    ## hash-function.h (module 'core'): ns3::Hash::Implementation [class]
+    module.add_class('Implementation', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >'])
+    typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )', 'ns3::Hash::Hash32Function_ptr')
+    typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )*', 'ns3::Hash::Hash32Function_ptr*')
+    typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )&', 'ns3::Hash::Hash32Function_ptr&')
+    typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )', 'ns3::Hash::Hash64Function_ptr')
+    typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )*', 'ns3::Hash::Hash64Function_ptr*')
+    typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )&', 'ns3::Hash::Hash64Function_ptr&')
+    
+    ## Register a nested module for the namespace Function
+    
+    nested_module = module.add_cpp_namespace('Function')
+    register_types_ns3_Hash_Function(nested_module)
+    
+
+def register_types_ns3_Hash_Function(module):
+    root_module = module.get_root()
+    
+    ## hash-fnv.h (module 'core'): ns3::Hash::Function::Fnv1a [class]
+    module.add_class('Fnv1a', import_from_module='ns.core', parent=root_module['ns3::Hash::Implementation'])
+    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash32 [class]
+    module.add_class('Hash32', import_from_module='ns.core', parent=root_module['ns3::Hash::Implementation'])
+    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash64 [class]
+    module.add_class('Hash64', import_from_module='ns.core', parent=root_module['ns3::Hash::Implementation'])
+    ## hash-murmur3.h (module 'core'): ns3::Hash::Function::Murmur3 [class]
+    module.add_class('Murmur3', import_from_module='ns.core', parent=root_module['ns3::Hash::Implementation'])
+
+def register_types_ns3_TracedValueCallback(module):
+    root_module = module.get_root()
+    
+    typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )', 'ns3::TracedValueCallback::Time')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )*', 'ns3::TracedValueCallback::Time*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )&', 'ns3::TracedValueCallback::Time&')
+
+def register_methods(root_module):
+    register_Ns3Address_methods(root_module, root_module['ns3::Address'])
+    register_Ns3AttributeConstructionList_methods(root_module, root_module['ns3::AttributeConstructionList'])
+    register_Ns3AttributeConstructionListItem_methods(root_module, root_module['ns3::AttributeConstructionList::Item'])
+    register_Ns3Buffer_methods(root_module, root_module['ns3::Buffer'])
+    register_Ns3BufferIterator_methods(root_module, root_module['ns3::Buffer::Iterator'])
+    register_Ns3ByteTagIterator_methods(root_module, root_module['ns3::ByteTagIterator'])
+    register_Ns3ByteTagIteratorItem_methods(root_module, root_module['ns3::ByteTagIterator::Item'])
+    register_Ns3ByteTagList_methods(root_module, root_module['ns3::ByteTagList'])
+    register_Ns3ByteTagListIterator_methods(root_module, root_module['ns3::ByteTagList::Iterator'])
+    register_Ns3ByteTagListIteratorItem_methods(root_module, root_module['ns3::ByteTagList::Iterator::Item'])
+    register_Ns3CallbackBase_methods(root_module, root_module['ns3::CallbackBase'])
+    register_Ns3DefaultDeleter__Ns3AttributeAccessor_methods(root_module, root_module['ns3::DefaultDeleter< ns3::AttributeAccessor >'])
+    register_Ns3DefaultDeleter__Ns3AttributeChecker_methods(root_module, root_module['ns3::DefaultDeleter< ns3::AttributeChecker >'])
+    register_Ns3DefaultDeleter__Ns3AttributeValue_methods(root_module, root_module['ns3::DefaultDeleter< ns3::AttributeValue >'])
+    register_Ns3DefaultDeleter__Ns3CallbackImplBase_methods(root_module, root_module['ns3::DefaultDeleter< ns3::CallbackImplBase >'])
+    register_Ns3DefaultDeleter__Ns3EventImpl_methods(root_module, root_module['ns3::DefaultDeleter< ns3::EventImpl >'])
+    register_Ns3DefaultDeleter__Ns3FlowClassifier_methods(root_module, root_module['ns3::DefaultDeleter< ns3::FlowClassifier >'])
+    register_Ns3DefaultDeleter__Ns3HashImplementation_methods(root_module, root_module['ns3::DefaultDeleter< ns3::Hash::Implementation >'])
+    register_Ns3DefaultDeleter__Ns3NixVector_methods(root_module, root_module['ns3::DefaultDeleter< ns3::NixVector >'])
+    register_Ns3DefaultDeleter__Ns3Packet_methods(root_module, root_module['ns3::DefaultDeleter< ns3::Packet >'])
+    register_Ns3DefaultDeleter__Ns3TraceSourceAccessor_methods(root_module, root_module['ns3::DefaultDeleter< ns3::TraceSourceAccessor >'])
+    register_Ns3EventId_methods(root_module, root_module['ns3::EventId'])
+    register_Ns3FlowMonitorHelper_methods(root_module, root_module['ns3::FlowMonitorHelper'])
+    register_Ns3Hasher_methods(root_module, root_module['ns3::Hasher'])
+    register_Ns3Histogram_methods(root_module, root_module['ns3::Histogram'])
+    register_Ns3Inet6SocketAddress_methods(root_module, root_module['ns3::Inet6SocketAddress'])
+    register_Ns3InetSocketAddress_methods(root_module, root_module['ns3::InetSocketAddress'])
+    register_Ns3Ipv4Address_methods(root_module, root_module['ns3::Ipv4Address'])
+    register_Ns3Ipv4AddressHash_methods(root_module, root_module['ns3::Ipv4AddressHash'])
+    register_Ns3Ipv4InterfaceAddress_methods(root_module, root_module['ns3::Ipv4InterfaceAddress'])
+    register_Ns3Ipv4Mask_methods(root_module, root_module['ns3::Ipv4Mask'])
+    register_Ns3Ipv6Address_methods(root_module, root_module['ns3::Ipv6Address'])
+    register_Ns3Ipv6AddressHash_methods(root_module, root_module['ns3::Ipv6AddressHash'])
+    register_Ns3Ipv6InterfaceAddress_methods(root_module, root_module['ns3::Ipv6InterfaceAddress'])
+    register_Ns3Ipv6Prefix_methods(root_module, root_module['ns3::Ipv6Prefix'])
+    register_Ns3LogComponent_methods(root_module, root_module['ns3::LogComponent'])
+    register_Ns3Mac48Address_methods(root_module, root_module['ns3::Mac48Address'])
+    register_Ns3Mac8Address_methods(root_module, root_module['ns3::Mac8Address'])
+    register_Ns3NodeContainer_methods(root_module, root_module['ns3::NodeContainer'])
+    register_Ns3ObjectBase_methods(root_module, root_module['ns3::ObjectBase'])
+    register_Ns3ObjectDeleter_methods(root_module, root_module['ns3::ObjectDeleter'])
+    register_Ns3ObjectFactory_methods(root_module, root_module['ns3::ObjectFactory'])
+    register_Ns3PacketMetadata_methods(root_module, root_module['ns3::PacketMetadata'])
+    register_Ns3PacketMetadataItem_methods(root_module, root_module['ns3::PacketMetadata::Item'])
+    register_Ns3PacketMetadataItemIterator_methods(root_module, root_module['ns3::PacketMetadata::ItemIterator'])
+    register_Ns3PacketTagIterator_methods(root_module, root_module['ns3::PacketTagIterator'])
+    register_Ns3PacketTagIteratorItem_methods(root_module, root_module['ns3::PacketTagIterator::Item'])
+    register_Ns3PacketTagList_methods(root_module, root_module['ns3::PacketTagList'])
+    register_Ns3PacketTagListTagData_methods(root_module, root_module['ns3::PacketTagList::TagData'])
+    register_Ns3ParameterLogger_methods(root_module, root_module['ns3::ParameterLogger'])
+    register_Ns3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_methods(root_module, root_module['ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter >'])
+    register_Ns3Simulator_methods(root_module, root_module['ns3::Simulator'])
+    register_Ns3Tag_methods(root_module, root_module['ns3::Tag'])
+    register_Ns3TagBuffer_methods(root_module, root_module['ns3::TagBuffer'])
+    register_Ns3Time_methods(root_module, root_module['ns3::Time'])
+    register_Ns3TimeWithUnit_methods(root_module, root_module['ns3::TimeWithUnit'])
+    register_Ns3TypeId_methods(root_module, root_module['ns3::TypeId'])
+    register_Ns3TypeIdAttributeInformation_methods(root_module, root_module['ns3::TypeId::AttributeInformation'])
+    register_Ns3TypeIdTraceSourceInformation_methods(root_module, root_module['ns3::TypeId::TraceSourceInformation'])
+    register_Ns3Empty_methods(root_module, root_module['ns3::empty'])
+    register_Ns3Int64x64_t_methods(root_module, root_module['ns3::int64x64_t'])
+    register_Ns3Chunk_methods(root_module, root_module['ns3::Chunk'])
+    register_Ns3Header_methods(root_module, root_module['ns3::Header'])
+    register_Ns3Ipv4Header_methods(root_module, root_module['ns3::Ipv4Header'])
+    register_Ns3Ipv6Header_methods(root_module, root_module['ns3::Ipv6Header'])
+    register_Ns3Object_methods(root_module, root_module['ns3::Object'])
+    register_Ns3ObjectAggregateIterator_methods(root_module, root_module['ns3::Object::AggregateIterator'])
+    register_Ns3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >'])
+    register_Ns3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >'])
+    register_Ns3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >'])
+    register_Ns3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >'])
+    register_Ns3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >'])
+    register_Ns3SimpleRefCount__Ns3FlowClassifier_Ns3Empty_Ns3DefaultDeleter__lt__ns3FlowClassifier__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::FlowClassifier, ns3::empty, ns3::DefaultDeleter<ns3::FlowClassifier> >'])
+    register_Ns3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >'])
+    register_Ns3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> >'])
+    register_Ns3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> >'])
+    register_Ns3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >'])
+    register_Ns3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> >'])
+    register_Ns3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >'])
+    register_Ns3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> >'])
+    register_Ns3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >'])
+    register_Ns3Socket_methods(root_module, root_module['ns3::Socket'])
+    register_Ns3SocketIpTosTag_methods(root_module, root_module['ns3::SocketIpTosTag'])
+    register_Ns3SocketIpTtlTag_methods(root_module, root_module['ns3::SocketIpTtlTag'])
+    register_Ns3SocketIpv6HopLimitTag_methods(root_module, root_module['ns3::SocketIpv6HopLimitTag'])
+    register_Ns3SocketIpv6TclassTag_methods(root_module, root_module['ns3::SocketIpv6TclassTag'])
+    register_Ns3SocketPriorityTag_methods(root_module, root_module['ns3::SocketPriorityTag'])
+    register_Ns3SocketSetDontFragmentTag_methods(root_module, root_module['ns3::SocketSetDontFragmentTag'])
+    register_Ns3TraceSourceAccessor_methods(root_module, root_module['ns3::TraceSourceAccessor'])
+    register_Ns3Trailer_methods(root_module, root_module['ns3::Trailer'])
+    register_Ns3AttributeAccessor_methods(root_module, root_module['ns3::AttributeAccessor'])
+    register_Ns3AttributeChecker_methods(root_module, root_module['ns3::AttributeChecker'])
+    register_Ns3AttributeValue_methods(root_module, root_module['ns3::AttributeValue'])
+    register_Ns3CallbackChecker_methods(root_module, root_module['ns3::CallbackChecker'])
+    register_Ns3CallbackImplBase_methods(root_module, root_module['ns3::CallbackImplBase'])
+    register_Ns3CallbackValue_methods(root_module, root_module['ns3::CallbackValue'])
+    register_Ns3EmptyAttributeAccessor_methods(root_module, root_module['ns3::EmptyAttributeAccessor'])
+    register_Ns3EmptyAttributeChecker_methods(root_module, root_module['ns3::EmptyAttributeChecker'])
+    register_Ns3EmptyAttributeValue_methods(root_module, root_module['ns3::EmptyAttributeValue'])
+    register_Ns3EventImpl_methods(root_module, root_module['ns3::EventImpl'])
+    register_Ns3FlowClassifier_methods(root_module, root_module['ns3::FlowClassifier'])
+    register_Ns3FlowMonitor_methods(root_module, root_module['ns3::FlowMonitor'])
+    register_Ns3FlowMonitorFlowStats_methods(root_module, root_module['ns3::FlowMonitor::FlowStats'])
+    register_Ns3FlowProbe_methods(root_module, root_module['ns3::FlowProbe'])
+    register_Ns3FlowProbeFlowStats_methods(root_module, root_module['ns3::FlowProbe::FlowStats'])
+    register_Ns3Ipv4_methods(root_module, root_module['ns3::Ipv4'])
+    register_Ns3Ipv4AddressChecker_methods(root_module, root_module['ns3::Ipv4AddressChecker'])
+    register_Ns3Ipv4AddressValue_methods(root_module, root_module['ns3::Ipv4AddressValue'])
+    register_Ns3Ipv4FlowClassifier_methods(root_module, root_module['ns3::Ipv4FlowClassifier'])
+    register_Ns3Ipv4FlowClassifierFiveTuple_methods(root_module, root_module['ns3::Ipv4FlowClassifier::FiveTuple'])
+    register_Ns3Ipv4FlowClassifierSortByCount_methods(root_module, root_module['ns3::Ipv4FlowClassifier::SortByCount'])
+    register_Ns3Ipv4FlowProbe_methods(root_module, root_module['ns3::Ipv4FlowProbe'])
+    register_Ns3Ipv4L3Protocol_methods(root_module, root_module['ns3::Ipv4L3Protocol'])
+    register_Ns3Ipv4MaskChecker_methods(root_module, root_module['ns3::Ipv4MaskChecker'])
+    register_Ns3Ipv4MaskValue_methods(root_module, root_module['ns3::Ipv4MaskValue'])
+    register_Ns3Ipv4MulticastRoute_methods(root_module, root_module['ns3::Ipv4MulticastRoute'])
+    register_Ns3Ipv4Route_methods(root_module, root_module['ns3::Ipv4Route'])
+    register_Ns3Ipv4RoutingProtocol_methods(root_module, root_module['ns3::Ipv4RoutingProtocol'])
+    register_Ns3Ipv6_methods(root_module, root_module['ns3::Ipv6'])
+    register_Ns3Ipv6AddressChecker_methods(root_module, root_module['ns3::Ipv6AddressChecker'])
+    register_Ns3Ipv6AddressValue_methods(root_module, root_module['ns3::Ipv6AddressValue'])
+    register_Ns3Ipv6FlowClassifier_methods(root_module, root_module['ns3::Ipv6FlowClassifier'])
+    register_Ns3Ipv6FlowClassifierFiveTuple_methods(root_module, root_module['ns3::Ipv6FlowClassifier::FiveTuple'])
+    register_Ns3Ipv6FlowClassifierSortByCount_methods(root_module, root_module['ns3::Ipv6FlowClassifier::SortByCount'])
+    register_Ns3Ipv6FlowProbe_methods(root_module, root_module['ns3::Ipv6FlowProbe'])
+    register_Ns3Ipv6L3Protocol_methods(root_module, root_module['ns3::Ipv6L3Protocol'])
+    register_Ns3Ipv6PmtuCache_methods(root_module, root_module['ns3::Ipv6PmtuCache'])
+    register_Ns3Ipv6PrefixChecker_methods(root_module, root_module['ns3::Ipv6PrefixChecker'])
+    register_Ns3Ipv6PrefixValue_methods(root_module, root_module['ns3::Ipv6PrefixValue'])
+    register_Ns3Mac48AddressChecker_methods(root_module, root_module['ns3::Mac48AddressChecker'])
+    register_Ns3Mac48AddressValue_methods(root_module, root_module['ns3::Mac48AddressValue'])
+    register_Ns3NetDevice_methods(root_module, root_module['ns3::NetDevice'])
+    register_Ns3NixVector_methods(root_module, root_module['ns3::NixVector'])
+    register_Ns3Node_methods(root_module, root_module['ns3::Node'])
+    register_Ns3ObjectFactoryChecker_methods(root_module, root_module['ns3::ObjectFactoryChecker'])
+    register_Ns3ObjectFactoryValue_methods(root_module, root_module['ns3::ObjectFactoryValue'])
+    register_Ns3OutputStreamWrapper_methods(root_module, root_module['ns3::OutputStreamWrapper'])
+    register_Ns3Packet_methods(root_module, root_module['ns3::Packet'])
+    register_Ns3QueueItem_methods(root_module, root_module['ns3::QueueItem'])
+    register_Ns3TimeValue_methods(root_module, root_module['ns3::TimeValue'])
+    register_Ns3TypeIdChecker_methods(root_module, root_module['ns3::TypeIdChecker'])
+    register_Ns3TypeIdValue_methods(root_module, root_module['ns3::TypeIdValue'])
+    register_Ns3AddressChecker_methods(root_module, root_module['ns3::AddressChecker'])
+    register_Ns3AddressValue_methods(root_module, root_module['ns3::AddressValue'])
+    register_Ns3CallbackImpl__Bool_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
+    register_Ns3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
+    register_Ns3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ipv4L3ProtocolDropReason_Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
+    register_Ns3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
+    register_Ns3CallbackImpl__Void_Const_ns3Ipv6Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ipv6L3ProtocolDropReason_Ns3Ptr__lt__ns3Ipv6__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
+    register_Ns3CallbackImpl__Void_Const_ns3Ipv6Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
+    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
+    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ptr__lt__ns3Ipv6__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
+    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >'])
+    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
+    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
+    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
+    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
+    register_Ns3QueueDiscItem_methods(root_module, root_module['ns3::QueueDiscItem'])
+    register_Ns3HashImplementation_methods(root_module, root_module['ns3::Hash::Implementation'])
+    register_Ns3HashFunctionFnv1a_methods(root_module, root_module['ns3::Hash::Function::Fnv1a'])
+    register_Ns3HashFunctionHash32_methods(root_module, root_module['ns3::Hash::Function::Hash32'])
+    register_Ns3HashFunctionHash64_methods(root_module, root_module['ns3::Hash::Function::Hash64'])
+    register_Ns3HashFunctionMurmur3_methods(root_module, root_module['ns3::Hash::Function::Murmur3'])
+    return
+
+def register_Ns3Address_methods(root_module, cls):
+    cls.add_binary_comparison_operator('==')
+    cls.add_binary_comparison_operator('!=')
+    cls.add_binary_comparison_operator('<')
+    cls.add_output_stream_operator()
+    ## address.h (module 'network'): ns3::Address::Address() [constructor]
+    cls.add_constructor([])
+    ## address.h (module 'network'): ns3::Address::Address(uint8_t type, uint8_t const * buffer, uint8_t len) [constructor]
+    cls.add_constructor([param('uint8_t', 'type'), param('uint8_t const *', 'buffer'), param('uint8_t', 'len')])
+    ## address.h (module 'network'): ns3::Address::Address(ns3::Address const & address) [constructor]
+    cls.add_constructor([param('ns3::Address const &', 'address')])
+    ## address.h (module 'network'): bool ns3::Address::CheckCompatible(uint8_t type, uint8_t len) const [member function]
+    cls.add_method('CheckCompatible', 
+                   'bool', 
+                   [param('uint8_t', 'type'), param('uint8_t', 'len')], 
+                   is_const=True)
+    ## address.h (module 'network'): uint32_t ns3::Address::CopyAllFrom(uint8_t const * buffer, uint8_t len) [member function]
+    cls.add_method('CopyAllFrom', 
+                   'uint32_t', 
+                   [param('uint8_t const *', 'buffer'), param('uint8_t', 'len')])
+    ## address.h (module 'network'): uint32_t ns3::Address::CopyAllTo(uint8_t * buffer, uint8_t len) const [member function]
+    cls.add_method('CopyAllTo', 
+                   'uint32_t', 
+                   [param('uint8_t *', 'buffer'), param('uint8_t', 'len')], 
+                   is_const=True)
+    ## address.h (module 'network'): uint32_t ns3::Address::CopyFrom(uint8_t const * buffer, uint8_t len) [member function]
+    cls.add_method('CopyFrom', 
+                   'uint32_t', 
+                   [param('uint8_t const *', 'buffer'), param('uint8_t', 'len')])
+    ## address.h (module 'network'): uint32_t ns3::Address::CopyTo(uint8_t * buffer) const [member function]
+    cls.add_method('CopyTo', 
+                   'uint32_t', 
+                   [param('uint8_t *', 'buffer')], 
+                   is_const=True)
+    ## address.h (module 'network'): void ns3::Address::Deserialize(ns3::TagBuffer buffer) [member function]
+    cls.add_method('Deserialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'buffer')])
+    ## address.h (module 'network'): uint8_t ns3::Address::GetLength() const [member function]
+    cls.add_method('GetLength', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## address.h (module 'network'): uint32_t ns3::Address::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## address.h (module 'network'): bool ns3::Address::IsInvalid() const [member function]
+    cls.add_method('IsInvalid', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## address.h (module 'network'): bool ns3::Address::IsMatchingType(uint8_t type) const [member function]
+    cls.add_method('IsMatchingType', 
+                   'bool', 
+                   [param('uint8_t', 'type')], 
+                   is_const=True)
+    ## address.h (module 'network'): static uint8_t ns3::Address::Register() [member function]
+    cls.add_method('Register', 
+                   'uint8_t', 
+                   [], 
+                   is_static=True)
+    ## address.h (module 'network'): void ns3::Address::Serialize(ns3::TagBuffer buffer) const [member function]
+    cls.add_method('Serialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'buffer')], 
+                   is_const=True)
+    return
+
+def register_Ns3AttributeConstructionList_methods(root_module, cls):
+    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::AttributeConstructionList(ns3::AttributeConstructionList const & arg0) [constructor]
+    cls.add_constructor([param('ns3::AttributeConstructionList const &', 'arg0')])
+    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::AttributeConstructionList() [constructor]
+    cls.add_constructor([])
+    ## attribute-construction-list.h (module 'core'): void ns3::AttributeConstructionList::Add(std::string name, ns3::Ptr<const ns3::AttributeChecker> checker, ns3::Ptr<ns3::AttributeValue> value) [member function]
+    cls.add_method('Add', 
+                   'void', 
+                   [param('std::string', 'name'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::Ptr< ns3::AttributeValue >', 'value')])
+    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::CIterator ns3::AttributeConstructionList::Begin() const [member function]
+    cls.add_method('Begin', 
+                   'ns3::AttributeConstructionList::CIterator', 
+                   [], 
+                   is_const=True)
+    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::CIterator ns3::AttributeConstructionList::End() const [member function]
+    cls.add_method('End', 
+                   'ns3::AttributeConstructionList::CIterator', 
+                   [], 
+                   is_const=True)
+    ## attribute-construction-list.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeConstructionList::Find(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
+    cls.add_method('Find', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_const=True)
+    return
+
+def register_Ns3AttributeConstructionListItem_methods(root_module, cls):
+    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::Item() [constructor]
+    cls.add_constructor([])
+    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::Item(ns3::AttributeConstructionList::Item const & arg0) [constructor]
+    cls.add_constructor([param('ns3::AttributeConstructionList::Item const &', 'arg0')])
+    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::checker [variable]
+    cls.add_instance_attribute('checker', 'ns3::Ptr< ns3::AttributeChecker const >', is_const=False)
+    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::name [variable]
+    cls.add_instance_attribute('name', 'std::string', is_const=False)
+    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::value [variable]
+    cls.add_instance_attribute('value', 'ns3::Ptr< ns3::AttributeValue >', is_const=False)
+    return
+
+def register_Ns3Buffer_methods(root_module, cls):
+    ## buffer.h (module 'network'): ns3::Buffer::Buffer(ns3::Buffer const & o) [constructor]
+    cls.add_constructor([param('ns3::Buffer const &', 'o')])
+    ## buffer.h (module 'network'): ns3::Buffer::Buffer() [constructor]
+    cls.add_constructor([])
+    ## buffer.h (module 'network'): ns3::Buffer::Buffer(uint32_t dataSize) [constructor]
+    cls.add_constructor([param('uint32_t', 'dataSize')])
+    ## buffer.h (module 'network'): ns3::Buffer::Buffer(uint32_t dataSize, bool initialize) [constructor]
+    cls.add_constructor([param('uint32_t', 'dataSize'), param('bool', 'initialize')])
+    ## buffer.h (module 'network'): void ns3::Buffer::AddAtEnd(uint32_t end) [member function]
+    cls.add_method('AddAtEnd', 
+                   'void', 
+                   [param('uint32_t', 'end')])
+    ## buffer.h (module 'network'): void ns3::Buffer::AddAtEnd(ns3::Buffer const & o) [member function]
+    cls.add_method('AddAtEnd', 
+                   'void', 
+                   [param('ns3::Buffer const &', 'o')])
+    ## buffer.h (module 'network'): void ns3::Buffer::AddAtStart(uint32_t start) [member function]
+    cls.add_method('AddAtStart', 
+                   'void', 
+                   [param('uint32_t', 'start')])
+    ## buffer.h (module 'network'): ns3::Buffer::Iterator ns3::Buffer::Begin() const [member function]
+    cls.add_method('Begin', 
+                   'ns3::Buffer::Iterator', 
+                   [], 
+                   is_const=True)
+    ## buffer.h (module 'network'): void ns3::Buffer::CopyData(std::ostream * os, uint32_t size) const [member function]
+    cls.add_method('CopyData', 
+                   'void', 
+                   [param('std::ostream *', 'os'), param('uint32_t', 'size')], 
+                   is_const=True)
+    ## buffer.h (module 'network'): uint32_t ns3::Buffer::CopyData(uint8_t * buffer, uint32_t size) const [member function]
+    cls.add_method('CopyData', 
+                   'uint32_t', 
+                   [param('uint8_t *', 'buffer'), param('uint32_t', 'size')], 
+                   is_const=True)
+    ## buffer.h (module 'network'): ns3::Buffer ns3::Buffer::CreateFragment(uint32_t start, uint32_t length) const [member function]
+    cls.add_method('CreateFragment', 
+                   'ns3::Buffer', 
+                   [param('uint32_t', 'start'), param('uint32_t', 'length')], 
+                   is_const=True)
+    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Deserialize(uint8_t const * buffer, uint32_t size) [member function]
+    cls.add_method('Deserialize', 
+                   'uint32_t', 
+                   [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
+    ## buffer.h (module 'network'): ns3::Buffer::Iterator ns3::Buffer::End() const [member function]
+    cls.add_method('End', 
+                   'ns3::Buffer::Iterator', 
+                   [], 
+                   is_const=True)
+    ## buffer.h (module 'network'): uint32_t ns3::Buffer::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## buffer.h (module 'network'): uint32_t ns3::Buffer::GetSize() const [member function]
+    cls.add_method('GetSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## buffer.h (module 'network'): uint8_t const * ns3::Buffer::PeekData() const [member function]
+    cls.add_method('PeekData', 
+                   'uint8_t const *', 
+                   [], 
+                   is_const=True)
+    ## buffer.h (module 'network'): void ns3::Buffer::RemoveAtEnd(uint32_t end) [member function]
+    cls.add_method('RemoveAtEnd', 
+                   'void', 
+                   [param('uint32_t', 'end')])
+    ## buffer.h (module 'network'): void ns3::Buffer::RemoveAtStart(uint32_t start) [member function]
+    cls.add_method('RemoveAtStart', 
+                   'void', 
+                   [param('uint32_t', 'start')])
+    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Serialize(uint8_t * buffer, uint32_t maxSize) const [member function]
+    cls.add_method('Serialize', 
+                   'uint32_t', 
+                   [param('uint8_t *', 'buffer'), param('uint32_t', 'maxSize')], 
+                   is_const=True)
+    return
+
+def register_Ns3BufferIterator_methods(root_module, cls):
+    ## buffer.h (module 'network'): ns3::Buffer::Iterator::Iterator(ns3::Buffer::Iterator const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Buffer::Iterator const &', 'arg0')])
+    ## buffer.h (module 'network'): ns3::Buffer::Iterator::Iterator() [constructor]
+    cls.add_constructor([])
+    ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::CalculateIpChecksum(uint16_t size) [member function]
+    cls.add_method('CalculateIpChecksum', 
+                   'uint16_t', 
+                   [param('uint16_t', 'size')])
+    ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::CalculateIpChecksum(uint16_t size, uint32_t initialChecksum) [member function]
+    cls.add_method('CalculateIpChecksum', 
+                   'uint16_t', 
+                   [param('uint16_t', 'size'), param('uint32_t', 'initialChecksum')])
+    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::GetDistanceFrom(ns3::Buffer::Iterator const & o) const [member function]
+    cls.add_method('GetDistanceFrom', 
+                   'uint32_t', 
+                   [param('ns3::Buffer::Iterator const &', 'o')], 
+                   is_const=True)
+    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::GetRemainingSize() const [member function]
+    cls.add_method('GetRemainingSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::GetSize() const [member function]
+    cls.add_method('GetSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## buffer.h (module 'network'): bool ns3::Buffer::Iterator::IsEnd() const [member function]
+    cls.add_method('IsEnd', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## buffer.h (module 'network'): bool ns3::Buffer::Iterator::IsStart() const [member function]
+    cls.add_method('IsStart', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Next() [member function]
+    cls.add_method('Next', 
+                   'void', 
+                   [])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Next(uint32_t delta) [member function]
+    cls.add_method('Next', 
+                   'void', 
+                   [param('uint32_t', 'delta')])
+    ## buffer.h (module 'network'): uint8_t ns3::Buffer::Iterator::PeekU8() [member function]
+    cls.add_method('PeekU8', 
+                   'uint8_t', 
+                   [])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Prev() [member function]
+    cls.add_method('Prev', 
+                   'void', 
+                   [])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Prev(uint32_t delta) [member function]
+    cls.add_method('Prev', 
+                   'void', 
+                   [param('uint32_t', 'delta')])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Read(uint8_t * buffer, uint32_t size) [member function]
+    cls.add_method('Read', 
+                   'void', 
+                   [param('uint8_t *', 'buffer'), param('uint32_t', 'size')])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Read(ns3::Buffer::Iterator start, uint32_t size) [member function]
+    cls.add_method('Read', 
+                   'void', 
+                   [param('ns3::Buffer::Iterator', 'start'), param('uint32_t', 'size')])
+    ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::ReadLsbtohU16() [member function]
+    cls.add_method('ReadLsbtohU16', 
+                   'uint16_t', 
+                   [])
+    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::ReadLsbtohU32() [member function]
+    cls.add_method('ReadLsbtohU32', 
+                   'uint32_t', 
+                   [])
+    ## buffer.h (module 'network'): uint64_t ns3::Buffer::Iterator::ReadLsbtohU64() [member function]
+    cls.add_method('ReadLsbtohU64', 
+                   'uint64_t', 
+                   [])
+    ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::ReadNtohU16() [member function]
+    cls.add_method('ReadNtohU16', 
+                   'uint16_t', 
+                   [])
+    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::ReadNtohU32() [member function]
+    cls.add_method('ReadNtohU32', 
+                   'uint32_t', 
+                   [])
+    ## buffer.h (module 'network'): uint64_t ns3::Buffer::Iterator::ReadNtohU64() [member function]
+    cls.add_method('ReadNtohU64', 
+                   'uint64_t', 
+                   [])
+    ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::ReadU16() [member function]
+    cls.add_method('ReadU16', 
+                   'uint16_t', 
+                   [])
+    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::ReadU32() [member function]
+    cls.add_method('ReadU32', 
+                   'uint32_t', 
+                   [])
+    ## buffer.h (module 'network'): uint64_t ns3::Buffer::Iterator::ReadU64() [member function]
+    cls.add_method('ReadU64', 
+                   'uint64_t', 
+                   [])
+    ## buffer.h (module 'network'): uint8_t ns3::Buffer::Iterator::ReadU8() [member function]
+    cls.add_method('ReadU8', 
+                   'uint8_t', 
+                   [])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Write(uint8_t const * buffer, uint32_t size) [member function]
+    cls.add_method('Write', 
+                   'void', 
+                   [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Write(ns3::Buffer::Iterator start, ns3::Buffer::Iterator end) [member function]
+    cls.add_method('Write', 
+                   'void', 
+                   [param('ns3::Buffer::Iterator', 'start'), param('ns3::Buffer::Iterator', 'end')])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtolsbU16(uint16_t data) [member function]
+    cls.add_method('WriteHtolsbU16', 
+                   'void', 
+                   [param('uint16_t', 'data')])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtolsbU32(uint32_t data) [member function]
+    cls.add_method('WriteHtolsbU32', 
+                   'void', 
+                   [param('uint32_t', 'data')])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtolsbU64(uint64_t data) [member function]
+    cls.add_method('WriteHtolsbU64', 
+                   'void', 
+                   [param('uint64_t', 'data')])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtonU16(uint16_t data) [member function]
+    cls.add_method('WriteHtonU16', 
+                   'void', 
+                   [param('uint16_t', 'data')])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtonU32(uint32_t data) [member function]
+    cls.add_method('WriteHtonU32', 
+                   'void', 
+                   [param('uint32_t', 'data')])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtonU64(uint64_t data) [member function]
+    cls.add_method('WriteHtonU64', 
+                   'void', 
+                   [param('uint64_t', 'data')])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU16(uint16_t data) [member function]
+    cls.add_method('WriteU16', 
+                   'void', 
+                   [param('uint16_t', 'data')])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU32(uint32_t data) [member function]
+    cls.add_method('WriteU32', 
+                   'void', 
+                   [param('uint32_t', 'data')])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU64(uint64_t data) [member function]
+    cls.add_method('WriteU64', 
+                   'void', 
+                   [param('uint64_t', 'data')])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU8(uint8_t data) [member function]
+    cls.add_method('WriteU8', 
+                   'void', 
+                   [param('uint8_t', 'data')])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU8(uint8_t data, uint32_t len) [member function]
+    cls.add_method('WriteU8', 
+                   'void', 
+                   [param('uint8_t', 'data'), param('uint32_t', 'len')])
+    return
+
+def register_Ns3ByteTagIterator_methods(root_module, cls):
+    ## packet.h (module 'network'): ns3::ByteTagIterator::ByteTagIterator(ns3::ByteTagIterator const & arg0) [constructor]
+    cls.add_constructor([param('ns3::ByteTagIterator const &', 'arg0')])
+    ## packet.h (module 'network'): bool ns3::ByteTagIterator::HasNext() const [member function]
+    cls.add_method('HasNext', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## packet.h (module 'network'): ns3::ByteTagIterator::Item ns3::ByteTagIterator::Next() [member function]
+    cls.add_method('Next', 
+                   'ns3::ByteTagIterator::Item', 
+                   [])
+    return
+
+def register_Ns3ByteTagIteratorItem_methods(root_module, cls):
+    ## packet.h (module 'network'): ns3::ByteTagIterator::Item::Item(ns3::ByteTagIterator::Item const & arg0) [constructor]
+    cls.add_constructor([param('ns3::ByteTagIterator::Item const &', 'arg0')])
+    ## packet.h (module 'network'): uint32_t ns3::ByteTagIterator::Item::GetEnd() const [member function]
+    cls.add_method('GetEnd', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## packet.h (module 'network'): uint32_t ns3::ByteTagIterator::Item::GetStart() const [member function]
+    cls.add_method('GetStart', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## packet.h (module 'network'): void ns3::ByteTagIterator::Item::GetTag(ns3::Tag & tag) const [member function]
+    cls.add_method('GetTag', 
+                   'void', 
+                   [param('ns3::Tag &', 'tag')], 
+                   is_const=True)
+    ## packet.h (module 'network'): ns3::TypeId ns3::ByteTagIterator::Item::GetTypeId() const [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True)
+    return
+
+def register_Ns3ByteTagList_methods(root_module, cls):
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::ByteTagList() [constructor]
+    cls.add_constructor([])
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::ByteTagList(ns3::ByteTagList const & o) [constructor]
+    cls.add_constructor([param('ns3::ByteTagList const &', 'o')])
+    ## byte-tag-list.h (module 'network'): ns3::TagBuffer ns3::ByteTagList::Add(ns3::TypeId tid, uint32_t bufferSize, int32_t start, int32_t end) [member function]
+    cls.add_method('Add', 
+                   'ns3::TagBuffer', 
+                   [param('ns3::TypeId', 'tid'), param('uint32_t', 'bufferSize'), param('int32_t', 'start'), param('int32_t', 'end')])
+    ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::Add(ns3::ByteTagList const & o) [member function]
+    cls.add_method('Add', 
+                   'void', 
+                   [param('ns3::ByteTagList const &', 'o')])
+    ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::AddAtEnd(int32_t appendOffset) [member function]
+    cls.add_method('AddAtEnd', 
+                   'void', 
+                   [param('int32_t', 'appendOffset')])
+    ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::AddAtStart(int32_t prependOffset) [member function]
+    cls.add_method('AddAtStart', 
+                   'void', 
+                   [param('int32_t', 'prependOffset')])
+    ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::Adjust(int32_t adjustment) [member function]
+    cls.add_method('Adjust', 
+                   'void', 
+                   [param('int32_t', 'adjustment')])
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator ns3::ByteTagList::Begin(int32_t offsetStart, int32_t offsetEnd) const [member function]
+    cls.add_method('Begin', 
+                   'ns3::ByteTagList::Iterator', 
+                   [param('int32_t', 'offsetStart'), param('int32_t', 'offsetEnd')], 
+                   is_const=True)
+    ## byte-tag-list.h (module 'network'): uint32_t ns3::ByteTagList::Deserialize(uint32_t const * buffer, uint32_t size) [member function]
+    cls.add_method('Deserialize', 
+                   'uint32_t', 
+                   [param('uint32_t const *', 'buffer'), param('uint32_t', 'size')])
+    ## byte-tag-list.h (module 'network'): uint32_t ns3::ByteTagList::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::RemoveAll() [member function]
+    cls.add_method('RemoveAll', 
+                   'void', 
+                   [])
+    ## byte-tag-list.h (module 'network'): uint32_t ns3::ByteTagList::Serialize(uint32_t * buffer, uint32_t maxSize) const [member function]
+    cls.add_method('Serialize', 
+                   'uint32_t', 
+                   [param('uint32_t *', 'buffer'), param('uint32_t', 'maxSize')], 
+                   is_const=True)
+    return
+
+def register_Ns3ByteTagListIterator_methods(root_module, cls):
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Iterator(ns3::ByteTagList::Iterator const & arg0) [constructor]
+    cls.add_constructor([param('ns3::ByteTagList::Iterator const &', 'arg0')])
+    ## byte-tag-list.h (module 'network'): uint32_t ns3::ByteTagList::Iterator::GetOffsetStart() const [member function]
+    cls.add_method('GetOffsetStart', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## byte-tag-list.h (module 'network'): bool ns3::ByteTagList::Iterator::HasNext() const [member function]
+    cls.add_method('HasNext', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item ns3::ByteTagList::Iterator::Next() [member function]
+    cls.add_method('Next', 
+                   'ns3::ByteTagList::Iterator::Item', 
+                   [])
+    return
+
+def register_Ns3ByteTagListIteratorItem_methods(root_module, cls):
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::Item(ns3::ByteTagList::Iterator::Item const & arg0) [constructor]
+    cls.add_constructor([param('ns3::ByteTagList::Iterator::Item const &', 'arg0')])
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::Item(ns3::TagBuffer buf) [constructor]
+    cls.add_constructor([param('ns3::TagBuffer', 'buf')])
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::buf [variable]
+    cls.add_instance_attribute('buf', 'ns3::TagBuffer', is_const=False)
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::end [variable]
+    cls.add_instance_attribute('end', 'int32_t', is_const=False)
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::size [variable]
+    cls.add_instance_attribute('size', 'uint32_t', is_const=False)
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::start [variable]
+    cls.add_instance_attribute('start', 'int32_t', is_const=False)
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::tid [variable]
+    cls.add_instance_attribute('tid', 'ns3::TypeId', is_const=False)
+    return
+
+def register_Ns3CallbackBase_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackBase::CallbackBase(ns3::CallbackBase const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackBase const &', 'arg0')])
+    ## callback.h (module 'core'): ns3::CallbackBase::CallbackBase() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::Ptr<ns3::CallbackImplBase> ns3::CallbackBase::GetImpl() const [member function]
+    cls.add_method('GetImpl', 
+                   'ns3::Ptr< ns3::CallbackImplBase >', 
+                   [], 
+                   is_const=True)
+    ## callback.h (module 'core'): ns3::CallbackBase::CallbackBase(ns3::Ptr<ns3::CallbackImplBase> impl) [constructor]
+    cls.add_constructor([param('ns3::Ptr< ns3::CallbackImplBase >', 'impl')], 
+                        visibility='protected')
+    return
+
+def register_Ns3DefaultDeleter__Ns3AttributeAccessor_methods(root_module, cls):
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeAccessor>::DefaultDeleter() [constructor]
+    cls.add_constructor([])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeAccessor>::DefaultDeleter(ns3::DefaultDeleter<ns3::AttributeAccessor> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::DefaultDeleter< ns3::AttributeAccessor > const &', 'arg0')])
+    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::AttributeAccessor>::Delete(ns3::AttributeAccessor * object) [member function]
+    cls.add_method('Delete', 
+                   'void', 
+                   [param('ns3::AttributeAccessor *', 'object')], 
+                   is_static=True)
+    return
+
+def register_Ns3DefaultDeleter__Ns3AttributeChecker_methods(root_module, cls):
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeChecker>::DefaultDeleter() [constructor]
+    cls.add_constructor([])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeChecker>::DefaultDeleter(ns3::DefaultDeleter<ns3::AttributeChecker> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::DefaultDeleter< ns3::AttributeChecker > const &', 'arg0')])
+    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::AttributeChecker>::Delete(ns3::AttributeChecker * object) [member function]
+    cls.add_method('Delete', 
+                   'void', 
+                   [param('ns3::AttributeChecker *', 'object')], 
+                   is_static=True)
+    return
+
+def register_Ns3DefaultDeleter__Ns3AttributeValue_methods(root_module, cls):
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeValue>::DefaultDeleter() [constructor]
+    cls.add_constructor([])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeValue>::DefaultDeleter(ns3::DefaultDeleter<ns3::AttributeValue> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::DefaultDeleter< ns3::AttributeValue > const &', 'arg0')])
+    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::AttributeValue>::Delete(ns3::AttributeValue * object) [member function]
+    cls.add_method('Delete', 
+                   'void', 
+                   [param('ns3::AttributeValue *', 'object')], 
+                   is_static=True)
+    return
+
+def register_Ns3DefaultDeleter__Ns3CallbackImplBase_methods(root_module, cls):
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::CallbackImplBase>::DefaultDeleter() [constructor]
+    cls.add_constructor([])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::CallbackImplBase>::DefaultDeleter(ns3::DefaultDeleter<ns3::CallbackImplBase> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::DefaultDeleter< ns3::CallbackImplBase > const &', 'arg0')])
+    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::CallbackImplBase>::Delete(ns3::CallbackImplBase * object) [member function]
+    cls.add_method('Delete', 
+                   'void', 
+                   [param('ns3::CallbackImplBase *', 'object')], 
+                   is_static=True)
+    return
+
+def register_Ns3DefaultDeleter__Ns3EventImpl_methods(root_module, cls):
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::EventImpl>::DefaultDeleter() [constructor]
+    cls.add_constructor([])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::EventImpl>::DefaultDeleter(ns3::DefaultDeleter<ns3::EventImpl> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::DefaultDeleter< ns3::EventImpl > const &', 'arg0')])
+    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::EventImpl>::Delete(ns3::EventImpl * object) [member function]
+    cls.add_method('Delete', 
+                   'void', 
+                   [param('ns3::EventImpl *', 'object')], 
+                   is_static=True)
+    return
+
+def register_Ns3DefaultDeleter__Ns3FlowClassifier_methods(root_module, cls):
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::FlowClassifier>::DefaultDeleter() [constructor]
+    cls.add_constructor([])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::FlowClassifier>::DefaultDeleter(ns3::DefaultDeleter<ns3::FlowClassifier> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::DefaultDeleter< ns3::FlowClassifier > const &', 'arg0')])
+    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::FlowClassifier>::Delete(ns3::FlowClassifier * object) [member function]
+    cls.add_method('Delete', 
+                   'void', 
+                   [param('ns3::FlowClassifier *', 'object')], 
+                   is_static=True)
+    return
+
+def register_Ns3DefaultDeleter__Ns3HashImplementation_methods(root_module, cls):
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Hash::Implementation>::DefaultDeleter() [constructor]
+    cls.add_constructor([])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Hash::Implementation>::DefaultDeleter(ns3::DefaultDeleter<ns3::Hash::Implementation> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::DefaultDeleter< ns3::Hash::Implementation > const &', 'arg0')])
+    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::Hash::Implementation>::Delete(ns3::Hash::Implementation * object) [member function]
+    cls.add_method('Delete', 
+                   'void', 
+                   [param('ns3::Hash::Implementation *', 'object')], 
+                   is_static=True)
+    return
+
+def register_Ns3DefaultDeleter__Ns3NixVector_methods(root_module, cls):
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::NixVector>::DefaultDeleter() [constructor]
+    cls.add_constructor([])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::NixVector>::DefaultDeleter(ns3::DefaultDeleter<ns3::NixVector> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::DefaultDeleter< ns3::NixVector > const &', 'arg0')])
+    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::NixVector>::Delete(ns3::NixVector * object) [member function]
+    cls.add_method('Delete', 
+                   'void', 
+                   [param('ns3::NixVector *', 'object')], 
+                   is_static=True)
+    return
+
+def register_Ns3DefaultDeleter__Ns3Packet_methods(root_module, cls):
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Packet>::DefaultDeleter() [constructor]
+    cls.add_constructor([])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Packet>::DefaultDeleter(ns3::DefaultDeleter<ns3::Packet> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::DefaultDeleter< ns3::Packet > const &', 'arg0')])
+    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::Packet>::Delete(ns3::Packet * object) [member function]
+    cls.add_method('Delete', 
+                   'void', 
+                   [param('ns3::Packet *', 'object')], 
+                   is_static=True)
+    return
+
+def register_Ns3DefaultDeleter__Ns3TraceSourceAccessor_methods(root_module, cls):
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::TraceSourceAccessor>::DefaultDeleter() [constructor]
+    cls.add_constructor([])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::TraceSourceAccessor>::DefaultDeleter(ns3::DefaultDeleter<ns3::TraceSourceAccessor> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::DefaultDeleter< ns3::TraceSourceAccessor > const &', 'arg0')])
+    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::TraceSourceAccessor>::Delete(ns3::TraceSourceAccessor * object) [member function]
+    cls.add_method('Delete', 
+                   'void', 
+                   [param('ns3::TraceSourceAccessor *', 'object')], 
+                   is_static=True)
+    return
+
+def register_Ns3EventId_methods(root_module, cls):
+    cls.add_binary_comparison_operator('==')
+    cls.add_binary_comparison_operator('!=')
+    cls.add_binary_comparison_operator('<')
+    ## event-id.h (module 'core'): ns3::EventId::EventId(ns3::EventId const & arg0) [constructor]
+    cls.add_constructor([param('ns3::EventId const &', 'arg0')])
+    ## event-id.h (module 'core'): ns3::EventId::EventId() [constructor]
+    cls.add_constructor([])
+    ## event-id.h (module 'core'): ns3::EventId::EventId(ns3::Ptr<ns3::EventImpl> const & impl, uint64_t ts, uint32_t context, uint32_t uid) [constructor]
+    cls.add_constructor([param('ns3::Ptr< ns3::EventImpl > const &', 'impl'), param('uint64_t', 'ts'), param('uint32_t', 'context'), param('uint32_t', 'uid')])
+    ## event-id.h (module 'core'): void ns3::EventId::Cancel() [member function]
+    cls.add_method('Cancel', 
+                   'void', 
+                   [])
+    ## event-id.h (module 'core'): uint32_t ns3::EventId::GetContext() const [member function]
+    cls.add_method('GetContext', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## event-id.h (module 'core'): uint64_t ns3::EventId::GetTs() const [member function]
+    cls.add_method('GetTs', 
+                   'uint64_t', 
+                   [], 
+                   is_const=True)
+    ## event-id.h (module 'core'): uint32_t ns3::EventId::GetUid() const [member function]
+    cls.add_method('GetUid', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## event-id.h (module 'core'): bool ns3::EventId::IsExpired() const [member function]
+    cls.add_method('IsExpired', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## event-id.h (module 'core'): bool ns3::EventId::IsRunning() const [member function]
+    cls.add_method('IsRunning', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## event-id.h (module 'core'): ns3::EventImpl * ns3::EventId::PeekEventImpl() const [member function]
+    cls.add_method('PeekEventImpl', 
+                   'ns3::EventImpl *', 
+                   [], 
+                   is_const=True)
+    ## event-id.h (module 'core'): void ns3::EventId::Remove() [member function]
+    cls.add_method('Remove', 
+                   'void', 
+                   [])
+    return
+
+def register_Ns3FlowMonitorHelper_methods(root_module, cls):
+    ## flow-monitor-helper.h (module 'flow-monitor'): ns3::FlowMonitorHelper::FlowMonitorHelper() [constructor]
+    cls.add_constructor([])
+    ## flow-monitor-helper.h (module 'flow-monitor'): void ns3::FlowMonitorHelper::SetMonitorAttribute(std::string n1, ns3::AttributeValue const & v1) [member function]
+    cls.add_method('SetMonitorAttribute', 
+                   'void', 
+                   [param('std::string', 'n1'), param('ns3::AttributeValue const &', 'v1')])
+    ## flow-monitor-helper.h (module 'flow-monitor'): ns3::Ptr<ns3::FlowMonitor> ns3::FlowMonitorHelper::Install(ns3::NodeContainer nodes) [member function]
+    cls.add_method('Install', 
+                   'ns3::Ptr< ns3::FlowMonitor >', 
+                   [param('ns3::NodeContainer', 'nodes')])
+    ## flow-monitor-helper.h (module 'flow-monitor'): ns3::Ptr<ns3::FlowMonitor> ns3::FlowMonitorHelper::Install(ns3::Ptr<ns3::Node> node) [member function]
+    cls.add_method('Install', 
+                   'ns3::Ptr< ns3::FlowMonitor >', 
+                   [param('ns3::Ptr< ns3::Node >', 'node')])
+    ## flow-monitor-helper.h (module 'flow-monitor'): ns3::Ptr<ns3::FlowMonitor> ns3::FlowMonitorHelper::InstallAll() [member function]
+    cls.add_method('InstallAll', 
+                   'ns3::Ptr< ns3::FlowMonitor >', 
+                   [])
+    ## flow-monitor-helper.h (module 'flow-monitor'): ns3::Ptr<ns3::FlowMonitor> ns3::FlowMonitorHelper::GetMonitor() [member function]
+    cls.add_method('GetMonitor', 
+                   'ns3::Ptr< ns3::FlowMonitor >', 
+                   [])
+    ## flow-monitor-helper.h (module 'flow-monitor'): ns3::Ptr<ns3::FlowClassifier> ns3::FlowMonitorHelper::GetClassifier() [member function]
+    cls.add_method('GetClassifier', 
+                   'ns3::Ptr< ns3::FlowClassifier >', 
+                   [])
+    ## flow-monitor-helper.h (module 'flow-monitor'): ns3::Ptr<ns3::FlowClassifier> ns3::FlowMonitorHelper::GetClassifier6() [member function]
+    cls.add_method('GetClassifier6', 
+                   'ns3::Ptr< ns3::FlowClassifier >', 
+                   [])
+    ## flow-monitor-helper.h (module 'flow-monitor'): void ns3::FlowMonitorHelper::SerializeToXmlStream(std::ostream & os, uint16_t indent, bool enableHistograms, bool enableProbes) [member function]
+    cls.add_method('SerializeToXmlStream', 
+                   'void', 
+                   [param('std::ostream &', 'os'), param('uint16_t', 'indent'), param('bool', 'enableHistograms'), param('bool', 'enableProbes')])
+    ## flow-monitor-helper.h (module 'flow-monitor'): std::string ns3::FlowMonitorHelper::SerializeToXmlString(uint16_t indent, bool enableHistograms, bool enableProbes) [member function]
+    cls.add_method('SerializeToXmlString', 
+                   'std::string', 
+                   [param('uint16_t', 'indent'), param('bool', 'enableHistograms'), param('bool', 'enableProbes')])
+    ## flow-monitor-helper.h (module 'flow-monitor'): void ns3::FlowMonitorHelper::SerializeToXmlFile(std::string fileName, bool enableHistograms, bool enableProbes) [member function]
+    cls.add_method('SerializeToXmlFile', 
+                   'void', 
+                   [param('std::string', 'fileName'), param('bool', 'enableHistograms'), param('bool', 'enableProbes')])
+    return
+
+def register_Ns3Hasher_methods(root_module, cls):
+    ## hash.h (module 'core'): ns3::Hasher::Hasher(ns3::Hasher const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Hasher const &', 'arg0')])
+    ## hash.h (module 'core'): ns3::Hasher::Hasher() [constructor]
+    cls.add_constructor([])
+    ## hash.h (module 'core'): ns3::Hasher::Hasher(ns3::Ptr<ns3::Hash::Implementation> hp) [constructor]
+    cls.add_constructor([param('ns3::Ptr< ns3::Hash::Implementation >', 'hp')])
+    ## hash.h (module 'core'): uint32_t ns3::Hasher::GetHash32(char const * buffer, std::size_t const size) [member function]
+    cls.add_method('GetHash32', 
+                   'uint32_t', 
+                   [param('char const *', 'buffer'), param('std::size_t const', 'size')])
+    ## hash.h (module 'core'): uint32_t ns3::Hasher::GetHash32(std::string const s) [member function]
+    cls.add_method('GetHash32', 
+                   'uint32_t', 
+                   [param('std::string const', 's')])
+    ## hash.h (module 'core'): uint64_t ns3::Hasher::GetHash64(char const * buffer, std::size_t const size) [member function]
+    cls.add_method('GetHash64', 
+                   'uint64_t', 
+                   [param('char const *', 'buffer'), param('std::size_t const', 'size')])
+    ## hash.h (module 'core'): uint64_t ns3::Hasher::GetHash64(std::string const s) [member function]
+    cls.add_method('GetHash64', 
+                   'uint64_t', 
+                   [param('std::string const', 's')])
+    ## hash.h (module 'core'): ns3::Hasher & ns3::Hasher::clear() [member function]
+    cls.add_method('clear', 
+                   'ns3::Hasher &', 
+                   [])
+    return
+
+def register_Ns3Histogram_methods(root_module, cls):
+    ## histogram.h (module 'stats'): ns3::Histogram::Histogram(ns3::Histogram const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Histogram const &', 'arg0')])
+    ## histogram.h (module 'stats'): ns3::Histogram::Histogram(double binWidth) [constructor]
+    cls.add_constructor([param('double', 'binWidth')])
+    ## histogram.h (module 'stats'): ns3::Histogram::Histogram() [constructor]
+    cls.add_constructor([])
+    ## histogram.h (module 'stats'): void ns3::Histogram::AddValue(double value) [member function]
+    cls.add_method('AddValue', 
+                   'void', 
+                   [param('double', 'value')])
+    ## histogram.h (module 'stats'): uint32_t ns3::Histogram::GetBinCount(uint32_t index) [member function]
+    cls.add_method('GetBinCount', 
+                   'uint32_t', 
+                   [param('uint32_t', 'index')])
+    ## histogram.h (module 'stats'): double ns3::Histogram::GetBinEnd(uint32_t index) [member function]
+    cls.add_method('GetBinEnd', 
+                   'double', 
+                   [param('uint32_t', 'index')])
+    ## histogram.h (module 'stats'): double ns3::Histogram::GetBinStart(uint32_t index) [member function]
+    cls.add_method('GetBinStart', 
+                   'double', 
+                   [param('uint32_t', 'index')])
+    ## histogram.h (module 'stats'): double ns3::Histogram::GetBinWidth(uint32_t index) const [member function]
+    cls.add_method('GetBinWidth', 
+                   'double', 
+                   [param('uint32_t', 'index')], 
+                   is_const=True)
+    ## histogram.h (module 'stats'): uint32_t ns3::Histogram::GetNBins() const [member function]
+    cls.add_method('GetNBins', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## histogram.h (module 'stats'): void ns3::Histogram::SerializeToXmlStream(std::ostream & os, uint16_t indent, std::string elementName) const [member function]
+    cls.add_method('SerializeToXmlStream', 
+                   'void', 
+                   [param('std::ostream &', 'os'), param('uint16_t', 'indent'), param('std::string', 'elementName')], 
+                   is_const=True)
+    ## histogram.h (module 'stats'): void ns3::Histogram::SetDefaultBinWidth(double binWidth) [member function]
+    cls.add_method('SetDefaultBinWidth', 
+                   'void', 
+                   [param('double', 'binWidth')])
+    return
+
+def register_Ns3Inet6SocketAddress_methods(root_module, cls):
+    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(ns3::Inet6SocketAddress const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Inet6SocketAddress const &', 'arg0')])
+    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(ns3::Ipv6Address ipv6, uint16_t port) [constructor]
+    cls.add_constructor([param('ns3::Ipv6Address', 'ipv6'), param('uint16_t', 'port')])
+    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(ns3::Ipv6Address ipv6) [constructor]
+    cls.add_constructor([param('ns3::Ipv6Address', 'ipv6')])
+    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(uint16_t port) [constructor]
+    cls.add_constructor([param('uint16_t', 'port')])
+    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(char const * ipv6, uint16_t port) [constructor]
+    cls.add_constructor([param('char const *', 'ipv6'), param('uint16_t', 'port')])
+    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(char const * ipv6) [constructor]
+    cls.add_constructor([param('char const *', 'ipv6')])
+    ## inet6-socket-address.h (module 'network'): static ns3::Inet6SocketAddress ns3::Inet6SocketAddress::ConvertFrom(ns3::Address const & addr) [member function]
+    cls.add_method('ConvertFrom', 
+                   'ns3::Inet6SocketAddress', 
+                   [param('ns3::Address const &', 'addr')], 
+                   is_static=True)
+    ## inet6-socket-address.h (module 'network'): ns3::Ipv6Address ns3::Inet6SocketAddress::GetIpv6() const [member function]
+    cls.add_method('GetIpv6', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   is_const=True)
+    ## inet6-socket-address.h (module 'network'): uint16_t ns3::Inet6SocketAddress::GetPort() const [member function]
+    cls.add_method('GetPort', 
+                   'uint16_t', 
+                   [], 
+                   is_const=True)
+    ## inet6-socket-address.h (module 'network'): static bool ns3::Inet6SocketAddress::IsMatchingType(ns3::Address const & addr) [member function]
+    cls.add_method('IsMatchingType', 
+                   'bool', 
+                   [param('ns3::Address const &', 'addr')], 
+                   is_static=True)
+    ## inet6-socket-address.h (module 'network'): void ns3::Inet6SocketAddress::SetIpv6(ns3::Ipv6Address ipv6) [member function]
+    cls.add_method('SetIpv6', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'ipv6')])
+    ## inet6-socket-address.h (module 'network'): void ns3::Inet6SocketAddress::SetPort(uint16_t port) [member function]
+    cls.add_method('SetPort', 
+                   'void', 
+                   [param('uint16_t', 'port')])
+    return
+
+def register_Ns3InetSocketAddress_methods(root_module, cls):
+    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(ns3::InetSocketAddress const & arg0) [constructor]
+    cls.add_constructor([param('ns3::InetSocketAddress const &', 'arg0')])
+    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(ns3::Ipv4Address ipv4, uint16_t port) [constructor]
+    cls.add_constructor([param('ns3::Ipv4Address', 'ipv4'), param('uint16_t', 'port')])
+    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(ns3::Ipv4Address ipv4) [constructor]
+    cls.add_constructor([param('ns3::Ipv4Address', 'ipv4')])
+    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(uint16_t port) [constructor]
+    cls.add_constructor([param('uint16_t', 'port')])
+    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(char const * ipv4, uint16_t port) [constructor]
+    cls.add_constructor([param('char const *', 'ipv4'), param('uint16_t', 'port')])
+    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(char const * ipv4) [constructor]
+    cls.add_constructor([param('char const *', 'ipv4')])
+    ## inet-socket-address.h (module 'network'): static ns3::InetSocketAddress ns3::InetSocketAddress::ConvertFrom(ns3::Address const & address) [member function]
+    cls.add_method('ConvertFrom', 
+                   'ns3::InetSocketAddress', 
+                   [param('ns3::Address const &', 'address')], 
+                   is_static=True)
+    ## inet-socket-address.h (module 'network'): ns3::Ipv4Address ns3::InetSocketAddress::GetIpv4() const [member function]
+    cls.add_method('GetIpv4', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_const=True)
+    ## inet-socket-address.h (module 'network'): uint16_t ns3::InetSocketAddress::GetPort() const [member function]
+    cls.add_method('GetPort', 
+                   'uint16_t', 
+                   [], 
+                   is_const=True)
+    ## inet-socket-address.h (module 'network'): uint8_t ns3::InetSocketAddress::GetTos() const [member function]
+    cls.add_method('GetTos', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## inet-socket-address.h (module 'network'): static bool ns3::InetSocketAddress::IsMatchingType(ns3::Address const & address) [member function]
+    cls.add_method('IsMatchingType', 
+                   'bool', 
+                   [param('ns3::Address const &', 'address')], 
+                   is_static=True)
+    ## inet-socket-address.h (module 'network'): void ns3::InetSocketAddress::SetIpv4(ns3::Ipv4Address address) [member function]
+    cls.add_method('SetIpv4', 
+                   'void', 
+                   [param('ns3::Ipv4Address', 'address')])
+    ## inet-socket-address.h (module 'network'): void ns3::InetSocketAddress::SetPort(uint16_t port) [member function]
+    cls.add_method('SetPort', 
+                   'void', 
+                   [param('uint16_t', 'port')])
+    ## inet-socket-address.h (module 'network'): void ns3::InetSocketAddress::SetTos(uint8_t tos) [member function]
+    cls.add_method('SetTos', 
+                   'void', 
+                   [param('uint8_t', 'tos')])
+    return
+
+def register_Ns3Ipv4Address_methods(root_module, cls):
+    cls.add_output_stream_operator()
+    cls.add_binary_comparison_operator('==')
+    cls.add_binary_comparison_operator('!=')
+    cls.add_binary_comparison_operator('<')
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Address::Ipv4Address(ns3::Ipv4Address const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv4Address const &', 'arg0')])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Address::Ipv4Address() [constructor]
+    cls.add_constructor([])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Address::Ipv4Address(uint32_t address) [constructor]
+    cls.add_constructor([param('uint32_t', 'address')])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Address::Ipv4Address(char const * address) [constructor]
+    cls.add_constructor([param('char const *', 'address')])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Address ns3::Ipv4Address::CombineMask(ns3::Ipv4Mask const & mask) const [member function]
+    cls.add_method('CombineMask', 
+                   'ns3::Ipv4Address', 
+                   [param('ns3::Ipv4Mask const &', 'mask')], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::ConvertFrom(ns3::Address const & address) [member function]
+    cls.add_method('ConvertFrom', 
+                   'ns3::Ipv4Address', 
+                   [param('ns3::Address const &', 'address')], 
+                   is_static=True)
+    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::Deserialize(uint8_t const * buf) [member function]
+    cls.add_method('Deserialize', 
+                   'ns3::Ipv4Address', 
+                   [param('uint8_t const *', 'buf')], 
+                   is_static=True)
+    ## ipv4-address.h (module 'network'): uint32_t ns3::Ipv4Address::Get() const [member function]
+    cls.add_method('Get', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::GetAny() [member function]
+    cls.add_method('GetAny', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_static=True)
+    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::GetBroadcast() [member function]
+    cls.add_method('GetBroadcast', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_static=True)
+    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::GetLoopback() [member function]
+    cls.add_method('GetLoopback', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_static=True)
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Address ns3::Ipv4Address::GetSubnetDirectedBroadcast(ns3::Ipv4Mask const & mask) const [member function]
+    cls.add_method('GetSubnetDirectedBroadcast', 
+                   'ns3::Ipv4Address', 
+                   [param('ns3::Ipv4Mask const &', 'mask')], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::GetZero() [member function]
+    cls.add_method('GetZero', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_static=True)
+    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsAny() const [member function]
+    cls.add_method('IsAny', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsBroadcast() const [member function]
+    cls.add_method('IsBroadcast', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsInitialized() const [member function]
+    cls.add_method('IsInitialized', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsLocalMulticast() const [member function]
+    cls.add_method('IsLocalMulticast', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsLocalhost() const [member function]
+    cls.add_method('IsLocalhost', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): static bool ns3::Ipv4Address::IsMatchingType(ns3::Address const & address) [member function]
+    cls.add_method('IsMatchingType', 
+                   'bool', 
+                   [param('ns3::Address const &', 'address')], 
+                   is_static=True)
+    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsMulticast() const [member function]
+    cls.add_method('IsMulticast', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsSubnetDirectedBroadcast(ns3::Ipv4Mask const & mask) const [member function]
+    cls.add_method('IsSubnetDirectedBroadcast', 
+                   'bool', 
+                   [param('ns3::Ipv4Mask const &', 'mask')], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): void ns3::Ipv4Address::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): void ns3::Ipv4Address::Serialize(uint8_t * buf) const [member function]
+    cls.add_method('Serialize', 
+                   'void', 
+                   [param('uint8_t *', 'buf')], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): void ns3::Ipv4Address::Set(uint32_t address) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('uint32_t', 'address')])
+    ## ipv4-address.h (module 'network'): void ns3::Ipv4Address::Set(char const * address) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('char const *', 'address')])
+    return
+
+def register_Ns3Ipv4AddressHash_methods(root_module, cls):
+    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressHash::Ipv4AddressHash() [constructor]
+    cls.add_constructor([])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressHash::Ipv4AddressHash(ns3::Ipv4AddressHash const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv4AddressHash const &', 'arg0')])
+    ## ipv4-address.h (module 'network'): size_t ns3::Ipv4AddressHash::operator()(ns3::Ipv4Address const & x) const [member operator]
+    cls.add_method('operator()', 
+                   'size_t', 
+                   [param('ns3::Ipv4Address const &', 'x')], 
+                   custom_name='__call__', is_const=True)
+    return
+
+def register_Ns3Ipv4InterfaceAddress_methods(root_module, cls):
+    cls.add_output_stream_operator()
+    cls.add_binary_comparison_operator('==')
+    cls.add_binary_comparison_operator('!=')
+    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4InterfaceAddress::Ipv4InterfaceAddress() [constructor]
+    cls.add_constructor([])
+    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4InterfaceAddress::Ipv4InterfaceAddress(ns3::Ipv4Address local, ns3::Ipv4Mask mask) [constructor]
+    cls.add_constructor([param('ns3::Ipv4Address', 'local'), param('ns3::Ipv4Mask', 'mask')])
+    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4InterfaceAddress::Ipv4InterfaceAddress(ns3::Ipv4InterfaceAddress const & o) [constructor]
+    cls.add_constructor([param('ns3::Ipv4InterfaceAddress const &', 'o')])
+    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4InterfaceAddress::GetAddress() const [member function]
+    cls.add_method('GetAddress', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_const=True)
+    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4InterfaceAddress::GetBroadcast() const [member function]
+    cls.add_method('GetBroadcast', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_const=True)
+    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4InterfaceAddress::GetLocal() const [member function]
+    cls.add_method('GetLocal', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_const=True)
+    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4Mask ns3::Ipv4InterfaceAddress::GetMask() const [member function]
+    cls.add_method('GetMask', 
+                   'ns3::Ipv4Mask', 
+                   [], 
+                   is_const=True)
+    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e ns3::Ipv4InterfaceAddress::GetScope() const [member function]
+    cls.add_method('GetScope', 
+                   'ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e', 
+                   [], 
+                   is_const=True)
+    ## ipv4-interface-address.h (module 'internet'): bool ns3::Ipv4InterfaceAddress::IsInSameSubnet(ns3::Ipv4Address const b) const [member function]
+    cls.add_method('IsInSameSubnet', 
+                   'bool', 
+                   [param('ns3::Ipv4Address const', 'b')], 
+                   is_const=True)
+    ## ipv4-interface-address.h (module 'internet'): bool ns3::Ipv4InterfaceAddress::IsSecondary() const [member function]
+    cls.add_method('IsSecondary', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv4-interface-address.h (module 'internet'): void ns3::Ipv4InterfaceAddress::SetAddress(ns3::Ipv4Address address) [member function]
+    cls.add_method('SetAddress', 
+                   'void', 
+                   [param('ns3::Ipv4Address', 'address')])
+    ## ipv4-interface-address.h (module 'internet'): void ns3::Ipv4InterfaceAddress::SetBroadcast(ns3::Ipv4Address broadcast) [member function]
+    cls.add_method('SetBroadcast', 
+                   'void', 
+                   [param('ns3::Ipv4Address', 'broadcast')])
+    ## ipv4-interface-address.h (module 'internet'): void ns3::Ipv4InterfaceAddress::SetLocal(ns3::Ipv4Address local) [member function]
+    cls.add_method('SetLocal', 
+                   'void', 
+                   [param('ns3::Ipv4Address', 'local')])
+    ## ipv4-interface-address.h (module 'internet'): void ns3::Ipv4InterfaceAddress::SetMask(ns3::Ipv4Mask mask) [member function]
+    cls.add_method('SetMask', 
+                   'void', 
+                   [param('ns3::Ipv4Mask', 'mask')])
+    ## ipv4-interface-address.h (module 'internet'): void ns3::Ipv4InterfaceAddress::SetPrimary() [member function]
+    cls.add_method('SetPrimary', 
+                   'void', 
+                   [])
+    ## ipv4-interface-address.h (module 'internet'): void ns3::Ipv4InterfaceAddress::SetScope(ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e scope) [member function]
+    cls.add_method('SetScope', 
+                   'void', 
+                   [param('ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e', 'scope')])
+    ## ipv4-interface-address.h (module 'internet'): void ns3::Ipv4InterfaceAddress::SetSecondary() [member function]
+    cls.add_method('SetSecondary', 
+                   'void', 
+                   [])
+    return
+
+def register_Ns3Ipv4Mask_methods(root_module, cls):
+    cls.add_output_stream_operator()
+    cls.add_binary_comparison_operator('==')
+    cls.add_binary_comparison_operator('!=')
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask::Ipv4Mask(ns3::Ipv4Mask const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv4Mask const &', 'arg0')])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask::Ipv4Mask() [constructor]
+    cls.add_constructor([])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask::Ipv4Mask(uint32_t mask) [constructor]
+    cls.add_constructor([param('uint32_t', 'mask')])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask::Ipv4Mask(char const * mask) [constructor]
+    cls.add_constructor([param('char const *', 'mask')])
+    ## ipv4-address.h (module 'network'): uint32_t ns3::Ipv4Mask::Get() const [member function]
+    cls.add_method('Get', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): uint32_t ns3::Ipv4Mask::GetInverse() const [member function]
+    cls.add_method('GetInverse', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): static ns3::Ipv4Mask ns3::Ipv4Mask::GetLoopback() [member function]
+    cls.add_method('GetLoopback', 
+                   'ns3::Ipv4Mask', 
+                   [], 
+                   is_static=True)
+    ## ipv4-address.h (module 'network'): static ns3::Ipv4Mask ns3::Ipv4Mask::GetOnes() [member function]
+    cls.add_method('GetOnes', 
+                   'ns3::Ipv4Mask', 
+                   [], 
+                   is_static=True)
+    ## ipv4-address.h (module 'network'): uint16_t ns3::Ipv4Mask::GetPrefixLength() const [member function]
+    cls.add_method('GetPrefixLength', 
+                   'uint16_t', 
+                   [], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): static ns3::Ipv4Mask ns3::Ipv4Mask::GetZero() [member function]
+    cls.add_method('GetZero', 
+                   'ns3::Ipv4Mask', 
+                   [], 
+                   is_static=True)
+    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Mask::IsMatch(ns3::Ipv4Address a, ns3::Ipv4Address b) const [member function]
+    cls.add_method('IsMatch', 
+                   'bool', 
+                   [param('ns3::Ipv4Address', 'a'), param('ns3::Ipv4Address', 'b')], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): void ns3::Ipv4Mask::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): void ns3::Ipv4Mask::Set(uint32_t mask) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('uint32_t', 'mask')])
+    return
+
+def register_Ns3Ipv6Address_methods(root_module, cls):
+    cls.add_output_stream_operator()
+    cls.add_binary_comparison_operator('==')
+    cls.add_binary_comparison_operator('!=')
+    cls.add_binary_comparison_operator('<')
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address() [constructor]
+    cls.add_constructor([])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address(char const * address) [constructor]
+    cls.add_constructor([param('char const *', 'address')])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address(uint8_t * address) [constructor]
+    cls.add_constructor([param('uint8_t *', 'address')])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address(ns3::Ipv6Address const & addr) [constructor]
+    cls.add_constructor([param('ns3::Ipv6Address const &', 'addr')])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address(ns3::Ipv6Address const * addr) [constructor]
+    cls.add_constructor([param('ns3::Ipv6Address const *', 'addr')])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6Address::CombinePrefix(ns3::Ipv6Prefix const & prefix) const [member function]
+    cls.add_method('CombinePrefix', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Ipv6Prefix const &', 'prefix')], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::ConvertFrom(ns3::Address const & address) [member function]
+    cls.add_method('ConvertFrom', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Address const &', 'address')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::Deserialize(uint8_t const * buf) [member function]
+    cls.add_method('Deserialize', 
+                   'ns3::Ipv6Address', 
+                   [param('uint8_t const *', 'buf')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetAllHostsMulticast() [member function]
+    cls.add_method('GetAllHostsMulticast', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetAllNodesMulticast() [member function]
+    cls.add_method('GetAllNodesMulticast', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetAllRoutersMulticast() [member function]
+    cls.add_method('GetAllRoutersMulticast', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetAny() [member function]
+    cls.add_method('GetAny', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): void ns3::Ipv6Address::GetBytes(uint8_t * buf) const [member function]
+    cls.add_method('GetBytes', 
+                   'void', 
+                   [param('uint8_t *', 'buf')], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): ns3::Ipv4Address ns3::Ipv6Address::GetIpv4MappedAddress() const [member function]
+    cls.add_method('GetIpv4MappedAddress', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetLoopback() [member function]
+    cls.add_method('GetLoopback', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetOnes() [member function]
+    cls.add_method('GetOnes', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetZero() [member function]
+    cls.add_method('GetZero', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::HasPrefix(ns3::Ipv6Prefix const & prefix) const [member function]
+    cls.add_method('HasPrefix', 
+                   'bool', 
+                   [param('ns3::Ipv6Prefix const &', 'prefix')], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsAllNodesMulticast() const [member function]
+    cls.add_method('IsAllNodesMulticast', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsAllRoutersMulticast() const [member function]
+    cls.add_method('IsAllRoutersMulticast', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsAny() const [member function]
+    cls.add_method('IsAny', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsDocumentation() const [member function]
+    cls.add_method('IsDocumentation', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsInitialized() const [member function]
+    cls.add_method('IsInitialized', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsIpv4MappedAddress() const [member function]
+    cls.add_method('IsIpv4MappedAddress', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsLinkLocal() const [member function]
+    cls.add_method('IsLinkLocal', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsLinkLocalMulticast() const [member function]
+    cls.add_method('IsLinkLocalMulticast', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsLocalhost() const [member function]
+    cls.add_method('IsLocalhost', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): static bool ns3::Ipv6Address::IsMatchingType(ns3::Address const & address) [member function]
+    cls.add_method('IsMatchingType', 
+                   'bool', 
+                   [param('ns3::Address const &', 'address')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsMulticast() const [member function]
+    cls.add_method('IsMulticast', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsSolicitedMulticast() const [member function]
+    cls.add_method('IsSolicitedMulticast', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Address addr, ns3::Ipv6Address prefix) [member function]
+    cls.add_method('MakeAutoconfiguredAddress', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Address addr, ns3::Ipv6Prefix prefix) [member function]
+    cls.add_method('MakeAutoconfiguredAddress', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Address', 'addr'), param('ns3::Ipv6Prefix', 'prefix')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Mac16Address addr, ns3::Ipv6Address prefix) [member function]
+    cls.add_method('MakeAutoconfiguredAddress', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Mac16Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Mac48Address addr, ns3::Ipv6Address prefix) [member function]
+    cls.add_method('MakeAutoconfiguredAddress', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Mac48Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Mac64Address addr, ns3::Ipv6Address prefix) [member function]
+    cls.add_method('MakeAutoconfiguredAddress', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Mac64Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Mac8Address addr, ns3::Ipv6Address prefix) [member function]
+    cls.add_method('MakeAutoconfiguredAddress', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Mac8Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Address mac) [member function]
+    cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Address', 'mac')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Mac16Address mac) [member function]
+    cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Mac16Address', 'mac')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Mac48Address mac) [member function]
+    cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Mac48Address', 'mac')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Mac64Address mac) [member function]
+    cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Mac64Address', 'mac')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Mac8Address mac) [member function]
+    cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Mac8Address', 'mac')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeIpv4MappedAddress(ns3::Ipv4Address addr) [member function]
+    cls.add_method('MakeIpv4MappedAddress', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Ipv4Address', 'addr')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeSolicitedAddress(ns3::Ipv6Address addr) [member function]
+    cls.add_method('MakeSolicitedAddress', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Ipv6Address', 'addr')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): void ns3::Ipv6Address::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): void ns3::Ipv6Address::Serialize(uint8_t * buf) const [member function]
+    cls.add_method('Serialize', 
+                   'void', 
+                   [param('uint8_t *', 'buf')], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): void ns3::Ipv6Address::Set(char const * address) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('char const *', 'address')])
+    ## ipv6-address.h (module 'network'): void ns3::Ipv6Address::Set(uint8_t * address) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('uint8_t *', 'address')])
+    return
+
+def register_Ns3Ipv6AddressHash_methods(root_module, cls):
+    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressHash::Ipv6AddressHash() [constructor]
+    cls.add_constructor([])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressHash::Ipv6AddressHash(ns3::Ipv6AddressHash const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv6AddressHash const &', 'arg0')])
+    ## ipv6-address.h (module 'network'): size_t ns3::Ipv6AddressHash::operator()(ns3::Ipv6Address const & x) const [member operator]
+    cls.add_method('operator()', 
+                   'size_t', 
+                   [param('ns3::Ipv6Address const &', 'x')], 
+                   custom_name='__call__', is_const=True)
+    return
+
+def register_Ns3Ipv6InterfaceAddress_methods(root_module, cls):
+    cls.add_output_stream_operator()
+    cls.add_binary_comparison_operator('==')
+    cls.add_binary_comparison_operator('!=')
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress::Ipv6InterfaceAddress() [constructor]
+    cls.add_constructor([])
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress::Ipv6InterfaceAddress(ns3::Ipv6Address address) [constructor]
+    cls.add_constructor([param('ns3::Ipv6Address', 'address')])
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress::Ipv6InterfaceAddress(ns3::Ipv6Address address, ns3::Ipv6Prefix prefix) [constructor]
+    cls.add_constructor([param('ns3::Ipv6Address', 'address'), param('ns3::Ipv6Prefix', 'prefix')])
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress::Ipv6InterfaceAddress(ns3::Ipv6Address address, ns3::Ipv6Prefix prefix, bool onLink) [constructor]
+    cls.add_constructor([param('ns3::Ipv6Address', 'address'), param('ns3::Ipv6Prefix', 'prefix'), param('bool', 'onLink')])
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress::Ipv6InterfaceAddress(ns3::Ipv6InterfaceAddress const & o) [constructor]
+    cls.add_constructor([param('ns3::Ipv6InterfaceAddress const &', 'o')])
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6Address ns3::Ipv6InterfaceAddress::GetAddress() const [member function]
+    cls.add_method('GetAddress', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   is_const=True)
+    ## ipv6-interface-address.h (module 'internet'): uint32_t ns3::Ipv6InterfaceAddress::GetNsDadUid() const [member function]
+    cls.add_method('GetNsDadUid', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## ipv6-interface-address.h (module 'internet'): bool ns3::Ipv6InterfaceAddress::GetOnLink() const [member function]
+    cls.add_method('GetOnLink', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6Prefix ns3::Ipv6InterfaceAddress::GetPrefix() const [member function]
+    cls.add_method('GetPrefix', 
+                   'ns3::Ipv6Prefix', 
+                   [], 
+                   is_const=True)
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress::Scope_e ns3::Ipv6InterfaceAddress::GetScope() const [member function]
+    cls.add_method('GetScope', 
+                   'ns3::Ipv6InterfaceAddress::Scope_e', 
+                   [], 
+                   is_const=True)
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress::State_e ns3::Ipv6InterfaceAddress::GetState() const [member function]
+    cls.add_method('GetState', 
+                   'ns3::Ipv6InterfaceAddress::State_e', 
+                   [], 
+                   is_const=True)
+    ## ipv6-interface-address.h (module 'internet'): bool ns3::Ipv6InterfaceAddress::IsInSameSubnet(ns3::Ipv6Address b) const [member function]
+    cls.add_method('IsInSameSubnet', 
+                   'bool', 
+                   [param('ns3::Ipv6Address', 'b')], 
+                   is_const=True)
+    ## ipv6-interface-address.h (module 'internet'): void ns3::Ipv6InterfaceAddress::SetAddress(ns3::Ipv6Address address) [member function]
+    cls.add_method('SetAddress', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'address')])
+    ## ipv6-interface-address.h (module 'internet'): void ns3::Ipv6InterfaceAddress::SetNsDadUid(uint32_t uid) [member function]
+    cls.add_method('SetNsDadUid', 
+                   'void', 
+                   [param('uint32_t', 'uid')])
+    ## ipv6-interface-address.h (module 'internet'): void ns3::Ipv6InterfaceAddress::SetOnLink(bool onLink) [member function]
+    cls.add_method('SetOnLink', 
+                   'void', 
+                   [param('bool', 'onLink')])
+    ## ipv6-interface-address.h (module 'internet'): void ns3::Ipv6InterfaceAddress::SetScope(ns3::Ipv6InterfaceAddress::Scope_e scope) [member function]
+    cls.add_method('SetScope', 
+                   'void', 
+                   [param('ns3::Ipv6InterfaceAddress::Scope_e', 'scope')])
+    ## ipv6-interface-address.h (module 'internet'): void ns3::Ipv6InterfaceAddress::SetState(ns3::Ipv6InterfaceAddress::State_e state) [member function]
+    cls.add_method('SetState', 
+                   'void', 
+                   [param('ns3::Ipv6InterfaceAddress::State_e', 'state')])
+    return
+
+def register_Ns3Ipv6Prefix_methods(root_module, cls):
+    cls.add_output_stream_operator()
+    cls.add_binary_comparison_operator('==')
+    cls.add_binary_comparison_operator('!=')
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix() [constructor]
+    cls.add_constructor([])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(uint8_t * prefix) [constructor]
+    cls.add_constructor([param('uint8_t *', 'prefix')])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(char const * prefix) [constructor]
+    cls.add_constructor([param('char const *', 'prefix')])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(uint8_t * prefix, uint8_t prefixLength) [constructor]
+    cls.add_constructor([param('uint8_t *', 'prefix'), param('uint8_t', 'prefixLength')])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(char const * prefix, uint8_t prefixLength) [constructor]
+    cls.add_constructor([param('char const *', 'prefix'), param('uint8_t', 'prefixLength')])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(uint8_t prefix) [constructor]
+    cls.add_constructor([param('uint8_t', 'prefix')])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(ns3::Ipv6Prefix const & prefix) [constructor]
+    cls.add_constructor([param('ns3::Ipv6Prefix const &', 'prefix')])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(ns3::Ipv6Prefix const * prefix) [constructor]
+    cls.add_constructor([param('ns3::Ipv6Prefix const *', 'prefix')])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6Prefix::ConvertToIpv6Address() const [member function]
+    cls.add_method('ConvertToIpv6Address', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): void ns3::Ipv6Prefix::GetBytes(uint8_t * buf) const [member function]
+    cls.add_method('GetBytes', 
+                   'void', 
+                   [param('uint8_t *', 'buf')], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Prefix ns3::Ipv6Prefix::GetLoopback() [member function]
+    cls.add_method('GetLoopback', 
+                   'ns3::Ipv6Prefix', 
+                   [], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): uint8_t ns3::Ipv6Prefix::GetMinimumPrefixLength() const [member function]
+    cls.add_method('GetMinimumPrefixLength', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Prefix ns3::Ipv6Prefix::GetOnes() [member function]
+    cls.add_method('GetOnes', 
+                   'ns3::Ipv6Prefix', 
+                   [], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): uint8_t ns3::Ipv6Prefix::GetPrefixLength() const [member function]
+    cls.add_method('GetPrefixLength', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Prefix ns3::Ipv6Prefix::GetZero() [member function]
+    cls.add_method('GetZero', 
+                   'ns3::Ipv6Prefix', 
+                   [], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Prefix::IsMatch(ns3::Ipv6Address a, ns3::Ipv6Address b) const [member function]
+    cls.add_method('IsMatch', 
+                   'bool', 
+                   [param('ns3::Ipv6Address', 'a'), param('ns3::Ipv6Address', 'b')], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): void ns3::Ipv6Prefix::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): void ns3::Ipv6Prefix::SetPrefixLength(uint8_t prefixLength) [member function]
+    cls.add_method('SetPrefixLength', 
+                   'void', 
+                   [param('uint8_t', 'prefixLength')])
+    return
+
+def register_Ns3LogComponent_methods(root_module, cls):
+    ## log.h (module 'core'): ns3::LogComponent::LogComponent(ns3::LogComponent const & arg0) [constructor]
+    cls.add_constructor([param('ns3::LogComponent const &', 'arg0')])
+    ## log.h (module 'core'): ns3::LogComponent::LogComponent(std::string const & name, std::string const & file, ns3::LogLevel const mask=::ns3::LogLevel::LOG_NONE) [constructor]
+    cls.add_constructor([param('std::string const &', 'name'), param('std::string const &', 'file'), param('ns3::LogLevel const', 'mask', default_value='::ns3::LogLevel::LOG_NONE')])
+    ## log.h (module 'core'): void ns3::LogComponent::Disable(ns3::LogLevel const level) [member function]
+    cls.add_method('Disable', 
+                   'void', 
+                   [param('ns3::LogLevel const', 'level')])
+    ## log.h (module 'core'): void ns3::LogComponent::Enable(ns3::LogLevel const level) [member function]
+    cls.add_method('Enable', 
+                   'void', 
+                   [param('ns3::LogLevel const', 'level')])
+    ## log.h (module 'core'): std::string ns3::LogComponent::File() const [member function]
+    cls.add_method('File', 
+                   'std::string', 
+                   [], 
+                   is_const=True)
+    ## log.h (module 'core'): static ns3::LogComponent::ComponentList * ns3::LogComponent::GetComponentList() [member function]
+    cls.add_method('GetComponentList', 
+                   'ns3::LogComponent::ComponentList *', 
+                   [], 
+                   is_static=True)
+    ## log.h (module 'core'): static std::string ns3::LogComponent::GetLevelLabel(ns3::LogLevel const level) [member function]
+    cls.add_method('GetLevelLabel', 
+                   'std::string', 
+                   [param('ns3::LogLevel const', 'level')], 
+                   is_static=True)
+    ## log.h (module 'core'): bool ns3::LogComponent::IsEnabled(ns3::LogLevel const level) const [member function]
+    cls.add_method('IsEnabled', 
+                   'bool', 
+                   [param('ns3::LogLevel const', 'level')], 
+                   is_const=True)
+    ## log.h (module 'core'): bool ns3::LogComponent::IsNoneEnabled() const [member function]
+    cls.add_method('IsNoneEnabled', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## log.h (module 'core'): char const * ns3::LogComponent::Name() const [member function]
+    cls.add_method('Name', 
+                   'char const *', 
+                   [], 
+                   is_const=True)
+    ## log.h (module 'core'): void ns3::LogComponent::SetMask(ns3::LogLevel const level) [member function]
+    cls.add_method('SetMask', 
+                   'void', 
+                   [param('ns3::LogLevel const', 'level')])
+    return
+
+def register_Ns3Mac48Address_methods(root_module, cls):
+    cls.add_binary_comparison_operator('==')
+    cls.add_binary_comparison_operator('!=')
+    cls.add_binary_comparison_operator('<')
+    cls.add_output_stream_operator()
+    ## mac48-address.h (module 'network'): ns3::Mac48Address::Mac48Address(ns3::Mac48Address const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Mac48Address const &', 'arg0')])
+    ## mac48-address.h (module 'network'): ns3::Mac48Address::Mac48Address() [constructor]
+    cls.add_constructor([])
+    ## mac48-address.h (module 'network'): ns3::Mac48Address::Mac48Address(char const * str) [constructor]
+    cls.add_constructor([param('char const *', 'str')])
+    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::Allocate() [member function]
+    cls.add_method('Allocate', 
+                   'ns3::Mac48Address', 
+                   [], 
+                   is_static=True)
+    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::ConvertFrom(ns3::Address const & address) [member function]
+    cls.add_method('ConvertFrom', 
+                   'ns3::Mac48Address', 
+                   [param('ns3::Address const &', 'address')], 
+                   is_static=True)
+    ## mac48-address.h (module 'network'): void ns3::Mac48Address::CopyFrom(uint8_t const * buffer) [member function]
+    cls.add_method('CopyFrom', 
+                   'void', 
+                   [param('uint8_t const *', 'buffer')])
+    ## mac48-address.h (module 'network'): void ns3::Mac48Address::CopyTo(uint8_t * buffer) const [member function]
+    cls.add_method('CopyTo', 
+                   'void', 
+                   [param('uint8_t *', 'buffer')], 
+                   is_const=True)
+    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetBroadcast() [member function]
+    cls.add_method('GetBroadcast', 
+                   'ns3::Mac48Address', 
+                   [], 
+                   is_static=True)
+    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetMulticast(ns3::Ipv4Address address) [member function]
+    cls.add_method('GetMulticast', 
+                   'ns3::Mac48Address', 
+                   [param('ns3::Ipv4Address', 'address')], 
+                   is_static=True)
+    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetMulticast(ns3::Ipv6Address address) [member function]
+    cls.add_method('GetMulticast', 
+                   'ns3::Mac48Address', 
+                   [param('ns3::Ipv6Address', 'address')], 
+                   is_static=True)
+    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetMulticast6Prefix() [member function]
+    cls.add_method('GetMulticast6Prefix', 
+                   'ns3::Mac48Address', 
+                   [], 
+                   is_static=True)
+    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetMulticastPrefix() [member function]
+    cls.add_method('GetMulticastPrefix', 
+                   'ns3::Mac48Address', 
+                   [], 
+                   is_static=True)
+    ## mac48-address.h (module 'network'): bool ns3::Mac48Address::IsBroadcast() const [member function]
+    cls.add_method('IsBroadcast', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## mac48-address.h (module 'network'): bool ns3::Mac48Address::IsGroup() const [member function]
+    cls.add_method('IsGroup', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## mac48-address.h (module 'network'): static bool ns3::Mac48Address::IsMatchingType(ns3::Address const & address) [member function]
+    cls.add_method('IsMatchingType', 
+                   'bool', 
+                   [param('ns3::Address const &', 'address')], 
+                   is_static=True)
+    return
+
+def register_Ns3Mac8Address_methods(root_module, cls):
+    cls.add_binary_comparison_operator('<')
+    cls.add_binary_comparison_operator('==')
+    cls.add_binary_comparison_operator('!=')
+    cls.add_output_stream_operator()
+    ## mac8-address.h (module 'network'): ns3::Mac8Address::Mac8Address(ns3::Mac8Address const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Mac8Address const &', 'arg0')])
+    ## mac8-address.h (module 'network'): ns3::Mac8Address::Mac8Address() [constructor]
+    cls.add_constructor([])
+    ## mac8-address.h (module 'network'): ns3::Mac8Address::Mac8Address(uint8_t addr) [constructor]
+    cls.add_constructor([param('uint8_t', 'addr')])
+    ## mac8-address.h (module 'network'): static ns3::Mac8Address ns3::Mac8Address::Allocate() [member function]
+    cls.add_method('Allocate', 
+                   'ns3::Mac8Address', 
+                   [], 
+                   is_static=True)
+    ## mac8-address.h (module 'network'): static ns3::Mac8Address ns3::Mac8Address::ConvertFrom(ns3::Address const & address) [member function]
+    cls.add_method('ConvertFrom', 
+                   'ns3::Mac8Address', 
+                   [param('ns3::Address const &', 'address')], 
+                   is_static=True)
+    ## mac8-address.h (module 'network'): void ns3::Mac8Address::CopyFrom(uint8_t const * pBuffer) [member function]
+    cls.add_method('CopyFrom', 
+                   'void', 
+                   [param('uint8_t const *', 'pBuffer')])
+    ## mac8-address.h (module 'network'): void ns3::Mac8Address::CopyTo(uint8_t * pBuffer) const [member function]
+    cls.add_method('CopyTo', 
+                   'void', 
+                   [param('uint8_t *', 'pBuffer')], 
+                   is_const=True)
+    ## mac8-address.h (module 'network'): static ns3::Mac8Address ns3::Mac8Address::GetBroadcast() [member function]
+    cls.add_method('GetBroadcast', 
+                   'ns3::Mac8Address', 
+                   [], 
+                   is_static=True)
+    ## mac8-address.h (module 'network'): static bool ns3::Mac8Address::IsMatchingType(ns3::Address const & address) [member function]
+    cls.add_method('IsMatchingType', 
+                   'bool', 
+                   [param('ns3::Address const &', 'address')], 
+                   is_static=True)
+    return
+
+def register_Ns3NodeContainer_methods(root_module, cls):
+    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & arg0) [constructor]
+    cls.add_constructor([param('ns3::NodeContainer const &', 'arg0')])
+    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer() [constructor]
+    cls.add_constructor([])
+    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::Ptr<ns3::Node> node) [constructor]
+    cls.add_constructor([param('ns3::Ptr< ns3::Node >', 'node')])
+    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(std::string nodeName) [constructor]
+    cls.add_constructor([param('std::string', 'nodeName')])
+    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(uint32_t n, uint32_t systemId=0) [constructor]
+    cls.add_constructor([param('uint32_t', 'n'), param('uint32_t', 'systemId', default_value='0')])
+    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & a, ns3::NodeContainer const & b) [constructor]
+    cls.add_constructor([param('ns3::NodeContainer const &', 'a'), param('ns3::NodeContainer const &', 'b')])
+    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & a, ns3::NodeContainer const & b, ns3::NodeContainer const & c) [constructor]
+    cls.add_constructor([param('ns3::NodeContainer const &', 'a'), param('ns3::NodeContainer const &', 'b'), param('ns3::NodeContainer const &', 'c')])
+    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & a, ns3::NodeContainer const & b, ns3::NodeContainer const & c, ns3::NodeContainer const & d) [constructor]
+    cls.add_constructor([param('ns3::NodeContainer const &', 'a'), param('ns3::NodeContainer const &', 'b'), param('ns3::NodeContainer const &', 'c'), param('ns3::NodeContainer const &', 'd')])
+    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & a, ns3::NodeContainer const & b, ns3::NodeContainer const & c, ns3::NodeContainer const & d, ns3::NodeContainer const & e) [constructor]
+    cls.add_constructor([param('ns3::NodeContainer const &', 'a'), param('ns3::NodeContainer const &', 'b'), param('ns3::NodeContainer const &', 'c'), param('ns3::NodeContainer const &', 'd'), param('ns3::NodeContainer const &', 'e')])
+    ## node-container.h (module 'network'): void ns3::NodeContainer::Add(ns3::NodeContainer other) [member function]
+    cls.add_method('Add', 
+                   'void', 
+                   [param('ns3::NodeContainer', 'other')])
+    ## node-container.h (module 'network'): void ns3::NodeContainer::Add(ns3::Ptr<ns3::Node> node) [member function]
+    cls.add_method('Add', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Node >', 'node')])
+    ## node-container.h (module 'network'): void ns3::NodeContainer::Add(std::string nodeName) [member function]
+    cls.add_method('Add', 
+                   'void', 
+                   [param('std::string', 'nodeName')])
+    ## node-container.h (module 'network'): ns3::NodeContainer::Iterator ns3::NodeContainer::Begin() const [member function]
+    cls.add_method('Begin', 
+                   'ns3::NodeContainer::Iterator', 
+                   [], 
+                   is_const=True)
+    ## node-container.h (module 'network'): bool ns3::NodeContainer::Contains(uint32_t id) const [member function]
+    cls.add_method('Contains', 
+                   'bool', 
+                   [param('uint32_t', 'id')], 
+                   is_const=True)
+    ## node-container.h (module 'network'): void ns3::NodeContainer::Create(uint32_t n) [member function]
+    cls.add_method('Create', 
+                   'void', 
+                   [param('uint32_t', 'n')])
+    ## node-container.h (module 'network'): void ns3::NodeContainer::Create(uint32_t n, uint32_t systemId) [member function]
+    cls.add_method('Create', 
+                   'void', 
+                   [param('uint32_t', 'n'), param('uint32_t', 'systemId')])
+    ## node-container.h (module 'network'): ns3::NodeContainer::Iterator ns3::NodeContainer::End() const [member function]
+    cls.add_method('End', 
+                   'ns3::NodeContainer::Iterator', 
+                   [], 
+                   is_const=True)
+    ## node-container.h (module 'network'): ns3::Ptr<ns3::Node> ns3::NodeContainer::Get(uint32_t i) const [member function]
+    cls.add_method('Get', 
+                   'ns3::Ptr< ns3::Node >', 
+                   [param('uint32_t', 'i')], 
+                   is_const=True)
+    ## node-container.h (module 'network'): static ns3::NodeContainer ns3::NodeContainer::GetGlobal() [member function]
+    cls.add_method('GetGlobal', 
+                   'ns3::NodeContainer', 
+                   [], 
+                   is_static=True)
+    ## node-container.h (module 'network'): uint32_t ns3::NodeContainer::GetN() const [member function]
+    cls.add_method('GetN', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    return
+
+def register_Ns3ObjectBase_methods(root_module, cls):
+    ## object-base.h (module 'core'): ns3::ObjectBase::ObjectBase() [constructor]
+    cls.add_constructor([])
+    ## object-base.h (module 'core'): ns3::ObjectBase::ObjectBase(ns3::ObjectBase const & arg0) [constructor]
+    cls.add_constructor([param('ns3::ObjectBase const &', 'arg0')])
+    ## object-base.h (module 'core'): void ns3::ObjectBase::GetAttribute(std::string name, ns3::AttributeValue & value) const [member function]
+    cls.add_method('GetAttribute', 
+                   'void', 
+                   [param('std::string', 'name'), param('ns3::AttributeValue &', 'value')], 
+                   is_const=True)
+    ## object-base.h (module 'core'): bool ns3::ObjectBase::GetAttributeFailSafe(std::string name, ns3::AttributeValue & value) const [member function]
+    cls.add_method('GetAttributeFailSafe', 
+                   'bool', 
+                   [param('std::string', 'name'), param('ns3::AttributeValue &', 'value')], 
+                   is_const=True)
+    ## object-base.h (module 'core'): ns3::TypeId ns3::ObjectBase::GetInstanceTypeId() const [member function]
+    cls.add_method('GetInstanceTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## object-base.h (module 'core'): static ns3::TypeId ns3::ObjectBase::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## object-base.h (module 'core'): void ns3::ObjectBase::SetAttribute(std::string name, ns3::AttributeValue const & value) [member function]
+    cls.add_method('SetAttribute', 
+                   'void', 
+                   [param('std::string', 'name'), param('ns3::AttributeValue const &', 'value')])
+    ## object-base.h (module 'core'): bool ns3::ObjectBase::SetAttributeFailSafe(std::string name, ns3::AttributeValue const & value) [member function]
+    cls.add_method('SetAttributeFailSafe', 
+                   'bool', 
+                   [param('std::string', 'name'), param('ns3::AttributeValue const &', 'value')])
+    ## object-base.h (module 'core'): bool ns3::ObjectBase::TraceConnect(std::string name, std::string context, ns3::CallbackBase const & cb) [member function]
+    cls.add_method('TraceConnect', 
+                   'bool', 
+                   [param('std::string', 'name'), param('std::string', 'context'), param('ns3::CallbackBase const &', 'cb')])
+    ## object-base.h (module 'core'): bool ns3::ObjectBase::TraceConnectWithoutContext(std::string name, ns3::CallbackBase const & cb) [member function]
+    cls.add_method('TraceConnectWithoutContext', 
+                   'bool', 
+                   [param('std::string', 'name'), param('ns3::CallbackBase const &', 'cb')])
+    ## object-base.h (module 'core'): bool ns3::ObjectBase::TraceDisconnect(std::string name, std::string context, ns3::CallbackBase const & cb) [member function]
+    cls.add_method('TraceDisconnect', 
+                   'bool', 
+                   [param('std::string', 'name'), param('std::string', 'context'), param('ns3::CallbackBase const &', 'cb')])
+    ## object-base.h (module 'core'): bool ns3::ObjectBase::TraceDisconnectWithoutContext(std::string name, ns3::CallbackBase const & cb) [member function]
+    cls.add_method('TraceDisconnectWithoutContext', 
+                   'bool', 
+                   [param('std::string', 'name'), param('ns3::CallbackBase const &', 'cb')])
+    ## object-base.h (module 'core'): void ns3::ObjectBase::ConstructSelf(ns3::AttributeConstructionList const & attributes) [member function]
+    cls.add_method('ConstructSelf', 
+                   'void', 
+                   [param('ns3::AttributeConstructionList const &', 'attributes')], 
+                   visibility='protected')
+    ## object-base.h (module 'core'): void ns3::ObjectBase::NotifyConstructionCompleted() [member function]
+    cls.add_method('NotifyConstructionCompleted', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    return
+
+def register_Ns3ObjectDeleter_methods(root_module, cls):
+    ## object.h (module 'core'): ns3::ObjectDeleter::ObjectDeleter() [constructor]
+    cls.add_constructor([])
+    ## object.h (module 'core'): ns3::ObjectDeleter::ObjectDeleter(ns3::ObjectDeleter const & arg0) [constructor]
+    cls.add_constructor([param('ns3::ObjectDeleter const &', 'arg0')])
+    ## object.h (module 'core'): static void ns3::ObjectDeleter::Delete(ns3::Object * object) [member function]
+    cls.add_method('Delete', 
+                   'void', 
+                   [param('ns3::Object *', 'object')], 
+                   is_static=True)
+    return
+
+def register_Ns3ObjectFactory_methods(root_module, cls):
+    cls.add_output_stream_operator()
+    ## object-factory.h (module 'core'): ns3::ObjectFactory::ObjectFactory(ns3::ObjectFactory const & arg0) [constructor]
+    cls.add_constructor([param('ns3::ObjectFactory const &', 'arg0')])
+    ## object-factory.h (module 'core'): ns3::ObjectFactory::ObjectFactory() [constructor]
+    cls.add_constructor([])
+    ## object-factory.h (module 'core'): ns3::ObjectFactory::ObjectFactory(std::string const & typeId) [constructor]
+    cls.add_constructor([param('std::string const &', 'typeId')])
+    ## object-factory.h (module 'core'): ns3::Ptr<ns3::Object> ns3::ObjectFactory::Create() const [member function]
+    cls.add_method('Create', 
+                   'ns3::Ptr< ns3::Object >', 
+                   [], 
+                   is_const=True)
+    ## object-factory.h (module 'core'): ns3::TypeId ns3::ObjectFactory::GetTypeId() const [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True)
+    ## object-factory.h (module 'core'): bool ns3::ObjectFactory::IsTypeIdSet() const [member function]
+    cls.add_method('IsTypeIdSet', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## object-factory.h (module 'core'): void ns3::ObjectFactory::Set() [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [])
+    ## object-factory.h (module 'core'): void ns3::ObjectFactory::SetTypeId(ns3::TypeId tid) [member function]
+    cls.add_method('SetTypeId', 
+                   'void', 
+                   [param('ns3::TypeId', 'tid')])
+    ## object-factory.h (module 'core'): void ns3::ObjectFactory::SetTypeId(char const * tid) [member function]
+    cls.add_method('SetTypeId', 
+                   'void', 
+                   [param('char const *', 'tid')])
+    ## object-factory.h (module 'core'): void ns3::ObjectFactory::SetTypeId(std::string tid) [member function]
+    cls.add_method('SetTypeId', 
+                   'void', 
+                   [param('std::string', 'tid')])
+    return
+
+def register_Ns3PacketMetadata_methods(root_module, cls):
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::PacketMetadata(uint64_t uid, uint32_t size) [constructor]
+    cls.add_constructor([param('uint64_t', 'uid'), param('uint32_t', 'size')])
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::PacketMetadata(ns3::PacketMetadata const & o) [constructor]
+    cls.add_constructor([param('ns3::PacketMetadata const &', 'o')])
+    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::AddAtEnd(ns3::PacketMetadata const & o) [member function]
+    cls.add_method('AddAtEnd', 
+                   'void', 
+                   [param('ns3::PacketMetadata const &', 'o')])
+    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::AddHeader(ns3::Header const & header, uint32_t size) [member function]
+    cls.add_method('AddHeader', 
+                   'void', 
+                   [param('ns3::Header const &', 'header'), param('uint32_t', 'size')])
+    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::AddPaddingAtEnd(uint32_t end) [member function]
+    cls.add_method('AddPaddingAtEnd', 
+                   'void', 
+                   [param('uint32_t', 'end')])
+    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::AddTrailer(ns3::Trailer const & trailer, uint32_t size) [member function]
+    cls.add_method('AddTrailer', 
+                   'void', 
+                   [param('ns3::Trailer const &', 'trailer'), param('uint32_t', 'size')])
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator ns3::PacketMetadata::BeginItem(ns3::Buffer buffer) const [member function]
+    cls.add_method('BeginItem', 
+                   'ns3::PacketMetadata::ItemIterator', 
+                   [param('ns3::Buffer', 'buffer')], 
+                   is_const=True)
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata ns3::PacketMetadata::CreateFragment(uint32_t start, uint32_t end) const [member function]
+    cls.add_method('CreateFragment', 
+                   'ns3::PacketMetadata', 
+                   [param('uint32_t', 'start'), param('uint32_t', 'end')], 
+                   is_const=True)
+    ## packet-metadata.h (module 'network'): uint32_t ns3::PacketMetadata::Deserialize(uint8_t const * buffer, uint32_t size) [member function]
+    cls.add_method('Deserialize', 
+                   'uint32_t', 
+                   [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
+    ## packet-metadata.h (module 'network'): static void ns3::PacketMetadata::Enable() [member function]
+    cls.add_method('Enable', 
+                   'void', 
+                   [], 
+                   is_static=True)
+    ## packet-metadata.h (module 'network'): static void ns3::PacketMetadata::EnableChecking() [member function]
+    cls.add_method('EnableChecking', 
+                   'void', 
+                   [], 
+                   is_static=True)
+    ## packet-metadata.h (module 'network'): uint32_t ns3::PacketMetadata::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## packet-metadata.h (module 'network'): uint64_t ns3::PacketMetadata::GetUid() const [member function]
+    cls.add_method('GetUid', 
+                   'uint64_t', 
+                   [], 
+                   is_const=True)
+    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::RemoveAtEnd(uint32_t end) [member function]
+    cls.add_method('RemoveAtEnd', 
+                   'void', 
+                   [param('uint32_t', 'end')])
+    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::RemoveAtStart(uint32_t start) [member function]
+    cls.add_method('RemoveAtStart', 
+                   'void', 
+                   [param('uint32_t', 'start')])
+    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::RemoveHeader(ns3::Header const & header, uint32_t size) [member function]
+    cls.add_method('RemoveHeader', 
+                   'void', 
+                   [param('ns3::Header const &', 'header'), param('uint32_t', 'size')])
+    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::RemoveTrailer(ns3::Trailer const & trailer, uint32_t size) [member function]
+    cls.add_method('RemoveTrailer', 
+                   'void', 
+                   [param('ns3::Trailer const &', 'trailer'), param('uint32_t', 'size')])
+    ## packet-metadata.h (module 'network'): uint32_t ns3::PacketMetadata::Serialize(uint8_t * buffer, uint32_t maxSize) const [member function]
+    cls.add_method('Serialize', 
+                   'uint32_t', 
+                   [param('uint8_t *', 'buffer'), param('uint32_t', 'maxSize')], 
+                   is_const=True)
+    return
+
+def register_Ns3PacketMetadataItem_methods(root_module, cls):
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::Item() [constructor]
+    cls.add_constructor([])
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::Item(ns3::PacketMetadata::Item const & arg0) [constructor]
+    cls.add_constructor([param('ns3::PacketMetadata::Item const &', 'arg0')])
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::current [variable]
+    cls.add_instance_attribute('current', 'ns3::Buffer::Iterator', is_const=False)
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::currentSize [variable]
+    cls.add_instance_attribute('currentSize', 'uint32_t', is_const=False)
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::currentTrimedFromEnd [variable]
+    cls.add_instance_attribute('currentTrimedFromEnd', 'uint32_t', is_const=False)
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::currentTrimedFromStart [variable]
+    cls.add_instance_attribute('currentTrimedFromStart', 'uint32_t', is_const=False)
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::isFragment [variable]
+    cls.add_instance_attribute('isFragment', 'bool', is_const=False)
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::tid [variable]
+    cls.add_instance_attribute('tid', 'ns3::TypeId', is_const=False)
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::type [variable]
+    cls.add_instance_attribute('type', 'ns3::PacketMetadata::Item::ItemType', is_const=False)
+    return
+
+def register_Ns3PacketMetadataItemIterator_methods(root_module, cls):
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator::ItemIterator(ns3::PacketMetadata::ItemIterator const & arg0) [constructor]
+    cls.add_constructor([param('ns3::PacketMetadata::ItemIterator const &', 'arg0')])
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator::ItemIterator(ns3::PacketMetadata const * metadata, ns3::Buffer buffer) [constructor]
+    cls.add_constructor([param('ns3::PacketMetadata const *', 'metadata'), param('ns3::Buffer', 'buffer')])
+    ## packet-metadata.h (module 'network'): bool ns3::PacketMetadata::ItemIterator::HasNext() const [member function]
+    cls.add_method('HasNext', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item ns3::PacketMetadata::ItemIterator::Next() [member function]
+    cls.add_method('Next', 
+                   'ns3::PacketMetadata::Item', 
+                   [])
+    return
+
+def register_Ns3PacketTagIterator_methods(root_module, cls):
+    ## packet.h (module 'network'): ns3::PacketTagIterator::PacketTagIterator(ns3::PacketTagIterator const & arg0) [constructor]
+    cls.add_constructor([param('ns3::PacketTagIterator const &', 'arg0')])
+    ## packet.h (module 'network'): bool ns3::PacketTagIterator::HasNext() const [member function]
+    cls.add_method('HasNext', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## packet.h (module 'network'): ns3::PacketTagIterator::Item ns3::PacketTagIterator::Next() [member function]
+    cls.add_method('Next', 
+                   'ns3::PacketTagIterator::Item', 
+                   [])
+    return
+
+def register_Ns3PacketTagIteratorItem_methods(root_module, cls):
+    ## packet.h (module 'network'): ns3::PacketTagIterator::Item::Item(ns3::PacketTagIterator::Item const & arg0) [constructor]
+    cls.add_constructor([param('ns3::PacketTagIterator::Item const &', 'arg0')])
+    ## packet.h (module 'network'): void ns3::PacketTagIterator::Item::GetTag(ns3::Tag & tag) const [member function]
+    cls.add_method('GetTag', 
+                   'void', 
+                   [param('ns3::Tag &', 'tag')], 
+                   is_const=True)
+    ## packet.h (module 'network'): ns3::TypeId ns3::PacketTagIterator::Item::GetTypeId() const [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True)
+    return
+
+def register_Ns3PacketTagList_methods(root_module, cls):
+    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::PacketTagList() [constructor]
+    cls.add_constructor([])
+    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::PacketTagList(ns3::PacketTagList const & o) [constructor]
+    cls.add_constructor([param('ns3::PacketTagList const &', 'o')])
+    ## packet-tag-list.h (module 'network'): void ns3::PacketTagList::Add(ns3::Tag const & tag) const [member function]
+    cls.add_method('Add', 
+                   'void', 
+                   [param('ns3::Tag const &', 'tag')], 
+                   is_const=True)
+    ## packet-tag-list.h (module 'network'): uint32_t ns3::PacketTagList::Deserialize(uint32_t const * buffer, uint32_t size) [member function]
+    cls.add_method('Deserialize', 
+                   'uint32_t', 
+                   [param('uint32_t const *', 'buffer'), param('uint32_t', 'size')])
+    ## packet-tag-list.h (module 'network'): uint32_t ns3::PacketTagList::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData const * ns3::PacketTagList::Head() const [member function]
+    cls.add_method('Head', 
+                   'ns3::PacketTagList::TagData const *', 
+                   [], 
+                   is_const=True)
+    ## packet-tag-list.h (module 'network'): bool ns3::PacketTagList::Peek(ns3::Tag & tag) const [member function]
+    cls.add_method('Peek', 
+                   'bool', 
+                   [param('ns3::Tag &', 'tag')], 
+                   is_const=True)
+    ## packet-tag-list.h (module 'network'): bool ns3::PacketTagList::Remove(ns3::Tag & tag) [member function]
+    cls.add_method('Remove', 
+                   'bool', 
+                   [param('ns3::Tag &', 'tag')])
+    ## packet-tag-list.h (module 'network'): void ns3::PacketTagList::RemoveAll() [member function]
+    cls.add_method('RemoveAll', 
+                   'void', 
+                   [])
+    ## packet-tag-list.h (module 'network'): bool ns3::PacketTagList::Replace(ns3::Tag & tag) [member function]
+    cls.add_method('Replace', 
+                   'bool', 
+                   [param('ns3::Tag &', 'tag')])
+    ## packet-tag-list.h (module 'network'): uint32_t ns3::PacketTagList::Serialize(uint32_t * buffer, uint32_t maxSize) const [member function]
+    cls.add_method('Serialize', 
+                   'uint32_t', 
+                   [param('uint32_t *', 'buffer'), param('uint32_t', 'maxSize')], 
+                   is_const=True)
+    return
+
+def register_Ns3PacketTagListTagData_methods(root_module, cls):
+    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::TagData() [constructor]
+    cls.add_constructor([])
+    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::TagData(ns3::PacketTagList::TagData const & arg0) [constructor]
+    cls.add_constructor([param('ns3::PacketTagList::TagData const &', 'arg0')])
+    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::count [variable]
+    cls.add_instance_attribute('count', 'uint32_t', is_const=False)
+    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::data [variable]
+    cls.add_instance_attribute('data', 'uint8_t [ 1 ]', is_const=False)
+    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::next [variable]
+    cls.add_instance_attribute('next', 'ns3::PacketTagList::TagData *', is_const=False)
+    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::size [variable]
+    cls.add_instance_attribute('size', 'uint32_t', is_const=False)
+    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::tid [variable]
+    cls.add_instance_attribute('tid', 'ns3::TypeId', is_const=False)
+    return
+
+def register_Ns3ParameterLogger_methods(root_module, cls):
+    ## log.h (module 'core'): ns3::ParameterLogger::ParameterLogger(ns3::ParameterLogger const & arg0) [constructor]
+    cls.add_constructor([param('ns3::ParameterLogger const &', 'arg0')])
+    ## log.h (module 'core'): ns3::ParameterLogger::ParameterLogger(std::ostream & os) [constructor]
+    cls.add_constructor([param('std::ostream &', 'os')])
+    return
+
+def register_Ns3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter>::SimpleRefCount(ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter > const &', 'o')])
+    return
+
+def register_Ns3Simulator_methods(root_module, cls):
+    ## simulator.h (module 'core'): ns3::Simulator::Simulator(ns3::Simulator const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Simulator const &', 'arg0')])
+    ## simulator.h (module 'core'): static void ns3::Simulator::Cancel(ns3::EventId const & id) [member function]
+    cls.add_method('Cancel', 
+                   'void', 
+                   [param('ns3::EventId const &', 'id')], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static void ns3::Simulator::Destroy() [member function]
+    cls.add_method('Destroy', 
+                   'void', 
+                   [], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static uint32_t ns3::Simulator::GetContext() [member function]
+    cls.add_method('GetContext', 
+                   'uint32_t', 
+                   [], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static ns3::Time ns3::Simulator::GetDelayLeft(ns3::EventId const & id) [member function]
+    cls.add_method('GetDelayLeft', 
+                   'ns3::Time', 
+                   [param('ns3::EventId const &', 'id')], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static uint64_t ns3::Simulator::GetEventCount() [member function]
+    cls.add_method('GetEventCount', 
+                   'uint64_t', 
+                   [], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static ns3::Ptr<ns3::SimulatorImpl> ns3::Simulator::GetImplementation() [member function]
+    cls.add_method('GetImplementation', 
+                   'ns3::Ptr< ns3::SimulatorImpl >', 
+                   [], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static ns3::Time ns3::Simulator::GetMaximumSimulationTime() [member function]
+    cls.add_method('GetMaximumSimulationTime', 
+                   'ns3::Time', 
+                   [], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static uint32_t ns3::Simulator::GetSystemId() [member function]
+    cls.add_method('GetSystemId', 
+                   'uint32_t', 
+                   [], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static bool ns3::Simulator::IsExpired(ns3::EventId const & id) [member function]
+    cls.add_method('IsExpired', 
+                   'bool', 
+                   [param('ns3::EventId const &', 'id')], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static bool ns3::Simulator::IsFinished() [member function]
+    cls.add_method('IsFinished', 
+                   'bool', 
+                   [], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static ns3::Time ns3::Simulator::Now() [member function]
+    cls.add_method('Now', 
+                   'ns3::Time', 
+                   [], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static void ns3::Simulator::Remove(ns3::EventId const & id) [member function]
+    cls.add_method('Remove', 
+                   'void', 
+                   [param('ns3::EventId const &', 'id')], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static void ns3::Simulator::SetImplementation(ns3::Ptr<ns3::SimulatorImpl> impl) [member function]
+    cls.add_method('SetImplementation', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::SimulatorImpl >', 'impl')], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static void ns3::Simulator::SetScheduler(ns3::ObjectFactory schedulerFactory) [member function]
+    cls.add_method('SetScheduler', 
+                   'void', 
+                   [param('ns3::ObjectFactory', 'schedulerFactory')], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static void ns3::Simulator::Stop() [member function]
+    cls.add_method('Stop', 
+                   'void', 
+                   [], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static void ns3::Simulator::Stop(ns3::Time const & delay) [member function]
+    cls.add_method('Stop', 
+                   'void', 
+                   [param('ns3::Time const &', 'delay')], 
+                   is_static=True)
+    return
+
+def register_Ns3Tag_methods(root_module, cls):
+    ## tag.h (module 'network'): ns3::Tag::Tag() [constructor]
+    cls.add_constructor([])
+    ## tag.h (module 'network'): ns3::Tag::Tag(ns3::Tag const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Tag const &', 'arg0')])
+    ## tag.h (module 'network'): void ns3::Tag::Deserialize(ns3::TagBuffer i) [member function]
+    cls.add_method('Deserialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'i')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## tag.h (module 'network'): uint32_t ns3::Tag::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## tag.h (module 'network'): static ns3::TypeId ns3::Tag::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## tag.h (module 'network'): void ns3::Tag::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## tag.h (module 'network'): void ns3::Tag::Serialize(ns3::TagBuffer i) const [member function]
+    cls.add_method('Serialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'i')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3TagBuffer_methods(root_module, cls):
+    ## tag-buffer.h (module 'network'): ns3::TagBuffer::TagBuffer(ns3::TagBuffer const & arg0) [constructor]
+    cls.add_constructor([param('ns3::TagBuffer const &', 'arg0')])
+    ## tag-buffer.h (module 'network'): ns3::TagBuffer::TagBuffer(uint8_t * start, uint8_t * end) [constructor]
+    cls.add_constructor([param('uint8_t *', 'start'), param('uint8_t *', 'end')])
+    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::CopyFrom(ns3::TagBuffer o) [member function]
+    cls.add_method('CopyFrom', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'o')])
+    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::Read(uint8_t * buffer, uint32_t size) [member function]
+    cls.add_method('Read', 
+                   'void', 
+                   [param('uint8_t *', 'buffer'), param('uint32_t', 'size')])
+    ## tag-buffer.h (module 'network'): double ns3::TagBuffer::ReadDouble() [member function]
+    cls.add_method('ReadDouble', 
+                   'double', 
+                   [])
+    ## tag-buffer.h (module 'network'): uint16_t ns3::TagBuffer::ReadU16() [member function]
+    cls.add_method('ReadU16', 
+                   'uint16_t', 
+                   [])
+    ## tag-buffer.h (module 'network'): uint32_t ns3::TagBuffer::ReadU32() [member function]
+    cls.add_method('ReadU32', 
+                   'uint32_t', 
+                   [])
+    ## tag-buffer.h (module 'network'): uint64_t ns3::TagBuffer::ReadU64() [member function]
+    cls.add_method('ReadU64', 
+                   'uint64_t', 
+                   [])
+    ## tag-buffer.h (module 'network'): uint8_t ns3::TagBuffer::ReadU8() [member function]
+    cls.add_method('ReadU8', 
+                   'uint8_t', 
+                   [])
+    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::TrimAtEnd(uint32_t trim) [member function]
+    cls.add_method('TrimAtEnd', 
+                   'void', 
+                   [param('uint32_t', 'trim')])
+    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::Write(uint8_t const * buffer, uint32_t size) [member function]
+    cls.add_method('Write', 
+                   'void', 
+                   [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
+    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteDouble(double v) [member function]
+    cls.add_method('WriteDouble', 
+                   'void', 
+                   [param('double', 'v')])
+    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU16(uint16_t v) [member function]
+    cls.add_method('WriteU16', 
+                   'void', 
+                   [param('uint16_t', 'v')])
+    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU32(uint32_t v) [member function]
+    cls.add_method('WriteU32', 
+                   'void', 
+                   [param('uint32_t', 'v')])
+    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU64(uint64_t v) [member function]
+    cls.add_method('WriteU64', 
+                   'void', 
+                   [param('uint64_t', 'v')])
+    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU8(uint8_t v) [member function]
+    cls.add_method('WriteU8', 
+                   'void', 
+                   [param('uint8_t', 'v')])
+    return
+
+def register_Ns3Time_methods(root_module, cls):
+    cls.add_binary_comparison_operator('==')
+    cls.add_binary_comparison_operator('!=')
+    cls.add_binary_comparison_operator('<=')
+    cls.add_binary_comparison_operator('>=')
+    cls.add_binary_comparison_operator('<')
+    cls.add_binary_comparison_operator('>')
+    cls.add_binary_numeric_operator('+', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
+    cls.add_binary_numeric_operator('-', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
+    cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::int64x64_t const &', 'right'))
+    cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
+    cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::int64x64_t const &', 'right'))
+    cls.add_inplace_numeric_operator('+=', param('ns3::Time const &', 'right'))
+    cls.add_inplace_numeric_operator('-=', param('ns3::Time const &', 'right'))
+    cls.add_output_stream_operator()
+    ## nstime.h (module 'core'): ns3::Time::Time() [constructor]
+    cls.add_constructor([])
+    ## nstime.h (module 'core'): ns3::Time::Time(ns3::Time const & o) [constructor]
+    cls.add_constructor([param('ns3::Time const &', 'o')])
+    ## nstime.h (module 'core'): ns3::Time::Time(double v) [constructor]
+    cls.add_constructor([param('double', 'v')])
+    ## nstime.h (module 'core'): ns3::Time::Time(int v) [constructor]
+    cls.add_constructor([param('int', 'v')])
+    ## nstime.h (module 'core'): ns3::Time::Time(long int v) [constructor]
+    cls.add_constructor([param('long int', 'v')])
+    ## nstime.h (module 'core'): ns3::Time::Time(long long int v) [constructor]
+    cls.add_constructor([param('long long int', 'v')])
+    ## nstime.h (module 'core'): ns3::Time::Time(unsigned int v) [constructor]
+    cls.add_constructor([param('unsigned int', 'v')])
+    ## nstime.h (module 'core'): ns3::Time::Time(long unsigned int v) [constructor]
+    cls.add_constructor([param('long unsigned int', 'v')])
+    ## nstime.h (module 'core'): ns3::Time::Time(long long unsigned int v) [constructor]
+    cls.add_constructor([param('long long unsigned int', 'v')])
+    ## nstime.h (module 'core'): ns3::Time::Time(ns3::int64x64_t const & v) [constructor]
+    cls.add_constructor([param('ns3::int64x64_t const &', 'v')])
+    ## nstime.h (module 'core'): ns3::Time::Time(std::string const & s) [constructor]
+    cls.add_constructor([param('std::string const &', 's')])
+    ## nstime.h (module 'core'): ns3::TimeWithUnit ns3::Time::As(ns3::Time::Unit const unit=::ns3::Time::Unit::AUTO) const [member function]
+    cls.add_method('As', 
+                   'ns3::TimeWithUnit', 
+                   [param('ns3::Time::Unit const', 'unit', default_value='::ns3::Time::Unit::AUTO')], 
+                   is_const=True)
+    ## nstime.h (module 'core'): int ns3::Time::Compare(ns3::Time const & o) const [member function]
+    cls.add_method('Compare', 
+                   'int', 
+                   [param('ns3::Time const &', 'o')], 
+                   is_const=True)
+    ## nstime.h (module 'core'): static ns3::Time ns3::Time::From(ns3::int64x64_t const & value) [member function]
+    cls.add_method('From', 
+                   'ns3::Time', 
+                   [param('ns3::int64x64_t const &', 'value')], 
+                   is_static=True)
+    ## nstime.h (module 'core'): static ns3::Time ns3::Time::From(ns3::int64x64_t const & value, ns3::Time::Unit unit) [member function]
+    cls.add_method('From', 
+                   'ns3::Time', 
+                   [param('ns3::int64x64_t const &', 'value'), param('ns3::Time::Unit', 'unit')], 
+                   is_static=True)
+    ## nstime.h (module 'core'): static ns3::Time ns3::Time::FromDouble(double value, ns3::Time::Unit unit) [member function]
+    cls.add_method('FromDouble', 
+                   'ns3::Time', 
+                   [param('double', 'value'), param('ns3::Time::Unit', 'unit')], 
+                   is_static=True)
+    ## nstime.h (module 'core'): static ns3::Time ns3::Time::FromInteger(uint64_t value, ns3::Time::Unit unit) [member function]
+    cls.add_method('FromInteger', 
+                   'ns3::Time', 
+                   [param('uint64_t', 'value'), param('ns3::Time::Unit', 'unit')], 
+                   is_static=True)
+    ## nstime.h (module 'core'): double ns3::Time::GetDays() const [member function]
+    cls.add_method('GetDays', 
+                   'double', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): double ns3::Time::GetDouble() const [member function]
+    cls.add_method('GetDouble', 
+                   'double', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): int64_t ns3::Time::GetFemtoSeconds() const [member function]
+    cls.add_method('GetFemtoSeconds', 
+                   'int64_t', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): double ns3::Time::GetHours() const [member function]
+    cls.add_method('GetHours', 
+                   'double', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): int64_t ns3::Time::GetInteger() const [member function]
+    cls.add_method('GetInteger', 
+                   'int64_t', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): int64_t ns3::Time::GetMicroSeconds() const [member function]
+    cls.add_method('GetMicroSeconds', 
+                   'int64_t', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): int64_t ns3::Time::GetMilliSeconds() const [member function]
+    cls.add_method('GetMilliSeconds', 
+                   'int64_t', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): double ns3::Time::GetMinutes() const [member function]
+    cls.add_method('GetMinutes', 
+                   'double', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): int64_t ns3::Time::GetNanoSeconds() const [member function]
+    cls.add_method('GetNanoSeconds', 
+                   'int64_t', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): int64_t ns3::Time::GetPicoSeconds() const [member function]
+    cls.add_method('GetPicoSeconds', 
+                   'int64_t', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): static ns3::Time::Unit ns3::Time::GetResolution() [member function]
+    cls.add_method('GetResolution', 
+                   'ns3::Time::Unit', 
+                   [], 
+                   is_static=True)
+    ## nstime.h (module 'core'): double ns3::Time::GetSeconds() const [member function]
+    cls.add_method('GetSeconds', 
+                   'double', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): int64_t ns3::Time::GetTimeStep() const [member function]
+    cls.add_method('GetTimeStep', 
+                   'int64_t', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): double ns3::Time::GetYears() const [member function]
+    cls.add_method('GetYears', 
+                   'double', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): bool ns3::Time::IsNegative() const [member function]
+    cls.add_method('IsNegative', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): bool ns3::Time::IsPositive() const [member function]
+    cls.add_method('IsPositive', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): bool ns3::Time::IsStrictlyNegative() const [member function]
+    cls.add_method('IsStrictlyNegative', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): bool ns3::Time::IsStrictlyPositive() const [member function]
+    cls.add_method('IsStrictlyPositive', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): bool ns3::Time::IsZero() const [member function]
+    cls.add_method('IsZero', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): static ns3::Time ns3::Time::Max() [member function]
+    cls.add_method('Max', 
+                   'ns3::Time', 
+                   [], 
+                   is_static=True)
+    ## nstime.h (module 'core'): static ns3::Time ns3::Time::Min() [member function]
+    cls.add_method('Min', 
+                   'ns3::Time', 
+                   [], 
+                   is_static=True)
+    ## nstime.h (module 'core'): ns3::Time ns3::Time::RoundTo(ns3::Time::Unit unit) const [member function]
+    cls.add_method('RoundTo', 
+                   'ns3::Time', 
+                   [param('ns3::Time::Unit', 'unit')], 
+                   is_const=True)
+    ## nstime.h (module 'core'): static void ns3::Time::SetResolution(ns3::Time::Unit resolution) [member function]
+    cls.add_method('SetResolution', 
+                   'void', 
+                   [param('ns3::Time::Unit', 'resolution')], 
+                   is_static=True)
+    ## nstime.h (module 'core'): static bool ns3::Time::StaticInit() [member function]
+    cls.add_method('StaticInit', 
+                   'bool', 
+                   [], 
+                   is_static=True)
+    ## nstime.h (module 'core'): ns3::int64x64_t ns3::Time::To(ns3::Time::Unit unit) const [member function]
+    cls.add_method('To', 
+                   'ns3::int64x64_t', 
+                   [param('ns3::Time::Unit', 'unit')], 
+                   is_const=True)
+    ## nstime.h (module 'core'): double ns3::Time::ToDouble(ns3::Time::Unit unit) const [member function]
+    cls.add_method('ToDouble', 
+                   'double', 
+                   [param('ns3::Time::Unit', 'unit')], 
+                   is_const=True)
+    ## nstime.h (module 'core'): int64_t ns3::Time::ToInteger(ns3::Time::Unit unit) const [member function]
+    cls.add_method('ToInteger', 
+                   'int64_t', 
+                   [param('ns3::Time::Unit', 'unit')], 
+                   is_const=True)
+    return
+
+def register_Ns3TimeWithUnit_methods(root_module, cls):
+    cls.add_output_stream_operator()
+    ## nstime.h (module 'core'): ns3::TimeWithUnit::TimeWithUnit(ns3::TimeWithUnit const & arg0) [constructor]
+    cls.add_constructor([param('ns3::TimeWithUnit const &', 'arg0')])
+    ## nstime.h (module 'core'): ns3::TimeWithUnit::TimeWithUnit(ns3::Time const time, ns3::Time::Unit const unit) [constructor]
+    cls.add_constructor([param('ns3::Time const', 'time'), param('ns3::Time::Unit const', 'unit')])
+    return
+
+def register_Ns3TypeId_methods(root_module, cls):
+    cls.add_binary_comparison_operator('==')
+    cls.add_binary_comparison_operator('!=')
+    cls.add_output_stream_operator()
+    cls.add_binary_comparison_operator('<')
+    ## type-id.h (module 'core'): ns3::TypeId::TypeId(std::string const & name) [constructor]
+    cls.add_constructor([param('std::string const &', 'name')])
+    ## type-id.h (module 'core'): ns3::TypeId::TypeId() [constructor]
+    cls.add_constructor([])
+    ## type-id.h (module 'core'): ns3::TypeId::TypeId(ns3::TypeId const & o) [constructor]
+    cls.add_constructor([param('ns3::TypeId const &', 'o')])
+    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddAttribute(std::string name, std::string help, ns3::AttributeValue const & initialValue, ns3::Ptr<const ns3::AttributeAccessor> accessor, ns3::Ptr<const ns3::AttributeChecker> checker, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SupportLevel::SUPPORTED, std::string const & supportMsg="") [member function]
+    cls.add_method('AddAttribute', 
+                   'ns3::TypeId', 
+                   [param('std::string', 'name'), param('std::string', 'help'), param('ns3::AttributeValue const &', 'initialValue'), param('ns3::Ptr< ns3::AttributeAccessor const >', 'accessor'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SupportLevel::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
+    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddAttribute(std::string name, std::string help, uint32_t flags, ns3::AttributeValue const & initialValue, ns3::Ptr<const ns3::AttributeAccessor> accessor, ns3::Ptr<const ns3::AttributeChecker> checker, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SupportLevel::SUPPORTED, std::string const & supportMsg="") [member function]
+    cls.add_method('AddAttribute', 
+                   'ns3::TypeId', 
+                   [param('std::string', 'name'), param('std::string', 'help'), param('uint32_t', 'flags'), param('ns3::AttributeValue const &', 'initialValue'), param('ns3::Ptr< ns3::AttributeAccessor const >', 'accessor'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SupportLevel::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
+    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddTraceSource(std::string name, std::string help, ns3::Ptr<const ns3::TraceSourceAccessor> accessor, std::string callback, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SupportLevel::SUPPORTED, std::string const & supportMsg="") [member function]
+    cls.add_method('AddTraceSource', 
+                   'ns3::TypeId', 
+                   [param('std::string', 'name'), param('std::string', 'help'), param('ns3::Ptr< ns3::TraceSourceAccessor const >', 'accessor'), param('std::string', 'callback'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SupportLevel::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation ns3::TypeId::GetAttribute(std::size_t i) const [member function]
+    cls.add_method('GetAttribute', 
+                   'ns3::TypeId::AttributeInformation', 
+                   [param('std::size_t', 'i')], 
+                   is_const=True)
+    ## type-id.h (module 'core'): std::string ns3::TypeId::GetAttributeFullName(std::size_t i) const [member function]
+    cls.add_method('GetAttributeFullName', 
+                   'std::string', 
+                   [param('std::size_t', 'i')], 
+                   is_const=True)
+    ## type-id.h (module 'core'): std::size_t ns3::TypeId::GetAttributeN() const [member function]
+    cls.add_method('GetAttributeN', 
+                   'std::size_t', 
+                   [], 
+                   is_const=True)
+    ## type-id.h (module 'core'): ns3::Callback<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::TypeId::GetConstructor() const [member function]
+    cls.add_method('GetConstructor', 
+                   'ns3::Callback< ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
+                   [], 
+                   is_const=True)
+    ## type-id.h (module 'core'): std::string ns3::TypeId::GetGroupName() const [member function]
+    cls.add_method('GetGroupName', 
+                   'std::string', 
+                   [], 
+                   is_const=True)
+    ## type-id.h (module 'core'): ns3::TypeId::hash_t ns3::TypeId::GetHash() const [member function]
+    cls.add_method('GetHash', 
+                   'ns3::TypeId::hash_t', 
+                   [], 
+                   is_const=True)
+    ## type-id.h (module 'core'): std::string ns3::TypeId::GetName() const [member function]
+    cls.add_method('GetName', 
+                   'std::string', 
+                   [], 
+                   is_const=True)
+    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::GetParent() const [member function]
+    cls.add_method('GetParent', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True)
+    ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::GetRegistered(uint16_t i) [member function]
+    cls.add_method('GetRegistered', 
+                   'ns3::TypeId', 
+                   [param('uint16_t', 'i')], 
+                   is_static=True)
+    ## type-id.h (module 'core'): static uint16_t ns3::TypeId::GetRegisteredN() [member function]
+    cls.add_method('GetRegisteredN', 
+                   'uint16_t', 
+                   [], 
+                   is_static=True)
+    ## type-id.h (module 'core'): std::size_t ns3::TypeId::GetSize() const [member function]
+    cls.add_method('GetSize', 
+                   'std::size_t', 
+                   [], 
+                   is_const=True)
+    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation ns3::TypeId::GetTraceSource(std::size_t i) const [member function]
+    cls.add_method('GetTraceSource', 
+                   'ns3::TypeId::TraceSourceInformation', 
+                   [param('std::size_t', 'i')], 
+                   is_const=True)
+    ## type-id.h (module 'core'): std::size_t ns3::TypeId::GetTraceSourceN() const [member function]
+    cls.add_method('GetTraceSourceN', 
+                   'std::size_t', 
+                   [], 
+                   is_const=True)
+    ## type-id.h (module 'core'): uint16_t ns3::TypeId::GetUid() const [member function]
+    cls.add_method('GetUid', 
+                   'uint16_t', 
+                   [], 
+                   is_const=True)
+    ## type-id.h (module 'core'): bool ns3::TypeId::HasConstructor() const [member function]
+    cls.add_method('HasConstructor', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## type-id.h (module 'core'): bool ns3::TypeId::HasParent() const [member function]
+    cls.add_method('HasParent', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::HideFromDocumentation() [member function]
+    cls.add_method('HideFromDocumentation', 
+                   'ns3::TypeId', 
+                   [])
+    ## type-id.h (module 'core'): bool ns3::TypeId::IsChildOf(ns3::TypeId other) const [member function]
+    cls.add_method('IsChildOf', 
+                   'bool', 
+                   [param('ns3::TypeId', 'other')], 
+                   is_const=True)
+    ## type-id.h (module 'core'): bool ns3::TypeId::LookupAttributeByName(std::string name, ns3::TypeId::AttributeInformation * info) const [member function]
+    cls.add_method('LookupAttributeByName', 
+                   'bool', 
+                   [param('std::string', 'name'), param('ns3::TypeId::AttributeInformation *', 'info', transfer_ownership=False)], 
+                   is_const=True)
+    ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::LookupByHash(ns3::TypeId::hash_t hash) [member function]
+    cls.add_method('LookupByHash', 
+                   'ns3::TypeId', 
+                   [param('uint32_t', 'hash')], 
+                   is_static=True)
+    ## type-id.h (module 'core'): static bool ns3::TypeId::LookupByHashFailSafe(ns3::TypeId::hash_t hash, ns3::TypeId * tid) [member function]
+    cls.add_method('LookupByHashFailSafe', 
+                   'bool', 
+                   [param('uint32_t', 'hash'), param('ns3::TypeId *', 'tid')], 
+                   is_static=True)
+    ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::LookupByName(std::string name) [member function]
+    cls.add_method('LookupByName', 
+                   'ns3::TypeId', 
+                   [param('std::string', 'name')], 
+                   is_static=True)
+    ## type-id.h (module 'core'): ns3::Ptr<const ns3::TraceSourceAccessor> ns3::TypeId::LookupTraceSourceByName(std::string name) const [member function]
+    cls.add_method('LookupTraceSourceByName', 
+                   'ns3::Ptr< ns3::TraceSourceAccessor const >', 
+                   [param('std::string', 'name')], 
+                   is_const=True)
+    ## type-id.h (module 'core'): ns3::Ptr<const ns3::TraceSourceAccessor> ns3::TypeId::LookupTraceSourceByName(std::string name, ns3::TypeId::TraceSourceInformation * info) const [member function]
+    cls.add_method('LookupTraceSourceByName', 
+                   'ns3::Ptr< ns3::TraceSourceAccessor const >', 
+                   [param('std::string', 'name'), param('ns3::TypeId::TraceSourceInformation *', 'info')], 
+                   is_const=True)
+    ## type-id.h (module 'core'): bool ns3::TypeId::MustHideFromDocumentation() const [member function]
+    cls.add_method('MustHideFromDocumentation', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## type-id.h (module 'core'): bool ns3::TypeId::SetAttributeInitialValue(std::size_t i, ns3::Ptr<const ns3::AttributeValue> initialValue) [member function]
+    cls.add_method('SetAttributeInitialValue', 
+                   'bool', 
+                   [param('std::size_t', 'i'), param('ns3::Ptr< ns3::AttributeValue const >', 'initialValue')])
+    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::SetGroupName(std::string groupName) [member function]
+    cls.add_method('SetGroupName', 
+                   'ns3::TypeId', 
+                   [param('std::string', 'groupName')])
+    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::SetParent(ns3::TypeId tid) [member function]
+    cls.add_method('SetParent', 
+                   'ns3::TypeId', 
+                   [param('ns3::TypeId', 'tid')])
+    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::SetSize(std::size_t size) [member function]
+    cls.add_method('SetSize', 
+                   'ns3::TypeId', 
+                   [param('std::size_t', 'size')])
+    ## type-id.h (module 'core'): void ns3::TypeId::SetUid(uint16_t uid) [member function]
+    cls.add_method('SetUid', 
+                   'void', 
+                   [param('uint16_t', 'uid')])
+    return
+
+def register_Ns3TypeIdAttributeInformation_methods(root_module, cls):
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::AttributeInformation() [constructor]
+    cls.add_constructor([])
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::AttributeInformation(ns3::TypeId::AttributeInformation const & arg0) [constructor]
+    cls.add_constructor([param('ns3::TypeId::AttributeInformation const &', 'arg0')])
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::accessor [variable]
+    cls.add_instance_attribute('accessor', 'ns3::Ptr< ns3::AttributeAccessor const >', is_const=False)
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::checker [variable]
+    cls.add_instance_attribute('checker', 'ns3::Ptr< ns3::AttributeChecker const >', is_const=False)
+    cls.add_instance_attribute('flags', 'uint32_t', is_const=False)
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::help [variable]
+    cls.add_instance_attribute('help', 'std::string', is_const=False)
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::initialValue [variable]
+    cls.add_instance_attribute('initialValue', 'ns3::Ptr< ns3::AttributeValue const >', is_const=False)
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::name [variable]
+    cls.add_instance_attribute('name', 'std::string', is_const=False)
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::originalInitialValue [variable]
+    cls.add_instance_attribute('originalInitialValue', 'ns3::Ptr< ns3::AttributeValue const >', is_const=False)
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::supportLevel [variable]
+    cls.add_instance_attribute('supportLevel', 'ns3::TypeId::SupportLevel', is_const=False)
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::supportMsg [variable]
+    cls.add_instance_attribute('supportMsg', 'std::string', is_const=False)
+    return
+
+def register_Ns3TypeIdTraceSourceInformation_methods(root_module, cls):
+    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::TraceSourceInformation() [constructor]
+    cls.add_constructor([])
+    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::TraceSourceInformation(ns3::TypeId::TraceSourceInformation const & arg0) [constructor]
+    cls.add_constructor([param('ns3::TypeId::TraceSourceInformation const &', 'arg0')])
+    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::accessor [variable]
+    cls.add_instance_attribute('accessor', 'ns3::Ptr< ns3::TraceSourceAccessor const >', is_const=False)
+    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::callback [variable]
+    cls.add_instance_attribute('callback', 'std::string', is_const=False)
+    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::help [variable]
+    cls.add_instance_attribute('help', 'std::string', is_const=False)
+    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::name [variable]
+    cls.add_instance_attribute('name', 'std::string', is_const=False)
+    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::supportLevel [variable]
+    cls.add_instance_attribute('supportLevel', 'ns3::TypeId::SupportLevel', is_const=False)
+    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::supportMsg [variable]
+    cls.add_instance_attribute('supportMsg', 'std::string', is_const=False)
+    return
+
+def register_Ns3Empty_methods(root_module, cls):
+    ## empty.h (module 'core'): ns3::empty::empty() [constructor]
+    cls.add_constructor([])
+    ## empty.h (module 'core'): ns3::empty::empty(ns3::empty const & arg0) [constructor]
+    cls.add_constructor([param('ns3::empty const &', 'arg0')])
+    return
+
+def register_Ns3Int64x64_t_methods(root_module, cls):
+    cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::int64x64_t'], param('ns3::Time const &', 'right'))
+    cls.add_binary_numeric_operator('+', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
+    cls.add_binary_numeric_operator('-', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
+    cls.add_binary_numeric_operator('*', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
+    cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
+    cls.add_binary_comparison_operator('!=')
+    cls.add_binary_comparison_operator('<=')
+    cls.add_binary_comparison_operator('>=')
+    cls.add_output_stream_operator()
+    cls.add_unary_numeric_operator('-')
+    cls.add_inplace_numeric_operator('/=', param('ns3::int64x64_t const &', 'right'))
+    cls.add_inplace_numeric_operator('*=', param('ns3::int64x64_t const &', 'right'))
+    cls.add_inplace_numeric_operator('-=', param('ns3::int64x64_t const &', 'right'))
+    cls.add_inplace_numeric_operator('+=', param('ns3::int64x64_t const &', 'right'))
+    cls.add_binary_comparison_operator('>')
+    cls.add_binary_comparison_operator('<')
+    cls.add_binary_comparison_operator('==')
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t() [constructor]
+    cls.add_constructor([])
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(double const value) [constructor]
+    cls.add_constructor([param('double const', 'value')])
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long double const value) [constructor]
+    cls.add_constructor([param('long double const', 'value')])
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(int const v) [constructor]
+    cls.add_constructor([param('int const', 'v')])
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long int const v) [constructor]
+    cls.add_constructor([param('long int const', 'v')])
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long long int const v) [constructor]
+    cls.add_constructor([param('long long int const', 'v')])
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(unsigned int const v) [constructor]
+    cls.add_constructor([param('unsigned int const', 'v')])
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long unsigned int const v) [constructor]
+    cls.add_constructor([param('long unsigned int const', 'v')])
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long long unsigned int const v) [constructor]
+    cls.add_constructor([param('long long unsigned int const', 'v')])
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(int128_t const v) [constructor]
+    cls.add_constructor([param('int128_t const', 'v')])
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(int64_t const hi, uint64_t const lo) [constructor]
+    cls.add_constructor([param('int64_t const', 'hi'), param('uint64_t const', 'lo')])
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(ns3::int64x64_t const & o) [constructor]
+    cls.add_constructor([param('ns3::int64x64_t const &', 'o')])
+    ## int64x64-128.h (module 'core'): double ns3::int64x64_t::GetDouble() const [member function]
+    cls.add_method('GetDouble', 
+                   'double', 
+                   [], 
+                   is_const=True)
+    ## int64x64-128.h (module 'core'): int64_t ns3::int64x64_t::GetHigh() const [member function]
+    cls.add_method('GetHigh', 
+                   'int64_t', 
+                   [], 
+                   is_const=True)
+    ## int64x64-128.h (module 'core'): int64_t ns3::int64x64_t::GetInt() const [member function]
+    cls.add_method('GetInt', 
+                   'int64_t', 
+                   [], 
+                   is_const=True)
+    ## int64x64-128.h (module 'core'): uint64_t ns3::int64x64_t::GetLow() const [member function]
+    cls.add_method('GetLow', 
+                   'uint64_t', 
+                   [], 
+                   is_const=True)
+    ## int64x64-128.h (module 'core'): static ns3::int64x64_t ns3::int64x64_t::Invert(uint64_t const v) [member function]
+    cls.add_method('Invert', 
+                   'ns3::int64x64_t', 
+                   [param('uint64_t const', 'v')], 
+                   is_static=True)
+    ## int64x64-128.h (module 'core'): void ns3::int64x64_t::MulByInvert(ns3::int64x64_t const & o) [member function]
+    cls.add_method('MulByInvert', 
+                   'void', 
+                   [param('ns3::int64x64_t const &', 'o')])
+    ## int64x64-128.h (module 'core'): int64_t ns3::int64x64_t::Round() const [member function]
+    cls.add_method('Round', 
+                   'int64_t', 
+                   [], 
+                   is_const=True)
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::implementation [variable]
+    cls.add_static_attribute('implementation', 'ns3::int64x64_t::impl_type const', is_const=True)
+    return
+
+def register_Ns3Chunk_methods(root_module, cls):
+    ## chunk.h (module 'network'): ns3::Chunk::Chunk() [constructor]
+    cls.add_constructor([])
+    ## chunk.h (module 'network'): ns3::Chunk::Chunk(ns3::Chunk const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Chunk const &', 'arg0')])
+    ## chunk.h (module 'network'): uint32_t ns3::Chunk::Deserialize(ns3::Buffer::Iterator start) [member function]
+    cls.add_method('Deserialize', 
+                   'uint32_t', 
+                   [param('ns3::Buffer::Iterator', 'start')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## chunk.h (module 'network'): uint32_t ns3::Chunk::Deserialize(ns3::Buffer::Iterator start, ns3::Buffer::Iterator end) [member function]
+    cls.add_method('Deserialize', 
+                   'uint32_t', 
+                   [param('ns3::Buffer::Iterator', 'start'), param('ns3::Buffer::Iterator', 'end')], 
+                   is_virtual=True)
+    ## chunk.h (module 'network'): static ns3::TypeId ns3::Chunk::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## chunk.h (module 'network'): void ns3::Chunk::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3Header_methods(root_module, cls):
+    cls.add_output_stream_operator()
+    ## header.h (module 'network'): ns3::Header::Header() [constructor]
+    cls.add_constructor([])
+    ## header.h (module 'network'): ns3::Header::Header(ns3::Header const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Header const &', 'arg0')])
+    ## header.h (module 'network'): uint32_t ns3::Header::Deserialize(ns3::Buffer::Iterator start) [member function]
+    cls.add_method('Deserialize', 
+                   'uint32_t', 
+                   [param('ns3::Buffer::Iterator', 'start')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## header.h (module 'network'): uint32_t ns3::Header::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## header.h (module 'network'): static ns3::TypeId ns3::Header::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## header.h (module 'network'): void ns3::Header::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## header.h (module 'network'): void ns3::Header::Serialize(ns3::Buffer::Iterator start) const [member function]
+    cls.add_method('Serialize', 
+                   'void', 
+                   [param('ns3::Buffer::Iterator', 'start')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3Ipv4Header_methods(root_module, cls):
+    ## ipv4-header.h (module 'internet'): ns3::Ipv4Header::Ipv4Header(ns3::Ipv4Header const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv4Header const &', 'arg0')])
+    ## ipv4-header.h (module 'internet'): ns3::Ipv4Header::Ipv4Header() [constructor]
+    cls.add_constructor([])
+    ## ipv4-header.h (module 'internet'): uint32_t ns3::Ipv4Header::Deserialize(ns3::Buffer::Iterator start) [member function]
+    cls.add_method('Deserialize', 
+                   'uint32_t', 
+                   [param('ns3::Buffer::Iterator', 'start')], 
+                   is_virtual=True)
+    ## ipv4-header.h (module 'internet'): std::string ns3::Ipv4Header::DscpTypeToString(ns3::Ipv4Header::DscpType dscp) const [member function]
+    cls.add_method('DscpTypeToString', 
+                   'std::string', 
+                   [param('ns3::Ipv4Header::DscpType', 'dscp')], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): std::string ns3::Ipv4Header::EcnTypeToString(ns3::Ipv4Header::EcnType ecn) const [member function]
+    cls.add_method('EcnTypeToString', 
+                   'std::string', 
+                   [param('ns3::Ipv4Header::EcnType', 'ecn')], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::EnableChecksum() [member function]
+    cls.add_method('EnableChecksum', 
+                   'void', 
+                   [])
+    ## ipv4-header.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4Header::GetDestination() const [member function]
+    cls.add_method('GetDestination', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): ns3::Ipv4Header::DscpType ns3::Ipv4Header::GetDscp() const [member function]
+    cls.add_method('GetDscp', 
+                   'ns3::Ipv4Header::DscpType', 
+                   [], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): ns3::Ipv4Header::EcnType ns3::Ipv4Header::GetEcn() const [member function]
+    cls.add_method('GetEcn', 
+                   'ns3::Ipv4Header::EcnType', 
+                   [], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): uint16_t ns3::Ipv4Header::GetFragmentOffset() const [member function]
+    cls.add_method('GetFragmentOffset', 
+                   'uint16_t', 
+                   [], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): uint16_t ns3::Ipv4Header::GetIdentification() const [member function]
+    cls.add_method('GetIdentification', 
+                   'uint16_t', 
+                   [], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): ns3::TypeId ns3::Ipv4Header::GetInstanceTypeId() const [member function]
+    cls.add_method('GetInstanceTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-header.h (module 'internet'): uint16_t ns3::Ipv4Header::GetPayloadSize() const [member function]
+    cls.add_method('GetPayloadSize', 
+                   'uint16_t', 
+                   [], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): uint8_t ns3::Ipv4Header::GetProtocol() const [member function]
+    cls.add_method('GetProtocol', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): uint32_t ns3::Ipv4Header::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-header.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4Header::GetSource() const [member function]
+    cls.add_method('GetSource', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): uint8_t ns3::Ipv4Header::GetTos() const [member function]
+    cls.add_method('GetTos', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): uint8_t ns3::Ipv4Header::GetTtl() const [member function]
+    cls.add_method('GetTtl', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): static ns3::TypeId ns3::Ipv4Header::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## ipv4-header.h (module 'internet'): bool ns3::Ipv4Header::IsChecksumOk() const [member function]
+    cls.add_method('IsChecksumOk', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): bool ns3::Ipv4Header::IsDontFragment() const [member function]
+    cls.add_method('IsDontFragment', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): bool ns3::Ipv4Header::IsLastFragment() const [member function]
+    cls.add_method('IsLastFragment', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::Serialize(ns3::Buffer::Iterator start) const [member function]
+    cls.add_method('Serialize', 
+                   'void', 
+                   [param('ns3::Buffer::Iterator', 'start')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetDestination(ns3::Ipv4Address destination) [member function]
+    cls.add_method('SetDestination', 
+                   'void', 
+                   [param('ns3::Ipv4Address', 'destination')])
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetDontFragment() [member function]
+    cls.add_method('SetDontFragment', 
+                   'void', 
+                   [])
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetDscp(ns3::Ipv4Header::DscpType dscp) [member function]
+    cls.add_method('SetDscp', 
+                   'void', 
+                   [param('ns3::Ipv4Header::DscpType', 'dscp')])
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetEcn(ns3::Ipv4Header::EcnType ecn) [member function]
+    cls.add_method('SetEcn', 
+                   'void', 
+                   [param('ns3::Ipv4Header::EcnType', 'ecn')])
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetFragmentOffset(uint16_t offsetBytes) [member function]
+    cls.add_method('SetFragmentOffset', 
+                   'void', 
+                   [param('uint16_t', 'offsetBytes')])
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetIdentification(uint16_t identification) [member function]
+    cls.add_method('SetIdentification', 
+                   'void', 
+                   [param('uint16_t', 'identification')])
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetLastFragment() [member function]
+    cls.add_method('SetLastFragment', 
+                   'void', 
+                   [])
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetMayFragment() [member function]
+    cls.add_method('SetMayFragment', 
+                   'void', 
+                   [])
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetMoreFragments() [member function]
+    cls.add_method('SetMoreFragments', 
+                   'void', 
+                   [])
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetPayloadSize(uint16_t size) [member function]
+    cls.add_method('SetPayloadSize', 
+                   'void', 
+                   [param('uint16_t', 'size')])
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetProtocol(uint8_t num) [member function]
+    cls.add_method('SetProtocol', 
+                   'void', 
+                   [param('uint8_t', 'num')])
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetSource(ns3::Ipv4Address source) [member function]
+    cls.add_method('SetSource', 
+                   'void', 
+                   [param('ns3::Ipv4Address', 'source')])
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetTos(uint8_t tos) [member function]
+    cls.add_method('SetTos', 
+                   'void', 
+                   [param('uint8_t', 'tos')])
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetTtl(uint8_t ttl) [member function]
+    cls.add_method('SetTtl', 
+                   'void', 
+                   [param('uint8_t', 'ttl')])
+    return
+
+def register_Ns3Ipv6Header_methods(root_module, cls):
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Header::Ipv6Header(ns3::Ipv6Header const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv6Header const &', 'arg0')])
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Header::Ipv6Header() [constructor]
+    cls.add_constructor([])
+    ## ipv6-header.h (module 'internet'): uint32_t ns3::Ipv6Header::Deserialize(ns3::Buffer::Iterator start) [member function]
+    cls.add_method('Deserialize', 
+                   'uint32_t', 
+                   [param('ns3::Buffer::Iterator', 'start')], 
+                   is_virtual=True)
+    ## ipv6-header.h (module 'internet'): std::string ns3::Ipv6Header::DscpTypeToString(ns3::Ipv6Header::DscpType dscp) const [member function]
+    cls.add_method('DscpTypeToString', 
+                   'std::string', 
+                   [param('ns3::Ipv6Header::DscpType', 'dscp')], 
+                   is_const=True)
+    ## ipv6-header.h (module 'internet'): std::string ns3::Ipv6Header::EcnTypeToString(ns3::Ipv6Header::EcnType ecn) const [member function]
+    cls.add_method('EcnTypeToString', 
+                   'std::string', 
+                   [param('ns3::Ipv6Header::EcnType', 'ecn')], 
+                   is_const=True)
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Address ns3::Ipv6Header::GetDestination() const [member function]
+    cls.add_method('GetDestination', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   is_const=True)
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Address ns3::Ipv6Header::GetDestinationAddress() const [member function]
+    cls.add_method('GetDestinationAddress', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   deprecated=True, is_const=True)
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Header::DscpType ns3::Ipv6Header::GetDscp() const [member function]
+    cls.add_method('GetDscp', 
+                   'ns3::Ipv6Header::DscpType', 
+                   [], 
+                   is_const=True)
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Header::EcnType ns3::Ipv6Header::GetEcn() const [member function]
+    cls.add_method('GetEcn', 
+                   'ns3::Ipv6Header::EcnType', 
+                   [], 
+                   is_const=True)
+    ## ipv6-header.h (module 'internet'): uint32_t ns3::Ipv6Header::GetFlowLabel() const [member function]
+    cls.add_method('GetFlowLabel', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## ipv6-header.h (module 'internet'): uint8_t ns3::Ipv6Header::GetHopLimit() const [member function]
+    cls.add_method('GetHopLimit', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## ipv6-header.h (module 'internet'): ns3::TypeId ns3::Ipv6Header::GetInstanceTypeId() const [member function]
+    cls.add_method('GetInstanceTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-header.h (module 'internet'): uint8_t ns3::Ipv6Header::GetNextHeader() const [member function]
+    cls.add_method('GetNextHeader', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## ipv6-header.h (module 'internet'): uint16_t ns3::Ipv6Header::GetPayloadLength() const [member function]
+    cls.add_method('GetPayloadLength', 
+                   'uint16_t', 
+                   [], 
+                   is_const=True)
+    ## ipv6-header.h (module 'internet'): uint32_t ns3::Ipv6Header::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Address ns3::Ipv6Header::GetSource() const [member function]
+    cls.add_method('GetSource', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   is_const=True)
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Address ns3::Ipv6Header::GetSourceAddress() const [member function]
+    cls.add_method('GetSourceAddress', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   deprecated=True, is_const=True)
+    ## ipv6-header.h (module 'internet'): uint8_t ns3::Ipv6Header::GetTrafficClass() const [member function]
+    cls.add_method('GetTrafficClass', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## ipv6-header.h (module 'internet'): static ns3::TypeId ns3::Ipv6Header::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## ipv6-header.h (module 'internet'): void ns3::Ipv6Header::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-header.h (module 'internet'): void ns3::Ipv6Header::Serialize(ns3::Buffer::Iterator start) const [member function]
+    cls.add_method('Serialize', 
+                   'void', 
+                   [param('ns3::Buffer::Iterator', 'start')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-header.h (module 'internet'): void ns3::Ipv6Header::SetDestination(ns3::Ipv6Address dst) [member function]
+    cls.add_method('SetDestination', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'dst')])
+    ## ipv6-header.h (module 'internet'): void ns3::Ipv6Header::SetDestinationAddress(ns3::Ipv6Address dst) [member function]
+    cls.add_method('SetDestinationAddress', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'dst')], 
+                   deprecated=True)
+    ## ipv6-header.h (module 'internet'): void ns3::Ipv6Header::SetDscp(ns3::Ipv6Header::DscpType dscp) [member function]
+    cls.add_method('SetDscp', 
+                   'void', 
+                   [param('ns3::Ipv6Header::DscpType', 'dscp')])
+    ## ipv6-header.h (module 'internet'): void ns3::Ipv6Header::SetEcn(ns3::Ipv6Header::EcnType ecn) [member function]
+    cls.add_method('SetEcn', 
+                   'void', 
+                   [param('ns3::Ipv6Header::EcnType', 'ecn')])
+    ## ipv6-header.h (module 'internet'): void ns3::Ipv6Header::SetFlowLabel(uint32_t flow) [member function]
+    cls.add_method('SetFlowLabel', 
+                   'void', 
+                   [param('uint32_t', 'flow')])
+    ## ipv6-header.h (module 'internet'): void ns3::Ipv6Header::SetHopLimit(uint8_t limit) [member function]
+    cls.add_method('SetHopLimit', 
+                   'void', 
+                   [param('uint8_t', 'limit')])
+    ## ipv6-header.h (module 'internet'): void ns3::Ipv6Header::SetNextHeader(uint8_t next) [member function]
+    cls.add_method('SetNextHeader', 
+                   'void', 
+                   [param('uint8_t', 'next')])
+    ## ipv6-header.h (module 'internet'): void ns3::Ipv6Header::SetPayloadLength(uint16_t len) [member function]
+    cls.add_method('SetPayloadLength', 
+                   'void', 
+                   [param('uint16_t', 'len')])
+    ## ipv6-header.h (module 'internet'): void ns3::Ipv6Header::SetSource(ns3::Ipv6Address src) [member function]
+    cls.add_method('SetSource', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'src')])
+    ## ipv6-header.h (module 'internet'): void ns3::Ipv6Header::SetSourceAddress(ns3::Ipv6Address src) [member function]
+    cls.add_method('SetSourceAddress', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'src')], 
+                   deprecated=True)
+    ## ipv6-header.h (module 'internet'): void ns3::Ipv6Header::SetTrafficClass(uint8_t traffic) [member function]
+    cls.add_method('SetTrafficClass', 
+                   'void', 
+                   [param('uint8_t', 'traffic')])
+    return
+
+def register_Ns3Object_methods(root_module, cls):
+    ## object.h (module 'core'): ns3::Object::Object() [constructor]
+    cls.add_constructor([])
+    ## object.h (module 'core'): void ns3::Object::AggregateObject(ns3::Ptr<ns3::Object> other) [member function]
+    cls.add_method('AggregateObject', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Object >', 'other')])
+    ## object.h (module 'core'): void ns3::Object::Dispose() [member function]
+    cls.add_method('Dispose', 
+                   'void', 
+                   [])
+    ## object.h (module 'core'): ns3::Object::AggregateIterator ns3::Object::GetAggregateIterator() const [member function]
+    cls.add_method('GetAggregateIterator', 
+                   'ns3::Object::AggregateIterator', 
+                   [], 
+                   is_const=True)
+    ## object.h (module 'core'): ns3::TypeId ns3::Object::GetInstanceTypeId() const [member function]
+    cls.add_method('GetInstanceTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## object.h (module 'core'): ns3::Ptr<ns3::Object> ns3::Object::GetObject() const [member function]
+    cls.add_method('GetObject', 
+                   'ns3::Ptr< ns3::Object >', 
+                   [], 
+                   custom_template_method_name='GetObject', is_const=True, template_parameters=['ns3::Object'])
+    ## object.h (module 'core'): ns3::Ptr<ns3::Object> ns3::Object::GetObject(ns3::TypeId tid) const [member function]
+    cls.add_method('GetObject', 
+                   'ns3::Ptr< ns3::Object >', 
+                   [param('ns3::TypeId', 'tid')], 
+                   custom_template_method_name='GetObject', is_const=True, template_parameters=['ns3::Object'])
+    ## object.h (module 'core'): static ns3::TypeId ns3::Object::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## object.h (module 'core'): void ns3::Object::Initialize() [member function]
+    cls.add_method('Initialize', 
+                   'void', 
+                   [])
+    ## object.h (module 'core'): bool ns3::Object::IsInitialized() const [member function]
+    cls.add_method('IsInitialized', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## object.h (module 'core'): ns3::Object::Object(ns3::Object const & o) [constructor]
+    cls.add_constructor([param('ns3::Object const &', 'o')], 
+                        visibility='protected')
+    ## object.h (module 'core'): void ns3::Object::DoDispose() [member function]
+    cls.add_method('DoDispose', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    ## object.h (module 'core'): void ns3::Object::DoInitialize() [member function]
+    cls.add_method('DoInitialize', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    ## object.h (module 'core'): void ns3::Object::NotifyNewAggregate() [member function]
+    cls.add_method('NotifyNewAggregate', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    return
+
+def register_Ns3ObjectAggregateIterator_methods(root_module, cls):
+    ## object.h (module 'core'): ns3::Object::AggregateIterator::AggregateIterator(ns3::Object::AggregateIterator const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Object::AggregateIterator const &', 'arg0')])
+    ## object.h (module 'core'): ns3::Object::AggregateIterator::AggregateIterator() [constructor]
+    cls.add_constructor([])
+    ## object.h (module 'core'): bool ns3::Object::AggregateIterator::HasNext() const [member function]
+    cls.add_method('HasNext', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## object.h (module 'core'): ns3::Ptr<const ns3::Object> ns3::Object::AggregateIterator::Next() [member function]
+    cls.add_method('Next', 
+                   'ns3::Ptr< ns3::Object const >', 
+                   [])
+    return
+
+def register_Ns3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor>>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor>>::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor>> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter< ns3::AttributeAccessor > > const &', 'o')])
+    return
+
+def register_Ns3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker>>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker>>::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker>> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter< ns3::AttributeChecker > > const &', 'o')])
+    return
+
+def register_Ns3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue>>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue>>::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue>> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter< ns3::AttributeValue > > const &', 'o')])
+    return
+
+def register_Ns3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase>>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase>>::SimpleRefCount(ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase>> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter< ns3::CallbackImplBase > > const &', 'o')])
+    return
+
+def register_Ns3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl>>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl>>::SimpleRefCount(ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl>> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter< ns3::EventImpl > > const &', 'o')])
+    return
+
+def register_Ns3SimpleRefCount__Ns3FlowClassifier_Ns3Empty_Ns3DefaultDeleter__lt__ns3FlowClassifier__gt___methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::FlowClassifier, ns3::empty, ns3::DefaultDeleter<ns3::FlowClassifier>>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::FlowClassifier, ns3::empty, ns3::DefaultDeleter<ns3::FlowClassifier>>::SimpleRefCount(ns3::SimpleRefCount<ns3::FlowClassifier, ns3::empty, ns3::DefaultDeleter<ns3::FlowClassifier>> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::FlowClassifier, ns3::empty, ns3::DefaultDeleter< ns3::FlowClassifier > > const &', 'o')])
+    return
+
+def register_Ns3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation>>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation>>::SimpleRefCount(ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation>> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter< ns3::Hash::Implementation > > const &', 'o')])
+    return
+
+def register_Ns3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute>>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute>>::SimpleRefCount(ns3::SimpleRefCount<ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute>> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter< ns3::Ipv4MulticastRoute > > const &', 'o')])
+    return
+
+def register_Ns3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt___methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route>>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route>>::SimpleRefCount(ns3::SimpleRefCount<ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route>> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter< ns3::Ipv4Route > > const &', 'o')])
+    return
+
+def register_Ns3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector>>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector>>::SimpleRefCount(ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector>> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter< ns3::NixVector > > const &', 'o')])
+    return
+
+def register_Ns3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper>>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper>>::SimpleRefCount(ns3::SimpleRefCount<ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper>> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter< ns3::OutputStreamWrapper > > const &', 'o')])
+    return
+
+def register_Ns3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet>>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet>>::SimpleRefCount(ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet>> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter< ns3::Packet > > const &', 'o')])
+    return
+
+def register_Ns3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem>>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem>>::SimpleRefCount(ns3::SimpleRefCount<ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem>> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::QueueItem, ns3::empty, ns3::DefaultDeleter< ns3::QueueItem > > const &', 'o')])
+    return
+
+def register_Ns3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor>>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor>>::SimpleRefCount(ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor>> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter< ns3::TraceSourceAccessor > > const &', 'o')])
+    return
+
+def register_Ns3Socket_methods(root_module, cls):
+    ## socket.h (module 'network'): ns3::Socket::Socket(ns3::Socket const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Socket const &', 'arg0')])
+    ## socket.h (module 'network'): ns3::Socket::Socket() [constructor]
+    cls.add_constructor([])
+    ## socket.h (module 'network'): int ns3::Socket::Bind(ns3::Address const & address) [member function]
+    cls.add_method('Bind', 
+                   'int', 
+                   [param('ns3::Address const &', 'address')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): int ns3::Socket::Bind() [member function]
+    cls.add_method('Bind', 
+                   'int', 
+                   [], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): int ns3::Socket::Bind6() [member function]
+    cls.add_method('Bind6', 
+                   'int', 
+                   [], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): void ns3::Socket::BindToNetDevice(ns3::Ptr<ns3::NetDevice> netdevice) [member function]
+    cls.add_method('BindToNetDevice', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::NetDevice >', 'netdevice')], 
+                   is_virtual=True)
+    ## socket.h (module 'network'): int ns3::Socket::Close() [member function]
+    cls.add_method('Close', 
+                   'int', 
+                   [], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): int ns3::Socket::Connect(ns3::Address const & address) [member function]
+    cls.add_method('Connect', 
+                   'int', 
+                   [param('ns3::Address const &', 'address')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): static ns3::Ptr<ns3::Socket> ns3::Socket::CreateSocket(ns3::Ptr<ns3::Node> node, ns3::TypeId tid) [member function]
+    cls.add_method('CreateSocket', 
+                   'ns3::Ptr< ns3::Socket >', 
+                   [param('ns3::Ptr< ns3::Node >', 'node'), param('ns3::TypeId', 'tid')], 
+                   is_static=True)
+    ## socket.h (module 'network'): bool ns3::Socket::GetAllowBroadcast() const [member function]
+    cls.add_method('GetAllowBroadcast', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): ns3::Ptr<ns3::NetDevice> ns3::Socket::GetBoundNetDevice() [member function]
+    cls.add_method('GetBoundNetDevice', 
+                   'ns3::Ptr< ns3::NetDevice >', 
+                   [])
+    ## socket.h (module 'network'): ns3::Socket::SocketErrno ns3::Socket::GetErrno() const [member function]
+    cls.add_method('GetErrno', 
+                   'ns3::Socket::SocketErrno', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): uint8_t ns3::Socket::GetIpTos() const [member function]
+    cls.add_method('GetIpTos', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## socket.h (module 'network'): uint8_t ns3::Socket::GetIpTtl() const [member function]
+    cls.add_method('GetIpTtl', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): uint8_t ns3::Socket::GetIpv6HopLimit() const [member function]
+    cls.add_method('GetIpv6HopLimit', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): uint8_t ns3::Socket::GetIpv6Tclass() const [member function]
+    cls.add_method('GetIpv6Tclass', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## socket.h (module 'network'): ns3::Ptr<ns3::Node> ns3::Socket::GetNode() const [member function]
+    cls.add_method('GetNode', 
+                   'ns3::Ptr< ns3::Node >', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): int ns3::Socket::GetPeerName(ns3::Address & address) const [member function]
+    cls.add_method('GetPeerName', 
+                   'int', 
+                   [param('ns3::Address &', 'address')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): uint8_t ns3::Socket::GetPriority() const [member function]
+    cls.add_method('GetPriority', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## socket.h (module 'network'): uint32_t ns3::Socket::GetRxAvailable() const [member function]
+    cls.add_method('GetRxAvailable', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): int ns3::Socket::GetSockName(ns3::Address & address) const [member function]
+    cls.add_method('GetSockName', 
+                   'int', 
+                   [param('ns3::Address &', 'address')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): ns3::Socket::SocketType ns3::Socket::GetSocketType() const [member function]
+    cls.add_method('GetSocketType', 
+                   'ns3::Socket::SocketType', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): uint32_t ns3::Socket::GetTxAvailable() const [member function]
+    cls.add_method('GetTxAvailable', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): static ns3::TypeId ns3::Socket::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## socket.h (module 'network'): static uint8_t ns3::Socket::IpTos2Priority(uint8_t ipTos) [member function]
+    cls.add_method('IpTos2Priority', 
+                   'uint8_t', 
+                   [param('uint8_t', 'ipTos')], 
+                   is_static=True)
+    ## socket.h (module 'network'): void ns3::Socket::Ipv6JoinGroup(ns3::Ipv6Address address, ns3::Socket::Ipv6MulticastFilterMode filterMode, std::vector<ns3::Ipv6Address, std::allocator<ns3::Ipv6Address>> sourceAddresses) [member function]
+    cls.add_method('Ipv6JoinGroup', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'address'), param('ns3::Socket::Ipv6MulticastFilterMode', 'filterMode'), param('std::vector< ns3::Ipv6Address >', 'sourceAddresses')], 
+                   is_virtual=True)
+    ## socket.h (module 'network'): void ns3::Socket::Ipv6JoinGroup(ns3::Ipv6Address address) [member function]
+    cls.add_method('Ipv6JoinGroup', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'address')], 
+                   is_virtual=True)
+    ## socket.h (module 'network'): void ns3::Socket::Ipv6LeaveGroup() [member function]
+    cls.add_method('Ipv6LeaveGroup', 
+                   'void', 
+                   [], 
+                   is_virtual=True)
+    ## socket.h (module 'network'): bool ns3::Socket::IsIpRecvTos() const [member function]
+    cls.add_method('IsIpRecvTos', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## socket.h (module 'network'): bool ns3::Socket::IsIpRecvTtl() const [member function]
+    cls.add_method('IsIpRecvTtl', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## socket.h (module 'network'): bool ns3::Socket::IsIpv6RecvHopLimit() const [member function]
+    cls.add_method('IsIpv6RecvHopLimit', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## socket.h (module 'network'): bool ns3::Socket::IsIpv6RecvTclass() const [member function]
+    cls.add_method('IsIpv6RecvTclass', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## socket.h (module 'network'): bool ns3::Socket::IsRecvPktInfo() const [member function]
+    cls.add_method('IsRecvPktInfo', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## socket.h (module 'network'): int ns3::Socket::Listen() [member function]
+    cls.add_method('Listen', 
+                   'int', 
+                   [], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Socket::Recv(uint32_t maxSize, uint32_t flags) [member function]
+    cls.add_method('Recv', 
+                   'ns3::Ptr< ns3::Packet >', 
+                   [param('uint32_t', 'maxSize'), param('uint32_t', 'flags')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Socket::Recv() [member function]
+    cls.add_method('Recv', 
+                   'ns3::Ptr< ns3::Packet >', 
+                   [])
+    ## socket.h (module 'network'): int ns3::Socket::Recv(uint8_t * buf, uint32_t size, uint32_t flags) [member function]
+    cls.add_method('Recv', 
+                   'int', 
+                   [param('uint8_t *', 'buf'), param('uint32_t', 'size'), param('uint32_t', 'flags')])
+    ## socket.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Socket::RecvFrom(uint32_t maxSize, uint32_t flags, ns3::Address & fromAddress) [member function]
+    cls.add_method('RecvFrom', 
+                   'ns3::Ptr< ns3::Packet >', 
+                   [param('uint32_t', 'maxSize'), param('uint32_t', 'flags'), param('ns3::Address &', 'fromAddress')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Socket::RecvFrom(ns3::Address & fromAddress) [member function]
+    cls.add_method('RecvFrom', 
+                   'ns3::Ptr< ns3::Packet >', 
+                   [param('ns3::Address &', 'fromAddress')])
+    ## socket.h (module 'network'): int ns3::Socket::RecvFrom(uint8_t * buf, uint32_t size, uint32_t flags, ns3::Address & fromAddress) [member function]
+    cls.add_method('RecvFrom', 
+                   'int', 
+                   [param('uint8_t *', 'buf'), param('uint32_t', 'size'), param('uint32_t', 'flags'), param('ns3::Address &', 'fromAddress')])
+    ## socket.h (module 'network'): int ns3::Socket::Send(ns3::Ptr<ns3::Packet> p, uint32_t flags) [member function]
+    cls.add_method('Send', 
+                   'int', 
+                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('uint32_t', 'flags')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): int ns3::Socket::Send(ns3::Ptr<ns3::Packet> p) [member function]
+    cls.add_method('Send', 
+                   'int', 
+                   [param('ns3::Ptr< ns3::Packet >', 'p')])
+    ## socket.h (module 'network'): int ns3::Socket::Send(uint8_t const * buf, uint32_t size, uint32_t flags) [member function]
+    cls.add_method('Send', 
+                   'int', 
+                   [param('uint8_t const *', 'buf'), param('uint32_t', 'size'), param('uint32_t', 'flags')])
+    ## socket.h (module 'network'): int ns3::Socket::SendTo(ns3::Ptr<ns3::Packet> p, uint32_t flags, ns3::Address const & toAddress) [member function]
+    cls.add_method('SendTo', 
+                   'int', 
+                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('uint32_t', 'flags'), param('ns3::Address const &', 'toAddress')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): int ns3::Socket::SendTo(uint8_t const * buf, uint32_t size, uint32_t flags, ns3::Address const & address) [member function]
+    cls.add_method('SendTo', 
+                   'int', 
+                   [param('uint8_t const *', 'buf'), param('uint32_t', 'size'), param('uint32_t', 'flags'), param('ns3::Address const &', 'address')])
+    ## socket.h (module 'network'): void ns3::Socket::SetAcceptCallback(ns3::Callback<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> connectionRequest, ns3::Callback<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> newConnectionCreated) [member function]
+    cls.add_method('SetAcceptCallback', 
+                   'void', 
+                   [param('ns3::Callback< bool, ns3::Ptr< ns3::Socket >, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'connectionRequest'), param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'newConnectionCreated')])
+    ## socket.h (module 'network'): bool ns3::Socket::SetAllowBroadcast(bool allowBroadcast) [member function]
+    cls.add_method('SetAllowBroadcast', 
+                   'bool', 
+                   [param('bool', 'allowBroadcast')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): void ns3::Socket::SetCloseCallbacks(ns3::Callback<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> normalClose, ns3::Callback<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> errorClose) [member function]
+    cls.add_method('SetCloseCallbacks', 
+                   'void', 
+                   [param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'normalClose'), param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'errorClose')])
+    ## socket.h (module 'network'): void ns3::Socket::SetConnectCallback(ns3::Callback<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> connectionSucceeded, ns3::Callback<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> connectionFailed) [member function]
+    cls.add_method('SetConnectCallback', 
+                   'void', 
+                   [param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'connectionSucceeded'), param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'connectionFailed')])
+    ## socket.h (module 'network'): void ns3::Socket::SetDataSentCallback(ns3::Callback<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> dataSent) [member function]
+    cls.add_method('SetDataSentCallback', 
+                   'void', 
+                   [param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'dataSent')])
+    ## socket.h (module 'network'): void ns3::Socket::SetIpRecvTos(bool ipv4RecvTos) [member function]
+    cls.add_method('SetIpRecvTos', 
+                   'void', 
+                   [param('bool', 'ipv4RecvTos')])
+    ## socket.h (module 'network'): void ns3::Socket::SetIpRecvTtl(bool ipv4RecvTtl) [member function]
+    cls.add_method('SetIpRecvTtl', 
+                   'void', 
+                   [param('bool', 'ipv4RecvTtl')])
+    ## socket.h (module 'network'): void ns3::Socket::SetIpTos(uint8_t ipTos) [member function]
+    cls.add_method('SetIpTos', 
+                   'void', 
+                   [param('uint8_t', 'ipTos')])
+    ## socket.h (module 'network'): void ns3::Socket::SetIpTtl(uint8_t ipTtl) [member function]
+    cls.add_method('SetIpTtl', 
+                   'void', 
+                   [param('uint8_t', 'ipTtl')], 
+                   is_virtual=True)
+    ## socket.h (module 'network'): void ns3::Socket::SetIpv6HopLimit(uint8_t ipHopLimit) [member function]
+    cls.add_method('SetIpv6HopLimit', 
+                   'void', 
+                   [param('uint8_t', 'ipHopLimit')], 
+                   is_virtual=True)
+    ## socket.h (module 'network'): void ns3::Socket::SetIpv6RecvHopLimit(bool ipv6RecvHopLimit) [member function]
+    cls.add_method('SetIpv6RecvHopLimit', 
+                   'void', 
+                   [param('bool', 'ipv6RecvHopLimit')])
+    ## socket.h (module 'network'): void ns3::Socket::SetIpv6RecvTclass(bool ipv6RecvTclass) [member function]
+    cls.add_method('SetIpv6RecvTclass', 
+                   'void', 
+                   [param('bool', 'ipv6RecvTclass')])
+    ## socket.h (module 'network'): void ns3::Socket::SetIpv6Tclass(int ipTclass) [member function]
+    cls.add_method('SetIpv6Tclass', 
+                   'void', 
+                   [param('int', 'ipTclass')])
+    ## socket.h (module 'network'): void ns3::Socket::SetPriority(uint8_t priority) [member function]
+    cls.add_method('SetPriority', 
+                   'void', 
+                   [param('uint8_t', 'priority')])
+    ## socket.h (module 'network'): void ns3::Socket::SetRecvCallback(ns3::Callback<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> receivedData) [member function]
+    cls.add_method('SetRecvCallback', 
+                   'void', 
+                   [param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'receivedData')])
+    ## socket.h (module 'network'): void ns3::Socket::SetRecvPktInfo(bool flag) [member function]
+    cls.add_method('SetRecvPktInfo', 
+                   'void', 
+                   [param('bool', 'flag')])
+    ## socket.h (module 'network'): void ns3::Socket::SetSendCallback(ns3::Callback<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> sendCb) [member function]
+    cls.add_method('SetSendCallback', 
+                   'void', 
+                   [param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'sendCb')])
+    ## socket.h (module 'network'): int ns3::Socket::ShutdownRecv() [member function]
+    cls.add_method('ShutdownRecv', 
+                   'int', 
+                   [], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): int ns3::Socket::ShutdownSend() [member function]
+    cls.add_method('ShutdownSend', 
+                   'int', 
+                   [], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): void ns3::Socket::DoDispose() [member function]
+    cls.add_method('DoDispose', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    ## socket.h (module 'network'): bool ns3::Socket::IsManualIpTtl() const [member function]
+    cls.add_method('IsManualIpTtl', 
+                   'bool', 
+                   [], 
+                   is_const=True, visibility='protected')
+    ## socket.h (module 'network'): bool ns3::Socket::IsManualIpv6HopLimit() const [member function]
+    cls.add_method('IsManualIpv6HopLimit', 
+                   'bool', 
+                   [], 
+                   is_const=True, visibility='protected')
+    ## socket.h (module 'network'): bool ns3::Socket::IsManualIpv6Tclass() const [member function]
+    cls.add_method('IsManualIpv6Tclass', 
+                   'bool', 
+                   [], 
+                   is_const=True, visibility='protected')
+    ## socket.h (module 'network'): void ns3::Socket::NotifyConnectionFailed() [member function]
+    cls.add_method('NotifyConnectionFailed', 
+                   'void', 
+                   [], 
+                   visibility='protected')
+    ## socket.h (module 'network'): bool ns3::Socket::NotifyConnectionRequest(ns3::Address const & from) [member function]
+    cls.add_method('NotifyConnectionRequest', 
+                   'bool', 
+                   [param('ns3::Address const &', 'from')], 
+                   visibility='protected')
+    ## socket.h (module 'network'): void ns3::Socket::NotifyConnectionSucceeded() [member function]
+    cls.add_method('NotifyConnectionSucceeded', 
+                   'void', 
+                   [], 
+                   visibility='protected')
+    ## socket.h (module 'network'): void ns3::Socket::NotifyDataRecv() [member function]
+    cls.add_method('NotifyDataRecv', 
+                   'void', 
+                   [], 
+                   visibility='protected')
+    ## socket.h (module 'network'): void ns3::Socket::NotifyDataSent(uint32_t size) [member function]
+    cls.add_method('NotifyDataSent', 
+                   'void', 
+                   [param('uint32_t', 'size')], 
+                   visibility='protected')
+    ## socket.h (module 'network'): void ns3::Socket::NotifyErrorClose() [member function]
+    cls.add_method('NotifyErrorClose', 
+                   'void', 
+                   [], 
+                   visibility='protected')
+    ## socket.h (module 'network'): void ns3::Socket::NotifyNewConnectionCreated(ns3::Ptr<ns3::Socket> socket, ns3::Address const & from) [member function]
+    cls.add_method('NotifyNewConnectionCreated', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Socket >', 'socket'), param('ns3::Address const &', 'from')], 
+                   visibility='protected')
+    ## socket.h (module 'network'): void ns3::Socket::NotifyNormalClose() [member function]
+    cls.add_method('NotifyNormalClose', 
+                   'void', 
+                   [], 
+                   visibility='protected')
+    ## socket.h (module 'network'): void ns3::Socket::NotifySend(uint32_t spaceAvailable) [member function]
+    cls.add_method('NotifySend', 
+                   'void', 
+                   [param('uint32_t', 'spaceAvailable')], 
+                   visibility='protected')
+    return
+
+def register_Ns3SocketIpTosTag_methods(root_module, cls):
+    ## socket.h (module 'network'): ns3::SocketIpTosTag::SocketIpTosTag(ns3::SocketIpTosTag const & arg0) [constructor]
+    cls.add_constructor([param('ns3::SocketIpTosTag const &', 'arg0')])
+    ## socket.h (module 'network'): ns3::SocketIpTosTag::SocketIpTosTag() [constructor]
+    cls.add_constructor([])
+    ## socket.h (module 'network'): void ns3::SocketIpTosTag::Deserialize(ns3::TagBuffer i) [member function]
+    cls.add_method('Deserialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'i')], 
+                   is_virtual=True)
+    ## socket.h (module 'network'): ns3::TypeId ns3::SocketIpTosTag::GetInstanceTypeId() const [member function]
+    cls.add_method('GetInstanceTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): uint32_t ns3::SocketIpTosTag::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): uint8_t ns3::SocketIpTosTag::GetTos() const [member function]
+    cls.add_method('GetTos', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketIpTosTag::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## socket.h (module 'network'): void ns3::SocketIpTosTag::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): void ns3::SocketIpTosTag::Serialize(ns3::TagBuffer i) const [member function]
+    cls.add_method('Serialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'i')], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): void ns3::SocketIpTosTag::SetTos(uint8_t tos) [member function]
+    cls.add_method('SetTos', 
+                   'void', 
+                   [param('uint8_t', 'tos')])
+    return
+
+def register_Ns3SocketIpTtlTag_methods(root_module, cls):
+    ## socket.h (module 'network'): ns3::SocketIpTtlTag::SocketIpTtlTag(ns3::SocketIpTtlTag const & arg0) [constructor]
+    cls.add_constructor([param('ns3::SocketIpTtlTag const &', 'arg0')])
+    ## socket.h (module 'network'): ns3::SocketIpTtlTag::SocketIpTtlTag() [constructor]
+    cls.add_constructor([])
+    ## socket.h (module 'network'): void ns3::SocketIpTtlTag::Deserialize(ns3::TagBuffer i) [member function]
+    cls.add_method('Deserialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'i')], 
+                   is_virtual=True)
+    ## socket.h (module 'network'): ns3::TypeId ns3::SocketIpTtlTag::GetInstanceTypeId() const [member function]
+    cls.add_method('GetInstanceTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): uint32_t ns3::SocketIpTtlTag::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): uint8_t ns3::SocketIpTtlTag::GetTtl() const [member function]
+    cls.add_method('GetTtl', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketIpTtlTag::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## socket.h (module 'network'): void ns3::SocketIpTtlTag::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): void ns3::SocketIpTtlTag::Serialize(ns3::TagBuffer i) const [member function]
+    cls.add_method('Serialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'i')], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): void ns3::SocketIpTtlTag::SetTtl(uint8_t ttl) [member function]
+    cls.add_method('SetTtl', 
+                   'void', 
+                   [param('uint8_t', 'ttl')])
+    return
+
+def register_Ns3SocketIpv6HopLimitTag_methods(root_module, cls):
+    ## socket.h (module 'network'): ns3::SocketIpv6HopLimitTag::SocketIpv6HopLimitTag(ns3::SocketIpv6HopLimitTag const & arg0) [constructor]
+    cls.add_constructor([param('ns3::SocketIpv6HopLimitTag const &', 'arg0')])
+    ## socket.h (module 'network'): ns3::SocketIpv6HopLimitTag::SocketIpv6HopLimitTag() [constructor]
+    cls.add_constructor([])
+    ## socket.h (module 'network'): void ns3::SocketIpv6HopLimitTag::Deserialize(ns3::TagBuffer i) [member function]
+    cls.add_method('Deserialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'i')], 
+                   is_virtual=True)
+    ## socket.h (module 'network'): uint8_t ns3::SocketIpv6HopLimitTag::GetHopLimit() const [member function]
+    cls.add_method('GetHopLimit', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## socket.h (module 'network'): ns3::TypeId ns3::SocketIpv6HopLimitTag::GetInstanceTypeId() const [member function]
+    cls.add_method('GetInstanceTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): uint32_t ns3::SocketIpv6HopLimitTag::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketIpv6HopLimitTag::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## socket.h (module 'network'): void ns3::SocketIpv6HopLimitTag::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): void ns3::SocketIpv6HopLimitTag::Serialize(ns3::TagBuffer i) const [member function]
+    cls.add_method('Serialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'i')], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): void ns3::SocketIpv6HopLimitTag::SetHopLimit(uint8_t hopLimit) [member function]
+    cls.add_method('SetHopLimit', 
+                   'void', 
+                   [param('uint8_t', 'hopLimit')])
+    return
+
+def register_Ns3SocketIpv6TclassTag_methods(root_module, cls):
+    ## socket.h (module 'network'): ns3::SocketIpv6TclassTag::SocketIpv6TclassTag(ns3::SocketIpv6TclassTag const & arg0) [constructor]
+    cls.add_constructor([param('ns3::SocketIpv6TclassTag const &', 'arg0')])
+    ## socket.h (module 'network'): ns3::SocketIpv6TclassTag::SocketIpv6TclassTag() [constructor]
+    cls.add_constructor([])
+    ## socket.h (module 'network'): void ns3::SocketIpv6TclassTag::Deserialize(ns3::TagBuffer i) [member function]
+    cls.add_method('Deserialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'i')], 
+                   is_virtual=True)
+    ## socket.h (module 'network'): ns3::TypeId ns3::SocketIpv6TclassTag::GetInstanceTypeId() const [member function]
+    cls.add_method('GetInstanceTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): uint32_t ns3::SocketIpv6TclassTag::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): uint8_t ns3::SocketIpv6TclassTag::GetTclass() const [member function]
+    cls.add_method('GetTclass', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketIpv6TclassTag::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## socket.h (module 'network'): void ns3::SocketIpv6TclassTag::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): void ns3::SocketIpv6TclassTag::Serialize(ns3::TagBuffer i) const [member function]
+    cls.add_method('Serialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'i')], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): void ns3::SocketIpv6TclassTag::SetTclass(uint8_t tclass) [member function]
+    cls.add_method('SetTclass', 
+                   'void', 
+                   [param('uint8_t', 'tclass')])
+    return
+
+def register_Ns3SocketPriorityTag_methods(root_module, cls):
+    ## socket.h (module 'network'): ns3::SocketPriorityTag::SocketPriorityTag(ns3::SocketPriorityTag const & arg0) [constructor]
+    cls.add_constructor([param('ns3::SocketPriorityTag const &', 'arg0')])
+    ## socket.h (module 'network'): ns3::SocketPriorityTag::SocketPriorityTag() [constructor]
+    cls.add_constructor([])
+    ## socket.h (module 'network'): void ns3::SocketPriorityTag::Deserialize(ns3::TagBuffer i) [member function]
+    cls.add_method('Deserialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'i')], 
+                   is_virtual=True)
+    ## socket.h (module 'network'): ns3::TypeId ns3::SocketPriorityTag::GetInstanceTypeId() const [member function]
+    cls.add_method('GetInstanceTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): uint8_t ns3::SocketPriorityTag::GetPriority() const [member function]
+    cls.add_method('GetPriority', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## socket.h (module 'network'): uint32_t ns3::SocketPriorityTag::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketPriorityTag::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## socket.h (module 'network'): void ns3::SocketPriorityTag::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): void ns3::SocketPriorityTag::Serialize(ns3::TagBuffer i) const [member function]
+    cls.add_method('Serialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'i')], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): void ns3::SocketPriorityTag::SetPriority(uint8_t priority) [member function]
+    cls.add_method('SetPriority', 
+                   'void', 
+                   [param('uint8_t', 'priority')])
+    return
+
+def register_Ns3SocketSetDontFragmentTag_methods(root_module, cls):
+    ## socket.h (module 'network'): ns3::SocketSetDontFragmentTag::SocketSetDontFragmentTag(ns3::SocketSetDontFragmentTag const & arg0) [constructor]
+    cls.add_constructor([param('ns3::SocketSetDontFragmentTag const &', 'arg0')])
+    ## socket.h (module 'network'): ns3::SocketSetDontFragmentTag::SocketSetDontFragmentTag() [constructor]
+    cls.add_constructor([])
+    ## socket.h (module 'network'): void ns3::SocketSetDontFragmentTag::Deserialize(ns3::TagBuffer i) [member function]
+    cls.add_method('Deserialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'i')], 
+                   is_virtual=True)
+    ## socket.h (module 'network'): void ns3::SocketSetDontFragmentTag::Disable() [member function]
+    cls.add_method('Disable', 
+                   'void', 
+                   [])
+    ## socket.h (module 'network'): void ns3::SocketSetDontFragmentTag::Enable() [member function]
+    cls.add_method('Enable', 
+                   'void', 
+                   [])
+    ## socket.h (module 'network'): ns3::TypeId ns3::SocketSetDontFragmentTag::GetInstanceTypeId() const [member function]
+    cls.add_method('GetInstanceTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): uint32_t ns3::SocketSetDontFragmentTag::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketSetDontFragmentTag::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## socket.h (module 'network'): bool ns3::SocketSetDontFragmentTag::IsEnabled() const [member function]
+    cls.add_method('IsEnabled', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## socket.h (module 'network'): void ns3::SocketSetDontFragmentTag::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): void ns3::SocketSetDontFragmentTag::Serialize(ns3::TagBuffer i) const [member function]
+    cls.add_method('Serialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'i')], 
+                   is_const=True, is_virtual=True)
+    return
+
+def register_Ns3TraceSourceAccessor_methods(root_module, cls):
+    ## trace-source-accessor.h (module 'core'): ns3::TraceSourceAccessor::TraceSourceAccessor(ns3::TraceSourceAccessor const & arg0) [constructor]
+    cls.add_constructor([param('ns3::TraceSourceAccessor const &', 'arg0')])
+    ## trace-source-accessor.h (module 'core'): ns3::TraceSourceAccessor::TraceSourceAccessor() [constructor]
+    cls.add_constructor([])
+    ## trace-source-accessor.h (module 'core'): bool ns3::TraceSourceAccessor::Connect(ns3::ObjectBase * obj, std::string context, ns3::CallbackBase const & cb) const [member function]
+    cls.add_method('Connect', 
+                   'bool', 
+                   [param('ns3::ObjectBase *', 'obj', transfer_ownership=False), param('std::string', 'context'), param('ns3::CallbackBase const &', 'cb')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## trace-source-accessor.h (module 'core'): bool ns3::TraceSourceAccessor::ConnectWithoutContext(ns3::ObjectBase * obj, ns3::CallbackBase const & cb) const [member function]
+    cls.add_method('ConnectWithoutContext', 
+                   'bool', 
+                   [param('ns3::ObjectBase *', 'obj', transfer_ownership=False), param('ns3::CallbackBase const &', 'cb')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## trace-source-accessor.h (module 'core'): bool ns3::TraceSourceAccessor::Disconnect(ns3::ObjectBase * obj, std::string context, ns3::CallbackBase const & cb) const [member function]
+    cls.add_method('Disconnect', 
+                   'bool', 
+                   [param('ns3::ObjectBase *', 'obj', transfer_ownership=False), param('std::string', 'context'), param('ns3::CallbackBase const &', 'cb')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## trace-source-accessor.h (module 'core'): bool ns3::TraceSourceAccessor::DisconnectWithoutContext(ns3::ObjectBase * obj, ns3::CallbackBase const & cb) const [member function]
+    cls.add_method('DisconnectWithoutContext', 
+                   'bool', 
+                   [param('ns3::ObjectBase *', 'obj', transfer_ownership=False), param('ns3::CallbackBase const &', 'cb')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3Trailer_methods(root_module, cls):
+    cls.add_output_stream_operator()
+    ## trailer.h (module 'network'): ns3::Trailer::Trailer() [constructor]
+    cls.add_constructor([])
+    ## trailer.h (module 'network'): ns3::Trailer::Trailer(ns3::Trailer const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Trailer const &', 'arg0')])
+    ## trailer.h (module 'network'): uint32_t ns3::Trailer::Deserialize(ns3::Buffer::Iterator end) [member function]
+    cls.add_method('Deserialize', 
+                   'uint32_t', 
+                   [param('ns3::Buffer::Iterator', 'end')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## trailer.h (module 'network'): uint32_t ns3::Trailer::Deserialize(ns3::Buffer::Iterator start, ns3::Buffer::Iterator end) [member function]
+    cls.add_method('Deserialize', 
+                   'uint32_t', 
+                   [param('ns3::Buffer::Iterator', 'start'), param('ns3::Buffer::Iterator', 'end')], 
+                   is_virtual=True)
+    ## trailer.h (module 'network'): uint32_t ns3::Trailer::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## trailer.h (module 'network'): static ns3::TypeId ns3::Trailer::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## trailer.h (module 'network'): void ns3::Trailer::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## trailer.h (module 'network'): void ns3::Trailer::Serialize(ns3::Buffer::Iterator start) const [member function]
+    cls.add_method('Serialize', 
+                   'void', 
+                   [param('ns3::Buffer::Iterator', 'start')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3AttributeAccessor_methods(root_module, cls):
+    ## attribute.h (module 'core'): ns3::AttributeAccessor::AttributeAccessor(ns3::AttributeAccessor const & arg0) [constructor]
+    cls.add_constructor([param('ns3::AttributeAccessor const &', 'arg0')])
+    ## attribute.h (module 'core'): ns3::AttributeAccessor::AttributeAccessor() [constructor]
+    cls.add_constructor([])
+    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::Get(ns3::ObjectBase const * object, ns3::AttributeValue & attribute) const [member function]
+    cls.add_method('Get', 
+                   'bool', 
+                   [param('ns3::ObjectBase const *', 'object'), param('ns3::AttributeValue &', 'attribute')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::HasGetter() const [member function]
+    cls.add_method('HasGetter', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::HasSetter() const [member function]
+    cls.add_method('HasSetter', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::Set(ns3::ObjectBase * object, ns3::AttributeValue const & value) const [member function]
+    cls.add_method('Set', 
+                   'bool', 
+                   [param('ns3::ObjectBase *', 'object', transfer_ownership=False), param('ns3::AttributeValue const &', 'value')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3AttributeChecker_methods(root_module, cls):
+    ## attribute.h (module 'core'): ns3::AttributeChecker::AttributeChecker(ns3::AttributeChecker const & arg0) [constructor]
+    cls.add_constructor([param('ns3::AttributeChecker const &', 'arg0')])
+    ## attribute.h (module 'core'): ns3::AttributeChecker::AttributeChecker() [constructor]
+    cls.add_constructor([])
+    ## attribute.h (module 'core'): bool ns3::AttributeChecker::Check(ns3::AttributeValue const & value) const [member function]
+    cls.add_method('Check', 
+                   'bool', 
+                   [param('ns3::AttributeValue const &', 'value')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## attribute.h (module 'core'): bool ns3::AttributeChecker::Copy(ns3::AttributeValue const & source, ns3::AttributeValue & destination) const [member function]
+    cls.add_method('Copy', 
+                   'bool', 
+                   [param('ns3::AttributeValue const &', 'source'), param('ns3::AttributeValue &', 'destination')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## attribute.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeChecker::Create() const [member function]
+    cls.add_method('Create', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## attribute.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeChecker::CreateValidValue(ns3::AttributeValue const & value) const [member function]
+    cls.add_method('CreateValidValue', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [param('ns3::AttributeValue const &', 'value')], 
+                   is_const=True)
+    ## attribute.h (module 'core'): std::string ns3::AttributeChecker::GetUnderlyingTypeInformation() const [member function]
+    cls.add_method('GetUnderlyingTypeInformation', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## attribute.h (module 'core'): std::string ns3::AttributeChecker::GetValueTypeName() const [member function]
+    cls.add_method('GetValueTypeName', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## attribute.h (module 'core'): bool ns3::AttributeChecker::HasUnderlyingTypeInformation() const [member function]
+    cls.add_method('HasUnderlyingTypeInformation', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3AttributeValue_methods(root_module, cls):
+    ## attribute.h (module 'core'): ns3::AttributeValue::AttributeValue(ns3::AttributeValue const & arg0) [constructor]
+    cls.add_constructor([param('ns3::AttributeValue const &', 'arg0')])
+    ## attribute.h (module 'core'): ns3::AttributeValue::AttributeValue() [constructor]
+    cls.add_constructor([])
+    ## attribute.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeValue::Copy() const [member function]
+    cls.add_method('Copy', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## attribute.h (module 'core'): bool ns3::AttributeValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
+    cls.add_method('DeserializeFromString', 
+                   'bool', 
+                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## attribute.h (module 'core'): std::string ns3::AttributeValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
+    cls.add_method('SerializeToString', 
+                   'std::string', 
+                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3CallbackChecker_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackChecker::CallbackChecker() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackChecker::CallbackChecker(ns3::CallbackChecker const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackChecker const &', 'arg0')])
+    return
+
+def register_Ns3CallbackImplBase_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackImplBase::CallbackImplBase() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackImplBase::CallbackImplBase(ns3::CallbackImplBase const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackImplBase const &', 'arg0')])
+    ## callback.h (module 'core'): std::string ns3::CallbackImplBase::GetTypeid() const [member function]
+    cls.add_method('GetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## callback.h (module 'core'): bool ns3::CallbackImplBase::IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other) const [member function]
+    cls.add_method('IsEqual', 
+                   'bool', 
+                   [param('ns3::Ptr< ns3::CallbackImplBase const >', 'other')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::Demangle(std::string const & mangled) [member function]
+    cls.add_method('Demangle', 
+                   'std::string', 
+                   [param('std::string const &', 'mangled')], 
+                   is_static=True, visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['ns3::ObjectBase*'], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['void'], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['ns3::Ptr<ns3::NetDevice> '], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['ns3::Ptr<ns3::Packet const> '], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['unsigned short'], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['ns3::Address const&'], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['ns3::NetDevice::PacketType'], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['ns3::Ptr<ns3::Socket> '], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['bool'], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['unsigned int'], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['ns3::Ipv4Header const&'], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['ns3::Ptr<ns3::Ipv4> '], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['ns3::Ipv4L3Protocol::DropReason'], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['ns3::Ptr<ns3::Ipv6> '], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['ns3::Ipv6Header const&'], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['ns3::Ipv6L3Protocol::DropReason'], visibility='protected')
+    return
+
+def register_Ns3CallbackValue_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackValue::CallbackValue(ns3::CallbackValue const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackValue const &', 'arg0')])
+    ## callback.h (module 'core'): ns3::CallbackValue::CallbackValue() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackValue::CallbackValue(ns3::CallbackBase const & base) [constructor]
+    cls.add_constructor([param('ns3::CallbackBase const &', 'base')])
+    ## callback.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::CallbackValue::Copy() const [member function]
+    cls.add_method('Copy', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): bool ns3::CallbackValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
+    cls.add_method('DeserializeFromString', 
+                   'bool', 
+                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_virtual=True)
+    ## callback.h (module 'core'): std::string ns3::CallbackValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
+    cls.add_method('SerializeToString', 
+                   'std::string', 
+                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): void ns3::CallbackValue::Set(ns3::CallbackBase base) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('ns3::CallbackBase', 'base')])
+    return
+
+def register_Ns3EmptyAttributeAccessor_methods(root_module, cls):
+    ## attribute.h (module 'core'): ns3::EmptyAttributeAccessor::EmptyAttributeAccessor(ns3::EmptyAttributeAccessor const & arg0) [constructor]
+    cls.add_constructor([param('ns3::EmptyAttributeAccessor const &', 'arg0')])
+    ## attribute.h (module 'core'): ns3::EmptyAttributeAccessor::EmptyAttributeAccessor() [constructor]
+    cls.add_constructor([])
+    ## attribute.h (module 'core'): bool ns3::EmptyAttributeAccessor::Get(ns3::ObjectBase const * object, ns3::AttributeValue & attribute) const [member function]
+    cls.add_method('Get', 
+                   'bool', 
+                   [param('ns3::ObjectBase const *', 'object'), param('ns3::AttributeValue &', 'attribute')], 
+                   is_const=True, is_virtual=True)
+    ## attribute.h (module 'core'): bool ns3::EmptyAttributeAccessor::HasGetter() const [member function]
+    cls.add_method('HasGetter', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## attribute.h (module 'core'): bool ns3::EmptyAttributeAccessor::HasSetter() const [member function]
+    cls.add_method('HasSetter', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## attribute.h (module 'core'): bool ns3::EmptyAttributeAccessor::Set(ns3::ObjectBase * object, ns3::AttributeValue const & value) const [member function]
+    cls.add_method('Set', 
+                   'bool', 
+                   [param('ns3::ObjectBase *', 'object'), param('ns3::AttributeValue const &', 'value')], 
+                   is_const=True, is_virtual=True)
+    return
+
+def register_Ns3EmptyAttributeChecker_methods(root_module, cls):
+    ## attribute.h (module 'core'): ns3::EmptyAttributeChecker::EmptyAttributeChecker(ns3::EmptyAttributeChecker const & arg0) [constructor]
+    cls.add_constructor([param('ns3::EmptyAttributeChecker const &', 'arg0')])
+    ## attribute.h (module 'core'): ns3::EmptyAttributeChecker::EmptyAttributeChecker() [constructor]
+    cls.add_constructor([])
+    ## attribute.h (module 'core'): bool ns3::EmptyAttributeChecker::Check(ns3::AttributeValue const & value) const [member function]
+    cls.add_method('Check', 
+                   'bool', 
+                   [param('ns3::AttributeValue const &', 'value')], 
+                   is_const=True, is_virtual=True)
+    ## attribute.h (module 'core'): bool ns3::EmptyAttributeChecker::Copy(ns3::AttributeValue const & source, ns3::AttributeValue & destination) const [member function]
+    cls.add_method('Copy', 
+                   'bool', 
+                   [param('ns3::AttributeValue const &', 'source'), param('ns3::AttributeValue &', 'destination')], 
+                   is_const=True, is_virtual=True)
+    ## attribute.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::EmptyAttributeChecker::Create() const [member function]
+    cls.add_method('Create', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## attribute.h (module 'core'): std::string ns3::EmptyAttributeChecker::GetUnderlyingTypeInformation() const [member function]
+    cls.add_method('GetUnderlyingTypeInformation', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## attribute.h (module 'core'): std::string ns3::EmptyAttributeChecker::GetValueTypeName() const [member function]
+    cls.add_method('GetValueTypeName', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## attribute.h (module 'core'): bool ns3::EmptyAttributeChecker::HasUnderlyingTypeInformation() const [member function]
+    cls.add_method('HasUnderlyingTypeInformation', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    return
+
+def register_Ns3EmptyAttributeValue_methods(root_module, cls):
+    ## attribute.h (module 'core'): ns3::EmptyAttributeValue::EmptyAttributeValue(ns3::EmptyAttributeValue const & arg0) [constructor]
+    cls.add_constructor([param('ns3::EmptyAttributeValue const &', 'arg0')])
+    ## attribute.h (module 'core'): ns3::EmptyAttributeValue::EmptyAttributeValue() [constructor]
+    cls.add_constructor([])
+    ## attribute.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::EmptyAttributeValue::Copy() const [member function]
+    cls.add_method('Copy', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [], 
+                   is_const=True, is_virtual=True, visibility='private')
+    ## attribute.h (module 'core'): bool ns3::EmptyAttributeValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
+    cls.add_method('DeserializeFromString', 
+                   'bool', 
+                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_virtual=True, visibility='private')
+    ## attribute.h (module 'core'): std::string ns3::EmptyAttributeValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
+    cls.add_method('SerializeToString', 
+                   'std::string', 
+                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_const=True, is_virtual=True, visibility='private')
+    return
+
+def register_Ns3EventImpl_methods(root_module, cls):
+    ## event-impl.h (module 'core'): ns3::EventImpl::EventImpl(ns3::EventImpl const & arg0) [constructor]
+    cls.add_constructor([param('ns3::EventImpl const &', 'arg0')])
+    ## event-impl.h (module 'core'): ns3::EventImpl::EventImpl() [constructor]
+    cls.add_constructor([])
+    ## event-impl.h (module 'core'): void ns3::EventImpl::Cancel() [member function]
+    cls.add_method('Cancel', 
+                   'void', 
+                   [])
+    ## event-impl.h (module 'core'): void ns3::EventImpl::Invoke() [member function]
+    cls.add_method('Invoke', 
+                   'void', 
+                   [])
+    ## event-impl.h (module 'core'): bool ns3::EventImpl::IsCancelled() [member function]
+    cls.add_method('IsCancelled', 
+                   'bool', 
+                   [])
+    ## event-impl.h (module 'core'): void ns3::EventImpl::Notify() [member function]
+    cls.add_method('Notify', 
+                   'void', 
+                   [], 
+                   is_pure_virtual=True, is_virtual=True, visibility='protected')
+    return
+
+def register_Ns3FlowClassifier_methods(root_module, cls):
+    ## flow-classifier.h (module 'flow-monitor'): ns3::FlowClassifier::FlowClassifier() [constructor]
+    cls.add_constructor([])
+    ## flow-classifier.h (module 'flow-monitor'): void ns3::FlowClassifier::SerializeToXmlStream(std::ostream & os, uint16_t indent) const [member function]
+    cls.add_method('SerializeToXmlStream', 
+                   'void', 
+                   [param('std::ostream &', 'os'), param('uint16_t', 'indent')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## flow-classifier.h (module 'flow-monitor'): ns3::FlowId ns3::FlowClassifier::GetNewFlowId() [member function]
+    cls.add_method('GetNewFlowId', 
+                   'ns3::FlowId', 
+                   [], 
+                   visibility='protected')
+    ## flow-classifier.h (module 'flow-monitor'): void ns3::FlowClassifier::Indent(std::ostream & os, uint16_t level) const [member function]
+    cls.add_method('Indent', 
+                   'void', 
+                   [param('std::ostream &', 'os'), param('uint16_t', 'level')], 
+                   is_const=True, visibility='protected')
+    return
+
+def register_Ns3FlowMonitor_methods(root_module, cls):
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowMonitor(ns3::FlowMonitor const & arg0) [constructor]
+    cls.add_constructor([param('ns3::FlowMonitor const &', 'arg0')])
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowMonitor() [constructor]
+    cls.add_constructor([])
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::AddFlowClassifier(ns3::Ptr<ns3::FlowClassifier> classifier) [member function]
+    cls.add_method('AddFlowClassifier', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::FlowClassifier >', 'classifier')])
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::AddProbe(ns3::Ptr<ns3::FlowProbe> probe) [member function]
+    cls.add_method('AddProbe', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::FlowProbe >', 'probe')])
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::CheckForLostPackets() [member function]
+    cls.add_method('CheckForLostPackets', 
+                   'void', 
+                   [])
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::CheckForLostPackets(ns3::Time maxDelay) [member function]
+    cls.add_method('CheckForLostPackets', 
+                   'void', 
+                   [param('ns3::Time', 'maxDelay')])
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowProbeContainer const & ns3::FlowMonitor::GetAllProbes() const [member function]
+    cls.add_method('GetAllProbes', 
+                   'ns3::FlowMonitor::FlowProbeContainer const &', 
+                   [], 
+                   is_const=True)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStatsContainer const & ns3::FlowMonitor::GetFlowStats() const [member function]
+    cls.add_method('GetFlowStats', 
+                   'ns3::FlowMonitor::FlowStatsContainer const &', 
+                   [], 
+                   is_const=True)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::TypeId ns3::FlowMonitor::GetInstanceTypeId() const [member function]
+    cls.add_method('GetInstanceTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## flow-monitor.h (module 'flow-monitor'): static ns3::TypeId ns3::FlowMonitor::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::ReportDrop(ns3::Ptr<ns3::FlowProbe> probe, ns3::FlowId flowId, ns3::FlowPacketId packetId, uint32_t packetSize, uint32_t reasonCode) [member function]
+    cls.add_method('ReportDrop', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::FlowProbe >', 'probe'), param('uint32_t', 'flowId'), param('uint32_t', 'packetId'), param('uint32_t', 'packetSize'), param('uint32_t', 'reasonCode')])
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::ReportFirstTx(ns3::Ptr<ns3::FlowProbe> probe, ns3::FlowId flowId, ns3::FlowPacketId packetId, uint32_t packetSize) [member function]
+    cls.add_method('ReportFirstTx', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::FlowProbe >', 'probe'), param('uint32_t', 'flowId'), param('uint32_t', 'packetId'), param('uint32_t', 'packetSize')])
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::ReportForwarding(ns3::Ptr<ns3::FlowProbe> probe, ns3::FlowId flowId, ns3::FlowPacketId packetId, uint32_t packetSize) [member function]
+    cls.add_method('ReportForwarding', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::FlowProbe >', 'probe'), param('uint32_t', 'flowId'), param('uint32_t', 'packetId'), param('uint32_t', 'packetSize')])
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::ReportLastRx(ns3::Ptr<ns3::FlowProbe> probe, ns3::FlowId flowId, ns3::FlowPacketId packetId, uint32_t packetSize) [member function]
+    cls.add_method('ReportLastRx', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::FlowProbe >', 'probe'), param('uint32_t', 'flowId'), param('uint32_t', 'packetId'), param('uint32_t', 'packetSize')])
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::SerializeToXmlFile(std::string fileName, bool enableHistograms, bool enableProbes) [member function]
+    cls.add_method('SerializeToXmlFile', 
+                   'void', 
+                   [param('std::string', 'fileName'), param('bool', 'enableHistograms'), param('bool', 'enableProbes')])
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::SerializeToXmlStream(std::ostream & os, uint16_t indent, bool enableHistograms, bool enableProbes) [member function]
+    cls.add_method('SerializeToXmlStream', 
+                   'void', 
+                   [param('std::ostream &', 'os'), param('uint16_t', 'indent'), param('bool', 'enableHistograms'), param('bool', 'enableProbes')])
+    ## flow-monitor.h (module 'flow-monitor'): std::string ns3::FlowMonitor::SerializeToXmlString(uint16_t indent, bool enableHistograms, bool enableProbes) [member function]
+    cls.add_method('SerializeToXmlString', 
+                   'std::string', 
+                   [param('uint16_t', 'indent'), param('bool', 'enableHistograms'), param('bool', 'enableProbes')])
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::Start(ns3::Time const & time) [member function]
+    cls.add_method('Start', 
+                   'void', 
+                   [param('ns3::Time const &', 'time')])
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::StartRightNow() [member function]
+    cls.add_method('StartRightNow', 
+                   'void', 
+                   [])
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::Stop(ns3::Time const & time) [member function]
+    cls.add_method('Stop', 
+                   'void', 
+                   [param('ns3::Time const &', 'time')])
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::StopRightNow() [member function]
+    cls.add_method('StopRightNow', 
+                   'void', 
+                   [])
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::DoDispose() [member function]
+    cls.add_method('DoDispose', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::NotifyConstructionCompleted() [member function]
+    cls.add_method('NotifyConstructionCompleted', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    return
+
+def register_Ns3FlowMonitorFlowStats_methods(root_module, cls):
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::FlowStats() [constructor]
+    cls.add_constructor([])
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::FlowStats(ns3::FlowMonitor::FlowStats const & arg0) [constructor]
+    cls.add_constructor([param('ns3::FlowMonitor::FlowStats const &', 'arg0')])
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::bytesDropped [variable]
+    cls.add_instance_attribute('bytesDropped', 'std::vector< unsigned long long >', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::delayHistogram [variable]
+    cls.add_instance_attribute('delayHistogram', 'ns3::Histogram', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::delaySum [variable]
+    cls.add_instance_attribute('delaySum', 'ns3::Time', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::flowInterruptionsHistogram [variable]
+    cls.add_instance_attribute('flowInterruptionsHistogram', 'ns3::Histogram', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::jitterHistogram [variable]
+    cls.add_instance_attribute('jitterHistogram', 'ns3::Histogram', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::jitterSum [variable]
+    cls.add_instance_attribute('jitterSum', 'ns3::Time', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::lastDelay [variable]
+    cls.add_instance_attribute('lastDelay', 'ns3::Time', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::lostPackets [variable]
+    cls.add_instance_attribute('lostPackets', 'uint32_t', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::packetSizeHistogram [variable]
+    cls.add_instance_attribute('packetSizeHistogram', 'ns3::Histogram', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::packetsDropped [variable]
+    cls.add_instance_attribute('packetsDropped', 'std::vector< unsigned int >', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::rxBytes [variable]
+    cls.add_instance_attribute('rxBytes', 'uint64_t', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::rxPackets [variable]
+    cls.add_instance_attribute('rxPackets', 'uint32_t', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::timeFirstRxPacket [variable]
+    cls.add_instance_attribute('timeFirstRxPacket', 'ns3::Time', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::timeFirstTxPacket [variable]
+    cls.add_instance_attribute('timeFirstTxPacket', 'ns3::Time', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::timeLastRxPacket [variable]
+    cls.add_instance_attribute('timeLastRxPacket', 'ns3::Time', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::timeLastTxPacket [variable]
+    cls.add_instance_attribute('timeLastTxPacket', 'ns3::Time', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::timesForwarded [variable]
+    cls.add_instance_attribute('timesForwarded', 'uint32_t', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::txBytes [variable]
+    cls.add_instance_attribute('txBytes', 'uint64_t', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::txPackets [variable]
+    cls.add_instance_attribute('txPackets', 'uint32_t', is_const=False)
+    return
+
+def register_Ns3FlowProbe_methods(root_module, cls):
+    ## flow-probe.h (module 'flow-monitor'): void ns3::FlowProbe::AddPacketDropStats(ns3::FlowId flowId, uint32_t packetSize, uint32_t reasonCode) [member function]
+    cls.add_method('AddPacketDropStats', 
+                   'void', 
+                   [param('uint32_t', 'flowId'), param('uint32_t', 'packetSize'), param('uint32_t', 'reasonCode')])
+    ## flow-probe.h (module 'flow-monitor'): void ns3::FlowProbe::AddPacketStats(ns3::FlowId flowId, uint32_t packetSize, ns3::Time delayFromFirstProbe) [member function]
+    cls.add_method('AddPacketStats', 
+                   'void', 
+                   [param('uint32_t', 'flowId'), param('uint32_t', 'packetSize'), param('ns3::Time', 'delayFromFirstProbe')])
+    ## flow-probe.h (module 'flow-monitor'): ns3::FlowProbe::Stats ns3::FlowProbe::GetStats() const [member function]
+    cls.add_method('GetStats', 
+                   'ns3::FlowProbe::Stats', 
+                   [], 
+                   is_const=True)
+    ## flow-probe.h (module 'flow-monitor'): static ns3::TypeId ns3::FlowProbe::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## flow-probe.h (module 'flow-monitor'): void ns3::FlowProbe::SerializeToXmlStream(std::ostream & os, uint16_t indent, uint32_t index) const [member function]
+    cls.add_method('SerializeToXmlStream', 
+                   'void', 
+                   [param('std::ostream &', 'os'), param('uint16_t', 'indent'), param('uint32_t', 'index')], 
+                   is_const=True)
+    ## flow-probe.h (module 'flow-monitor'): ns3::FlowProbe::FlowProbe(ns3::Ptr<ns3::FlowMonitor> flowMonitor) [constructor]
+    cls.add_constructor([param('ns3::Ptr< ns3::FlowMonitor >', 'flowMonitor')], 
+                        visibility='protected')
+    ## flow-probe.h (module 'flow-monitor'): void ns3::FlowProbe::DoDispose() [member function]
+    cls.add_method('DoDispose', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    return
+
+def register_Ns3FlowProbeFlowStats_methods(root_module, cls):
+    ## flow-probe.h (module 'flow-monitor'): ns3::FlowProbe::FlowStats::FlowStats(ns3::FlowProbe::FlowStats const & arg0) [constructor]
+    cls.add_constructor([param('ns3::FlowProbe::FlowStats const &', 'arg0')])
+    ## flow-probe.h (module 'flow-monitor'): ns3::FlowProbe::FlowStats::FlowStats() [constructor]
+    cls.add_constructor([])
+    ## flow-probe.h (module 'flow-monitor'): ns3::FlowProbe::FlowStats::bytes [variable]
+    cls.add_instance_attribute('bytes', 'uint64_t', is_const=False)
+    ## flow-probe.h (module 'flow-monitor'): ns3::FlowProbe::FlowStats::bytesDropped [variable]
+    cls.add_instance_attribute('bytesDropped', 'std::vector< unsigned long long >', is_const=False)
+    ## flow-probe.h (module 'flow-monitor'): ns3::FlowProbe::FlowStats::delayFromFirstProbeSum [variable]
+    cls.add_instance_attribute('delayFromFirstProbeSum', 'ns3::Time', is_const=False)
+    ## flow-probe.h (module 'flow-monitor'): ns3::FlowProbe::FlowStats::packets [variable]
+    cls.add_instance_attribute('packets', 'uint32_t', is_const=False)
+    ## flow-probe.h (module 'flow-monitor'): ns3::FlowProbe::FlowStats::packetsDropped [variable]
+    cls.add_instance_attribute('packetsDropped', 'std::vector< unsigned int >', is_const=False)
+    return
+
+def register_Ns3Ipv4_methods(root_module, cls):
+    ## ipv4.h (module 'internet'): ns3::Ipv4::Ipv4(ns3::Ipv4 const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv4 const &', 'arg0')])
+    ## ipv4.h (module 'internet'): ns3::Ipv4::Ipv4() [constructor]
+    cls.add_constructor([])
+    ## ipv4.h (module 'internet'): bool ns3::Ipv4::AddAddress(uint32_t interface, ns3::Ipv4InterfaceAddress address) [member function]
+    cls.add_method('AddAddress', 
+                   'bool', 
+                   [param('uint32_t', 'interface'), param('ns3::Ipv4InterfaceAddress', 'address')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): uint32_t ns3::Ipv4::AddInterface(ns3::Ptr<ns3::NetDevice> device) [member function]
+    cls.add_method('AddInterface', 
+                   'uint32_t', 
+                   [param('ns3::Ptr< ns3::NetDevice >', 'device')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): ns3::Ptr<ns3::Socket> ns3::Ipv4::CreateRawSocket() [member function]
+    cls.add_method('CreateRawSocket', 
+                   'ns3::Ptr< ns3::Socket >', 
+                   [], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): void ns3::Ipv4::DeleteRawSocket(ns3::Ptr<ns3::Socket> socket) [member function]
+    cls.add_method('DeleteRawSocket', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Socket >', 'socket')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): ns3::Ipv4InterfaceAddress ns3::Ipv4::GetAddress(uint32_t interface, uint32_t addressIndex) const [member function]
+    cls.add_method('GetAddress', 
+                   'ns3::Ipv4InterfaceAddress', 
+                   [param('uint32_t', 'interface'), param('uint32_t', 'addressIndex')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): int32_t ns3::Ipv4::GetInterfaceForAddress(ns3::Ipv4Address address) const [member function]
+    cls.add_method('GetInterfaceForAddress', 
+                   'int32_t', 
+                   [param('ns3::Ipv4Address', 'address')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): int32_t ns3::Ipv4::GetInterfaceForDevice(ns3::Ptr<const ns3::NetDevice> device) const [member function]
+    cls.add_method('GetInterfaceForDevice', 
+                   'int32_t', 
+                   [param('ns3::Ptr< ns3::NetDevice const >', 'device')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): int32_t ns3::Ipv4::GetInterfaceForPrefix(ns3::Ipv4Address address, ns3::Ipv4Mask mask) const [member function]
+    cls.add_method('GetInterfaceForPrefix', 
+                   'int32_t', 
+                   [param('ns3::Ipv4Address', 'address'), param('ns3::Ipv4Mask', 'mask')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): uint16_t ns3::Ipv4::GetMetric(uint32_t interface) const [member function]
+    cls.add_method('GetMetric', 
+                   'uint16_t', 
+                   [param('uint32_t', 'interface')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): uint16_t ns3::Ipv4::GetMtu(uint32_t interface) const [member function]
+    cls.add_method('GetMtu', 
+                   'uint16_t', 
+                   [param('uint32_t', 'interface')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): uint32_t ns3::Ipv4::GetNAddresses(uint32_t interface) const [member function]
+    cls.add_method('GetNAddresses', 
+                   'uint32_t', 
+                   [param('uint32_t', 'interface')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): uint32_t ns3::Ipv4::GetNInterfaces() const [member function]
+    cls.add_method('GetNInterfaces', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): ns3::Ptr<ns3::NetDevice> ns3::Ipv4::GetNetDevice(uint32_t interface) [member function]
+    cls.add_method('GetNetDevice', 
+                   'ns3::Ptr< ns3::NetDevice >', 
+                   [param('uint32_t', 'interface')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): ns3::Ptr<ns3::IpL4Protocol> ns3::Ipv4::GetProtocol(int protocolNumber) const [member function]
+    cls.add_method('GetProtocol', 
+                   'ns3::Ptr< ns3::IpL4Protocol >', 
+                   [param('int', 'protocolNumber')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): ns3::Ptr<ns3::IpL4Protocol> ns3::Ipv4::GetProtocol(int protocolNumber, int32_t interfaceIndex) const [member function]
+    cls.add_method('GetProtocol', 
+                   'ns3::Ptr< ns3::IpL4Protocol >', 
+                   [param('int', 'protocolNumber'), param('int32_t', 'interfaceIndex')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): ns3::Ptr<ns3::Ipv4RoutingProtocol> ns3::Ipv4::GetRoutingProtocol() const [member function]
+    cls.add_method('GetRoutingProtocol', 
+                   'ns3::Ptr< ns3::Ipv4RoutingProtocol >', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): static ns3::TypeId ns3::Ipv4::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## ipv4.h (module 'internet'): void ns3::Ipv4::Insert(ns3::Ptr<ns3::IpL4Protocol> protocol) [member function]
+    cls.add_method('Insert', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): void ns3::Ipv4::Insert(ns3::Ptr<ns3::IpL4Protocol> protocol, uint32_t interfaceIndex) [member function]
+    cls.add_method('Insert', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol'), param('uint32_t', 'interfaceIndex')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): bool ns3::Ipv4::IsDestinationAddress(ns3::Ipv4Address address, uint32_t iif) const [member function]
+    cls.add_method('IsDestinationAddress', 
+                   'bool', 
+                   [param('ns3::Ipv4Address', 'address'), param('uint32_t', 'iif')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): bool ns3::Ipv4::IsForwarding(uint32_t interface) const [member function]
+    cls.add_method('IsForwarding', 
+                   'bool', 
+                   [param('uint32_t', 'interface')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): bool ns3::Ipv4::IsUp(uint32_t interface) const [member function]
+    cls.add_method('IsUp', 
+                   'bool', 
+                   [param('uint32_t', 'interface')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): void ns3::Ipv4::Remove(ns3::Ptr<ns3::IpL4Protocol> protocol) [member function]
+    cls.add_method('Remove', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): void ns3::Ipv4::Remove(ns3::Ptr<ns3::IpL4Protocol> protocol, uint32_t interfaceIndex) [member function]
+    cls.add_method('Remove', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol'), param('uint32_t', 'interfaceIndex')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): bool ns3::Ipv4::RemoveAddress(uint32_t interface, uint32_t addressIndex) [member function]
+    cls.add_method('RemoveAddress', 
+                   'bool', 
+                   [param('uint32_t', 'interface'), param('uint32_t', 'addressIndex')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): bool ns3::Ipv4::RemoveAddress(uint32_t interface, ns3::Ipv4Address address) [member function]
+    cls.add_method('RemoveAddress', 
+                   'bool', 
+                   [param('uint32_t', 'interface'), param('ns3::Ipv4Address', 'address')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4::SelectSourceAddress(ns3::Ptr<const ns3::NetDevice> device, ns3::Ipv4Address dst, ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e scope) [member function]
+    cls.add_method('SelectSourceAddress', 
+                   'ns3::Ipv4Address', 
+                   [param('ns3::Ptr< ns3::NetDevice const >', 'device'), param('ns3::Ipv4Address', 'dst'), param('ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e', 'scope')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): void ns3::Ipv4::Send(ns3::Ptr<ns3::Packet> packet, ns3::Ipv4Address source, ns3::Ipv4Address destination, uint8_t protocol, ns3::Ptr<ns3::Ipv4Route> route) [member function]
+    cls.add_method('Send', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Ipv4Address', 'source'), param('ns3::Ipv4Address', 'destination'), param('uint8_t', 'protocol'), param('ns3::Ptr< ns3::Ipv4Route >', 'route')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): void ns3::Ipv4::SendWithHeader(ns3::Ptr<ns3::Packet> packet, ns3::Ipv4Header ipHeader, ns3::Ptr<ns3::Ipv4Route> route) [member function]
+    cls.add_method('SendWithHeader', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Ipv4Header', 'ipHeader'), param('ns3::Ptr< ns3::Ipv4Route >', 'route')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): void ns3::Ipv4::SetDown(uint32_t interface) [member function]
+    cls.add_method('SetDown', 
+                   'void', 
+                   [param('uint32_t', 'interface')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): void ns3::Ipv4::SetForwarding(uint32_t interface, bool val) [member function]
+    cls.add_method('SetForwarding', 
+                   'void', 
+                   [param('uint32_t', 'interface'), param('bool', 'val')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): void ns3::Ipv4::SetMetric(uint32_t interface, uint16_t metric) [member function]
+    cls.add_method('SetMetric', 
+                   'void', 
+                   [param('uint32_t', 'interface'), param('uint16_t', 'metric')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): void ns3::Ipv4::SetRoutingProtocol(ns3::Ptr<ns3::Ipv4RoutingProtocol> routingProtocol) [member function]
+    cls.add_method('SetRoutingProtocol', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Ipv4RoutingProtocol >', 'routingProtocol')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): void ns3::Ipv4::SetUp(uint32_t interface) [member function]
+    cls.add_method('SetUp', 
+                   'void', 
+                   [param('uint32_t', 'interface')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4::SourceAddressSelection(uint32_t interface, ns3::Ipv4Address dest) [member function]
+    cls.add_method('SourceAddressSelection', 
+                   'ns3::Ipv4Address', 
+                   [param('uint32_t', 'interface'), param('ns3::Ipv4Address', 'dest')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): ns3::Ipv4::IF_ANY [variable]
+    cls.add_static_attribute('IF_ANY', 'uint32_t const', is_const=True)
+    ## ipv4.h (module 'internet'): bool ns3::Ipv4::GetIpForward() const [member function]
+    cls.add_method('GetIpForward', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True, visibility='private')
+    ## ipv4.h (module 'internet'): bool ns3::Ipv4::GetWeakEsModel() const [member function]
+    cls.add_method('GetWeakEsModel', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True, visibility='private')
+    ## ipv4.h (module 'internet'): void ns3::Ipv4::SetIpForward(bool forward) [member function]
+    cls.add_method('SetIpForward', 
+                   'void', 
+                   [param('bool', 'forward')], 
+                   is_pure_virtual=True, is_virtual=True, visibility='private')
+    ## ipv4.h (module 'internet'): void ns3::Ipv4::SetWeakEsModel(bool model) [member function]
+    cls.add_method('SetWeakEsModel', 
+                   'void', 
+                   [param('bool', 'model')], 
+                   is_pure_virtual=True, is_virtual=True, visibility='private')
+    return
+
+def register_Ns3Ipv4AddressChecker_methods(root_module, cls):
+    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressChecker::Ipv4AddressChecker() [constructor]
+    cls.add_constructor([])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressChecker::Ipv4AddressChecker(ns3::Ipv4AddressChecker const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv4AddressChecker const &', 'arg0')])
+    return
+
+def register_Ns3Ipv4AddressValue_methods(root_module, cls):
+    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue::Ipv4AddressValue() [constructor]
+    cls.add_constructor([])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue::Ipv4AddressValue(ns3::Ipv4Address const & value) [constructor]
+    cls.add_constructor([param('ns3::Ipv4Address const &', 'value')])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue::Ipv4AddressValue(ns3::Ipv4AddressValue const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv4AddressValue const &', 'arg0')])
+    ## ipv4-address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::Ipv4AddressValue::Copy() const [member function]
+    cls.add_method('Copy', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-address.h (module 'network'): bool ns3::Ipv4AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
+    cls.add_method('DeserializeFromString', 
+                   'bool', 
+                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_virtual=True)
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Address ns3::Ipv4AddressValue::Get() const [member function]
+    cls.add_method('Get', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): std::string ns3::Ipv4AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
+    cls.add_method('SerializeToString', 
+                   'std::string', 
+                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-address.h (module 'network'): void ns3::Ipv4AddressValue::Set(ns3::Ipv4Address const & value) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('ns3::Ipv4Address const &', 'value')])
+    return
+
+def register_Ns3Ipv4FlowClassifier_methods(root_module, cls):
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): ns3::Ipv4FlowClassifier::Ipv4FlowClassifier() [constructor]
+    cls.add_constructor([])
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): bool ns3::Ipv4FlowClassifier::Classify(ns3::Ipv4Header const & ipHeader, ns3::Ptr<const ns3::Packet> ipPayload, uint32_t * out_flowId, uint32_t * out_packetId) [member function]
+    cls.add_method('Classify', 
+                   'bool', 
+                   [param('ns3::Ipv4Header const &', 'ipHeader'), param('ns3::Ptr< ns3::Packet const >', 'ipPayload'), param('uint32_t *', 'out_flowId'), param('uint32_t *', 'out_packetId')])
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): ns3::Ipv4FlowClassifier::FiveTuple ns3::Ipv4FlowClassifier::FindFlow(ns3::FlowId flowId) const [member function]
+    cls.add_method('FindFlow', 
+                   'ns3::Ipv4FlowClassifier::FiveTuple', 
+                   [param('uint32_t', 'flowId')], 
+                   is_const=True)
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): std::vector<std::pair<ns3::Ipv4Header::DscpType, unsigned int>, std::allocator<std::pair<ns3::Ipv4Header::DscpType, unsigned int>>> ns3::Ipv4FlowClassifier::GetDscpCounts(ns3::FlowId flowId) const [member function]
+    cls.add_method('GetDscpCounts', 
+                   'std::vector< std::pair< ns3::Ipv4Header::DscpType, unsigned int > >', 
+                   [param('uint32_t', 'flowId')], 
+                   is_const=True)
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): void ns3::Ipv4FlowClassifier::SerializeToXmlStream(std::ostream & os, uint16_t indent) const [member function]
+    cls.add_method('SerializeToXmlStream', 
+                   'void', 
+                   [param('std::ostream &', 'os'), param('uint16_t', 'indent')], 
+                   is_const=True, is_virtual=True)
+    return
+
+def register_Ns3Ipv4FlowClassifierFiveTuple_methods(root_module, cls):
+    cls.add_binary_comparison_operator('<')
+    cls.add_binary_comparison_operator('==')
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): ns3::Ipv4FlowClassifier::FiveTuple::FiveTuple() [constructor]
+    cls.add_constructor([])
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): ns3::Ipv4FlowClassifier::FiveTuple::FiveTuple(ns3::Ipv4FlowClassifier::FiveTuple const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv4FlowClassifier::FiveTuple const &', 'arg0')])
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): ns3::Ipv4FlowClassifier::FiveTuple::destinationAddress [variable]
+    cls.add_instance_attribute('destinationAddress', 'ns3::Ipv4Address', is_const=False)
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): ns3::Ipv4FlowClassifier::FiveTuple::destinationPort [variable]
+    cls.add_instance_attribute('destinationPort', 'uint16_t', is_const=False)
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): ns3::Ipv4FlowClassifier::FiveTuple::protocol [variable]
+    cls.add_instance_attribute('protocol', 'uint8_t', is_const=False)
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): ns3::Ipv4FlowClassifier::FiveTuple::sourceAddress [variable]
+    cls.add_instance_attribute('sourceAddress', 'ns3::Ipv4Address', is_const=False)
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): ns3::Ipv4FlowClassifier::FiveTuple::sourcePort [variable]
+    cls.add_instance_attribute('sourcePort', 'uint16_t', is_const=False)
+    return
+
+def register_Ns3Ipv4FlowClassifierSortByCount_methods(root_module, cls):
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): ns3::Ipv4FlowClassifier::SortByCount::SortByCount() [constructor]
+    cls.add_constructor([])
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): ns3::Ipv4FlowClassifier::SortByCount::SortByCount(ns3::Ipv4FlowClassifier::SortByCount const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv4FlowClassifier::SortByCount const &', 'arg0')])
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): bool ns3::Ipv4FlowClassifier::SortByCount::operator()(std::pair<ns3::Ipv4Header::DscpType, unsigned int> left, std::pair<ns3::Ipv4Header::DscpType, unsigned int> right) [member operator]
+    cls.add_method('operator()', 
+                   'bool', 
+                   [param('std::pair< ns3::Ipv4Header::DscpType, unsigned int >', 'left'), param('std::pair< ns3::Ipv4Header::DscpType, unsigned int >', 'right')], 
+                   custom_name='__call__')
+    return
+
+def register_Ns3Ipv4FlowProbe_methods(root_module, cls):
+    ## ipv4-flow-probe.h (module 'flow-monitor'): ns3::Ipv4FlowProbe::Ipv4FlowProbe(ns3::Ptr<ns3::FlowMonitor> monitor, ns3::Ptr<ns3::Ipv4FlowClassifier> classifier, ns3::Ptr<ns3::Node> node) [constructor]
+    cls.add_constructor([param('ns3::Ptr< ns3::FlowMonitor >', 'monitor'), param('ns3::Ptr< ns3::Ipv4FlowClassifier >', 'classifier'), param('ns3::Ptr< ns3::Node >', 'node')])
+    ## ipv4-flow-probe.h (module 'flow-monitor'): static ns3::TypeId ns3::Ipv4FlowProbe::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## ipv4-flow-probe.h (module 'flow-monitor'): void ns3::Ipv4FlowProbe::DoDispose() [member function]
+    cls.add_method('DoDispose', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    return
+
+def register_Ns3Ipv4L3Protocol_methods(root_module, cls):
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ipv4L3Protocol::Ipv4L3Protocol() [constructor]
+    cls.add_constructor([])
+    ## ipv4-l3-protocol.h (module 'internet'): bool ns3::Ipv4L3Protocol::AddAddress(uint32_t i, ns3::Ipv4InterfaceAddress address) [member function]
+    cls.add_method('AddAddress', 
+                   'bool', 
+                   [param('uint32_t', 'i'), param('ns3::Ipv4InterfaceAddress', 'address')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): uint32_t ns3::Ipv4L3Protocol::AddInterface(ns3::Ptr<ns3::NetDevice> device) [member function]
+    cls.add_method('AddInterface', 
+                   'uint32_t', 
+                   [param('ns3::Ptr< ns3::NetDevice >', 'device')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ptr<ns3::Socket> ns3::Ipv4L3Protocol::CreateRawSocket() [member function]
+    cls.add_method('CreateRawSocket', 
+                   'ns3::Ptr< ns3::Socket >', 
+                   [], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::DeleteRawSocket(ns3::Ptr<ns3::Socket> socket) [member function]
+    cls.add_method('DeleteRawSocket', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Socket >', 'socket')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ipv4InterfaceAddress ns3::Ipv4L3Protocol::GetAddress(uint32_t interfaceIndex, uint32_t addressIndex) const [member function]
+    cls.add_method('GetAddress', 
+                   'ns3::Ipv4InterfaceAddress', 
+                   [param('uint32_t', 'interfaceIndex'), param('uint32_t', 'addressIndex')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ptr<ns3::Ipv4Interface> ns3::Ipv4L3Protocol::GetInterface(uint32_t i) const [member function]
+    cls.add_method('GetInterface', 
+                   'ns3::Ptr< ns3::Ipv4Interface >', 
+                   [param('uint32_t', 'i')], 
+                   is_const=True)
+    ## ipv4-l3-protocol.h (module 'internet'): int32_t ns3::Ipv4L3Protocol::GetInterfaceForAddress(ns3::Ipv4Address addr) const [member function]
+    cls.add_method('GetInterfaceForAddress', 
+                   'int32_t', 
+                   [param('ns3::Ipv4Address', 'addr')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): int32_t ns3::Ipv4L3Protocol::GetInterfaceForDevice(ns3::Ptr<const ns3::NetDevice> device) const [member function]
+    cls.add_method('GetInterfaceForDevice', 
+                   'int32_t', 
+                   [param('ns3::Ptr< ns3::NetDevice const >', 'device')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): int32_t ns3::Ipv4L3Protocol::GetInterfaceForPrefix(ns3::Ipv4Address addr, ns3::Ipv4Mask mask) const [member function]
+    cls.add_method('GetInterfaceForPrefix', 
+                   'int32_t', 
+                   [param('ns3::Ipv4Address', 'addr'), param('ns3::Ipv4Mask', 'mask')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): uint16_t ns3::Ipv4L3Protocol::GetMetric(uint32_t i) const [member function]
+    cls.add_method('GetMetric', 
+                   'uint16_t', 
+                   [param('uint32_t', 'i')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): uint16_t ns3::Ipv4L3Protocol::GetMtu(uint32_t i) const [member function]
+    cls.add_method('GetMtu', 
+                   'uint16_t', 
+                   [param('uint32_t', 'i')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): uint32_t ns3::Ipv4L3Protocol::GetNAddresses(uint32_t interface) const [member function]
+    cls.add_method('GetNAddresses', 
+                   'uint32_t', 
+                   [param('uint32_t', 'interface')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): uint32_t ns3::Ipv4L3Protocol::GetNInterfaces() const [member function]
+    cls.add_method('GetNInterfaces', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ptr<ns3::NetDevice> ns3::Ipv4L3Protocol::GetNetDevice(uint32_t i) [member function]
+    cls.add_method('GetNetDevice', 
+                   'ns3::Ptr< ns3::NetDevice >', 
+                   [param('uint32_t', 'i')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ptr<ns3::IpL4Protocol> ns3::Ipv4L3Protocol::GetProtocol(int protocolNumber) const [member function]
+    cls.add_method('GetProtocol', 
+                   'ns3::Ptr< ns3::IpL4Protocol >', 
+                   [param('int', 'protocolNumber')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ptr<ns3::IpL4Protocol> ns3::Ipv4L3Protocol::GetProtocol(int protocolNumber, int32_t interfaceIndex) const [member function]
+    cls.add_method('GetProtocol', 
+                   'ns3::Ptr< ns3::IpL4Protocol >', 
+                   [param('int', 'protocolNumber'), param('int32_t', 'interfaceIndex')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ptr<ns3::Ipv4RoutingProtocol> ns3::Ipv4L3Protocol::GetRoutingProtocol() const [member function]
+    cls.add_method('GetRoutingProtocol', 
+                   'ns3::Ptr< ns3::Ipv4RoutingProtocol >', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): static ns3::TypeId ns3::Ipv4L3Protocol::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::Insert(ns3::Ptr<ns3::IpL4Protocol> protocol) [member function]
+    cls.add_method('Insert', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::Insert(ns3::Ptr<ns3::IpL4Protocol> protocol, uint32_t interfaceIndex) [member function]
+    cls.add_method('Insert', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol'), param('uint32_t', 'interfaceIndex')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): bool ns3::Ipv4L3Protocol::IsDestinationAddress(ns3::Ipv4Address address, uint32_t iif) const [member function]
+    cls.add_method('IsDestinationAddress', 
+                   'bool', 
+                   [param('ns3::Ipv4Address', 'address'), param('uint32_t', 'iif')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): bool ns3::Ipv4L3Protocol::IsForwarding(uint32_t i) const [member function]
+    cls.add_method('IsForwarding', 
+                   'bool', 
+                   [param('uint32_t', 'i')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): bool ns3::Ipv4L3Protocol::IsUnicast(ns3::Ipv4Address ad) const [member function]
+    cls.add_method('IsUnicast', 
+                   'bool', 
+                   [param('ns3::Ipv4Address', 'ad')], 
+                   is_const=True)
+    ## ipv4-l3-protocol.h (module 'internet'): bool ns3::Ipv4L3Protocol::IsUp(uint32_t i) const [member function]
+    cls.add_method('IsUp', 
+                   'bool', 
+                   [param('uint32_t', 'i')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::Receive(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<const ns3::Packet> p, uint16_t protocol, ns3::Address const & from, ns3::Address const & to, ns3::NetDevice::PacketType packetType) [member function]
+    cls.add_method('Receive', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::NetDevice >', 'device'), param('ns3::Ptr< ns3::Packet const >', 'p'), param('uint16_t', 'protocol'), param('ns3::Address const &', 'from'), param('ns3::Address const &', 'to'), param('ns3::NetDevice::PacketType', 'packetType')])
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::Remove(ns3::Ptr<ns3::IpL4Protocol> protocol) [member function]
+    cls.add_method('Remove', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::Remove(ns3::Ptr<ns3::IpL4Protocol> protocol, uint32_t interfaceIndex) [member function]
+    cls.add_method('Remove', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol'), param('uint32_t', 'interfaceIndex')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): bool ns3::Ipv4L3Protocol::RemoveAddress(uint32_t interfaceIndex, uint32_t addressIndex) [member function]
+    cls.add_method('RemoveAddress', 
+                   'bool', 
+                   [param('uint32_t', 'interfaceIndex'), param('uint32_t', 'addressIndex')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): bool ns3::Ipv4L3Protocol::RemoveAddress(uint32_t interface, ns3::Ipv4Address address) [member function]
+    cls.add_method('RemoveAddress', 
+                   'bool', 
+                   [param('uint32_t', 'interface'), param('ns3::Ipv4Address', 'address')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4L3Protocol::SelectSourceAddress(ns3::Ptr<const ns3::NetDevice> device, ns3::Ipv4Address dst, ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e scope) [member function]
+    cls.add_method('SelectSourceAddress', 
+                   'ns3::Ipv4Address', 
+                   [param('ns3::Ptr< ns3::NetDevice const >', 'device'), param('ns3::Ipv4Address', 'dst'), param('ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e', 'scope')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::Send(ns3::Ptr<ns3::Packet> packet, ns3::Ipv4Address source, ns3::Ipv4Address destination, uint8_t protocol, ns3::Ptr<ns3::Ipv4Route> route) [member function]
+    cls.add_method('Send', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Ipv4Address', 'source'), param('ns3::Ipv4Address', 'destination'), param('uint8_t', 'protocol'), param('ns3::Ptr< ns3::Ipv4Route >', 'route')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::SendWithHeader(ns3::Ptr<ns3::Packet> packet, ns3::Ipv4Header ipHeader, ns3::Ptr<ns3::Ipv4Route> route) [member function]
+    cls.add_method('SendWithHeader', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Ipv4Header', 'ipHeader'), param('ns3::Ptr< ns3::Ipv4Route >', 'route')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::SetDefaultTtl(uint8_t ttl) [member function]
+    cls.add_method('SetDefaultTtl', 
+                   'void', 
+                   [param('uint8_t', 'ttl')])
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::SetDown(uint32_t i) [member function]
+    cls.add_method('SetDown', 
+                   'void', 
+                   [param('uint32_t', 'i')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::SetForwarding(uint32_t i, bool val) [member function]
+    cls.add_method('SetForwarding', 
+                   'void', 
+                   [param('uint32_t', 'i'), param('bool', 'val')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::SetMetric(uint32_t i, uint16_t metric) [member function]
+    cls.add_method('SetMetric', 
+                   'void', 
+                   [param('uint32_t', 'i'), param('uint16_t', 'metric')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::SetNode(ns3::Ptr<ns3::Node> node) [member function]
+    cls.add_method('SetNode', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Node >', 'node')])
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::SetRoutingProtocol(ns3::Ptr<ns3::Ipv4RoutingProtocol> routingProtocol) [member function]
+    cls.add_method('SetRoutingProtocol', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Ipv4RoutingProtocol >', 'routingProtocol')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::SetUp(uint32_t i) [member function]
+    cls.add_method('SetUp', 
+                   'void', 
+                   [param('uint32_t', 'i')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4L3Protocol::SourceAddressSelection(uint32_t interface, ns3::Ipv4Address dest) [member function]
+    cls.add_method('SourceAddressSelection', 
+                   'ns3::Ipv4Address', 
+                   [param('uint32_t', 'interface'), param('ns3::Ipv4Address', 'dest')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ipv4L3Protocol::PROT_NUMBER [variable]
+    cls.add_static_attribute('PROT_NUMBER', 'uint16_t const', is_const=True)
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::DoDispose() [member function]
+    cls.add_method('DoDispose', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::NotifyNewAggregate() [member function]
+    cls.add_method('NotifyNewAggregate', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    ## ipv4-l3-protocol.h (module 'internet'): bool ns3::Ipv4L3Protocol::GetIpForward() const [member function]
+    cls.add_method('GetIpForward', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_virtual=True, visibility='private')
+    ## ipv4-l3-protocol.h (module 'internet'): bool ns3::Ipv4L3Protocol::GetWeakEsModel() const [member function]
+    cls.add_method('GetWeakEsModel', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_virtual=True, visibility='private')
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::SetIpForward(bool forward) [member function]
+    cls.add_method('SetIpForward', 
+                   'void', 
+                   [param('bool', 'forward')], 
+                   is_virtual=True, visibility='private')
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::SetWeakEsModel(bool model) [member function]
+    cls.add_method('SetWeakEsModel', 
+                   'void', 
+                   [param('bool', 'model')], 
+                   is_virtual=True, visibility='private')
+    return
+
+def register_Ns3Ipv4MaskChecker_methods(root_module, cls):
+    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskChecker::Ipv4MaskChecker() [constructor]
+    cls.add_constructor([])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskChecker::Ipv4MaskChecker(ns3::Ipv4MaskChecker const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv4MaskChecker const &', 'arg0')])
+    return
+
+def register_Ns3Ipv4MaskValue_methods(root_module, cls):
+    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue::Ipv4MaskValue() [constructor]
+    cls.add_constructor([])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue::Ipv4MaskValue(ns3::Ipv4Mask const & value) [constructor]
+    cls.add_constructor([param('ns3::Ipv4Mask const &', 'value')])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue::Ipv4MaskValue(ns3::Ipv4MaskValue const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv4MaskValue const &', 'arg0')])
+    ## ipv4-address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::Ipv4MaskValue::Copy() const [member function]
+    cls.add_method('Copy', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-address.h (module 'network'): bool ns3::Ipv4MaskValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
+    cls.add_method('DeserializeFromString', 
+                   'bool', 
+                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_virtual=True)
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask ns3::Ipv4MaskValue::Get() const [member function]
+    cls.add_method('Get', 
+                   'ns3::Ipv4Mask', 
+                   [], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): std::string ns3::Ipv4MaskValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
+    cls.add_method('SerializeToString', 
+                   'std::string', 
+                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-address.h (module 'network'): void ns3::Ipv4MaskValue::Set(ns3::Ipv4Mask const & value) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('ns3::Ipv4Mask const &', 'value')])
+    return
+
+def register_Ns3Ipv4MulticastRoute_methods(root_module, cls):
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4MulticastRoute::Ipv4MulticastRoute(ns3::Ipv4MulticastRoute const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv4MulticastRoute const &', 'arg0')])
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4MulticastRoute::Ipv4MulticastRoute() [constructor]
+    cls.add_constructor([])
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4MulticastRoute::GetGroup() const [member function]
+    cls.add_method('GetGroup', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_const=True)
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4MulticastRoute::GetOrigin() const [member function]
+    cls.add_method('GetOrigin', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_const=True)
+    ## ipv4-route.h (module 'internet'): std::map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int>>> ns3::Ipv4MulticastRoute::GetOutputTtlMap() const [member function]
+    cls.add_method('GetOutputTtlMap', 
+                   'std::map< unsigned int, unsigned int >', 
+                   [], 
+                   is_const=True)
+    ## ipv4-route.h (module 'internet'): uint32_t ns3::Ipv4MulticastRoute::GetParent() const [member function]
+    cls.add_method('GetParent', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## ipv4-route.h (module 'internet'): void ns3::Ipv4MulticastRoute::SetGroup(ns3::Ipv4Address const group) [member function]
+    cls.add_method('SetGroup', 
+                   'void', 
+                   [param('ns3::Ipv4Address const', 'group')])
+    ## ipv4-route.h (module 'internet'): void ns3::Ipv4MulticastRoute::SetOrigin(ns3::Ipv4Address const origin) [member function]
+    cls.add_method('SetOrigin', 
+                   'void', 
+                   [param('ns3::Ipv4Address const', 'origin')])
+    ## ipv4-route.h (module 'internet'): void ns3::Ipv4MulticastRoute::SetOutputTtl(uint32_t oif, uint32_t ttl) [member function]
+    cls.add_method('SetOutputTtl', 
+                   'void', 
+                   [param('uint32_t', 'oif'), param('uint32_t', 'ttl')])
+    ## ipv4-route.h (module 'internet'): void ns3::Ipv4MulticastRoute::SetParent(uint32_t iif) [member function]
+    cls.add_method('SetParent', 
+                   'void', 
+                   [param('uint32_t', 'iif')])
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4MulticastRoute::MAX_INTERFACES [variable]
+    cls.add_static_attribute('MAX_INTERFACES', 'uint32_t const', is_const=True)
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4MulticastRoute::MAX_TTL [variable]
+    cls.add_static_attribute('MAX_TTL', 'uint32_t const', is_const=True)
+    return
+
+def register_Ns3Ipv4Route_methods(root_module, cls):
+    cls.add_output_stream_operator()
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4Route::Ipv4Route(ns3::Ipv4Route const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv4Route const &', 'arg0')])
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4Route::Ipv4Route() [constructor]
+    cls.add_constructor([])
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4Route::GetDestination() const [member function]
+    cls.add_method('GetDestination', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_const=True)
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4Route::GetGateway() const [member function]
+    cls.add_method('GetGateway', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_const=True)
+    ## ipv4-route.h (module 'internet'): ns3::Ptr<ns3::NetDevice> ns3::Ipv4Route::GetOutputDevice() const [member function]
+    cls.add_method('GetOutputDevice', 
+                   'ns3::Ptr< ns3::NetDevice >', 
+                   [], 
+                   is_const=True)
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4Route::GetSource() const [member function]
+    cls.add_method('GetSource', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_const=True)
+    ## ipv4-route.h (module 'internet'): void ns3::Ipv4Route::SetDestination(ns3::Ipv4Address dest) [member function]
+    cls.add_method('SetDestination', 
+                   'void', 
+                   [param('ns3::Ipv4Address', 'dest')])
+    ## ipv4-route.h (module 'internet'): void ns3::Ipv4Route::SetGateway(ns3::Ipv4Address gw) [member function]
+    cls.add_method('SetGateway', 
+                   'void', 
+                   [param('ns3::Ipv4Address', 'gw')])
+    ## ipv4-route.h (module 'internet'): void ns3::Ipv4Route::SetOutputDevice(ns3::Ptr<ns3::NetDevice> outputDevice) [member function]
+    cls.add_method('SetOutputDevice', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::NetDevice >', 'outputDevice')])
+    ## ipv4-route.h (module 'internet'): void ns3::Ipv4Route::SetSource(ns3::Ipv4Address src) [member function]
+    cls.add_method('SetSource', 
+                   'void', 
+                   [param('ns3::Ipv4Address', 'src')])
+    return
+
+def register_Ns3Ipv4RoutingProtocol_methods(root_module, cls):
+    ## ipv4-routing-protocol.h (module 'internet'): ns3::Ipv4RoutingProtocol::Ipv4RoutingProtocol() [constructor]
+    cls.add_constructor([])
+    ## ipv4-routing-protocol.h (module 'internet'): ns3::Ipv4RoutingProtocol::Ipv4RoutingProtocol(ns3::Ipv4RoutingProtocol const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv4RoutingProtocol const &', 'arg0')])
+    ## ipv4-routing-protocol.h (module 'internet'): static ns3::TypeId ns3::Ipv4RoutingProtocol::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## ipv4-routing-protocol.h (module 'internet'): void ns3::Ipv4RoutingProtocol::NotifyAddAddress(uint32_t interface, ns3::Ipv4InterfaceAddress address) [member function]
+    cls.add_method('NotifyAddAddress', 
+                   'void', 
+                   [param('uint32_t', 'interface'), param('ns3::Ipv4InterfaceAddress', 'address')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4-routing-protocol.h (module 'internet'): void ns3::Ipv4RoutingProtocol::NotifyInterfaceDown(uint32_t interface) [member function]
+    cls.add_method('NotifyInterfaceDown', 
+                   'void', 
+                   [param('uint32_t', 'interface')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4-routing-protocol.h (module 'internet'): void ns3::Ipv4RoutingProtocol::NotifyInterfaceUp(uint32_t interface) [member function]
+    cls.add_method('NotifyInterfaceUp', 
+                   'void', 
+                   [param('uint32_t', 'interface')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4-routing-protocol.h (module 'internet'): void ns3::Ipv4RoutingProtocol::NotifyRemoveAddress(uint32_t interface, ns3::Ipv4InterfaceAddress address) [member function]
+    cls.add_method('NotifyRemoveAddress', 
+                   'void', 
+                   [param('uint32_t', 'interface'), param('ns3::Ipv4InterfaceAddress', 'address')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4-routing-protocol.h (module 'internet'): void ns3::Ipv4RoutingProtocol::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) const [member function]
+    cls.add_method('PrintRoutingTable', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4-routing-protocol.h (module 'internet'): bool ns3::Ipv4RoutingProtocol::RouteInput(ns3::Ptr<const ns3::Packet> p, ns3::Ipv4Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Ipv4RoutingProtocol::UnicastForwardCallback ucb, ns3::Ipv4RoutingProtocol::MulticastForwardCallback mcb, ns3::Ipv4RoutingProtocol::LocalDeliverCallback lcb, ns3::Ipv4RoutingProtocol::ErrorCallback ecb) [member function]
+    cls.add_method('RouteInput', 
+                   'bool', 
+                   [param('ns3::Ptr< ns3::Packet const >', 'p'), param('ns3::Ipv4Header const &', 'header'), param('ns3::Ptr< ns3::NetDevice const >', 'idev'), param('ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ucb'), param('ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'mcb'), param('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'lcb'), param('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ecb')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4-routing-protocol.h (module 'internet'): ns3::Ptr<ns3::Ipv4Route> ns3::Ipv4RoutingProtocol::RouteOutput(ns3::Ptr<ns3::Packet> p, ns3::Ipv4Header const & header, ns3::Ptr<ns3::NetDevice> oif, ns3::Socket::SocketErrno & sockerr) [member function]
+    cls.add_method('RouteOutput', 
+                   'ns3::Ptr< ns3::Ipv4Route >', 
+                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv4Header const &', 'header'), param('ns3::Ptr< ns3::NetDevice >', 'oif'), param('ns3::Socket::SocketErrno &', 'sockerr')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4-routing-protocol.h (module 'internet'): void ns3::Ipv4RoutingProtocol::SetIpv4(ns3::Ptr<ns3::Ipv4> ipv4) [member function]
+    cls.add_method('SetIpv4', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Ipv4 >', 'ipv4')], 
+                   is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3Ipv6_methods(root_module, cls):
+    ## ipv6.h (module 'internet'): ns3::Ipv6::Ipv6(ns3::Ipv6 const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv6 const &', 'arg0')])
+    ## ipv6.h (module 'internet'): ns3::Ipv6::Ipv6() [constructor]
+    cls.add_constructor([])
+    ## ipv6.h (module 'internet'): bool ns3::Ipv6::AddAddress(uint32_t interface, ns3::Ipv6InterfaceAddress address, bool addOnLinkRoute=true) [member function]
+    cls.add_method('AddAddress', 
+                   'bool', 
+                   [param('uint32_t', 'interface'), param('ns3::Ipv6InterfaceAddress', 'address'), param('bool', 'addOnLinkRoute', default_value='true')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): uint32_t ns3::Ipv6::AddInterface(ns3::Ptr<ns3::NetDevice> device) [member function]
+    cls.add_method('AddInterface', 
+                   'uint32_t', 
+                   [param('ns3::Ptr< ns3::NetDevice >', 'device')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): ns3::Ipv6InterfaceAddress ns3::Ipv6::GetAddress(uint32_t interface, uint32_t addressIndex) const [member function]
+    cls.add_method('GetAddress', 
+                   'ns3::Ipv6InterfaceAddress', 
+                   [param('uint32_t', 'interface'), param('uint32_t', 'addressIndex')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): int32_t ns3::Ipv6::GetInterfaceForAddress(ns3::Ipv6Address address) const [member function]
+    cls.add_method('GetInterfaceForAddress', 
+                   'int32_t', 
+                   [param('ns3::Ipv6Address', 'address')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): int32_t ns3::Ipv6::GetInterfaceForDevice(ns3::Ptr<const ns3::NetDevice> device) const [member function]
+    cls.add_method('GetInterfaceForDevice', 
+                   'int32_t', 
+                   [param('ns3::Ptr< ns3::NetDevice const >', 'device')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): int32_t ns3::Ipv6::GetInterfaceForPrefix(ns3::Ipv6Address address, ns3::Ipv6Prefix mask) const [member function]
+    cls.add_method('GetInterfaceForPrefix', 
+                   'int32_t', 
+                   [param('ns3::Ipv6Address', 'address'), param('ns3::Ipv6Prefix', 'mask')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): uint16_t ns3::Ipv6::GetMetric(uint32_t interface) const [member function]
+    cls.add_method('GetMetric', 
+                   'uint16_t', 
+                   [param('uint32_t', 'interface')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): uint16_t ns3::Ipv6::GetMtu(uint32_t interface) const [member function]
+    cls.add_method('GetMtu', 
+                   'uint16_t', 
+                   [param('uint32_t', 'interface')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): uint32_t ns3::Ipv6::GetNAddresses(uint32_t interface) const [member function]
+    cls.add_method('GetNAddresses', 
+                   'uint32_t', 
+                   [param('uint32_t', 'interface')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): uint32_t ns3::Ipv6::GetNInterfaces() const [member function]
+    cls.add_method('GetNInterfaces', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): ns3::Ptr<ns3::NetDevice> ns3::Ipv6::GetNetDevice(uint32_t interface) [member function]
+    cls.add_method('GetNetDevice', 
+                   'ns3::Ptr< ns3::NetDevice >', 
+                   [param('uint32_t', 'interface')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): ns3::Ptr<ns3::IpL4Protocol> ns3::Ipv6::GetProtocol(int protocolNumber) const [member function]
+    cls.add_method('GetProtocol', 
+                   'ns3::Ptr< ns3::IpL4Protocol >', 
+                   [param('int', 'protocolNumber')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): ns3::Ptr<ns3::IpL4Protocol> ns3::Ipv6::GetProtocol(int protocolNumber, int32_t interfaceIndex) const [member function]
+    cls.add_method('GetProtocol', 
+                   'ns3::Ptr< ns3::IpL4Protocol >', 
+                   [param('int', 'protocolNumber'), param('int32_t', 'interfaceIndex')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): ns3::Ptr<ns3::Ipv6RoutingProtocol> ns3::Ipv6::GetRoutingProtocol() const [member function]
+    cls.add_method('GetRoutingProtocol', 
+                   'ns3::Ptr< ns3::Ipv6RoutingProtocol >', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): static ns3::TypeId ns3::Ipv6::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::Insert(ns3::Ptr<ns3::IpL4Protocol> protocol) [member function]
+    cls.add_method('Insert', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::Insert(ns3::Ptr<ns3::IpL4Protocol> protocol, uint32_t interfaceIndex) [member function]
+    cls.add_method('Insert', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol'), param('uint32_t', 'interfaceIndex')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): bool ns3::Ipv6::IsForwarding(uint32_t interface) const [member function]
+    cls.add_method('IsForwarding', 
+                   'bool', 
+                   [param('uint32_t', 'interface')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): bool ns3::Ipv6::IsUp(uint32_t interface) const [member function]
+    cls.add_method('IsUp', 
+                   'bool', 
+                   [param('uint32_t', 'interface')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::RegisterExtensions() [member function]
+    cls.add_method('RegisterExtensions', 
+                   'void', 
+                   [], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::RegisterOptions() [member function]
+    cls.add_method('RegisterOptions', 
+                   'void', 
+                   [], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::Remove(ns3::Ptr<ns3::IpL4Protocol> protocol) [member function]
+    cls.add_method('Remove', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::Remove(ns3::Ptr<ns3::IpL4Protocol> protocol, uint32_t interfaceIndex) [member function]
+    cls.add_method('Remove', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol'), param('uint32_t', 'interfaceIndex')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): bool ns3::Ipv6::RemoveAddress(uint32_t interface, uint32_t addressIndex) [member function]
+    cls.add_method('RemoveAddress', 
+                   'bool', 
+                   [param('uint32_t', 'interface'), param('uint32_t', 'addressIndex')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): bool ns3::Ipv6::RemoveAddress(uint32_t interface, ns3::Ipv6Address address) [member function]
+    cls.add_method('RemoveAddress', 
+                   'bool', 
+                   [param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'address')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::Send(ns3::Ptr<ns3::Packet> packet, ns3::Ipv6Address source, ns3::Ipv6Address destination, uint8_t protocol, ns3::Ptr<ns3::Ipv6Route> route) [member function]
+    cls.add_method('Send', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Ipv6Address', 'source'), param('ns3::Ipv6Address', 'destination'), param('uint8_t', 'protocol'), param('ns3::Ptr< ns3::Ipv6Route >', 'route')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::SetDown(uint32_t interface) [member function]
+    cls.add_method('SetDown', 
+                   'void', 
+                   [param('uint32_t', 'interface')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::SetForwarding(uint32_t interface, bool val) [member function]
+    cls.add_method('SetForwarding', 
+                   'void', 
+                   [param('uint32_t', 'interface'), param('bool', 'val')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::SetMetric(uint32_t interface, uint16_t metric) [member function]
+    cls.add_method('SetMetric', 
+                   'void', 
+                   [param('uint32_t', 'interface'), param('uint16_t', 'metric')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::SetPmtu(ns3::Ipv6Address dst, uint32_t pmtu) [member function]
+    cls.add_method('SetPmtu', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'dst'), param('uint32_t', 'pmtu')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::SetRoutingProtocol(ns3::Ptr<ns3::Ipv6RoutingProtocol> routingProtocol) [member function]
+    cls.add_method('SetRoutingProtocol', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Ipv6RoutingProtocol >', 'routingProtocol')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::SetUp(uint32_t interface) [member function]
+    cls.add_method('SetUp', 
+                   'void', 
+                   [param('uint32_t', 'interface')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): ns3::Ipv6Address ns3::Ipv6::SourceAddressSelection(uint32_t interface, ns3::Ipv6Address dest) [member function]
+    cls.add_method('SourceAddressSelection', 
+                   'ns3::Ipv6Address', 
+                   [param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'dest')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): ns3::Ipv6::IF_ANY [variable]
+    cls.add_static_attribute('IF_ANY', 'uint32_t const', is_const=True)
+    ## ipv6.h (module 'internet'): bool ns3::Ipv6::GetIpForward() const [member function]
+    cls.add_method('GetIpForward', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True, visibility='private')
+    ## ipv6.h (module 'internet'): bool ns3::Ipv6::GetMtuDiscover() const [member function]
+    cls.add_method('GetMtuDiscover', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True, visibility='private')
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::SetIpForward(bool forward) [member function]
+    cls.add_method('SetIpForward', 
+                   'void', 
+                   [param('bool', 'forward')], 
+                   is_pure_virtual=True, is_virtual=True, visibility='private')
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::SetMtuDiscover(bool mtuDiscover) [member function]
+    cls.add_method('SetMtuDiscover', 
+                   'void', 
+                   [param('bool', 'mtuDiscover')], 
+                   is_pure_virtual=True, is_virtual=True, visibility='private')
+    return
+
+def register_Ns3Ipv6AddressChecker_methods(root_module, cls):
+    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressChecker::Ipv6AddressChecker() [constructor]
+    cls.add_constructor([])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressChecker::Ipv6AddressChecker(ns3::Ipv6AddressChecker const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv6AddressChecker const &', 'arg0')])
+    return
+
+def register_Ns3Ipv6AddressValue_methods(root_module, cls):
+    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue::Ipv6AddressValue() [constructor]
+    cls.add_constructor([])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue::Ipv6AddressValue(ns3::Ipv6Address const & value) [constructor]
+    cls.add_constructor([param('ns3::Ipv6Address const &', 'value')])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue::Ipv6AddressValue(ns3::Ipv6AddressValue const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv6AddressValue const &', 'arg0')])
+    ## ipv6-address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::Ipv6AddressValue::Copy() const [member function]
+    cls.add_method('Copy', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
+    cls.add_method('DeserializeFromString', 
+                   'bool', 
+                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_virtual=True)
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6AddressValue::Get() const [member function]
+    cls.add_method('Get', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): std::string ns3::Ipv6AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
+    cls.add_method('SerializeToString', 
+                   'std::string', 
+                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-address.h (module 'network'): void ns3::Ipv6AddressValue::Set(ns3::Ipv6Address const & value) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('ns3::Ipv6Address const &', 'value')])
+    return
+
+def register_Ns3Ipv6FlowClassifier_methods(root_module, cls):
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): ns3::Ipv6FlowClassifier::Ipv6FlowClassifier() [constructor]
+    cls.add_constructor([])
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): bool ns3::Ipv6FlowClassifier::Classify(ns3::Ipv6Header const & ipHeader, ns3::Ptr<const ns3::Packet> ipPayload, uint32_t * out_flowId, uint32_t * out_packetId) [member function]
+    cls.add_method('Classify', 
+                   'bool', 
+                   [param('ns3::Ipv6Header const &', 'ipHeader'), param('ns3::Ptr< ns3::Packet const >', 'ipPayload'), param('uint32_t *', 'out_flowId'), param('uint32_t *', 'out_packetId')])
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): ns3::Ipv6FlowClassifier::FiveTuple ns3::Ipv6FlowClassifier::FindFlow(ns3::FlowId flowId) const [member function]
+    cls.add_method('FindFlow', 
+                   'ns3::Ipv6FlowClassifier::FiveTuple', 
+                   [param('uint32_t', 'flowId')], 
+                   is_const=True)
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): std::vector<std::pair<ns3::Ipv6Header::DscpType, unsigned int>, std::allocator<std::pair<ns3::Ipv6Header::DscpType, unsigned int>>> ns3::Ipv6FlowClassifier::GetDscpCounts(ns3::FlowId flowId) const [member function]
+    cls.add_method('GetDscpCounts', 
+                   'std::vector< std::pair< ns3::Ipv6Header::DscpType, unsigned int > >', 
+                   [param('uint32_t', 'flowId')], 
+                   is_const=True)
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): void ns3::Ipv6FlowClassifier::SerializeToXmlStream(std::ostream & os, uint16_t indent) const [member function]
+    cls.add_method('SerializeToXmlStream', 
+                   'void', 
+                   [param('std::ostream &', 'os'), param('uint16_t', 'indent')], 
+                   is_const=True, is_virtual=True)
+    return
+
+def register_Ns3Ipv6FlowClassifierFiveTuple_methods(root_module, cls):
+    cls.add_binary_comparison_operator('<')
+    cls.add_binary_comparison_operator('==')
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): ns3::Ipv6FlowClassifier::FiveTuple::FiveTuple() [constructor]
+    cls.add_constructor([])
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): ns3::Ipv6FlowClassifier::FiveTuple::FiveTuple(ns3::Ipv6FlowClassifier::FiveTuple const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv6FlowClassifier::FiveTuple const &', 'arg0')])
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): ns3::Ipv6FlowClassifier::FiveTuple::destinationAddress [variable]
+    cls.add_instance_attribute('destinationAddress', 'ns3::Ipv6Address', is_const=False)
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): ns3::Ipv6FlowClassifier::FiveTuple::destinationPort [variable]
+    cls.add_instance_attribute('destinationPort', 'uint16_t', is_const=False)
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): ns3::Ipv6FlowClassifier::FiveTuple::protocol [variable]
+    cls.add_instance_attribute('protocol', 'uint8_t', is_const=False)
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): ns3::Ipv6FlowClassifier::FiveTuple::sourceAddress [variable]
+    cls.add_instance_attribute('sourceAddress', 'ns3::Ipv6Address', is_const=False)
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): ns3::Ipv6FlowClassifier::FiveTuple::sourcePort [variable]
+    cls.add_instance_attribute('sourcePort', 'uint16_t', is_const=False)
+    return
+
+def register_Ns3Ipv6FlowClassifierSortByCount_methods(root_module, cls):
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): ns3::Ipv6FlowClassifier::SortByCount::SortByCount() [constructor]
+    cls.add_constructor([])
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): ns3::Ipv6FlowClassifier::SortByCount::SortByCount(ns3::Ipv6FlowClassifier::SortByCount const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv6FlowClassifier::SortByCount const &', 'arg0')])
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): bool ns3::Ipv6FlowClassifier::SortByCount::operator()(std::pair<ns3::Ipv6Header::DscpType, unsigned int> left, std::pair<ns3::Ipv6Header::DscpType, unsigned int> right) [member operator]
+    cls.add_method('operator()', 
+                   'bool', 
+                   [param('std::pair< ns3::Ipv6Header::DscpType, unsigned int >', 'left'), param('std::pair< ns3::Ipv6Header::DscpType, unsigned int >', 'right')], 
+                   custom_name='__call__')
+    return
+
+def register_Ns3Ipv6FlowProbe_methods(root_module, cls):
+    ## ipv6-flow-probe.h (module 'flow-monitor'): ns3::Ipv6FlowProbe::Ipv6FlowProbe(ns3::Ptr<ns3::FlowMonitor> monitor, ns3::Ptr<ns3::Ipv6FlowClassifier> classifier, ns3::Ptr<ns3::Node> node) [constructor]
+    cls.add_constructor([param('ns3::Ptr< ns3::FlowMonitor >', 'monitor'), param('ns3::Ptr< ns3::Ipv6FlowClassifier >', 'classifier'), param('ns3::Ptr< ns3::Node >', 'node')])
+    ## ipv6-flow-probe.h (module 'flow-monitor'): static ns3::TypeId ns3::Ipv6FlowProbe::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## ipv6-flow-probe.h (module 'flow-monitor'): void ns3::Ipv6FlowProbe::DoDispose() [member function]
+    cls.add_method('DoDispose', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    return
+
+def register_Ns3Ipv6L3Protocol_methods(root_module, cls):
+    ## ipv6-l3-protocol.h (module 'internet'): static ns3::TypeId ns3::Ipv6L3Protocol::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ipv6L3Protocol::PROT_NUMBER [variable]
+    cls.add_static_attribute('PROT_NUMBER', 'uint16_t const', is_const=True)
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ipv6L3Protocol::Ipv6L3Protocol() [constructor]
+    cls.add_constructor([])
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::SetNode(ns3::Ptr<ns3::Node> node) [member function]
+    cls.add_method('SetNode', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Node >', 'node')])
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::Insert(ns3::Ptr<ns3::IpL4Protocol> protocol) [member function]
+    cls.add_method('Insert', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::Insert(ns3::Ptr<ns3::IpL4Protocol> protocol, uint32_t interfaceIndex) [member function]
+    cls.add_method('Insert', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol'), param('uint32_t', 'interfaceIndex')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::Remove(ns3::Ptr<ns3::IpL4Protocol> protocol) [member function]
+    cls.add_method('Remove', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::Remove(ns3::Ptr<ns3::IpL4Protocol> protocol, uint32_t interfaceIndex) [member function]
+    cls.add_method('Remove', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol'), param('uint32_t', 'interfaceIndex')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ptr<ns3::IpL4Protocol> ns3::Ipv6L3Protocol::GetProtocol(int protocolNumber) const [member function]
+    cls.add_method('GetProtocol', 
+                   'ns3::Ptr< ns3::IpL4Protocol >', 
+                   [param('int', 'protocolNumber')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ptr<ns3::IpL4Protocol> ns3::Ipv6L3Protocol::GetProtocol(int protocolNumber, int32_t interfaceIndex) const [member function]
+    cls.add_method('GetProtocol', 
+                   'ns3::Ptr< ns3::IpL4Protocol >', 
+                   [param('int', 'protocolNumber'), param('int32_t', 'interfaceIndex')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ptr<ns3::Socket> ns3::Ipv6L3Protocol::CreateRawSocket() [member function]
+    cls.add_method('CreateRawSocket', 
+                   'ns3::Ptr< ns3::Socket >', 
+                   [])
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::DeleteRawSocket(ns3::Ptr<ns3::Socket> socket) [member function]
+    cls.add_method('DeleteRawSocket', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Socket >', 'socket')])
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::SetDefaultTtl(uint8_t ttl) [member function]
+    cls.add_method('SetDefaultTtl', 
+                   'void', 
+                   [param('uint8_t', 'ttl')])
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::SetDefaultTclass(uint8_t tclass) [member function]
+    cls.add_method('SetDefaultTclass', 
+                   'void', 
+                   [param('uint8_t', 'tclass')])
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::Receive(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<const ns3::Packet> p, uint16_t protocol, ns3::Address const & from, ns3::Address const & to, ns3::NetDevice::PacketType packetType) [member function]
+    cls.add_method('Receive', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::NetDevice >', 'device'), param('ns3::Ptr< ns3::Packet const >', 'p'), param('uint16_t', 'protocol'), param('ns3::Address const &', 'from'), param('ns3::Address const &', 'to'), param('ns3::NetDevice::PacketType', 'packetType')])
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::Send(ns3::Ptr<ns3::Packet> packet, ns3::Ipv6Address source, ns3::Ipv6Address destination, uint8_t protocol, ns3::Ptr<ns3::Ipv6Route> route) [member function]
+    cls.add_method('Send', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Ipv6Address', 'source'), param('ns3::Ipv6Address', 'destination'), param('uint8_t', 'protocol'), param('ns3::Ptr< ns3::Ipv6Route >', 'route')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::SetRoutingProtocol(ns3::Ptr<ns3::Ipv6RoutingProtocol> routingProtocol) [member function]
+    cls.add_method('SetRoutingProtocol', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Ipv6RoutingProtocol >', 'routingProtocol')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ptr<ns3::Ipv6RoutingProtocol> ns3::Ipv6L3Protocol::GetRoutingProtocol() const [member function]
+    cls.add_method('GetRoutingProtocol', 
+                   'ns3::Ptr< ns3::Ipv6RoutingProtocol >', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): uint32_t ns3::Ipv6L3Protocol::AddInterface(ns3::Ptr<ns3::NetDevice> device) [member function]
+    cls.add_method('AddInterface', 
+                   'uint32_t', 
+                   [param('ns3::Ptr< ns3::NetDevice >', 'device')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ptr<ns3::Ipv6Interface> ns3::Ipv6L3Protocol::GetInterface(uint32_t i) const [member function]
+    cls.add_method('GetInterface', 
+                   'ns3::Ptr< ns3::Ipv6Interface >', 
+                   [param('uint32_t', 'i')], 
+                   is_const=True)
+    ## ipv6-l3-protocol.h (module 'internet'): uint32_t ns3::Ipv6L3Protocol::GetNInterfaces() const [member function]
+    cls.add_method('GetNInterfaces', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): int32_t ns3::Ipv6L3Protocol::GetInterfaceForAddress(ns3::Ipv6Address addr) const [member function]
+    cls.add_method('GetInterfaceForAddress', 
+                   'int32_t', 
+                   [param('ns3::Ipv6Address', 'addr')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): int32_t ns3::Ipv6L3Protocol::GetInterfaceForPrefix(ns3::Ipv6Address addr, ns3::Ipv6Prefix mask) const [member function]
+    cls.add_method('GetInterfaceForPrefix', 
+                   'int32_t', 
+                   [param('ns3::Ipv6Address', 'addr'), param('ns3::Ipv6Prefix', 'mask')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): int32_t ns3::Ipv6L3Protocol::GetInterfaceForDevice(ns3::Ptr<const ns3::NetDevice> device) const [member function]
+    cls.add_method('GetInterfaceForDevice', 
+                   'int32_t', 
+                   [param('ns3::Ptr< ns3::NetDevice const >', 'device')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): bool ns3::Ipv6L3Protocol::AddAddress(uint32_t i, ns3::Ipv6InterfaceAddress address, bool addOnLinkRoute=true) [member function]
+    cls.add_method('AddAddress', 
+                   'bool', 
+                   [param('uint32_t', 'i'), param('ns3::Ipv6InterfaceAddress', 'address'), param('bool', 'addOnLinkRoute', default_value='true')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ipv6InterfaceAddress ns3::Ipv6L3Protocol::GetAddress(uint32_t interfaceIndex, uint32_t addressIndex) const [member function]
+    cls.add_method('GetAddress', 
+                   'ns3::Ipv6InterfaceAddress', 
+                   [param('uint32_t', 'interfaceIndex'), param('uint32_t', 'addressIndex')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): uint32_t ns3::Ipv6L3Protocol::GetNAddresses(uint32_t interface) const [member function]
+    cls.add_method('GetNAddresses', 
+                   'uint32_t', 
+                   [param('uint32_t', 'interface')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): bool ns3::Ipv6L3Protocol::RemoveAddress(uint32_t interfaceIndex, uint32_t addressIndex) [member function]
+    cls.add_method('RemoveAddress', 
+                   'bool', 
+                   [param('uint32_t', 'interfaceIndex'), param('uint32_t', 'addressIndex')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): bool ns3::Ipv6L3Protocol::RemoveAddress(uint32_t interfaceIndex, ns3::Ipv6Address address) [member function]
+    cls.add_method('RemoveAddress', 
+                   'bool', 
+                   [param('uint32_t', 'interfaceIndex'), param('ns3::Ipv6Address', 'address')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::SetMetric(uint32_t i, uint16_t metric) [member function]
+    cls.add_method('SetMetric', 
+                   'void', 
+                   [param('uint32_t', 'i'), param('uint16_t', 'metric')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): uint16_t ns3::Ipv6L3Protocol::GetMetric(uint32_t i) const [member function]
+    cls.add_method('GetMetric', 
+                   'uint16_t', 
+                   [param('uint32_t', 'i')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): uint16_t ns3::Ipv6L3Protocol::GetMtu(uint32_t i) const [member function]
+    cls.add_method('GetMtu', 
+                   'uint16_t', 
+                   [param('uint32_t', 'i')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::SetPmtu(ns3::Ipv6Address dst, uint32_t pmtu) [member function]
+    cls.add_method('SetPmtu', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'dst'), param('uint32_t', 'pmtu')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): bool ns3::Ipv6L3Protocol::IsUp(uint32_t i) const [member function]
+    cls.add_method('IsUp', 
+                   'bool', 
+                   [param('uint32_t', 'i')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::SetUp(uint32_t i) [member function]
+    cls.add_method('SetUp', 
+                   'void', 
+                   [param('uint32_t', 'i')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::SetDown(uint32_t i) [member function]
+    cls.add_method('SetDown', 
+                   'void', 
+                   [param('uint32_t', 'i')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): bool ns3::Ipv6L3Protocol::IsForwarding(uint32_t i) const [member function]
+    cls.add_method('IsForwarding', 
+                   'bool', 
+                   [param('uint32_t', 'i')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::SetForwarding(uint32_t i, bool val) [member function]
+    cls.add_method('SetForwarding', 
+                   'void', 
+                   [param('uint32_t', 'i'), param('bool', 'val')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ipv6Address ns3::Ipv6L3Protocol::SourceAddressSelection(uint32_t interface, ns3::Ipv6Address dest) [member function]
+    cls.add_method('SourceAddressSelection', 
+                   'ns3::Ipv6Address', 
+                   [param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'dest')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ptr<ns3::NetDevice> ns3::Ipv6L3Protocol::GetNetDevice(uint32_t i) [member function]
+    cls.add_method('GetNetDevice', 
+                   'ns3::Ptr< ns3::NetDevice >', 
+                   [param('uint32_t', 'i')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ptr<ns3::Icmpv6L4Protocol> ns3::Ipv6L3Protocol::GetIcmpv6() const [member function]
+    cls.add_method('GetIcmpv6', 
+                   'ns3::Ptr< ns3::Icmpv6L4Protocol >', 
+                   [], 
+                   is_const=True)
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::AddAutoconfiguredAddress(uint32_t interface, ns3::Ipv6Address network, ns3::Ipv6Prefix mask, uint8_t flags, uint32_t validTime, uint32_t preferredTime, ns3::Ipv6Address defaultRouter=ns3::Ipv6Address::GetZero()) [member function]
+    cls.add_method('AddAutoconfiguredAddress', 
+                   'void', 
+                   [param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'network'), param('ns3::Ipv6Prefix', 'mask'), param('uint8_t', 'flags'), param('uint32_t', 'validTime'), param('uint32_t', 'preferredTime'), param('ns3::Ipv6Address', 'defaultRouter', default_value='ns3::Ipv6Address::GetZero()')])
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::RemoveAutoconfiguredAddress(uint32_t interface, ns3::Ipv6Address network, ns3::Ipv6Prefix mask, ns3::Ipv6Address defaultRouter) [member function]
+    cls.add_method('RemoveAutoconfiguredAddress', 
+                   'void', 
+                   [param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'network'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'defaultRouter')])
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::RegisterExtensions() [member function]
+    cls.add_method('RegisterExtensions', 
+                   'void', 
+                   [], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::RegisterOptions() [member function]
+    cls.add_method('RegisterOptions', 
+                   'void', 
+                   [], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::ReportDrop(ns3::Ipv6Header ipHeader, ns3::Ptr<ns3::Packet> p, ns3::Ipv6L3Protocol::DropReason dropReason) [member function]
+    cls.add_method('ReportDrop', 
+                   'void', 
+                   [param('ns3::Ipv6Header', 'ipHeader'), param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6L3Protocol::DropReason', 'dropReason')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::AddMulticastAddress(ns3::Ipv6Address address) [member function]
+    cls.add_method('AddMulticastAddress', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'address')])
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::AddMulticastAddress(ns3::Ipv6Address address, uint32_t interface) [member function]
+    cls.add_method('AddMulticastAddress', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'address'), param('uint32_t', 'interface')])
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::RemoveMulticastAddress(ns3::Ipv6Address address) [member function]
+    cls.add_method('RemoveMulticastAddress', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'address')])
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::RemoveMulticastAddress(ns3::Ipv6Address address, uint32_t interface) [member function]
+    cls.add_method('RemoveMulticastAddress', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'address'), param('uint32_t', 'interface')])
+    ## ipv6-l3-protocol.h (module 'internet'): bool ns3::Ipv6L3Protocol::IsRegisteredMulticastAddress(ns3::Ipv6Address address) const [member function]
+    cls.add_method('IsRegisteredMulticastAddress', 
+                   'bool', 
+                   [param('ns3::Ipv6Address', 'address')], 
+                   is_const=True)
+    ## ipv6-l3-protocol.h (module 'internet'): bool ns3::Ipv6L3Protocol::IsRegisteredMulticastAddress(ns3::Ipv6Address address, uint32_t interface) const [member function]
+    cls.add_method('IsRegisteredMulticastAddress', 
+                   'bool', 
+                   [param('ns3::Ipv6Address', 'address'), param('uint32_t', 'interface')], 
+                   is_const=True)
+    ## ipv6-l3-protocol.h (module 'internet'): bool ns3::Ipv6L3Protocol::ReachabilityHint(uint32_t ipInterfaceIndex, ns3::Ipv6Address address) [member function]
+    cls.add_method('ReachabilityHint', 
+                   'bool', 
+                   [param('uint32_t', 'ipInterfaceIndex'), param('ns3::Ipv6Address', 'address')])
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::DoDispose() [member function]
+    cls.add_method('DoDispose', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::NotifyNewAggregate() [member function]
+    cls.add_method('NotifyNewAggregate', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::SetIpForward(bool forward) [member function]
+    cls.add_method('SetIpForward', 
+                   'void', 
+                   [param('bool', 'forward')], 
+                   is_virtual=True, visibility='private')
+    ## ipv6-l3-protocol.h (module 'internet'): bool ns3::Ipv6L3Protocol::GetIpForward() const [member function]
+    cls.add_method('GetIpForward', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_virtual=True, visibility='private')
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::SetMtuDiscover(bool mtuDiscover) [member function]
+    cls.add_method('SetMtuDiscover', 
+                   'void', 
+                   [param('bool', 'mtuDiscover')], 
+                   is_virtual=True, visibility='private')
+    ## ipv6-l3-protocol.h (module 'internet'): bool ns3::Ipv6L3Protocol::GetMtuDiscover() const [member function]
+    cls.add_method('GetMtuDiscover', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_virtual=True, visibility='private')
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::SetSendIcmpv6Redirect(bool sendIcmpv6Redirect) [member function]
+    cls.add_method('SetSendIcmpv6Redirect', 
+                   'void', 
+                   [param('bool', 'sendIcmpv6Redirect')], 
+                   is_virtual=True, visibility='private')
+    ## ipv6-l3-protocol.h (module 'internet'): bool ns3::Ipv6L3Protocol::GetSendIcmpv6Redirect() const [member function]
+    cls.add_method('GetSendIcmpv6Redirect', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_virtual=True, visibility='private')
+    return
+
+def register_Ns3Ipv6PmtuCache_methods(root_module, cls):
+    ## ipv6-pmtu-cache.h (module 'internet'): ns3::Ipv6PmtuCache::Ipv6PmtuCache(ns3::Ipv6PmtuCache const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv6PmtuCache const &', 'arg0')])
+    ## ipv6-pmtu-cache.h (module 'internet'): ns3::Ipv6PmtuCache::Ipv6PmtuCache() [constructor]
+    cls.add_constructor([])
+    ## ipv6-pmtu-cache.h (module 'internet'): void ns3::Ipv6PmtuCache::DoDispose() [member function]
+    cls.add_method('DoDispose', 
+                   'void', 
+                   [], 
+                   is_virtual=True)
+    ## ipv6-pmtu-cache.h (module 'internet'): uint32_t ns3::Ipv6PmtuCache::GetPmtu(ns3::Ipv6Address dst) [member function]
+    cls.add_method('GetPmtu', 
+                   'uint32_t', 
+                   [param('ns3::Ipv6Address', 'dst')])
+    ## ipv6-pmtu-cache.h (module 'internet'): ns3::Time ns3::Ipv6PmtuCache::GetPmtuValidityTime() const [member function]
+    cls.add_method('GetPmtuValidityTime', 
+                   'ns3::Time', 
+                   [], 
+                   is_const=True)
+    ## ipv6-pmtu-cache.h (module 'internet'): static ns3::TypeId ns3::Ipv6PmtuCache::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## ipv6-pmtu-cache.h (module 'internet'): void ns3::Ipv6PmtuCache::SetPmtu(ns3::Ipv6Address dst, uint32_t pmtu) [member function]
+    cls.add_method('SetPmtu', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'dst'), param('uint32_t', 'pmtu')])
+    ## ipv6-pmtu-cache.h (module 'internet'): bool ns3::Ipv6PmtuCache::SetPmtuValidityTime(ns3::Time validity) [member function]
+    cls.add_method('SetPmtuValidityTime', 
+                   'bool', 
+                   [param('ns3::Time', 'validity')])
+    return
+
+def register_Ns3Ipv6PrefixChecker_methods(root_module, cls):
+    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixChecker::Ipv6PrefixChecker() [constructor]
+    cls.add_constructor([])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixChecker::Ipv6PrefixChecker(ns3::Ipv6PrefixChecker const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv6PrefixChecker const &', 'arg0')])
+    return
+
+def register_Ns3Ipv6PrefixValue_methods(root_module, cls):
+    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue::Ipv6PrefixValue() [constructor]
+    cls.add_constructor([])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue::Ipv6PrefixValue(ns3::Ipv6Prefix const & value) [constructor]
+    cls.add_constructor([param('ns3::Ipv6Prefix const &', 'value')])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue::Ipv6PrefixValue(ns3::Ipv6PrefixValue const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv6PrefixValue const &', 'arg0')])
+    ## ipv6-address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::Ipv6PrefixValue::Copy() const [member function]
+    cls.add_method('Copy', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6PrefixValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
+    cls.add_method('DeserializeFromString', 
+                   'bool', 
+                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_virtual=True)
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix ns3::Ipv6PrefixValue::Get() const [member function]
+    cls.add_method('Get', 
+                   'ns3::Ipv6Prefix', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): std::string ns3::Ipv6PrefixValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
+    cls.add_method('SerializeToString', 
+                   'std::string', 
+                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-address.h (module 'network'): void ns3::Ipv6PrefixValue::Set(ns3::Ipv6Prefix const & value) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('ns3::Ipv6Prefix const &', 'value')])
+    return
+
+def register_Ns3Mac48AddressChecker_methods(root_module, cls):
+    ## mac48-address.h (module 'network'): ns3::Mac48AddressChecker::Mac48AddressChecker() [constructor]
+    cls.add_constructor([])
+    ## mac48-address.h (module 'network'): ns3::Mac48AddressChecker::Mac48AddressChecker(ns3::Mac48AddressChecker const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Mac48AddressChecker const &', 'arg0')])
+    return
+
+def register_Ns3Mac48AddressValue_methods(root_module, cls):
+    ## mac48-address.h (module 'network'): ns3::Mac48AddressValue::Mac48AddressValue() [constructor]
+    cls.add_constructor([])
+    ## mac48-address.h (module 'network'): ns3::Mac48AddressValue::Mac48AddressValue(ns3::Mac48Address const & value) [constructor]
+    cls.add_constructor([param('ns3::Mac48Address const &', 'value')])
+    ## mac48-address.h (module 'network'): ns3::Mac48AddressValue::Mac48AddressValue(ns3::Mac48AddressValue const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Mac48AddressValue const &', 'arg0')])
+    ## mac48-address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::Mac48AddressValue::Copy() const [member function]
+    cls.add_method('Copy', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## mac48-address.h (module 'network'): bool ns3::Mac48AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
+    cls.add_method('DeserializeFromString', 
+                   'bool', 
+                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_virtual=True)
+    ## mac48-address.h (module 'network'): ns3::Mac48Address ns3::Mac48AddressValue::Get() const [member function]
+    cls.add_method('Get', 
+                   'ns3::Mac48Address', 
+                   [], 
+                   is_const=True)
+    ## mac48-address.h (module 'network'): std::string ns3::Mac48AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
+    cls.add_method('SerializeToString', 
+                   'std::string', 
+                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_const=True, is_virtual=True)
+    ## mac48-address.h (module 'network'): void ns3::Mac48AddressValue::Set(ns3::Mac48Address const & value) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('ns3::Mac48Address const &', 'value')])
+    return
+
+def register_Ns3NetDevice_methods(root_module, cls):
+    ## net-device.h (module 'network'): ns3::NetDevice::NetDevice() [constructor]
+    cls.add_constructor([])
+    ## net-device.h (module 'network'): ns3::NetDevice::NetDevice(ns3::NetDevice const & arg0) [constructor]
+    cls.add_constructor([param('ns3::NetDevice const &', 'arg0')])
+    ## net-device.h (module 'network'): void ns3::NetDevice::AddLinkChangeCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
+    cls.add_method('AddLinkChangeCallback', 
+                   'void', 
+                   [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): ns3::Address ns3::NetDevice::GetAddress() const [member function]
+    cls.add_method('GetAddress', 
+                   'ns3::Address', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): ns3::Address ns3::NetDevice::GetBroadcast() const [member function]
+    cls.add_method('GetBroadcast', 
+                   'ns3::Address', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): ns3::Ptr<ns3::Channel> ns3::NetDevice::GetChannel() const [member function]
+    cls.add_method('GetChannel', 
+                   'ns3::Ptr< ns3::Channel >', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): uint32_t ns3::NetDevice::GetIfIndex() const [member function]
+    cls.add_method('GetIfIndex', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): uint16_t ns3::NetDevice::GetMtu() const [member function]
+    cls.add_method('GetMtu', 
+                   'uint16_t', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): ns3::Address ns3::NetDevice::GetMulticast(ns3::Ipv4Address multicastGroup) const [member function]
+    cls.add_method('GetMulticast', 
+                   'ns3::Address', 
+                   [param('ns3::Ipv4Address', 'multicastGroup')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): ns3::Address ns3::NetDevice::GetMulticast(ns3::Ipv6Address addr) const [member function]
+    cls.add_method('GetMulticast', 
+                   'ns3::Address', 
+                   [param('ns3::Ipv6Address', 'addr')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): ns3::Ptr<ns3::Node> ns3::NetDevice::GetNode() const [member function]
+    cls.add_method('GetNode', 
+                   'ns3::Ptr< ns3::Node >', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): static ns3::TypeId ns3::NetDevice::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## net-device.h (module 'network'): bool ns3::NetDevice::IsBridge() const [member function]
+    cls.add_method('IsBridge', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): bool ns3::NetDevice::IsBroadcast() const [member function]
+    cls.add_method('IsBroadcast', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): bool ns3::NetDevice::IsLinkUp() const [member function]
+    cls.add_method('IsLinkUp', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): bool ns3::NetDevice::IsMulticast() const [member function]
+    cls.add_method('IsMulticast', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): bool ns3::NetDevice::IsPointToPoint() const [member function]
+    cls.add_method('IsPointToPoint', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): bool ns3::NetDevice::NeedsArp() const [member function]
+    cls.add_method('NeedsArp', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): bool ns3::NetDevice::Send(ns3::Ptr<ns3::Packet> packet, ns3::Address const & dest, uint16_t protocolNumber) [member function]
+    cls.add_method('Send', 
+                   'bool', 
+                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Address const &', 'dest'), param('uint16_t', 'protocolNumber')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): bool ns3::NetDevice::SendFrom(ns3::Ptr<ns3::Packet> packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber) [member function]
+    cls.add_method('SendFrom', 
+                   'bool', 
+                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Address const &', 'source'), param('ns3::Address const &', 'dest'), param('uint16_t', 'protocolNumber')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): void ns3::NetDevice::SetAddress(ns3::Address address) [member function]
+    cls.add_method('SetAddress', 
+                   'void', 
+                   [param('ns3::Address', 'address')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): void ns3::NetDevice::SetIfIndex(uint32_t const index) [member function]
+    cls.add_method('SetIfIndex', 
+                   'void', 
+                   [param('uint32_t const', 'index')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): bool ns3::NetDevice::SetMtu(uint16_t const mtu) [member function]
+    cls.add_method('SetMtu', 
+                   'bool', 
+                   [param('uint16_t const', 'mtu')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): void ns3::NetDevice::SetNode(ns3::Ptr<ns3::Node> node) [member function]
+    cls.add_method('SetNode', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Node >', 'node')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): void ns3::NetDevice::SetPromiscReceiveCallback(ns3::NetDevice::PromiscReceiveCallback cb) [member function]
+    cls.add_method('SetPromiscReceiveCallback', 
+                   'void', 
+                   [param('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): void ns3::NetDevice::SetReceiveCallback(ns3::NetDevice::ReceiveCallback cb) [member function]
+    cls.add_method('SetReceiveCallback', 
+                   'void', 
+                   [param('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): bool ns3::NetDevice::SupportsSendFrom() const [member function]
+    cls.add_method('SupportsSendFrom', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3NixVector_methods(root_module, cls):
+    cls.add_output_stream_operator()
+    ## nix-vector.h (module 'network'): ns3::NixVector::NixVector() [constructor]
+    cls.add_constructor([])
+    ## nix-vector.h (module 'network'): ns3::NixVector::NixVector(ns3::NixVector const & o) [constructor]
+    cls.add_constructor([param('ns3::NixVector const &', 'o')])
+    ## nix-vector.h (module 'network'): void ns3::NixVector::AddNeighborIndex(uint32_t newBits, uint32_t numberOfBits) [member function]
+    cls.add_method('AddNeighborIndex', 
+                   'void', 
+                   [param('uint32_t', 'newBits'), param('uint32_t', 'numberOfBits')])
+    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::BitCount(uint32_t numberOfNeighbors) const [member function]
+    cls.add_method('BitCount', 
+                   'uint32_t', 
+                   [param('uint32_t', 'numberOfNeighbors')], 
+                   is_const=True)
+    ## nix-vector.h (module 'network'): ns3::Ptr<ns3::NixVector> ns3::NixVector::Copy() const [member function]
+    cls.add_method('Copy', 
+                   'ns3::Ptr< ns3::NixVector >', 
+                   [], 
+                   is_const=True)
+    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::Deserialize(uint32_t const * buffer, uint32_t size) [member function]
+    cls.add_method('Deserialize', 
+                   'uint32_t', 
+                   [param('uint32_t const *', 'buffer'), param('uint32_t', 'size')])
+    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::ExtractNeighborIndex(uint32_t numberOfBits) [member function]
+    cls.add_method('ExtractNeighborIndex', 
+                   'uint32_t', 
+                   [param('uint32_t', 'numberOfBits')])
+    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::GetEpoch() const [member function]
+    cls.add_method('GetEpoch', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::GetRemainingBits() const [member function]
+    cls.add_method('GetRemainingBits', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::Serialize(uint32_t * buffer, uint32_t maxSize) const [member function]
+    cls.add_method('Serialize', 
+                   'uint32_t', 
+                   [param('uint32_t *', 'buffer'), param('uint32_t', 'maxSize')], 
+                   is_const=True)
+    ## nix-vector.h (module 'network'): void ns3::NixVector::SetEpoch(uint32_t epoch) [member function]
+    cls.add_method('SetEpoch', 
+                   'void', 
+                   [param('uint32_t', 'epoch')])
+    return
+
+def register_Ns3Node_methods(root_module, cls):
+    ## node.h (module 'network'): ns3::Node::Node(ns3::Node const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Node const &', 'arg0')])
+    ## node.h (module 'network'): ns3::Node::Node() [constructor]
+    cls.add_constructor([])
+    ## node.h (module 'network'): ns3::Node::Node(uint32_t systemId) [constructor]
+    cls.add_constructor([param('uint32_t', 'systemId')])
+    ## node.h (module 'network'): uint32_t ns3::Node::AddApplication(ns3::Ptr<ns3::Application> application) [member function]
+    cls.add_method('AddApplication', 
+                   'uint32_t', 
+                   [param('ns3::Ptr< ns3::Application >', 'application')])
+    ## node.h (module 'network'): uint32_t ns3::Node::AddDevice(ns3::Ptr<ns3::NetDevice> device) [member function]
+    cls.add_method('AddDevice', 
+                   'uint32_t', 
+                   [param('ns3::Ptr< ns3::NetDevice >', 'device')])
+    ## node.h (module 'network'): static bool ns3::Node::ChecksumEnabled() [member function]
+    cls.add_method('ChecksumEnabled', 
+                   'bool', 
+                   [], 
+                   is_static=True)
+    ## node.h (module 'network'): ns3::Ptr<ns3::Application> ns3::Node::GetApplication(uint32_t index) const [member function]
+    cls.add_method('GetApplication', 
+                   'ns3::Ptr< ns3::Application >', 
+                   [param('uint32_t', 'index')], 
+                   is_const=True)
+    ## node.h (module 'network'): ns3::Ptr<ns3::NetDevice> ns3::Node::GetDevice(uint32_t index) const [member function]
+    cls.add_method('GetDevice', 
+                   'ns3::Ptr< ns3::NetDevice >', 
+                   [param('uint32_t', 'index')], 
+                   is_const=True)
+    ## node.h (module 'network'): uint32_t ns3::Node::GetId() const [member function]
+    cls.add_method('GetId', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## node.h (module 'network'): ns3::Time ns3::Node::GetLocalTime() const [member function]
+    cls.add_method('GetLocalTime', 
+                   'ns3::Time', 
+                   [], 
+                   is_const=True)
+    ## node.h (module 'network'): uint32_t ns3::Node::GetNApplications() const [member function]
+    cls.add_method('GetNApplications', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## node.h (module 'network'): uint32_t ns3::Node::GetNDevices() const [member function]
+    cls.add_method('GetNDevices', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## node.h (module 'network'): uint32_t ns3::Node::GetSystemId() const [member function]
+    cls.add_method('GetSystemId', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## node.h (module 'network'): static ns3::TypeId ns3::Node::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## node.h (module 'network'): void ns3::Node::RegisterDeviceAdditionListener(ns3::Node::DeviceAdditionListener listener) [member function]
+    cls.add_method('RegisterDeviceAdditionListener', 
+                   'void', 
+                   [param('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'listener')])
+    ## node.h (module 'network'): void ns3::Node::RegisterProtocolHandler(ns3::Node::ProtocolHandler handler, uint16_t protocolType, ns3::Ptr<ns3::NetDevice> device, bool promiscuous=false) [member function]
+    cls.add_method('RegisterProtocolHandler', 
+                   'void', 
+                   [param('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'handler'), param('uint16_t', 'protocolType'), param('ns3::Ptr< ns3::NetDevice >', 'device'), param('bool', 'promiscuous', default_value='false')])
+    ## node.h (module 'network'): void ns3::Node::UnregisterDeviceAdditionListener(ns3::Node::DeviceAdditionListener listener) [member function]
+    cls.add_method('UnregisterDeviceAdditionListener', 
+                   'void', 
+                   [param('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'listener')])
+    ## node.h (module 'network'): void ns3::Node::UnregisterProtocolHandler(ns3::Node::ProtocolHandler handler) [member function]
+    cls.add_method('UnregisterProtocolHandler', 
+                   'void', 
+                   [param('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'handler')])
+    ## node.h (module 'network'): void ns3::Node::DoDispose() [member function]
+    cls.add_method('DoDispose', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    ## node.h (module 'network'): void ns3::Node::DoInitialize() [member function]
+    cls.add_method('DoInitialize', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    return
+
+def register_Ns3ObjectFactoryChecker_methods(root_module, cls):
+    ## object-factory.h (module 'core'): ns3::ObjectFactoryChecker::ObjectFactoryChecker() [constructor]
+    cls.add_constructor([])
+    ## object-factory.h (module 'core'): ns3::ObjectFactoryChecker::ObjectFactoryChecker(ns3::ObjectFactoryChecker const & arg0) [constructor]
+    cls.add_constructor([param('ns3::ObjectFactoryChecker const &', 'arg0')])
+    return
+
+def register_Ns3ObjectFactoryValue_methods(root_module, cls):
+    ## object-factory.h (module 'core'): ns3::ObjectFactoryValue::ObjectFactoryValue() [constructor]
+    cls.add_constructor([])
+    ## object-factory.h (module 'core'): ns3::ObjectFactoryValue::ObjectFactoryValue(ns3::ObjectFactory const & value) [constructor]
+    cls.add_constructor([param('ns3::ObjectFactory const &', 'value')])
+    ## object-factory.h (module 'core'): ns3::ObjectFactoryValue::ObjectFactoryValue(ns3::ObjectFactoryValue const & arg0) [constructor]
+    cls.add_constructor([param('ns3::ObjectFactoryValue const &', 'arg0')])
+    ## object-factory.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::ObjectFactoryValue::Copy() const [member function]
+    cls.add_method('Copy', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## object-factory.h (module 'core'): bool ns3::ObjectFactoryValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
+    cls.add_method('DeserializeFromString', 
+                   'bool', 
+                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_virtual=True)
+    ## object-factory.h (module 'core'): ns3::ObjectFactory ns3::ObjectFactoryValue::Get() const [member function]
+    cls.add_method('Get', 
+                   'ns3::ObjectFactory', 
+                   [], 
+                   is_const=True)
+    ## object-factory.h (module 'core'): std::string ns3::ObjectFactoryValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
+    cls.add_method('SerializeToString', 
+                   'std::string', 
+                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_const=True, is_virtual=True)
+    ## object-factory.h (module 'core'): void ns3::ObjectFactoryValue::Set(ns3::ObjectFactory const & value) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('ns3::ObjectFactory const &', 'value')])
+    return
+
+def register_Ns3OutputStreamWrapper_methods(root_module, cls):
+    ## output-stream-wrapper.h (module 'network'): ns3::OutputStreamWrapper::OutputStreamWrapper(ns3::OutputStreamWrapper const & arg0) [constructor]
+    cls.add_constructor([param('ns3::OutputStreamWrapper const &', 'arg0')])
+    ## output-stream-wrapper.h (module 'network'): ns3::OutputStreamWrapper::OutputStreamWrapper(std::string filename, std::ios_base::openmode filemode) [constructor]
+    cls.add_constructor([param('std::string', 'filename'), param('std::ios_base::openmode', 'filemode')])
+    ## output-stream-wrapper.h (module 'network'): ns3::OutputStreamWrapper::OutputStreamWrapper(std::ostream * os) [constructor]
+    cls.add_constructor([param('std::ostream *', 'os')])
+    ## output-stream-wrapper.h (module 'network'): std::ostream * ns3::OutputStreamWrapper::GetStream() [member function]
+    cls.add_method('GetStream', 
+                   'std::ostream *', 
+                   [])
+    return
+
+def register_Ns3Packet_methods(root_module, cls):
+    cls.add_output_stream_operator()
+    ## packet.h (module 'network'): ns3::Packet::Packet() [constructor]
+    cls.add_constructor([])
+    ## packet.h (module 'network'): ns3::Packet::Packet(ns3::Packet const & o) [constructor]
+    cls.add_constructor([param('ns3::Packet const &', 'o')])
+    ## packet.h (module 'network'): ns3::Packet::Packet(uint32_t size) [constructor]
+    cls.add_constructor([param('uint32_t', 'size')])
+    ## packet.h (module 'network'): ns3::Packet::Packet(uint8_t const * buffer, uint32_t size, bool magic) [constructor]
+    cls.add_constructor([param('uint8_t const *', 'buffer'), param('uint32_t', 'size'), param('bool', 'magic')])
+    ## packet.h (module 'network'): ns3::Packet::Packet(uint8_t const * buffer, uint32_t size) [constructor]
+    cls.add_constructor([param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
+    ## packet.h (module 'network'): void ns3::Packet::AddAtEnd(ns3::Ptr<const ns3::Packet> packet) [member function]
+    cls.add_method('AddAtEnd', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Packet const >', 'packet')])
+    ## packet.h (module 'network'): void ns3::Packet::AddByteTag(ns3::Tag const & tag) const [member function]
+    cls.add_method('AddByteTag', 
+                   'void', 
+                   [param('ns3::Tag const &', 'tag')], 
+                   is_const=True)
+    ## packet.h (module 'network'): void ns3::Packet::AddByteTag(ns3::Tag const & tag, uint32_t start, uint32_t end) const [member function]
+    cls.add_method('AddByteTag', 
+                   'void', 
+                   [param('ns3::Tag const &', 'tag'), param('uint32_t', 'start'), param('uint32_t', 'end')], 
+                   is_const=True)
+    ## packet.h (module 'network'): void ns3::Packet::AddHeader(ns3::Header const & header) [member function]
+    cls.add_method('AddHeader', 
+                   'void', 
+                   [param('ns3::Header const &', 'header')])
+    ## packet.h (module 'network'): void ns3::Packet::AddPacketTag(ns3::Tag const & tag) const [member function]
+    cls.add_method('AddPacketTag', 
+                   'void', 
+                   [param('ns3::Tag const &', 'tag')], 
+                   is_const=True)
+    ## packet.h (module 'network'): void ns3::Packet::AddPaddingAtEnd(uint32_t size) [member function]
+    cls.add_method('AddPaddingAtEnd', 
+                   'void', 
+                   [param('uint32_t', 'size')])
+    ## packet.h (module 'network'): void ns3::Packet::AddTrailer(ns3::Trailer const & trailer) [member function]
+    cls.add_method('AddTrailer', 
+                   'void', 
+                   [param('ns3::Trailer const &', 'trailer')])
+    ## packet.h (module 'network'): ns3::PacketMetadata::ItemIterator ns3::Packet::BeginItem() const [member function]
+    cls.add_method('BeginItem', 
+                   'ns3::PacketMetadata::ItemIterator', 
+                   [], 
+                   is_const=True)
+    ## packet.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Packet::Copy() const [member function]
+    cls.add_method('Copy', 
+                   'ns3::Ptr< ns3::Packet >', 
+                   [], 
+                   is_const=True)
+    ## packet.h (module 'network'): uint32_t ns3::Packet::CopyData(uint8_t * buffer, uint32_t size) const [member function]
+    cls.add_method('CopyData', 
+                   'uint32_t', 
+                   [param('uint8_t *', 'buffer'), param('uint32_t', 'size')], 
+                   is_const=True)
+    ## packet.h (module 'network'): void ns3::Packet::CopyData(std::ostream * os, uint32_t size) const [member function]
+    cls.add_method('CopyData', 
+                   'void', 
+                   [param('std::ostream *', 'os'), param('uint32_t', 'size')], 
+                   is_const=True)
+    ## packet.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Packet::CreateFragment(uint32_t start, uint32_t length) const [member function]
+    cls.add_method('CreateFragment', 
+                   'ns3::Ptr< ns3::Packet >', 
+                   [param('uint32_t', 'start'), param('uint32_t', 'length')], 
+                   is_const=True)
+    ## packet.h (module 'network'): static void ns3::Packet::EnableChecking() [member function]
+    cls.add_method('EnableChecking', 
+                   'void', 
+                   [], 
+                   is_static=True)
+    ## packet.h (module 'network'): static void ns3::Packet::EnablePrinting() [member function]
+    cls.add_method('EnablePrinting', 
+                   'void', 
+                   [], 
+                   is_static=True)
+    ## packet.h (module 'network'): bool ns3::Packet::FindFirstMatchingByteTag(ns3::Tag & tag) const [member function]
+    cls.add_method('FindFirstMatchingByteTag', 
+                   'bool', 
+                   [param('ns3::Tag &', 'tag')], 
+                   is_const=True)
+    ## packet.h (module 'network'): ns3::ByteTagIterator ns3::Packet::GetByteTagIterator() const [member function]
+    cls.add_method('GetByteTagIterator', 
+                   'ns3::ByteTagIterator', 
+                   [], 
+                   is_const=True)
+    ## packet.h (module 'network'): ns3::Ptr<ns3::NixVector> ns3::Packet::GetNixVector() const [member function]
+    cls.add_method('GetNixVector', 
+                   'ns3::Ptr< ns3::NixVector >', 
+                   [], 
+                   is_const=True)
+    ## packet.h (module 'network'): ns3::PacketTagIterator ns3::Packet::GetPacketTagIterator() const [member function]
+    cls.add_method('GetPacketTagIterator', 
+                   'ns3::PacketTagIterator', 
+                   [], 
+                   is_const=True)
+    ## packet.h (module 'network'): uint32_t ns3::Packet::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## packet.h (module 'network'): uint32_t ns3::Packet::GetSize() const [member function]
+    cls.add_method('GetSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## packet.h (module 'network'): uint64_t ns3::Packet::GetUid() const [member function]
+    cls.add_method('GetUid', 
+                   'uint64_t', 
+                   [], 
+                   is_const=True)
+    ## packet.h (module 'network'): uint32_t ns3::Packet::PeekHeader(ns3::Header & header) const [member function]
+    cls.add_method('PeekHeader', 
+                   'uint32_t', 
+                   [param('ns3::Header &', 'header')], 
+                   is_const=True)
+    ## packet.h (module 'network'): uint32_t ns3::Packet::PeekHeader(ns3::Header & header, uint32_t size) const [member function]
+    cls.add_method('PeekHeader', 
+                   'uint32_t', 
+                   [param('ns3::Header &', 'header'), param('uint32_t', 'size')], 
+                   is_const=True)
+    ## packet.h (module 'network'): bool ns3::Packet::PeekPacketTag(ns3::Tag & tag) const [member function]
+    cls.add_method('PeekPacketTag', 
+                   'bool', 
+                   [param('ns3::Tag &', 'tag')], 
+                   is_const=True)
+    ## packet.h (module 'network'): uint32_t ns3::Packet::PeekTrailer(ns3::Trailer & trailer) [member function]
+    cls.add_method('PeekTrailer', 
+                   'uint32_t', 
+                   [param('ns3::Trailer &', 'trailer')])
+    ## packet.h (module 'network'): void ns3::Packet::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True)
+    ## packet.h (module 'network'): void ns3::Packet::PrintByteTags(std::ostream & os) const [member function]
+    cls.add_method('PrintByteTags', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True)
+    ## packet.h (module 'network'): void ns3::Packet::PrintPacketTags(std::ostream & os) const [member function]
+    cls.add_method('PrintPacketTags', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True)
+    ## packet.h (module 'network'): void ns3::Packet::RemoveAllByteTags() [member function]
+    cls.add_method('RemoveAllByteTags', 
+                   'void', 
+                   [])
+    ## packet.h (module 'network'): void ns3::Packet::RemoveAllPacketTags() [member function]
+    cls.add_method('RemoveAllPacketTags', 
+                   'void', 
+                   [])
+    ## packet.h (module 'network'): void ns3::Packet::RemoveAtEnd(uint32_t size) [member function]
+    cls.add_method('RemoveAtEnd', 
+                   'void', 
+                   [param('uint32_t', 'size')])
+    ## packet.h (module 'network'): void ns3::Packet::RemoveAtStart(uint32_t size) [member function]
+    cls.add_method('RemoveAtStart', 
+                   'void', 
+                   [param('uint32_t', 'size')])
+    ## packet.h (module 'network'): uint32_t ns3::Packet::RemoveHeader(ns3::Header & header) [member function]
+    cls.add_method('RemoveHeader', 
+                   'uint32_t', 
+                   [param('ns3::Header &', 'header')])
+    ## packet.h (module 'network'): uint32_t ns3::Packet::RemoveHeader(ns3::Header & header, uint32_t size) [member function]
+    cls.add_method('RemoveHeader', 
+                   'uint32_t', 
+                   [param('ns3::Header &', 'header'), param('uint32_t', 'size')])
+    ## packet.h (module 'network'): bool ns3::Packet::RemovePacketTag(ns3::Tag & tag) [member function]
+    cls.add_method('RemovePacketTag', 
+                   'bool', 
+                   [param('ns3::Tag &', 'tag')])
+    ## packet.h (module 'network'): uint32_t ns3::Packet::RemoveTrailer(ns3::Trailer & trailer) [member function]
+    cls.add_method('RemoveTrailer', 
+                   'uint32_t', 
+                   [param('ns3::Trailer &', 'trailer')])
+    ## packet.h (module 'network'): bool ns3::Packet::ReplacePacketTag(ns3::Tag & tag) [member function]
+    cls.add_method('ReplacePacketTag', 
+                   'bool', 
+                   [param('ns3::Tag &', 'tag')])
+    ## packet.h (module 'network'): uint32_t ns3::Packet::Serialize(uint8_t * buffer, uint32_t maxSize) const [member function]
+    cls.add_method('Serialize', 
+                   'uint32_t', 
+                   [param('uint8_t *', 'buffer'), param('uint32_t', 'maxSize')], 
+                   is_const=True)
+    ## packet.h (module 'network'): void ns3::Packet::SetNixVector(ns3::Ptr<ns3::NixVector> nixVector) const [member function]
+    cls.add_method('SetNixVector', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::NixVector >', 'nixVector')], 
+                   is_const=True)
+    ## packet.h (module 'network'): std::string ns3::Packet::ToString() const [member function]
+    cls.add_method('ToString', 
+                   'std::string', 
+                   [], 
+                   is_const=True)
+    return
+
+def register_Ns3QueueItem_methods(root_module, cls):
+    cls.add_output_stream_operator()
+    ## queue-item.h (module 'network'): ns3::QueueItem::QueueItem(ns3::Ptr<ns3::Packet> p) [constructor]
+    cls.add_constructor([param('ns3::Ptr< ns3::Packet >', 'p')])
+    ## queue-item.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::QueueItem::GetPacket() const [member function]
+    cls.add_method('GetPacket', 
+                   'ns3::Ptr< ns3::Packet >', 
+                   [], 
+                   is_const=True)
+    ## queue-item.h (module 'network'): uint32_t ns3::QueueItem::GetSize() const [member function]
+    cls.add_method('GetSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## queue-item.h (module 'network'): bool ns3::QueueItem::GetUint8Value(ns3::QueueItem::Uint8Values field, uint8_t & value) const [member function]
+    cls.add_method('GetUint8Value', 
+                   'bool', 
+                   [param('ns3::QueueItem::Uint8Values', 'field'), param('uint8_t &', 'value')], 
+                   is_const=True, is_virtual=True)
+    ## queue-item.h (module 'network'): void ns3::QueueItem::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True, is_virtual=True)
+    return
+
+def register_Ns3TimeValue_methods(root_module, cls):
+    ## nstime.h (module 'core'): ns3::TimeValue::TimeValue() [constructor]
+    cls.add_constructor([])
+    ## nstime.h (module 'core'): ns3::TimeValue::TimeValue(ns3::Time const & value) [constructor]
+    cls.add_constructor([param('ns3::Time const &', 'value')])
+    ## nstime.h (module 'core'): ns3::TimeValue::TimeValue(ns3::TimeValue const & arg0) [constructor]
+    cls.add_constructor([param('ns3::TimeValue const &', 'arg0')])
+    ## nstime.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::TimeValue::Copy() const [member function]
+    cls.add_method('Copy', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## nstime.h (module 'core'): bool ns3::TimeValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
+    cls.add_method('DeserializeFromString', 
+                   'bool', 
+                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_virtual=True)
+    ## nstime.h (module 'core'): ns3::Time ns3::TimeValue::Get() const [member function]
+    cls.add_method('Get', 
+                   'ns3::Time', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): std::string ns3::TimeValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
+    cls.add_method('SerializeToString', 
+                   'std::string', 
+                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_const=True, is_virtual=True)
+    ## nstime.h (module 'core'): void ns3::TimeValue::Set(ns3::Time const & value) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('ns3::Time const &', 'value')])
+    return
+
+def register_Ns3TypeIdChecker_methods(root_module, cls):
+    ## type-id.h (module 'core'): ns3::TypeIdChecker::TypeIdChecker() [constructor]
+    cls.add_constructor([])
+    ## type-id.h (module 'core'): ns3::TypeIdChecker::TypeIdChecker(ns3::TypeIdChecker const & arg0) [constructor]
+    cls.add_constructor([param('ns3::TypeIdChecker const &', 'arg0')])
+    return
+
+def register_Ns3TypeIdValue_methods(root_module, cls):
+    ## type-id.h (module 'core'): ns3::TypeIdValue::TypeIdValue() [constructor]
+    cls.add_constructor([])
+    ## type-id.h (module 'core'): ns3::TypeIdValue::TypeIdValue(ns3::TypeId const & value) [constructor]
+    cls.add_constructor([param('ns3::TypeId const &', 'value')])
+    ## type-id.h (module 'core'): ns3::TypeIdValue::TypeIdValue(ns3::TypeIdValue const & arg0) [constructor]
+    cls.add_constructor([param('ns3::TypeIdValue const &', 'arg0')])
+    ## type-id.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::TypeIdValue::Copy() const [member function]
+    cls.add_method('Copy', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## type-id.h (module 'core'): bool ns3::TypeIdValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
+    cls.add_method('DeserializeFromString', 
+                   'bool', 
+                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_virtual=True)
+    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeIdValue::Get() const [member function]
+    cls.add_method('Get', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True)
+    ## type-id.h (module 'core'): std::string ns3::TypeIdValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
+    cls.add_method('SerializeToString', 
+                   'std::string', 
+                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_const=True, is_virtual=True)
+    ## type-id.h (module 'core'): void ns3::TypeIdValue::Set(ns3::TypeId const & value) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('ns3::TypeId const &', 'value')])
+    return
+
+def register_Ns3AddressChecker_methods(root_module, cls):
+    ## address.h (module 'network'): ns3::AddressChecker::AddressChecker() [constructor]
+    cls.add_constructor([])
+    ## address.h (module 'network'): ns3::AddressChecker::AddressChecker(ns3::AddressChecker const & arg0) [constructor]
+    cls.add_constructor([param('ns3::AddressChecker const &', 'arg0')])
+    return
+
+def register_Ns3AddressValue_methods(root_module, cls):
+    ## address.h (module 'network'): ns3::AddressValue::AddressValue() [constructor]
+    cls.add_constructor([])
+    ## address.h (module 'network'): ns3::AddressValue::AddressValue(ns3::Address const & value) [constructor]
+    cls.add_constructor([param('ns3::Address const &', 'value')])
+    ## address.h (module 'network'): ns3::AddressValue::AddressValue(ns3::AddressValue const & arg0) [constructor]
+    cls.add_constructor([param('ns3::AddressValue const &', 'arg0')])
+    ## address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::AddressValue::Copy() const [member function]
+    cls.add_method('Copy', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## address.h (module 'network'): bool ns3::AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
+    cls.add_method('DeserializeFromString', 
+                   'bool', 
+                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_virtual=True)
+    ## address.h (module 'network'): ns3::Address ns3::AddressValue::Get() const [member function]
+    cls.add_method('Get', 
+                   'ns3::Address', 
+                   [], 
+                   is_const=True)
+    ## address.h (module 'network'): std::string ns3::AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
+    cls.add_method('SerializeToString', 
+                   'std::string', 
+                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_const=True, is_virtual=True)
+    ## address.h (module 'network'): void ns3::AddressValue::Set(ns3::Address const & value) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('ns3::Address const &', 'value')])
+    return
+
+def register_Ns3CallbackImpl__Bool_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackImpl< bool, ns3::Ptr< ns3::Socket >, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
+    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
+    cls.add_method('DoGetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True)
+    ## callback.h (module 'core'): std::string ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
+    cls.add_method('GetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): bool ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Socket> arg0, ns3::Address const & arg1) [member operator]
+    cls.add_method('operator()', 
+                   'bool', 
+                   [param('ns3::Ptr< ns3::Socket >', 'arg0'), param('ns3::Address const &', 'arg1')], 
+                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackImpl< ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
+    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
+    cls.add_method('DoGetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True)
+    ## callback.h (module 'core'): std::string ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
+    cls.add_method('GetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): ns3::ObjectBase * ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()() [member operator]
+    cls.add_method('operator()', 
+                   'ns3::ObjectBase *', 
+                   [], 
+                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ipv4L3ProtocolDropReason_Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
+    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
+    cls.add_method('DoGetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True)
+    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
+    cls.add_method('GetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): void ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ipv4Header const & arg0, ns3::Ptr<const ns3::Packet> arg1, ns3::Ipv4L3Protocol::DropReason arg2, ns3::Ptr<ns3::Ipv4> arg3, unsigned int arg4) [member operator]
+    cls.add_method('operator()', 
+                   'void', 
+                   [param('ns3::Ipv4Header const &', 'arg0'), param('ns3::Ptr< ns3::Packet const >', 'arg1'), param('ns3::Ipv4L3Protocol::DropReason', 'arg2'), param('ns3::Ptr< ns3::Ipv4 >', 'arg3'), param('unsigned int', 'arg4')], 
+                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
+    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
+    cls.add_method('DoGetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True)
+    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
+    cls.add_method('GetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): void ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ipv4Header const & arg0, ns3::Ptr<const ns3::Packet> arg1, unsigned int arg2) [member operator]
+    cls.add_method('operator()', 
+                   'void', 
+                   [param('ns3::Ipv4Header const &', 'arg0'), param('ns3::Ptr< ns3::Packet const >', 'arg1'), param('unsigned int', 'arg2')], 
+                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3CallbackImpl__Void_Const_ns3Ipv6Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ipv6L3ProtocolDropReason_Ns3Ptr__lt__ns3Ipv6__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
+    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
+    cls.add_method('DoGetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True)
+    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
+    cls.add_method('GetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): void ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ipv6Header const & arg0, ns3::Ptr<const ns3::Packet> arg1, ns3::Ipv6L3Protocol::DropReason arg2, ns3::Ptr<ns3::Ipv6> arg3, unsigned int arg4) [member operator]
+    cls.add_method('operator()', 
+                   'void', 
+                   [param('ns3::Ipv6Header const &', 'arg0'), param('ns3::Ptr< ns3::Packet const >', 'arg1'), param('ns3::Ipv6L3Protocol::DropReason', 'arg2'), param('ns3::Ptr< ns3::Ipv6 >', 'arg3'), param('unsigned int', 'arg4')], 
+                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3CallbackImpl__Void_Const_ns3Ipv6Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
+    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
+    cls.add_method('DoGetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True)
+    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
+    cls.add_method('GetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): void ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ipv6Header const & arg0, ns3::Ptr<const ns3::Packet> arg1, unsigned int arg2) [member operator]
+    cls.add_method('operator()', 
+                   'void', 
+                   [param('ns3::Ipv6Header const &', 'arg0'), param('ns3::Ptr< ns3::Packet const >', 'arg1'), param('unsigned int', 'arg2')], 
+                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
+    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
+    cls.add_method('DoGetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True)
+    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
+    cls.add_method('GetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::Packet> arg0, ns3::Ptr<ns3::Ipv4> arg1, unsigned int arg2) [member operator]
+    cls.add_method('operator()', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Packet const >', 'arg0'), param('ns3::Ptr< ns3::Ipv4 >', 'arg1'), param('unsigned int', 'arg2')], 
+                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ptr__lt__ns3Ipv6__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
+    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
+    cls.add_method('DoGetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True)
+    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
+    cls.add_method('GetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::Packet> arg0, ns3::Ptr<ns3::Ipv6> arg1, unsigned int arg2) [member operator]
+    cls.add_method('operator()', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Packet const >', 'arg0'), param('ns3::Ptr< ns3::Ipv6 >', 'arg1'), param('unsigned int', 'arg2')], 
+                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
+    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
+    cls.add_method('DoGetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True)
+    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
+    cls.add_method('GetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::NetDevice> arg0, ns3::Ptr<const ns3::Packet> arg1, short unsigned int arg2, ns3::Address const & arg3, ns3::Address const & arg4, ns3::NetDevice::PacketType arg5) [member operator]
+    cls.add_method('operator()', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::NetDevice >', 'arg0'), param('ns3::Ptr< ns3::Packet const >', 'arg1'), param('short unsigned int', 'arg2'), param('ns3::Address const &', 'arg3'), param('ns3::Address const &', 'arg4'), param('ns3::NetDevice::PacketType', 'arg5')], 
+                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
+    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
+    cls.add_method('DoGetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True)
+    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
+    cls.add_method('GetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::NetDevice> arg0) [member operator]
+    cls.add_method('operator()', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::NetDevice >', 'arg0')], 
+                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Socket >, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
+    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
+    cls.add_method('DoGetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True)
+    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
+    cls.add_method('GetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Socket> arg0, ns3::Address const & arg1) [member operator]
+    cls.add_method('operator()', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Socket >', 'arg0'), param('ns3::Address const &', 'arg1')], 
+                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
+    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
+    cls.add_method('DoGetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True)
+    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
+    cls.add_method('GetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Socket> arg0) [member operator]
+    cls.add_method('operator()', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Socket >', 'arg0')], 
+                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Socket >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
+    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
+    cls.add_method('DoGetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True)
+    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
+    cls.add_method('GetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Socket> arg0, unsigned int arg1) [member operator]
+    cls.add_method('operator()', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Socket >', 'arg0'), param('unsigned int', 'arg1')], 
+                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3QueueDiscItem_methods(root_module, cls):
+    ## queue-item.h (module 'network'): ns3::QueueDiscItem::QueueDiscItem(ns3::Ptr<ns3::Packet> p, ns3::Address const & addr, uint16_t protocol) [constructor]
+    cls.add_constructor([param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Address const &', 'addr'), param('uint16_t', 'protocol')])
+    ## queue-item.h (module 'network'): ns3::Address ns3::QueueDiscItem::GetAddress() const [member function]
+    cls.add_method('GetAddress', 
+                   'ns3::Address', 
+                   [], 
+                   is_const=True)
+    ## queue-item.h (module 'network'): uint16_t ns3::QueueDiscItem::GetProtocol() const [member function]
+    cls.add_method('GetProtocol', 
+                   'uint16_t', 
+                   [], 
+                   is_const=True)
+    ## queue-item.h (module 'network'): uint8_t ns3::QueueDiscItem::GetTxQueueIndex() const [member function]
+    cls.add_method('GetTxQueueIndex', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## queue-item.h (module 'network'): void ns3::QueueDiscItem::SetTxQueueIndex(uint8_t txq) [member function]
+    cls.add_method('SetTxQueueIndex', 
+                   'void', 
+                   [param('uint8_t', 'txq')])
+    ## queue-item.h (module 'network'): ns3::Time ns3::QueueDiscItem::GetTimeStamp() const [member function]
+    cls.add_method('GetTimeStamp', 
+                   'ns3::Time', 
+                   [], 
+                   is_const=True)
+    ## queue-item.h (module 'network'): void ns3::QueueDiscItem::SetTimeStamp(ns3::Time t) [member function]
+    cls.add_method('SetTimeStamp', 
+                   'void', 
+                   [param('ns3::Time', 't')])
+    ## queue-item.h (module 'network'): void ns3::QueueDiscItem::AddHeader() [member function]
+    cls.add_method('AddHeader', 
+                   'void', 
+                   [], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## queue-item.h (module 'network'): void ns3::QueueDiscItem::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True, is_virtual=True)
+    ## queue-item.h (module 'network'): bool ns3::QueueDiscItem::Mark() [member function]
+    cls.add_method('Mark', 
+                   'bool', 
+                   [], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## queue-item.h (module 'network'): uint32_t ns3::QueueDiscItem::Hash(uint32_t perturbation=0) const [member function]
+    cls.add_method('Hash', 
+                   'uint32_t', 
+                   [param('uint32_t', 'perturbation', default_value='0')], 
+                   is_const=True, is_virtual=True)
+    return
+
+def register_Ns3HashImplementation_methods(root_module, cls):
+    ## hash-function.h (module 'core'): ns3::Hash::Implementation::Implementation(ns3::Hash::Implementation const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Hash::Implementation const &', 'arg0')])
+    ## hash-function.h (module 'core'): ns3::Hash::Implementation::Implementation() [constructor]
+    cls.add_constructor([])
+    ## hash-function.h (module 'core'): uint32_t ns3::Hash::Implementation::GetHash32(char const * buffer, std::size_t const size) [member function]
+    cls.add_method('GetHash32', 
+                   'uint32_t', 
+                   [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## hash-function.h (module 'core'): uint64_t ns3::Hash::Implementation::GetHash64(char const * buffer, std::size_t const size) [member function]
+    cls.add_method('GetHash64', 
+                   'uint64_t', 
+                   [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
+                   is_virtual=True)
+    ## hash-function.h (module 'core'): void ns3::Hash::Implementation::clear() [member function]
+    cls.add_method('clear', 
+                   'void', 
+                   [], 
+                   is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3HashFunctionFnv1a_methods(root_module, cls):
+    ## hash-fnv.h (module 'core'): ns3::Hash::Function::Fnv1a::Fnv1a(ns3::Hash::Function::Fnv1a const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Hash::Function::Fnv1a const &', 'arg0')])
+    ## hash-fnv.h (module 'core'): ns3::Hash::Function::Fnv1a::Fnv1a() [constructor]
+    cls.add_constructor([])
+    ## hash-fnv.h (module 'core'): uint32_t ns3::Hash::Function::Fnv1a::GetHash32(char const * buffer, size_t const size) [member function]
+    cls.add_method('GetHash32', 
+                   'uint32_t', 
+                   [param('char const *', 'buffer'), param('size_t const', 'size')], 
+                   is_virtual=True)
+    ## hash-fnv.h (module 'core'): uint64_t ns3::Hash::Function::Fnv1a::GetHash64(char const * buffer, size_t const size) [member function]
+    cls.add_method('GetHash64', 
+                   'uint64_t', 
+                   [param('char const *', 'buffer'), param('size_t const', 'size')], 
+                   is_virtual=True)
+    ## hash-fnv.h (module 'core'): void ns3::Hash::Function::Fnv1a::clear() [member function]
+    cls.add_method('clear', 
+                   'void', 
+                   [], 
+                   is_virtual=True)
+    return
+
+def register_Ns3HashFunctionHash32_methods(root_module, cls):
+    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash32::Hash32(ns3::Hash::Function::Hash32 const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Hash::Function::Hash32 const &', 'arg0')])
+    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash32::Hash32(ns3::Hash::Hash32Function_ptr hp) [constructor]
+    cls.add_constructor([param('ns3::Hash::Hash32Function_ptr', 'hp')])
+    ## hash-function.h (module 'core'): uint32_t ns3::Hash::Function::Hash32::GetHash32(char const * buffer, std::size_t const size) [member function]
+    cls.add_method('GetHash32', 
+                   'uint32_t', 
+                   [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
+                   is_virtual=True)
+    ## hash-function.h (module 'core'): void ns3::Hash::Function::Hash32::clear() [member function]
+    cls.add_method('clear', 
+                   'void', 
+                   [], 
+                   is_virtual=True)
+    return
+
+def register_Ns3HashFunctionHash64_methods(root_module, cls):
+    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash64::Hash64(ns3::Hash::Function::Hash64 const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Hash::Function::Hash64 const &', 'arg0')])
+    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash64::Hash64(ns3::Hash::Hash64Function_ptr hp) [constructor]
+    cls.add_constructor([param('ns3::Hash::Hash64Function_ptr', 'hp')])
+    ## hash-function.h (module 'core'): uint32_t ns3::Hash::Function::Hash64::GetHash32(char const * buffer, std::size_t const size) [member function]
+    cls.add_method('GetHash32', 
+                   'uint32_t', 
+                   [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
+                   is_virtual=True)
+    ## hash-function.h (module 'core'): uint64_t ns3::Hash::Function::Hash64::GetHash64(char const * buffer, std::size_t const size) [member function]
+    cls.add_method('GetHash64', 
+                   'uint64_t', 
+                   [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
+                   is_virtual=True)
+    ## hash-function.h (module 'core'): void ns3::Hash::Function::Hash64::clear() [member function]
+    cls.add_method('clear', 
+                   'void', 
+                   [], 
+                   is_virtual=True)
+    return
+
+def register_Ns3HashFunctionMurmur3_methods(root_module, cls):
+    ## hash-murmur3.h (module 'core'): ns3::Hash::Function::Murmur3::Murmur3(ns3::Hash::Function::Murmur3 const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Hash::Function::Murmur3 const &', 'arg0')])
+    ## hash-murmur3.h (module 'core'): ns3::Hash::Function::Murmur3::Murmur3() [constructor]
+    cls.add_constructor([])
+    ## hash-murmur3.h (module 'core'): uint32_t ns3::Hash::Function::Murmur3::GetHash32(char const * buffer, std::size_t const size) [member function]
+    cls.add_method('GetHash32', 
+                   'uint32_t', 
+                   [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
+                   is_virtual=True)
+    ## hash-murmur3.h (module 'core'): uint64_t ns3::Hash::Function::Murmur3::GetHash64(char const * buffer, std::size_t const size) [member function]
+    cls.add_method('GetHash64', 
+                   'uint64_t', 
+                   [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
+                   is_virtual=True)
+    ## hash-murmur3.h (module 'core'): void ns3::Hash::Function::Murmur3::clear() [member function]
+    cls.add_method('clear', 
+                   'void', 
+                   [], 
+                   is_virtual=True)
+    return
+
+def register_functions(root_module):
+    module = root_module
+    register_functions_ns3_FatalImpl(module.add_cpp_namespace('FatalImpl'), root_module)
+    register_functions_ns3_Hash(module.add_cpp_namespace('Hash'), root_module)
+    register_functions_ns3_TracedValueCallback(module.add_cpp_namespace('TracedValueCallback'), root_module)
+    return
+
+def register_functions_ns3_FatalImpl(module, root_module):
+    return
+
+def register_functions_ns3_Hash(module, root_module):
+    register_functions_ns3_Hash_Function(module.add_cpp_namespace('Function'), root_module)
+    return
+
+def register_functions_ns3_Hash_Function(module, root_module):
+    return
+
+def register_functions_ns3_TracedValueCallback(module, root_module):
+    return
+
+def main():
+    out = FileCodeSink(sys.stdout)
+    root_module = module_init()
+    register_types(root_module)
+    register_methods(root_module)
+    register_functions(root_module)
+    root_module.generate(out)
+
+if __name__ == '__main__':
+    main()
+
diff --git a/src/efm-monitor/bindings/modulegen__gcc_LP64.py b/src/efm-monitor/bindings/modulegen__gcc_LP64.py
new file mode 100644
index 000000000..64a9c4c83
--- /dev/null
+++ b/src/efm-monitor/bindings/modulegen__gcc_LP64.py
@@ -0,0 +1,7928 @@
+from pybindgen import Module, FileCodeSink, param, retval, cppclass, typehandlers
+
+
+import pybindgen.settings
+import warnings
+
+class ErrorHandler(pybindgen.settings.ErrorHandler):
+    def handle_error(self, wrapper, exception, traceback_):
+        warnings.warn("exception %r in wrapper %s" % (exception, wrapper))
+        return True
+pybindgen.settings.error_handler = ErrorHandler()
+
+
+import sys
+
+def module_init():
+    root_module = Module('ns.flow_monitor', cpp_namespace='::ns3')
+    return root_module
+
+def register_types(module):
+    root_module = module.get_root()
+    
+    ## log.h (module 'core'): ns3::LogLevel [enumeration]
+    module.add_enum('LogLevel', ['LOG_NONE', 'LOG_ERROR', 'LOG_LEVEL_ERROR', 'LOG_WARN', 'LOG_LEVEL_WARN', 'LOG_DEBUG', 'LOG_LEVEL_DEBUG', 'LOG_INFO', 'LOG_LEVEL_INFO', 'LOG_FUNCTION', 'LOG_LEVEL_FUNCTION', 'LOG_LOGIC', 'LOG_LEVEL_LOGIC', 'LOG_ALL', 'LOG_LEVEL_ALL', 'LOG_PREFIX_FUNC', 'LOG_PREFIX_TIME', 'LOG_PREFIX_NODE', 'LOG_PREFIX_LEVEL', 'LOG_PREFIX_ALL'], import_from_module='ns.core')
+    ## address.h (module 'network'): ns3::Address [class]
+    module.add_class('Address', import_from_module='ns.network')
+    ## address.h (module 'network'): ns3::Address::MaxSize_e [enumeration]
+    module.add_enum('MaxSize_e', ['MAX_SIZE'], outer_class=root_module['ns3::Address'], import_from_module='ns.network')
+    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList [class]
+    module.add_class('AttributeConstructionList', import_from_module='ns.core')
+    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item [struct]
+    module.add_class('Item', import_from_module='ns.core', outer_class=root_module['ns3::AttributeConstructionList'])
+    typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator', 'ns3::AttributeConstructionList::CIterator')
+    typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator*', 'ns3::AttributeConstructionList::CIterator*')
+    typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator&', 'ns3::AttributeConstructionList::CIterator&')
+    ## buffer.h (module 'network'): ns3::Buffer [class]
+    module.add_class('Buffer', import_from_module='ns.network')
+    ## buffer.h (module 'network'): ns3::Buffer::Iterator [class]
+    module.add_class('Iterator', import_from_module='ns.network', outer_class=root_module['ns3::Buffer'])
+    ## packet.h (module 'network'): ns3::ByteTagIterator [class]
+    module.add_class('ByteTagIterator', import_from_module='ns.network')
+    ## packet.h (module 'network'): ns3::ByteTagIterator::Item [class]
+    module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::ByteTagIterator'])
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList [class]
+    module.add_class('ByteTagList', import_from_module='ns.network')
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator [class]
+    module.add_class('Iterator', import_from_module='ns.network', outer_class=root_module['ns3::ByteTagList'])
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item [struct]
+    module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::ByteTagList::Iterator'])
+    ## callback.h (module 'core'): ns3::CallbackBase [class]
+    module.add_class('CallbackBase', import_from_module='ns.core')
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeAccessor> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeAccessor'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeChecker> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeChecker'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeValue> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeValue'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::CallbackImplBase> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::CallbackImplBase'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::EventImpl> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::EventImpl'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::FlowClassifier> [struct]
+    module.add_class('DefaultDeleter', template_parameters=['ns3::FlowClassifier'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Hash::Implementation> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::Hash::Implementation'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::NixVector> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::NixVector'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Packet> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::Packet'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::TraceSourceAccessor> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::TraceSourceAccessor'])
+    ## event-id.h (module 'core'): ns3::EventId [class]
+    module.add_class('EventId', import_from_module='ns.core')
+    ## event-id.h (module 'core'): ns3::EventId::UID [enumeration]
+    module.add_enum('UID', ['INVALID', 'NOW', 'DESTROY', 'RESERVED', 'VALID'], outer_class=root_module['ns3::EventId'], import_from_module='ns.core')
+    ## flow-monitor-helper.h (module 'flow-monitor'): ns3::FlowMonitorHelper [class]
+    module.add_class('FlowMonitorHelper')
+    ## hash.h (module 'core'): ns3::Hasher [class]
+    module.add_class('Hasher', import_from_module='ns.core')
+    ## histogram.h (module 'stats'): ns3::Histogram [class]
+    module.add_class('Histogram', import_from_module='ns.stats')
+    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress [class]
+    module.add_class('Inet6SocketAddress', import_from_module='ns.network')
+    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress [class]
+    root_module['ns3::Inet6SocketAddress'].implicitly_converts_to(root_module['ns3::Address'])
+    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress [class]
+    module.add_class('InetSocketAddress', import_from_module='ns.network')
+    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress [class]
+    root_module['ns3::InetSocketAddress'].implicitly_converts_to(root_module['ns3::Address'])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Address [class]
+    module.add_class('Ipv4Address', import_from_module='ns.network')
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Address [class]
+    root_module['ns3::Ipv4Address'].implicitly_converts_to(root_module['ns3::Address'])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressHash [class]
+    module.add_class('Ipv4AddressHash', import_from_module='ns.network')
+    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4InterfaceAddress [class]
+    module.add_class('Ipv4InterfaceAddress', import_from_module='ns.internet')
+    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e [enumeration]
+    module.add_enum('InterfaceAddressScope_e', ['HOST', 'LINK', 'GLOBAL'], outer_class=root_module['ns3::Ipv4InterfaceAddress'], import_from_module='ns.internet')
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask [class]
+    module.add_class('Ipv4Mask', import_from_module='ns.network')
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Address [class]
+    module.add_class('Ipv6Address', import_from_module='ns.network')
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Address [class]
+    root_module['ns3::Ipv6Address'].implicitly_converts_to(root_module['ns3::Address'])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressHash [class]
+    module.add_class('Ipv6AddressHash', import_from_module='ns.network')
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress [class]
+    module.add_class('Ipv6InterfaceAddress', import_from_module='ns.internet')
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress::State_e [enumeration]
+    module.add_enum('State_e', ['TENTATIVE', 'DEPRECATED', 'PREFERRED', 'PERMANENT', 'HOMEADDRESS', 'TENTATIVE_OPTIMISTIC', 'INVALID'], outer_class=root_module['ns3::Ipv6InterfaceAddress'], import_from_module='ns.internet')
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress::Scope_e [enumeration]
+    module.add_enum('Scope_e', ['HOST', 'LINKLOCAL', 'GLOBAL'], outer_class=root_module['ns3::Ipv6InterfaceAddress'], import_from_module='ns.internet')
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix [class]
+    module.add_class('Ipv6Prefix', import_from_module='ns.network')
+    ## log.h (module 'core'): ns3::LogComponent [class]
+    module.add_class('LogComponent', import_from_module='ns.core')
+    typehandlers.add_type_alias('std::map< std::string, ns3::LogComponent * >', 'ns3::LogComponent::ComponentList')
+    typehandlers.add_type_alias('std::map< std::string, ns3::LogComponent * >*', 'ns3::LogComponent::ComponentList*')
+    typehandlers.add_type_alias('std::map< std::string, ns3::LogComponent * >&', 'ns3::LogComponent::ComponentList&')
+    ## mac48-address.h (module 'network'): ns3::Mac48Address [class]
+    module.add_class('Mac48Address', import_from_module='ns.network')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )', 'ns3::Mac48Address::TracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )*', 'ns3::Mac48Address::TracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )&', 'ns3::Mac48Address::TracedCallback&')
+    ## mac48-address.h (module 'network'): ns3::Mac48Address [class]
+    root_module['ns3::Mac48Address'].implicitly_converts_to(root_module['ns3::Address'])
+    ## mac8-address.h (module 'network'): ns3::Mac8Address [class]
+    module.add_class('Mac8Address', import_from_module='ns.network')
+    ## mac8-address.h (module 'network'): ns3::Mac8Address [class]
+    root_module['ns3::Mac8Address'].implicitly_converts_to(root_module['ns3::Address'])
+    ## node-container.h (module 'network'): ns3::NodeContainer [class]
+    module.add_class('NodeContainer', import_from_module='ns.network')
+    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator', 'ns3::NodeContainer::Iterator')
+    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator*', 'ns3::NodeContainer::Iterator*')
+    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator&', 'ns3::NodeContainer::Iterator&')
+    ## object-base.h (module 'core'): ns3::ObjectBase [class]
+    module.add_class('ObjectBase', allow_subclassing=True, import_from_module='ns.core')
+    ## object.h (module 'core'): ns3::ObjectDeleter [struct]
+    module.add_class('ObjectDeleter', import_from_module='ns.core')
+    ## object-factory.h (module 'core'): ns3::ObjectFactory [class]
+    module.add_class('ObjectFactory', import_from_module='ns.core')
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata [class]
+    module.add_class('PacketMetadata', import_from_module='ns.network')
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item [struct]
+    module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::PacketMetadata'])
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::ItemType [enumeration]
+    module.add_enum('ItemType', ['PAYLOAD', 'HEADER', 'TRAILER'], outer_class=root_module['ns3::PacketMetadata::Item'], import_from_module='ns.network')
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator [class]
+    module.add_class('ItemIterator', import_from_module='ns.network', outer_class=root_module['ns3::PacketMetadata'])
+    ## packet.h (module 'network'): ns3::PacketTagIterator [class]
+    module.add_class('PacketTagIterator', import_from_module='ns.network')
+    ## packet.h (module 'network'): ns3::PacketTagIterator::Item [class]
+    module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::PacketTagIterator'])
+    ## packet-tag-list.h (module 'network'): ns3::PacketTagList [class]
+    module.add_class('PacketTagList', import_from_module='ns.network')
+    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData [struct]
+    module.add_class('TagData', import_from_module='ns.network', outer_class=root_module['ns3::PacketTagList'])
+    ## log.h (module 'core'): ns3::ParameterLogger [class]
+    module.add_class('ParameterLogger', import_from_module='ns.core')
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::ObjectBase'], template_parameters=['ns3::Object', 'ns3::ObjectBase', 'ns3::ObjectDeleter'])
+    ## simulator.h (module 'core'): ns3::Simulator [class]
+    module.add_class('Simulator', destructor_visibility='private', import_from_module='ns.core')
+    ## simulator.h (module 'core'): ns3::Simulator [enumeration]
+    module.add_enum('', ['NO_CONTEXT'], outer_class=root_module['ns3::Simulator'], import_from_module='ns.core')
+    ## tag.h (module 'network'): ns3::Tag [class]
+    module.add_class('Tag', import_from_module='ns.network', parent=root_module['ns3::ObjectBase'])
+    ## tag-buffer.h (module 'network'): ns3::TagBuffer [class]
+    module.add_class('TagBuffer', import_from_module='ns.network')
+    ## nstime.h (module 'core'): ns3::Time [class]
+    module.add_class('Time', import_from_module='ns.core')
+    ## nstime.h (module 'core'): ns3::Time::Unit [enumeration]
+    module.add_enum('Unit', ['Y', 'D', 'H', 'MIN', 'S', 'MS', 'US', 'NS', 'PS', 'FS', 'LAST', 'AUTO'], outer_class=root_module['ns3::Time'], import_from_module='ns.core')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Time )', 'ns3::Time::TracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Time )*', 'ns3::Time::TracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Time )&', 'ns3::Time::TracedCallback&')
+    ## nstime.h (module 'core'): ns3::TimeWithUnit [class]
+    module.add_class('TimeWithUnit', import_from_module='ns.core')
+    ## type-id.h (module 'core'): ns3::TypeId [class]
+    module.add_class('TypeId', import_from_module='ns.core')
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeFlag [enumeration]
+    module.add_enum('AttributeFlag', ['ATTR_GET', 'ATTR_SET', 'ATTR_CONSTRUCT', 'ATTR_SGC'], outer_class=root_module['ns3::TypeId'], import_from_module='ns.core')
+    ## type-id.h (module 'core'): ns3::TypeId::SupportLevel [enumeration]
+    module.add_enum('SupportLevel', ['SUPPORTED', 'DEPRECATED', 'OBSOLETE'], outer_class=root_module['ns3::TypeId'], import_from_module='ns.core')
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation [struct]
+    module.add_class('AttributeInformation', import_from_module='ns.core', outer_class=root_module['ns3::TypeId'])
+    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation [struct]
+    module.add_class('TraceSourceInformation', import_from_module='ns.core', outer_class=root_module['ns3::TypeId'])
+    typehandlers.add_type_alias('uint32_t', 'ns3::TypeId::hash_t')
+    typehandlers.add_type_alias('uint32_t*', 'ns3::TypeId::hash_t*')
+    typehandlers.add_type_alias('uint32_t&', 'ns3::TypeId::hash_t&')
+    ## empty.h (module 'core'): ns3::empty [class]
+    module.add_class('empty', import_from_module='ns.core')
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t [class]
+    module.add_class('int64x64_t', import_from_module='ns.core')
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::impl_type [enumeration]
+    module.add_enum('impl_type', ['int128_impl', 'cairo_impl', 'ld_impl'], outer_class=root_module['ns3::int64x64_t'], import_from_module='ns.core')
+    ## chunk.h (module 'network'): ns3::Chunk [class]
+    module.add_class('Chunk', import_from_module='ns.network', parent=root_module['ns3::ObjectBase'])
+    ## header.h (module 'network'): ns3::Header [class]
+    module.add_class('Header', import_from_module='ns.network', parent=root_module['ns3::Chunk'])
+    ## ipv4-header.h (module 'internet'): ns3::Ipv4Header [class]
+    module.add_class('Ipv4Header', import_from_module='ns.internet', parent=root_module['ns3::Header'])
+    ## ipv4-header.h (module 'internet'): ns3::Ipv4Header::DscpType [enumeration]
+    module.add_enum('DscpType', ['DscpDefault', 'DSCP_CS1', 'DSCP_AF11', 'DSCP_AF12', 'DSCP_AF13', 'DSCP_CS2', 'DSCP_AF21', 'DSCP_AF22', 'DSCP_AF23', 'DSCP_CS3', 'DSCP_AF31', 'DSCP_AF32', 'DSCP_AF33', 'DSCP_CS4', 'DSCP_AF41', 'DSCP_AF42', 'DSCP_AF43', 'DSCP_CS5', 'DSCP_EF', 'DSCP_CS6', 'DSCP_CS7'], outer_class=root_module['ns3::Ipv4Header'], import_from_module='ns.internet')
+    ## ipv4-header.h (module 'internet'): ns3::Ipv4Header::EcnType [enumeration]
+    module.add_enum('EcnType', ['ECN_NotECT', 'ECN_ECT1', 'ECN_ECT0', 'ECN_CE'], outer_class=root_module['ns3::Ipv4Header'], import_from_module='ns.internet')
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Header [class]
+    module.add_class('Ipv6Header', import_from_module='ns.internet', parent=root_module['ns3::Header'])
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Header::DscpType [enumeration]
+    module.add_enum('DscpType', ['DscpDefault', 'DSCP_CS1', 'DSCP_AF11', 'DSCP_AF12', 'DSCP_AF13', 'DSCP_CS2', 'DSCP_AF21', 'DSCP_AF22', 'DSCP_AF23', 'DSCP_CS3', 'DSCP_AF31', 'DSCP_AF32', 'DSCP_AF33', 'DSCP_CS4', 'DSCP_AF41', 'DSCP_AF42', 'DSCP_AF43', 'DSCP_CS5', 'DSCP_EF', 'DSCP_CS6', 'DSCP_CS7'], outer_class=root_module['ns3::Ipv6Header'], import_from_module='ns.internet')
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Header::NextHeader_e [enumeration]
+    module.add_enum('NextHeader_e', ['IPV6_EXT_HOP_BY_HOP', 'IPV6_IPV4', 'IPV6_TCP', 'IPV6_UDP', 'IPV6_IPV6', 'IPV6_EXT_ROUTING', 'IPV6_EXT_FRAGMENTATION', 'IPV6_EXT_CONFIDENTIALITY', 'IPV6_EXT_AUTHENTIFICATION', 'IPV6_ICMPV6', 'IPV6_EXT_END', 'IPV6_EXT_DESTINATION', 'IPV6_SCTP', 'IPV6_EXT_MOBILITY', 'IPV6_UDP_LITE'], outer_class=root_module['ns3::Ipv6Header'], import_from_module='ns.internet')
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Header::EcnType [enumeration]
+    module.add_enum('EcnType', ['ECN_NotECT', 'ECN_ECT1', 'ECN_ECT0', 'ECN_CE'], outer_class=root_module['ns3::Ipv6Header'], import_from_module='ns.internet')
+    ## object.h (module 'core'): ns3::Object [class]
+    module.add_class('Object', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter >'])
+    ## object.h (module 'core'): ns3::Object::AggregateIterator [class]
+    module.add_class('AggregateIterator', import_from_module='ns.core', outer_class=root_module['ns3::Object'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor>> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::AttributeAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeAccessor>'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker>> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::AttributeChecker', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeChecker>'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue>> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::AttributeValue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeValue>'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase>> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::CallbackImplBase', 'ns3::empty', 'ns3::DefaultDeleter<ns3::CallbackImplBase>'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl>> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::EventImpl', 'ns3::empty', 'ns3::DefaultDeleter<ns3::EventImpl>'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::FlowClassifier, ns3::empty, ns3::DefaultDeleter<ns3::FlowClassifier>> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::FlowClassifier', 'ns3::empty', 'ns3::DefaultDeleter<ns3::FlowClassifier>'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation>> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::Hash::Implementation', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Hash::Implementation>'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute>> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::Ipv4MulticastRoute', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv4MulticastRoute>'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route>> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::Ipv4Route', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv4Route>'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector>> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::NixVector', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NixVector>'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper>> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::OutputStreamWrapper', 'ns3::empty', 'ns3::DefaultDeleter<ns3::OutputStreamWrapper>'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet>> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::Packet', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Packet>'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem>> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::QueueItem', 'ns3::empty', 'ns3::DefaultDeleter<ns3::QueueItem>'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor>> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), parent=root_module['ns3::empty'], template_parameters=['ns3::TraceSourceAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::TraceSourceAccessor>'])
+    ## socket.h (module 'network'): ns3::Socket [class]
+    module.add_class('Socket', import_from_module='ns.network', parent=root_module['ns3::Object'])
+    ## socket.h (module 'network'): ns3::Socket::SocketErrno [enumeration]
+    module.add_enum('SocketErrno', ['ERROR_NOTERROR', 'ERROR_ISCONN', 'ERROR_NOTCONN', 'ERROR_MSGSIZE', 'ERROR_AGAIN', 'ERROR_SHUTDOWN', 'ERROR_OPNOTSUPP', 'ERROR_AFNOSUPPORT', 'ERROR_INVAL', 'ERROR_BADF', 'ERROR_NOROUTETOHOST', 'ERROR_NODEV', 'ERROR_ADDRNOTAVAIL', 'ERROR_ADDRINUSE', 'SOCKET_ERRNO_LAST'], outer_class=root_module['ns3::Socket'], import_from_module='ns.network')
+    ## socket.h (module 'network'): ns3::Socket::SocketType [enumeration]
+    module.add_enum('SocketType', ['NS3_SOCK_STREAM', 'NS3_SOCK_SEQPACKET', 'NS3_SOCK_DGRAM', 'NS3_SOCK_RAW'], outer_class=root_module['ns3::Socket'], import_from_module='ns.network')
+    ## socket.h (module 'network'): ns3::Socket::SocketPriority [enumeration]
+    module.add_enum('SocketPriority', ['NS3_PRIO_BESTEFFORT', 'NS3_PRIO_FILLER', 'NS3_PRIO_BULK', 'NS3_PRIO_INTERACTIVE_BULK', 'NS3_PRIO_INTERACTIVE', 'NS3_PRIO_CONTROL'], outer_class=root_module['ns3::Socket'], import_from_module='ns.network')
+    ## socket.h (module 'network'): ns3::Socket::Ipv6MulticastFilterMode [enumeration]
+    module.add_enum('Ipv6MulticastFilterMode', ['INCLUDE', 'EXCLUDE'], outer_class=root_module['ns3::Socket'], import_from_module='ns.network')
+    ## socket.h (module 'network'): ns3::SocketIpTosTag [class]
+    module.add_class('SocketIpTosTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
+    ## socket.h (module 'network'): ns3::SocketIpTtlTag [class]
+    module.add_class('SocketIpTtlTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
+    ## socket.h (module 'network'): ns3::SocketIpv6HopLimitTag [class]
+    module.add_class('SocketIpv6HopLimitTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
+    ## socket.h (module 'network'): ns3::SocketIpv6TclassTag [class]
+    module.add_class('SocketIpv6TclassTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
+    ## socket.h (module 'network'): ns3::SocketPriorityTag [class]
+    module.add_class('SocketPriorityTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
+    ## socket.h (module 'network'): ns3::SocketSetDontFragmentTag [class]
+    module.add_class('SocketSetDontFragmentTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
+    ## trace-source-accessor.h (module 'core'): ns3::TraceSourceAccessor [class]
+    module.add_class('TraceSourceAccessor', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >'])
+    ## trailer.h (module 'network'): ns3::Trailer [class]
+    module.add_class('Trailer', import_from_module='ns.network', parent=root_module['ns3::Chunk'])
+    ## attribute.h (module 'core'): ns3::AttributeAccessor [class]
+    module.add_class('AttributeAccessor', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >'])
+    ## attribute.h (module 'core'): ns3::AttributeChecker [class]
+    module.add_class('AttributeChecker', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >'])
+    ## attribute.h (module 'core'): ns3::AttributeValue [class]
+    module.add_class('AttributeValue', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >'])
+    ## callback.h (module 'core'): ns3::CallbackChecker [class]
+    module.add_class('CallbackChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
+    ## callback.h (module 'core'): ns3::CallbackImplBase [class]
+    module.add_class('CallbackImplBase', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >'])
+    ## callback.h (module 'core'): ns3::CallbackValue [class]
+    module.add_class('CallbackValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## attribute.h (module 'core'): ns3::EmptyAttributeAccessor [class]
+    module.add_class('EmptyAttributeAccessor', import_from_module='ns.core', parent=root_module['ns3::AttributeAccessor'])
+    ## attribute.h (module 'core'): ns3::EmptyAttributeChecker [class]
+    module.add_class('EmptyAttributeChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
+    ## attribute.h (module 'core'): ns3::EmptyAttributeValue [class]
+    module.add_class('EmptyAttributeValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## event-impl.h (module 'core'): ns3::EventImpl [class]
+    module.add_class('EventImpl', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >'])
+    ## flow-classifier.h (module 'flow-monitor'): ns3::FlowClassifier [class]
+    module.add_class('FlowClassifier', parent=root_module['ns3::SimpleRefCount< ns3::FlowClassifier, ns3::empty, ns3::DefaultDeleter<ns3::FlowClassifier> >'])
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor [class]
+    module.add_class('FlowMonitor', parent=root_module['ns3::Object'])
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats [struct]
+    module.add_class('FlowStats', outer_class=root_module['ns3::FlowMonitor'])
+    typehandlers.add_type_alias('std::map< unsigned int, ns3::FlowMonitor::FlowStats >', 'ns3::FlowMonitor::FlowStatsContainer')
+    typehandlers.add_type_alias('std::map< unsigned int, ns3::FlowMonitor::FlowStats >*', 'ns3::FlowMonitor::FlowStatsContainer*')
+    typehandlers.add_type_alias('std::map< unsigned int, ns3::FlowMonitor::FlowStats >&', 'ns3::FlowMonitor::FlowStatsContainer&')
+    typehandlers.add_type_alias('std::map< unsigned int, ns3::FlowMonitor::FlowStats > iterator', 'ns3::FlowMonitor::FlowStatsContainerI')
+    typehandlers.add_type_alias('std::map< unsigned int, ns3::FlowMonitor::FlowStats > iterator*', 'ns3::FlowMonitor::FlowStatsContainerI*')
+    typehandlers.add_type_alias('std::map< unsigned int, ns3::FlowMonitor::FlowStats > iterator&', 'ns3::FlowMonitor::FlowStatsContainerI&')
+    typehandlers.add_type_alias('std::map< unsigned int, ns3::FlowMonitor::FlowStats > const_iterator', 'ns3::FlowMonitor::FlowStatsContainerCI')
+    typehandlers.add_type_alias('std::map< unsigned int, ns3::FlowMonitor::FlowStats > const_iterator*', 'ns3::FlowMonitor::FlowStatsContainerCI*')
+    typehandlers.add_type_alias('std::map< unsigned int, ns3::FlowMonitor::FlowStats > const_iterator&', 'ns3::FlowMonitor::FlowStatsContainerCI&')
+    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::FlowProbe > >', 'ns3::FlowMonitor::FlowProbeContainer')
+    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::FlowProbe > >*', 'ns3::FlowMonitor::FlowProbeContainer*')
+    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::FlowProbe > >&', 'ns3::FlowMonitor::FlowProbeContainer&')
+    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::FlowProbe > > iterator', 'ns3::FlowMonitor::FlowProbeContainerI')
+    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::FlowProbe > > iterator*', 'ns3::FlowMonitor::FlowProbeContainerI*')
+    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::FlowProbe > > iterator&', 'ns3::FlowMonitor::FlowProbeContainerI&')
+    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::FlowProbe > > const_iterator', 'ns3::FlowMonitor::FlowProbeContainerCI')
+    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::FlowProbe > > const_iterator*', 'ns3::FlowMonitor::FlowProbeContainerCI*')
+    typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::FlowProbe > > const_iterator&', 'ns3::FlowMonitor::FlowProbeContainerCI&')
+    ## flow-probe.h (module 'flow-monitor'): ns3::FlowProbe [class]
+    module.add_class('FlowProbe', parent=root_module['ns3::Object'])
+    ## flow-probe.h (module 'flow-monitor'): ns3::FlowProbe::FlowStats [struct]
+    module.add_class('FlowStats', outer_class=root_module['ns3::FlowProbe'])
+    typehandlers.add_type_alias('std::map< unsigned int, ns3::FlowProbe::FlowStats >', 'ns3::FlowProbe::Stats')
+    typehandlers.add_type_alias('std::map< unsigned int, ns3::FlowProbe::FlowStats >*', 'ns3::FlowProbe::Stats*')
+    typehandlers.add_type_alias('std::map< unsigned int, ns3::FlowProbe::FlowStats >&', 'ns3::FlowProbe::Stats&')
+    ## ipv4.h (module 'internet'): ns3::Ipv4 [class]
+    module.add_class('Ipv4', import_from_module='ns.internet', parent=root_module['ns3::Object'])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressChecker [class]
+    module.add_class('Ipv4AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue [class]
+    module.add_class('Ipv4AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): ns3::Ipv4FlowClassifier [class]
+    module.add_class('Ipv4FlowClassifier', parent=root_module['ns3::FlowClassifier'])
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): ns3::Ipv4FlowClassifier::FiveTuple [struct]
+    module.add_class('FiveTuple', outer_class=root_module['ns3::Ipv4FlowClassifier'])
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): ns3::Ipv4FlowClassifier::SortByCount [class]
+    module.add_class('SortByCount', outer_class=root_module['ns3::Ipv4FlowClassifier'])
+    ## ipv4-flow-probe.h (module 'flow-monitor'): ns3::Ipv4FlowProbe [class]
+    module.add_class('Ipv4FlowProbe', parent=root_module['ns3::FlowProbe'])
+    ## ipv4-flow-probe.h (module 'flow-monitor'): ns3::Ipv4FlowProbe::DropReason [enumeration]
+    module.add_enum('DropReason', ['DROP_NO_ROUTE', 'DROP_TTL_EXPIRE', 'DROP_BAD_CHECKSUM', 'DROP_QUEUE', 'DROP_QUEUE_DISC', 'DROP_INTERFACE_DOWN', 'DROP_ROUTE_ERROR', 'DROP_FRAGMENT_TIMEOUT', 'DROP_INVALID_REASON'], outer_class=root_module['ns3::Ipv4FlowProbe'])
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ipv4L3Protocol [class]
+    module.add_class('Ipv4L3Protocol', import_from_module='ns.internet', parent=root_module['ns3::Ipv4'])
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ipv4L3Protocol::DropReason [enumeration]
+    module.add_enum('DropReason', ['DROP_TTL_EXPIRED', 'DROP_NO_ROUTE', 'DROP_BAD_CHECKSUM', 'DROP_INTERFACE_DOWN', 'DROP_ROUTE_ERROR', 'DROP_FRAGMENT_TIMEOUT', 'DROP_DUPLICATE'], outer_class=root_module['ns3::Ipv4L3Protocol'], import_from_module='ns.internet')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )', 'ns3::Ipv4L3Protocol::SentTracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )*', 'ns3::Ipv4L3Protocol::SentTracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )&', 'ns3::Ipv4L3Protocol::SentTracedCallback&')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )', 'ns3::Ipv4L3Protocol::TxRxTracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )*', 'ns3::Ipv4L3Protocol::TxRxTracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )&', 'ns3::Ipv4L3Protocol::TxRxTracedCallback&')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )', 'ns3::Ipv4L3Protocol::DropTracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )*', 'ns3::Ipv4L3Protocol::DropTracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )&', 'ns3::Ipv4L3Protocol::DropTracedCallback&')
+    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskChecker [class]
+    module.add_class('Ipv4MaskChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue [class]
+    module.add_class('Ipv4MaskValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4MulticastRoute [class]
+    module.add_class('Ipv4MulticastRoute', import_from_module='ns.internet', parent=root_module['ns3::SimpleRefCount< ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> >'])
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4Route [class]
+    module.add_class('Ipv4Route', import_from_module='ns.internet', parent=root_module['ns3::SimpleRefCount< ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> >'])
+    ## ipv4-routing-protocol.h (module 'internet'): ns3::Ipv4RoutingProtocol [class]
+    module.add_class('Ipv4RoutingProtocol', import_from_module='ns.internet', parent=root_module['ns3::Object'])
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv4RoutingProtocol::UnicastForwardCallback')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv4RoutingProtocol::UnicastForwardCallback*')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv4RoutingProtocol::UnicastForwardCallback&')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv4RoutingProtocol::MulticastForwardCallback')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv4RoutingProtocol::MulticastForwardCallback*')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv4RoutingProtocol::MulticastForwardCallback&')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv4RoutingProtocol::LocalDeliverCallback')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv4RoutingProtocol::LocalDeliverCallback*')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv4RoutingProtocol::LocalDeliverCallback&')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv4RoutingProtocol::ErrorCallback')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv4RoutingProtocol::ErrorCallback*')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv4RoutingProtocol::ErrorCallback&')
+    ## ipv6.h (module 'internet'): ns3::Ipv6 [class]
+    module.add_class('Ipv6', import_from_module='ns.internet', parent=root_module['ns3::Object'])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressChecker [class]
+    module.add_class('Ipv6AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue [class]
+    module.add_class('Ipv6AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): ns3::Ipv6FlowClassifier [class]
+    module.add_class('Ipv6FlowClassifier', parent=root_module['ns3::FlowClassifier'])
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): ns3::Ipv6FlowClassifier::FiveTuple [struct]
+    module.add_class('FiveTuple', outer_class=root_module['ns3::Ipv6FlowClassifier'])
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): ns3::Ipv6FlowClassifier::SortByCount [class]
+    module.add_class('SortByCount', outer_class=root_module['ns3::Ipv6FlowClassifier'])
+    ## ipv6-flow-probe.h (module 'flow-monitor'): ns3::Ipv6FlowProbe [class]
+    module.add_class('Ipv6FlowProbe', parent=root_module['ns3::FlowProbe'])
+    ## ipv6-flow-probe.h (module 'flow-monitor'): ns3::Ipv6FlowProbe::DropReason [enumeration]
+    module.add_enum('DropReason', ['DROP_NO_ROUTE', 'DROP_TTL_EXPIRE', 'DROP_BAD_CHECKSUM', 'DROP_QUEUE', 'DROP_QUEUE_DISC', 'DROP_INTERFACE_DOWN', 'DROP_ROUTE_ERROR', 'DROP_UNKNOWN_PROTOCOL', 'DROP_UNKNOWN_OPTION', 'DROP_MALFORMED_HEADER', 'DROP_FRAGMENT_TIMEOUT', 'DROP_INVALID_REASON'], outer_class=root_module['ns3::Ipv6FlowProbe'])
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ipv6L3Protocol [class]
+    module.add_class('Ipv6L3Protocol', import_from_module='ns.internet', parent=root_module['ns3::Ipv6'])
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ipv6L3Protocol::DropReason [enumeration]
+    module.add_enum('DropReason', ['DROP_TTL_EXPIRED', 'DROP_NO_ROUTE', 'DROP_INTERFACE_DOWN', 'DROP_ROUTE_ERROR', 'DROP_UNKNOWN_PROTOCOL', 'DROP_UNKNOWN_OPTION', 'DROP_MALFORMED_HEADER', 'DROP_FRAGMENT_TIMEOUT'], outer_class=root_module['ns3::Ipv6L3Protocol'], import_from_module='ns.internet')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )', 'ns3::Ipv6L3Protocol::SentTracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )*', 'ns3::Ipv6L3Protocol::SentTracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )&', 'ns3::Ipv6L3Protocol::SentTracedCallback&')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )', 'ns3::Ipv6L3Protocol::TxRxTracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )*', 'ns3::Ipv6L3Protocol::TxRxTracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )&', 'ns3::Ipv6L3Protocol::TxRxTracedCallback&')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )', 'ns3::Ipv6L3Protocol::DropTracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )*', 'ns3::Ipv6L3Protocol::DropTracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )&', 'ns3::Ipv6L3Protocol::DropTracedCallback&')
+    ## ipv6-pmtu-cache.h (module 'internet'): ns3::Ipv6PmtuCache [class]
+    module.add_class('Ipv6PmtuCache', import_from_module='ns.internet', parent=root_module['ns3::Object'])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixChecker [class]
+    module.add_class('Ipv6PrefixChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue [class]
+    module.add_class('Ipv6PrefixValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
+    ## mac48-address.h (module 'network'): ns3::Mac48AddressChecker [class]
+    module.add_class('Mac48AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
+    ## mac48-address.h (module 'network'): ns3::Mac48AddressValue [class]
+    module.add_class('Mac48AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
+    ## net-device.h (module 'network'): ns3::NetDevice [class]
+    module.add_class('NetDevice', import_from_module='ns.network', parent=root_module['ns3::Object'])
+    ## net-device.h (module 'network'): ns3::NetDevice::PacketType [enumeration]
+    module.add_enum('PacketType', ['PACKET_HOST', 'NS3_PACKET_HOST', 'PACKET_BROADCAST', 'NS3_PACKET_BROADCAST', 'PACKET_MULTICAST', 'NS3_PACKET_MULTICAST', 'PACKET_OTHERHOST', 'NS3_PACKET_OTHERHOST'], outer_class=root_module['ns3::NetDevice'], import_from_module='ns.network')
+    typehandlers.add_type_alias('void ( * ) (  )', 'ns3::NetDevice::LinkChangeTracedCallback')
+    typehandlers.add_type_alias('void ( * ) (  )*', 'ns3::NetDevice::LinkChangeTracedCallback*')
+    typehandlers.add_type_alias('void ( * ) (  )&', 'ns3::NetDevice::LinkChangeTracedCallback&')
+    typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::NetDevice::ReceiveCallback')
+    typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::NetDevice::ReceiveCallback*')
+    typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::NetDevice::ReceiveCallback&')
+    typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'ns3::NetDevice::PromiscReceiveCallback')
+    typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::NetDevice::PromiscReceiveCallback*')
+    typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::NetDevice::PromiscReceiveCallback&')
+    ## nix-vector.h (module 'network'): ns3::NixVector [class]
+    module.add_class('NixVector', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >'])
+    ## node.h (module 'network'): ns3::Node [class]
+    module.add_class('Node', import_from_module='ns.network', parent=root_module['ns3::Object'])
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Node::ProtocolHandler')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Node::ProtocolHandler*')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Node::ProtocolHandler&')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Node::DeviceAdditionListener')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Node::DeviceAdditionListener*')
+    typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Node::DeviceAdditionListener&')
+    ## object-factory.h (module 'core'): ns3::ObjectFactoryChecker [class]
+    module.add_class('ObjectFactoryChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
+    ## object-factory.h (module 'core'): ns3::ObjectFactoryValue [class]
+    module.add_class('ObjectFactoryValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## output-stream-wrapper.h (module 'network'): ns3::OutputStreamWrapper [class]
+    module.add_class('OutputStreamWrapper', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> >'])
+    ## packet.h (module 'network'): ns3::Packet [class]
+    module.add_class('Packet', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >'])
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )', 'ns3::Packet::TracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )*', 'ns3::Packet::TracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )&', 'ns3::Packet::TracedCallback&')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )', 'ns3::Packet::AddressTracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )*', 'ns3::Packet::AddressTracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )&', 'ns3::Packet::AddressTracedCallback&')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )', 'ns3::Packet::TwoAddressTracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )*', 'ns3::Packet::TwoAddressTracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )&', 'ns3::Packet::TwoAddressTracedCallback&')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )', 'ns3::Packet::Mac48AddressTracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )*', 'ns3::Packet::Mac48AddressTracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )&', 'ns3::Packet::Mac48AddressTracedCallback&')
+    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )', 'ns3::Packet::SizeTracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )*', 'ns3::Packet::SizeTracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )&', 'ns3::Packet::SizeTracedCallback&')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )', 'ns3::Packet::SinrTracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )*', 'ns3::Packet::SinrTracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )&', 'ns3::Packet::SinrTracedCallback&')
+    ## queue-item.h (module 'network'): ns3::QueueItem [class]
+    module.add_class('QueueItem', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> >'])
+    ## queue-item.h (module 'network'): ns3::QueueItem::Uint8Values [enumeration]
+    module.add_enum('Uint8Values', ['IP_DSFIELD'], outer_class=root_module['ns3::QueueItem'], import_from_module='ns.network')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::QueueItem const > )', 'ns3::QueueItem::TracedCallback')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::QueueItem const > )*', 'ns3::QueueItem::TracedCallback*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::QueueItem const > )&', 'ns3::QueueItem::TracedCallback&')
+    ## nstime.h (module 'core'): ns3::TimeValue [class]
+    module.add_class('TimeValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## type-id.h (module 'core'): ns3::TypeIdChecker [class]
+    module.add_class('TypeIdChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
+    ## type-id.h (module 'core'): ns3::TypeIdValue [class]
+    module.add_class('TypeIdValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## address.h (module 'network'): ns3::AddressChecker [class]
+    module.add_class('AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
+    ## address.h (module 'network'): ns3::AddressValue [class]
+    module.add_class('AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['bool', 'ns3::Ptr<ns3::Socket>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['ns3::ObjectBase *', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::Ipv4Header &', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ipv4L3Protocol::DropReason', 'ns3::Ptr<ns3::Ipv4>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::Ipv4Header &', 'ns3::Ptr<const ns3::Packet>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::Ipv6Header &', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ipv6L3Protocol::DropReason', 'ns3::Ptr<ns3::Ipv6>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::Ipv6Header &', 'ns3::Ptr<const ns3::Packet>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ptr<ns3::Ipv4>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ptr<ns3::Ipv6>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'const ns3::Address &', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
+    ## queue-item.h (module 'network'): ns3::QueueDiscItem [class]
+    module.add_class('QueueDiscItem', import_from_module='ns.network', parent=root_module['ns3::QueueItem'])
+    module.add_container('std::map< std::string, ns3::LogComponent * >', ('std::basic_string< char, std::char_traits< char >, std::allocator< char > >', 'ns3::LogComponent *'), container_type='map')
+    module.add_container('std::vector< ns3::Ipv6Address >', 'ns3::Ipv6Address', container_type='vector')
+    module.add_container('std::vector< unsigned int >', 'unsigned int', container_type='vector')
+    module.add_container('std::vector< unsigned long >', 'long unsigned int', container_type='vector')
+    module.add_container('std::map< unsigned int, ns3::FlowMonitor::FlowStats >', ('unsigned int', 'ns3::FlowMonitor::FlowStats'), container_type='map')
+    module.add_container('std::vector< ns3::Ptr< ns3::FlowProbe > >', 'ns3::Ptr< ns3::FlowProbe >', container_type='vector')
+    module.add_container('std::map< unsigned int, ns3::FlowProbe::FlowStats >', ('unsigned int', 'ns3::FlowProbe::FlowStats'), container_type='map')
+    module.add_container('ns3::FlowProbe::Stats', ('unsigned int', 'ns3::FlowProbe::FlowStats'), container_type='map')
+    module.add_container('std::vector< std::pair< ns3::Ipv4Header::DscpType, unsigned int > >', 'std::pair< ns3::Ipv4Header::DscpType, unsigned int >', container_type='vector')
+    module.add_container('std::map< unsigned int, unsigned int >', ('unsigned int', 'unsigned int'), container_type='map')
+    module.add_container('std::vector< std::pair< ns3::Ipv6Header::DscpType, unsigned int > >', 'std::pair< ns3::Ipv6Header::DscpType, unsigned int >', container_type='vector')
+    typehandlers.add_type_alias('uint32_t', 'ns3::FlowId')
+    typehandlers.add_type_alias('uint32_t*', 'ns3::FlowId*')
+    typehandlers.add_type_alias('uint32_t&', 'ns3::FlowId&')
+    typehandlers.add_type_alias('uint32_t', 'ns3::FlowPacketId')
+    typehandlers.add_type_alias('uint32_t*', 'ns3::FlowPacketId*')
+    typehandlers.add_type_alias('uint32_t&', 'ns3::FlowPacketId&')
+    typehandlers.add_type_alias('void ( * ) ( std::ostream & )', 'ns3::TimePrinter')
+    typehandlers.add_type_alias('void ( * ) ( std::ostream & )*', 'ns3::TimePrinter*')
+    typehandlers.add_type_alias('void ( * ) ( std::ostream & )&', 'ns3::TimePrinter&')
+    typehandlers.add_type_alias('void ( * ) ( std::ostream & )', 'ns3::NodePrinter')
+    typehandlers.add_type_alias('void ( * ) ( std::ostream & )*', 'ns3::NodePrinter*')
+    typehandlers.add_type_alias('void ( * ) ( std::ostream & )&', 'ns3::NodePrinter&')
+    
+    ## Register a nested module for the namespace FatalImpl
+    
+    nested_module = module.add_cpp_namespace('FatalImpl')
+    register_types_ns3_FatalImpl(nested_module)
+    
+    
+    ## Register a nested module for the namespace Hash
+    
+    nested_module = module.add_cpp_namespace('Hash')
+    register_types_ns3_Hash(nested_module)
+    
+    
+    ## Register a nested module for the namespace TracedValueCallback
+    
+    nested_module = module.add_cpp_namespace('TracedValueCallback')
+    register_types_ns3_TracedValueCallback(nested_module)
+    
+
+def register_types_ns3_FatalImpl(module):
+    root_module = module.get_root()
+    
+
+def register_types_ns3_Hash(module):
+    root_module = module.get_root()
+    
+    ## hash-function.h (module 'core'): ns3::Hash::Implementation [class]
+    module.add_class('Implementation', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >'])
+    typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )', 'ns3::Hash::Hash32Function_ptr')
+    typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )*', 'ns3::Hash::Hash32Function_ptr*')
+    typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )&', 'ns3::Hash::Hash32Function_ptr&')
+    typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )', 'ns3::Hash::Hash64Function_ptr')
+    typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )*', 'ns3::Hash::Hash64Function_ptr*')
+    typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )&', 'ns3::Hash::Hash64Function_ptr&')
+    
+    ## Register a nested module for the namespace Function
+    
+    nested_module = module.add_cpp_namespace('Function')
+    register_types_ns3_Hash_Function(nested_module)
+    
+
+def register_types_ns3_Hash_Function(module):
+    root_module = module.get_root()
+    
+    ## hash-fnv.h (module 'core'): ns3::Hash::Function::Fnv1a [class]
+    module.add_class('Fnv1a', import_from_module='ns.core', parent=root_module['ns3::Hash::Implementation'])
+    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash32 [class]
+    module.add_class('Hash32', import_from_module='ns.core', parent=root_module['ns3::Hash::Implementation'])
+    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash64 [class]
+    module.add_class('Hash64', import_from_module='ns.core', parent=root_module['ns3::Hash::Implementation'])
+    ## hash-murmur3.h (module 'core'): ns3::Hash::Function::Murmur3 [class]
+    module.add_class('Murmur3', import_from_module='ns.core', parent=root_module['ns3::Hash::Implementation'])
+
+def register_types_ns3_TracedValueCallback(module):
+    root_module = module.get_root()
+    
+    typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )', 'ns3::TracedValueCallback::Time')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )*', 'ns3::TracedValueCallback::Time*')
+    typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )&', 'ns3::TracedValueCallback::Time&')
+
+def register_methods(root_module):
+    register_Ns3Address_methods(root_module, root_module['ns3::Address'])
+    register_Ns3AttributeConstructionList_methods(root_module, root_module['ns3::AttributeConstructionList'])
+    register_Ns3AttributeConstructionListItem_methods(root_module, root_module['ns3::AttributeConstructionList::Item'])
+    register_Ns3Buffer_methods(root_module, root_module['ns3::Buffer'])
+    register_Ns3BufferIterator_methods(root_module, root_module['ns3::Buffer::Iterator'])
+    register_Ns3ByteTagIterator_methods(root_module, root_module['ns3::ByteTagIterator'])
+    register_Ns3ByteTagIteratorItem_methods(root_module, root_module['ns3::ByteTagIterator::Item'])
+    register_Ns3ByteTagList_methods(root_module, root_module['ns3::ByteTagList'])
+    register_Ns3ByteTagListIterator_methods(root_module, root_module['ns3::ByteTagList::Iterator'])
+    register_Ns3ByteTagListIteratorItem_methods(root_module, root_module['ns3::ByteTagList::Iterator::Item'])
+    register_Ns3CallbackBase_methods(root_module, root_module['ns3::CallbackBase'])
+    register_Ns3DefaultDeleter__Ns3AttributeAccessor_methods(root_module, root_module['ns3::DefaultDeleter< ns3::AttributeAccessor >'])
+    register_Ns3DefaultDeleter__Ns3AttributeChecker_methods(root_module, root_module['ns3::DefaultDeleter< ns3::AttributeChecker >'])
+    register_Ns3DefaultDeleter__Ns3AttributeValue_methods(root_module, root_module['ns3::DefaultDeleter< ns3::AttributeValue >'])
+    register_Ns3DefaultDeleter__Ns3CallbackImplBase_methods(root_module, root_module['ns3::DefaultDeleter< ns3::CallbackImplBase >'])
+    register_Ns3DefaultDeleter__Ns3EventImpl_methods(root_module, root_module['ns3::DefaultDeleter< ns3::EventImpl >'])
+    register_Ns3DefaultDeleter__Ns3FlowClassifier_methods(root_module, root_module['ns3::DefaultDeleter< ns3::FlowClassifier >'])
+    register_Ns3DefaultDeleter__Ns3HashImplementation_methods(root_module, root_module['ns3::DefaultDeleter< ns3::Hash::Implementation >'])
+    register_Ns3DefaultDeleter__Ns3NixVector_methods(root_module, root_module['ns3::DefaultDeleter< ns3::NixVector >'])
+    register_Ns3DefaultDeleter__Ns3Packet_methods(root_module, root_module['ns3::DefaultDeleter< ns3::Packet >'])
+    register_Ns3DefaultDeleter__Ns3TraceSourceAccessor_methods(root_module, root_module['ns3::DefaultDeleter< ns3::TraceSourceAccessor >'])
+    register_Ns3EventId_methods(root_module, root_module['ns3::EventId'])
+    register_Ns3FlowMonitorHelper_methods(root_module, root_module['ns3::FlowMonitorHelper'])
+    register_Ns3Hasher_methods(root_module, root_module['ns3::Hasher'])
+    register_Ns3Histogram_methods(root_module, root_module['ns3::Histogram'])
+    register_Ns3Inet6SocketAddress_methods(root_module, root_module['ns3::Inet6SocketAddress'])
+    register_Ns3InetSocketAddress_methods(root_module, root_module['ns3::InetSocketAddress'])
+    register_Ns3Ipv4Address_methods(root_module, root_module['ns3::Ipv4Address'])
+    register_Ns3Ipv4AddressHash_methods(root_module, root_module['ns3::Ipv4AddressHash'])
+    register_Ns3Ipv4InterfaceAddress_methods(root_module, root_module['ns3::Ipv4InterfaceAddress'])
+    register_Ns3Ipv4Mask_methods(root_module, root_module['ns3::Ipv4Mask'])
+    register_Ns3Ipv6Address_methods(root_module, root_module['ns3::Ipv6Address'])
+    register_Ns3Ipv6AddressHash_methods(root_module, root_module['ns3::Ipv6AddressHash'])
+    register_Ns3Ipv6InterfaceAddress_methods(root_module, root_module['ns3::Ipv6InterfaceAddress'])
+    register_Ns3Ipv6Prefix_methods(root_module, root_module['ns3::Ipv6Prefix'])
+    register_Ns3LogComponent_methods(root_module, root_module['ns3::LogComponent'])
+    register_Ns3Mac48Address_methods(root_module, root_module['ns3::Mac48Address'])
+    register_Ns3Mac8Address_methods(root_module, root_module['ns3::Mac8Address'])
+    register_Ns3NodeContainer_methods(root_module, root_module['ns3::NodeContainer'])
+    register_Ns3ObjectBase_methods(root_module, root_module['ns3::ObjectBase'])
+    register_Ns3ObjectDeleter_methods(root_module, root_module['ns3::ObjectDeleter'])
+    register_Ns3ObjectFactory_methods(root_module, root_module['ns3::ObjectFactory'])
+    register_Ns3PacketMetadata_methods(root_module, root_module['ns3::PacketMetadata'])
+    register_Ns3PacketMetadataItem_methods(root_module, root_module['ns3::PacketMetadata::Item'])
+    register_Ns3PacketMetadataItemIterator_methods(root_module, root_module['ns3::PacketMetadata::ItemIterator'])
+    register_Ns3PacketTagIterator_methods(root_module, root_module['ns3::PacketTagIterator'])
+    register_Ns3PacketTagIteratorItem_methods(root_module, root_module['ns3::PacketTagIterator::Item'])
+    register_Ns3PacketTagList_methods(root_module, root_module['ns3::PacketTagList'])
+    register_Ns3PacketTagListTagData_methods(root_module, root_module['ns3::PacketTagList::TagData'])
+    register_Ns3ParameterLogger_methods(root_module, root_module['ns3::ParameterLogger'])
+    register_Ns3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_methods(root_module, root_module['ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter >'])
+    register_Ns3Simulator_methods(root_module, root_module['ns3::Simulator'])
+    register_Ns3Tag_methods(root_module, root_module['ns3::Tag'])
+    register_Ns3TagBuffer_methods(root_module, root_module['ns3::TagBuffer'])
+    register_Ns3Time_methods(root_module, root_module['ns3::Time'])
+    register_Ns3TimeWithUnit_methods(root_module, root_module['ns3::TimeWithUnit'])
+    register_Ns3TypeId_methods(root_module, root_module['ns3::TypeId'])
+    register_Ns3TypeIdAttributeInformation_methods(root_module, root_module['ns3::TypeId::AttributeInformation'])
+    register_Ns3TypeIdTraceSourceInformation_methods(root_module, root_module['ns3::TypeId::TraceSourceInformation'])
+    register_Ns3Empty_methods(root_module, root_module['ns3::empty'])
+    register_Ns3Int64x64_t_methods(root_module, root_module['ns3::int64x64_t'])
+    register_Ns3Chunk_methods(root_module, root_module['ns3::Chunk'])
+    register_Ns3Header_methods(root_module, root_module['ns3::Header'])
+    register_Ns3Ipv4Header_methods(root_module, root_module['ns3::Ipv4Header'])
+    register_Ns3Ipv6Header_methods(root_module, root_module['ns3::Ipv6Header'])
+    register_Ns3Object_methods(root_module, root_module['ns3::Object'])
+    register_Ns3ObjectAggregateIterator_methods(root_module, root_module['ns3::Object::AggregateIterator'])
+    register_Ns3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >'])
+    register_Ns3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >'])
+    register_Ns3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >'])
+    register_Ns3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >'])
+    register_Ns3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >'])
+    register_Ns3SimpleRefCount__Ns3FlowClassifier_Ns3Empty_Ns3DefaultDeleter__lt__ns3FlowClassifier__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::FlowClassifier, ns3::empty, ns3::DefaultDeleter<ns3::FlowClassifier> >'])
+    register_Ns3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >'])
+    register_Ns3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> >'])
+    register_Ns3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> >'])
+    register_Ns3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >'])
+    register_Ns3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> >'])
+    register_Ns3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >'])
+    register_Ns3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> >'])
+    register_Ns3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >'])
+    register_Ns3Socket_methods(root_module, root_module['ns3::Socket'])
+    register_Ns3SocketIpTosTag_methods(root_module, root_module['ns3::SocketIpTosTag'])
+    register_Ns3SocketIpTtlTag_methods(root_module, root_module['ns3::SocketIpTtlTag'])
+    register_Ns3SocketIpv6HopLimitTag_methods(root_module, root_module['ns3::SocketIpv6HopLimitTag'])
+    register_Ns3SocketIpv6TclassTag_methods(root_module, root_module['ns3::SocketIpv6TclassTag'])
+    register_Ns3SocketPriorityTag_methods(root_module, root_module['ns3::SocketPriorityTag'])
+    register_Ns3SocketSetDontFragmentTag_methods(root_module, root_module['ns3::SocketSetDontFragmentTag'])
+    register_Ns3TraceSourceAccessor_methods(root_module, root_module['ns3::TraceSourceAccessor'])
+    register_Ns3Trailer_methods(root_module, root_module['ns3::Trailer'])
+    register_Ns3AttributeAccessor_methods(root_module, root_module['ns3::AttributeAccessor'])
+    register_Ns3AttributeChecker_methods(root_module, root_module['ns3::AttributeChecker'])
+    register_Ns3AttributeValue_methods(root_module, root_module['ns3::AttributeValue'])
+    register_Ns3CallbackChecker_methods(root_module, root_module['ns3::CallbackChecker'])
+    register_Ns3CallbackImplBase_methods(root_module, root_module['ns3::CallbackImplBase'])
+    register_Ns3CallbackValue_methods(root_module, root_module['ns3::CallbackValue'])
+    register_Ns3EmptyAttributeAccessor_methods(root_module, root_module['ns3::EmptyAttributeAccessor'])
+    register_Ns3EmptyAttributeChecker_methods(root_module, root_module['ns3::EmptyAttributeChecker'])
+    register_Ns3EmptyAttributeValue_methods(root_module, root_module['ns3::EmptyAttributeValue'])
+    register_Ns3EventImpl_methods(root_module, root_module['ns3::EventImpl'])
+    register_Ns3FlowClassifier_methods(root_module, root_module['ns3::FlowClassifier'])
+    register_Ns3FlowMonitor_methods(root_module, root_module['ns3::FlowMonitor'])
+    register_Ns3FlowMonitorFlowStats_methods(root_module, root_module['ns3::FlowMonitor::FlowStats'])
+    register_Ns3FlowProbe_methods(root_module, root_module['ns3::FlowProbe'])
+    register_Ns3FlowProbeFlowStats_methods(root_module, root_module['ns3::FlowProbe::FlowStats'])
+    register_Ns3Ipv4_methods(root_module, root_module['ns3::Ipv4'])
+    register_Ns3Ipv4AddressChecker_methods(root_module, root_module['ns3::Ipv4AddressChecker'])
+    register_Ns3Ipv4AddressValue_methods(root_module, root_module['ns3::Ipv4AddressValue'])
+    register_Ns3Ipv4FlowClassifier_methods(root_module, root_module['ns3::Ipv4FlowClassifier'])
+    register_Ns3Ipv4FlowClassifierFiveTuple_methods(root_module, root_module['ns3::Ipv4FlowClassifier::FiveTuple'])
+    register_Ns3Ipv4FlowClassifierSortByCount_methods(root_module, root_module['ns3::Ipv4FlowClassifier::SortByCount'])
+    register_Ns3Ipv4FlowProbe_methods(root_module, root_module['ns3::Ipv4FlowProbe'])
+    register_Ns3Ipv4L3Protocol_methods(root_module, root_module['ns3::Ipv4L3Protocol'])
+    register_Ns3Ipv4MaskChecker_methods(root_module, root_module['ns3::Ipv4MaskChecker'])
+    register_Ns3Ipv4MaskValue_methods(root_module, root_module['ns3::Ipv4MaskValue'])
+    register_Ns3Ipv4MulticastRoute_methods(root_module, root_module['ns3::Ipv4MulticastRoute'])
+    register_Ns3Ipv4Route_methods(root_module, root_module['ns3::Ipv4Route'])
+    register_Ns3Ipv4RoutingProtocol_methods(root_module, root_module['ns3::Ipv4RoutingProtocol'])
+    register_Ns3Ipv6_methods(root_module, root_module['ns3::Ipv6'])
+    register_Ns3Ipv6AddressChecker_methods(root_module, root_module['ns3::Ipv6AddressChecker'])
+    register_Ns3Ipv6AddressValue_methods(root_module, root_module['ns3::Ipv6AddressValue'])
+    register_Ns3Ipv6FlowClassifier_methods(root_module, root_module['ns3::Ipv6FlowClassifier'])
+    register_Ns3Ipv6FlowClassifierFiveTuple_methods(root_module, root_module['ns3::Ipv6FlowClassifier::FiveTuple'])
+    register_Ns3Ipv6FlowClassifierSortByCount_methods(root_module, root_module['ns3::Ipv6FlowClassifier::SortByCount'])
+    register_Ns3Ipv6FlowProbe_methods(root_module, root_module['ns3::Ipv6FlowProbe'])
+    register_Ns3Ipv6L3Protocol_methods(root_module, root_module['ns3::Ipv6L3Protocol'])
+    register_Ns3Ipv6PmtuCache_methods(root_module, root_module['ns3::Ipv6PmtuCache'])
+    register_Ns3Ipv6PrefixChecker_methods(root_module, root_module['ns3::Ipv6PrefixChecker'])
+    register_Ns3Ipv6PrefixValue_methods(root_module, root_module['ns3::Ipv6PrefixValue'])
+    register_Ns3Mac48AddressChecker_methods(root_module, root_module['ns3::Mac48AddressChecker'])
+    register_Ns3Mac48AddressValue_methods(root_module, root_module['ns3::Mac48AddressValue'])
+    register_Ns3NetDevice_methods(root_module, root_module['ns3::NetDevice'])
+    register_Ns3NixVector_methods(root_module, root_module['ns3::NixVector'])
+    register_Ns3Node_methods(root_module, root_module['ns3::Node'])
+    register_Ns3ObjectFactoryChecker_methods(root_module, root_module['ns3::ObjectFactoryChecker'])
+    register_Ns3ObjectFactoryValue_methods(root_module, root_module['ns3::ObjectFactoryValue'])
+    register_Ns3OutputStreamWrapper_methods(root_module, root_module['ns3::OutputStreamWrapper'])
+    register_Ns3Packet_methods(root_module, root_module['ns3::Packet'])
+    register_Ns3QueueItem_methods(root_module, root_module['ns3::QueueItem'])
+    register_Ns3TimeValue_methods(root_module, root_module['ns3::TimeValue'])
+    register_Ns3TypeIdChecker_methods(root_module, root_module['ns3::TypeIdChecker'])
+    register_Ns3TypeIdValue_methods(root_module, root_module['ns3::TypeIdValue'])
+    register_Ns3AddressChecker_methods(root_module, root_module['ns3::AddressChecker'])
+    register_Ns3AddressValue_methods(root_module, root_module['ns3::AddressValue'])
+    register_Ns3CallbackImpl__Bool_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
+    register_Ns3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
+    register_Ns3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ipv4L3ProtocolDropReason_Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
+    register_Ns3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
+    register_Ns3CallbackImpl__Void_Const_ns3Ipv6Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ipv6L3ProtocolDropReason_Ns3Ptr__lt__ns3Ipv6__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
+    register_Ns3CallbackImpl__Void_Const_ns3Ipv6Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
+    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
+    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ptr__lt__ns3Ipv6__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
+    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >'])
+    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
+    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
+    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
+    register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
+    register_Ns3QueueDiscItem_methods(root_module, root_module['ns3::QueueDiscItem'])
+    register_Ns3HashImplementation_methods(root_module, root_module['ns3::Hash::Implementation'])
+    register_Ns3HashFunctionFnv1a_methods(root_module, root_module['ns3::Hash::Function::Fnv1a'])
+    register_Ns3HashFunctionHash32_methods(root_module, root_module['ns3::Hash::Function::Hash32'])
+    register_Ns3HashFunctionHash64_methods(root_module, root_module['ns3::Hash::Function::Hash64'])
+    register_Ns3HashFunctionMurmur3_methods(root_module, root_module['ns3::Hash::Function::Murmur3'])
+    return
+
+def register_Ns3Address_methods(root_module, cls):
+    cls.add_binary_comparison_operator('==')
+    cls.add_binary_comparison_operator('!=')
+    cls.add_binary_comparison_operator('<')
+    cls.add_output_stream_operator()
+    ## address.h (module 'network'): ns3::Address::Address() [constructor]
+    cls.add_constructor([])
+    ## address.h (module 'network'): ns3::Address::Address(uint8_t type, uint8_t const * buffer, uint8_t len) [constructor]
+    cls.add_constructor([param('uint8_t', 'type'), param('uint8_t const *', 'buffer'), param('uint8_t', 'len')])
+    ## address.h (module 'network'): ns3::Address::Address(ns3::Address const & address) [constructor]
+    cls.add_constructor([param('ns3::Address const &', 'address')])
+    ## address.h (module 'network'): bool ns3::Address::CheckCompatible(uint8_t type, uint8_t len) const [member function]
+    cls.add_method('CheckCompatible', 
+                   'bool', 
+                   [param('uint8_t', 'type'), param('uint8_t', 'len')], 
+                   is_const=True)
+    ## address.h (module 'network'): uint32_t ns3::Address::CopyAllFrom(uint8_t const * buffer, uint8_t len) [member function]
+    cls.add_method('CopyAllFrom', 
+                   'uint32_t', 
+                   [param('uint8_t const *', 'buffer'), param('uint8_t', 'len')])
+    ## address.h (module 'network'): uint32_t ns3::Address::CopyAllTo(uint8_t * buffer, uint8_t len) const [member function]
+    cls.add_method('CopyAllTo', 
+                   'uint32_t', 
+                   [param('uint8_t *', 'buffer'), param('uint8_t', 'len')], 
+                   is_const=True)
+    ## address.h (module 'network'): uint32_t ns3::Address::CopyFrom(uint8_t const * buffer, uint8_t len) [member function]
+    cls.add_method('CopyFrom', 
+                   'uint32_t', 
+                   [param('uint8_t const *', 'buffer'), param('uint8_t', 'len')])
+    ## address.h (module 'network'): uint32_t ns3::Address::CopyTo(uint8_t * buffer) const [member function]
+    cls.add_method('CopyTo', 
+                   'uint32_t', 
+                   [param('uint8_t *', 'buffer')], 
+                   is_const=True)
+    ## address.h (module 'network'): void ns3::Address::Deserialize(ns3::TagBuffer buffer) [member function]
+    cls.add_method('Deserialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'buffer')])
+    ## address.h (module 'network'): uint8_t ns3::Address::GetLength() const [member function]
+    cls.add_method('GetLength', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## address.h (module 'network'): uint32_t ns3::Address::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## address.h (module 'network'): bool ns3::Address::IsInvalid() const [member function]
+    cls.add_method('IsInvalid', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## address.h (module 'network'): bool ns3::Address::IsMatchingType(uint8_t type) const [member function]
+    cls.add_method('IsMatchingType', 
+                   'bool', 
+                   [param('uint8_t', 'type')], 
+                   is_const=True)
+    ## address.h (module 'network'): static uint8_t ns3::Address::Register() [member function]
+    cls.add_method('Register', 
+                   'uint8_t', 
+                   [], 
+                   is_static=True)
+    ## address.h (module 'network'): void ns3::Address::Serialize(ns3::TagBuffer buffer) const [member function]
+    cls.add_method('Serialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'buffer')], 
+                   is_const=True)
+    return
+
+def register_Ns3AttributeConstructionList_methods(root_module, cls):
+    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::AttributeConstructionList(ns3::AttributeConstructionList const & arg0) [constructor]
+    cls.add_constructor([param('ns3::AttributeConstructionList const &', 'arg0')])
+    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::AttributeConstructionList() [constructor]
+    cls.add_constructor([])
+    ## attribute-construction-list.h (module 'core'): void ns3::AttributeConstructionList::Add(std::string name, ns3::Ptr<const ns3::AttributeChecker> checker, ns3::Ptr<ns3::AttributeValue> value) [member function]
+    cls.add_method('Add', 
+                   'void', 
+                   [param('std::string', 'name'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::Ptr< ns3::AttributeValue >', 'value')])
+    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::CIterator ns3::AttributeConstructionList::Begin() const [member function]
+    cls.add_method('Begin', 
+                   'ns3::AttributeConstructionList::CIterator', 
+                   [], 
+                   is_const=True)
+    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::CIterator ns3::AttributeConstructionList::End() const [member function]
+    cls.add_method('End', 
+                   'ns3::AttributeConstructionList::CIterator', 
+                   [], 
+                   is_const=True)
+    ## attribute-construction-list.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeConstructionList::Find(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
+    cls.add_method('Find', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_const=True)
+    return
+
+def register_Ns3AttributeConstructionListItem_methods(root_module, cls):
+    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::Item() [constructor]
+    cls.add_constructor([])
+    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::Item(ns3::AttributeConstructionList::Item const & arg0) [constructor]
+    cls.add_constructor([param('ns3::AttributeConstructionList::Item const &', 'arg0')])
+    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::checker [variable]
+    cls.add_instance_attribute('checker', 'ns3::Ptr< ns3::AttributeChecker const >', is_const=False)
+    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::name [variable]
+    cls.add_instance_attribute('name', 'std::string', is_const=False)
+    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::value [variable]
+    cls.add_instance_attribute('value', 'ns3::Ptr< ns3::AttributeValue >', is_const=False)
+    return
+
+def register_Ns3Buffer_methods(root_module, cls):
+    ## buffer.h (module 'network'): ns3::Buffer::Buffer(ns3::Buffer const & o) [constructor]
+    cls.add_constructor([param('ns3::Buffer const &', 'o')])
+    ## buffer.h (module 'network'): ns3::Buffer::Buffer() [constructor]
+    cls.add_constructor([])
+    ## buffer.h (module 'network'): ns3::Buffer::Buffer(uint32_t dataSize) [constructor]
+    cls.add_constructor([param('uint32_t', 'dataSize')])
+    ## buffer.h (module 'network'): ns3::Buffer::Buffer(uint32_t dataSize, bool initialize) [constructor]
+    cls.add_constructor([param('uint32_t', 'dataSize'), param('bool', 'initialize')])
+    ## buffer.h (module 'network'): void ns3::Buffer::AddAtEnd(uint32_t end) [member function]
+    cls.add_method('AddAtEnd', 
+                   'void', 
+                   [param('uint32_t', 'end')])
+    ## buffer.h (module 'network'): void ns3::Buffer::AddAtEnd(ns3::Buffer const & o) [member function]
+    cls.add_method('AddAtEnd', 
+                   'void', 
+                   [param('ns3::Buffer const &', 'o')])
+    ## buffer.h (module 'network'): void ns3::Buffer::AddAtStart(uint32_t start) [member function]
+    cls.add_method('AddAtStart', 
+                   'void', 
+                   [param('uint32_t', 'start')])
+    ## buffer.h (module 'network'): ns3::Buffer::Iterator ns3::Buffer::Begin() const [member function]
+    cls.add_method('Begin', 
+                   'ns3::Buffer::Iterator', 
+                   [], 
+                   is_const=True)
+    ## buffer.h (module 'network'): void ns3::Buffer::CopyData(std::ostream * os, uint32_t size) const [member function]
+    cls.add_method('CopyData', 
+                   'void', 
+                   [param('std::ostream *', 'os'), param('uint32_t', 'size')], 
+                   is_const=True)
+    ## buffer.h (module 'network'): uint32_t ns3::Buffer::CopyData(uint8_t * buffer, uint32_t size) const [member function]
+    cls.add_method('CopyData', 
+                   'uint32_t', 
+                   [param('uint8_t *', 'buffer'), param('uint32_t', 'size')], 
+                   is_const=True)
+    ## buffer.h (module 'network'): ns3::Buffer ns3::Buffer::CreateFragment(uint32_t start, uint32_t length) const [member function]
+    cls.add_method('CreateFragment', 
+                   'ns3::Buffer', 
+                   [param('uint32_t', 'start'), param('uint32_t', 'length')], 
+                   is_const=True)
+    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Deserialize(uint8_t const * buffer, uint32_t size) [member function]
+    cls.add_method('Deserialize', 
+                   'uint32_t', 
+                   [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
+    ## buffer.h (module 'network'): ns3::Buffer::Iterator ns3::Buffer::End() const [member function]
+    cls.add_method('End', 
+                   'ns3::Buffer::Iterator', 
+                   [], 
+                   is_const=True)
+    ## buffer.h (module 'network'): uint32_t ns3::Buffer::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## buffer.h (module 'network'): uint32_t ns3::Buffer::GetSize() const [member function]
+    cls.add_method('GetSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## buffer.h (module 'network'): uint8_t const * ns3::Buffer::PeekData() const [member function]
+    cls.add_method('PeekData', 
+                   'uint8_t const *', 
+                   [], 
+                   is_const=True)
+    ## buffer.h (module 'network'): void ns3::Buffer::RemoveAtEnd(uint32_t end) [member function]
+    cls.add_method('RemoveAtEnd', 
+                   'void', 
+                   [param('uint32_t', 'end')])
+    ## buffer.h (module 'network'): void ns3::Buffer::RemoveAtStart(uint32_t start) [member function]
+    cls.add_method('RemoveAtStart', 
+                   'void', 
+                   [param('uint32_t', 'start')])
+    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Serialize(uint8_t * buffer, uint32_t maxSize) const [member function]
+    cls.add_method('Serialize', 
+                   'uint32_t', 
+                   [param('uint8_t *', 'buffer'), param('uint32_t', 'maxSize')], 
+                   is_const=True)
+    return
+
+def register_Ns3BufferIterator_methods(root_module, cls):
+    ## buffer.h (module 'network'): ns3::Buffer::Iterator::Iterator(ns3::Buffer::Iterator const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Buffer::Iterator const &', 'arg0')])
+    ## buffer.h (module 'network'): ns3::Buffer::Iterator::Iterator() [constructor]
+    cls.add_constructor([])
+    ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::CalculateIpChecksum(uint16_t size) [member function]
+    cls.add_method('CalculateIpChecksum', 
+                   'uint16_t', 
+                   [param('uint16_t', 'size')])
+    ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::CalculateIpChecksum(uint16_t size, uint32_t initialChecksum) [member function]
+    cls.add_method('CalculateIpChecksum', 
+                   'uint16_t', 
+                   [param('uint16_t', 'size'), param('uint32_t', 'initialChecksum')])
+    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::GetDistanceFrom(ns3::Buffer::Iterator const & o) const [member function]
+    cls.add_method('GetDistanceFrom', 
+                   'uint32_t', 
+                   [param('ns3::Buffer::Iterator const &', 'o')], 
+                   is_const=True)
+    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::GetRemainingSize() const [member function]
+    cls.add_method('GetRemainingSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::GetSize() const [member function]
+    cls.add_method('GetSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## buffer.h (module 'network'): bool ns3::Buffer::Iterator::IsEnd() const [member function]
+    cls.add_method('IsEnd', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## buffer.h (module 'network'): bool ns3::Buffer::Iterator::IsStart() const [member function]
+    cls.add_method('IsStart', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Next() [member function]
+    cls.add_method('Next', 
+                   'void', 
+                   [])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Next(uint32_t delta) [member function]
+    cls.add_method('Next', 
+                   'void', 
+                   [param('uint32_t', 'delta')])
+    ## buffer.h (module 'network'): uint8_t ns3::Buffer::Iterator::PeekU8() [member function]
+    cls.add_method('PeekU8', 
+                   'uint8_t', 
+                   [])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Prev() [member function]
+    cls.add_method('Prev', 
+                   'void', 
+                   [])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Prev(uint32_t delta) [member function]
+    cls.add_method('Prev', 
+                   'void', 
+                   [param('uint32_t', 'delta')])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Read(uint8_t * buffer, uint32_t size) [member function]
+    cls.add_method('Read', 
+                   'void', 
+                   [param('uint8_t *', 'buffer'), param('uint32_t', 'size')])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Read(ns3::Buffer::Iterator start, uint32_t size) [member function]
+    cls.add_method('Read', 
+                   'void', 
+                   [param('ns3::Buffer::Iterator', 'start'), param('uint32_t', 'size')])
+    ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::ReadLsbtohU16() [member function]
+    cls.add_method('ReadLsbtohU16', 
+                   'uint16_t', 
+                   [])
+    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::ReadLsbtohU32() [member function]
+    cls.add_method('ReadLsbtohU32', 
+                   'uint32_t', 
+                   [])
+    ## buffer.h (module 'network'): uint64_t ns3::Buffer::Iterator::ReadLsbtohU64() [member function]
+    cls.add_method('ReadLsbtohU64', 
+                   'uint64_t', 
+                   [])
+    ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::ReadNtohU16() [member function]
+    cls.add_method('ReadNtohU16', 
+                   'uint16_t', 
+                   [])
+    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::ReadNtohU32() [member function]
+    cls.add_method('ReadNtohU32', 
+                   'uint32_t', 
+                   [])
+    ## buffer.h (module 'network'): uint64_t ns3::Buffer::Iterator::ReadNtohU64() [member function]
+    cls.add_method('ReadNtohU64', 
+                   'uint64_t', 
+                   [])
+    ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::ReadU16() [member function]
+    cls.add_method('ReadU16', 
+                   'uint16_t', 
+                   [])
+    ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::ReadU32() [member function]
+    cls.add_method('ReadU32', 
+                   'uint32_t', 
+                   [])
+    ## buffer.h (module 'network'): uint64_t ns3::Buffer::Iterator::ReadU64() [member function]
+    cls.add_method('ReadU64', 
+                   'uint64_t', 
+                   [])
+    ## buffer.h (module 'network'): uint8_t ns3::Buffer::Iterator::ReadU8() [member function]
+    cls.add_method('ReadU8', 
+                   'uint8_t', 
+                   [])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Write(uint8_t const * buffer, uint32_t size) [member function]
+    cls.add_method('Write', 
+                   'void', 
+                   [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Write(ns3::Buffer::Iterator start, ns3::Buffer::Iterator end) [member function]
+    cls.add_method('Write', 
+                   'void', 
+                   [param('ns3::Buffer::Iterator', 'start'), param('ns3::Buffer::Iterator', 'end')])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtolsbU16(uint16_t data) [member function]
+    cls.add_method('WriteHtolsbU16', 
+                   'void', 
+                   [param('uint16_t', 'data')])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtolsbU32(uint32_t data) [member function]
+    cls.add_method('WriteHtolsbU32', 
+                   'void', 
+                   [param('uint32_t', 'data')])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtolsbU64(uint64_t data) [member function]
+    cls.add_method('WriteHtolsbU64', 
+                   'void', 
+                   [param('uint64_t', 'data')])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtonU16(uint16_t data) [member function]
+    cls.add_method('WriteHtonU16', 
+                   'void', 
+                   [param('uint16_t', 'data')])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtonU32(uint32_t data) [member function]
+    cls.add_method('WriteHtonU32', 
+                   'void', 
+                   [param('uint32_t', 'data')])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtonU64(uint64_t data) [member function]
+    cls.add_method('WriteHtonU64', 
+                   'void', 
+                   [param('uint64_t', 'data')])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU16(uint16_t data) [member function]
+    cls.add_method('WriteU16', 
+                   'void', 
+                   [param('uint16_t', 'data')])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU32(uint32_t data) [member function]
+    cls.add_method('WriteU32', 
+                   'void', 
+                   [param('uint32_t', 'data')])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU64(uint64_t data) [member function]
+    cls.add_method('WriteU64', 
+                   'void', 
+                   [param('uint64_t', 'data')])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU8(uint8_t data) [member function]
+    cls.add_method('WriteU8', 
+                   'void', 
+                   [param('uint8_t', 'data')])
+    ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU8(uint8_t data, uint32_t len) [member function]
+    cls.add_method('WriteU8', 
+                   'void', 
+                   [param('uint8_t', 'data'), param('uint32_t', 'len')])
+    return
+
+def register_Ns3ByteTagIterator_methods(root_module, cls):
+    ## packet.h (module 'network'): ns3::ByteTagIterator::ByteTagIterator(ns3::ByteTagIterator const & arg0) [constructor]
+    cls.add_constructor([param('ns3::ByteTagIterator const &', 'arg0')])
+    ## packet.h (module 'network'): bool ns3::ByteTagIterator::HasNext() const [member function]
+    cls.add_method('HasNext', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## packet.h (module 'network'): ns3::ByteTagIterator::Item ns3::ByteTagIterator::Next() [member function]
+    cls.add_method('Next', 
+                   'ns3::ByteTagIterator::Item', 
+                   [])
+    return
+
+def register_Ns3ByteTagIteratorItem_methods(root_module, cls):
+    ## packet.h (module 'network'): ns3::ByteTagIterator::Item::Item(ns3::ByteTagIterator::Item const & arg0) [constructor]
+    cls.add_constructor([param('ns3::ByteTagIterator::Item const &', 'arg0')])
+    ## packet.h (module 'network'): uint32_t ns3::ByteTagIterator::Item::GetEnd() const [member function]
+    cls.add_method('GetEnd', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## packet.h (module 'network'): uint32_t ns3::ByteTagIterator::Item::GetStart() const [member function]
+    cls.add_method('GetStart', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## packet.h (module 'network'): void ns3::ByteTagIterator::Item::GetTag(ns3::Tag & tag) const [member function]
+    cls.add_method('GetTag', 
+                   'void', 
+                   [param('ns3::Tag &', 'tag')], 
+                   is_const=True)
+    ## packet.h (module 'network'): ns3::TypeId ns3::ByteTagIterator::Item::GetTypeId() const [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True)
+    return
+
+def register_Ns3ByteTagList_methods(root_module, cls):
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::ByteTagList() [constructor]
+    cls.add_constructor([])
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::ByteTagList(ns3::ByteTagList const & o) [constructor]
+    cls.add_constructor([param('ns3::ByteTagList const &', 'o')])
+    ## byte-tag-list.h (module 'network'): ns3::TagBuffer ns3::ByteTagList::Add(ns3::TypeId tid, uint32_t bufferSize, int32_t start, int32_t end) [member function]
+    cls.add_method('Add', 
+                   'ns3::TagBuffer', 
+                   [param('ns3::TypeId', 'tid'), param('uint32_t', 'bufferSize'), param('int32_t', 'start'), param('int32_t', 'end')])
+    ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::Add(ns3::ByteTagList const & o) [member function]
+    cls.add_method('Add', 
+                   'void', 
+                   [param('ns3::ByteTagList const &', 'o')])
+    ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::AddAtEnd(int32_t appendOffset) [member function]
+    cls.add_method('AddAtEnd', 
+                   'void', 
+                   [param('int32_t', 'appendOffset')])
+    ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::AddAtStart(int32_t prependOffset) [member function]
+    cls.add_method('AddAtStart', 
+                   'void', 
+                   [param('int32_t', 'prependOffset')])
+    ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::Adjust(int32_t adjustment) [member function]
+    cls.add_method('Adjust', 
+                   'void', 
+                   [param('int32_t', 'adjustment')])
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator ns3::ByteTagList::Begin(int32_t offsetStart, int32_t offsetEnd) const [member function]
+    cls.add_method('Begin', 
+                   'ns3::ByteTagList::Iterator', 
+                   [param('int32_t', 'offsetStart'), param('int32_t', 'offsetEnd')], 
+                   is_const=True)
+    ## byte-tag-list.h (module 'network'): uint32_t ns3::ByteTagList::Deserialize(uint32_t const * buffer, uint32_t size) [member function]
+    cls.add_method('Deserialize', 
+                   'uint32_t', 
+                   [param('uint32_t const *', 'buffer'), param('uint32_t', 'size')])
+    ## byte-tag-list.h (module 'network'): uint32_t ns3::ByteTagList::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::RemoveAll() [member function]
+    cls.add_method('RemoveAll', 
+                   'void', 
+                   [])
+    ## byte-tag-list.h (module 'network'): uint32_t ns3::ByteTagList::Serialize(uint32_t * buffer, uint32_t maxSize) const [member function]
+    cls.add_method('Serialize', 
+                   'uint32_t', 
+                   [param('uint32_t *', 'buffer'), param('uint32_t', 'maxSize')], 
+                   is_const=True)
+    return
+
+def register_Ns3ByteTagListIterator_methods(root_module, cls):
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Iterator(ns3::ByteTagList::Iterator const & arg0) [constructor]
+    cls.add_constructor([param('ns3::ByteTagList::Iterator const &', 'arg0')])
+    ## byte-tag-list.h (module 'network'): uint32_t ns3::ByteTagList::Iterator::GetOffsetStart() const [member function]
+    cls.add_method('GetOffsetStart', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## byte-tag-list.h (module 'network'): bool ns3::ByteTagList::Iterator::HasNext() const [member function]
+    cls.add_method('HasNext', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item ns3::ByteTagList::Iterator::Next() [member function]
+    cls.add_method('Next', 
+                   'ns3::ByteTagList::Iterator::Item', 
+                   [])
+    return
+
+def register_Ns3ByteTagListIteratorItem_methods(root_module, cls):
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::Item(ns3::ByteTagList::Iterator::Item const & arg0) [constructor]
+    cls.add_constructor([param('ns3::ByteTagList::Iterator::Item const &', 'arg0')])
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::Item(ns3::TagBuffer buf) [constructor]
+    cls.add_constructor([param('ns3::TagBuffer', 'buf')])
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::buf [variable]
+    cls.add_instance_attribute('buf', 'ns3::TagBuffer', is_const=False)
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::end [variable]
+    cls.add_instance_attribute('end', 'int32_t', is_const=False)
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::size [variable]
+    cls.add_instance_attribute('size', 'uint32_t', is_const=False)
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::start [variable]
+    cls.add_instance_attribute('start', 'int32_t', is_const=False)
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::tid [variable]
+    cls.add_instance_attribute('tid', 'ns3::TypeId', is_const=False)
+    return
+
+def register_Ns3CallbackBase_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackBase::CallbackBase(ns3::CallbackBase const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackBase const &', 'arg0')])
+    ## callback.h (module 'core'): ns3::CallbackBase::CallbackBase() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::Ptr<ns3::CallbackImplBase> ns3::CallbackBase::GetImpl() const [member function]
+    cls.add_method('GetImpl', 
+                   'ns3::Ptr< ns3::CallbackImplBase >', 
+                   [], 
+                   is_const=True)
+    ## callback.h (module 'core'): ns3::CallbackBase::CallbackBase(ns3::Ptr<ns3::CallbackImplBase> impl) [constructor]
+    cls.add_constructor([param('ns3::Ptr< ns3::CallbackImplBase >', 'impl')], 
+                        visibility='protected')
+    return
+
+def register_Ns3DefaultDeleter__Ns3AttributeAccessor_methods(root_module, cls):
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeAccessor>::DefaultDeleter() [constructor]
+    cls.add_constructor([])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeAccessor>::DefaultDeleter(ns3::DefaultDeleter<ns3::AttributeAccessor> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::DefaultDeleter< ns3::AttributeAccessor > const &', 'arg0')])
+    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::AttributeAccessor>::Delete(ns3::AttributeAccessor * object) [member function]
+    cls.add_method('Delete', 
+                   'void', 
+                   [param('ns3::AttributeAccessor *', 'object')], 
+                   is_static=True)
+    return
+
+def register_Ns3DefaultDeleter__Ns3AttributeChecker_methods(root_module, cls):
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeChecker>::DefaultDeleter() [constructor]
+    cls.add_constructor([])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeChecker>::DefaultDeleter(ns3::DefaultDeleter<ns3::AttributeChecker> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::DefaultDeleter< ns3::AttributeChecker > const &', 'arg0')])
+    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::AttributeChecker>::Delete(ns3::AttributeChecker * object) [member function]
+    cls.add_method('Delete', 
+                   'void', 
+                   [param('ns3::AttributeChecker *', 'object')], 
+                   is_static=True)
+    return
+
+def register_Ns3DefaultDeleter__Ns3AttributeValue_methods(root_module, cls):
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeValue>::DefaultDeleter() [constructor]
+    cls.add_constructor([])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeValue>::DefaultDeleter(ns3::DefaultDeleter<ns3::AttributeValue> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::DefaultDeleter< ns3::AttributeValue > const &', 'arg0')])
+    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::AttributeValue>::Delete(ns3::AttributeValue * object) [member function]
+    cls.add_method('Delete', 
+                   'void', 
+                   [param('ns3::AttributeValue *', 'object')], 
+                   is_static=True)
+    return
+
+def register_Ns3DefaultDeleter__Ns3CallbackImplBase_methods(root_module, cls):
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::CallbackImplBase>::DefaultDeleter() [constructor]
+    cls.add_constructor([])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::CallbackImplBase>::DefaultDeleter(ns3::DefaultDeleter<ns3::CallbackImplBase> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::DefaultDeleter< ns3::CallbackImplBase > const &', 'arg0')])
+    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::CallbackImplBase>::Delete(ns3::CallbackImplBase * object) [member function]
+    cls.add_method('Delete', 
+                   'void', 
+                   [param('ns3::CallbackImplBase *', 'object')], 
+                   is_static=True)
+    return
+
+def register_Ns3DefaultDeleter__Ns3EventImpl_methods(root_module, cls):
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::EventImpl>::DefaultDeleter() [constructor]
+    cls.add_constructor([])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::EventImpl>::DefaultDeleter(ns3::DefaultDeleter<ns3::EventImpl> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::DefaultDeleter< ns3::EventImpl > const &', 'arg0')])
+    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::EventImpl>::Delete(ns3::EventImpl * object) [member function]
+    cls.add_method('Delete', 
+                   'void', 
+                   [param('ns3::EventImpl *', 'object')], 
+                   is_static=True)
+    return
+
+def register_Ns3DefaultDeleter__Ns3FlowClassifier_methods(root_module, cls):
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::FlowClassifier>::DefaultDeleter() [constructor]
+    cls.add_constructor([])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::FlowClassifier>::DefaultDeleter(ns3::DefaultDeleter<ns3::FlowClassifier> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::DefaultDeleter< ns3::FlowClassifier > const &', 'arg0')])
+    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::FlowClassifier>::Delete(ns3::FlowClassifier * object) [member function]
+    cls.add_method('Delete', 
+                   'void', 
+                   [param('ns3::FlowClassifier *', 'object')], 
+                   is_static=True)
+    return
+
+def register_Ns3DefaultDeleter__Ns3HashImplementation_methods(root_module, cls):
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Hash::Implementation>::DefaultDeleter() [constructor]
+    cls.add_constructor([])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Hash::Implementation>::DefaultDeleter(ns3::DefaultDeleter<ns3::Hash::Implementation> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::DefaultDeleter< ns3::Hash::Implementation > const &', 'arg0')])
+    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::Hash::Implementation>::Delete(ns3::Hash::Implementation * object) [member function]
+    cls.add_method('Delete', 
+                   'void', 
+                   [param('ns3::Hash::Implementation *', 'object')], 
+                   is_static=True)
+    return
+
+def register_Ns3DefaultDeleter__Ns3NixVector_methods(root_module, cls):
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::NixVector>::DefaultDeleter() [constructor]
+    cls.add_constructor([])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::NixVector>::DefaultDeleter(ns3::DefaultDeleter<ns3::NixVector> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::DefaultDeleter< ns3::NixVector > const &', 'arg0')])
+    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::NixVector>::Delete(ns3::NixVector * object) [member function]
+    cls.add_method('Delete', 
+                   'void', 
+                   [param('ns3::NixVector *', 'object')], 
+                   is_static=True)
+    return
+
+def register_Ns3DefaultDeleter__Ns3Packet_methods(root_module, cls):
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Packet>::DefaultDeleter() [constructor]
+    cls.add_constructor([])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Packet>::DefaultDeleter(ns3::DefaultDeleter<ns3::Packet> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::DefaultDeleter< ns3::Packet > const &', 'arg0')])
+    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::Packet>::Delete(ns3::Packet * object) [member function]
+    cls.add_method('Delete', 
+                   'void', 
+                   [param('ns3::Packet *', 'object')], 
+                   is_static=True)
+    return
+
+def register_Ns3DefaultDeleter__Ns3TraceSourceAccessor_methods(root_module, cls):
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::TraceSourceAccessor>::DefaultDeleter() [constructor]
+    cls.add_constructor([])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::TraceSourceAccessor>::DefaultDeleter(ns3::DefaultDeleter<ns3::TraceSourceAccessor> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::DefaultDeleter< ns3::TraceSourceAccessor > const &', 'arg0')])
+    ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::TraceSourceAccessor>::Delete(ns3::TraceSourceAccessor * object) [member function]
+    cls.add_method('Delete', 
+                   'void', 
+                   [param('ns3::TraceSourceAccessor *', 'object')], 
+                   is_static=True)
+    return
+
+def register_Ns3EventId_methods(root_module, cls):
+    cls.add_binary_comparison_operator('==')
+    cls.add_binary_comparison_operator('!=')
+    cls.add_binary_comparison_operator('<')
+    ## event-id.h (module 'core'): ns3::EventId::EventId(ns3::EventId const & arg0) [constructor]
+    cls.add_constructor([param('ns3::EventId const &', 'arg0')])
+    ## event-id.h (module 'core'): ns3::EventId::EventId() [constructor]
+    cls.add_constructor([])
+    ## event-id.h (module 'core'): ns3::EventId::EventId(ns3::Ptr<ns3::EventImpl> const & impl, uint64_t ts, uint32_t context, uint32_t uid) [constructor]
+    cls.add_constructor([param('ns3::Ptr< ns3::EventImpl > const &', 'impl'), param('uint64_t', 'ts'), param('uint32_t', 'context'), param('uint32_t', 'uid')])
+    ## event-id.h (module 'core'): void ns3::EventId::Cancel() [member function]
+    cls.add_method('Cancel', 
+                   'void', 
+                   [])
+    ## event-id.h (module 'core'): uint32_t ns3::EventId::GetContext() const [member function]
+    cls.add_method('GetContext', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## event-id.h (module 'core'): uint64_t ns3::EventId::GetTs() const [member function]
+    cls.add_method('GetTs', 
+                   'uint64_t', 
+                   [], 
+                   is_const=True)
+    ## event-id.h (module 'core'): uint32_t ns3::EventId::GetUid() const [member function]
+    cls.add_method('GetUid', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## event-id.h (module 'core'): bool ns3::EventId::IsExpired() const [member function]
+    cls.add_method('IsExpired', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## event-id.h (module 'core'): bool ns3::EventId::IsRunning() const [member function]
+    cls.add_method('IsRunning', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## event-id.h (module 'core'): ns3::EventImpl * ns3::EventId::PeekEventImpl() const [member function]
+    cls.add_method('PeekEventImpl', 
+                   'ns3::EventImpl *', 
+                   [], 
+                   is_const=True)
+    ## event-id.h (module 'core'): void ns3::EventId::Remove() [member function]
+    cls.add_method('Remove', 
+                   'void', 
+                   [])
+    return
+
+def register_Ns3FlowMonitorHelper_methods(root_module, cls):
+    ## flow-monitor-helper.h (module 'flow-monitor'): ns3::FlowMonitorHelper::FlowMonitorHelper() [constructor]
+    cls.add_constructor([])
+    ## flow-monitor-helper.h (module 'flow-monitor'): void ns3::FlowMonitorHelper::SetMonitorAttribute(std::string n1, ns3::AttributeValue const & v1) [member function]
+    cls.add_method('SetMonitorAttribute', 
+                   'void', 
+                   [param('std::string', 'n1'), param('ns3::AttributeValue const &', 'v1')])
+    ## flow-monitor-helper.h (module 'flow-monitor'): ns3::Ptr<ns3::FlowMonitor> ns3::FlowMonitorHelper::Install(ns3::NodeContainer nodes) [member function]
+    cls.add_method('Install', 
+                   'ns3::Ptr< ns3::FlowMonitor >', 
+                   [param('ns3::NodeContainer', 'nodes')])
+    ## flow-monitor-helper.h (module 'flow-monitor'): ns3::Ptr<ns3::FlowMonitor> ns3::FlowMonitorHelper::Install(ns3::Ptr<ns3::Node> node) [member function]
+    cls.add_method('Install', 
+                   'ns3::Ptr< ns3::FlowMonitor >', 
+                   [param('ns3::Ptr< ns3::Node >', 'node')])
+    ## flow-monitor-helper.h (module 'flow-monitor'): ns3::Ptr<ns3::FlowMonitor> ns3::FlowMonitorHelper::InstallAll() [member function]
+    cls.add_method('InstallAll', 
+                   'ns3::Ptr< ns3::FlowMonitor >', 
+                   [])
+    ## flow-monitor-helper.h (module 'flow-monitor'): ns3::Ptr<ns3::FlowMonitor> ns3::FlowMonitorHelper::GetMonitor() [member function]
+    cls.add_method('GetMonitor', 
+                   'ns3::Ptr< ns3::FlowMonitor >', 
+                   [])
+    ## flow-monitor-helper.h (module 'flow-monitor'): ns3::Ptr<ns3::FlowClassifier> ns3::FlowMonitorHelper::GetClassifier() [member function]
+    cls.add_method('GetClassifier', 
+                   'ns3::Ptr< ns3::FlowClassifier >', 
+                   [])
+    ## flow-monitor-helper.h (module 'flow-monitor'): ns3::Ptr<ns3::FlowClassifier> ns3::FlowMonitorHelper::GetClassifier6() [member function]
+    cls.add_method('GetClassifier6', 
+                   'ns3::Ptr< ns3::FlowClassifier >', 
+                   [])
+    ## flow-monitor-helper.h (module 'flow-monitor'): void ns3::FlowMonitorHelper::SerializeToXmlStream(std::ostream & os, uint16_t indent, bool enableHistograms, bool enableProbes) [member function]
+    cls.add_method('SerializeToXmlStream', 
+                   'void', 
+                   [param('std::ostream &', 'os'), param('uint16_t', 'indent'), param('bool', 'enableHistograms'), param('bool', 'enableProbes')])
+    ## flow-monitor-helper.h (module 'flow-monitor'): std::string ns3::FlowMonitorHelper::SerializeToXmlString(uint16_t indent, bool enableHistograms, bool enableProbes) [member function]
+    cls.add_method('SerializeToXmlString', 
+                   'std::string', 
+                   [param('uint16_t', 'indent'), param('bool', 'enableHistograms'), param('bool', 'enableProbes')])
+    ## flow-monitor-helper.h (module 'flow-monitor'): void ns3::FlowMonitorHelper::SerializeToXmlFile(std::string fileName, bool enableHistograms, bool enableProbes) [member function]
+    cls.add_method('SerializeToXmlFile', 
+                   'void', 
+                   [param('std::string', 'fileName'), param('bool', 'enableHistograms'), param('bool', 'enableProbes')])
+    return
+
+def register_Ns3Hasher_methods(root_module, cls):
+    ## hash.h (module 'core'): ns3::Hasher::Hasher(ns3::Hasher const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Hasher const &', 'arg0')])
+    ## hash.h (module 'core'): ns3::Hasher::Hasher() [constructor]
+    cls.add_constructor([])
+    ## hash.h (module 'core'): ns3::Hasher::Hasher(ns3::Ptr<ns3::Hash::Implementation> hp) [constructor]
+    cls.add_constructor([param('ns3::Ptr< ns3::Hash::Implementation >', 'hp')])
+    ## hash.h (module 'core'): uint32_t ns3::Hasher::GetHash32(char const * buffer, std::size_t const size) [member function]
+    cls.add_method('GetHash32', 
+                   'uint32_t', 
+                   [param('char const *', 'buffer'), param('std::size_t const', 'size')])
+    ## hash.h (module 'core'): uint32_t ns3::Hasher::GetHash32(std::string const s) [member function]
+    cls.add_method('GetHash32', 
+                   'uint32_t', 
+                   [param('std::string const', 's')])
+    ## hash.h (module 'core'): uint64_t ns3::Hasher::GetHash64(char const * buffer, std::size_t const size) [member function]
+    cls.add_method('GetHash64', 
+                   'uint64_t', 
+                   [param('char const *', 'buffer'), param('std::size_t const', 'size')])
+    ## hash.h (module 'core'): uint64_t ns3::Hasher::GetHash64(std::string const s) [member function]
+    cls.add_method('GetHash64', 
+                   'uint64_t', 
+                   [param('std::string const', 's')])
+    ## hash.h (module 'core'): ns3::Hasher & ns3::Hasher::clear() [member function]
+    cls.add_method('clear', 
+                   'ns3::Hasher &', 
+                   [])
+    return
+
+def register_Ns3Histogram_methods(root_module, cls):
+    ## histogram.h (module 'stats'): ns3::Histogram::Histogram(ns3::Histogram const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Histogram const &', 'arg0')])
+    ## histogram.h (module 'stats'): ns3::Histogram::Histogram(double binWidth) [constructor]
+    cls.add_constructor([param('double', 'binWidth')])
+    ## histogram.h (module 'stats'): ns3::Histogram::Histogram() [constructor]
+    cls.add_constructor([])
+    ## histogram.h (module 'stats'): void ns3::Histogram::AddValue(double value) [member function]
+    cls.add_method('AddValue', 
+                   'void', 
+                   [param('double', 'value')])
+    ## histogram.h (module 'stats'): uint32_t ns3::Histogram::GetBinCount(uint32_t index) [member function]
+    cls.add_method('GetBinCount', 
+                   'uint32_t', 
+                   [param('uint32_t', 'index')])
+    ## histogram.h (module 'stats'): double ns3::Histogram::GetBinEnd(uint32_t index) [member function]
+    cls.add_method('GetBinEnd', 
+                   'double', 
+                   [param('uint32_t', 'index')])
+    ## histogram.h (module 'stats'): double ns3::Histogram::GetBinStart(uint32_t index) [member function]
+    cls.add_method('GetBinStart', 
+                   'double', 
+                   [param('uint32_t', 'index')])
+    ## histogram.h (module 'stats'): double ns3::Histogram::GetBinWidth(uint32_t index) const [member function]
+    cls.add_method('GetBinWidth', 
+                   'double', 
+                   [param('uint32_t', 'index')], 
+                   is_const=True)
+    ## histogram.h (module 'stats'): uint32_t ns3::Histogram::GetNBins() const [member function]
+    cls.add_method('GetNBins', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## histogram.h (module 'stats'): void ns3::Histogram::SerializeToXmlStream(std::ostream & os, uint16_t indent, std::string elementName) const [member function]
+    cls.add_method('SerializeToXmlStream', 
+                   'void', 
+                   [param('std::ostream &', 'os'), param('uint16_t', 'indent'), param('std::string', 'elementName')], 
+                   is_const=True)
+    ## histogram.h (module 'stats'): void ns3::Histogram::SetDefaultBinWidth(double binWidth) [member function]
+    cls.add_method('SetDefaultBinWidth', 
+                   'void', 
+                   [param('double', 'binWidth')])
+    return
+
+def register_Ns3Inet6SocketAddress_methods(root_module, cls):
+    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(ns3::Inet6SocketAddress const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Inet6SocketAddress const &', 'arg0')])
+    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(ns3::Ipv6Address ipv6, uint16_t port) [constructor]
+    cls.add_constructor([param('ns3::Ipv6Address', 'ipv6'), param('uint16_t', 'port')])
+    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(ns3::Ipv6Address ipv6) [constructor]
+    cls.add_constructor([param('ns3::Ipv6Address', 'ipv6')])
+    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(uint16_t port) [constructor]
+    cls.add_constructor([param('uint16_t', 'port')])
+    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(char const * ipv6, uint16_t port) [constructor]
+    cls.add_constructor([param('char const *', 'ipv6'), param('uint16_t', 'port')])
+    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(char const * ipv6) [constructor]
+    cls.add_constructor([param('char const *', 'ipv6')])
+    ## inet6-socket-address.h (module 'network'): static ns3::Inet6SocketAddress ns3::Inet6SocketAddress::ConvertFrom(ns3::Address const & addr) [member function]
+    cls.add_method('ConvertFrom', 
+                   'ns3::Inet6SocketAddress', 
+                   [param('ns3::Address const &', 'addr')], 
+                   is_static=True)
+    ## inet6-socket-address.h (module 'network'): ns3::Ipv6Address ns3::Inet6SocketAddress::GetIpv6() const [member function]
+    cls.add_method('GetIpv6', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   is_const=True)
+    ## inet6-socket-address.h (module 'network'): uint16_t ns3::Inet6SocketAddress::GetPort() const [member function]
+    cls.add_method('GetPort', 
+                   'uint16_t', 
+                   [], 
+                   is_const=True)
+    ## inet6-socket-address.h (module 'network'): static bool ns3::Inet6SocketAddress::IsMatchingType(ns3::Address const & addr) [member function]
+    cls.add_method('IsMatchingType', 
+                   'bool', 
+                   [param('ns3::Address const &', 'addr')], 
+                   is_static=True)
+    ## inet6-socket-address.h (module 'network'): void ns3::Inet6SocketAddress::SetIpv6(ns3::Ipv6Address ipv6) [member function]
+    cls.add_method('SetIpv6', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'ipv6')])
+    ## inet6-socket-address.h (module 'network'): void ns3::Inet6SocketAddress::SetPort(uint16_t port) [member function]
+    cls.add_method('SetPort', 
+                   'void', 
+                   [param('uint16_t', 'port')])
+    return
+
+def register_Ns3InetSocketAddress_methods(root_module, cls):
+    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(ns3::InetSocketAddress const & arg0) [constructor]
+    cls.add_constructor([param('ns3::InetSocketAddress const &', 'arg0')])
+    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(ns3::Ipv4Address ipv4, uint16_t port) [constructor]
+    cls.add_constructor([param('ns3::Ipv4Address', 'ipv4'), param('uint16_t', 'port')])
+    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(ns3::Ipv4Address ipv4) [constructor]
+    cls.add_constructor([param('ns3::Ipv4Address', 'ipv4')])
+    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(uint16_t port) [constructor]
+    cls.add_constructor([param('uint16_t', 'port')])
+    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(char const * ipv4, uint16_t port) [constructor]
+    cls.add_constructor([param('char const *', 'ipv4'), param('uint16_t', 'port')])
+    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(char const * ipv4) [constructor]
+    cls.add_constructor([param('char const *', 'ipv4')])
+    ## inet-socket-address.h (module 'network'): static ns3::InetSocketAddress ns3::InetSocketAddress::ConvertFrom(ns3::Address const & address) [member function]
+    cls.add_method('ConvertFrom', 
+                   'ns3::InetSocketAddress', 
+                   [param('ns3::Address const &', 'address')], 
+                   is_static=True)
+    ## inet-socket-address.h (module 'network'): ns3::Ipv4Address ns3::InetSocketAddress::GetIpv4() const [member function]
+    cls.add_method('GetIpv4', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_const=True)
+    ## inet-socket-address.h (module 'network'): uint16_t ns3::InetSocketAddress::GetPort() const [member function]
+    cls.add_method('GetPort', 
+                   'uint16_t', 
+                   [], 
+                   is_const=True)
+    ## inet-socket-address.h (module 'network'): uint8_t ns3::InetSocketAddress::GetTos() const [member function]
+    cls.add_method('GetTos', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## inet-socket-address.h (module 'network'): static bool ns3::InetSocketAddress::IsMatchingType(ns3::Address const & address) [member function]
+    cls.add_method('IsMatchingType', 
+                   'bool', 
+                   [param('ns3::Address const &', 'address')], 
+                   is_static=True)
+    ## inet-socket-address.h (module 'network'): void ns3::InetSocketAddress::SetIpv4(ns3::Ipv4Address address) [member function]
+    cls.add_method('SetIpv4', 
+                   'void', 
+                   [param('ns3::Ipv4Address', 'address')])
+    ## inet-socket-address.h (module 'network'): void ns3::InetSocketAddress::SetPort(uint16_t port) [member function]
+    cls.add_method('SetPort', 
+                   'void', 
+                   [param('uint16_t', 'port')])
+    ## inet-socket-address.h (module 'network'): void ns3::InetSocketAddress::SetTos(uint8_t tos) [member function]
+    cls.add_method('SetTos', 
+                   'void', 
+                   [param('uint8_t', 'tos')])
+    return
+
+def register_Ns3Ipv4Address_methods(root_module, cls):
+    cls.add_output_stream_operator()
+    cls.add_binary_comparison_operator('==')
+    cls.add_binary_comparison_operator('!=')
+    cls.add_binary_comparison_operator('<')
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Address::Ipv4Address(ns3::Ipv4Address const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv4Address const &', 'arg0')])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Address::Ipv4Address() [constructor]
+    cls.add_constructor([])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Address::Ipv4Address(uint32_t address) [constructor]
+    cls.add_constructor([param('uint32_t', 'address')])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Address::Ipv4Address(char const * address) [constructor]
+    cls.add_constructor([param('char const *', 'address')])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Address ns3::Ipv4Address::CombineMask(ns3::Ipv4Mask const & mask) const [member function]
+    cls.add_method('CombineMask', 
+                   'ns3::Ipv4Address', 
+                   [param('ns3::Ipv4Mask const &', 'mask')], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::ConvertFrom(ns3::Address const & address) [member function]
+    cls.add_method('ConvertFrom', 
+                   'ns3::Ipv4Address', 
+                   [param('ns3::Address const &', 'address')], 
+                   is_static=True)
+    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::Deserialize(uint8_t const * buf) [member function]
+    cls.add_method('Deserialize', 
+                   'ns3::Ipv4Address', 
+                   [param('uint8_t const *', 'buf')], 
+                   is_static=True)
+    ## ipv4-address.h (module 'network'): uint32_t ns3::Ipv4Address::Get() const [member function]
+    cls.add_method('Get', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::GetAny() [member function]
+    cls.add_method('GetAny', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_static=True)
+    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::GetBroadcast() [member function]
+    cls.add_method('GetBroadcast', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_static=True)
+    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::GetLoopback() [member function]
+    cls.add_method('GetLoopback', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_static=True)
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Address ns3::Ipv4Address::GetSubnetDirectedBroadcast(ns3::Ipv4Mask const & mask) const [member function]
+    cls.add_method('GetSubnetDirectedBroadcast', 
+                   'ns3::Ipv4Address', 
+                   [param('ns3::Ipv4Mask const &', 'mask')], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): static ns3::Ipv4Address ns3::Ipv4Address::GetZero() [member function]
+    cls.add_method('GetZero', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_static=True)
+    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsAny() const [member function]
+    cls.add_method('IsAny', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsBroadcast() const [member function]
+    cls.add_method('IsBroadcast', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsInitialized() const [member function]
+    cls.add_method('IsInitialized', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsLocalMulticast() const [member function]
+    cls.add_method('IsLocalMulticast', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsLocalhost() const [member function]
+    cls.add_method('IsLocalhost', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): static bool ns3::Ipv4Address::IsMatchingType(ns3::Address const & address) [member function]
+    cls.add_method('IsMatchingType', 
+                   'bool', 
+                   [param('ns3::Address const &', 'address')], 
+                   is_static=True)
+    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsMulticast() const [member function]
+    cls.add_method('IsMulticast', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Address::IsSubnetDirectedBroadcast(ns3::Ipv4Mask const & mask) const [member function]
+    cls.add_method('IsSubnetDirectedBroadcast', 
+                   'bool', 
+                   [param('ns3::Ipv4Mask const &', 'mask')], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): void ns3::Ipv4Address::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): void ns3::Ipv4Address::Serialize(uint8_t * buf) const [member function]
+    cls.add_method('Serialize', 
+                   'void', 
+                   [param('uint8_t *', 'buf')], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): void ns3::Ipv4Address::Set(uint32_t address) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('uint32_t', 'address')])
+    ## ipv4-address.h (module 'network'): void ns3::Ipv4Address::Set(char const * address) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('char const *', 'address')])
+    return
+
+def register_Ns3Ipv4AddressHash_methods(root_module, cls):
+    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressHash::Ipv4AddressHash() [constructor]
+    cls.add_constructor([])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressHash::Ipv4AddressHash(ns3::Ipv4AddressHash const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv4AddressHash const &', 'arg0')])
+    ## ipv4-address.h (module 'network'): size_t ns3::Ipv4AddressHash::operator()(ns3::Ipv4Address const & x) const [member operator]
+    cls.add_method('operator()', 
+                   'size_t', 
+                   [param('ns3::Ipv4Address const &', 'x')], 
+                   custom_name='__call__', is_const=True)
+    return
+
+def register_Ns3Ipv4InterfaceAddress_methods(root_module, cls):
+    cls.add_output_stream_operator()
+    cls.add_binary_comparison_operator('==')
+    cls.add_binary_comparison_operator('!=')
+    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4InterfaceAddress::Ipv4InterfaceAddress() [constructor]
+    cls.add_constructor([])
+    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4InterfaceAddress::Ipv4InterfaceAddress(ns3::Ipv4Address local, ns3::Ipv4Mask mask) [constructor]
+    cls.add_constructor([param('ns3::Ipv4Address', 'local'), param('ns3::Ipv4Mask', 'mask')])
+    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4InterfaceAddress::Ipv4InterfaceAddress(ns3::Ipv4InterfaceAddress const & o) [constructor]
+    cls.add_constructor([param('ns3::Ipv4InterfaceAddress const &', 'o')])
+    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4InterfaceAddress::GetAddress() const [member function]
+    cls.add_method('GetAddress', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_const=True)
+    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4InterfaceAddress::GetBroadcast() const [member function]
+    cls.add_method('GetBroadcast', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_const=True)
+    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4InterfaceAddress::GetLocal() const [member function]
+    cls.add_method('GetLocal', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_const=True)
+    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4Mask ns3::Ipv4InterfaceAddress::GetMask() const [member function]
+    cls.add_method('GetMask', 
+                   'ns3::Ipv4Mask', 
+                   [], 
+                   is_const=True)
+    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e ns3::Ipv4InterfaceAddress::GetScope() const [member function]
+    cls.add_method('GetScope', 
+                   'ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e', 
+                   [], 
+                   is_const=True)
+    ## ipv4-interface-address.h (module 'internet'): bool ns3::Ipv4InterfaceAddress::IsInSameSubnet(ns3::Ipv4Address const b) const [member function]
+    cls.add_method('IsInSameSubnet', 
+                   'bool', 
+                   [param('ns3::Ipv4Address const', 'b')], 
+                   is_const=True)
+    ## ipv4-interface-address.h (module 'internet'): bool ns3::Ipv4InterfaceAddress::IsSecondary() const [member function]
+    cls.add_method('IsSecondary', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv4-interface-address.h (module 'internet'): void ns3::Ipv4InterfaceAddress::SetAddress(ns3::Ipv4Address address) [member function]
+    cls.add_method('SetAddress', 
+                   'void', 
+                   [param('ns3::Ipv4Address', 'address')])
+    ## ipv4-interface-address.h (module 'internet'): void ns3::Ipv4InterfaceAddress::SetBroadcast(ns3::Ipv4Address broadcast) [member function]
+    cls.add_method('SetBroadcast', 
+                   'void', 
+                   [param('ns3::Ipv4Address', 'broadcast')])
+    ## ipv4-interface-address.h (module 'internet'): void ns3::Ipv4InterfaceAddress::SetLocal(ns3::Ipv4Address local) [member function]
+    cls.add_method('SetLocal', 
+                   'void', 
+                   [param('ns3::Ipv4Address', 'local')])
+    ## ipv4-interface-address.h (module 'internet'): void ns3::Ipv4InterfaceAddress::SetMask(ns3::Ipv4Mask mask) [member function]
+    cls.add_method('SetMask', 
+                   'void', 
+                   [param('ns3::Ipv4Mask', 'mask')])
+    ## ipv4-interface-address.h (module 'internet'): void ns3::Ipv4InterfaceAddress::SetPrimary() [member function]
+    cls.add_method('SetPrimary', 
+                   'void', 
+                   [])
+    ## ipv4-interface-address.h (module 'internet'): void ns3::Ipv4InterfaceAddress::SetScope(ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e scope) [member function]
+    cls.add_method('SetScope', 
+                   'void', 
+                   [param('ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e', 'scope')])
+    ## ipv4-interface-address.h (module 'internet'): void ns3::Ipv4InterfaceAddress::SetSecondary() [member function]
+    cls.add_method('SetSecondary', 
+                   'void', 
+                   [])
+    return
+
+def register_Ns3Ipv4Mask_methods(root_module, cls):
+    cls.add_output_stream_operator()
+    cls.add_binary_comparison_operator('==')
+    cls.add_binary_comparison_operator('!=')
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask::Ipv4Mask(ns3::Ipv4Mask const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv4Mask const &', 'arg0')])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask::Ipv4Mask() [constructor]
+    cls.add_constructor([])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask::Ipv4Mask(uint32_t mask) [constructor]
+    cls.add_constructor([param('uint32_t', 'mask')])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask::Ipv4Mask(char const * mask) [constructor]
+    cls.add_constructor([param('char const *', 'mask')])
+    ## ipv4-address.h (module 'network'): uint32_t ns3::Ipv4Mask::Get() const [member function]
+    cls.add_method('Get', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): uint32_t ns3::Ipv4Mask::GetInverse() const [member function]
+    cls.add_method('GetInverse', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): static ns3::Ipv4Mask ns3::Ipv4Mask::GetLoopback() [member function]
+    cls.add_method('GetLoopback', 
+                   'ns3::Ipv4Mask', 
+                   [], 
+                   is_static=True)
+    ## ipv4-address.h (module 'network'): static ns3::Ipv4Mask ns3::Ipv4Mask::GetOnes() [member function]
+    cls.add_method('GetOnes', 
+                   'ns3::Ipv4Mask', 
+                   [], 
+                   is_static=True)
+    ## ipv4-address.h (module 'network'): uint16_t ns3::Ipv4Mask::GetPrefixLength() const [member function]
+    cls.add_method('GetPrefixLength', 
+                   'uint16_t', 
+                   [], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): static ns3::Ipv4Mask ns3::Ipv4Mask::GetZero() [member function]
+    cls.add_method('GetZero', 
+                   'ns3::Ipv4Mask', 
+                   [], 
+                   is_static=True)
+    ## ipv4-address.h (module 'network'): bool ns3::Ipv4Mask::IsMatch(ns3::Ipv4Address a, ns3::Ipv4Address b) const [member function]
+    cls.add_method('IsMatch', 
+                   'bool', 
+                   [param('ns3::Ipv4Address', 'a'), param('ns3::Ipv4Address', 'b')], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): void ns3::Ipv4Mask::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): void ns3::Ipv4Mask::Set(uint32_t mask) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('uint32_t', 'mask')])
+    return
+
+def register_Ns3Ipv6Address_methods(root_module, cls):
+    cls.add_output_stream_operator()
+    cls.add_binary_comparison_operator('==')
+    cls.add_binary_comparison_operator('!=')
+    cls.add_binary_comparison_operator('<')
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address() [constructor]
+    cls.add_constructor([])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address(char const * address) [constructor]
+    cls.add_constructor([param('char const *', 'address')])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address(uint8_t * address) [constructor]
+    cls.add_constructor([param('uint8_t *', 'address')])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address(ns3::Ipv6Address const & addr) [constructor]
+    cls.add_constructor([param('ns3::Ipv6Address const &', 'addr')])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address(ns3::Ipv6Address const * addr) [constructor]
+    cls.add_constructor([param('ns3::Ipv6Address const *', 'addr')])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6Address::CombinePrefix(ns3::Ipv6Prefix const & prefix) const [member function]
+    cls.add_method('CombinePrefix', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Ipv6Prefix const &', 'prefix')], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::ConvertFrom(ns3::Address const & address) [member function]
+    cls.add_method('ConvertFrom', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Address const &', 'address')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::Deserialize(uint8_t const * buf) [member function]
+    cls.add_method('Deserialize', 
+                   'ns3::Ipv6Address', 
+                   [param('uint8_t const *', 'buf')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetAllHostsMulticast() [member function]
+    cls.add_method('GetAllHostsMulticast', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetAllNodesMulticast() [member function]
+    cls.add_method('GetAllNodesMulticast', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetAllRoutersMulticast() [member function]
+    cls.add_method('GetAllRoutersMulticast', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetAny() [member function]
+    cls.add_method('GetAny', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): void ns3::Ipv6Address::GetBytes(uint8_t * buf) const [member function]
+    cls.add_method('GetBytes', 
+                   'void', 
+                   [param('uint8_t *', 'buf')], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): ns3::Ipv4Address ns3::Ipv6Address::GetIpv4MappedAddress() const [member function]
+    cls.add_method('GetIpv4MappedAddress', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetLoopback() [member function]
+    cls.add_method('GetLoopback', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetOnes() [member function]
+    cls.add_method('GetOnes', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::GetZero() [member function]
+    cls.add_method('GetZero', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::HasPrefix(ns3::Ipv6Prefix const & prefix) const [member function]
+    cls.add_method('HasPrefix', 
+                   'bool', 
+                   [param('ns3::Ipv6Prefix const &', 'prefix')], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsAllNodesMulticast() const [member function]
+    cls.add_method('IsAllNodesMulticast', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsAllRoutersMulticast() const [member function]
+    cls.add_method('IsAllRoutersMulticast', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsAny() const [member function]
+    cls.add_method('IsAny', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsDocumentation() const [member function]
+    cls.add_method('IsDocumentation', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsInitialized() const [member function]
+    cls.add_method('IsInitialized', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsIpv4MappedAddress() const [member function]
+    cls.add_method('IsIpv4MappedAddress', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsLinkLocal() const [member function]
+    cls.add_method('IsLinkLocal', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsLinkLocalMulticast() const [member function]
+    cls.add_method('IsLinkLocalMulticast', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsLocalhost() const [member function]
+    cls.add_method('IsLocalhost', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): static bool ns3::Ipv6Address::IsMatchingType(ns3::Address const & address) [member function]
+    cls.add_method('IsMatchingType', 
+                   'bool', 
+                   [param('ns3::Address const &', 'address')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsMulticast() const [member function]
+    cls.add_method('IsMulticast', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::IsSolicitedMulticast() const [member function]
+    cls.add_method('IsSolicitedMulticast', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Address addr, ns3::Ipv6Address prefix) [member function]
+    cls.add_method('MakeAutoconfiguredAddress', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Address addr, ns3::Ipv6Prefix prefix) [member function]
+    cls.add_method('MakeAutoconfiguredAddress', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Address', 'addr'), param('ns3::Ipv6Prefix', 'prefix')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Mac16Address addr, ns3::Ipv6Address prefix) [member function]
+    cls.add_method('MakeAutoconfiguredAddress', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Mac16Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Mac48Address addr, ns3::Ipv6Address prefix) [member function]
+    cls.add_method('MakeAutoconfiguredAddress', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Mac48Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Mac64Address addr, ns3::Ipv6Address prefix) [member function]
+    cls.add_method('MakeAutoconfiguredAddress', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Mac64Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Mac8Address addr, ns3::Ipv6Address prefix) [member function]
+    cls.add_method('MakeAutoconfiguredAddress', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Mac8Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Address mac) [member function]
+    cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Address', 'mac')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Mac16Address mac) [member function]
+    cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Mac16Address', 'mac')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Mac48Address mac) [member function]
+    cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Mac48Address', 'mac')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Mac64Address mac) [member function]
+    cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Mac64Address', 'mac')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Mac8Address mac) [member function]
+    cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Mac8Address', 'mac')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeIpv4MappedAddress(ns3::Ipv4Address addr) [member function]
+    cls.add_method('MakeIpv4MappedAddress', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Ipv4Address', 'addr')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeSolicitedAddress(ns3::Ipv6Address addr) [member function]
+    cls.add_method('MakeSolicitedAddress', 
+                   'ns3::Ipv6Address', 
+                   [param('ns3::Ipv6Address', 'addr')], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): void ns3::Ipv6Address::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): void ns3::Ipv6Address::Serialize(uint8_t * buf) const [member function]
+    cls.add_method('Serialize', 
+                   'void', 
+                   [param('uint8_t *', 'buf')], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): void ns3::Ipv6Address::Set(char const * address) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('char const *', 'address')])
+    ## ipv6-address.h (module 'network'): void ns3::Ipv6Address::Set(uint8_t * address) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('uint8_t *', 'address')])
+    return
+
+def register_Ns3Ipv6AddressHash_methods(root_module, cls):
+    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressHash::Ipv6AddressHash() [constructor]
+    cls.add_constructor([])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressHash::Ipv6AddressHash(ns3::Ipv6AddressHash const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv6AddressHash const &', 'arg0')])
+    ## ipv6-address.h (module 'network'): size_t ns3::Ipv6AddressHash::operator()(ns3::Ipv6Address const & x) const [member operator]
+    cls.add_method('operator()', 
+                   'size_t', 
+                   [param('ns3::Ipv6Address const &', 'x')], 
+                   custom_name='__call__', is_const=True)
+    return
+
+def register_Ns3Ipv6InterfaceAddress_methods(root_module, cls):
+    cls.add_output_stream_operator()
+    cls.add_binary_comparison_operator('==')
+    cls.add_binary_comparison_operator('!=')
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress::Ipv6InterfaceAddress() [constructor]
+    cls.add_constructor([])
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress::Ipv6InterfaceAddress(ns3::Ipv6Address address) [constructor]
+    cls.add_constructor([param('ns3::Ipv6Address', 'address')])
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress::Ipv6InterfaceAddress(ns3::Ipv6Address address, ns3::Ipv6Prefix prefix) [constructor]
+    cls.add_constructor([param('ns3::Ipv6Address', 'address'), param('ns3::Ipv6Prefix', 'prefix')])
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress::Ipv6InterfaceAddress(ns3::Ipv6Address address, ns3::Ipv6Prefix prefix, bool onLink) [constructor]
+    cls.add_constructor([param('ns3::Ipv6Address', 'address'), param('ns3::Ipv6Prefix', 'prefix'), param('bool', 'onLink')])
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress::Ipv6InterfaceAddress(ns3::Ipv6InterfaceAddress const & o) [constructor]
+    cls.add_constructor([param('ns3::Ipv6InterfaceAddress const &', 'o')])
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6Address ns3::Ipv6InterfaceAddress::GetAddress() const [member function]
+    cls.add_method('GetAddress', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   is_const=True)
+    ## ipv6-interface-address.h (module 'internet'): uint32_t ns3::Ipv6InterfaceAddress::GetNsDadUid() const [member function]
+    cls.add_method('GetNsDadUid', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## ipv6-interface-address.h (module 'internet'): bool ns3::Ipv6InterfaceAddress::GetOnLink() const [member function]
+    cls.add_method('GetOnLink', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6Prefix ns3::Ipv6InterfaceAddress::GetPrefix() const [member function]
+    cls.add_method('GetPrefix', 
+                   'ns3::Ipv6Prefix', 
+                   [], 
+                   is_const=True)
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress::Scope_e ns3::Ipv6InterfaceAddress::GetScope() const [member function]
+    cls.add_method('GetScope', 
+                   'ns3::Ipv6InterfaceAddress::Scope_e', 
+                   [], 
+                   is_const=True)
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress::State_e ns3::Ipv6InterfaceAddress::GetState() const [member function]
+    cls.add_method('GetState', 
+                   'ns3::Ipv6InterfaceAddress::State_e', 
+                   [], 
+                   is_const=True)
+    ## ipv6-interface-address.h (module 'internet'): bool ns3::Ipv6InterfaceAddress::IsInSameSubnet(ns3::Ipv6Address b) const [member function]
+    cls.add_method('IsInSameSubnet', 
+                   'bool', 
+                   [param('ns3::Ipv6Address', 'b')], 
+                   is_const=True)
+    ## ipv6-interface-address.h (module 'internet'): void ns3::Ipv6InterfaceAddress::SetAddress(ns3::Ipv6Address address) [member function]
+    cls.add_method('SetAddress', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'address')])
+    ## ipv6-interface-address.h (module 'internet'): void ns3::Ipv6InterfaceAddress::SetNsDadUid(uint32_t uid) [member function]
+    cls.add_method('SetNsDadUid', 
+                   'void', 
+                   [param('uint32_t', 'uid')])
+    ## ipv6-interface-address.h (module 'internet'): void ns3::Ipv6InterfaceAddress::SetOnLink(bool onLink) [member function]
+    cls.add_method('SetOnLink', 
+                   'void', 
+                   [param('bool', 'onLink')])
+    ## ipv6-interface-address.h (module 'internet'): void ns3::Ipv6InterfaceAddress::SetScope(ns3::Ipv6InterfaceAddress::Scope_e scope) [member function]
+    cls.add_method('SetScope', 
+                   'void', 
+                   [param('ns3::Ipv6InterfaceAddress::Scope_e', 'scope')])
+    ## ipv6-interface-address.h (module 'internet'): void ns3::Ipv6InterfaceAddress::SetState(ns3::Ipv6InterfaceAddress::State_e state) [member function]
+    cls.add_method('SetState', 
+                   'void', 
+                   [param('ns3::Ipv6InterfaceAddress::State_e', 'state')])
+    return
+
+def register_Ns3Ipv6Prefix_methods(root_module, cls):
+    cls.add_output_stream_operator()
+    cls.add_binary_comparison_operator('==')
+    cls.add_binary_comparison_operator('!=')
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix() [constructor]
+    cls.add_constructor([])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(uint8_t * prefix) [constructor]
+    cls.add_constructor([param('uint8_t *', 'prefix')])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(char const * prefix) [constructor]
+    cls.add_constructor([param('char const *', 'prefix')])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(uint8_t * prefix, uint8_t prefixLength) [constructor]
+    cls.add_constructor([param('uint8_t *', 'prefix'), param('uint8_t', 'prefixLength')])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(char const * prefix, uint8_t prefixLength) [constructor]
+    cls.add_constructor([param('char const *', 'prefix'), param('uint8_t', 'prefixLength')])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(uint8_t prefix) [constructor]
+    cls.add_constructor([param('uint8_t', 'prefix')])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(ns3::Ipv6Prefix const & prefix) [constructor]
+    cls.add_constructor([param('ns3::Ipv6Prefix const &', 'prefix')])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(ns3::Ipv6Prefix const * prefix) [constructor]
+    cls.add_constructor([param('ns3::Ipv6Prefix const *', 'prefix')])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6Prefix::ConvertToIpv6Address() const [member function]
+    cls.add_method('ConvertToIpv6Address', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): void ns3::Ipv6Prefix::GetBytes(uint8_t * buf) const [member function]
+    cls.add_method('GetBytes', 
+                   'void', 
+                   [param('uint8_t *', 'buf')], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Prefix ns3::Ipv6Prefix::GetLoopback() [member function]
+    cls.add_method('GetLoopback', 
+                   'ns3::Ipv6Prefix', 
+                   [], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): uint8_t ns3::Ipv6Prefix::GetMinimumPrefixLength() const [member function]
+    cls.add_method('GetMinimumPrefixLength', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Prefix ns3::Ipv6Prefix::GetOnes() [member function]
+    cls.add_method('GetOnes', 
+                   'ns3::Ipv6Prefix', 
+                   [], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): uint8_t ns3::Ipv6Prefix::GetPrefixLength() const [member function]
+    cls.add_method('GetPrefixLength', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): static ns3::Ipv6Prefix ns3::Ipv6Prefix::GetZero() [member function]
+    cls.add_method('GetZero', 
+                   'ns3::Ipv6Prefix', 
+                   [], 
+                   is_static=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6Prefix::IsMatch(ns3::Ipv6Address a, ns3::Ipv6Address b) const [member function]
+    cls.add_method('IsMatch', 
+                   'bool', 
+                   [param('ns3::Ipv6Address', 'a'), param('ns3::Ipv6Address', 'b')], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): void ns3::Ipv6Prefix::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): void ns3::Ipv6Prefix::SetPrefixLength(uint8_t prefixLength) [member function]
+    cls.add_method('SetPrefixLength', 
+                   'void', 
+                   [param('uint8_t', 'prefixLength')])
+    return
+
+def register_Ns3LogComponent_methods(root_module, cls):
+    ## log.h (module 'core'): ns3::LogComponent::LogComponent(ns3::LogComponent const & arg0) [constructor]
+    cls.add_constructor([param('ns3::LogComponent const &', 'arg0')])
+    ## log.h (module 'core'): ns3::LogComponent::LogComponent(std::string const & name, std::string const & file, ns3::LogLevel const mask=::ns3::LogLevel::LOG_NONE) [constructor]
+    cls.add_constructor([param('std::string const &', 'name'), param('std::string const &', 'file'), param('ns3::LogLevel const', 'mask', default_value='::ns3::LogLevel::LOG_NONE')])
+    ## log.h (module 'core'): void ns3::LogComponent::Disable(ns3::LogLevel const level) [member function]
+    cls.add_method('Disable', 
+                   'void', 
+                   [param('ns3::LogLevel const', 'level')])
+    ## log.h (module 'core'): void ns3::LogComponent::Enable(ns3::LogLevel const level) [member function]
+    cls.add_method('Enable', 
+                   'void', 
+                   [param('ns3::LogLevel const', 'level')])
+    ## log.h (module 'core'): std::string ns3::LogComponent::File() const [member function]
+    cls.add_method('File', 
+                   'std::string', 
+                   [], 
+                   is_const=True)
+    ## log.h (module 'core'): static ns3::LogComponent::ComponentList * ns3::LogComponent::GetComponentList() [member function]
+    cls.add_method('GetComponentList', 
+                   'ns3::LogComponent::ComponentList *', 
+                   [], 
+                   is_static=True)
+    ## log.h (module 'core'): static std::string ns3::LogComponent::GetLevelLabel(ns3::LogLevel const level) [member function]
+    cls.add_method('GetLevelLabel', 
+                   'std::string', 
+                   [param('ns3::LogLevel const', 'level')], 
+                   is_static=True)
+    ## log.h (module 'core'): bool ns3::LogComponent::IsEnabled(ns3::LogLevel const level) const [member function]
+    cls.add_method('IsEnabled', 
+                   'bool', 
+                   [param('ns3::LogLevel const', 'level')], 
+                   is_const=True)
+    ## log.h (module 'core'): bool ns3::LogComponent::IsNoneEnabled() const [member function]
+    cls.add_method('IsNoneEnabled', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## log.h (module 'core'): char const * ns3::LogComponent::Name() const [member function]
+    cls.add_method('Name', 
+                   'char const *', 
+                   [], 
+                   is_const=True)
+    ## log.h (module 'core'): void ns3::LogComponent::SetMask(ns3::LogLevel const level) [member function]
+    cls.add_method('SetMask', 
+                   'void', 
+                   [param('ns3::LogLevel const', 'level')])
+    return
+
+def register_Ns3Mac48Address_methods(root_module, cls):
+    cls.add_binary_comparison_operator('==')
+    cls.add_binary_comparison_operator('!=')
+    cls.add_binary_comparison_operator('<')
+    cls.add_output_stream_operator()
+    ## mac48-address.h (module 'network'): ns3::Mac48Address::Mac48Address(ns3::Mac48Address const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Mac48Address const &', 'arg0')])
+    ## mac48-address.h (module 'network'): ns3::Mac48Address::Mac48Address() [constructor]
+    cls.add_constructor([])
+    ## mac48-address.h (module 'network'): ns3::Mac48Address::Mac48Address(char const * str) [constructor]
+    cls.add_constructor([param('char const *', 'str')])
+    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::Allocate() [member function]
+    cls.add_method('Allocate', 
+                   'ns3::Mac48Address', 
+                   [], 
+                   is_static=True)
+    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::ConvertFrom(ns3::Address const & address) [member function]
+    cls.add_method('ConvertFrom', 
+                   'ns3::Mac48Address', 
+                   [param('ns3::Address const &', 'address')], 
+                   is_static=True)
+    ## mac48-address.h (module 'network'): void ns3::Mac48Address::CopyFrom(uint8_t const * buffer) [member function]
+    cls.add_method('CopyFrom', 
+                   'void', 
+                   [param('uint8_t const *', 'buffer')])
+    ## mac48-address.h (module 'network'): void ns3::Mac48Address::CopyTo(uint8_t * buffer) const [member function]
+    cls.add_method('CopyTo', 
+                   'void', 
+                   [param('uint8_t *', 'buffer')], 
+                   is_const=True)
+    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetBroadcast() [member function]
+    cls.add_method('GetBroadcast', 
+                   'ns3::Mac48Address', 
+                   [], 
+                   is_static=True)
+    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetMulticast(ns3::Ipv4Address address) [member function]
+    cls.add_method('GetMulticast', 
+                   'ns3::Mac48Address', 
+                   [param('ns3::Ipv4Address', 'address')], 
+                   is_static=True)
+    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetMulticast(ns3::Ipv6Address address) [member function]
+    cls.add_method('GetMulticast', 
+                   'ns3::Mac48Address', 
+                   [param('ns3::Ipv6Address', 'address')], 
+                   is_static=True)
+    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetMulticast6Prefix() [member function]
+    cls.add_method('GetMulticast6Prefix', 
+                   'ns3::Mac48Address', 
+                   [], 
+                   is_static=True)
+    ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetMulticastPrefix() [member function]
+    cls.add_method('GetMulticastPrefix', 
+                   'ns3::Mac48Address', 
+                   [], 
+                   is_static=True)
+    ## mac48-address.h (module 'network'): bool ns3::Mac48Address::IsBroadcast() const [member function]
+    cls.add_method('IsBroadcast', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## mac48-address.h (module 'network'): bool ns3::Mac48Address::IsGroup() const [member function]
+    cls.add_method('IsGroup', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## mac48-address.h (module 'network'): static bool ns3::Mac48Address::IsMatchingType(ns3::Address const & address) [member function]
+    cls.add_method('IsMatchingType', 
+                   'bool', 
+                   [param('ns3::Address const &', 'address')], 
+                   is_static=True)
+    return
+
+def register_Ns3Mac8Address_methods(root_module, cls):
+    cls.add_binary_comparison_operator('<')
+    cls.add_binary_comparison_operator('==')
+    cls.add_binary_comparison_operator('!=')
+    cls.add_output_stream_operator()
+    ## mac8-address.h (module 'network'): ns3::Mac8Address::Mac8Address(ns3::Mac8Address const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Mac8Address const &', 'arg0')])
+    ## mac8-address.h (module 'network'): ns3::Mac8Address::Mac8Address() [constructor]
+    cls.add_constructor([])
+    ## mac8-address.h (module 'network'): ns3::Mac8Address::Mac8Address(uint8_t addr) [constructor]
+    cls.add_constructor([param('uint8_t', 'addr')])
+    ## mac8-address.h (module 'network'): static ns3::Mac8Address ns3::Mac8Address::Allocate() [member function]
+    cls.add_method('Allocate', 
+                   'ns3::Mac8Address', 
+                   [], 
+                   is_static=True)
+    ## mac8-address.h (module 'network'): static ns3::Mac8Address ns3::Mac8Address::ConvertFrom(ns3::Address const & address) [member function]
+    cls.add_method('ConvertFrom', 
+                   'ns3::Mac8Address', 
+                   [param('ns3::Address const &', 'address')], 
+                   is_static=True)
+    ## mac8-address.h (module 'network'): void ns3::Mac8Address::CopyFrom(uint8_t const * pBuffer) [member function]
+    cls.add_method('CopyFrom', 
+                   'void', 
+                   [param('uint8_t const *', 'pBuffer')])
+    ## mac8-address.h (module 'network'): void ns3::Mac8Address::CopyTo(uint8_t * pBuffer) const [member function]
+    cls.add_method('CopyTo', 
+                   'void', 
+                   [param('uint8_t *', 'pBuffer')], 
+                   is_const=True)
+    ## mac8-address.h (module 'network'): static ns3::Mac8Address ns3::Mac8Address::GetBroadcast() [member function]
+    cls.add_method('GetBroadcast', 
+                   'ns3::Mac8Address', 
+                   [], 
+                   is_static=True)
+    ## mac8-address.h (module 'network'): static bool ns3::Mac8Address::IsMatchingType(ns3::Address const & address) [member function]
+    cls.add_method('IsMatchingType', 
+                   'bool', 
+                   [param('ns3::Address const &', 'address')], 
+                   is_static=True)
+    return
+
+def register_Ns3NodeContainer_methods(root_module, cls):
+    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & arg0) [constructor]
+    cls.add_constructor([param('ns3::NodeContainer const &', 'arg0')])
+    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer() [constructor]
+    cls.add_constructor([])
+    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::Ptr<ns3::Node> node) [constructor]
+    cls.add_constructor([param('ns3::Ptr< ns3::Node >', 'node')])
+    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(std::string nodeName) [constructor]
+    cls.add_constructor([param('std::string', 'nodeName')])
+    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(uint32_t n, uint32_t systemId=0) [constructor]
+    cls.add_constructor([param('uint32_t', 'n'), param('uint32_t', 'systemId', default_value='0')])
+    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & a, ns3::NodeContainer const & b) [constructor]
+    cls.add_constructor([param('ns3::NodeContainer const &', 'a'), param('ns3::NodeContainer const &', 'b')])
+    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & a, ns3::NodeContainer const & b, ns3::NodeContainer const & c) [constructor]
+    cls.add_constructor([param('ns3::NodeContainer const &', 'a'), param('ns3::NodeContainer const &', 'b'), param('ns3::NodeContainer const &', 'c')])
+    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & a, ns3::NodeContainer const & b, ns3::NodeContainer const & c, ns3::NodeContainer const & d) [constructor]
+    cls.add_constructor([param('ns3::NodeContainer const &', 'a'), param('ns3::NodeContainer const &', 'b'), param('ns3::NodeContainer const &', 'c'), param('ns3::NodeContainer const &', 'd')])
+    ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & a, ns3::NodeContainer const & b, ns3::NodeContainer const & c, ns3::NodeContainer const & d, ns3::NodeContainer const & e) [constructor]
+    cls.add_constructor([param('ns3::NodeContainer const &', 'a'), param('ns3::NodeContainer const &', 'b'), param('ns3::NodeContainer const &', 'c'), param('ns3::NodeContainer const &', 'd'), param('ns3::NodeContainer const &', 'e')])
+    ## node-container.h (module 'network'): void ns3::NodeContainer::Add(ns3::NodeContainer other) [member function]
+    cls.add_method('Add', 
+                   'void', 
+                   [param('ns3::NodeContainer', 'other')])
+    ## node-container.h (module 'network'): void ns3::NodeContainer::Add(ns3::Ptr<ns3::Node> node) [member function]
+    cls.add_method('Add', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Node >', 'node')])
+    ## node-container.h (module 'network'): void ns3::NodeContainer::Add(std::string nodeName) [member function]
+    cls.add_method('Add', 
+                   'void', 
+                   [param('std::string', 'nodeName')])
+    ## node-container.h (module 'network'): ns3::NodeContainer::Iterator ns3::NodeContainer::Begin() const [member function]
+    cls.add_method('Begin', 
+                   'ns3::NodeContainer::Iterator', 
+                   [], 
+                   is_const=True)
+    ## node-container.h (module 'network'): bool ns3::NodeContainer::Contains(uint32_t id) const [member function]
+    cls.add_method('Contains', 
+                   'bool', 
+                   [param('uint32_t', 'id')], 
+                   is_const=True)
+    ## node-container.h (module 'network'): void ns3::NodeContainer::Create(uint32_t n) [member function]
+    cls.add_method('Create', 
+                   'void', 
+                   [param('uint32_t', 'n')])
+    ## node-container.h (module 'network'): void ns3::NodeContainer::Create(uint32_t n, uint32_t systemId) [member function]
+    cls.add_method('Create', 
+                   'void', 
+                   [param('uint32_t', 'n'), param('uint32_t', 'systemId')])
+    ## node-container.h (module 'network'): ns3::NodeContainer::Iterator ns3::NodeContainer::End() const [member function]
+    cls.add_method('End', 
+                   'ns3::NodeContainer::Iterator', 
+                   [], 
+                   is_const=True)
+    ## node-container.h (module 'network'): ns3::Ptr<ns3::Node> ns3::NodeContainer::Get(uint32_t i) const [member function]
+    cls.add_method('Get', 
+                   'ns3::Ptr< ns3::Node >', 
+                   [param('uint32_t', 'i')], 
+                   is_const=True)
+    ## node-container.h (module 'network'): static ns3::NodeContainer ns3::NodeContainer::GetGlobal() [member function]
+    cls.add_method('GetGlobal', 
+                   'ns3::NodeContainer', 
+                   [], 
+                   is_static=True)
+    ## node-container.h (module 'network'): uint32_t ns3::NodeContainer::GetN() const [member function]
+    cls.add_method('GetN', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    return
+
+def register_Ns3ObjectBase_methods(root_module, cls):
+    ## object-base.h (module 'core'): ns3::ObjectBase::ObjectBase() [constructor]
+    cls.add_constructor([])
+    ## object-base.h (module 'core'): ns3::ObjectBase::ObjectBase(ns3::ObjectBase const & arg0) [constructor]
+    cls.add_constructor([param('ns3::ObjectBase const &', 'arg0')])
+    ## object-base.h (module 'core'): void ns3::ObjectBase::GetAttribute(std::string name, ns3::AttributeValue & value) const [member function]
+    cls.add_method('GetAttribute', 
+                   'void', 
+                   [param('std::string', 'name'), param('ns3::AttributeValue &', 'value')], 
+                   is_const=True)
+    ## object-base.h (module 'core'): bool ns3::ObjectBase::GetAttributeFailSafe(std::string name, ns3::AttributeValue & value) const [member function]
+    cls.add_method('GetAttributeFailSafe', 
+                   'bool', 
+                   [param('std::string', 'name'), param('ns3::AttributeValue &', 'value')], 
+                   is_const=True)
+    ## object-base.h (module 'core'): ns3::TypeId ns3::ObjectBase::GetInstanceTypeId() const [member function]
+    cls.add_method('GetInstanceTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## object-base.h (module 'core'): static ns3::TypeId ns3::ObjectBase::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## object-base.h (module 'core'): void ns3::ObjectBase::SetAttribute(std::string name, ns3::AttributeValue const & value) [member function]
+    cls.add_method('SetAttribute', 
+                   'void', 
+                   [param('std::string', 'name'), param('ns3::AttributeValue const &', 'value')])
+    ## object-base.h (module 'core'): bool ns3::ObjectBase::SetAttributeFailSafe(std::string name, ns3::AttributeValue const & value) [member function]
+    cls.add_method('SetAttributeFailSafe', 
+                   'bool', 
+                   [param('std::string', 'name'), param('ns3::AttributeValue const &', 'value')])
+    ## object-base.h (module 'core'): bool ns3::ObjectBase::TraceConnect(std::string name, std::string context, ns3::CallbackBase const & cb) [member function]
+    cls.add_method('TraceConnect', 
+                   'bool', 
+                   [param('std::string', 'name'), param('std::string', 'context'), param('ns3::CallbackBase const &', 'cb')])
+    ## object-base.h (module 'core'): bool ns3::ObjectBase::TraceConnectWithoutContext(std::string name, ns3::CallbackBase const & cb) [member function]
+    cls.add_method('TraceConnectWithoutContext', 
+                   'bool', 
+                   [param('std::string', 'name'), param('ns3::CallbackBase const &', 'cb')])
+    ## object-base.h (module 'core'): bool ns3::ObjectBase::TraceDisconnect(std::string name, std::string context, ns3::CallbackBase const & cb) [member function]
+    cls.add_method('TraceDisconnect', 
+                   'bool', 
+                   [param('std::string', 'name'), param('std::string', 'context'), param('ns3::CallbackBase const &', 'cb')])
+    ## object-base.h (module 'core'): bool ns3::ObjectBase::TraceDisconnectWithoutContext(std::string name, ns3::CallbackBase const & cb) [member function]
+    cls.add_method('TraceDisconnectWithoutContext', 
+                   'bool', 
+                   [param('std::string', 'name'), param('ns3::CallbackBase const &', 'cb')])
+    ## object-base.h (module 'core'): void ns3::ObjectBase::ConstructSelf(ns3::AttributeConstructionList const & attributes) [member function]
+    cls.add_method('ConstructSelf', 
+                   'void', 
+                   [param('ns3::AttributeConstructionList const &', 'attributes')], 
+                   visibility='protected')
+    ## object-base.h (module 'core'): void ns3::ObjectBase::NotifyConstructionCompleted() [member function]
+    cls.add_method('NotifyConstructionCompleted', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    return
+
+def register_Ns3ObjectDeleter_methods(root_module, cls):
+    ## object.h (module 'core'): ns3::ObjectDeleter::ObjectDeleter() [constructor]
+    cls.add_constructor([])
+    ## object.h (module 'core'): ns3::ObjectDeleter::ObjectDeleter(ns3::ObjectDeleter const & arg0) [constructor]
+    cls.add_constructor([param('ns3::ObjectDeleter const &', 'arg0')])
+    ## object.h (module 'core'): static void ns3::ObjectDeleter::Delete(ns3::Object * object) [member function]
+    cls.add_method('Delete', 
+                   'void', 
+                   [param('ns3::Object *', 'object')], 
+                   is_static=True)
+    return
+
+def register_Ns3ObjectFactory_methods(root_module, cls):
+    cls.add_output_stream_operator()
+    ## object-factory.h (module 'core'): ns3::ObjectFactory::ObjectFactory(ns3::ObjectFactory const & arg0) [constructor]
+    cls.add_constructor([param('ns3::ObjectFactory const &', 'arg0')])
+    ## object-factory.h (module 'core'): ns3::ObjectFactory::ObjectFactory() [constructor]
+    cls.add_constructor([])
+    ## object-factory.h (module 'core'): ns3::ObjectFactory::ObjectFactory(std::string const & typeId) [constructor]
+    cls.add_constructor([param('std::string const &', 'typeId')])
+    ## object-factory.h (module 'core'): ns3::Ptr<ns3::Object> ns3::ObjectFactory::Create() const [member function]
+    cls.add_method('Create', 
+                   'ns3::Ptr< ns3::Object >', 
+                   [], 
+                   is_const=True)
+    ## object-factory.h (module 'core'): ns3::TypeId ns3::ObjectFactory::GetTypeId() const [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True)
+    ## object-factory.h (module 'core'): bool ns3::ObjectFactory::IsTypeIdSet() const [member function]
+    cls.add_method('IsTypeIdSet', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## object-factory.h (module 'core'): void ns3::ObjectFactory::Set() [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [])
+    ## object-factory.h (module 'core'): void ns3::ObjectFactory::SetTypeId(ns3::TypeId tid) [member function]
+    cls.add_method('SetTypeId', 
+                   'void', 
+                   [param('ns3::TypeId', 'tid')])
+    ## object-factory.h (module 'core'): void ns3::ObjectFactory::SetTypeId(char const * tid) [member function]
+    cls.add_method('SetTypeId', 
+                   'void', 
+                   [param('char const *', 'tid')])
+    ## object-factory.h (module 'core'): void ns3::ObjectFactory::SetTypeId(std::string tid) [member function]
+    cls.add_method('SetTypeId', 
+                   'void', 
+                   [param('std::string', 'tid')])
+    return
+
+def register_Ns3PacketMetadata_methods(root_module, cls):
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::PacketMetadata(uint64_t uid, uint32_t size) [constructor]
+    cls.add_constructor([param('uint64_t', 'uid'), param('uint32_t', 'size')])
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::PacketMetadata(ns3::PacketMetadata const & o) [constructor]
+    cls.add_constructor([param('ns3::PacketMetadata const &', 'o')])
+    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::AddAtEnd(ns3::PacketMetadata const & o) [member function]
+    cls.add_method('AddAtEnd', 
+                   'void', 
+                   [param('ns3::PacketMetadata const &', 'o')])
+    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::AddHeader(ns3::Header const & header, uint32_t size) [member function]
+    cls.add_method('AddHeader', 
+                   'void', 
+                   [param('ns3::Header const &', 'header'), param('uint32_t', 'size')])
+    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::AddPaddingAtEnd(uint32_t end) [member function]
+    cls.add_method('AddPaddingAtEnd', 
+                   'void', 
+                   [param('uint32_t', 'end')])
+    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::AddTrailer(ns3::Trailer const & trailer, uint32_t size) [member function]
+    cls.add_method('AddTrailer', 
+                   'void', 
+                   [param('ns3::Trailer const &', 'trailer'), param('uint32_t', 'size')])
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator ns3::PacketMetadata::BeginItem(ns3::Buffer buffer) const [member function]
+    cls.add_method('BeginItem', 
+                   'ns3::PacketMetadata::ItemIterator', 
+                   [param('ns3::Buffer', 'buffer')], 
+                   is_const=True)
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata ns3::PacketMetadata::CreateFragment(uint32_t start, uint32_t end) const [member function]
+    cls.add_method('CreateFragment', 
+                   'ns3::PacketMetadata', 
+                   [param('uint32_t', 'start'), param('uint32_t', 'end')], 
+                   is_const=True)
+    ## packet-metadata.h (module 'network'): uint32_t ns3::PacketMetadata::Deserialize(uint8_t const * buffer, uint32_t size) [member function]
+    cls.add_method('Deserialize', 
+                   'uint32_t', 
+                   [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
+    ## packet-metadata.h (module 'network'): static void ns3::PacketMetadata::Enable() [member function]
+    cls.add_method('Enable', 
+                   'void', 
+                   [], 
+                   is_static=True)
+    ## packet-metadata.h (module 'network'): static void ns3::PacketMetadata::EnableChecking() [member function]
+    cls.add_method('EnableChecking', 
+                   'void', 
+                   [], 
+                   is_static=True)
+    ## packet-metadata.h (module 'network'): uint32_t ns3::PacketMetadata::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## packet-metadata.h (module 'network'): uint64_t ns3::PacketMetadata::GetUid() const [member function]
+    cls.add_method('GetUid', 
+                   'uint64_t', 
+                   [], 
+                   is_const=True)
+    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::RemoveAtEnd(uint32_t end) [member function]
+    cls.add_method('RemoveAtEnd', 
+                   'void', 
+                   [param('uint32_t', 'end')])
+    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::RemoveAtStart(uint32_t start) [member function]
+    cls.add_method('RemoveAtStart', 
+                   'void', 
+                   [param('uint32_t', 'start')])
+    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::RemoveHeader(ns3::Header const & header, uint32_t size) [member function]
+    cls.add_method('RemoveHeader', 
+                   'void', 
+                   [param('ns3::Header const &', 'header'), param('uint32_t', 'size')])
+    ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::RemoveTrailer(ns3::Trailer const & trailer, uint32_t size) [member function]
+    cls.add_method('RemoveTrailer', 
+                   'void', 
+                   [param('ns3::Trailer const &', 'trailer'), param('uint32_t', 'size')])
+    ## packet-metadata.h (module 'network'): uint32_t ns3::PacketMetadata::Serialize(uint8_t * buffer, uint32_t maxSize) const [member function]
+    cls.add_method('Serialize', 
+                   'uint32_t', 
+                   [param('uint8_t *', 'buffer'), param('uint32_t', 'maxSize')], 
+                   is_const=True)
+    return
+
+def register_Ns3PacketMetadataItem_methods(root_module, cls):
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::Item() [constructor]
+    cls.add_constructor([])
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::Item(ns3::PacketMetadata::Item const & arg0) [constructor]
+    cls.add_constructor([param('ns3::PacketMetadata::Item const &', 'arg0')])
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::current [variable]
+    cls.add_instance_attribute('current', 'ns3::Buffer::Iterator', is_const=False)
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::currentSize [variable]
+    cls.add_instance_attribute('currentSize', 'uint32_t', is_const=False)
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::currentTrimedFromEnd [variable]
+    cls.add_instance_attribute('currentTrimedFromEnd', 'uint32_t', is_const=False)
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::currentTrimedFromStart [variable]
+    cls.add_instance_attribute('currentTrimedFromStart', 'uint32_t', is_const=False)
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::isFragment [variable]
+    cls.add_instance_attribute('isFragment', 'bool', is_const=False)
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::tid [variable]
+    cls.add_instance_attribute('tid', 'ns3::TypeId', is_const=False)
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::type [variable]
+    cls.add_instance_attribute('type', 'ns3::PacketMetadata::Item::ItemType', is_const=False)
+    return
+
+def register_Ns3PacketMetadataItemIterator_methods(root_module, cls):
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator::ItemIterator(ns3::PacketMetadata::ItemIterator const & arg0) [constructor]
+    cls.add_constructor([param('ns3::PacketMetadata::ItemIterator const &', 'arg0')])
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator::ItemIterator(ns3::PacketMetadata const * metadata, ns3::Buffer buffer) [constructor]
+    cls.add_constructor([param('ns3::PacketMetadata const *', 'metadata'), param('ns3::Buffer', 'buffer')])
+    ## packet-metadata.h (module 'network'): bool ns3::PacketMetadata::ItemIterator::HasNext() const [member function]
+    cls.add_method('HasNext', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item ns3::PacketMetadata::ItemIterator::Next() [member function]
+    cls.add_method('Next', 
+                   'ns3::PacketMetadata::Item', 
+                   [])
+    return
+
+def register_Ns3PacketTagIterator_methods(root_module, cls):
+    ## packet.h (module 'network'): ns3::PacketTagIterator::PacketTagIterator(ns3::PacketTagIterator const & arg0) [constructor]
+    cls.add_constructor([param('ns3::PacketTagIterator const &', 'arg0')])
+    ## packet.h (module 'network'): bool ns3::PacketTagIterator::HasNext() const [member function]
+    cls.add_method('HasNext', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## packet.h (module 'network'): ns3::PacketTagIterator::Item ns3::PacketTagIterator::Next() [member function]
+    cls.add_method('Next', 
+                   'ns3::PacketTagIterator::Item', 
+                   [])
+    return
+
+def register_Ns3PacketTagIteratorItem_methods(root_module, cls):
+    ## packet.h (module 'network'): ns3::PacketTagIterator::Item::Item(ns3::PacketTagIterator::Item const & arg0) [constructor]
+    cls.add_constructor([param('ns3::PacketTagIterator::Item const &', 'arg0')])
+    ## packet.h (module 'network'): void ns3::PacketTagIterator::Item::GetTag(ns3::Tag & tag) const [member function]
+    cls.add_method('GetTag', 
+                   'void', 
+                   [param('ns3::Tag &', 'tag')], 
+                   is_const=True)
+    ## packet.h (module 'network'): ns3::TypeId ns3::PacketTagIterator::Item::GetTypeId() const [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True)
+    return
+
+def register_Ns3PacketTagList_methods(root_module, cls):
+    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::PacketTagList() [constructor]
+    cls.add_constructor([])
+    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::PacketTagList(ns3::PacketTagList const & o) [constructor]
+    cls.add_constructor([param('ns3::PacketTagList const &', 'o')])
+    ## packet-tag-list.h (module 'network'): void ns3::PacketTagList::Add(ns3::Tag const & tag) const [member function]
+    cls.add_method('Add', 
+                   'void', 
+                   [param('ns3::Tag const &', 'tag')], 
+                   is_const=True)
+    ## packet-tag-list.h (module 'network'): uint32_t ns3::PacketTagList::Deserialize(uint32_t const * buffer, uint32_t size) [member function]
+    cls.add_method('Deserialize', 
+                   'uint32_t', 
+                   [param('uint32_t const *', 'buffer'), param('uint32_t', 'size')])
+    ## packet-tag-list.h (module 'network'): uint32_t ns3::PacketTagList::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData const * ns3::PacketTagList::Head() const [member function]
+    cls.add_method('Head', 
+                   'ns3::PacketTagList::TagData const *', 
+                   [], 
+                   is_const=True)
+    ## packet-tag-list.h (module 'network'): bool ns3::PacketTagList::Peek(ns3::Tag & tag) const [member function]
+    cls.add_method('Peek', 
+                   'bool', 
+                   [param('ns3::Tag &', 'tag')], 
+                   is_const=True)
+    ## packet-tag-list.h (module 'network'): bool ns3::PacketTagList::Remove(ns3::Tag & tag) [member function]
+    cls.add_method('Remove', 
+                   'bool', 
+                   [param('ns3::Tag &', 'tag')])
+    ## packet-tag-list.h (module 'network'): void ns3::PacketTagList::RemoveAll() [member function]
+    cls.add_method('RemoveAll', 
+                   'void', 
+                   [])
+    ## packet-tag-list.h (module 'network'): bool ns3::PacketTagList::Replace(ns3::Tag & tag) [member function]
+    cls.add_method('Replace', 
+                   'bool', 
+                   [param('ns3::Tag &', 'tag')])
+    ## packet-tag-list.h (module 'network'): uint32_t ns3::PacketTagList::Serialize(uint32_t * buffer, uint32_t maxSize) const [member function]
+    cls.add_method('Serialize', 
+                   'uint32_t', 
+                   [param('uint32_t *', 'buffer'), param('uint32_t', 'maxSize')], 
+                   is_const=True)
+    return
+
+def register_Ns3PacketTagListTagData_methods(root_module, cls):
+    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::TagData() [constructor]
+    cls.add_constructor([])
+    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::TagData(ns3::PacketTagList::TagData const & arg0) [constructor]
+    cls.add_constructor([param('ns3::PacketTagList::TagData const &', 'arg0')])
+    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::count [variable]
+    cls.add_instance_attribute('count', 'uint32_t', is_const=False)
+    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::data [variable]
+    cls.add_instance_attribute('data', 'uint8_t [ 1 ]', is_const=False)
+    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::next [variable]
+    cls.add_instance_attribute('next', 'ns3::PacketTagList::TagData *', is_const=False)
+    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::size [variable]
+    cls.add_instance_attribute('size', 'uint32_t', is_const=False)
+    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::tid [variable]
+    cls.add_instance_attribute('tid', 'ns3::TypeId', is_const=False)
+    return
+
+def register_Ns3ParameterLogger_methods(root_module, cls):
+    ## log.h (module 'core'): ns3::ParameterLogger::ParameterLogger(ns3::ParameterLogger const & arg0) [constructor]
+    cls.add_constructor([param('ns3::ParameterLogger const &', 'arg0')])
+    ## log.h (module 'core'): ns3::ParameterLogger::ParameterLogger(std::ostream & os) [constructor]
+    cls.add_constructor([param('std::ostream &', 'os')])
+    return
+
+def register_Ns3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter>::SimpleRefCount(ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter > const &', 'o')])
+    return
+
+def register_Ns3Simulator_methods(root_module, cls):
+    ## simulator.h (module 'core'): ns3::Simulator::Simulator(ns3::Simulator const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Simulator const &', 'arg0')])
+    ## simulator.h (module 'core'): static void ns3::Simulator::Cancel(ns3::EventId const & id) [member function]
+    cls.add_method('Cancel', 
+                   'void', 
+                   [param('ns3::EventId const &', 'id')], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static void ns3::Simulator::Destroy() [member function]
+    cls.add_method('Destroy', 
+                   'void', 
+                   [], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static uint32_t ns3::Simulator::GetContext() [member function]
+    cls.add_method('GetContext', 
+                   'uint32_t', 
+                   [], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static ns3::Time ns3::Simulator::GetDelayLeft(ns3::EventId const & id) [member function]
+    cls.add_method('GetDelayLeft', 
+                   'ns3::Time', 
+                   [param('ns3::EventId const &', 'id')], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static uint64_t ns3::Simulator::GetEventCount() [member function]
+    cls.add_method('GetEventCount', 
+                   'uint64_t', 
+                   [], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static ns3::Ptr<ns3::SimulatorImpl> ns3::Simulator::GetImplementation() [member function]
+    cls.add_method('GetImplementation', 
+                   'ns3::Ptr< ns3::SimulatorImpl >', 
+                   [], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static ns3::Time ns3::Simulator::GetMaximumSimulationTime() [member function]
+    cls.add_method('GetMaximumSimulationTime', 
+                   'ns3::Time', 
+                   [], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static uint32_t ns3::Simulator::GetSystemId() [member function]
+    cls.add_method('GetSystemId', 
+                   'uint32_t', 
+                   [], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static bool ns3::Simulator::IsExpired(ns3::EventId const & id) [member function]
+    cls.add_method('IsExpired', 
+                   'bool', 
+                   [param('ns3::EventId const &', 'id')], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static bool ns3::Simulator::IsFinished() [member function]
+    cls.add_method('IsFinished', 
+                   'bool', 
+                   [], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static ns3::Time ns3::Simulator::Now() [member function]
+    cls.add_method('Now', 
+                   'ns3::Time', 
+                   [], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static void ns3::Simulator::Remove(ns3::EventId const & id) [member function]
+    cls.add_method('Remove', 
+                   'void', 
+                   [param('ns3::EventId const &', 'id')], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static void ns3::Simulator::SetImplementation(ns3::Ptr<ns3::SimulatorImpl> impl) [member function]
+    cls.add_method('SetImplementation', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::SimulatorImpl >', 'impl')], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static void ns3::Simulator::SetScheduler(ns3::ObjectFactory schedulerFactory) [member function]
+    cls.add_method('SetScheduler', 
+                   'void', 
+                   [param('ns3::ObjectFactory', 'schedulerFactory')], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static void ns3::Simulator::Stop() [member function]
+    cls.add_method('Stop', 
+                   'void', 
+                   [], 
+                   is_static=True)
+    ## simulator.h (module 'core'): static void ns3::Simulator::Stop(ns3::Time const & delay) [member function]
+    cls.add_method('Stop', 
+                   'void', 
+                   [param('ns3::Time const &', 'delay')], 
+                   is_static=True)
+    return
+
+def register_Ns3Tag_methods(root_module, cls):
+    ## tag.h (module 'network'): ns3::Tag::Tag() [constructor]
+    cls.add_constructor([])
+    ## tag.h (module 'network'): ns3::Tag::Tag(ns3::Tag const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Tag const &', 'arg0')])
+    ## tag.h (module 'network'): void ns3::Tag::Deserialize(ns3::TagBuffer i) [member function]
+    cls.add_method('Deserialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'i')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## tag.h (module 'network'): uint32_t ns3::Tag::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## tag.h (module 'network'): static ns3::TypeId ns3::Tag::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## tag.h (module 'network'): void ns3::Tag::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## tag.h (module 'network'): void ns3::Tag::Serialize(ns3::TagBuffer i) const [member function]
+    cls.add_method('Serialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'i')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3TagBuffer_methods(root_module, cls):
+    ## tag-buffer.h (module 'network'): ns3::TagBuffer::TagBuffer(ns3::TagBuffer const & arg0) [constructor]
+    cls.add_constructor([param('ns3::TagBuffer const &', 'arg0')])
+    ## tag-buffer.h (module 'network'): ns3::TagBuffer::TagBuffer(uint8_t * start, uint8_t * end) [constructor]
+    cls.add_constructor([param('uint8_t *', 'start'), param('uint8_t *', 'end')])
+    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::CopyFrom(ns3::TagBuffer o) [member function]
+    cls.add_method('CopyFrom', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'o')])
+    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::Read(uint8_t * buffer, uint32_t size) [member function]
+    cls.add_method('Read', 
+                   'void', 
+                   [param('uint8_t *', 'buffer'), param('uint32_t', 'size')])
+    ## tag-buffer.h (module 'network'): double ns3::TagBuffer::ReadDouble() [member function]
+    cls.add_method('ReadDouble', 
+                   'double', 
+                   [])
+    ## tag-buffer.h (module 'network'): uint16_t ns3::TagBuffer::ReadU16() [member function]
+    cls.add_method('ReadU16', 
+                   'uint16_t', 
+                   [])
+    ## tag-buffer.h (module 'network'): uint32_t ns3::TagBuffer::ReadU32() [member function]
+    cls.add_method('ReadU32', 
+                   'uint32_t', 
+                   [])
+    ## tag-buffer.h (module 'network'): uint64_t ns3::TagBuffer::ReadU64() [member function]
+    cls.add_method('ReadU64', 
+                   'uint64_t', 
+                   [])
+    ## tag-buffer.h (module 'network'): uint8_t ns3::TagBuffer::ReadU8() [member function]
+    cls.add_method('ReadU8', 
+                   'uint8_t', 
+                   [])
+    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::TrimAtEnd(uint32_t trim) [member function]
+    cls.add_method('TrimAtEnd', 
+                   'void', 
+                   [param('uint32_t', 'trim')])
+    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::Write(uint8_t const * buffer, uint32_t size) [member function]
+    cls.add_method('Write', 
+                   'void', 
+                   [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
+    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteDouble(double v) [member function]
+    cls.add_method('WriteDouble', 
+                   'void', 
+                   [param('double', 'v')])
+    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU16(uint16_t v) [member function]
+    cls.add_method('WriteU16', 
+                   'void', 
+                   [param('uint16_t', 'v')])
+    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU32(uint32_t v) [member function]
+    cls.add_method('WriteU32', 
+                   'void', 
+                   [param('uint32_t', 'v')])
+    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU64(uint64_t v) [member function]
+    cls.add_method('WriteU64', 
+                   'void', 
+                   [param('uint64_t', 'v')])
+    ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU8(uint8_t v) [member function]
+    cls.add_method('WriteU8', 
+                   'void', 
+                   [param('uint8_t', 'v')])
+    return
+
+def register_Ns3Time_methods(root_module, cls):
+    cls.add_binary_comparison_operator('==')
+    cls.add_binary_comparison_operator('!=')
+    cls.add_binary_comparison_operator('<=')
+    cls.add_binary_comparison_operator('>=')
+    cls.add_binary_comparison_operator('<')
+    cls.add_binary_comparison_operator('>')
+    cls.add_binary_numeric_operator('+', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
+    cls.add_binary_numeric_operator('-', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
+    cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::int64x64_t const &', 'right'))
+    cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
+    cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::int64x64_t const &', 'right'))
+    cls.add_inplace_numeric_operator('+=', param('ns3::Time const &', 'right'))
+    cls.add_inplace_numeric_operator('-=', param('ns3::Time const &', 'right'))
+    cls.add_output_stream_operator()
+    ## nstime.h (module 'core'): ns3::Time::Time() [constructor]
+    cls.add_constructor([])
+    ## nstime.h (module 'core'): ns3::Time::Time(ns3::Time const & o) [constructor]
+    cls.add_constructor([param('ns3::Time const &', 'o')])
+    ## nstime.h (module 'core'): ns3::Time::Time(double v) [constructor]
+    cls.add_constructor([param('double', 'v')])
+    ## nstime.h (module 'core'): ns3::Time::Time(int v) [constructor]
+    cls.add_constructor([param('int', 'v')])
+    ## nstime.h (module 'core'): ns3::Time::Time(long int v) [constructor]
+    cls.add_constructor([param('long int', 'v')])
+    ## nstime.h (module 'core'): ns3::Time::Time(long long int v) [constructor]
+    cls.add_constructor([param('long long int', 'v')])
+    ## nstime.h (module 'core'): ns3::Time::Time(unsigned int v) [constructor]
+    cls.add_constructor([param('unsigned int', 'v')])
+    ## nstime.h (module 'core'): ns3::Time::Time(long unsigned int v) [constructor]
+    cls.add_constructor([param('long unsigned int', 'v')])
+    ## nstime.h (module 'core'): ns3::Time::Time(long long unsigned int v) [constructor]
+    cls.add_constructor([param('long long unsigned int', 'v')])
+    ## nstime.h (module 'core'): ns3::Time::Time(ns3::int64x64_t const & v) [constructor]
+    cls.add_constructor([param('ns3::int64x64_t const &', 'v')])
+    ## nstime.h (module 'core'): ns3::Time::Time(std::string const & s) [constructor]
+    cls.add_constructor([param('std::string const &', 's')])
+    ## nstime.h (module 'core'): ns3::TimeWithUnit ns3::Time::As(ns3::Time::Unit const unit=::ns3::Time::Unit::AUTO) const [member function]
+    cls.add_method('As', 
+                   'ns3::TimeWithUnit', 
+                   [param('ns3::Time::Unit const', 'unit', default_value='::ns3::Time::Unit::AUTO')], 
+                   is_const=True)
+    ## nstime.h (module 'core'): int ns3::Time::Compare(ns3::Time const & o) const [member function]
+    cls.add_method('Compare', 
+                   'int', 
+                   [param('ns3::Time const &', 'o')], 
+                   is_const=True)
+    ## nstime.h (module 'core'): static ns3::Time ns3::Time::From(ns3::int64x64_t const & value) [member function]
+    cls.add_method('From', 
+                   'ns3::Time', 
+                   [param('ns3::int64x64_t const &', 'value')], 
+                   is_static=True)
+    ## nstime.h (module 'core'): static ns3::Time ns3::Time::From(ns3::int64x64_t const & value, ns3::Time::Unit unit) [member function]
+    cls.add_method('From', 
+                   'ns3::Time', 
+                   [param('ns3::int64x64_t const &', 'value'), param('ns3::Time::Unit', 'unit')], 
+                   is_static=True)
+    ## nstime.h (module 'core'): static ns3::Time ns3::Time::FromDouble(double value, ns3::Time::Unit unit) [member function]
+    cls.add_method('FromDouble', 
+                   'ns3::Time', 
+                   [param('double', 'value'), param('ns3::Time::Unit', 'unit')], 
+                   is_static=True)
+    ## nstime.h (module 'core'): static ns3::Time ns3::Time::FromInteger(uint64_t value, ns3::Time::Unit unit) [member function]
+    cls.add_method('FromInteger', 
+                   'ns3::Time', 
+                   [param('uint64_t', 'value'), param('ns3::Time::Unit', 'unit')], 
+                   is_static=True)
+    ## nstime.h (module 'core'): double ns3::Time::GetDays() const [member function]
+    cls.add_method('GetDays', 
+                   'double', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): double ns3::Time::GetDouble() const [member function]
+    cls.add_method('GetDouble', 
+                   'double', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): int64_t ns3::Time::GetFemtoSeconds() const [member function]
+    cls.add_method('GetFemtoSeconds', 
+                   'int64_t', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): double ns3::Time::GetHours() const [member function]
+    cls.add_method('GetHours', 
+                   'double', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): int64_t ns3::Time::GetInteger() const [member function]
+    cls.add_method('GetInteger', 
+                   'int64_t', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): int64_t ns3::Time::GetMicroSeconds() const [member function]
+    cls.add_method('GetMicroSeconds', 
+                   'int64_t', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): int64_t ns3::Time::GetMilliSeconds() const [member function]
+    cls.add_method('GetMilliSeconds', 
+                   'int64_t', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): double ns3::Time::GetMinutes() const [member function]
+    cls.add_method('GetMinutes', 
+                   'double', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): int64_t ns3::Time::GetNanoSeconds() const [member function]
+    cls.add_method('GetNanoSeconds', 
+                   'int64_t', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): int64_t ns3::Time::GetPicoSeconds() const [member function]
+    cls.add_method('GetPicoSeconds', 
+                   'int64_t', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): static ns3::Time::Unit ns3::Time::GetResolution() [member function]
+    cls.add_method('GetResolution', 
+                   'ns3::Time::Unit', 
+                   [], 
+                   is_static=True)
+    ## nstime.h (module 'core'): double ns3::Time::GetSeconds() const [member function]
+    cls.add_method('GetSeconds', 
+                   'double', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): int64_t ns3::Time::GetTimeStep() const [member function]
+    cls.add_method('GetTimeStep', 
+                   'int64_t', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): double ns3::Time::GetYears() const [member function]
+    cls.add_method('GetYears', 
+                   'double', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): bool ns3::Time::IsNegative() const [member function]
+    cls.add_method('IsNegative', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): bool ns3::Time::IsPositive() const [member function]
+    cls.add_method('IsPositive', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): bool ns3::Time::IsStrictlyNegative() const [member function]
+    cls.add_method('IsStrictlyNegative', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): bool ns3::Time::IsStrictlyPositive() const [member function]
+    cls.add_method('IsStrictlyPositive', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): bool ns3::Time::IsZero() const [member function]
+    cls.add_method('IsZero', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): static ns3::Time ns3::Time::Max() [member function]
+    cls.add_method('Max', 
+                   'ns3::Time', 
+                   [], 
+                   is_static=True)
+    ## nstime.h (module 'core'): static ns3::Time ns3::Time::Min() [member function]
+    cls.add_method('Min', 
+                   'ns3::Time', 
+                   [], 
+                   is_static=True)
+    ## nstime.h (module 'core'): ns3::Time ns3::Time::RoundTo(ns3::Time::Unit unit) const [member function]
+    cls.add_method('RoundTo', 
+                   'ns3::Time', 
+                   [param('ns3::Time::Unit', 'unit')], 
+                   is_const=True)
+    ## nstime.h (module 'core'): static void ns3::Time::SetResolution(ns3::Time::Unit resolution) [member function]
+    cls.add_method('SetResolution', 
+                   'void', 
+                   [param('ns3::Time::Unit', 'resolution')], 
+                   is_static=True)
+    ## nstime.h (module 'core'): static bool ns3::Time::StaticInit() [member function]
+    cls.add_method('StaticInit', 
+                   'bool', 
+                   [], 
+                   is_static=True)
+    ## nstime.h (module 'core'): ns3::int64x64_t ns3::Time::To(ns3::Time::Unit unit) const [member function]
+    cls.add_method('To', 
+                   'ns3::int64x64_t', 
+                   [param('ns3::Time::Unit', 'unit')], 
+                   is_const=True)
+    ## nstime.h (module 'core'): double ns3::Time::ToDouble(ns3::Time::Unit unit) const [member function]
+    cls.add_method('ToDouble', 
+                   'double', 
+                   [param('ns3::Time::Unit', 'unit')], 
+                   is_const=True)
+    ## nstime.h (module 'core'): int64_t ns3::Time::ToInteger(ns3::Time::Unit unit) const [member function]
+    cls.add_method('ToInteger', 
+                   'int64_t', 
+                   [param('ns3::Time::Unit', 'unit')], 
+                   is_const=True)
+    return
+
+def register_Ns3TimeWithUnit_methods(root_module, cls):
+    cls.add_output_stream_operator()
+    ## nstime.h (module 'core'): ns3::TimeWithUnit::TimeWithUnit(ns3::TimeWithUnit const & arg0) [constructor]
+    cls.add_constructor([param('ns3::TimeWithUnit const &', 'arg0')])
+    ## nstime.h (module 'core'): ns3::TimeWithUnit::TimeWithUnit(ns3::Time const time, ns3::Time::Unit const unit) [constructor]
+    cls.add_constructor([param('ns3::Time const', 'time'), param('ns3::Time::Unit const', 'unit')])
+    return
+
+def register_Ns3TypeId_methods(root_module, cls):
+    cls.add_binary_comparison_operator('==')
+    cls.add_binary_comparison_operator('!=')
+    cls.add_output_stream_operator()
+    cls.add_binary_comparison_operator('<')
+    ## type-id.h (module 'core'): ns3::TypeId::TypeId(std::string const & name) [constructor]
+    cls.add_constructor([param('std::string const &', 'name')])
+    ## type-id.h (module 'core'): ns3::TypeId::TypeId() [constructor]
+    cls.add_constructor([])
+    ## type-id.h (module 'core'): ns3::TypeId::TypeId(ns3::TypeId const & o) [constructor]
+    cls.add_constructor([param('ns3::TypeId const &', 'o')])
+    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddAttribute(std::string name, std::string help, ns3::AttributeValue const & initialValue, ns3::Ptr<const ns3::AttributeAccessor> accessor, ns3::Ptr<const ns3::AttributeChecker> checker, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SupportLevel::SUPPORTED, std::string const & supportMsg="") [member function]
+    cls.add_method('AddAttribute', 
+                   'ns3::TypeId', 
+                   [param('std::string', 'name'), param('std::string', 'help'), param('ns3::AttributeValue const &', 'initialValue'), param('ns3::Ptr< ns3::AttributeAccessor const >', 'accessor'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SupportLevel::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
+    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddAttribute(std::string name, std::string help, uint32_t flags, ns3::AttributeValue const & initialValue, ns3::Ptr<const ns3::AttributeAccessor> accessor, ns3::Ptr<const ns3::AttributeChecker> checker, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SupportLevel::SUPPORTED, std::string const & supportMsg="") [member function]
+    cls.add_method('AddAttribute', 
+                   'ns3::TypeId', 
+                   [param('std::string', 'name'), param('std::string', 'help'), param('uint32_t', 'flags'), param('ns3::AttributeValue const &', 'initialValue'), param('ns3::Ptr< ns3::AttributeAccessor const >', 'accessor'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SupportLevel::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
+    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddTraceSource(std::string name, std::string help, ns3::Ptr<const ns3::TraceSourceAccessor> accessor, std::string callback, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SupportLevel::SUPPORTED, std::string const & supportMsg="") [member function]
+    cls.add_method('AddTraceSource', 
+                   'ns3::TypeId', 
+                   [param('std::string', 'name'), param('std::string', 'help'), param('ns3::Ptr< ns3::TraceSourceAccessor const >', 'accessor'), param('std::string', 'callback'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SupportLevel::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation ns3::TypeId::GetAttribute(std::size_t i) const [member function]
+    cls.add_method('GetAttribute', 
+                   'ns3::TypeId::AttributeInformation', 
+                   [param('std::size_t', 'i')], 
+                   is_const=True)
+    ## type-id.h (module 'core'): std::string ns3::TypeId::GetAttributeFullName(std::size_t i) const [member function]
+    cls.add_method('GetAttributeFullName', 
+                   'std::string', 
+                   [param('std::size_t', 'i')], 
+                   is_const=True)
+    ## type-id.h (module 'core'): std::size_t ns3::TypeId::GetAttributeN() const [member function]
+    cls.add_method('GetAttributeN', 
+                   'std::size_t', 
+                   [], 
+                   is_const=True)
+    ## type-id.h (module 'core'): ns3::Callback<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::TypeId::GetConstructor() const [member function]
+    cls.add_method('GetConstructor', 
+                   'ns3::Callback< ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
+                   [], 
+                   is_const=True)
+    ## type-id.h (module 'core'): std::string ns3::TypeId::GetGroupName() const [member function]
+    cls.add_method('GetGroupName', 
+                   'std::string', 
+                   [], 
+                   is_const=True)
+    ## type-id.h (module 'core'): ns3::TypeId::hash_t ns3::TypeId::GetHash() const [member function]
+    cls.add_method('GetHash', 
+                   'ns3::TypeId::hash_t', 
+                   [], 
+                   is_const=True)
+    ## type-id.h (module 'core'): std::string ns3::TypeId::GetName() const [member function]
+    cls.add_method('GetName', 
+                   'std::string', 
+                   [], 
+                   is_const=True)
+    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::GetParent() const [member function]
+    cls.add_method('GetParent', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True)
+    ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::GetRegistered(uint16_t i) [member function]
+    cls.add_method('GetRegistered', 
+                   'ns3::TypeId', 
+                   [param('uint16_t', 'i')], 
+                   is_static=True)
+    ## type-id.h (module 'core'): static uint16_t ns3::TypeId::GetRegisteredN() [member function]
+    cls.add_method('GetRegisteredN', 
+                   'uint16_t', 
+                   [], 
+                   is_static=True)
+    ## type-id.h (module 'core'): std::size_t ns3::TypeId::GetSize() const [member function]
+    cls.add_method('GetSize', 
+                   'std::size_t', 
+                   [], 
+                   is_const=True)
+    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation ns3::TypeId::GetTraceSource(std::size_t i) const [member function]
+    cls.add_method('GetTraceSource', 
+                   'ns3::TypeId::TraceSourceInformation', 
+                   [param('std::size_t', 'i')], 
+                   is_const=True)
+    ## type-id.h (module 'core'): std::size_t ns3::TypeId::GetTraceSourceN() const [member function]
+    cls.add_method('GetTraceSourceN', 
+                   'std::size_t', 
+                   [], 
+                   is_const=True)
+    ## type-id.h (module 'core'): uint16_t ns3::TypeId::GetUid() const [member function]
+    cls.add_method('GetUid', 
+                   'uint16_t', 
+                   [], 
+                   is_const=True)
+    ## type-id.h (module 'core'): bool ns3::TypeId::HasConstructor() const [member function]
+    cls.add_method('HasConstructor', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## type-id.h (module 'core'): bool ns3::TypeId::HasParent() const [member function]
+    cls.add_method('HasParent', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::HideFromDocumentation() [member function]
+    cls.add_method('HideFromDocumentation', 
+                   'ns3::TypeId', 
+                   [])
+    ## type-id.h (module 'core'): bool ns3::TypeId::IsChildOf(ns3::TypeId other) const [member function]
+    cls.add_method('IsChildOf', 
+                   'bool', 
+                   [param('ns3::TypeId', 'other')], 
+                   is_const=True)
+    ## type-id.h (module 'core'): bool ns3::TypeId::LookupAttributeByName(std::string name, ns3::TypeId::AttributeInformation * info) const [member function]
+    cls.add_method('LookupAttributeByName', 
+                   'bool', 
+                   [param('std::string', 'name'), param('ns3::TypeId::AttributeInformation *', 'info', transfer_ownership=False)], 
+                   is_const=True)
+    ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::LookupByHash(ns3::TypeId::hash_t hash) [member function]
+    cls.add_method('LookupByHash', 
+                   'ns3::TypeId', 
+                   [param('uint32_t', 'hash')], 
+                   is_static=True)
+    ## type-id.h (module 'core'): static bool ns3::TypeId::LookupByHashFailSafe(ns3::TypeId::hash_t hash, ns3::TypeId * tid) [member function]
+    cls.add_method('LookupByHashFailSafe', 
+                   'bool', 
+                   [param('uint32_t', 'hash'), param('ns3::TypeId *', 'tid')], 
+                   is_static=True)
+    ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::LookupByName(std::string name) [member function]
+    cls.add_method('LookupByName', 
+                   'ns3::TypeId', 
+                   [param('std::string', 'name')], 
+                   is_static=True)
+    ## type-id.h (module 'core'): ns3::Ptr<const ns3::TraceSourceAccessor> ns3::TypeId::LookupTraceSourceByName(std::string name) const [member function]
+    cls.add_method('LookupTraceSourceByName', 
+                   'ns3::Ptr< ns3::TraceSourceAccessor const >', 
+                   [param('std::string', 'name')], 
+                   is_const=True)
+    ## type-id.h (module 'core'): ns3::Ptr<const ns3::TraceSourceAccessor> ns3::TypeId::LookupTraceSourceByName(std::string name, ns3::TypeId::TraceSourceInformation * info) const [member function]
+    cls.add_method('LookupTraceSourceByName', 
+                   'ns3::Ptr< ns3::TraceSourceAccessor const >', 
+                   [param('std::string', 'name'), param('ns3::TypeId::TraceSourceInformation *', 'info')], 
+                   is_const=True)
+    ## type-id.h (module 'core'): bool ns3::TypeId::MustHideFromDocumentation() const [member function]
+    cls.add_method('MustHideFromDocumentation', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## type-id.h (module 'core'): bool ns3::TypeId::SetAttributeInitialValue(std::size_t i, ns3::Ptr<const ns3::AttributeValue> initialValue) [member function]
+    cls.add_method('SetAttributeInitialValue', 
+                   'bool', 
+                   [param('std::size_t', 'i'), param('ns3::Ptr< ns3::AttributeValue const >', 'initialValue')])
+    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::SetGroupName(std::string groupName) [member function]
+    cls.add_method('SetGroupName', 
+                   'ns3::TypeId', 
+                   [param('std::string', 'groupName')])
+    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::SetParent(ns3::TypeId tid) [member function]
+    cls.add_method('SetParent', 
+                   'ns3::TypeId', 
+                   [param('ns3::TypeId', 'tid')])
+    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::SetSize(std::size_t size) [member function]
+    cls.add_method('SetSize', 
+                   'ns3::TypeId', 
+                   [param('std::size_t', 'size')])
+    ## type-id.h (module 'core'): void ns3::TypeId::SetUid(uint16_t uid) [member function]
+    cls.add_method('SetUid', 
+                   'void', 
+                   [param('uint16_t', 'uid')])
+    return
+
+def register_Ns3TypeIdAttributeInformation_methods(root_module, cls):
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::AttributeInformation() [constructor]
+    cls.add_constructor([])
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::AttributeInformation(ns3::TypeId::AttributeInformation const & arg0) [constructor]
+    cls.add_constructor([param('ns3::TypeId::AttributeInformation const &', 'arg0')])
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::accessor [variable]
+    cls.add_instance_attribute('accessor', 'ns3::Ptr< ns3::AttributeAccessor const >', is_const=False)
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::checker [variable]
+    cls.add_instance_attribute('checker', 'ns3::Ptr< ns3::AttributeChecker const >', is_const=False)
+    cls.add_instance_attribute('flags', 'uint32_t', is_const=False)
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::help [variable]
+    cls.add_instance_attribute('help', 'std::string', is_const=False)
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::initialValue [variable]
+    cls.add_instance_attribute('initialValue', 'ns3::Ptr< ns3::AttributeValue const >', is_const=False)
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::name [variable]
+    cls.add_instance_attribute('name', 'std::string', is_const=False)
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::originalInitialValue [variable]
+    cls.add_instance_attribute('originalInitialValue', 'ns3::Ptr< ns3::AttributeValue const >', is_const=False)
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::supportLevel [variable]
+    cls.add_instance_attribute('supportLevel', 'ns3::TypeId::SupportLevel', is_const=False)
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::supportMsg [variable]
+    cls.add_instance_attribute('supportMsg', 'std::string', is_const=False)
+    return
+
+def register_Ns3TypeIdTraceSourceInformation_methods(root_module, cls):
+    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::TraceSourceInformation() [constructor]
+    cls.add_constructor([])
+    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::TraceSourceInformation(ns3::TypeId::TraceSourceInformation const & arg0) [constructor]
+    cls.add_constructor([param('ns3::TypeId::TraceSourceInformation const &', 'arg0')])
+    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::accessor [variable]
+    cls.add_instance_attribute('accessor', 'ns3::Ptr< ns3::TraceSourceAccessor const >', is_const=False)
+    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::callback [variable]
+    cls.add_instance_attribute('callback', 'std::string', is_const=False)
+    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::help [variable]
+    cls.add_instance_attribute('help', 'std::string', is_const=False)
+    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::name [variable]
+    cls.add_instance_attribute('name', 'std::string', is_const=False)
+    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::supportLevel [variable]
+    cls.add_instance_attribute('supportLevel', 'ns3::TypeId::SupportLevel', is_const=False)
+    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::supportMsg [variable]
+    cls.add_instance_attribute('supportMsg', 'std::string', is_const=False)
+    return
+
+def register_Ns3Empty_methods(root_module, cls):
+    ## empty.h (module 'core'): ns3::empty::empty() [constructor]
+    cls.add_constructor([])
+    ## empty.h (module 'core'): ns3::empty::empty(ns3::empty const & arg0) [constructor]
+    cls.add_constructor([param('ns3::empty const &', 'arg0')])
+    return
+
+def register_Ns3Int64x64_t_methods(root_module, cls):
+    cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::int64x64_t'], param('ns3::Time const &', 'right'))
+    cls.add_binary_numeric_operator('+', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
+    cls.add_binary_numeric_operator('-', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
+    cls.add_binary_numeric_operator('*', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
+    cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
+    cls.add_binary_comparison_operator('!=')
+    cls.add_binary_comparison_operator('<=')
+    cls.add_binary_comparison_operator('>=')
+    cls.add_output_stream_operator()
+    cls.add_unary_numeric_operator('-')
+    cls.add_inplace_numeric_operator('/=', param('ns3::int64x64_t const &', 'right'))
+    cls.add_inplace_numeric_operator('*=', param('ns3::int64x64_t const &', 'right'))
+    cls.add_inplace_numeric_operator('-=', param('ns3::int64x64_t const &', 'right'))
+    cls.add_inplace_numeric_operator('+=', param('ns3::int64x64_t const &', 'right'))
+    cls.add_binary_comparison_operator('>')
+    cls.add_binary_comparison_operator('<')
+    cls.add_binary_comparison_operator('==')
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t() [constructor]
+    cls.add_constructor([])
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(double const value) [constructor]
+    cls.add_constructor([param('double const', 'value')])
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long double const value) [constructor]
+    cls.add_constructor([param('long double const', 'value')])
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(int const v) [constructor]
+    cls.add_constructor([param('int const', 'v')])
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long int const v) [constructor]
+    cls.add_constructor([param('long int const', 'v')])
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long long int const v) [constructor]
+    cls.add_constructor([param('long long int const', 'v')])
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(unsigned int const v) [constructor]
+    cls.add_constructor([param('unsigned int const', 'v')])
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long unsigned int const v) [constructor]
+    cls.add_constructor([param('long unsigned int const', 'v')])
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long long unsigned int const v) [constructor]
+    cls.add_constructor([param('long long unsigned int const', 'v')])
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(int128_t const v) [constructor]
+    cls.add_constructor([param('int128_t const', 'v')])
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(int64_t const hi, uint64_t const lo) [constructor]
+    cls.add_constructor([param('int64_t const', 'hi'), param('uint64_t const', 'lo')])
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(ns3::int64x64_t const & o) [constructor]
+    cls.add_constructor([param('ns3::int64x64_t const &', 'o')])
+    ## int64x64-128.h (module 'core'): double ns3::int64x64_t::GetDouble() const [member function]
+    cls.add_method('GetDouble', 
+                   'double', 
+                   [], 
+                   is_const=True)
+    ## int64x64-128.h (module 'core'): int64_t ns3::int64x64_t::GetHigh() const [member function]
+    cls.add_method('GetHigh', 
+                   'int64_t', 
+                   [], 
+                   is_const=True)
+    ## int64x64-128.h (module 'core'): int64_t ns3::int64x64_t::GetInt() const [member function]
+    cls.add_method('GetInt', 
+                   'int64_t', 
+                   [], 
+                   is_const=True)
+    ## int64x64-128.h (module 'core'): uint64_t ns3::int64x64_t::GetLow() const [member function]
+    cls.add_method('GetLow', 
+                   'uint64_t', 
+                   [], 
+                   is_const=True)
+    ## int64x64-128.h (module 'core'): static ns3::int64x64_t ns3::int64x64_t::Invert(uint64_t const v) [member function]
+    cls.add_method('Invert', 
+                   'ns3::int64x64_t', 
+                   [param('uint64_t const', 'v')], 
+                   is_static=True)
+    ## int64x64-128.h (module 'core'): void ns3::int64x64_t::MulByInvert(ns3::int64x64_t const & o) [member function]
+    cls.add_method('MulByInvert', 
+                   'void', 
+                   [param('ns3::int64x64_t const &', 'o')])
+    ## int64x64-128.h (module 'core'): int64_t ns3::int64x64_t::Round() const [member function]
+    cls.add_method('Round', 
+                   'int64_t', 
+                   [], 
+                   is_const=True)
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::implementation [variable]
+    cls.add_static_attribute('implementation', 'ns3::int64x64_t::impl_type const', is_const=True)
+    return
+
+def register_Ns3Chunk_methods(root_module, cls):
+    ## chunk.h (module 'network'): ns3::Chunk::Chunk() [constructor]
+    cls.add_constructor([])
+    ## chunk.h (module 'network'): ns3::Chunk::Chunk(ns3::Chunk const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Chunk const &', 'arg0')])
+    ## chunk.h (module 'network'): uint32_t ns3::Chunk::Deserialize(ns3::Buffer::Iterator start) [member function]
+    cls.add_method('Deserialize', 
+                   'uint32_t', 
+                   [param('ns3::Buffer::Iterator', 'start')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## chunk.h (module 'network'): uint32_t ns3::Chunk::Deserialize(ns3::Buffer::Iterator start, ns3::Buffer::Iterator end) [member function]
+    cls.add_method('Deserialize', 
+                   'uint32_t', 
+                   [param('ns3::Buffer::Iterator', 'start'), param('ns3::Buffer::Iterator', 'end')], 
+                   is_virtual=True)
+    ## chunk.h (module 'network'): static ns3::TypeId ns3::Chunk::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## chunk.h (module 'network'): void ns3::Chunk::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3Header_methods(root_module, cls):
+    cls.add_output_stream_operator()
+    ## header.h (module 'network'): ns3::Header::Header() [constructor]
+    cls.add_constructor([])
+    ## header.h (module 'network'): ns3::Header::Header(ns3::Header const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Header const &', 'arg0')])
+    ## header.h (module 'network'): uint32_t ns3::Header::Deserialize(ns3::Buffer::Iterator start) [member function]
+    cls.add_method('Deserialize', 
+                   'uint32_t', 
+                   [param('ns3::Buffer::Iterator', 'start')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## header.h (module 'network'): uint32_t ns3::Header::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## header.h (module 'network'): static ns3::TypeId ns3::Header::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## header.h (module 'network'): void ns3::Header::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## header.h (module 'network'): void ns3::Header::Serialize(ns3::Buffer::Iterator start) const [member function]
+    cls.add_method('Serialize', 
+                   'void', 
+                   [param('ns3::Buffer::Iterator', 'start')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3Ipv4Header_methods(root_module, cls):
+    ## ipv4-header.h (module 'internet'): ns3::Ipv4Header::Ipv4Header(ns3::Ipv4Header const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv4Header const &', 'arg0')])
+    ## ipv4-header.h (module 'internet'): ns3::Ipv4Header::Ipv4Header() [constructor]
+    cls.add_constructor([])
+    ## ipv4-header.h (module 'internet'): uint32_t ns3::Ipv4Header::Deserialize(ns3::Buffer::Iterator start) [member function]
+    cls.add_method('Deserialize', 
+                   'uint32_t', 
+                   [param('ns3::Buffer::Iterator', 'start')], 
+                   is_virtual=True)
+    ## ipv4-header.h (module 'internet'): std::string ns3::Ipv4Header::DscpTypeToString(ns3::Ipv4Header::DscpType dscp) const [member function]
+    cls.add_method('DscpTypeToString', 
+                   'std::string', 
+                   [param('ns3::Ipv4Header::DscpType', 'dscp')], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): std::string ns3::Ipv4Header::EcnTypeToString(ns3::Ipv4Header::EcnType ecn) const [member function]
+    cls.add_method('EcnTypeToString', 
+                   'std::string', 
+                   [param('ns3::Ipv4Header::EcnType', 'ecn')], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::EnableChecksum() [member function]
+    cls.add_method('EnableChecksum', 
+                   'void', 
+                   [])
+    ## ipv4-header.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4Header::GetDestination() const [member function]
+    cls.add_method('GetDestination', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): ns3::Ipv4Header::DscpType ns3::Ipv4Header::GetDscp() const [member function]
+    cls.add_method('GetDscp', 
+                   'ns3::Ipv4Header::DscpType', 
+                   [], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): ns3::Ipv4Header::EcnType ns3::Ipv4Header::GetEcn() const [member function]
+    cls.add_method('GetEcn', 
+                   'ns3::Ipv4Header::EcnType', 
+                   [], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): uint16_t ns3::Ipv4Header::GetFragmentOffset() const [member function]
+    cls.add_method('GetFragmentOffset', 
+                   'uint16_t', 
+                   [], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): uint16_t ns3::Ipv4Header::GetIdentification() const [member function]
+    cls.add_method('GetIdentification', 
+                   'uint16_t', 
+                   [], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): ns3::TypeId ns3::Ipv4Header::GetInstanceTypeId() const [member function]
+    cls.add_method('GetInstanceTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-header.h (module 'internet'): uint16_t ns3::Ipv4Header::GetPayloadSize() const [member function]
+    cls.add_method('GetPayloadSize', 
+                   'uint16_t', 
+                   [], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): uint8_t ns3::Ipv4Header::GetProtocol() const [member function]
+    cls.add_method('GetProtocol', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): uint32_t ns3::Ipv4Header::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-header.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4Header::GetSource() const [member function]
+    cls.add_method('GetSource', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): uint8_t ns3::Ipv4Header::GetTos() const [member function]
+    cls.add_method('GetTos', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): uint8_t ns3::Ipv4Header::GetTtl() const [member function]
+    cls.add_method('GetTtl', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): static ns3::TypeId ns3::Ipv4Header::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## ipv4-header.h (module 'internet'): bool ns3::Ipv4Header::IsChecksumOk() const [member function]
+    cls.add_method('IsChecksumOk', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): bool ns3::Ipv4Header::IsDontFragment() const [member function]
+    cls.add_method('IsDontFragment', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): bool ns3::Ipv4Header::IsLastFragment() const [member function]
+    cls.add_method('IsLastFragment', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::Serialize(ns3::Buffer::Iterator start) const [member function]
+    cls.add_method('Serialize', 
+                   'void', 
+                   [param('ns3::Buffer::Iterator', 'start')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetDestination(ns3::Ipv4Address destination) [member function]
+    cls.add_method('SetDestination', 
+                   'void', 
+                   [param('ns3::Ipv4Address', 'destination')])
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetDontFragment() [member function]
+    cls.add_method('SetDontFragment', 
+                   'void', 
+                   [])
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetDscp(ns3::Ipv4Header::DscpType dscp) [member function]
+    cls.add_method('SetDscp', 
+                   'void', 
+                   [param('ns3::Ipv4Header::DscpType', 'dscp')])
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetEcn(ns3::Ipv4Header::EcnType ecn) [member function]
+    cls.add_method('SetEcn', 
+                   'void', 
+                   [param('ns3::Ipv4Header::EcnType', 'ecn')])
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetFragmentOffset(uint16_t offsetBytes) [member function]
+    cls.add_method('SetFragmentOffset', 
+                   'void', 
+                   [param('uint16_t', 'offsetBytes')])
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetIdentification(uint16_t identification) [member function]
+    cls.add_method('SetIdentification', 
+                   'void', 
+                   [param('uint16_t', 'identification')])
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetLastFragment() [member function]
+    cls.add_method('SetLastFragment', 
+                   'void', 
+                   [])
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetMayFragment() [member function]
+    cls.add_method('SetMayFragment', 
+                   'void', 
+                   [])
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetMoreFragments() [member function]
+    cls.add_method('SetMoreFragments', 
+                   'void', 
+                   [])
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetPayloadSize(uint16_t size) [member function]
+    cls.add_method('SetPayloadSize', 
+                   'void', 
+                   [param('uint16_t', 'size')])
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetProtocol(uint8_t num) [member function]
+    cls.add_method('SetProtocol', 
+                   'void', 
+                   [param('uint8_t', 'num')])
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetSource(ns3::Ipv4Address source) [member function]
+    cls.add_method('SetSource', 
+                   'void', 
+                   [param('ns3::Ipv4Address', 'source')])
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetTos(uint8_t tos) [member function]
+    cls.add_method('SetTos', 
+                   'void', 
+                   [param('uint8_t', 'tos')])
+    ## ipv4-header.h (module 'internet'): void ns3::Ipv4Header::SetTtl(uint8_t ttl) [member function]
+    cls.add_method('SetTtl', 
+                   'void', 
+                   [param('uint8_t', 'ttl')])
+    return
+
+def register_Ns3Ipv6Header_methods(root_module, cls):
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Header::Ipv6Header(ns3::Ipv6Header const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv6Header const &', 'arg0')])
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Header::Ipv6Header() [constructor]
+    cls.add_constructor([])
+    ## ipv6-header.h (module 'internet'): uint32_t ns3::Ipv6Header::Deserialize(ns3::Buffer::Iterator start) [member function]
+    cls.add_method('Deserialize', 
+                   'uint32_t', 
+                   [param('ns3::Buffer::Iterator', 'start')], 
+                   is_virtual=True)
+    ## ipv6-header.h (module 'internet'): std::string ns3::Ipv6Header::DscpTypeToString(ns3::Ipv6Header::DscpType dscp) const [member function]
+    cls.add_method('DscpTypeToString', 
+                   'std::string', 
+                   [param('ns3::Ipv6Header::DscpType', 'dscp')], 
+                   is_const=True)
+    ## ipv6-header.h (module 'internet'): std::string ns3::Ipv6Header::EcnTypeToString(ns3::Ipv6Header::EcnType ecn) const [member function]
+    cls.add_method('EcnTypeToString', 
+                   'std::string', 
+                   [param('ns3::Ipv6Header::EcnType', 'ecn')], 
+                   is_const=True)
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Address ns3::Ipv6Header::GetDestination() const [member function]
+    cls.add_method('GetDestination', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   is_const=True)
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Address ns3::Ipv6Header::GetDestinationAddress() const [member function]
+    cls.add_method('GetDestinationAddress', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   deprecated=True, is_const=True)
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Header::DscpType ns3::Ipv6Header::GetDscp() const [member function]
+    cls.add_method('GetDscp', 
+                   'ns3::Ipv6Header::DscpType', 
+                   [], 
+                   is_const=True)
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Header::EcnType ns3::Ipv6Header::GetEcn() const [member function]
+    cls.add_method('GetEcn', 
+                   'ns3::Ipv6Header::EcnType', 
+                   [], 
+                   is_const=True)
+    ## ipv6-header.h (module 'internet'): uint32_t ns3::Ipv6Header::GetFlowLabel() const [member function]
+    cls.add_method('GetFlowLabel', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## ipv6-header.h (module 'internet'): uint8_t ns3::Ipv6Header::GetHopLimit() const [member function]
+    cls.add_method('GetHopLimit', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## ipv6-header.h (module 'internet'): ns3::TypeId ns3::Ipv6Header::GetInstanceTypeId() const [member function]
+    cls.add_method('GetInstanceTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-header.h (module 'internet'): uint8_t ns3::Ipv6Header::GetNextHeader() const [member function]
+    cls.add_method('GetNextHeader', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## ipv6-header.h (module 'internet'): uint16_t ns3::Ipv6Header::GetPayloadLength() const [member function]
+    cls.add_method('GetPayloadLength', 
+                   'uint16_t', 
+                   [], 
+                   is_const=True)
+    ## ipv6-header.h (module 'internet'): uint32_t ns3::Ipv6Header::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Address ns3::Ipv6Header::GetSource() const [member function]
+    cls.add_method('GetSource', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   is_const=True)
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Address ns3::Ipv6Header::GetSourceAddress() const [member function]
+    cls.add_method('GetSourceAddress', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   deprecated=True, is_const=True)
+    ## ipv6-header.h (module 'internet'): uint8_t ns3::Ipv6Header::GetTrafficClass() const [member function]
+    cls.add_method('GetTrafficClass', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## ipv6-header.h (module 'internet'): static ns3::TypeId ns3::Ipv6Header::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## ipv6-header.h (module 'internet'): void ns3::Ipv6Header::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-header.h (module 'internet'): void ns3::Ipv6Header::Serialize(ns3::Buffer::Iterator start) const [member function]
+    cls.add_method('Serialize', 
+                   'void', 
+                   [param('ns3::Buffer::Iterator', 'start')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-header.h (module 'internet'): void ns3::Ipv6Header::SetDestination(ns3::Ipv6Address dst) [member function]
+    cls.add_method('SetDestination', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'dst')])
+    ## ipv6-header.h (module 'internet'): void ns3::Ipv6Header::SetDestinationAddress(ns3::Ipv6Address dst) [member function]
+    cls.add_method('SetDestinationAddress', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'dst')], 
+                   deprecated=True)
+    ## ipv6-header.h (module 'internet'): void ns3::Ipv6Header::SetDscp(ns3::Ipv6Header::DscpType dscp) [member function]
+    cls.add_method('SetDscp', 
+                   'void', 
+                   [param('ns3::Ipv6Header::DscpType', 'dscp')])
+    ## ipv6-header.h (module 'internet'): void ns3::Ipv6Header::SetEcn(ns3::Ipv6Header::EcnType ecn) [member function]
+    cls.add_method('SetEcn', 
+                   'void', 
+                   [param('ns3::Ipv6Header::EcnType', 'ecn')])
+    ## ipv6-header.h (module 'internet'): void ns3::Ipv6Header::SetFlowLabel(uint32_t flow) [member function]
+    cls.add_method('SetFlowLabel', 
+                   'void', 
+                   [param('uint32_t', 'flow')])
+    ## ipv6-header.h (module 'internet'): void ns3::Ipv6Header::SetHopLimit(uint8_t limit) [member function]
+    cls.add_method('SetHopLimit', 
+                   'void', 
+                   [param('uint8_t', 'limit')])
+    ## ipv6-header.h (module 'internet'): void ns3::Ipv6Header::SetNextHeader(uint8_t next) [member function]
+    cls.add_method('SetNextHeader', 
+                   'void', 
+                   [param('uint8_t', 'next')])
+    ## ipv6-header.h (module 'internet'): void ns3::Ipv6Header::SetPayloadLength(uint16_t len) [member function]
+    cls.add_method('SetPayloadLength', 
+                   'void', 
+                   [param('uint16_t', 'len')])
+    ## ipv6-header.h (module 'internet'): void ns3::Ipv6Header::SetSource(ns3::Ipv6Address src) [member function]
+    cls.add_method('SetSource', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'src')])
+    ## ipv6-header.h (module 'internet'): void ns3::Ipv6Header::SetSourceAddress(ns3::Ipv6Address src) [member function]
+    cls.add_method('SetSourceAddress', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'src')], 
+                   deprecated=True)
+    ## ipv6-header.h (module 'internet'): void ns3::Ipv6Header::SetTrafficClass(uint8_t traffic) [member function]
+    cls.add_method('SetTrafficClass', 
+                   'void', 
+                   [param('uint8_t', 'traffic')])
+    return
+
+def register_Ns3Object_methods(root_module, cls):
+    ## object.h (module 'core'): ns3::Object::Object() [constructor]
+    cls.add_constructor([])
+    ## object.h (module 'core'): void ns3::Object::AggregateObject(ns3::Ptr<ns3::Object> other) [member function]
+    cls.add_method('AggregateObject', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Object >', 'other')])
+    ## object.h (module 'core'): void ns3::Object::Dispose() [member function]
+    cls.add_method('Dispose', 
+                   'void', 
+                   [])
+    ## object.h (module 'core'): ns3::Object::AggregateIterator ns3::Object::GetAggregateIterator() const [member function]
+    cls.add_method('GetAggregateIterator', 
+                   'ns3::Object::AggregateIterator', 
+                   [], 
+                   is_const=True)
+    ## object.h (module 'core'): ns3::TypeId ns3::Object::GetInstanceTypeId() const [member function]
+    cls.add_method('GetInstanceTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## object.h (module 'core'): ns3::Ptr<ns3::Object> ns3::Object::GetObject() const [member function]
+    cls.add_method('GetObject', 
+                   'ns3::Ptr< ns3::Object >', 
+                   [], 
+                   custom_template_method_name='GetObject', is_const=True, template_parameters=['ns3::Object'])
+    ## object.h (module 'core'): ns3::Ptr<ns3::Object> ns3::Object::GetObject(ns3::TypeId tid) const [member function]
+    cls.add_method('GetObject', 
+                   'ns3::Ptr< ns3::Object >', 
+                   [param('ns3::TypeId', 'tid')], 
+                   custom_template_method_name='GetObject', is_const=True, template_parameters=['ns3::Object'])
+    ## object.h (module 'core'): static ns3::TypeId ns3::Object::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## object.h (module 'core'): void ns3::Object::Initialize() [member function]
+    cls.add_method('Initialize', 
+                   'void', 
+                   [])
+    ## object.h (module 'core'): bool ns3::Object::IsInitialized() const [member function]
+    cls.add_method('IsInitialized', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## object.h (module 'core'): ns3::Object::Object(ns3::Object const & o) [constructor]
+    cls.add_constructor([param('ns3::Object const &', 'o')], 
+                        visibility='protected')
+    ## object.h (module 'core'): void ns3::Object::DoDispose() [member function]
+    cls.add_method('DoDispose', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    ## object.h (module 'core'): void ns3::Object::DoInitialize() [member function]
+    cls.add_method('DoInitialize', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    ## object.h (module 'core'): void ns3::Object::NotifyNewAggregate() [member function]
+    cls.add_method('NotifyNewAggregate', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    return
+
+def register_Ns3ObjectAggregateIterator_methods(root_module, cls):
+    ## object.h (module 'core'): ns3::Object::AggregateIterator::AggregateIterator(ns3::Object::AggregateIterator const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Object::AggregateIterator const &', 'arg0')])
+    ## object.h (module 'core'): ns3::Object::AggregateIterator::AggregateIterator() [constructor]
+    cls.add_constructor([])
+    ## object.h (module 'core'): bool ns3::Object::AggregateIterator::HasNext() const [member function]
+    cls.add_method('HasNext', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## object.h (module 'core'): ns3::Ptr<const ns3::Object> ns3::Object::AggregateIterator::Next() [member function]
+    cls.add_method('Next', 
+                   'ns3::Ptr< ns3::Object const >', 
+                   [])
+    return
+
+def register_Ns3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor>>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor>>::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor>> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter< ns3::AttributeAccessor > > const &', 'o')])
+    return
+
+def register_Ns3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker>>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker>>::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker>> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter< ns3::AttributeChecker > > const &', 'o')])
+    return
+
+def register_Ns3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue>>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue>>::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue>> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter< ns3::AttributeValue > > const &', 'o')])
+    return
+
+def register_Ns3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase>>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase>>::SimpleRefCount(ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase>> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter< ns3::CallbackImplBase > > const &', 'o')])
+    return
+
+def register_Ns3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl>>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl>>::SimpleRefCount(ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl>> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter< ns3::EventImpl > > const &', 'o')])
+    return
+
+def register_Ns3SimpleRefCount__Ns3FlowClassifier_Ns3Empty_Ns3DefaultDeleter__lt__ns3FlowClassifier__gt___methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::FlowClassifier, ns3::empty, ns3::DefaultDeleter<ns3::FlowClassifier>>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::FlowClassifier, ns3::empty, ns3::DefaultDeleter<ns3::FlowClassifier>>::SimpleRefCount(ns3::SimpleRefCount<ns3::FlowClassifier, ns3::empty, ns3::DefaultDeleter<ns3::FlowClassifier>> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::FlowClassifier, ns3::empty, ns3::DefaultDeleter< ns3::FlowClassifier > > const &', 'o')])
+    return
+
+def register_Ns3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation>>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation>>::SimpleRefCount(ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation>> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter< ns3::Hash::Implementation > > const &', 'o')])
+    return
+
+def register_Ns3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute>>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute>>::SimpleRefCount(ns3::SimpleRefCount<ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute>> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter< ns3::Ipv4MulticastRoute > > const &', 'o')])
+    return
+
+def register_Ns3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt___methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route>>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route>>::SimpleRefCount(ns3::SimpleRefCount<ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route>> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter< ns3::Ipv4Route > > const &', 'o')])
+    return
+
+def register_Ns3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector>>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector>>::SimpleRefCount(ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector>> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter< ns3::NixVector > > const &', 'o')])
+    return
+
+def register_Ns3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper>>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper>>::SimpleRefCount(ns3::SimpleRefCount<ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper>> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter< ns3::OutputStreamWrapper > > const &', 'o')])
+    return
+
+def register_Ns3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet>>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet>>::SimpleRefCount(ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet>> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter< ns3::Packet > > const &', 'o')])
+    return
+
+def register_Ns3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem>>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem>>::SimpleRefCount(ns3::SimpleRefCount<ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem>> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::QueueItem, ns3::empty, ns3::DefaultDeleter< ns3::QueueItem > > const &', 'o')])
+    return
+
+def register_Ns3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___methods(root_module, cls):
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor>>::SimpleRefCount() [constructor]
+    cls.add_constructor([])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor>>::SimpleRefCount(ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor>> const & o) [constructor]
+    cls.add_constructor([param('ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter< ns3::TraceSourceAccessor > > const &', 'o')])
+    return
+
+def register_Ns3Socket_methods(root_module, cls):
+    ## socket.h (module 'network'): ns3::Socket::Socket(ns3::Socket const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Socket const &', 'arg0')])
+    ## socket.h (module 'network'): ns3::Socket::Socket() [constructor]
+    cls.add_constructor([])
+    ## socket.h (module 'network'): int ns3::Socket::Bind(ns3::Address const & address) [member function]
+    cls.add_method('Bind', 
+                   'int', 
+                   [param('ns3::Address const &', 'address')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): int ns3::Socket::Bind() [member function]
+    cls.add_method('Bind', 
+                   'int', 
+                   [], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): int ns3::Socket::Bind6() [member function]
+    cls.add_method('Bind6', 
+                   'int', 
+                   [], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): void ns3::Socket::BindToNetDevice(ns3::Ptr<ns3::NetDevice> netdevice) [member function]
+    cls.add_method('BindToNetDevice', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::NetDevice >', 'netdevice')], 
+                   is_virtual=True)
+    ## socket.h (module 'network'): int ns3::Socket::Close() [member function]
+    cls.add_method('Close', 
+                   'int', 
+                   [], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): int ns3::Socket::Connect(ns3::Address const & address) [member function]
+    cls.add_method('Connect', 
+                   'int', 
+                   [param('ns3::Address const &', 'address')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): static ns3::Ptr<ns3::Socket> ns3::Socket::CreateSocket(ns3::Ptr<ns3::Node> node, ns3::TypeId tid) [member function]
+    cls.add_method('CreateSocket', 
+                   'ns3::Ptr< ns3::Socket >', 
+                   [param('ns3::Ptr< ns3::Node >', 'node'), param('ns3::TypeId', 'tid')], 
+                   is_static=True)
+    ## socket.h (module 'network'): bool ns3::Socket::GetAllowBroadcast() const [member function]
+    cls.add_method('GetAllowBroadcast', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): ns3::Ptr<ns3::NetDevice> ns3::Socket::GetBoundNetDevice() [member function]
+    cls.add_method('GetBoundNetDevice', 
+                   'ns3::Ptr< ns3::NetDevice >', 
+                   [])
+    ## socket.h (module 'network'): ns3::Socket::SocketErrno ns3::Socket::GetErrno() const [member function]
+    cls.add_method('GetErrno', 
+                   'ns3::Socket::SocketErrno', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): uint8_t ns3::Socket::GetIpTos() const [member function]
+    cls.add_method('GetIpTos', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## socket.h (module 'network'): uint8_t ns3::Socket::GetIpTtl() const [member function]
+    cls.add_method('GetIpTtl', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): uint8_t ns3::Socket::GetIpv6HopLimit() const [member function]
+    cls.add_method('GetIpv6HopLimit', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): uint8_t ns3::Socket::GetIpv6Tclass() const [member function]
+    cls.add_method('GetIpv6Tclass', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## socket.h (module 'network'): ns3::Ptr<ns3::Node> ns3::Socket::GetNode() const [member function]
+    cls.add_method('GetNode', 
+                   'ns3::Ptr< ns3::Node >', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): int ns3::Socket::GetPeerName(ns3::Address & address) const [member function]
+    cls.add_method('GetPeerName', 
+                   'int', 
+                   [param('ns3::Address &', 'address')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): uint8_t ns3::Socket::GetPriority() const [member function]
+    cls.add_method('GetPriority', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## socket.h (module 'network'): uint32_t ns3::Socket::GetRxAvailable() const [member function]
+    cls.add_method('GetRxAvailable', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): int ns3::Socket::GetSockName(ns3::Address & address) const [member function]
+    cls.add_method('GetSockName', 
+                   'int', 
+                   [param('ns3::Address &', 'address')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): ns3::Socket::SocketType ns3::Socket::GetSocketType() const [member function]
+    cls.add_method('GetSocketType', 
+                   'ns3::Socket::SocketType', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): uint32_t ns3::Socket::GetTxAvailable() const [member function]
+    cls.add_method('GetTxAvailable', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): static ns3::TypeId ns3::Socket::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## socket.h (module 'network'): static uint8_t ns3::Socket::IpTos2Priority(uint8_t ipTos) [member function]
+    cls.add_method('IpTos2Priority', 
+                   'uint8_t', 
+                   [param('uint8_t', 'ipTos')], 
+                   is_static=True)
+    ## socket.h (module 'network'): void ns3::Socket::Ipv6JoinGroup(ns3::Ipv6Address address, ns3::Socket::Ipv6MulticastFilterMode filterMode, std::vector<ns3::Ipv6Address, std::allocator<ns3::Ipv6Address>> sourceAddresses) [member function]
+    cls.add_method('Ipv6JoinGroup', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'address'), param('ns3::Socket::Ipv6MulticastFilterMode', 'filterMode'), param('std::vector< ns3::Ipv6Address >', 'sourceAddresses')], 
+                   is_virtual=True)
+    ## socket.h (module 'network'): void ns3::Socket::Ipv6JoinGroup(ns3::Ipv6Address address) [member function]
+    cls.add_method('Ipv6JoinGroup', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'address')], 
+                   is_virtual=True)
+    ## socket.h (module 'network'): void ns3::Socket::Ipv6LeaveGroup() [member function]
+    cls.add_method('Ipv6LeaveGroup', 
+                   'void', 
+                   [], 
+                   is_virtual=True)
+    ## socket.h (module 'network'): bool ns3::Socket::IsIpRecvTos() const [member function]
+    cls.add_method('IsIpRecvTos', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## socket.h (module 'network'): bool ns3::Socket::IsIpRecvTtl() const [member function]
+    cls.add_method('IsIpRecvTtl', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## socket.h (module 'network'): bool ns3::Socket::IsIpv6RecvHopLimit() const [member function]
+    cls.add_method('IsIpv6RecvHopLimit', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## socket.h (module 'network'): bool ns3::Socket::IsIpv6RecvTclass() const [member function]
+    cls.add_method('IsIpv6RecvTclass', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## socket.h (module 'network'): bool ns3::Socket::IsRecvPktInfo() const [member function]
+    cls.add_method('IsRecvPktInfo', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## socket.h (module 'network'): int ns3::Socket::Listen() [member function]
+    cls.add_method('Listen', 
+                   'int', 
+                   [], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Socket::Recv(uint32_t maxSize, uint32_t flags) [member function]
+    cls.add_method('Recv', 
+                   'ns3::Ptr< ns3::Packet >', 
+                   [param('uint32_t', 'maxSize'), param('uint32_t', 'flags')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Socket::Recv() [member function]
+    cls.add_method('Recv', 
+                   'ns3::Ptr< ns3::Packet >', 
+                   [])
+    ## socket.h (module 'network'): int ns3::Socket::Recv(uint8_t * buf, uint32_t size, uint32_t flags) [member function]
+    cls.add_method('Recv', 
+                   'int', 
+                   [param('uint8_t *', 'buf'), param('uint32_t', 'size'), param('uint32_t', 'flags')])
+    ## socket.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Socket::RecvFrom(uint32_t maxSize, uint32_t flags, ns3::Address & fromAddress) [member function]
+    cls.add_method('RecvFrom', 
+                   'ns3::Ptr< ns3::Packet >', 
+                   [param('uint32_t', 'maxSize'), param('uint32_t', 'flags'), param('ns3::Address &', 'fromAddress')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Socket::RecvFrom(ns3::Address & fromAddress) [member function]
+    cls.add_method('RecvFrom', 
+                   'ns3::Ptr< ns3::Packet >', 
+                   [param('ns3::Address &', 'fromAddress')])
+    ## socket.h (module 'network'): int ns3::Socket::RecvFrom(uint8_t * buf, uint32_t size, uint32_t flags, ns3::Address & fromAddress) [member function]
+    cls.add_method('RecvFrom', 
+                   'int', 
+                   [param('uint8_t *', 'buf'), param('uint32_t', 'size'), param('uint32_t', 'flags'), param('ns3::Address &', 'fromAddress')])
+    ## socket.h (module 'network'): int ns3::Socket::Send(ns3::Ptr<ns3::Packet> p, uint32_t flags) [member function]
+    cls.add_method('Send', 
+                   'int', 
+                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('uint32_t', 'flags')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): int ns3::Socket::Send(ns3::Ptr<ns3::Packet> p) [member function]
+    cls.add_method('Send', 
+                   'int', 
+                   [param('ns3::Ptr< ns3::Packet >', 'p')])
+    ## socket.h (module 'network'): int ns3::Socket::Send(uint8_t const * buf, uint32_t size, uint32_t flags) [member function]
+    cls.add_method('Send', 
+                   'int', 
+                   [param('uint8_t const *', 'buf'), param('uint32_t', 'size'), param('uint32_t', 'flags')])
+    ## socket.h (module 'network'): int ns3::Socket::SendTo(ns3::Ptr<ns3::Packet> p, uint32_t flags, ns3::Address const & toAddress) [member function]
+    cls.add_method('SendTo', 
+                   'int', 
+                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('uint32_t', 'flags'), param('ns3::Address const &', 'toAddress')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): int ns3::Socket::SendTo(uint8_t const * buf, uint32_t size, uint32_t flags, ns3::Address const & address) [member function]
+    cls.add_method('SendTo', 
+                   'int', 
+                   [param('uint8_t const *', 'buf'), param('uint32_t', 'size'), param('uint32_t', 'flags'), param('ns3::Address const &', 'address')])
+    ## socket.h (module 'network'): void ns3::Socket::SetAcceptCallback(ns3::Callback<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> connectionRequest, ns3::Callback<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> newConnectionCreated) [member function]
+    cls.add_method('SetAcceptCallback', 
+                   'void', 
+                   [param('ns3::Callback< bool, ns3::Ptr< ns3::Socket >, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'connectionRequest'), param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'newConnectionCreated')])
+    ## socket.h (module 'network'): bool ns3::Socket::SetAllowBroadcast(bool allowBroadcast) [member function]
+    cls.add_method('SetAllowBroadcast', 
+                   'bool', 
+                   [param('bool', 'allowBroadcast')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): void ns3::Socket::SetCloseCallbacks(ns3::Callback<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> normalClose, ns3::Callback<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> errorClose) [member function]
+    cls.add_method('SetCloseCallbacks', 
+                   'void', 
+                   [param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'normalClose'), param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'errorClose')])
+    ## socket.h (module 'network'): void ns3::Socket::SetConnectCallback(ns3::Callback<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> connectionSucceeded, ns3::Callback<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> connectionFailed) [member function]
+    cls.add_method('SetConnectCallback', 
+                   'void', 
+                   [param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'connectionSucceeded'), param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'connectionFailed')])
+    ## socket.h (module 'network'): void ns3::Socket::SetDataSentCallback(ns3::Callback<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> dataSent) [member function]
+    cls.add_method('SetDataSentCallback', 
+                   'void', 
+                   [param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'dataSent')])
+    ## socket.h (module 'network'): void ns3::Socket::SetIpRecvTos(bool ipv4RecvTos) [member function]
+    cls.add_method('SetIpRecvTos', 
+                   'void', 
+                   [param('bool', 'ipv4RecvTos')])
+    ## socket.h (module 'network'): void ns3::Socket::SetIpRecvTtl(bool ipv4RecvTtl) [member function]
+    cls.add_method('SetIpRecvTtl', 
+                   'void', 
+                   [param('bool', 'ipv4RecvTtl')])
+    ## socket.h (module 'network'): void ns3::Socket::SetIpTos(uint8_t ipTos) [member function]
+    cls.add_method('SetIpTos', 
+                   'void', 
+                   [param('uint8_t', 'ipTos')])
+    ## socket.h (module 'network'): void ns3::Socket::SetIpTtl(uint8_t ipTtl) [member function]
+    cls.add_method('SetIpTtl', 
+                   'void', 
+                   [param('uint8_t', 'ipTtl')], 
+                   is_virtual=True)
+    ## socket.h (module 'network'): void ns3::Socket::SetIpv6HopLimit(uint8_t ipHopLimit) [member function]
+    cls.add_method('SetIpv6HopLimit', 
+                   'void', 
+                   [param('uint8_t', 'ipHopLimit')], 
+                   is_virtual=True)
+    ## socket.h (module 'network'): void ns3::Socket::SetIpv6RecvHopLimit(bool ipv6RecvHopLimit) [member function]
+    cls.add_method('SetIpv6RecvHopLimit', 
+                   'void', 
+                   [param('bool', 'ipv6RecvHopLimit')])
+    ## socket.h (module 'network'): void ns3::Socket::SetIpv6RecvTclass(bool ipv6RecvTclass) [member function]
+    cls.add_method('SetIpv6RecvTclass', 
+                   'void', 
+                   [param('bool', 'ipv6RecvTclass')])
+    ## socket.h (module 'network'): void ns3::Socket::SetIpv6Tclass(int ipTclass) [member function]
+    cls.add_method('SetIpv6Tclass', 
+                   'void', 
+                   [param('int', 'ipTclass')])
+    ## socket.h (module 'network'): void ns3::Socket::SetPriority(uint8_t priority) [member function]
+    cls.add_method('SetPriority', 
+                   'void', 
+                   [param('uint8_t', 'priority')])
+    ## socket.h (module 'network'): void ns3::Socket::SetRecvCallback(ns3::Callback<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> receivedData) [member function]
+    cls.add_method('SetRecvCallback', 
+                   'void', 
+                   [param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'receivedData')])
+    ## socket.h (module 'network'): void ns3::Socket::SetRecvPktInfo(bool flag) [member function]
+    cls.add_method('SetRecvPktInfo', 
+                   'void', 
+                   [param('bool', 'flag')])
+    ## socket.h (module 'network'): void ns3::Socket::SetSendCallback(ns3::Callback<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> sendCb) [member function]
+    cls.add_method('SetSendCallback', 
+                   'void', 
+                   [param('ns3::Callback< void, ns3::Ptr< ns3::Socket >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'sendCb')])
+    ## socket.h (module 'network'): int ns3::Socket::ShutdownRecv() [member function]
+    cls.add_method('ShutdownRecv', 
+                   'int', 
+                   [], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): int ns3::Socket::ShutdownSend() [member function]
+    cls.add_method('ShutdownSend', 
+                   'int', 
+                   [], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## socket.h (module 'network'): void ns3::Socket::DoDispose() [member function]
+    cls.add_method('DoDispose', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    ## socket.h (module 'network'): bool ns3::Socket::IsManualIpTtl() const [member function]
+    cls.add_method('IsManualIpTtl', 
+                   'bool', 
+                   [], 
+                   is_const=True, visibility='protected')
+    ## socket.h (module 'network'): bool ns3::Socket::IsManualIpv6HopLimit() const [member function]
+    cls.add_method('IsManualIpv6HopLimit', 
+                   'bool', 
+                   [], 
+                   is_const=True, visibility='protected')
+    ## socket.h (module 'network'): bool ns3::Socket::IsManualIpv6Tclass() const [member function]
+    cls.add_method('IsManualIpv6Tclass', 
+                   'bool', 
+                   [], 
+                   is_const=True, visibility='protected')
+    ## socket.h (module 'network'): void ns3::Socket::NotifyConnectionFailed() [member function]
+    cls.add_method('NotifyConnectionFailed', 
+                   'void', 
+                   [], 
+                   visibility='protected')
+    ## socket.h (module 'network'): bool ns3::Socket::NotifyConnectionRequest(ns3::Address const & from) [member function]
+    cls.add_method('NotifyConnectionRequest', 
+                   'bool', 
+                   [param('ns3::Address const &', 'from')], 
+                   visibility='protected')
+    ## socket.h (module 'network'): void ns3::Socket::NotifyConnectionSucceeded() [member function]
+    cls.add_method('NotifyConnectionSucceeded', 
+                   'void', 
+                   [], 
+                   visibility='protected')
+    ## socket.h (module 'network'): void ns3::Socket::NotifyDataRecv() [member function]
+    cls.add_method('NotifyDataRecv', 
+                   'void', 
+                   [], 
+                   visibility='protected')
+    ## socket.h (module 'network'): void ns3::Socket::NotifyDataSent(uint32_t size) [member function]
+    cls.add_method('NotifyDataSent', 
+                   'void', 
+                   [param('uint32_t', 'size')], 
+                   visibility='protected')
+    ## socket.h (module 'network'): void ns3::Socket::NotifyErrorClose() [member function]
+    cls.add_method('NotifyErrorClose', 
+                   'void', 
+                   [], 
+                   visibility='protected')
+    ## socket.h (module 'network'): void ns3::Socket::NotifyNewConnectionCreated(ns3::Ptr<ns3::Socket> socket, ns3::Address const & from) [member function]
+    cls.add_method('NotifyNewConnectionCreated', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Socket >', 'socket'), param('ns3::Address const &', 'from')], 
+                   visibility='protected')
+    ## socket.h (module 'network'): void ns3::Socket::NotifyNormalClose() [member function]
+    cls.add_method('NotifyNormalClose', 
+                   'void', 
+                   [], 
+                   visibility='protected')
+    ## socket.h (module 'network'): void ns3::Socket::NotifySend(uint32_t spaceAvailable) [member function]
+    cls.add_method('NotifySend', 
+                   'void', 
+                   [param('uint32_t', 'spaceAvailable')], 
+                   visibility='protected')
+    return
+
+def register_Ns3SocketIpTosTag_methods(root_module, cls):
+    ## socket.h (module 'network'): ns3::SocketIpTosTag::SocketIpTosTag(ns3::SocketIpTosTag const & arg0) [constructor]
+    cls.add_constructor([param('ns3::SocketIpTosTag const &', 'arg0')])
+    ## socket.h (module 'network'): ns3::SocketIpTosTag::SocketIpTosTag() [constructor]
+    cls.add_constructor([])
+    ## socket.h (module 'network'): void ns3::SocketIpTosTag::Deserialize(ns3::TagBuffer i) [member function]
+    cls.add_method('Deserialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'i')], 
+                   is_virtual=True)
+    ## socket.h (module 'network'): ns3::TypeId ns3::SocketIpTosTag::GetInstanceTypeId() const [member function]
+    cls.add_method('GetInstanceTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): uint32_t ns3::SocketIpTosTag::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): uint8_t ns3::SocketIpTosTag::GetTos() const [member function]
+    cls.add_method('GetTos', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketIpTosTag::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## socket.h (module 'network'): void ns3::SocketIpTosTag::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): void ns3::SocketIpTosTag::Serialize(ns3::TagBuffer i) const [member function]
+    cls.add_method('Serialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'i')], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): void ns3::SocketIpTosTag::SetTos(uint8_t tos) [member function]
+    cls.add_method('SetTos', 
+                   'void', 
+                   [param('uint8_t', 'tos')])
+    return
+
+def register_Ns3SocketIpTtlTag_methods(root_module, cls):
+    ## socket.h (module 'network'): ns3::SocketIpTtlTag::SocketIpTtlTag(ns3::SocketIpTtlTag const & arg0) [constructor]
+    cls.add_constructor([param('ns3::SocketIpTtlTag const &', 'arg0')])
+    ## socket.h (module 'network'): ns3::SocketIpTtlTag::SocketIpTtlTag() [constructor]
+    cls.add_constructor([])
+    ## socket.h (module 'network'): void ns3::SocketIpTtlTag::Deserialize(ns3::TagBuffer i) [member function]
+    cls.add_method('Deserialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'i')], 
+                   is_virtual=True)
+    ## socket.h (module 'network'): ns3::TypeId ns3::SocketIpTtlTag::GetInstanceTypeId() const [member function]
+    cls.add_method('GetInstanceTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): uint32_t ns3::SocketIpTtlTag::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): uint8_t ns3::SocketIpTtlTag::GetTtl() const [member function]
+    cls.add_method('GetTtl', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketIpTtlTag::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## socket.h (module 'network'): void ns3::SocketIpTtlTag::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): void ns3::SocketIpTtlTag::Serialize(ns3::TagBuffer i) const [member function]
+    cls.add_method('Serialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'i')], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): void ns3::SocketIpTtlTag::SetTtl(uint8_t ttl) [member function]
+    cls.add_method('SetTtl', 
+                   'void', 
+                   [param('uint8_t', 'ttl')])
+    return
+
+def register_Ns3SocketIpv6HopLimitTag_methods(root_module, cls):
+    ## socket.h (module 'network'): ns3::SocketIpv6HopLimitTag::SocketIpv6HopLimitTag(ns3::SocketIpv6HopLimitTag const & arg0) [constructor]
+    cls.add_constructor([param('ns3::SocketIpv6HopLimitTag const &', 'arg0')])
+    ## socket.h (module 'network'): ns3::SocketIpv6HopLimitTag::SocketIpv6HopLimitTag() [constructor]
+    cls.add_constructor([])
+    ## socket.h (module 'network'): void ns3::SocketIpv6HopLimitTag::Deserialize(ns3::TagBuffer i) [member function]
+    cls.add_method('Deserialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'i')], 
+                   is_virtual=True)
+    ## socket.h (module 'network'): uint8_t ns3::SocketIpv6HopLimitTag::GetHopLimit() const [member function]
+    cls.add_method('GetHopLimit', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## socket.h (module 'network'): ns3::TypeId ns3::SocketIpv6HopLimitTag::GetInstanceTypeId() const [member function]
+    cls.add_method('GetInstanceTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): uint32_t ns3::SocketIpv6HopLimitTag::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketIpv6HopLimitTag::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## socket.h (module 'network'): void ns3::SocketIpv6HopLimitTag::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): void ns3::SocketIpv6HopLimitTag::Serialize(ns3::TagBuffer i) const [member function]
+    cls.add_method('Serialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'i')], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): void ns3::SocketIpv6HopLimitTag::SetHopLimit(uint8_t hopLimit) [member function]
+    cls.add_method('SetHopLimit', 
+                   'void', 
+                   [param('uint8_t', 'hopLimit')])
+    return
+
+def register_Ns3SocketIpv6TclassTag_methods(root_module, cls):
+    ## socket.h (module 'network'): ns3::SocketIpv6TclassTag::SocketIpv6TclassTag(ns3::SocketIpv6TclassTag const & arg0) [constructor]
+    cls.add_constructor([param('ns3::SocketIpv6TclassTag const &', 'arg0')])
+    ## socket.h (module 'network'): ns3::SocketIpv6TclassTag::SocketIpv6TclassTag() [constructor]
+    cls.add_constructor([])
+    ## socket.h (module 'network'): void ns3::SocketIpv6TclassTag::Deserialize(ns3::TagBuffer i) [member function]
+    cls.add_method('Deserialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'i')], 
+                   is_virtual=True)
+    ## socket.h (module 'network'): ns3::TypeId ns3::SocketIpv6TclassTag::GetInstanceTypeId() const [member function]
+    cls.add_method('GetInstanceTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): uint32_t ns3::SocketIpv6TclassTag::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): uint8_t ns3::SocketIpv6TclassTag::GetTclass() const [member function]
+    cls.add_method('GetTclass', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketIpv6TclassTag::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## socket.h (module 'network'): void ns3::SocketIpv6TclassTag::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): void ns3::SocketIpv6TclassTag::Serialize(ns3::TagBuffer i) const [member function]
+    cls.add_method('Serialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'i')], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): void ns3::SocketIpv6TclassTag::SetTclass(uint8_t tclass) [member function]
+    cls.add_method('SetTclass', 
+                   'void', 
+                   [param('uint8_t', 'tclass')])
+    return
+
+def register_Ns3SocketPriorityTag_methods(root_module, cls):
+    ## socket.h (module 'network'): ns3::SocketPriorityTag::SocketPriorityTag(ns3::SocketPriorityTag const & arg0) [constructor]
+    cls.add_constructor([param('ns3::SocketPriorityTag const &', 'arg0')])
+    ## socket.h (module 'network'): ns3::SocketPriorityTag::SocketPriorityTag() [constructor]
+    cls.add_constructor([])
+    ## socket.h (module 'network'): void ns3::SocketPriorityTag::Deserialize(ns3::TagBuffer i) [member function]
+    cls.add_method('Deserialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'i')], 
+                   is_virtual=True)
+    ## socket.h (module 'network'): ns3::TypeId ns3::SocketPriorityTag::GetInstanceTypeId() const [member function]
+    cls.add_method('GetInstanceTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): uint8_t ns3::SocketPriorityTag::GetPriority() const [member function]
+    cls.add_method('GetPriority', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## socket.h (module 'network'): uint32_t ns3::SocketPriorityTag::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketPriorityTag::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## socket.h (module 'network'): void ns3::SocketPriorityTag::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): void ns3::SocketPriorityTag::Serialize(ns3::TagBuffer i) const [member function]
+    cls.add_method('Serialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'i')], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): void ns3::SocketPriorityTag::SetPriority(uint8_t priority) [member function]
+    cls.add_method('SetPriority', 
+                   'void', 
+                   [param('uint8_t', 'priority')])
+    return
+
+def register_Ns3SocketSetDontFragmentTag_methods(root_module, cls):
+    ## socket.h (module 'network'): ns3::SocketSetDontFragmentTag::SocketSetDontFragmentTag(ns3::SocketSetDontFragmentTag const & arg0) [constructor]
+    cls.add_constructor([param('ns3::SocketSetDontFragmentTag const &', 'arg0')])
+    ## socket.h (module 'network'): ns3::SocketSetDontFragmentTag::SocketSetDontFragmentTag() [constructor]
+    cls.add_constructor([])
+    ## socket.h (module 'network'): void ns3::SocketSetDontFragmentTag::Deserialize(ns3::TagBuffer i) [member function]
+    cls.add_method('Deserialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'i')], 
+                   is_virtual=True)
+    ## socket.h (module 'network'): void ns3::SocketSetDontFragmentTag::Disable() [member function]
+    cls.add_method('Disable', 
+                   'void', 
+                   [])
+    ## socket.h (module 'network'): void ns3::SocketSetDontFragmentTag::Enable() [member function]
+    cls.add_method('Enable', 
+                   'void', 
+                   [])
+    ## socket.h (module 'network'): ns3::TypeId ns3::SocketSetDontFragmentTag::GetInstanceTypeId() const [member function]
+    cls.add_method('GetInstanceTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): uint32_t ns3::SocketSetDontFragmentTag::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): static ns3::TypeId ns3::SocketSetDontFragmentTag::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## socket.h (module 'network'): bool ns3::SocketSetDontFragmentTag::IsEnabled() const [member function]
+    cls.add_method('IsEnabled', 
+                   'bool', 
+                   [], 
+                   is_const=True)
+    ## socket.h (module 'network'): void ns3::SocketSetDontFragmentTag::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True, is_virtual=True)
+    ## socket.h (module 'network'): void ns3::SocketSetDontFragmentTag::Serialize(ns3::TagBuffer i) const [member function]
+    cls.add_method('Serialize', 
+                   'void', 
+                   [param('ns3::TagBuffer', 'i')], 
+                   is_const=True, is_virtual=True)
+    return
+
+def register_Ns3TraceSourceAccessor_methods(root_module, cls):
+    ## trace-source-accessor.h (module 'core'): ns3::TraceSourceAccessor::TraceSourceAccessor(ns3::TraceSourceAccessor const & arg0) [constructor]
+    cls.add_constructor([param('ns3::TraceSourceAccessor const &', 'arg0')])
+    ## trace-source-accessor.h (module 'core'): ns3::TraceSourceAccessor::TraceSourceAccessor() [constructor]
+    cls.add_constructor([])
+    ## trace-source-accessor.h (module 'core'): bool ns3::TraceSourceAccessor::Connect(ns3::ObjectBase * obj, std::string context, ns3::CallbackBase const & cb) const [member function]
+    cls.add_method('Connect', 
+                   'bool', 
+                   [param('ns3::ObjectBase *', 'obj', transfer_ownership=False), param('std::string', 'context'), param('ns3::CallbackBase const &', 'cb')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## trace-source-accessor.h (module 'core'): bool ns3::TraceSourceAccessor::ConnectWithoutContext(ns3::ObjectBase * obj, ns3::CallbackBase const & cb) const [member function]
+    cls.add_method('ConnectWithoutContext', 
+                   'bool', 
+                   [param('ns3::ObjectBase *', 'obj', transfer_ownership=False), param('ns3::CallbackBase const &', 'cb')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## trace-source-accessor.h (module 'core'): bool ns3::TraceSourceAccessor::Disconnect(ns3::ObjectBase * obj, std::string context, ns3::CallbackBase const & cb) const [member function]
+    cls.add_method('Disconnect', 
+                   'bool', 
+                   [param('ns3::ObjectBase *', 'obj', transfer_ownership=False), param('std::string', 'context'), param('ns3::CallbackBase const &', 'cb')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## trace-source-accessor.h (module 'core'): bool ns3::TraceSourceAccessor::DisconnectWithoutContext(ns3::ObjectBase * obj, ns3::CallbackBase const & cb) const [member function]
+    cls.add_method('DisconnectWithoutContext', 
+                   'bool', 
+                   [param('ns3::ObjectBase *', 'obj', transfer_ownership=False), param('ns3::CallbackBase const &', 'cb')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3Trailer_methods(root_module, cls):
+    cls.add_output_stream_operator()
+    ## trailer.h (module 'network'): ns3::Trailer::Trailer() [constructor]
+    cls.add_constructor([])
+    ## trailer.h (module 'network'): ns3::Trailer::Trailer(ns3::Trailer const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Trailer const &', 'arg0')])
+    ## trailer.h (module 'network'): uint32_t ns3::Trailer::Deserialize(ns3::Buffer::Iterator end) [member function]
+    cls.add_method('Deserialize', 
+                   'uint32_t', 
+                   [param('ns3::Buffer::Iterator', 'end')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## trailer.h (module 'network'): uint32_t ns3::Trailer::Deserialize(ns3::Buffer::Iterator start, ns3::Buffer::Iterator end) [member function]
+    cls.add_method('Deserialize', 
+                   'uint32_t', 
+                   [param('ns3::Buffer::Iterator', 'start'), param('ns3::Buffer::Iterator', 'end')], 
+                   is_virtual=True)
+    ## trailer.h (module 'network'): uint32_t ns3::Trailer::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## trailer.h (module 'network'): static ns3::TypeId ns3::Trailer::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## trailer.h (module 'network'): void ns3::Trailer::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## trailer.h (module 'network'): void ns3::Trailer::Serialize(ns3::Buffer::Iterator start) const [member function]
+    cls.add_method('Serialize', 
+                   'void', 
+                   [param('ns3::Buffer::Iterator', 'start')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3AttributeAccessor_methods(root_module, cls):
+    ## attribute.h (module 'core'): ns3::AttributeAccessor::AttributeAccessor(ns3::AttributeAccessor const & arg0) [constructor]
+    cls.add_constructor([param('ns3::AttributeAccessor const &', 'arg0')])
+    ## attribute.h (module 'core'): ns3::AttributeAccessor::AttributeAccessor() [constructor]
+    cls.add_constructor([])
+    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::Get(ns3::ObjectBase const * object, ns3::AttributeValue & attribute) const [member function]
+    cls.add_method('Get', 
+                   'bool', 
+                   [param('ns3::ObjectBase const *', 'object'), param('ns3::AttributeValue &', 'attribute')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::HasGetter() const [member function]
+    cls.add_method('HasGetter', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::HasSetter() const [member function]
+    cls.add_method('HasSetter', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::Set(ns3::ObjectBase * object, ns3::AttributeValue const & value) const [member function]
+    cls.add_method('Set', 
+                   'bool', 
+                   [param('ns3::ObjectBase *', 'object', transfer_ownership=False), param('ns3::AttributeValue const &', 'value')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3AttributeChecker_methods(root_module, cls):
+    ## attribute.h (module 'core'): ns3::AttributeChecker::AttributeChecker(ns3::AttributeChecker const & arg0) [constructor]
+    cls.add_constructor([param('ns3::AttributeChecker const &', 'arg0')])
+    ## attribute.h (module 'core'): ns3::AttributeChecker::AttributeChecker() [constructor]
+    cls.add_constructor([])
+    ## attribute.h (module 'core'): bool ns3::AttributeChecker::Check(ns3::AttributeValue const & value) const [member function]
+    cls.add_method('Check', 
+                   'bool', 
+                   [param('ns3::AttributeValue const &', 'value')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## attribute.h (module 'core'): bool ns3::AttributeChecker::Copy(ns3::AttributeValue const & source, ns3::AttributeValue & destination) const [member function]
+    cls.add_method('Copy', 
+                   'bool', 
+                   [param('ns3::AttributeValue const &', 'source'), param('ns3::AttributeValue &', 'destination')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## attribute.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeChecker::Create() const [member function]
+    cls.add_method('Create', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## attribute.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeChecker::CreateValidValue(ns3::AttributeValue const & value) const [member function]
+    cls.add_method('CreateValidValue', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [param('ns3::AttributeValue const &', 'value')], 
+                   is_const=True)
+    ## attribute.h (module 'core'): std::string ns3::AttributeChecker::GetUnderlyingTypeInformation() const [member function]
+    cls.add_method('GetUnderlyingTypeInformation', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## attribute.h (module 'core'): std::string ns3::AttributeChecker::GetValueTypeName() const [member function]
+    cls.add_method('GetValueTypeName', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## attribute.h (module 'core'): bool ns3::AttributeChecker::HasUnderlyingTypeInformation() const [member function]
+    cls.add_method('HasUnderlyingTypeInformation', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3AttributeValue_methods(root_module, cls):
+    ## attribute.h (module 'core'): ns3::AttributeValue::AttributeValue(ns3::AttributeValue const & arg0) [constructor]
+    cls.add_constructor([param('ns3::AttributeValue const &', 'arg0')])
+    ## attribute.h (module 'core'): ns3::AttributeValue::AttributeValue() [constructor]
+    cls.add_constructor([])
+    ## attribute.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeValue::Copy() const [member function]
+    cls.add_method('Copy', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## attribute.h (module 'core'): bool ns3::AttributeValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
+    cls.add_method('DeserializeFromString', 
+                   'bool', 
+                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## attribute.h (module 'core'): std::string ns3::AttributeValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
+    cls.add_method('SerializeToString', 
+                   'std::string', 
+                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3CallbackChecker_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackChecker::CallbackChecker() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackChecker::CallbackChecker(ns3::CallbackChecker const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackChecker const &', 'arg0')])
+    return
+
+def register_Ns3CallbackImplBase_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackImplBase::CallbackImplBase() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackImplBase::CallbackImplBase(ns3::CallbackImplBase const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackImplBase const &', 'arg0')])
+    ## callback.h (module 'core'): std::string ns3::CallbackImplBase::GetTypeid() const [member function]
+    cls.add_method('GetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## callback.h (module 'core'): bool ns3::CallbackImplBase::IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other) const [member function]
+    cls.add_method('IsEqual', 
+                   'bool', 
+                   [param('ns3::Ptr< ns3::CallbackImplBase const >', 'other')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::Demangle(std::string const & mangled) [member function]
+    cls.add_method('Demangle', 
+                   'std::string', 
+                   [param('std::string const &', 'mangled')], 
+                   is_static=True, visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['ns3::ObjectBase*'], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['void'], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['ns3::Ptr<ns3::NetDevice> '], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['ns3::Ptr<ns3::Packet const> '], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['unsigned short'], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['ns3::Address const&'], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['ns3::NetDevice::PacketType'], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['ns3::Ptr<ns3::Socket> '], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['bool'], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['unsigned int'], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['ns3::Ipv4Header const&'], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['ns3::Ptr<ns3::Ipv4> '], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['ns3::Ipv4L3Protocol::DropReason'], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['ns3::Ptr<ns3::Ipv6> '], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['ns3::Ipv6Header const&'], visibility='protected')
+    ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
+    cls.add_method('GetCppTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True, template_parameters=['ns3::Ipv6L3Protocol::DropReason'], visibility='protected')
+    return
+
+def register_Ns3CallbackValue_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackValue::CallbackValue(ns3::CallbackValue const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackValue const &', 'arg0')])
+    ## callback.h (module 'core'): ns3::CallbackValue::CallbackValue() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackValue::CallbackValue(ns3::CallbackBase const & base) [constructor]
+    cls.add_constructor([param('ns3::CallbackBase const &', 'base')])
+    ## callback.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::CallbackValue::Copy() const [member function]
+    cls.add_method('Copy', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): bool ns3::CallbackValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
+    cls.add_method('DeserializeFromString', 
+                   'bool', 
+                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_virtual=True)
+    ## callback.h (module 'core'): std::string ns3::CallbackValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
+    cls.add_method('SerializeToString', 
+                   'std::string', 
+                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): void ns3::CallbackValue::Set(ns3::CallbackBase base) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('ns3::CallbackBase', 'base')])
+    return
+
+def register_Ns3EmptyAttributeAccessor_methods(root_module, cls):
+    ## attribute.h (module 'core'): ns3::EmptyAttributeAccessor::EmptyAttributeAccessor(ns3::EmptyAttributeAccessor const & arg0) [constructor]
+    cls.add_constructor([param('ns3::EmptyAttributeAccessor const &', 'arg0')])
+    ## attribute.h (module 'core'): ns3::EmptyAttributeAccessor::EmptyAttributeAccessor() [constructor]
+    cls.add_constructor([])
+    ## attribute.h (module 'core'): bool ns3::EmptyAttributeAccessor::Get(ns3::ObjectBase const * object, ns3::AttributeValue & attribute) const [member function]
+    cls.add_method('Get', 
+                   'bool', 
+                   [param('ns3::ObjectBase const *', 'object'), param('ns3::AttributeValue &', 'attribute')], 
+                   is_const=True, is_virtual=True)
+    ## attribute.h (module 'core'): bool ns3::EmptyAttributeAccessor::HasGetter() const [member function]
+    cls.add_method('HasGetter', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## attribute.h (module 'core'): bool ns3::EmptyAttributeAccessor::HasSetter() const [member function]
+    cls.add_method('HasSetter', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## attribute.h (module 'core'): bool ns3::EmptyAttributeAccessor::Set(ns3::ObjectBase * object, ns3::AttributeValue const & value) const [member function]
+    cls.add_method('Set', 
+                   'bool', 
+                   [param('ns3::ObjectBase *', 'object'), param('ns3::AttributeValue const &', 'value')], 
+                   is_const=True, is_virtual=True)
+    return
+
+def register_Ns3EmptyAttributeChecker_methods(root_module, cls):
+    ## attribute.h (module 'core'): ns3::EmptyAttributeChecker::EmptyAttributeChecker(ns3::EmptyAttributeChecker const & arg0) [constructor]
+    cls.add_constructor([param('ns3::EmptyAttributeChecker const &', 'arg0')])
+    ## attribute.h (module 'core'): ns3::EmptyAttributeChecker::EmptyAttributeChecker() [constructor]
+    cls.add_constructor([])
+    ## attribute.h (module 'core'): bool ns3::EmptyAttributeChecker::Check(ns3::AttributeValue const & value) const [member function]
+    cls.add_method('Check', 
+                   'bool', 
+                   [param('ns3::AttributeValue const &', 'value')], 
+                   is_const=True, is_virtual=True)
+    ## attribute.h (module 'core'): bool ns3::EmptyAttributeChecker::Copy(ns3::AttributeValue const & source, ns3::AttributeValue & destination) const [member function]
+    cls.add_method('Copy', 
+                   'bool', 
+                   [param('ns3::AttributeValue const &', 'source'), param('ns3::AttributeValue &', 'destination')], 
+                   is_const=True, is_virtual=True)
+    ## attribute.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::EmptyAttributeChecker::Create() const [member function]
+    cls.add_method('Create', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## attribute.h (module 'core'): std::string ns3::EmptyAttributeChecker::GetUnderlyingTypeInformation() const [member function]
+    cls.add_method('GetUnderlyingTypeInformation', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## attribute.h (module 'core'): std::string ns3::EmptyAttributeChecker::GetValueTypeName() const [member function]
+    cls.add_method('GetValueTypeName', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## attribute.h (module 'core'): bool ns3::EmptyAttributeChecker::HasUnderlyingTypeInformation() const [member function]
+    cls.add_method('HasUnderlyingTypeInformation', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    return
+
+def register_Ns3EmptyAttributeValue_methods(root_module, cls):
+    ## attribute.h (module 'core'): ns3::EmptyAttributeValue::EmptyAttributeValue(ns3::EmptyAttributeValue const & arg0) [constructor]
+    cls.add_constructor([param('ns3::EmptyAttributeValue const &', 'arg0')])
+    ## attribute.h (module 'core'): ns3::EmptyAttributeValue::EmptyAttributeValue() [constructor]
+    cls.add_constructor([])
+    ## attribute.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::EmptyAttributeValue::Copy() const [member function]
+    cls.add_method('Copy', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [], 
+                   is_const=True, is_virtual=True, visibility='private')
+    ## attribute.h (module 'core'): bool ns3::EmptyAttributeValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
+    cls.add_method('DeserializeFromString', 
+                   'bool', 
+                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_virtual=True, visibility='private')
+    ## attribute.h (module 'core'): std::string ns3::EmptyAttributeValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
+    cls.add_method('SerializeToString', 
+                   'std::string', 
+                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_const=True, is_virtual=True, visibility='private')
+    return
+
+def register_Ns3EventImpl_methods(root_module, cls):
+    ## event-impl.h (module 'core'): ns3::EventImpl::EventImpl(ns3::EventImpl const & arg0) [constructor]
+    cls.add_constructor([param('ns3::EventImpl const &', 'arg0')])
+    ## event-impl.h (module 'core'): ns3::EventImpl::EventImpl() [constructor]
+    cls.add_constructor([])
+    ## event-impl.h (module 'core'): void ns3::EventImpl::Cancel() [member function]
+    cls.add_method('Cancel', 
+                   'void', 
+                   [])
+    ## event-impl.h (module 'core'): void ns3::EventImpl::Invoke() [member function]
+    cls.add_method('Invoke', 
+                   'void', 
+                   [])
+    ## event-impl.h (module 'core'): bool ns3::EventImpl::IsCancelled() [member function]
+    cls.add_method('IsCancelled', 
+                   'bool', 
+                   [])
+    ## event-impl.h (module 'core'): void ns3::EventImpl::Notify() [member function]
+    cls.add_method('Notify', 
+                   'void', 
+                   [], 
+                   is_pure_virtual=True, is_virtual=True, visibility='protected')
+    return
+
+def register_Ns3FlowClassifier_methods(root_module, cls):
+    ## flow-classifier.h (module 'flow-monitor'): ns3::FlowClassifier::FlowClassifier() [constructor]
+    cls.add_constructor([])
+    ## flow-classifier.h (module 'flow-monitor'): void ns3::FlowClassifier::SerializeToXmlStream(std::ostream & os, uint16_t indent) const [member function]
+    cls.add_method('SerializeToXmlStream', 
+                   'void', 
+                   [param('std::ostream &', 'os'), param('uint16_t', 'indent')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## flow-classifier.h (module 'flow-monitor'): ns3::FlowId ns3::FlowClassifier::GetNewFlowId() [member function]
+    cls.add_method('GetNewFlowId', 
+                   'ns3::FlowId', 
+                   [], 
+                   visibility='protected')
+    ## flow-classifier.h (module 'flow-monitor'): void ns3::FlowClassifier::Indent(std::ostream & os, uint16_t level) const [member function]
+    cls.add_method('Indent', 
+                   'void', 
+                   [param('std::ostream &', 'os'), param('uint16_t', 'level')], 
+                   is_const=True, visibility='protected')
+    return
+
+def register_Ns3FlowMonitor_methods(root_module, cls):
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowMonitor(ns3::FlowMonitor const & arg0) [constructor]
+    cls.add_constructor([param('ns3::FlowMonitor const &', 'arg0')])
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowMonitor() [constructor]
+    cls.add_constructor([])
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::AddFlowClassifier(ns3::Ptr<ns3::FlowClassifier> classifier) [member function]
+    cls.add_method('AddFlowClassifier', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::FlowClassifier >', 'classifier')])
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::AddProbe(ns3::Ptr<ns3::FlowProbe> probe) [member function]
+    cls.add_method('AddProbe', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::FlowProbe >', 'probe')])
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::CheckForLostPackets() [member function]
+    cls.add_method('CheckForLostPackets', 
+                   'void', 
+                   [])
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::CheckForLostPackets(ns3::Time maxDelay) [member function]
+    cls.add_method('CheckForLostPackets', 
+                   'void', 
+                   [param('ns3::Time', 'maxDelay')])
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowProbeContainer const & ns3::FlowMonitor::GetAllProbes() const [member function]
+    cls.add_method('GetAllProbes', 
+                   'ns3::FlowMonitor::FlowProbeContainer const &', 
+                   [], 
+                   is_const=True)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStatsContainer const & ns3::FlowMonitor::GetFlowStats() const [member function]
+    cls.add_method('GetFlowStats', 
+                   'ns3::FlowMonitor::FlowStatsContainer const &', 
+                   [], 
+                   is_const=True)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::TypeId ns3::FlowMonitor::GetInstanceTypeId() const [member function]
+    cls.add_method('GetInstanceTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## flow-monitor.h (module 'flow-monitor'): static ns3::TypeId ns3::FlowMonitor::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::ReportDrop(ns3::Ptr<ns3::FlowProbe> probe, ns3::FlowId flowId, ns3::FlowPacketId packetId, uint32_t packetSize, uint32_t reasonCode) [member function]
+    cls.add_method('ReportDrop', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::FlowProbe >', 'probe'), param('uint32_t', 'flowId'), param('uint32_t', 'packetId'), param('uint32_t', 'packetSize'), param('uint32_t', 'reasonCode')])
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::ReportFirstTx(ns3::Ptr<ns3::FlowProbe> probe, ns3::FlowId flowId, ns3::FlowPacketId packetId, uint32_t packetSize) [member function]
+    cls.add_method('ReportFirstTx', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::FlowProbe >', 'probe'), param('uint32_t', 'flowId'), param('uint32_t', 'packetId'), param('uint32_t', 'packetSize')])
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::ReportForwarding(ns3::Ptr<ns3::FlowProbe> probe, ns3::FlowId flowId, ns3::FlowPacketId packetId, uint32_t packetSize) [member function]
+    cls.add_method('ReportForwarding', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::FlowProbe >', 'probe'), param('uint32_t', 'flowId'), param('uint32_t', 'packetId'), param('uint32_t', 'packetSize')])
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::ReportLastRx(ns3::Ptr<ns3::FlowProbe> probe, ns3::FlowId flowId, ns3::FlowPacketId packetId, uint32_t packetSize) [member function]
+    cls.add_method('ReportLastRx', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::FlowProbe >', 'probe'), param('uint32_t', 'flowId'), param('uint32_t', 'packetId'), param('uint32_t', 'packetSize')])
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::SerializeToXmlFile(std::string fileName, bool enableHistograms, bool enableProbes) [member function]
+    cls.add_method('SerializeToXmlFile', 
+                   'void', 
+                   [param('std::string', 'fileName'), param('bool', 'enableHistograms'), param('bool', 'enableProbes')])
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::SerializeToXmlStream(std::ostream & os, uint16_t indent, bool enableHistograms, bool enableProbes) [member function]
+    cls.add_method('SerializeToXmlStream', 
+                   'void', 
+                   [param('std::ostream &', 'os'), param('uint16_t', 'indent'), param('bool', 'enableHistograms'), param('bool', 'enableProbes')])
+    ## flow-monitor.h (module 'flow-monitor'): std::string ns3::FlowMonitor::SerializeToXmlString(uint16_t indent, bool enableHistograms, bool enableProbes) [member function]
+    cls.add_method('SerializeToXmlString', 
+                   'std::string', 
+                   [param('uint16_t', 'indent'), param('bool', 'enableHistograms'), param('bool', 'enableProbes')])
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::Start(ns3::Time const & time) [member function]
+    cls.add_method('Start', 
+                   'void', 
+                   [param('ns3::Time const &', 'time')])
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::StartRightNow() [member function]
+    cls.add_method('StartRightNow', 
+                   'void', 
+                   [])
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::Stop(ns3::Time const & time) [member function]
+    cls.add_method('Stop', 
+                   'void', 
+                   [param('ns3::Time const &', 'time')])
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::StopRightNow() [member function]
+    cls.add_method('StopRightNow', 
+                   'void', 
+                   [])
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::DoDispose() [member function]
+    cls.add_method('DoDispose', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    ## flow-monitor.h (module 'flow-monitor'): void ns3::FlowMonitor::NotifyConstructionCompleted() [member function]
+    cls.add_method('NotifyConstructionCompleted', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    return
+
+def register_Ns3FlowMonitorFlowStats_methods(root_module, cls):
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::FlowStats() [constructor]
+    cls.add_constructor([])
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::FlowStats(ns3::FlowMonitor::FlowStats const & arg0) [constructor]
+    cls.add_constructor([param('ns3::FlowMonitor::FlowStats const &', 'arg0')])
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::bytesDropped [variable]
+    cls.add_instance_attribute('bytesDropped', 'std::vector< unsigned long >', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::delayHistogram [variable]
+    cls.add_instance_attribute('delayHistogram', 'ns3::Histogram', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::delaySum [variable]
+    cls.add_instance_attribute('delaySum', 'ns3::Time', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::flowInterruptionsHistogram [variable]
+    cls.add_instance_attribute('flowInterruptionsHistogram', 'ns3::Histogram', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::jitterHistogram [variable]
+    cls.add_instance_attribute('jitterHistogram', 'ns3::Histogram', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::jitterSum [variable]
+    cls.add_instance_attribute('jitterSum', 'ns3::Time', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::lastDelay [variable]
+    cls.add_instance_attribute('lastDelay', 'ns3::Time', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::lostPackets [variable]
+    cls.add_instance_attribute('lostPackets', 'uint32_t', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::packetSizeHistogram [variable]
+    cls.add_instance_attribute('packetSizeHistogram', 'ns3::Histogram', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::packetsDropped [variable]
+    cls.add_instance_attribute('packetsDropped', 'std::vector< unsigned int >', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::rxBytes [variable]
+    cls.add_instance_attribute('rxBytes', 'uint64_t', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::rxPackets [variable]
+    cls.add_instance_attribute('rxPackets', 'uint32_t', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::timeFirstRxPacket [variable]
+    cls.add_instance_attribute('timeFirstRxPacket', 'ns3::Time', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::timeFirstTxPacket [variable]
+    cls.add_instance_attribute('timeFirstTxPacket', 'ns3::Time', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::timeLastRxPacket [variable]
+    cls.add_instance_attribute('timeLastRxPacket', 'ns3::Time', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::timeLastTxPacket [variable]
+    cls.add_instance_attribute('timeLastTxPacket', 'ns3::Time', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::timesForwarded [variable]
+    cls.add_instance_attribute('timesForwarded', 'uint32_t', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::txBytes [variable]
+    cls.add_instance_attribute('txBytes', 'uint64_t', is_const=False)
+    ## flow-monitor.h (module 'flow-monitor'): ns3::FlowMonitor::FlowStats::txPackets [variable]
+    cls.add_instance_attribute('txPackets', 'uint32_t', is_const=False)
+    return
+
+def register_Ns3FlowProbe_methods(root_module, cls):
+    ## flow-probe.h (module 'flow-monitor'): void ns3::FlowProbe::AddPacketDropStats(ns3::FlowId flowId, uint32_t packetSize, uint32_t reasonCode) [member function]
+    cls.add_method('AddPacketDropStats', 
+                   'void', 
+                   [param('uint32_t', 'flowId'), param('uint32_t', 'packetSize'), param('uint32_t', 'reasonCode')])
+    ## flow-probe.h (module 'flow-monitor'): void ns3::FlowProbe::AddPacketStats(ns3::FlowId flowId, uint32_t packetSize, ns3::Time delayFromFirstProbe) [member function]
+    cls.add_method('AddPacketStats', 
+                   'void', 
+                   [param('uint32_t', 'flowId'), param('uint32_t', 'packetSize'), param('ns3::Time', 'delayFromFirstProbe')])
+    ## flow-probe.h (module 'flow-monitor'): ns3::FlowProbe::Stats ns3::FlowProbe::GetStats() const [member function]
+    cls.add_method('GetStats', 
+                   'ns3::FlowProbe::Stats', 
+                   [], 
+                   is_const=True)
+    ## flow-probe.h (module 'flow-monitor'): static ns3::TypeId ns3::FlowProbe::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## flow-probe.h (module 'flow-monitor'): void ns3::FlowProbe::SerializeToXmlStream(std::ostream & os, uint16_t indent, uint32_t index) const [member function]
+    cls.add_method('SerializeToXmlStream', 
+                   'void', 
+                   [param('std::ostream &', 'os'), param('uint16_t', 'indent'), param('uint32_t', 'index')], 
+                   is_const=True)
+    ## flow-probe.h (module 'flow-monitor'): ns3::FlowProbe::FlowProbe(ns3::Ptr<ns3::FlowMonitor> flowMonitor) [constructor]
+    cls.add_constructor([param('ns3::Ptr< ns3::FlowMonitor >', 'flowMonitor')], 
+                        visibility='protected')
+    ## flow-probe.h (module 'flow-monitor'): void ns3::FlowProbe::DoDispose() [member function]
+    cls.add_method('DoDispose', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    return
+
+def register_Ns3FlowProbeFlowStats_methods(root_module, cls):
+    ## flow-probe.h (module 'flow-monitor'): ns3::FlowProbe::FlowStats::FlowStats(ns3::FlowProbe::FlowStats const & arg0) [constructor]
+    cls.add_constructor([param('ns3::FlowProbe::FlowStats const &', 'arg0')])
+    ## flow-probe.h (module 'flow-monitor'): ns3::FlowProbe::FlowStats::FlowStats() [constructor]
+    cls.add_constructor([])
+    ## flow-probe.h (module 'flow-monitor'): ns3::FlowProbe::FlowStats::bytes [variable]
+    cls.add_instance_attribute('bytes', 'uint64_t', is_const=False)
+    ## flow-probe.h (module 'flow-monitor'): ns3::FlowProbe::FlowStats::bytesDropped [variable]
+    cls.add_instance_attribute('bytesDropped', 'std::vector< unsigned long >', is_const=False)
+    ## flow-probe.h (module 'flow-monitor'): ns3::FlowProbe::FlowStats::delayFromFirstProbeSum [variable]
+    cls.add_instance_attribute('delayFromFirstProbeSum', 'ns3::Time', is_const=False)
+    ## flow-probe.h (module 'flow-monitor'): ns3::FlowProbe::FlowStats::packets [variable]
+    cls.add_instance_attribute('packets', 'uint32_t', is_const=False)
+    ## flow-probe.h (module 'flow-monitor'): ns3::FlowProbe::FlowStats::packetsDropped [variable]
+    cls.add_instance_attribute('packetsDropped', 'std::vector< unsigned int >', is_const=False)
+    return
+
+def register_Ns3Ipv4_methods(root_module, cls):
+    ## ipv4.h (module 'internet'): ns3::Ipv4::Ipv4(ns3::Ipv4 const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv4 const &', 'arg0')])
+    ## ipv4.h (module 'internet'): ns3::Ipv4::Ipv4() [constructor]
+    cls.add_constructor([])
+    ## ipv4.h (module 'internet'): bool ns3::Ipv4::AddAddress(uint32_t interface, ns3::Ipv4InterfaceAddress address) [member function]
+    cls.add_method('AddAddress', 
+                   'bool', 
+                   [param('uint32_t', 'interface'), param('ns3::Ipv4InterfaceAddress', 'address')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): uint32_t ns3::Ipv4::AddInterface(ns3::Ptr<ns3::NetDevice> device) [member function]
+    cls.add_method('AddInterface', 
+                   'uint32_t', 
+                   [param('ns3::Ptr< ns3::NetDevice >', 'device')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): ns3::Ptr<ns3::Socket> ns3::Ipv4::CreateRawSocket() [member function]
+    cls.add_method('CreateRawSocket', 
+                   'ns3::Ptr< ns3::Socket >', 
+                   [], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): void ns3::Ipv4::DeleteRawSocket(ns3::Ptr<ns3::Socket> socket) [member function]
+    cls.add_method('DeleteRawSocket', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Socket >', 'socket')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): ns3::Ipv4InterfaceAddress ns3::Ipv4::GetAddress(uint32_t interface, uint32_t addressIndex) const [member function]
+    cls.add_method('GetAddress', 
+                   'ns3::Ipv4InterfaceAddress', 
+                   [param('uint32_t', 'interface'), param('uint32_t', 'addressIndex')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): int32_t ns3::Ipv4::GetInterfaceForAddress(ns3::Ipv4Address address) const [member function]
+    cls.add_method('GetInterfaceForAddress', 
+                   'int32_t', 
+                   [param('ns3::Ipv4Address', 'address')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): int32_t ns3::Ipv4::GetInterfaceForDevice(ns3::Ptr<const ns3::NetDevice> device) const [member function]
+    cls.add_method('GetInterfaceForDevice', 
+                   'int32_t', 
+                   [param('ns3::Ptr< ns3::NetDevice const >', 'device')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): int32_t ns3::Ipv4::GetInterfaceForPrefix(ns3::Ipv4Address address, ns3::Ipv4Mask mask) const [member function]
+    cls.add_method('GetInterfaceForPrefix', 
+                   'int32_t', 
+                   [param('ns3::Ipv4Address', 'address'), param('ns3::Ipv4Mask', 'mask')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): uint16_t ns3::Ipv4::GetMetric(uint32_t interface) const [member function]
+    cls.add_method('GetMetric', 
+                   'uint16_t', 
+                   [param('uint32_t', 'interface')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): uint16_t ns3::Ipv4::GetMtu(uint32_t interface) const [member function]
+    cls.add_method('GetMtu', 
+                   'uint16_t', 
+                   [param('uint32_t', 'interface')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): uint32_t ns3::Ipv4::GetNAddresses(uint32_t interface) const [member function]
+    cls.add_method('GetNAddresses', 
+                   'uint32_t', 
+                   [param('uint32_t', 'interface')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): uint32_t ns3::Ipv4::GetNInterfaces() const [member function]
+    cls.add_method('GetNInterfaces', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): ns3::Ptr<ns3::NetDevice> ns3::Ipv4::GetNetDevice(uint32_t interface) [member function]
+    cls.add_method('GetNetDevice', 
+                   'ns3::Ptr< ns3::NetDevice >', 
+                   [param('uint32_t', 'interface')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): ns3::Ptr<ns3::IpL4Protocol> ns3::Ipv4::GetProtocol(int protocolNumber) const [member function]
+    cls.add_method('GetProtocol', 
+                   'ns3::Ptr< ns3::IpL4Protocol >', 
+                   [param('int', 'protocolNumber')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): ns3::Ptr<ns3::IpL4Protocol> ns3::Ipv4::GetProtocol(int protocolNumber, int32_t interfaceIndex) const [member function]
+    cls.add_method('GetProtocol', 
+                   'ns3::Ptr< ns3::IpL4Protocol >', 
+                   [param('int', 'protocolNumber'), param('int32_t', 'interfaceIndex')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): ns3::Ptr<ns3::Ipv4RoutingProtocol> ns3::Ipv4::GetRoutingProtocol() const [member function]
+    cls.add_method('GetRoutingProtocol', 
+                   'ns3::Ptr< ns3::Ipv4RoutingProtocol >', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): static ns3::TypeId ns3::Ipv4::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## ipv4.h (module 'internet'): void ns3::Ipv4::Insert(ns3::Ptr<ns3::IpL4Protocol> protocol) [member function]
+    cls.add_method('Insert', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): void ns3::Ipv4::Insert(ns3::Ptr<ns3::IpL4Protocol> protocol, uint32_t interfaceIndex) [member function]
+    cls.add_method('Insert', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol'), param('uint32_t', 'interfaceIndex')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): bool ns3::Ipv4::IsDestinationAddress(ns3::Ipv4Address address, uint32_t iif) const [member function]
+    cls.add_method('IsDestinationAddress', 
+                   'bool', 
+                   [param('ns3::Ipv4Address', 'address'), param('uint32_t', 'iif')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): bool ns3::Ipv4::IsForwarding(uint32_t interface) const [member function]
+    cls.add_method('IsForwarding', 
+                   'bool', 
+                   [param('uint32_t', 'interface')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): bool ns3::Ipv4::IsUp(uint32_t interface) const [member function]
+    cls.add_method('IsUp', 
+                   'bool', 
+                   [param('uint32_t', 'interface')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): void ns3::Ipv4::Remove(ns3::Ptr<ns3::IpL4Protocol> protocol) [member function]
+    cls.add_method('Remove', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): void ns3::Ipv4::Remove(ns3::Ptr<ns3::IpL4Protocol> protocol, uint32_t interfaceIndex) [member function]
+    cls.add_method('Remove', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol'), param('uint32_t', 'interfaceIndex')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): bool ns3::Ipv4::RemoveAddress(uint32_t interface, uint32_t addressIndex) [member function]
+    cls.add_method('RemoveAddress', 
+                   'bool', 
+                   [param('uint32_t', 'interface'), param('uint32_t', 'addressIndex')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): bool ns3::Ipv4::RemoveAddress(uint32_t interface, ns3::Ipv4Address address) [member function]
+    cls.add_method('RemoveAddress', 
+                   'bool', 
+                   [param('uint32_t', 'interface'), param('ns3::Ipv4Address', 'address')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4::SelectSourceAddress(ns3::Ptr<const ns3::NetDevice> device, ns3::Ipv4Address dst, ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e scope) [member function]
+    cls.add_method('SelectSourceAddress', 
+                   'ns3::Ipv4Address', 
+                   [param('ns3::Ptr< ns3::NetDevice const >', 'device'), param('ns3::Ipv4Address', 'dst'), param('ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e', 'scope')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): void ns3::Ipv4::Send(ns3::Ptr<ns3::Packet> packet, ns3::Ipv4Address source, ns3::Ipv4Address destination, uint8_t protocol, ns3::Ptr<ns3::Ipv4Route> route) [member function]
+    cls.add_method('Send', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Ipv4Address', 'source'), param('ns3::Ipv4Address', 'destination'), param('uint8_t', 'protocol'), param('ns3::Ptr< ns3::Ipv4Route >', 'route')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): void ns3::Ipv4::SendWithHeader(ns3::Ptr<ns3::Packet> packet, ns3::Ipv4Header ipHeader, ns3::Ptr<ns3::Ipv4Route> route) [member function]
+    cls.add_method('SendWithHeader', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Ipv4Header', 'ipHeader'), param('ns3::Ptr< ns3::Ipv4Route >', 'route')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): void ns3::Ipv4::SetDown(uint32_t interface) [member function]
+    cls.add_method('SetDown', 
+                   'void', 
+                   [param('uint32_t', 'interface')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): void ns3::Ipv4::SetForwarding(uint32_t interface, bool val) [member function]
+    cls.add_method('SetForwarding', 
+                   'void', 
+                   [param('uint32_t', 'interface'), param('bool', 'val')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): void ns3::Ipv4::SetMetric(uint32_t interface, uint16_t metric) [member function]
+    cls.add_method('SetMetric', 
+                   'void', 
+                   [param('uint32_t', 'interface'), param('uint16_t', 'metric')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): void ns3::Ipv4::SetRoutingProtocol(ns3::Ptr<ns3::Ipv4RoutingProtocol> routingProtocol) [member function]
+    cls.add_method('SetRoutingProtocol', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Ipv4RoutingProtocol >', 'routingProtocol')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): void ns3::Ipv4::SetUp(uint32_t interface) [member function]
+    cls.add_method('SetUp', 
+                   'void', 
+                   [param('uint32_t', 'interface')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4::SourceAddressSelection(uint32_t interface, ns3::Ipv4Address dest) [member function]
+    cls.add_method('SourceAddressSelection', 
+                   'ns3::Ipv4Address', 
+                   [param('uint32_t', 'interface'), param('ns3::Ipv4Address', 'dest')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4.h (module 'internet'): ns3::Ipv4::IF_ANY [variable]
+    cls.add_static_attribute('IF_ANY', 'uint32_t const', is_const=True)
+    ## ipv4.h (module 'internet'): bool ns3::Ipv4::GetIpForward() const [member function]
+    cls.add_method('GetIpForward', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True, visibility='private')
+    ## ipv4.h (module 'internet'): bool ns3::Ipv4::GetWeakEsModel() const [member function]
+    cls.add_method('GetWeakEsModel', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True, visibility='private')
+    ## ipv4.h (module 'internet'): void ns3::Ipv4::SetIpForward(bool forward) [member function]
+    cls.add_method('SetIpForward', 
+                   'void', 
+                   [param('bool', 'forward')], 
+                   is_pure_virtual=True, is_virtual=True, visibility='private')
+    ## ipv4.h (module 'internet'): void ns3::Ipv4::SetWeakEsModel(bool model) [member function]
+    cls.add_method('SetWeakEsModel', 
+                   'void', 
+                   [param('bool', 'model')], 
+                   is_pure_virtual=True, is_virtual=True, visibility='private')
+    return
+
+def register_Ns3Ipv4AddressChecker_methods(root_module, cls):
+    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressChecker::Ipv4AddressChecker() [constructor]
+    cls.add_constructor([])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressChecker::Ipv4AddressChecker(ns3::Ipv4AddressChecker const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv4AddressChecker const &', 'arg0')])
+    return
+
+def register_Ns3Ipv4AddressValue_methods(root_module, cls):
+    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue::Ipv4AddressValue() [constructor]
+    cls.add_constructor([])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue::Ipv4AddressValue(ns3::Ipv4Address const & value) [constructor]
+    cls.add_constructor([param('ns3::Ipv4Address const &', 'value')])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue::Ipv4AddressValue(ns3::Ipv4AddressValue const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv4AddressValue const &', 'arg0')])
+    ## ipv4-address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::Ipv4AddressValue::Copy() const [member function]
+    cls.add_method('Copy', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-address.h (module 'network'): bool ns3::Ipv4AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
+    cls.add_method('DeserializeFromString', 
+                   'bool', 
+                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_virtual=True)
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Address ns3::Ipv4AddressValue::Get() const [member function]
+    cls.add_method('Get', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): std::string ns3::Ipv4AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
+    cls.add_method('SerializeToString', 
+                   'std::string', 
+                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-address.h (module 'network'): void ns3::Ipv4AddressValue::Set(ns3::Ipv4Address const & value) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('ns3::Ipv4Address const &', 'value')])
+    return
+
+def register_Ns3Ipv4FlowClassifier_methods(root_module, cls):
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): ns3::Ipv4FlowClassifier::Ipv4FlowClassifier() [constructor]
+    cls.add_constructor([])
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): bool ns3::Ipv4FlowClassifier::Classify(ns3::Ipv4Header const & ipHeader, ns3::Ptr<const ns3::Packet> ipPayload, uint32_t * out_flowId, uint32_t * out_packetId) [member function]
+    cls.add_method('Classify', 
+                   'bool', 
+                   [param('ns3::Ipv4Header const &', 'ipHeader'), param('ns3::Ptr< ns3::Packet const >', 'ipPayload'), param('uint32_t *', 'out_flowId'), param('uint32_t *', 'out_packetId')])
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): ns3::Ipv4FlowClassifier::FiveTuple ns3::Ipv4FlowClassifier::FindFlow(ns3::FlowId flowId) const [member function]
+    cls.add_method('FindFlow', 
+                   'ns3::Ipv4FlowClassifier::FiveTuple', 
+                   [param('uint32_t', 'flowId')], 
+                   is_const=True)
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): std::vector<std::pair<ns3::Ipv4Header::DscpType, unsigned int>, std::allocator<std::pair<ns3::Ipv4Header::DscpType, unsigned int>>> ns3::Ipv4FlowClassifier::GetDscpCounts(ns3::FlowId flowId) const [member function]
+    cls.add_method('GetDscpCounts', 
+                   'std::vector< std::pair< ns3::Ipv4Header::DscpType, unsigned int > >', 
+                   [param('uint32_t', 'flowId')], 
+                   is_const=True)
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): void ns3::Ipv4FlowClassifier::SerializeToXmlStream(std::ostream & os, uint16_t indent) const [member function]
+    cls.add_method('SerializeToXmlStream', 
+                   'void', 
+                   [param('std::ostream &', 'os'), param('uint16_t', 'indent')], 
+                   is_const=True, is_virtual=True)
+    return
+
+def register_Ns3Ipv4FlowClassifierFiveTuple_methods(root_module, cls):
+    cls.add_binary_comparison_operator('<')
+    cls.add_binary_comparison_operator('==')
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): ns3::Ipv4FlowClassifier::FiveTuple::FiveTuple() [constructor]
+    cls.add_constructor([])
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): ns3::Ipv4FlowClassifier::FiveTuple::FiveTuple(ns3::Ipv4FlowClassifier::FiveTuple const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv4FlowClassifier::FiveTuple const &', 'arg0')])
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): ns3::Ipv4FlowClassifier::FiveTuple::destinationAddress [variable]
+    cls.add_instance_attribute('destinationAddress', 'ns3::Ipv4Address', is_const=False)
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): ns3::Ipv4FlowClassifier::FiveTuple::destinationPort [variable]
+    cls.add_instance_attribute('destinationPort', 'uint16_t', is_const=False)
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): ns3::Ipv4FlowClassifier::FiveTuple::protocol [variable]
+    cls.add_instance_attribute('protocol', 'uint8_t', is_const=False)
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): ns3::Ipv4FlowClassifier::FiveTuple::sourceAddress [variable]
+    cls.add_instance_attribute('sourceAddress', 'ns3::Ipv4Address', is_const=False)
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): ns3::Ipv4FlowClassifier::FiveTuple::sourcePort [variable]
+    cls.add_instance_attribute('sourcePort', 'uint16_t', is_const=False)
+    return
+
+def register_Ns3Ipv4FlowClassifierSortByCount_methods(root_module, cls):
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): ns3::Ipv4FlowClassifier::SortByCount::SortByCount() [constructor]
+    cls.add_constructor([])
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): ns3::Ipv4FlowClassifier::SortByCount::SortByCount(ns3::Ipv4FlowClassifier::SortByCount const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv4FlowClassifier::SortByCount const &', 'arg0')])
+    ## ipv4-flow-classifier.h (module 'flow-monitor'): bool ns3::Ipv4FlowClassifier::SortByCount::operator()(std::pair<ns3::Ipv4Header::DscpType, unsigned int> left, std::pair<ns3::Ipv4Header::DscpType, unsigned int> right) [member operator]
+    cls.add_method('operator()', 
+                   'bool', 
+                   [param('std::pair< ns3::Ipv4Header::DscpType, unsigned int >', 'left'), param('std::pair< ns3::Ipv4Header::DscpType, unsigned int >', 'right')], 
+                   custom_name='__call__')
+    return
+
+def register_Ns3Ipv4FlowProbe_methods(root_module, cls):
+    ## ipv4-flow-probe.h (module 'flow-monitor'): ns3::Ipv4FlowProbe::Ipv4FlowProbe(ns3::Ptr<ns3::FlowMonitor> monitor, ns3::Ptr<ns3::Ipv4FlowClassifier> classifier, ns3::Ptr<ns3::Node> node) [constructor]
+    cls.add_constructor([param('ns3::Ptr< ns3::FlowMonitor >', 'monitor'), param('ns3::Ptr< ns3::Ipv4FlowClassifier >', 'classifier'), param('ns3::Ptr< ns3::Node >', 'node')])
+    ## ipv4-flow-probe.h (module 'flow-monitor'): static ns3::TypeId ns3::Ipv4FlowProbe::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## ipv4-flow-probe.h (module 'flow-monitor'): void ns3::Ipv4FlowProbe::DoDispose() [member function]
+    cls.add_method('DoDispose', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    return
+
+def register_Ns3Ipv4L3Protocol_methods(root_module, cls):
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ipv4L3Protocol::Ipv4L3Protocol() [constructor]
+    cls.add_constructor([])
+    ## ipv4-l3-protocol.h (module 'internet'): bool ns3::Ipv4L3Protocol::AddAddress(uint32_t i, ns3::Ipv4InterfaceAddress address) [member function]
+    cls.add_method('AddAddress', 
+                   'bool', 
+                   [param('uint32_t', 'i'), param('ns3::Ipv4InterfaceAddress', 'address')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): uint32_t ns3::Ipv4L3Protocol::AddInterface(ns3::Ptr<ns3::NetDevice> device) [member function]
+    cls.add_method('AddInterface', 
+                   'uint32_t', 
+                   [param('ns3::Ptr< ns3::NetDevice >', 'device')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ptr<ns3::Socket> ns3::Ipv4L3Protocol::CreateRawSocket() [member function]
+    cls.add_method('CreateRawSocket', 
+                   'ns3::Ptr< ns3::Socket >', 
+                   [], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::DeleteRawSocket(ns3::Ptr<ns3::Socket> socket) [member function]
+    cls.add_method('DeleteRawSocket', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Socket >', 'socket')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ipv4InterfaceAddress ns3::Ipv4L3Protocol::GetAddress(uint32_t interfaceIndex, uint32_t addressIndex) const [member function]
+    cls.add_method('GetAddress', 
+                   'ns3::Ipv4InterfaceAddress', 
+                   [param('uint32_t', 'interfaceIndex'), param('uint32_t', 'addressIndex')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ptr<ns3::Ipv4Interface> ns3::Ipv4L3Protocol::GetInterface(uint32_t i) const [member function]
+    cls.add_method('GetInterface', 
+                   'ns3::Ptr< ns3::Ipv4Interface >', 
+                   [param('uint32_t', 'i')], 
+                   is_const=True)
+    ## ipv4-l3-protocol.h (module 'internet'): int32_t ns3::Ipv4L3Protocol::GetInterfaceForAddress(ns3::Ipv4Address addr) const [member function]
+    cls.add_method('GetInterfaceForAddress', 
+                   'int32_t', 
+                   [param('ns3::Ipv4Address', 'addr')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): int32_t ns3::Ipv4L3Protocol::GetInterfaceForDevice(ns3::Ptr<const ns3::NetDevice> device) const [member function]
+    cls.add_method('GetInterfaceForDevice', 
+                   'int32_t', 
+                   [param('ns3::Ptr< ns3::NetDevice const >', 'device')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): int32_t ns3::Ipv4L3Protocol::GetInterfaceForPrefix(ns3::Ipv4Address addr, ns3::Ipv4Mask mask) const [member function]
+    cls.add_method('GetInterfaceForPrefix', 
+                   'int32_t', 
+                   [param('ns3::Ipv4Address', 'addr'), param('ns3::Ipv4Mask', 'mask')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): uint16_t ns3::Ipv4L3Protocol::GetMetric(uint32_t i) const [member function]
+    cls.add_method('GetMetric', 
+                   'uint16_t', 
+                   [param('uint32_t', 'i')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): uint16_t ns3::Ipv4L3Protocol::GetMtu(uint32_t i) const [member function]
+    cls.add_method('GetMtu', 
+                   'uint16_t', 
+                   [param('uint32_t', 'i')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): uint32_t ns3::Ipv4L3Protocol::GetNAddresses(uint32_t interface) const [member function]
+    cls.add_method('GetNAddresses', 
+                   'uint32_t', 
+                   [param('uint32_t', 'interface')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): uint32_t ns3::Ipv4L3Protocol::GetNInterfaces() const [member function]
+    cls.add_method('GetNInterfaces', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ptr<ns3::NetDevice> ns3::Ipv4L3Protocol::GetNetDevice(uint32_t i) [member function]
+    cls.add_method('GetNetDevice', 
+                   'ns3::Ptr< ns3::NetDevice >', 
+                   [param('uint32_t', 'i')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ptr<ns3::IpL4Protocol> ns3::Ipv4L3Protocol::GetProtocol(int protocolNumber) const [member function]
+    cls.add_method('GetProtocol', 
+                   'ns3::Ptr< ns3::IpL4Protocol >', 
+                   [param('int', 'protocolNumber')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ptr<ns3::IpL4Protocol> ns3::Ipv4L3Protocol::GetProtocol(int protocolNumber, int32_t interfaceIndex) const [member function]
+    cls.add_method('GetProtocol', 
+                   'ns3::Ptr< ns3::IpL4Protocol >', 
+                   [param('int', 'protocolNumber'), param('int32_t', 'interfaceIndex')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ptr<ns3::Ipv4RoutingProtocol> ns3::Ipv4L3Protocol::GetRoutingProtocol() const [member function]
+    cls.add_method('GetRoutingProtocol', 
+                   'ns3::Ptr< ns3::Ipv4RoutingProtocol >', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): static ns3::TypeId ns3::Ipv4L3Protocol::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::Insert(ns3::Ptr<ns3::IpL4Protocol> protocol) [member function]
+    cls.add_method('Insert', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::Insert(ns3::Ptr<ns3::IpL4Protocol> protocol, uint32_t interfaceIndex) [member function]
+    cls.add_method('Insert', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol'), param('uint32_t', 'interfaceIndex')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): bool ns3::Ipv4L3Protocol::IsDestinationAddress(ns3::Ipv4Address address, uint32_t iif) const [member function]
+    cls.add_method('IsDestinationAddress', 
+                   'bool', 
+                   [param('ns3::Ipv4Address', 'address'), param('uint32_t', 'iif')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): bool ns3::Ipv4L3Protocol::IsForwarding(uint32_t i) const [member function]
+    cls.add_method('IsForwarding', 
+                   'bool', 
+                   [param('uint32_t', 'i')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): bool ns3::Ipv4L3Protocol::IsUnicast(ns3::Ipv4Address ad) const [member function]
+    cls.add_method('IsUnicast', 
+                   'bool', 
+                   [param('ns3::Ipv4Address', 'ad')], 
+                   is_const=True)
+    ## ipv4-l3-protocol.h (module 'internet'): bool ns3::Ipv4L3Protocol::IsUp(uint32_t i) const [member function]
+    cls.add_method('IsUp', 
+                   'bool', 
+                   [param('uint32_t', 'i')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::Receive(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<const ns3::Packet> p, uint16_t protocol, ns3::Address const & from, ns3::Address const & to, ns3::NetDevice::PacketType packetType) [member function]
+    cls.add_method('Receive', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::NetDevice >', 'device'), param('ns3::Ptr< ns3::Packet const >', 'p'), param('uint16_t', 'protocol'), param('ns3::Address const &', 'from'), param('ns3::Address const &', 'to'), param('ns3::NetDevice::PacketType', 'packetType')])
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::Remove(ns3::Ptr<ns3::IpL4Protocol> protocol) [member function]
+    cls.add_method('Remove', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::Remove(ns3::Ptr<ns3::IpL4Protocol> protocol, uint32_t interfaceIndex) [member function]
+    cls.add_method('Remove', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol'), param('uint32_t', 'interfaceIndex')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): bool ns3::Ipv4L3Protocol::RemoveAddress(uint32_t interfaceIndex, uint32_t addressIndex) [member function]
+    cls.add_method('RemoveAddress', 
+                   'bool', 
+                   [param('uint32_t', 'interfaceIndex'), param('uint32_t', 'addressIndex')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): bool ns3::Ipv4L3Protocol::RemoveAddress(uint32_t interface, ns3::Ipv4Address address) [member function]
+    cls.add_method('RemoveAddress', 
+                   'bool', 
+                   [param('uint32_t', 'interface'), param('ns3::Ipv4Address', 'address')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4L3Protocol::SelectSourceAddress(ns3::Ptr<const ns3::NetDevice> device, ns3::Ipv4Address dst, ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e scope) [member function]
+    cls.add_method('SelectSourceAddress', 
+                   'ns3::Ipv4Address', 
+                   [param('ns3::Ptr< ns3::NetDevice const >', 'device'), param('ns3::Ipv4Address', 'dst'), param('ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e', 'scope')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::Send(ns3::Ptr<ns3::Packet> packet, ns3::Ipv4Address source, ns3::Ipv4Address destination, uint8_t protocol, ns3::Ptr<ns3::Ipv4Route> route) [member function]
+    cls.add_method('Send', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Ipv4Address', 'source'), param('ns3::Ipv4Address', 'destination'), param('uint8_t', 'protocol'), param('ns3::Ptr< ns3::Ipv4Route >', 'route')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::SendWithHeader(ns3::Ptr<ns3::Packet> packet, ns3::Ipv4Header ipHeader, ns3::Ptr<ns3::Ipv4Route> route) [member function]
+    cls.add_method('SendWithHeader', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Ipv4Header', 'ipHeader'), param('ns3::Ptr< ns3::Ipv4Route >', 'route')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::SetDefaultTtl(uint8_t ttl) [member function]
+    cls.add_method('SetDefaultTtl', 
+                   'void', 
+                   [param('uint8_t', 'ttl')])
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::SetDown(uint32_t i) [member function]
+    cls.add_method('SetDown', 
+                   'void', 
+                   [param('uint32_t', 'i')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::SetForwarding(uint32_t i, bool val) [member function]
+    cls.add_method('SetForwarding', 
+                   'void', 
+                   [param('uint32_t', 'i'), param('bool', 'val')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::SetMetric(uint32_t i, uint16_t metric) [member function]
+    cls.add_method('SetMetric', 
+                   'void', 
+                   [param('uint32_t', 'i'), param('uint16_t', 'metric')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::SetNode(ns3::Ptr<ns3::Node> node) [member function]
+    cls.add_method('SetNode', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Node >', 'node')])
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::SetRoutingProtocol(ns3::Ptr<ns3::Ipv4RoutingProtocol> routingProtocol) [member function]
+    cls.add_method('SetRoutingProtocol', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Ipv4RoutingProtocol >', 'routingProtocol')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::SetUp(uint32_t i) [member function]
+    cls.add_method('SetUp', 
+                   'void', 
+                   [param('uint32_t', 'i')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4L3Protocol::SourceAddressSelection(uint32_t interface, ns3::Ipv4Address dest) [member function]
+    cls.add_method('SourceAddressSelection', 
+                   'ns3::Ipv4Address', 
+                   [param('uint32_t', 'interface'), param('ns3::Ipv4Address', 'dest')], 
+                   is_virtual=True)
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ipv4L3Protocol::PROT_NUMBER [variable]
+    cls.add_static_attribute('PROT_NUMBER', 'uint16_t const', is_const=True)
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::DoDispose() [member function]
+    cls.add_method('DoDispose', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::NotifyNewAggregate() [member function]
+    cls.add_method('NotifyNewAggregate', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    ## ipv4-l3-protocol.h (module 'internet'): bool ns3::Ipv4L3Protocol::GetIpForward() const [member function]
+    cls.add_method('GetIpForward', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_virtual=True, visibility='private')
+    ## ipv4-l3-protocol.h (module 'internet'): bool ns3::Ipv4L3Protocol::GetWeakEsModel() const [member function]
+    cls.add_method('GetWeakEsModel', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_virtual=True, visibility='private')
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::SetIpForward(bool forward) [member function]
+    cls.add_method('SetIpForward', 
+                   'void', 
+                   [param('bool', 'forward')], 
+                   is_virtual=True, visibility='private')
+    ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::SetWeakEsModel(bool model) [member function]
+    cls.add_method('SetWeakEsModel', 
+                   'void', 
+                   [param('bool', 'model')], 
+                   is_virtual=True, visibility='private')
+    return
+
+def register_Ns3Ipv4MaskChecker_methods(root_module, cls):
+    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskChecker::Ipv4MaskChecker() [constructor]
+    cls.add_constructor([])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskChecker::Ipv4MaskChecker(ns3::Ipv4MaskChecker const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv4MaskChecker const &', 'arg0')])
+    return
+
+def register_Ns3Ipv4MaskValue_methods(root_module, cls):
+    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue::Ipv4MaskValue() [constructor]
+    cls.add_constructor([])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue::Ipv4MaskValue(ns3::Ipv4Mask const & value) [constructor]
+    cls.add_constructor([param('ns3::Ipv4Mask const &', 'value')])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue::Ipv4MaskValue(ns3::Ipv4MaskValue const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv4MaskValue const &', 'arg0')])
+    ## ipv4-address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::Ipv4MaskValue::Copy() const [member function]
+    cls.add_method('Copy', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-address.h (module 'network'): bool ns3::Ipv4MaskValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
+    cls.add_method('DeserializeFromString', 
+                   'bool', 
+                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_virtual=True)
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask ns3::Ipv4MaskValue::Get() const [member function]
+    cls.add_method('Get', 
+                   'ns3::Ipv4Mask', 
+                   [], 
+                   is_const=True)
+    ## ipv4-address.h (module 'network'): std::string ns3::Ipv4MaskValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
+    cls.add_method('SerializeToString', 
+                   'std::string', 
+                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_const=True, is_virtual=True)
+    ## ipv4-address.h (module 'network'): void ns3::Ipv4MaskValue::Set(ns3::Ipv4Mask const & value) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('ns3::Ipv4Mask const &', 'value')])
+    return
+
+def register_Ns3Ipv4MulticastRoute_methods(root_module, cls):
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4MulticastRoute::Ipv4MulticastRoute(ns3::Ipv4MulticastRoute const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv4MulticastRoute const &', 'arg0')])
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4MulticastRoute::Ipv4MulticastRoute() [constructor]
+    cls.add_constructor([])
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4MulticastRoute::GetGroup() const [member function]
+    cls.add_method('GetGroup', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_const=True)
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4MulticastRoute::GetOrigin() const [member function]
+    cls.add_method('GetOrigin', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_const=True)
+    ## ipv4-route.h (module 'internet'): std::map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int>>> ns3::Ipv4MulticastRoute::GetOutputTtlMap() const [member function]
+    cls.add_method('GetOutputTtlMap', 
+                   'std::map< unsigned int, unsigned int >', 
+                   [], 
+                   is_const=True)
+    ## ipv4-route.h (module 'internet'): uint32_t ns3::Ipv4MulticastRoute::GetParent() const [member function]
+    cls.add_method('GetParent', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## ipv4-route.h (module 'internet'): void ns3::Ipv4MulticastRoute::SetGroup(ns3::Ipv4Address const group) [member function]
+    cls.add_method('SetGroup', 
+                   'void', 
+                   [param('ns3::Ipv4Address const', 'group')])
+    ## ipv4-route.h (module 'internet'): void ns3::Ipv4MulticastRoute::SetOrigin(ns3::Ipv4Address const origin) [member function]
+    cls.add_method('SetOrigin', 
+                   'void', 
+                   [param('ns3::Ipv4Address const', 'origin')])
+    ## ipv4-route.h (module 'internet'): void ns3::Ipv4MulticastRoute::SetOutputTtl(uint32_t oif, uint32_t ttl) [member function]
+    cls.add_method('SetOutputTtl', 
+                   'void', 
+                   [param('uint32_t', 'oif'), param('uint32_t', 'ttl')])
+    ## ipv4-route.h (module 'internet'): void ns3::Ipv4MulticastRoute::SetParent(uint32_t iif) [member function]
+    cls.add_method('SetParent', 
+                   'void', 
+                   [param('uint32_t', 'iif')])
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4MulticastRoute::MAX_INTERFACES [variable]
+    cls.add_static_attribute('MAX_INTERFACES', 'uint32_t const', is_const=True)
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4MulticastRoute::MAX_TTL [variable]
+    cls.add_static_attribute('MAX_TTL', 'uint32_t const', is_const=True)
+    return
+
+def register_Ns3Ipv4Route_methods(root_module, cls):
+    cls.add_output_stream_operator()
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4Route::Ipv4Route(ns3::Ipv4Route const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv4Route const &', 'arg0')])
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4Route::Ipv4Route() [constructor]
+    cls.add_constructor([])
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4Route::GetDestination() const [member function]
+    cls.add_method('GetDestination', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_const=True)
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4Route::GetGateway() const [member function]
+    cls.add_method('GetGateway', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_const=True)
+    ## ipv4-route.h (module 'internet'): ns3::Ptr<ns3::NetDevice> ns3::Ipv4Route::GetOutputDevice() const [member function]
+    cls.add_method('GetOutputDevice', 
+                   'ns3::Ptr< ns3::NetDevice >', 
+                   [], 
+                   is_const=True)
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4Route::GetSource() const [member function]
+    cls.add_method('GetSource', 
+                   'ns3::Ipv4Address', 
+                   [], 
+                   is_const=True)
+    ## ipv4-route.h (module 'internet'): void ns3::Ipv4Route::SetDestination(ns3::Ipv4Address dest) [member function]
+    cls.add_method('SetDestination', 
+                   'void', 
+                   [param('ns3::Ipv4Address', 'dest')])
+    ## ipv4-route.h (module 'internet'): void ns3::Ipv4Route::SetGateway(ns3::Ipv4Address gw) [member function]
+    cls.add_method('SetGateway', 
+                   'void', 
+                   [param('ns3::Ipv4Address', 'gw')])
+    ## ipv4-route.h (module 'internet'): void ns3::Ipv4Route::SetOutputDevice(ns3::Ptr<ns3::NetDevice> outputDevice) [member function]
+    cls.add_method('SetOutputDevice', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::NetDevice >', 'outputDevice')])
+    ## ipv4-route.h (module 'internet'): void ns3::Ipv4Route::SetSource(ns3::Ipv4Address src) [member function]
+    cls.add_method('SetSource', 
+                   'void', 
+                   [param('ns3::Ipv4Address', 'src')])
+    return
+
+def register_Ns3Ipv4RoutingProtocol_methods(root_module, cls):
+    ## ipv4-routing-protocol.h (module 'internet'): ns3::Ipv4RoutingProtocol::Ipv4RoutingProtocol() [constructor]
+    cls.add_constructor([])
+    ## ipv4-routing-protocol.h (module 'internet'): ns3::Ipv4RoutingProtocol::Ipv4RoutingProtocol(ns3::Ipv4RoutingProtocol const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv4RoutingProtocol const &', 'arg0')])
+    ## ipv4-routing-protocol.h (module 'internet'): static ns3::TypeId ns3::Ipv4RoutingProtocol::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## ipv4-routing-protocol.h (module 'internet'): void ns3::Ipv4RoutingProtocol::NotifyAddAddress(uint32_t interface, ns3::Ipv4InterfaceAddress address) [member function]
+    cls.add_method('NotifyAddAddress', 
+                   'void', 
+                   [param('uint32_t', 'interface'), param('ns3::Ipv4InterfaceAddress', 'address')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4-routing-protocol.h (module 'internet'): void ns3::Ipv4RoutingProtocol::NotifyInterfaceDown(uint32_t interface) [member function]
+    cls.add_method('NotifyInterfaceDown', 
+                   'void', 
+                   [param('uint32_t', 'interface')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4-routing-protocol.h (module 'internet'): void ns3::Ipv4RoutingProtocol::NotifyInterfaceUp(uint32_t interface) [member function]
+    cls.add_method('NotifyInterfaceUp', 
+                   'void', 
+                   [param('uint32_t', 'interface')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4-routing-protocol.h (module 'internet'): void ns3::Ipv4RoutingProtocol::NotifyRemoveAddress(uint32_t interface, ns3::Ipv4InterfaceAddress address) [member function]
+    cls.add_method('NotifyRemoveAddress', 
+                   'void', 
+                   [param('uint32_t', 'interface'), param('ns3::Ipv4InterfaceAddress', 'address')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4-routing-protocol.h (module 'internet'): void ns3::Ipv4RoutingProtocol::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) const [member function]
+    cls.add_method('PrintRoutingTable', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv4-routing-protocol.h (module 'internet'): bool ns3::Ipv4RoutingProtocol::RouteInput(ns3::Ptr<const ns3::Packet> p, ns3::Ipv4Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Ipv4RoutingProtocol::UnicastForwardCallback ucb, ns3::Ipv4RoutingProtocol::MulticastForwardCallback mcb, ns3::Ipv4RoutingProtocol::LocalDeliverCallback lcb, ns3::Ipv4RoutingProtocol::ErrorCallback ecb) [member function]
+    cls.add_method('RouteInput', 
+                   'bool', 
+                   [param('ns3::Ptr< ns3::Packet const >', 'p'), param('ns3::Ipv4Header const &', 'header'), param('ns3::Ptr< ns3::NetDevice const >', 'idev'), param('ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ucb'), param('ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'mcb'), param('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'lcb'), param('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ecb')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4-routing-protocol.h (module 'internet'): ns3::Ptr<ns3::Ipv4Route> ns3::Ipv4RoutingProtocol::RouteOutput(ns3::Ptr<ns3::Packet> p, ns3::Ipv4Header const & header, ns3::Ptr<ns3::NetDevice> oif, ns3::Socket::SocketErrno & sockerr) [member function]
+    cls.add_method('RouteOutput', 
+                   'ns3::Ptr< ns3::Ipv4Route >', 
+                   [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv4Header const &', 'header'), param('ns3::Ptr< ns3::NetDevice >', 'oif'), param('ns3::Socket::SocketErrno &', 'sockerr')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv4-routing-protocol.h (module 'internet'): void ns3::Ipv4RoutingProtocol::SetIpv4(ns3::Ptr<ns3::Ipv4> ipv4) [member function]
+    cls.add_method('SetIpv4', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Ipv4 >', 'ipv4')], 
+                   is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3Ipv6_methods(root_module, cls):
+    ## ipv6.h (module 'internet'): ns3::Ipv6::Ipv6(ns3::Ipv6 const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv6 const &', 'arg0')])
+    ## ipv6.h (module 'internet'): ns3::Ipv6::Ipv6() [constructor]
+    cls.add_constructor([])
+    ## ipv6.h (module 'internet'): bool ns3::Ipv6::AddAddress(uint32_t interface, ns3::Ipv6InterfaceAddress address, bool addOnLinkRoute=true) [member function]
+    cls.add_method('AddAddress', 
+                   'bool', 
+                   [param('uint32_t', 'interface'), param('ns3::Ipv6InterfaceAddress', 'address'), param('bool', 'addOnLinkRoute', default_value='true')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): uint32_t ns3::Ipv6::AddInterface(ns3::Ptr<ns3::NetDevice> device) [member function]
+    cls.add_method('AddInterface', 
+                   'uint32_t', 
+                   [param('ns3::Ptr< ns3::NetDevice >', 'device')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): ns3::Ipv6InterfaceAddress ns3::Ipv6::GetAddress(uint32_t interface, uint32_t addressIndex) const [member function]
+    cls.add_method('GetAddress', 
+                   'ns3::Ipv6InterfaceAddress', 
+                   [param('uint32_t', 'interface'), param('uint32_t', 'addressIndex')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): int32_t ns3::Ipv6::GetInterfaceForAddress(ns3::Ipv6Address address) const [member function]
+    cls.add_method('GetInterfaceForAddress', 
+                   'int32_t', 
+                   [param('ns3::Ipv6Address', 'address')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): int32_t ns3::Ipv6::GetInterfaceForDevice(ns3::Ptr<const ns3::NetDevice> device) const [member function]
+    cls.add_method('GetInterfaceForDevice', 
+                   'int32_t', 
+                   [param('ns3::Ptr< ns3::NetDevice const >', 'device')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): int32_t ns3::Ipv6::GetInterfaceForPrefix(ns3::Ipv6Address address, ns3::Ipv6Prefix mask) const [member function]
+    cls.add_method('GetInterfaceForPrefix', 
+                   'int32_t', 
+                   [param('ns3::Ipv6Address', 'address'), param('ns3::Ipv6Prefix', 'mask')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): uint16_t ns3::Ipv6::GetMetric(uint32_t interface) const [member function]
+    cls.add_method('GetMetric', 
+                   'uint16_t', 
+                   [param('uint32_t', 'interface')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): uint16_t ns3::Ipv6::GetMtu(uint32_t interface) const [member function]
+    cls.add_method('GetMtu', 
+                   'uint16_t', 
+                   [param('uint32_t', 'interface')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): uint32_t ns3::Ipv6::GetNAddresses(uint32_t interface) const [member function]
+    cls.add_method('GetNAddresses', 
+                   'uint32_t', 
+                   [param('uint32_t', 'interface')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): uint32_t ns3::Ipv6::GetNInterfaces() const [member function]
+    cls.add_method('GetNInterfaces', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): ns3::Ptr<ns3::NetDevice> ns3::Ipv6::GetNetDevice(uint32_t interface) [member function]
+    cls.add_method('GetNetDevice', 
+                   'ns3::Ptr< ns3::NetDevice >', 
+                   [param('uint32_t', 'interface')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): ns3::Ptr<ns3::IpL4Protocol> ns3::Ipv6::GetProtocol(int protocolNumber) const [member function]
+    cls.add_method('GetProtocol', 
+                   'ns3::Ptr< ns3::IpL4Protocol >', 
+                   [param('int', 'protocolNumber')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): ns3::Ptr<ns3::IpL4Protocol> ns3::Ipv6::GetProtocol(int protocolNumber, int32_t interfaceIndex) const [member function]
+    cls.add_method('GetProtocol', 
+                   'ns3::Ptr< ns3::IpL4Protocol >', 
+                   [param('int', 'protocolNumber'), param('int32_t', 'interfaceIndex')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): ns3::Ptr<ns3::Ipv6RoutingProtocol> ns3::Ipv6::GetRoutingProtocol() const [member function]
+    cls.add_method('GetRoutingProtocol', 
+                   'ns3::Ptr< ns3::Ipv6RoutingProtocol >', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): static ns3::TypeId ns3::Ipv6::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::Insert(ns3::Ptr<ns3::IpL4Protocol> protocol) [member function]
+    cls.add_method('Insert', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::Insert(ns3::Ptr<ns3::IpL4Protocol> protocol, uint32_t interfaceIndex) [member function]
+    cls.add_method('Insert', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol'), param('uint32_t', 'interfaceIndex')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): bool ns3::Ipv6::IsForwarding(uint32_t interface) const [member function]
+    cls.add_method('IsForwarding', 
+                   'bool', 
+                   [param('uint32_t', 'interface')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): bool ns3::Ipv6::IsUp(uint32_t interface) const [member function]
+    cls.add_method('IsUp', 
+                   'bool', 
+                   [param('uint32_t', 'interface')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::RegisterExtensions() [member function]
+    cls.add_method('RegisterExtensions', 
+                   'void', 
+                   [], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::RegisterOptions() [member function]
+    cls.add_method('RegisterOptions', 
+                   'void', 
+                   [], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::Remove(ns3::Ptr<ns3::IpL4Protocol> protocol) [member function]
+    cls.add_method('Remove', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::Remove(ns3::Ptr<ns3::IpL4Protocol> protocol, uint32_t interfaceIndex) [member function]
+    cls.add_method('Remove', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol'), param('uint32_t', 'interfaceIndex')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): bool ns3::Ipv6::RemoveAddress(uint32_t interface, uint32_t addressIndex) [member function]
+    cls.add_method('RemoveAddress', 
+                   'bool', 
+                   [param('uint32_t', 'interface'), param('uint32_t', 'addressIndex')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): bool ns3::Ipv6::RemoveAddress(uint32_t interface, ns3::Ipv6Address address) [member function]
+    cls.add_method('RemoveAddress', 
+                   'bool', 
+                   [param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'address')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::Send(ns3::Ptr<ns3::Packet> packet, ns3::Ipv6Address source, ns3::Ipv6Address destination, uint8_t protocol, ns3::Ptr<ns3::Ipv6Route> route) [member function]
+    cls.add_method('Send', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Ipv6Address', 'source'), param('ns3::Ipv6Address', 'destination'), param('uint8_t', 'protocol'), param('ns3::Ptr< ns3::Ipv6Route >', 'route')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::SetDown(uint32_t interface) [member function]
+    cls.add_method('SetDown', 
+                   'void', 
+                   [param('uint32_t', 'interface')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::SetForwarding(uint32_t interface, bool val) [member function]
+    cls.add_method('SetForwarding', 
+                   'void', 
+                   [param('uint32_t', 'interface'), param('bool', 'val')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::SetMetric(uint32_t interface, uint16_t metric) [member function]
+    cls.add_method('SetMetric', 
+                   'void', 
+                   [param('uint32_t', 'interface'), param('uint16_t', 'metric')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::SetPmtu(ns3::Ipv6Address dst, uint32_t pmtu) [member function]
+    cls.add_method('SetPmtu', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'dst'), param('uint32_t', 'pmtu')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::SetRoutingProtocol(ns3::Ptr<ns3::Ipv6RoutingProtocol> routingProtocol) [member function]
+    cls.add_method('SetRoutingProtocol', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Ipv6RoutingProtocol >', 'routingProtocol')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::SetUp(uint32_t interface) [member function]
+    cls.add_method('SetUp', 
+                   'void', 
+                   [param('uint32_t', 'interface')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): ns3::Ipv6Address ns3::Ipv6::SourceAddressSelection(uint32_t interface, ns3::Ipv6Address dest) [member function]
+    cls.add_method('SourceAddressSelection', 
+                   'ns3::Ipv6Address', 
+                   [param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'dest')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## ipv6.h (module 'internet'): ns3::Ipv6::IF_ANY [variable]
+    cls.add_static_attribute('IF_ANY', 'uint32_t const', is_const=True)
+    ## ipv6.h (module 'internet'): bool ns3::Ipv6::GetIpForward() const [member function]
+    cls.add_method('GetIpForward', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True, visibility='private')
+    ## ipv6.h (module 'internet'): bool ns3::Ipv6::GetMtuDiscover() const [member function]
+    cls.add_method('GetMtuDiscover', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True, visibility='private')
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::SetIpForward(bool forward) [member function]
+    cls.add_method('SetIpForward', 
+                   'void', 
+                   [param('bool', 'forward')], 
+                   is_pure_virtual=True, is_virtual=True, visibility='private')
+    ## ipv6.h (module 'internet'): void ns3::Ipv6::SetMtuDiscover(bool mtuDiscover) [member function]
+    cls.add_method('SetMtuDiscover', 
+                   'void', 
+                   [param('bool', 'mtuDiscover')], 
+                   is_pure_virtual=True, is_virtual=True, visibility='private')
+    return
+
+def register_Ns3Ipv6AddressChecker_methods(root_module, cls):
+    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressChecker::Ipv6AddressChecker() [constructor]
+    cls.add_constructor([])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressChecker::Ipv6AddressChecker(ns3::Ipv6AddressChecker const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv6AddressChecker const &', 'arg0')])
+    return
+
+def register_Ns3Ipv6AddressValue_methods(root_module, cls):
+    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue::Ipv6AddressValue() [constructor]
+    cls.add_constructor([])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue::Ipv6AddressValue(ns3::Ipv6Address const & value) [constructor]
+    cls.add_constructor([param('ns3::Ipv6Address const &', 'value')])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue::Ipv6AddressValue(ns3::Ipv6AddressValue const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv6AddressValue const &', 'arg0')])
+    ## ipv6-address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::Ipv6AddressValue::Copy() const [member function]
+    cls.add_method('Copy', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
+    cls.add_method('DeserializeFromString', 
+                   'bool', 
+                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_virtual=True)
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6AddressValue::Get() const [member function]
+    cls.add_method('Get', 
+                   'ns3::Ipv6Address', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): std::string ns3::Ipv6AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
+    cls.add_method('SerializeToString', 
+                   'std::string', 
+                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-address.h (module 'network'): void ns3::Ipv6AddressValue::Set(ns3::Ipv6Address const & value) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('ns3::Ipv6Address const &', 'value')])
+    return
+
+def register_Ns3Ipv6FlowClassifier_methods(root_module, cls):
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): ns3::Ipv6FlowClassifier::Ipv6FlowClassifier() [constructor]
+    cls.add_constructor([])
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): bool ns3::Ipv6FlowClassifier::Classify(ns3::Ipv6Header const & ipHeader, ns3::Ptr<const ns3::Packet> ipPayload, uint32_t * out_flowId, uint32_t * out_packetId) [member function]
+    cls.add_method('Classify', 
+                   'bool', 
+                   [param('ns3::Ipv6Header const &', 'ipHeader'), param('ns3::Ptr< ns3::Packet const >', 'ipPayload'), param('uint32_t *', 'out_flowId'), param('uint32_t *', 'out_packetId')])
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): ns3::Ipv6FlowClassifier::FiveTuple ns3::Ipv6FlowClassifier::FindFlow(ns3::FlowId flowId) const [member function]
+    cls.add_method('FindFlow', 
+                   'ns3::Ipv6FlowClassifier::FiveTuple', 
+                   [param('uint32_t', 'flowId')], 
+                   is_const=True)
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): std::vector<std::pair<ns3::Ipv6Header::DscpType, unsigned int>, std::allocator<std::pair<ns3::Ipv6Header::DscpType, unsigned int>>> ns3::Ipv6FlowClassifier::GetDscpCounts(ns3::FlowId flowId) const [member function]
+    cls.add_method('GetDscpCounts', 
+                   'std::vector< std::pair< ns3::Ipv6Header::DscpType, unsigned int > >', 
+                   [param('uint32_t', 'flowId')], 
+                   is_const=True)
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): void ns3::Ipv6FlowClassifier::SerializeToXmlStream(std::ostream & os, uint16_t indent) const [member function]
+    cls.add_method('SerializeToXmlStream', 
+                   'void', 
+                   [param('std::ostream &', 'os'), param('uint16_t', 'indent')], 
+                   is_const=True, is_virtual=True)
+    return
+
+def register_Ns3Ipv6FlowClassifierFiveTuple_methods(root_module, cls):
+    cls.add_binary_comparison_operator('<')
+    cls.add_binary_comparison_operator('==')
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): ns3::Ipv6FlowClassifier::FiveTuple::FiveTuple() [constructor]
+    cls.add_constructor([])
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): ns3::Ipv6FlowClassifier::FiveTuple::FiveTuple(ns3::Ipv6FlowClassifier::FiveTuple const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv6FlowClassifier::FiveTuple const &', 'arg0')])
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): ns3::Ipv6FlowClassifier::FiveTuple::destinationAddress [variable]
+    cls.add_instance_attribute('destinationAddress', 'ns3::Ipv6Address', is_const=False)
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): ns3::Ipv6FlowClassifier::FiveTuple::destinationPort [variable]
+    cls.add_instance_attribute('destinationPort', 'uint16_t', is_const=False)
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): ns3::Ipv6FlowClassifier::FiveTuple::protocol [variable]
+    cls.add_instance_attribute('protocol', 'uint8_t', is_const=False)
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): ns3::Ipv6FlowClassifier::FiveTuple::sourceAddress [variable]
+    cls.add_instance_attribute('sourceAddress', 'ns3::Ipv6Address', is_const=False)
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): ns3::Ipv6FlowClassifier::FiveTuple::sourcePort [variable]
+    cls.add_instance_attribute('sourcePort', 'uint16_t', is_const=False)
+    return
+
+def register_Ns3Ipv6FlowClassifierSortByCount_methods(root_module, cls):
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): ns3::Ipv6FlowClassifier::SortByCount::SortByCount() [constructor]
+    cls.add_constructor([])
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): ns3::Ipv6FlowClassifier::SortByCount::SortByCount(ns3::Ipv6FlowClassifier::SortByCount const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv6FlowClassifier::SortByCount const &', 'arg0')])
+    ## ipv6-flow-classifier.h (module 'flow-monitor'): bool ns3::Ipv6FlowClassifier::SortByCount::operator()(std::pair<ns3::Ipv6Header::DscpType, unsigned int> left, std::pair<ns3::Ipv6Header::DscpType, unsigned int> right) [member operator]
+    cls.add_method('operator()', 
+                   'bool', 
+                   [param('std::pair< ns3::Ipv6Header::DscpType, unsigned int >', 'left'), param('std::pair< ns3::Ipv6Header::DscpType, unsigned int >', 'right')], 
+                   custom_name='__call__')
+    return
+
+def register_Ns3Ipv6FlowProbe_methods(root_module, cls):
+    ## ipv6-flow-probe.h (module 'flow-monitor'): ns3::Ipv6FlowProbe::Ipv6FlowProbe(ns3::Ptr<ns3::FlowMonitor> monitor, ns3::Ptr<ns3::Ipv6FlowClassifier> classifier, ns3::Ptr<ns3::Node> node) [constructor]
+    cls.add_constructor([param('ns3::Ptr< ns3::FlowMonitor >', 'monitor'), param('ns3::Ptr< ns3::Ipv6FlowClassifier >', 'classifier'), param('ns3::Ptr< ns3::Node >', 'node')])
+    ## ipv6-flow-probe.h (module 'flow-monitor'): static ns3::TypeId ns3::Ipv6FlowProbe::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## ipv6-flow-probe.h (module 'flow-monitor'): void ns3::Ipv6FlowProbe::DoDispose() [member function]
+    cls.add_method('DoDispose', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    return
+
+def register_Ns3Ipv6L3Protocol_methods(root_module, cls):
+    ## ipv6-l3-protocol.h (module 'internet'): static ns3::TypeId ns3::Ipv6L3Protocol::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ipv6L3Protocol::PROT_NUMBER [variable]
+    cls.add_static_attribute('PROT_NUMBER', 'uint16_t const', is_const=True)
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ipv6L3Protocol::Ipv6L3Protocol() [constructor]
+    cls.add_constructor([])
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::SetNode(ns3::Ptr<ns3::Node> node) [member function]
+    cls.add_method('SetNode', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Node >', 'node')])
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::Insert(ns3::Ptr<ns3::IpL4Protocol> protocol) [member function]
+    cls.add_method('Insert', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::Insert(ns3::Ptr<ns3::IpL4Protocol> protocol, uint32_t interfaceIndex) [member function]
+    cls.add_method('Insert', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol'), param('uint32_t', 'interfaceIndex')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::Remove(ns3::Ptr<ns3::IpL4Protocol> protocol) [member function]
+    cls.add_method('Remove', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::Remove(ns3::Ptr<ns3::IpL4Protocol> protocol, uint32_t interfaceIndex) [member function]
+    cls.add_method('Remove', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::IpL4Protocol >', 'protocol'), param('uint32_t', 'interfaceIndex')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ptr<ns3::IpL4Protocol> ns3::Ipv6L3Protocol::GetProtocol(int protocolNumber) const [member function]
+    cls.add_method('GetProtocol', 
+                   'ns3::Ptr< ns3::IpL4Protocol >', 
+                   [param('int', 'protocolNumber')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ptr<ns3::IpL4Protocol> ns3::Ipv6L3Protocol::GetProtocol(int protocolNumber, int32_t interfaceIndex) const [member function]
+    cls.add_method('GetProtocol', 
+                   'ns3::Ptr< ns3::IpL4Protocol >', 
+                   [param('int', 'protocolNumber'), param('int32_t', 'interfaceIndex')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ptr<ns3::Socket> ns3::Ipv6L3Protocol::CreateRawSocket() [member function]
+    cls.add_method('CreateRawSocket', 
+                   'ns3::Ptr< ns3::Socket >', 
+                   [])
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::DeleteRawSocket(ns3::Ptr<ns3::Socket> socket) [member function]
+    cls.add_method('DeleteRawSocket', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Socket >', 'socket')])
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::SetDefaultTtl(uint8_t ttl) [member function]
+    cls.add_method('SetDefaultTtl', 
+                   'void', 
+                   [param('uint8_t', 'ttl')])
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::SetDefaultTclass(uint8_t tclass) [member function]
+    cls.add_method('SetDefaultTclass', 
+                   'void', 
+                   [param('uint8_t', 'tclass')])
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::Receive(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<const ns3::Packet> p, uint16_t protocol, ns3::Address const & from, ns3::Address const & to, ns3::NetDevice::PacketType packetType) [member function]
+    cls.add_method('Receive', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::NetDevice >', 'device'), param('ns3::Ptr< ns3::Packet const >', 'p'), param('uint16_t', 'protocol'), param('ns3::Address const &', 'from'), param('ns3::Address const &', 'to'), param('ns3::NetDevice::PacketType', 'packetType')])
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::Send(ns3::Ptr<ns3::Packet> packet, ns3::Ipv6Address source, ns3::Ipv6Address destination, uint8_t protocol, ns3::Ptr<ns3::Ipv6Route> route) [member function]
+    cls.add_method('Send', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Ipv6Address', 'source'), param('ns3::Ipv6Address', 'destination'), param('uint8_t', 'protocol'), param('ns3::Ptr< ns3::Ipv6Route >', 'route')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::SetRoutingProtocol(ns3::Ptr<ns3::Ipv6RoutingProtocol> routingProtocol) [member function]
+    cls.add_method('SetRoutingProtocol', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Ipv6RoutingProtocol >', 'routingProtocol')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ptr<ns3::Ipv6RoutingProtocol> ns3::Ipv6L3Protocol::GetRoutingProtocol() const [member function]
+    cls.add_method('GetRoutingProtocol', 
+                   'ns3::Ptr< ns3::Ipv6RoutingProtocol >', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): uint32_t ns3::Ipv6L3Protocol::AddInterface(ns3::Ptr<ns3::NetDevice> device) [member function]
+    cls.add_method('AddInterface', 
+                   'uint32_t', 
+                   [param('ns3::Ptr< ns3::NetDevice >', 'device')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ptr<ns3::Ipv6Interface> ns3::Ipv6L3Protocol::GetInterface(uint32_t i) const [member function]
+    cls.add_method('GetInterface', 
+                   'ns3::Ptr< ns3::Ipv6Interface >', 
+                   [param('uint32_t', 'i')], 
+                   is_const=True)
+    ## ipv6-l3-protocol.h (module 'internet'): uint32_t ns3::Ipv6L3Protocol::GetNInterfaces() const [member function]
+    cls.add_method('GetNInterfaces', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): int32_t ns3::Ipv6L3Protocol::GetInterfaceForAddress(ns3::Ipv6Address addr) const [member function]
+    cls.add_method('GetInterfaceForAddress', 
+                   'int32_t', 
+                   [param('ns3::Ipv6Address', 'addr')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): int32_t ns3::Ipv6L3Protocol::GetInterfaceForPrefix(ns3::Ipv6Address addr, ns3::Ipv6Prefix mask) const [member function]
+    cls.add_method('GetInterfaceForPrefix', 
+                   'int32_t', 
+                   [param('ns3::Ipv6Address', 'addr'), param('ns3::Ipv6Prefix', 'mask')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): int32_t ns3::Ipv6L3Protocol::GetInterfaceForDevice(ns3::Ptr<const ns3::NetDevice> device) const [member function]
+    cls.add_method('GetInterfaceForDevice', 
+                   'int32_t', 
+                   [param('ns3::Ptr< ns3::NetDevice const >', 'device')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): bool ns3::Ipv6L3Protocol::AddAddress(uint32_t i, ns3::Ipv6InterfaceAddress address, bool addOnLinkRoute=true) [member function]
+    cls.add_method('AddAddress', 
+                   'bool', 
+                   [param('uint32_t', 'i'), param('ns3::Ipv6InterfaceAddress', 'address'), param('bool', 'addOnLinkRoute', default_value='true')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ipv6InterfaceAddress ns3::Ipv6L3Protocol::GetAddress(uint32_t interfaceIndex, uint32_t addressIndex) const [member function]
+    cls.add_method('GetAddress', 
+                   'ns3::Ipv6InterfaceAddress', 
+                   [param('uint32_t', 'interfaceIndex'), param('uint32_t', 'addressIndex')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): uint32_t ns3::Ipv6L3Protocol::GetNAddresses(uint32_t interface) const [member function]
+    cls.add_method('GetNAddresses', 
+                   'uint32_t', 
+                   [param('uint32_t', 'interface')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): bool ns3::Ipv6L3Protocol::RemoveAddress(uint32_t interfaceIndex, uint32_t addressIndex) [member function]
+    cls.add_method('RemoveAddress', 
+                   'bool', 
+                   [param('uint32_t', 'interfaceIndex'), param('uint32_t', 'addressIndex')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): bool ns3::Ipv6L3Protocol::RemoveAddress(uint32_t interfaceIndex, ns3::Ipv6Address address) [member function]
+    cls.add_method('RemoveAddress', 
+                   'bool', 
+                   [param('uint32_t', 'interfaceIndex'), param('ns3::Ipv6Address', 'address')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::SetMetric(uint32_t i, uint16_t metric) [member function]
+    cls.add_method('SetMetric', 
+                   'void', 
+                   [param('uint32_t', 'i'), param('uint16_t', 'metric')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): uint16_t ns3::Ipv6L3Protocol::GetMetric(uint32_t i) const [member function]
+    cls.add_method('GetMetric', 
+                   'uint16_t', 
+                   [param('uint32_t', 'i')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): uint16_t ns3::Ipv6L3Protocol::GetMtu(uint32_t i) const [member function]
+    cls.add_method('GetMtu', 
+                   'uint16_t', 
+                   [param('uint32_t', 'i')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::SetPmtu(ns3::Ipv6Address dst, uint32_t pmtu) [member function]
+    cls.add_method('SetPmtu', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'dst'), param('uint32_t', 'pmtu')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): bool ns3::Ipv6L3Protocol::IsUp(uint32_t i) const [member function]
+    cls.add_method('IsUp', 
+                   'bool', 
+                   [param('uint32_t', 'i')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::SetUp(uint32_t i) [member function]
+    cls.add_method('SetUp', 
+                   'void', 
+                   [param('uint32_t', 'i')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::SetDown(uint32_t i) [member function]
+    cls.add_method('SetDown', 
+                   'void', 
+                   [param('uint32_t', 'i')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): bool ns3::Ipv6L3Protocol::IsForwarding(uint32_t i) const [member function]
+    cls.add_method('IsForwarding', 
+                   'bool', 
+                   [param('uint32_t', 'i')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::SetForwarding(uint32_t i, bool val) [member function]
+    cls.add_method('SetForwarding', 
+                   'void', 
+                   [param('uint32_t', 'i'), param('bool', 'val')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ipv6Address ns3::Ipv6L3Protocol::SourceAddressSelection(uint32_t interface, ns3::Ipv6Address dest) [member function]
+    cls.add_method('SourceAddressSelection', 
+                   'ns3::Ipv6Address', 
+                   [param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'dest')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ptr<ns3::NetDevice> ns3::Ipv6L3Protocol::GetNetDevice(uint32_t i) [member function]
+    cls.add_method('GetNetDevice', 
+                   'ns3::Ptr< ns3::NetDevice >', 
+                   [param('uint32_t', 'i')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ptr<ns3::Icmpv6L4Protocol> ns3::Ipv6L3Protocol::GetIcmpv6() const [member function]
+    cls.add_method('GetIcmpv6', 
+                   'ns3::Ptr< ns3::Icmpv6L4Protocol >', 
+                   [], 
+                   is_const=True)
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::AddAutoconfiguredAddress(uint32_t interface, ns3::Ipv6Address network, ns3::Ipv6Prefix mask, uint8_t flags, uint32_t validTime, uint32_t preferredTime, ns3::Ipv6Address defaultRouter=ns3::Ipv6Address::GetZero()) [member function]
+    cls.add_method('AddAutoconfiguredAddress', 
+                   'void', 
+                   [param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'network'), param('ns3::Ipv6Prefix', 'mask'), param('uint8_t', 'flags'), param('uint32_t', 'validTime'), param('uint32_t', 'preferredTime'), param('ns3::Ipv6Address', 'defaultRouter', default_value='ns3::Ipv6Address::GetZero()')])
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::RemoveAutoconfiguredAddress(uint32_t interface, ns3::Ipv6Address network, ns3::Ipv6Prefix mask, ns3::Ipv6Address defaultRouter) [member function]
+    cls.add_method('RemoveAutoconfiguredAddress', 
+                   'void', 
+                   [param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'network'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'defaultRouter')])
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::RegisterExtensions() [member function]
+    cls.add_method('RegisterExtensions', 
+                   'void', 
+                   [], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::RegisterOptions() [member function]
+    cls.add_method('RegisterOptions', 
+                   'void', 
+                   [], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::ReportDrop(ns3::Ipv6Header ipHeader, ns3::Ptr<ns3::Packet> p, ns3::Ipv6L3Protocol::DropReason dropReason) [member function]
+    cls.add_method('ReportDrop', 
+                   'void', 
+                   [param('ns3::Ipv6Header', 'ipHeader'), param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6L3Protocol::DropReason', 'dropReason')], 
+                   is_virtual=True)
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::AddMulticastAddress(ns3::Ipv6Address address) [member function]
+    cls.add_method('AddMulticastAddress', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'address')])
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::AddMulticastAddress(ns3::Ipv6Address address, uint32_t interface) [member function]
+    cls.add_method('AddMulticastAddress', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'address'), param('uint32_t', 'interface')])
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::RemoveMulticastAddress(ns3::Ipv6Address address) [member function]
+    cls.add_method('RemoveMulticastAddress', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'address')])
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::RemoveMulticastAddress(ns3::Ipv6Address address, uint32_t interface) [member function]
+    cls.add_method('RemoveMulticastAddress', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'address'), param('uint32_t', 'interface')])
+    ## ipv6-l3-protocol.h (module 'internet'): bool ns3::Ipv6L3Protocol::IsRegisteredMulticastAddress(ns3::Ipv6Address address) const [member function]
+    cls.add_method('IsRegisteredMulticastAddress', 
+                   'bool', 
+                   [param('ns3::Ipv6Address', 'address')], 
+                   is_const=True)
+    ## ipv6-l3-protocol.h (module 'internet'): bool ns3::Ipv6L3Protocol::IsRegisteredMulticastAddress(ns3::Ipv6Address address, uint32_t interface) const [member function]
+    cls.add_method('IsRegisteredMulticastAddress', 
+                   'bool', 
+                   [param('ns3::Ipv6Address', 'address'), param('uint32_t', 'interface')], 
+                   is_const=True)
+    ## ipv6-l3-protocol.h (module 'internet'): bool ns3::Ipv6L3Protocol::ReachabilityHint(uint32_t ipInterfaceIndex, ns3::Ipv6Address address) [member function]
+    cls.add_method('ReachabilityHint', 
+                   'bool', 
+                   [param('uint32_t', 'ipInterfaceIndex'), param('ns3::Ipv6Address', 'address')])
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::DoDispose() [member function]
+    cls.add_method('DoDispose', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::NotifyNewAggregate() [member function]
+    cls.add_method('NotifyNewAggregate', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::SetIpForward(bool forward) [member function]
+    cls.add_method('SetIpForward', 
+                   'void', 
+                   [param('bool', 'forward')], 
+                   is_virtual=True, visibility='private')
+    ## ipv6-l3-protocol.h (module 'internet'): bool ns3::Ipv6L3Protocol::GetIpForward() const [member function]
+    cls.add_method('GetIpForward', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_virtual=True, visibility='private')
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::SetMtuDiscover(bool mtuDiscover) [member function]
+    cls.add_method('SetMtuDiscover', 
+                   'void', 
+                   [param('bool', 'mtuDiscover')], 
+                   is_virtual=True, visibility='private')
+    ## ipv6-l3-protocol.h (module 'internet'): bool ns3::Ipv6L3Protocol::GetMtuDiscover() const [member function]
+    cls.add_method('GetMtuDiscover', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_virtual=True, visibility='private')
+    ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::SetSendIcmpv6Redirect(bool sendIcmpv6Redirect) [member function]
+    cls.add_method('SetSendIcmpv6Redirect', 
+                   'void', 
+                   [param('bool', 'sendIcmpv6Redirect')], 
+                   is_virtual=True, visibility='private')
+    ## ipv6-l3-protocol.h (module 'internet'): bool ns3::Ipv6L3Protocol::GetSendIcmpv6Redirect() const [member function]
+    cls.add_method('GetSendIcmpv6Redirect', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_virtual=True, visibility='private')
+    return
+
+def register_Ns3Ipv6PmtuCache_methods(root_module, cls):
+    ## ipv6-pmtu-cache.h (module 'internet'): ns3::Ipv6PmtuCache::Ipv6PmtuCache(ns3::Ipv6PmtuCache const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv6PmtuCache const &', 'arg0')])
+    ## ipv6-pmtu-cache.h (module 'internet'): ns3::Ipv6PmtuCache::Ipv6PmtuCache() [constructor]
+    cls.add_constructor([])
+    ## ipv6-pmtu-cache.h (module 'internet'): void ns3::Ipv6PmtuCache::DoDispose() [member function]
+    cls.add_method('DoDispose', 
+                   'void', 
+                   [], 
+                   is_virtual=True)
+    ## ipv6-pmtu-cache.h (module 'internet'): uint32_t ns3::Ipv6PmtuCache::GetPmtu(ns3::Ipv6Address dst) [member function]
+    cls.add_method('GetPmtu', 
+                   'uint32_t', 
+                   [param('ns3::Ipv6Address', 'dst')])
+    ## ipv6-pmtu-cache.h (module 'internet'): ns3::Time ns3::Ipv6PmtuCache::GetPmtuValidityTime() const [member function]
+    cls.add_method('GetPmtuValidityTime', 
+                   'ns3::Time', 
+                   [], 
+                   is_const=True)
+    ## ipv6-pmtu-cache.h (module 'internet'): static ns3::TypeId ns3::Ipv6PmtuCache::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## ipv6-pmtu-cache.h (module 'internet'): void ns3::Ipv6PmtuCache::SetPmtu(ns3::Ipv6Address dst, uint32_t pmtu) [member function]
+    cls.add_method('SetPmtu', 
+                   'void', 
+                   [param('ns3::Ipv6Address', 'dst'), param('uint32_t', 'pmtu')])
+    ## ipv6-pmtu-cache.h (module 'internet'): bool ns3::Ipv6PmtuCache::SetPmtuValidityTime(ns3::Time validity) [member function]
+    cls.add_method('SetPmtuValidityTime', 
+                   'bool', 
+                   [param('ns3::Time', 'validity')])
+    return
+
+def register_Ns3Ipv6PrefixChecker_methods(root_module, cls):
+    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixChecker::Ipv6PrefixChecker() [constructor]
+    cls.add_constructor([])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixChecker::Ipv6PrefixChecker(ns3::Ipv6PrefixChecker const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv6PrefixChecker const &', 'arg0')])
+    return
+
+def register_Ns3Ipv6PrefixValue_methods(root_module, cls):
+    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue::Ipv6PrefixValue() [constructor]
+    cls.add_constructor([])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue::Ipv6PrefixValue(ns3::Ipv6Prefix const & value) [constructor]
+    cls.add_constructor([param('ns3::Ipv6Prefix const &', 'value')])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue::Ipv6PrefixValue(ns3::Ipv6PrefixValue const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Ipv6PrefixValue const &', 'arg0')])
+    ## ipv6-address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::Ipv6PrefixValue::Copy() const [member function]
+    cls.add_method('Copy', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-address.h (module 'network'): bool ns3::Ipv6PrefixValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
+    cls.add_method('DeserializeFromString', 
+                   'bool', 
+                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_virtual=True)
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix ns3::Ipv6PrefixValue::Get() const [member function]
+    cls.add_method('Get', 
+                   'ns3::Ipv6Prefix', 
+                   [], 
+                   is_const=True)
+    ## ipv6-address.h (module 'network'): std::string ns3::Ipv6PrefixValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
+    cls.add_method('SerializeToString', 
+                   'std::string', 
+                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_const=True, is_virtual=True)
+    ## ipv6-address.h (module 'network'): void ns3::Ipv6PrefixValue::Set(ns3::Ipv6Prefix const & value) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('ns3::Ipv6Prefix const &', 'value')])
+    return
+
+def register_Ns3Mac48AddressChecker_methods(root_module, cls):
+    ## mac48-address.h (module 'network'): ns3::Mac48AddressChecker::Mac48AddressChecker() [constructor]
+    cls.add_constructor([])
+    ## mac48-address.h (module 'network'): ns3::Mac48AddressChecker::Mac48AddressChecker(ns3::Mac48AddressChecker const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Mac48AddressChecker const &', 'arg0')])
+    return
+
+def register_Ns3Mac48AddressValue_methods(root_module, cls):
+    ## mac48-address.h (module 'network'): ns3::Mac48AddressValue::Mac48AddressValue() [constructor]
+    cls.add_constructor([])
+    ## mac48-address.h (module 'network'): ns3::Mac48AddressValue::Mac48AddressValue(ns3::Mac48Address const & value) [constructor]
+    cls.add_constructor([param('ns3::Mac48Address const &', 'value')])
+    ## mac48-address.h (module 'network'): ns3::Mac48AddressValue::Mac48AddressValue(ns3::Mac48AddressValue const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Mac48AddressValue const &', 'arg0')])
+    ## mac48-address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::Mac48AddressValue::Copy() const [member function]
+    cls.add_method('Copy', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## mac48-address.h (module 'network'): bool ns3::Mac48AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
+    cls.add_method('DeserializeFromString', 
+                   'bool', 
+                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_virtual=True)
+    ## mac48-address.h (module 'network'): ns3::Mac48Address ns3::Mac48AddressValue::Get() const [member function]
+    cls.add_method('Get', 
+                   'ns3::Mac48Address', 
+                   [], 
+                   is_const=True)
+    ## mac48-address.h (module 'network'): std::string ns3::Mac48AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
+    cls.add_method('SerializeToString', 
+                   'std::string', 
+                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_const=True, is_virtual=True)
+    ## mac48-address.h (module 'network'): void ns3::Mac48AddressValue::Set(ns3::Mac48Address const & value) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('ns3::Mac48Address const &', 'value')])
+    return
+
+def register_Ns3NetDevice_methods(root_module, cls):
+    ## net-device.h (module 'network'): ns3::NetDevice::NetDevice() [constructor]
+    cls.add_constructor([])
+    ## net-device.h (module 'network'): ns3::NetDevice::NetDevice(ns3::NetDevice const & arg0) [constructor]
+    cls.add_constructor([param('ns3::NetDevice const &', 'arg0')])
+    ## net-device.h (module 'network'): void ns3::NetDevice::AddLinkChangeCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
+    cls.add_method('AddLinkChangeCallback', 
+                   'void', 
+                   [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): ns3::Address ns3::NetDevice::GetAddress() const [member function]
+    cls.add_method('GetAddress', 
+                   'ns3::Address', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): ns3::Address ns3::NetDevice::GetBroadcast() const [member function]
+    cls.add_method('GetBroadcast', 
+                   'ns3::Address', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): ns3::Ptr<ns3::Channel> ns3::NetDevice::GetChannel() const [member function]
+    cls.add_method('GetChannel', 
+                   'ns3::Ptr< ns3::Channel >', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): uint32_t ns3::NetDevice::GetIfIndex() const [member function]
+    cls.add_method('GetIfIndex', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): uint16_t ns3::NetDevice::GetMtu() const [member function]
+    cls.add_method('GetMtu', 
+                   'uint16_t', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): ns3::Address ns3::NetDevice::GetMulticast(ns3::Ipv4Address multicastGroup) const [member function]
+    cls.add_method('GetMulticast', 
+                   'ns3::Address', 
+                   [param('ns3::Ipv4Address', 'multicastGroup')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): ns3::Address ns3::NetDevice::GetMulticast(ns3::Ipv6Address addr) const [member function]
+    cls.add_method('GetMulticast', 
+                   'ns3::Address', 
+                   [param('ns3::Ipv6Address', 'addr')], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): ns3::Ptr<ns3::Node> ns3::NetDevice::GetNode() const [member function]
+    cls.add_method('GetNode', 
+                   'ns3::Ptr< ns3::Node >', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): static ns3::TypeId ns3::NetDevice::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## net-device.h (module 'network'): bool ns3::NetDevice::IsBridge() const [member function]
+    cls.add_method('IsBridge', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): bool ns3::NetDevice::IsBroadcast() const [member function]
+    cls.add_method('IsBroadcast', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): bool ns3::NetDevice::IsLinkUp() const [member function]
+    cls.add_method('IsLinkUp', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): bool ns3::NetDevice::IsMulticast() const [member function]
+    cls.add_method('IsMulticast', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): bool ns3::NetDevice::IsPointToPoint() const [member function]
+    cls.add_method('IsPointToPoint', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): bool ns3::NetDevice::NeedsArp() const [member function]
+    cls.add_method('NeedsArp', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): bool ns3::NetDevice::Send(ns3::Ptr<ns3::Packet> packet, ns3::Address const & dest, uint16_t protocolNumber) [member function]
+    cls.add_method('Send', 
+                   'bool', 
+                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Address const &', 'dest'), param('uint16_t', 'protocolNumber')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): bool ns3::NetDevice::SendFrom(ns3::Ptr<ns3::Packet> packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber) [member function]
+    cls.add_method('SendFrom', 
+                   'bool', 
+                   [param('ns3::Ptr< ns3::Packet >', 'packet'), param('ns3::Address const &', 'source'), param('ns3::Address const &', 'dest'), param('uint16_t', 'protocolNumber')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): void ns3::NetDevice::SetAddress(ns3::Address address) [member function]
+    cls.add_method('SetAddress', 
+                   'void', 
+                   [param('ns3::Address', 'address')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): void ns3::NetDevice::SetIfIndex(uint32_t const index) [member function]
+    cls.add_method('SetIfIndex', 
+                   'void', 
+                   [param('uint32_t const', 'index')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): bool ns3::NetDevice::SetMtu(uint16_t const mtu) [member function]
+    cls.add_method('SetMtu', 
+                   'bool', 
+                   [param('uint16_t const', 'mtu')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): void ns3::NetDevice::SetNode(ns3::Ptr<ns3::Node> node) [member function]
+    cls.add_method('SetNode', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Node >', 'node')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): void ns3::NetDevice::SetPromiscReceiveCallback(ns3::NetDevice::PromiscReceiveCallback cb) [member function]
+    cls.add_method('SetPromiscReceiveCallback', 
+                   'void', 
+                   [param('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): void ns3::NetDevice::SetReceiveCallback(ns3::NetDevice::ReceiveCallback cb) [member function]
+    cls.add_method('SetReceiveCallback', 
+                   'void', 
+                   [param('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## net-device.h (module 'network'): bool ns3::NetDevice::SupportsSendFrom() const [member function]
+    cls.add_method('SupportsSendFrom', 
+                   'bool', 
+                   [], 
+                   is_const=True, is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3NixVector_methods(root_module, cls):
+    cls.add_output_stream_operator()
+    ## nix-vector.h (module 'network'): ns3::NixVector::NixVector() [constructor]
+    cls.add_constructor([])
+    ## nix-vector.h (module 'network'): ns3::NixVector::NixVector(ns3::NixVector const & o) [constructor]
+    cls.add_constructor([param('ns3::NixVector const &', 'o')])
+    ## nix-vector.h (module 'network'): void ns3::NixVector::AddNeighborIndex(uint32_t newBits, uint32_t numberOfBits) [member function]
+    cls.add_method('AddNeighborIndex', 
+                   'void', 
+                   [param('uint32_t', 'newBits'), param('uint32_t', 'numberOfBits')])
+    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::BitCount(uint32_t numberOfNeighbors) const [member function]
+    cls.add_method('BitCount', 
+                   'uint32_t', 
+                   [param('uint32_t', 'numberOfNeighbors')], 
+                   is_const=True)
+    ## nix-vector.h (module 'network'): ns3::Ptr<ns3::NixVector> ns3::NixVector::Copy() const [member function]
+    cls.add_method('Copy', 
+                   'ns3::Ptr< ns3::NixVector >', 
+                   [], 
+                   is_const=True)
+    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::Deserialize(uint32_t const * buffer, uint32_t size) [member function]
+    cls.add_method('Deserialize', 
+                   'uint32_t', 
+                   [param('uint32_t const *', 'buffer'), param('uint32_t', 'size')])
+    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::ExtractNeighborIndex(uint32_t numberOfBits) [member function]
+    cls.add_method('ExtractNeighborIndex', 
+                   'uint32_t', 
+                   [param('uint32_t', 'numberOfBits')])
+    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::GetEpoch() const [member function]
+    cls.add_method('GetEpoch', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::GetRemainingBits() const [member function]
+    cls.add_method('GetRemainingBits', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::Serialize(uint32_t * buffer, uint32_t maxSize) const [member function]
+    cls.add_method('Serialize', 
+                   'uint32_t', 
+                   [param('uint32_t *', 'buffer'), param('uint32_t', 'maxSize')], 
+                   is_const=True)
+    ## nix-vector.h (module 'network'): void ns3::NixVector::SetEpoch(uint32_t epoch) [member function]
+    cls.add_method('SetEpoch', 
+                   'void', 
+                   [param('uint32_t', 'epoch')])
+    return
+
+def register_Ns3Node_methods(root_module, cls):
+    ## node.h (module 'network'): ns3::Node::Node(ns3::Node const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Node const &', 'arg0')])
+    ## node.h (module 'network'): ns3::Node::Node() [constructor]
+    cls.add_constructor([])
+    ## node.h (module 'network'): ns3::Node::Node(uint32_t systemId) [constructor]
+    cls.add_constructor([param('uint32_t', 'systemId')])
+    ## node.h (module 'network'): uint32_t ns3::Node::AddApplication(ns3::Ptr<ns3::Application> application) [member function]
+    cls.add_method('AddApplication', 
+                   'uint32_t', 
+                   [param('ns3::Ptr< ns3::Application >', 'application')])
+    ## node.h (module 'network'): uint32_t ns3::Node::AddDevice(ns3::Ptr<ns3::NetDevice> device) [member function]
+    cls.add_method('AddDevice', 
+                   'uint32_t', 
+                   [param('ns3::Ptr< ns3::NetDevice >', 'device')])
+    ## node.h (module 'network'): static bool ns3::Node::ChecksumEnabled() [member function]
+    cls.add_method('ChecksumEnabled', 
+                   'bool', 
+                   [], 
+                   is_static=True)
+    ## node.h (module 'network'): ns3::Ptr<ns3::Application> ns3::Node::GetApplication(uint32_t index) const [member function]
+    cls.add_method('GetApplication', 
+                   'ns3::Ptr< ns3::Application >', 
+                   [param('uint32_t', 'index')], 
+                   is_const=True)
+    ## node.h (module 'network'): ns3::Ptr<ns3::NetDevice> ns3::Node::GetDevice(uint32_t index) const [member function]
+    cls.add_method('GetDevice', 
+                   'ns3::Ptr< ns3::NetDevice >', 
+                   [param('uint32_t', 'index')], 
+                   is_const=True)
+    ## node.h (module 'network'): uint32_t ns3::Node::GetId() const [member function]
+    cls.add_method('GetId', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## node.h (module 'network'): ns3::Time ns3::Node::GetLocalTime() const [member function]
+    cls.add_method('GetLocalTime', 
+                   'ns3::Time', 
+                   [], 
+                   is_const=True)
+    ## node.h (module 'network'): uint32_t ns3::Node::GetNApplications() const [member function]
+    cls.add_method('GetNApplications', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## node.h (module 'network'): uint32_t ns3::Node::GetNDevices() const [member function]
+    cls.add_method('GetNDevices', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## node.h (module 'network'): uint32_t ns3::Node::GetSystemId() const [member function]
+    cls.add_method('GetSystemId', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## node.h (module 'network'): static ns3::TypeId ns3::Node::GetTypeId() [member function]
+    cls.add_method('GetTypeId', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_static=True)
+    ## node.h (module 'network'): void ns3::Node::RegisterDeviceAdditionListener(ns3::Node::DeviceAdditionListener listener) [member function]
+    cls.add_method('RegisterDeviceAdditionListener', 
+                   'void', 
+                   [param('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'listener')])
+    ## node.h (module 'network'): void ns3::Node::RegisterProtocolHandler(ns3::Node::ProtocolHandler handler, uint16_t protocolType, ns3::Ptr<ns3::NetDevice> device, bool promiscuous=false) [member function]
+    cls.add_method('RegisterProtocolHandler', 
+                   'void', 
+                   [param('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'handler'), param('uint16_t', 'protocolType'), param('ns3::Ptr< ns3::NetDevice >', 'device'), param('bool', 'promiscuous', default_value='false')])
+    ## node.h (module 'network'): void ns3::Node::UnregisterDeviceAdditionListener(ns3::Node::DeviceAdditionListener listener) [member function]
+    cls.add_method('UnregisterDeviceAdditionListener', 
+                   'void', 
+                   [param('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'listener')])
+    ## node.h (module 'network'): void ns3::Node::UnregisterProtocolHandler(ns3::Node::ProtocolHandler handler) [member function]
+    cls.add_method('UnregisterProtocolHandler', 
+                   'void', 
+                   [param('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'handler')])
+    ## node.h (module 'network'): void ns3::Node::DoDispose() [member function]
+    cls.add_method('DoDispose', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    ## node.h (module 'network'): void ns3::Node::DoInitialize() [member function]
+    cls.add_method('DoInitialize', 
+                   'void', 
+                   [], 
+                   is_virtual=True, visibility='protected')
+    return
+
+def register_Ns3ObjectFactoryChecker_methods(root_module, cls):
+    ## object-factory.h (module 'core'): ns3::ObjectFactoryChecker::ObjectFactoryChecker() [constructor]
+    cls.add_constructor([])
+    ## object-factory.h (module 'core'): ns3::ObjectFactoryChecker::ObjectFactoryChecker(ns3::ObjectFactoryChecker const & arg0) [constructor]
+    cls.add_constructor([param('ns3::ObjectFactoryChecker const &', 'arg0')])
+    return
+
+def register_Ns3ObjectFactoryValue_methods(root_module, cls):
+    ## object-factory.h (module 'core'): ns3::ObjectFactoryValue::ObjectFactoryValue() [constructor]
+    cls.add_constructor([])
+    ## object-factory.h (module 'core'): ns3::ObjectFactoryValue::ObjectFactoryValue(ns3::ObjectFactory const & value) [constructor]
+    cls.add_constructor([param('ns3::ObjectFactory const &', 'value')])
+    ## object-factory.h (module 'core'): ns3::ObjectFactoryValue::ObjectFactoryValue(ns3::ObjectFactoryValue const & arg0) [constructor]
+    cls.add_constructor([param('ns3::ObjectFactoryValue const &', 'arg0')])
+    ## object-factory.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::ObjectFactoryValue::Copy() const [member function]
+    cls.add_method('Copy', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## object-factory.h (module 'core'): bool ns3::ObjectFactoryValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
+    cls.add_method('DeserializeFromString', 
+                   'bool', 
+                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_virtual=True)
+    ## object-factory.h (module 'core'): ns3::ObjectFactory ns3::ObjectFactoryValue::Get() const [member function]
+    cls.add_method('Get', 
+                   'ns3::ObjectFactory', 
+                   [], 
+                   is_const=True)
+    ## object-factory.h (module 'core'): std::string ns3::ObjectFactoryValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
+    cls.add_method('SerializeToString', 
+                   'std::string', 
+                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_const=True, is_virtual=True)
+    ## object-factory.h (module 'core'): void ns3::ObjectFactoryValue::Set(ns3::ObjectFactory const & value) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('ns3::ObjectFactory const &', 'value')])
+    return
+
+def register_Ns3OutputStreamWrapper_methods(root_module, cls):
+    ## output-stream-wrapper.h (module 'network'): ns3::OutputStreamWrapper::OutputStreamWrapper(ns3::OutputStreamWrapper const & arg0) [constructor]
+    cls.add_constructor([param('ns3::OutputStreamWrapper const &', 'arg0')])
+    ## output-stream-wrapper.h (module 'network'): ns3::OutputStreamWrapper::OutputStreamWrapper(std::string filename, std::ios_base::openmode filemode) [constructor]
+    cls.add_constructor([param('std::string', 'filename'), param('std::ios_base::openmode', 'filemode')])
+    ## output-stream-wrapper.h (module 'network'): ns3::OutputStreamWrapper::OutputStreamWrapper(std::ostream * os) [constructor]
+    cls.add_constructor([param('std::ostream *', 'os')])
+    ## output-stream-wrapper.h (module 'network'): std::ostream * ns3::OutputStreamWrapper::GetStream() [member function]
+    cls.add_method('GetStream', 
+                   'std::ostream *', 
+                   [])
+    return
+
+def register_Ns3Packet_methods(root_module, cls):
+    cls.add_output_stream_operator()
+    ## packet.h (module 'network'): ns3::Packet::Packet() [constructor]
+    cls.add_constructor([])
+    ## packet.h (module 'network'): ns3::Packet::Packet(ns3::Packet const & o) [constructor]
+    cls.add_constructor([param('ns3::Packet const &', 'o')])
+    ## packet.h (module 'network'): ns3::Packet::Packet(uint32_t size) [constructor]
+    cls.add_constructor([param('uint32_t', 'size')])
+    ## packet.h (module 'network'): ns3::Packet::Packet(uint8_t const * buffer, uint32_t size, bool magic) [constructor]
+    cls.add_constructor([param('uint8_t const *', 'buffer'), param('uint32_t', 'size'), param('bool', 'magic')])
+    ## packet.h (module 'network'): ns3::Packet::Packet(uint8_t const * buffer, uint32_t size) [constructor]
+    cls.add_constructor([param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
+    ## packet.h (module 'network'): void ns3::Packet::AddAtEnd(ns3::Ptr<const ns3::Packet> packet) [member function]
+    cls.add_method('AddAtEnd', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Packet const >', 'packet')])
+    ## packet.h (module 'network'): void ns3::Packet::AddByteTag(ns3::Tag const & tag) const [member function]
+    cls.add_method('AddByteTag', 
+                   'void', 
+                   [param('ns3::Tag const &', 'tag')], 
+                   is_const=True)
+    ## packet.h (module 'network'): void ns3::Packet::AddByteTag(ns3::Tag const & tag, uint32_t start, uint32_t end) const [member function]
+    cls.add_method('AddByteTag', 
+                   'void', 
+                   [param('ns3::Tag const &', 'tag'), param('uint32_t', 'start'), param('uint32_t', 'end')], 
+                   is_const=True)
+    ## packet.h (module 'network'): void ns3::Packet::AddHeader(ns3::Header const & header) [member function]
+    cls.add_method('AddHeader', 
+                   'void', 
+                   [param('ns3::Header const &', 'header')])
+    ## packet.h (module 'network'): void ns3::Packet::AddPacketTag(ns3::Tag const & tag) const [member function]
+    cls.add_method('AddPacketTag', 
+                   'void', 
+                   [param('ns3::Tag const &', 'tag')], 
+                   is_const=True)
+    ## packet.h (module 'network'): void ns3::Packet::AddPaddingAtEnd(uint32_t size) [member function]
+    cls.add_method('AddPaddingAtEnd', 
+                   'void', 
+                   [param('uint32_t', 'size')])
+    ## packet.h (module 'network'): void ns3::Packet::AddTrailer(ns3::Trailer const & trailer) [member function]
+    cls.add_method('AddTrailer', 
+                   'void', 
+                   [param('ns3::Trailer const &', 'trailer')])
+    ## packet.h (module 'network'): ns3::PacketMetadata::ItemIterator ns3::Packet::BeginItem() const [member function]
+    cls.add_method('BeginItem', 
+                   'ns3::PacketMetadata::ItemIterator', 
+                   [], 
+                   is_const=True)
+    ## packet.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Packet::Copy() const [member function]
+    cls.add_method('Copy', 
+                   'ns3::Ptr< ns3::Packet >', 
+                   [], 
+                   is_const=True)
+    ## packet.h (module 'network'): uint32_t ns3::Packet::CopyData(uint8_t * buffer, uint32_t size) const [member function]
+    cls.add_method('CopyData', 
+                   'uint32_t', 
+                   [param('uint8_t *', 'buffer'), param('uint32_t', 'size')], 
+                   is_const=True)
+    ## packet.h (module 'network'): void ns3::Packet::CopyData(std::ostream * os, uint32_t size) const [member function]
+    cls.add_method('CopyData', 
+                   'void', 
+                   [param('std::ostream *', 'os'), param('uint32_t', 'size')], 
+                   is_const=True)
+    ## packet.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Packet::CreateFragment(uint32_t start, uint32_t length) const [member function]
+    cls.add_method('CreateFragment', 
+                   'ns3::Ptr< ns3::Packet >', 
+                   [param('uint32_t', 'start'), param('uint32_t', 'length')], 
+                   is_const=True)
+    ## packet.h (module 'network'): static void ns3::Packet::EnableChecking() [member function]
+    cls.add_method('EnableChecking', 
+                   'void', 
+                   [], 
+                   is_static=True)
+    ## packet.h (module 'network'): static void ns3::Packet::EnablePrinting() [member function]
+    cls.add_method('EnablePrinting', 
+                   'void', 
+                   [], 
+                   is_static=True)
+    ## packet.h (module 'network'): bool ns3::Packet::FindFirstMatchingByteTag(ns3::Tag & tag) const [member function]
+    cls.add_method('FindFirstMatchingByteTag', 
+                   'bool', 
+                   [param('ns3::Tag &', 'tag')], 
+                   is_const=True)
+    ## packet.h (module 'network'): ns3::ByteTagIterator ns3::Packet::GetByteTagIterator() const [member function]
+    cls.add_method('GetByteTagIterator', 
+                   'ns3::ByteTagIterator', 
+                   [], 
+                   is_const=True)
+    ## packet.h (module 'network'): ns3::Ptr<ns3::NixVector> ns3::Packet::GetNixVector() const [member function]
+    cls.add_method('GetNixVector', 
+                   'ns3::Ptr< ns3::NixVector >', 
+                   [], 
+                   is_const=True)
+    ## packet.h (module 'network'): ns3::PacketTagIterator ns3::Packet::GetPacketTagIterator() const [member function]
+    cls.add_method('GetPacketTagIterator', 
+                   'ns3::PacketTagIterator', 
+                   [], 
+                   is_const=True)
+    ## packet.h (module 'network'): uint32_t ns3::Packet::GetSerializedSize() const [member function]
+    cls.add_method('GetSerializedSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## packet.h (module 'network'): uint32_t ns3::Packet::GetSize() const [member function]
+    cls.add_method('GetSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True)
+    ## packet.h (module 'network'): uint64_t ns3::Packet::GetUid() const [member function]
+    cls.add_method('GetUid', 
+                   'uint64_t', 
+                   [], 
+                   is_const=True)
+    ## packet.h (module 'network'): uint32_t ns3::Packet::PeekHeader(ns3::Header & header) const [member function]
+    cls.add_method('PeekHeader', 
+                   'uint32_t', 
+                   [param('ns3::Header &', 'header')], 
+                   is_const=True)
+    ## packet.h (module 'network'): uint32_t ns3::Packet::PeekHeader(ns3::Header & header, uint32_t size) const [member function]
+    cls.add_method('PeekHeader', 
+                   'uint32_t', 
+                   [param('ns3::Header &', 'header'), param('uint32_t', 'size')], 
+                   is_const=True)
+    ## packet.h (module 'network'): bool ns3::Packet::PeekPacketTag(ns3::Tag & tag) const [member function]
+    cls.add_method('PeekPacketTag', 
+                   'bool', 
+                   [param('ns3::Tag &', 'tag')], 
+                   is_const=True)
+    ## packet.h (module 'network'): uint32_t ns3::Packet::PeekTrailer(ns3::Trailer & trailer) [member function]
+    cls.add_method('PeekTrailer', 
+                   'uint32_t', 
+                   [param('ns3::Trailer &', 'trailer')])
+    ## packet.h (module 'network'): void ns3::Packet::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True)
+    ## packet.h (module 'network'): void ns3::Packet::PrintByteTags(std::ostream & os) const [member function]
+    cls.add_method('PrintByteTags', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True)
+    ## packet.h (module 'network'): void ns3::Packet::PrintPacketTags(std::ostream & os) const [member function]
+    cls.add_method('PrintPacketTags', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True)
+    ## packet.h (module 'network'): void ns3::Packet::RemoveAllByteTags() [member function]
+    cls.add_method('RemoveAllByteTags', 
+                   'void', 
+                   [])
+    ## packet.h (module 'network'): void ns3::Packet::RemoveAllPacketTags() [member function]
+    cls.add_method('RemoveAllPacketTags', 
+                   'void', 
+                   [])
+    ## packet.h (module 'network'): void ns3::Packet::RemoveAtEnd(uint32_t size) [member function]
+    cls.add_method('RemoveAtEnd', 
+                   'void', 
+                   [param('uint32_t', 'size')])
+    ## packet.h (module 'network'): void ns3::Packet::RemoveAtStart(uint32_t size) [member function]
+    cls.add_method('RemoveAtStart', 
+                   'void', 
+                   [param('uint32_t', 'size')])
+    ## packet.h (module 'network'): uint32_t ns3::Packet::RemoveHeader(ns3::Header & header) [member function]
+    cls.add_method('RemoveHeader', 
+                   'uint32_t', 
+                   [param('ns3::Header &', 'header')])
+    ## packet.h (module 'network'): uint32_t ns3::Packet::RemoveHeader(ns3::Header & header, uint32_t size) [member function]
+    cls.add_method('RemoveHeader', 
+                   'uint32_t', 
+                   [param('ns3::Header &', 'header'), param('uint32_t', 'size')])
+    ## packet.h (module 'network'): bool ns3::Packet::RemovePacketTag(ns3::Tag & tag) [member function]
+    cls.add_method('RemovePacketTag', 
+                   'bool', 
+                   [param('ns3::Tag &', 'tag')])
+    ## packet.h (module 'network'): uint32_t ns3::Packet::RemoveTrailer(ns3::Trailer & trailer) [member function]
+    cls.add_method('RemoveTrailer', 
+                   'uint32_t', 
+                   [param('ns3::Trailer &', 'trailer')])
+    ## packet.h (module 'network'): bool ns3::Packet::ReplacePacketTag(ns3::Tag & tag) [member function]
+    cls.add_method('ReplacePacketTag', 
+                   'bool', 
+                   [param('ns3::Tag &', 'tag')])
+    ## packet.h (module 'network'): uint32_t ns3::Packet::Serialize(uint8_t * buffer, uint32_t maxSize) const [member function]
+    cls.add_method('Serialize', 
+                   'uint32_t', 
+                   [param('uint8_t *', 'buffer'), param('uint32_t', 'maxSize')], 
+                   is_const=True)
+    ## packet.h (module 'network'): void ns3::Packet::SetNixVector(ns3::Ptr<ns3::NixVector> nixVector) const [member function]
+    cls.add_method('SetNixVector', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::NixVector >', 'nixVector')], 
+                   is_const=True)
+    ## packet.h (module 'network'): std::string ns3::Packet::ToString() const [member function]
+    cls.add_method('ToString', 
+                   'std::string', 
+                   [], 
+                   is_const=True)
+    return
+
+def register_Ns3QueueItem_methods(root_module, cls):
+    cls.add_output_stream_operator()
+    ## queue-item.h (module 'network'): ns3::QueueItem::QueueItem(ns3::Ptr<ns3::Packet> p) [constructor]
+    cls.add_constructor([param('ns3::Ptr< ns3::Packet >', 'p')])
+    ## queue-item.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::QueueItem::GetPacket() const [member function]
+    cls.add_method('GetPacket', 
+                   'ns3::Ptr< ns3::Packet >', 
+                   [], 
+                   is_const=True)
+    ## queue-item.h (module 'network'): uint32_t ns3::QueueItem::GetSize() const [member function]
+    cls.add_method('GetSize', 
+                   'uint32_t', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## queue-item.h (module 'network'): bool ns3::QueueItem::GetUint8Value(ns3::QueueItem::Uint8Values field, uint8_t & value) const [member function]
+    cls.add_method('GetUint8Value', 
+                   'bool', 
+                   [param('ns3::QueueItem::Uint8Values', 'field'), param('uint8_t &', 'value')], 
+                   is_const=True, is_virtual=True)
+    ## queue-item.h (module 'network'): void ns3::QueueItem::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True, is_virtual=True)
+    return
+
+def register_Ns3TimeValue_methods(root_module, cls):
+    ## nstime.h (module 'core'): ns3::TimeValue::TimeValue() [constructor]
+    cls.add_constructor([])
+    ## nstime.h (module 'core'): ns3::TimeValue::TimeValue(ns3::Time const & value) [constructor]
+    cls.add_constructor([param('ns3::Time const &', 'value')])
+    ## nstime.h (module 'core'): ns3::TimeValue::TimeValue(ns3::TimeValue const & arg0) [constructor]
+    cls.add_constructor([param('ns3::TimeValue const &', 'arg0')])
+    ## nstime.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::TimeValue::Copy() const [member function]
+    cls.add_method('Copy', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## nstime.h (module 'core'): bool ns3::TimeValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
+    cls.add_method('DeserializeFromString', 
+                   'bool', 
+                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_virtual=True)
+    ## nstime.h (module 'core'): ns3::Time ns3::TimeValue::Get() const [member function]
+    cls.add_method('Get', 
+                   'ns3::Time', 
+                   [], 
+                   is_const=True)
+    ## nstime.h (module 'core'): std::string ns3::TimeValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
+    cls.add_method('SerializeToString', 
+                   'std::string', 
+                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_const=True, is_virtual=True)
+    ## nstime.h (module 'core'): void ns3::TimeValue::Set(ns3::Time const & value) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('ns3::Time const &', 'value')])
+    return
+
+def register_Ns3TypeIdChecker_methods(root_module, cls):
+    ## type-id.h (module 'core'): ns3::TypeIdChecker::TypeIdChecker() [constructor]
+    cls.add_constructor([])
+    ## type-id.h (module 'core'): ns3::TypeIdChecker::TypeIdChecker(ns3::TypeIdChecker const & arg0) [constructor]
+    cls.add_constructor([param('ns3::TypeIdChecker const &', 'arg0')])
+    return
+
+def register_Ns3TypeIdValue_methods(root_module, cls):
+    ## type-id.h (module 'core'): ns3::TypeIdValue::TypeIdValue() [constructor]
+    cls.add_constructor([])
+    ## type-id.h (module 'core'): ns3::TypeIdValue::TypeIdValue(ns3::TypeId const & value) [constructor]
+    cls.add_constructor([param('ns3::TypeId const &', 'value')])
+    ## type-id.h (module 'core'): ns3::TypeIdValue::TypeIdValue(ns3::TypeIdValue const & arg0) [constructor]
+    cls.add_constructor([param('ns3::TypeIdValue const &', 'arg0')])
+    ## type-id.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::TypeIdValue::Copy() const [member function]
+    cls.add_method('Copy', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## type-id.h (module 'core'): bool ns3::TypeIdValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
+    cls.add_method('DeserializeFromString', 
+                   'bool', 
+                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_virtual=True)
+    ## type-id.h (module 'core'): ns3::TypeId ns3::TypeIdValue::Get() const [member function]
+    cls.add_method('Get', 
+                   'ns3::TypeId', 
+                   [], 
+                   is_const=True)
+    ## type-id.h (module 'core'): std::string ns3::TypeIdValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
+    cls.add_method('SerializeToString', 
+                   'std::string', 
+                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_const=True, is_virtual=True)
+    ## type-id.h (module 'core'): void ns3::TypeIdValue::Set(ns3::TypeId const & value) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('ns3::TypeId const &', 'value')])
+    return
+
+def register_Ns3AddressChecker_methods(root_module, cls):
+    ## address.h (module 'network'): ns3::AddressChecker::AddressChecker() [constructor]
+    cls.add_constructor([])
+    ## address.h (module 'network'): ns3::AddressChecker::AddressChecker(ns3::AddressChecker const & arg0) [constructor]
+    cls.add_constructor([param('ns3::AddressChecker const &', 'arg0')])
+    return
+
+def register_Ns3AddressValue_methods(root_module, cls):
+    ## address.h (module 'network'): ns3::AddressValue::AddressValue() [constructor]
+    cls.add_constructor([])
+    ## address.h (module 'network'): ns3::AddressValue::AddressValue(ns3::Address const & value) [constructor]
+    cls.add_constructor([param('ns3::Address const &', 'value')])
+    ## address.h (module 'network'): ns3::AddressValue::AddressValue(ns3::AddressValue const & arg0) [constructor]
+    cls.add_constructor([param('ns3::AddressValue const &', 'arg0')])
+    ## address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::AddressValue::Copy() const [member function]
+    cls.add_method('Copy', 
+                   'ns3::Ptr< ns3::AttributeValue >', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## address.h (module 'network'): bool ns3::AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
+    cls.add_method('DeserializeFromString', 
+                   'bool', 
+                   [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_virtual=True)
+    ## address.h (module 'network'): ns3::Address ns3::AddressValue::Get() const [member function]
+    cls.add_method('Get', 
+                   'ns3::Address', 
+                   [], 
+                   is_const=True)
+    ## address.h (module 'network'): std::string ns3::AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
+    cls.add_method('SerializeToString', 
+                   'std::string', 
+                   [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
+                   is_const=True, is_virtual=True)
+    ## address.h (module 'network'): void ns3::AddressValue::Set(ns3::Address const & value) [member function]
+    cls.add_method('Set', 
+                   'void', 
+                   [param('ns3::Address const &', 'value')])
+    return
+
+def register_Ns3CallbackImpl__Bool_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackImpl< bool, ns3::Ptr< ns3::Socket >, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
+    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
+    cls.add_method('DoGetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True)
+    ## callback.h (module 'core'): std::string ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
+    cls.add_method('GetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): bool ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Socket> arg0, ns3::Address const & arg1) [member operator]
+    cls.add_method('operator()', 
+                   'bool', 
+                   [param('ns3::Ptr< ns3::Socket >', 'arg0'), param('ns3::Address const &', 'arg1')], 
+                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackImpl< ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
+    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
+    cls.add_method('DoGetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True)
+    ## callback.h (module 'core'): std::string ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
+    cls.add_method('GetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): ns3::ObjectBase * ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()() [member operator]
+    cls.add_method('operator()', 
+                   'ns3::ObjectBase *', 
+                   [], 
+                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ipv4L3ProtocolDropReason_Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
+    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
+    cls.add_method('DoGetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True)
+    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
+    cls.add_method('GetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): void ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ipv4Header const & arg0, ns3::Ptr<const ns3::Packet> arg1, ns3::Ipv4L3Protocol::DropReason arg2, ns3::Ptr<ns3::Ipv4> arg3, unsigned int arg4) [member operator]
+    cls.add_method('operator()', 
+                   'void', 
+                   [param('ns3::Ipv4Header const &', 'arg0'), param('ns3::Ptr< ns3::Packet const >', 'arg1'), param('ns3::Ipv4L3Protocol::DropReason', 'arg2'), param('ns3::Ptr< ns3::Ipv4 >', 'arg3'), param('unsigned int', 'arg4')], 
+                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
+    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
+    cls.add_method('DoGetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True)
+    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
+    cls.add_method('GetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): void ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ipv4Header const & arg0, ns3::Ptr<const ns3::Packet> arg1, unsigned int arg2) [member operator]
+    cls.add_method('operator()', 
+                   'void', 
+                   [param('ns3::Ipv4Header const &', 'arg0'), param('ns3::Ptr< ns3::Packet const >', 'arg1'), param('unsigned int', 'arg2')], 
+                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3CallbackImpl__Void_Const_ns3Ipv6Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ipv6L3ProtocolDropReason_Ns3Ptr__lt__ns3Ipv6__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
+    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
+    cls.add_method('DoGetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True)
+    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
+    cls.add_method('GetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): void ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ipv6Header const & arg0, ns3::Ptr<const ns3::Packet> arg1, ns3::Ipv6L3Protocol::DropReason arg2, ns3::Ptr<ns3::Ipv6> arg3, unsigned int arg4) [member operator]
+    cls.add_method('operator()', 
+                   'void', 
+                   [param('ns3::Ipv6Header const &', 'arg0'), param('ns3::Ptr< ns3::Packet const >', 'arg1'), param('ns3::Ipv6L3Protocol::DropReason', 'arg2'), param('ns3::Ptr< ns3::Ipv6 >', 'arg3'), param('unsigned int', 'arg4')], 
+                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3CallbackImpl__Void_Const_ns3Ipv6Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
+    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
+    cls.add_method('DoGetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True)
+    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
+    cls.add_method('GetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): void ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ipv6Header const & arg0, ns3::Ptr<const ns3::Packet> arg1, unsigned int arg2) [member operator]
+    cls.add_method('operator()', 
+                   'void', 
+                   [param('ns3::Ipv6Header const &', 'arg0'), param('ns3::Ptr< ns3::Packet const >', 'arg1'), param('unsigned int', 'arg2')], 
+                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
+    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
+    cls.add_method('DoGetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True)
+    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
+    cls.add_method('GetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::Packet> arg0, ns3::Ptr<ns3::Ipv4> arg1, unsigned int arg2) [member operator]
+    cls.add_method('operator()', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Packet const >', 'arg0'), param('ns3::Ptr< ns3::Ipv4 >', 'arg1'), param('unsigned int', 'arg2')], 
+                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ptr__lt__ns3Ipv6__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
+    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
+    cls.add_method('DoGetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True)
+    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
+    cls.add_method('GetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::Packet> arg0, ns3::Ptr<ns3::Ipv6> arg1, unsigned int arg2) [member operator]
+    cls.add_method('operator()', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Packet const >', 'arg0'), param('ns3::Ptr< ns3::Ipv6 >', 'arg1'), param('unsigned int', 'arg2')], 
+                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
+    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
+    cls.add_method('DoGetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True)
+    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
+    cls.add_method('GetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::NetDevice> arg0, ns3::Ptr<const ns3::Packet> arg1, short unsigned int arg2, ns3::Address const & arg3, ns3::Address const & arg4, ns3::NetDevice::PacketType arg5) [member operator]
+    cls.add_method('operator()', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::NetDevice >', 'arg0'), param('ns3::Ptr< ns3::Packet const >', 'arg1'), param('short unsigned int', 'arg2'), param('ns3::Address const &', 'arg3'), param('ns3::Address const &', 'arg4'), param('ns3::NetDevice::PacketType', 'arg5')], 
+                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
+    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
+    cls.add_method('DoGetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True)
+    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
+    cls.add_method('GetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::NetDevice> arg0) [member operator]
+    cls.add_method('operator()', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::NetDevice >', 'arg0')], 
+                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Socket >, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
+    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
+    cls.add_method('DoGetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True)
+    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
+    cls.add_method('GetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Socket> arg0, ns3::Address const & arg1) [member operator]
+    cls.add_method('operator()', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Socket >', 'arg0'), param('ns3::Address const &', 'arg1')], 
+                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
+    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
+    cls.add_method('DoGetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True)
+    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
+    cls.add_method('GetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Socket> arg0) [member operator]
+    cls.add_method('operator()', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Socket >', 'arg0')], 
+                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
+    cls.add_constructor([])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
+    cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Socket >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
+    ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
+    cls.add_method('DoGetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_static=True)
+    ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
+    cls.add_method('GetTypeid', 
+                   'std::string', 
+                   [], 
+                   is_const=True, is_virtual=True)
+    ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Socket> arg0, unsigned int arg1) [member operator]
+    cls.add_method('operator()', 
+                   'void', 
+                   [param('ns3::Ptr< ns3::Socket >', 'arg0'), param('unsigned int', 'arg1')], 
+                   custom_name='__call__', is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3QueueDiscItem_methods(root_module, cls):
+    ## queue-item.h (module 'network'): ns3::QueueDiscItem::QueueDiscItem(ns3::Ptr<ns3::Packet> p, ns3::Address const & addr, uint16_t protocol) [constructor]
+    cls.add_constructor([param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Address const &', 'addr'), param('uint16_t', 'protocol')])
+    ## queue-item.h (module 'network'): ns3::Address ns3::QueueDiscItem::GetAddress() const [member function]
+    cls.add_method('GetAddress', 
+                   'ns3::Address', 
+                   [], 
+                   is_const=True)
+    ## queue-item.h (module 'network'): uint16_t ns3::QueueDiscItem::GetProtocol() const [member function]
+    cls.add_method('GetProtocol', 
+                   'uint16_t', 
+                   [], 
+                   is_const=True)
+    ## queue-item.h (module 'network'): uint8_t ns3::QueueDiscItem::GetTxQueueIndex() const [member function]
+    cls.add_method('GetTxQueueIndex', 
+                   'uint8_t', 
+                   [], 
+                   is_const=True)
+    ## queue-item.h (module 'network'): void ns3::QueueDiscItem::SetTxQueueIndex(uint8_t txq) [member function]
+    cls.add_method('SetTxQueueIndex', 
+                   'void', 
+                   [param('uint8_t', 'txq')])
+    ## queue-item.h (module 'network'): ns3::Time ns3::QueueDiscItem::GetTimeStamp() const [member function]
+    cls.add_method('GetTimeStamp', 
+                   'ns3::Time', 
+                   [], 
+                   is_const=True)
+    ## queue-item.h (module 'network'): void ns3::QueueDiscItem::SetTimeStamp(ns3::Time t) [member function]
+    cls.add_method('SetTimeStamp', 
+                   'void', 
+                   [param('ns3::Time', 't')])
+    ## queue-item.h (module 'network'): void ns3::QueueDiscItem::AddHeader() [member function]
+    cls.add_method('AddHeader', 
+                   'void', 
+                   [], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## queue-item.h (module 'network'): void ns3::QueueDiscItem::Print(std::ostream & os) const [member function]
+    cls.add_method('Print', 
+                   'void', 
+                   [param('std::ostream &', 'os')], 
+                   is_const=True, is_virtual=True)
+    ## queue-item.h (module 'network'): bool ns3::QueueDiscItem::Mark() [member function]
+    cls.add_method('Mark', 
+                   'bool', 
+                   [], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## queue-item.h (module 'network'): uint32_t ns3::QueueDiscItem::Hash(uint32_t perturbation=0) const [member function]
+    cls.add_method('Hash', 
+                   'uint32_t', 
+                   [param('uint32_t', 'perturbation', default_value='0')], 
+                   is_const=True, is_virtual=True)
+    return
+
+def register_Ns3HashImplementation_methods(root_module, cls):
+    ## hash-function.h (module 'core'): ns3::Hash::Implementation::Implementation(ns3::Hash::Implementation const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Hash::Implementation const &', 'arg0')])
+    ## hash-function.h (module 'core'): ns3::Hash::Implementation::Implementation() [constructor]
+    cls.add_constructor([])
+    ## hash-function.h (module 'core'): uint32_t ns3::Hash::Implementation::GetHash32(char const * buffer, std::size_t const size) [member function]
+    cls.add_method('GetHash32', 
+                   'uint32_t', 
+                   [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
+                   is_pure_virtual=True, is_virtual=True)
+    ## hash-function.h (module 'core'): uint64_t ns3::Hash::Implementation::GetHash64(char const * buffer, std::size_t const size) [member function]
+    cls.add_method('GetHash64', 
+                   'uint64_t', 
+                   [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
+                   is_virtual=True)
+    ## hash-function.h (module 'core'): void ns3::Hash::Implementation::clear() [member function]
+    cls.add_method('clear', 
+                   'void', 
+                   [], 
+                   is_pure_virtual=True, is_virtual=True)
+    return
+
+def register_Ns3HashFunctionFnv1a_methods(root_module, cls):
+    ## hash-fnv.h (module 'core'): ns3::Hash::Function::Fnv1a::Fnv1a(ns3::Hash::Function::Fnv1a const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Hash::Function::Fnv1a const &', 'arg0')])
+    ## hash-fnv.h (module 'core'): ns3::Hash::Function::Fnv1a::Fnv1a() [constructor]
+    cls.add_constructor([])
+    ## hash-fnv.h (module 'core'): uint32_t ns3::Hash::Function::Fnv1a::GetHash32(char const * buffer, size_t const size) [member function]
+    cls.add_method('GetHash32', 
+                   'uint32_t', 
+                   [param('char const *', 'buffer'), param('size_t const', 'size')], 
+                   is_virtual=True)
+    ## hash-fnv.h (module 'core'): uint64_t ns3::Hash::Function::Fnv1a::GetHash64(char const * buffer, size_t const size) [member function]
+    cls.add_method('GetHash64', 
+                   'uint64_t', 
+                   [param('char const *', 'buffer'), param('size_t const', 'size')], 
+                   is_virtual=True)
+    ## hash-fnv.h (module 'core'): void ns3::Hash::Function::Fnv1a::clear() [member function]
+    cls.add_method('clear', 
+                   'void', 
+                   [], 
+                   is_virtual=True)
+    return
+
+def register_Ns3HashFunctionHash32_methods(root_module, cls):
+    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash32::Hash32(ns3::Hash::Function::Hash32 const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Hash::Function::Hash32 const &', 'arg0')])
+    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash32::Hash32(ns3::Hash::Hash32Function_ptr hp) [constructor]
+    cls.add_constructor([param('ns3::Hash::Hash32Function_ptr', 'hp')])
+    ## hash-function.h (module 'core'): uint32_t ns3::Hash::Function::Hash32::GetHash32(char const * buffer, std::size_t const size) [member function]
+    cls.add_method('GetHash32', 
+                   'uint32_t', 
+                   [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
+                   is_virtual=True)
+    ## hash-function.h (module 'core'): void ns3::Hash::Function::Hash32::clear() [member function]
+    cls.add_method('clear', 
+                   'void', 
+                   [], 
+                   is_virtual=True)
+    return
+
+def register_Ns3HashFunctionHash64_methods(root_module, cls):
+    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash64::Hash64(ns3::Hash::Function::Hash64 const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Hash::Function::Hash64 const &', 'arg0')])
+    ## hash-function.h (module 'core'): ns3::Hash::Function::Hash64::Hash64(ns3::Hash::Hash64Function_ptr hp) [constructor]
+    cls.add_constructor([param('ns3::Hash::Hash64Function_ptr', 'hp')])
+    ## hash-function.h (module 'core'): uint32_t ns3::Hash::Function::Hash64::GetHash32(char const * buffer, std::size_t const size) [member function]
+    cls.add_method('GetHash32', 
+                   'uint32_t', 
+                   [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
+                   is_virtual=True)
+    ## hash-function.h (module 'core'): uint64_t ns3::Hash::Function::Hash64::GetHash64(char const * buffer, std::size_t const size) [member function]
+    cls.add_method('GetHash64', 
+                   'uint64_t', 
+                   [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
+                   is_virtual=True)
+    ## hash-function.h (module 'core'): void ns3::Hash::Function::Hash64::clear() [member function]
+    cls.add_method('clear', 
+                   'void', 
+                   [], 
+                   is_virtual=True)
+    return
+
+def register_Ns3HashFunctionMurmur3_methods(root_module, cls):
+    ## hash-murmur3.h (module 'core'): ns3::Hash::Function::Murmur3::Murmur3(ns3::Hash::Function::Murmur3 const & arg0) [constructor]
+    cls.add_constructor([param('ns3::Hash::Function::Murmur3 const &', 'arg0')])
+    ## hash-murmur3.h (module 'core'): ns3::Hash::Function::Murmur3::Murmur3() [constructor]
+    cls.add_constructor([])
+    ## hash-murmur3.h (module 'core'): uint32_t ns3::Hash::Function::Murmur3::GetHash32(char const * buffer, std::size_t const size) [member function]
+    cls.add_method('GetHash32', 
+                   'uint32_t', 
+                   [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
+                   is_virtual=True)
+    ## hash-murmur3.h (module 'core'): uint64_t ns3::Hash::Function::Murmur3::GetHash64(char const * buffer, std::size_t const size) [member function]
+    cls.add_method('GetHash64', 
+                   'uint64_t', 
+                   [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
+                   is_virtual=True)
+    ## hash-murmur3.h (module 'core'): void ns3::Hash::Function::Murmur3::clear() [member function]
+    cls.add_method('clear', 
+                   'void', 
+                   [], 
+                   is_virtual=True)
+    return
+
+def register_functions(root_module):
+    module = root_module
+    register_functions_ns3_FatalImpl(module.add_cpp_namespace('FatalImpl'), root_module)
+    register_functions_ns3_Hash(module.add_cpp_namespace('Hash'), root_module)
+    register_functions_ns3_TracedValueCallback(module.add_cpp_namespace('TracedValueCallback'), root_module)
+    return
+
+def register_functions_ns3_FatalImpl(module, root_module):
+    return
+
+def register_functions_ns3_Hash(module, root_module):
+    register_functions_ns3_Hash_Function(module.add_cpp_namespace('Function'), root_module)
+    return
+
+def register_functions_ns3_Hash_Function(module, root_module):
+    return
+
+def register_functions_ns3_TracedValueCallback(module, root_module):
+    return
+
+def main():
+    out = FileCodeSink(sys.stdout)
+    root_module = module_init()
+    register_types(root_module)
+    register_methods(root_module)
+    register_functions(root_module)
+    root_module.generate(out)
+
+if __name__ == '__main__':
+    main()
+
diff --git a/src/efm-monitor/doc/flow-monitor.rst b/src/efm-monitor/doc/flow-monitor.rst
new file mode 100644
index 000000000..66ae33761
--- /dev/null
+++ b/src/efm-monitor/doc/flow-monitor.rst
@@ -0,0 +1,229 @@
+Flow Monitor
+------------
+
+.. include:: replace.txt
+.. highlight:: cpp
+
+.. heading hierarchy:
+   ------------- Chapter
+   ************* Section (#.#)
+   ============= Subsection (#.#.#)
+   ############# Paragraph (no number)
+
+Model Description
+*****************
+
+The source code for the new module lives in the directory ``src/flow-monitor``.
+
+The Flow Monitor module goal is to provide a flexible system to measure the
+performance of network protocols. The module uses probes, installed in network
+nodes, to track the packets exchanged by the nodes, and it will measure
+a number of parameters. Packets are divided according to the flow they belong
+to, where each flow is defined according to the probe's characteristics (e.g.,
+for IP, a flow is defined as the packets with the same {protocol, source (IP, port),
+destination (IP, port)} tuple.
+
+The statistics are collected for each flow can be exported in XML format. Moreover,
+the user can access the probes directly to request specific stats about each flow.
+
+Design
+======
+
+Flow Monitor module is designed in a modular way. It can be extended by subclassing
+``ns3::FlowProbe`` and ``ns3::FlowClassifier``.
+Typically, a subclass of ``ns3::FlowProbe`` works by listening to the appropriate
+class Traces, and then uses its own ``ns3::FlowClassifier`` subclass to classify
+the packets passing though each node.
+
+Each Probe can try to listen to other classes traces (e.g., ``ns3::Ipv4FlowProbe``
+will try to use any ``ns3::NetDevice`` trace named ``TxQueue/Drop``) but this
+is something that the user should not rely into blindly, because the trace is not
+guaranteed to be in every type of ``ns3::NetDevice``. As an example,
+``CsmaNetDevice`` and ``PointToPointNetDevice`` have a ``TxQueue/Drop`` trace, while
+``WiFiNetDevice`` does not.
+
+The full module design is described in [FlowMonitor]_
+
+Scope and Limitations
+=====================
+
+At the moment, probes and classifiers are available only for IPv4 and IPv6.
+
+IPv4 and IPv6 probes will classify packets in four points:
+
+* When a packet is sent (SendOutgoing IPv[4,6] traces)
+* When a packet is forwarded (UnicastForward IPv[4,6] traces)
+* When a packet is received (LocalDeliver IPv[4,6] traces)
+* When a packet is dropped (Drop IPv[4,6] traces)
+
+Since the packets are tracked at IP level, any retransmission caused by L4 protocols (e.g., TCP)
+will be seen by the probe as a new packet.
+
+A Tag will be added to the packet (``ns3::Ipv[4,6]FlowProbeTag``). The tag will carry
+basic packet's data, useful for the packet's classification.
+
+It must be underlined that only L4 (TCP, UDP) packets are, so far, classified.
+Moreover, only unicast packets will be classified.
+These limitations may be removed in the future.
+
+The data collected for each flow are:
+
+* timeFirstTxPacket: when the first packet in the flow was transmitted;
+* timeLastTxPacket: when the last packet in the flow was transmitted;
+* timeFirstRxPacket: when the first packet in the flow was received by an end node;
+* timeLastRxPacket: when the last packet in the flow was received;
+* delaySum: the sum of all end-to-end delays for all received packets of the flow;
+* jitterSum: the sum of all end-to-end delay jitter (delay variation) values for all received packets of the flow, as defined in :rfc:`3393`;
+* txBytes, txPackets: total number of transmitted bytes / packets for the flow;
+* rxBytes, rxPackets: total number of received bytes / packets for the flow;
+* lostPackets: total number of packets that are assumed to be lost (not reported over 10 seconds);
+* timesForwarded: the number of times a packet has been reportedly forwarded;
+* delayHistogram, jitterHistogram, packetSizeHistogram: histogram versions for the delay, jitter, and packet sizes, respectively;
+* packetsDropped, bytesDropped: the number of lost packets and bytes, divided according to the loss reason code (defined in the probe).
+
+It is worth pointing out that the probes measure the packet bytes including IP headers.
+The L2 headers are not included in the measure.
+
+These stats will be written in XML form upon request (see the Usage section).
+
+The "lost" packets problem
+##########################
+
+At the end of a simulation, Flow Monitor could report about "lost" packets, i.e.,
+packets that Flow Monitor have lost track of.
+
+It is important to keep in mind that Flow Monitor records the packets statistics by
+intercepting them at a given network level - let's say at IP level. When the simulation
+ends, any packet queued for transmission below the IP level will be considered as lost.
+
+It is strongly suggested to consider this point when using Flow Monitor. The user can choose to:
+
+* Ignore the lost packets (if their number is a statistically irrelevant quantity), or
+* Stop the Applications before the actual Simulation End time, leaving enough time between the two for the queued packets to be processed.
+
+The second method is the suggested one. Usually a few seconds are enough (the
+exact value depends on the network type).
+
+It is important to stress that "lost" packets could be anywhere in the network, and could count
+toward the received packets or the dropped ones. Ideally, their number should be zero or a minimal
+fraction of the other ones, i.e., they should be "statistically irrelevant".
+
+References
+==========
+
+.. [FlowMonitor] G. Carneiro, P. Fortuna, and M. Ricardo. 2009. FlowMonitor: a network monitoring framework for the network simulator 3 (NS-3). In Proceedings of the Fourth International ICST Conference on Performance Evaluation Methodologies and Tools (VALUETOOLS '09). http://dx.doi.org/10.4108/ICST.VALUETOOLS2009.7493 (Full text: https://dl.acm.org/doi/abs/10.4108/ICST.VALUETOOLS2009.7493)
+
+Usage
+*****
+
+The module usage is extremely simple. The helper will take care of about everything.
+
+The typical use is::
+
+  // Flow monitor
+  Ptr<FlowMonitor> flowMonitor;
+  FlowMonitorHelper flowHelper;
+  flowMonitor = flowHelper.InstallAll();
+
+  -yourApplicationsContainer-.Stop (Seconds (stop_time));;
+  Simulator::Stop (Seconds(stop_time+cleanup_time));
+  Simulator::Run ();
+
+  flowMonitor->SerializeToXmlFile("NameOfFile.xml", true, true);
+
+the ``SerializeToXmlFile ()`` function 2nd and 3rd parameters are used respectively to
+activate/deactivate the histograms and the per-probe detailed stats.
+Other possible alternatives can be found in the Doxygen documentation, while
+``cleanup_time`` is the time needed by in-flight packets to reach their destinations.
+
+Helpers
+=======
+
+The helper API follows the pattern usage of normal helpers.
+Through the helper you can install the monitor in the nodes, set the monitor attributes, and
+print the statistics.
+
+One important thing is: the :cpp:class:`ns3::FlowMonitorHelper` must be instantiated only
+once in the main.
+
+Attributes
+==========
+
+The module provides the following attributes in :cpp:class:`ns3::FlowMonitor`:
+
+* MaxPerHopDelay (Time, default 10s): The maximum per-hop delay that should be considered;
+* StartTime (Time, default 0s): The time when the monitoring starts;
+* DelayBinWidth (double, default 0.001): The width used in the delay histogram;
+* JitterBinWidth (double, default 0.001): The width used in the jitter histogram;
+* PacketSizeBinWidth (double, default 20.0): The width used in the packetSize histogram;
+* FlowInterruptionsBinWidth (double, default 0.25): The width used in the flowInterruptions histogram;
+* FlowInterruptionsMinTime (double, default 0.5): The minimum inter-arrival time that is considered a flow interruption.
+
+
+Output
+======
+
+The main model output is an XML formatted report about flow statistics. An example is::
+
+  <?xml version="1.0" ?>
+  <FlowMonitor>
+    <FlowStats>
+    <Flow flowId="1" timeFirstTxPacket="+0.0ns" timeFirstRxPacket="+20067198.0ns" timeLastTxPacket="+2235764408.0ns" timeLastRxPacket="+2255831606.0ns" delaySum="+138731526300.0ns" jitterSum="+1849692150.0ns" lastDelay="+20067198.0ns" txBytes="2149400" rxBytes="2149400" txPackets="3735" rxPackets="3735" lostPackets="0" timesForwarded="7466">
+    </Flow>
+    </FlowStats>
+    <Ipv4FlowClassifier>
+    <Flow flowId="1" sourceAddress="10.1.3.1" destinationAddress="10.1.2.2" protocol="6" sourcePort="49153" destinationPort="50000" />
+    </Ipv4FlowClassifier>
+    <Ipv6FlowClassifier>
+    </Ipv6FlowClassifier>
+    <FlowProbes>
+    <FlowProbe index="0">
+      <FlowStats  flowId="1" packets="3735" bytes="2149400" delayFromFirstProbeSum="+0.0ns" >
+      </FlowStats>
+    </FlowProbe>
+    <FlowProbe index="2">
+      <FlowStats  flowId="1" packets="7466" bytes="2224020" delayFromFirstProbeSum="+199415389258.0ns" >
+      </FlowStats>
+    </FlowProbe>
+    <FlowProbe index="4">
+      <FlowStats  flowId="1" packets="3735" bytes="2149400" delayFromFirstProbeSum="+138731526300.0ns" >
+      </FlowStats>
+    </FlowProbe>
+    </FlowProbes>
+  </FlowMonitor>
+
+The output was generated by a TCP flow from 10.1.3.1 to 10.1.2.2.
+
+It is worth noticing that the index 2 probe is reporting more packets and more bytes than the other probes.
+That's a perfectly normal behaviour, as packets are fragmented at IP level in that node.
+
+It should also be observed that the receiving node's probe (index 4) doesn't count the fragments, as the
+reassembly is done before the probing point.
+
+Examples
+========
+
+The examples are located in `src/flow-monitor/examples`.
+
+Moreover, the following examples use the flow-monitor module:
+
+* examples/matrix-topology/matrix-topology.cc
+* examples/routing/manet-routing-compare.cc
+* examples/routing/simple-global-routing.cc
+* examples/tcp/tcp-variants-comparison.cc
+* examples/wireless/multirate.cc
+* examples/wireless/wifi-hidden-terminal.cc
+
+
+Troubleshooting
+===============
+
+Do not define more than one :cpp:class:`ns3::FlowMonitorHelper` in the simulation.
+
+Validation
+**********
+
+The paper in the references contains a full description of the module validation against
+a test network.
+
+Tests are provided to ensure the Histogram correct functionality.
diff --git a/src/efm-monitor/examples/CMakeLists.txt b/src/efm-monitor/examples/CMakeLists.txt
new file mode 100644
index 000000000..8b1378917
--- /dev/null
+++ b/src/efm-monitor/examples/CMakeLists.txt
@@ -0,0 +1 @@
+
diff --git a/src/efm-monitor/examples/flowmon-parse-results.py b/src/efm-monitor/examples/flowmon-parse-results.py
new file mode 100644
index 000000000..29d33ec04
--- /dev/null
+++ b/src/efm-monitor/examples/flowmon-parse-results.py
@@ -0,0 +1,237 @@
+from __future__ import division
+import sys
+import os
+try:
+    from xml.etree import cElementTree as ElementTree
+except ImportError:
+    from xml.etree import ElementTree
+
+def parse_time_ns(tm):
+    if tm.endswith('ns'):
+        return float(tm[:-2])
+    raise ValueError(tm)
+
+
+
+## FiveTuple
+class FiveTuple(object):
+    ## class variables
+    ## @var sourceAddress
+    #  source address
+    ## @var destinationAddress
+    #  destination address
+    ## @var protocol
+    #  network protocol
+    ## @var sourcePort
+    #  source port
+    ## @var destinationPort
+    #  destination port
+    ## @var __slots_
+    #  class variable list
+    __slots_ = ['sourceAddress', 'destinationAddress', 'protocol', 'sourcePort', 'destinationPort']
+    def __init__(self, el):
+        '''! The initializer.
+        @param self The object pointer.
+        @param el The element.
+        '''
+        self.sourceAddress = el.get('sourceAddress')
+        self.destinationAddress = el.get('destinationAddress')
+        self.sourcePort = int(el.get('sourcePort'))
+        self.destinationPort = int(el.get('destinationPort'))
+        self.protocol = int(el.get('protocol'))
+
+## Histogram
+class Histogram(object):
+    ## class variables
+    ## @var bins
+    #  histogram bins
+    ## @var nbins
+    #  number of bins
+    ## @var number_of_flows
+    #  number of flows
+    ## @var __slots_
+    #  class variable list
+    __slots_ = 'bins', 'nbins', 'number_of_flows'
+    def __init__(self, el=None):
+        '''! The initializer.
+        @param self The object pointer.
+        @param el The element.
+        '''
+        self.bins = []
+        if el is not None:
+            #self.nbins = int(el.get('nBins'))
+            for bin in el.findall('bin'):
+                self.bins.append( (float(bin.get("start")), float(bin.get("width")), int(bin.get("count"))) )
+
+## Flow
+class Flow(object):
+    ## class variables
+    ## @var flowId
+    #  delay ID
+    ## @var delayMean
+    #  mean delay
+    ## @var packetLossRatio
+    #  packet loss ratio
+    ## @var rxBitrate
+    #  receive bit rate
+    ## @var txBitrate
+    #  transmit bit rate
+    ## @var fiveTuple
+    #  five tuple
+    ## @var packetSizeMean
+    #  packet size mean
+    ## @var probe_stats_unsorted
+    #  unsirted probe stats
+    ## @var hopCount
+    #  hop count
+    ## @var flowInterruptionsHistogram
+    #  flow histogram
+    ## @var rx_duration
+    #  receive duration
+    ## @var __slots_
+    #  class variable list
+    __slots_ = ['flowId', 'delayMean', 'packetLossRatio', 'rxBitrate', 'txBitrate',
+                'fiveTuple', 'packetSizeMean', 'probe_stats_unsorted',
+                'hopCount', 'flowInterruptionsHistogram', 'rx_duration']
+    def __init__(self, flow_el):
+        '''! The initializer.
+        @param self The object pointer.
+        @param flow_el The element.
+        '''
+        self.flowId = int(flow_el.get('flowId'))
+        rxPackets = float(flow_el.get('rxPackets'))
+        txPackets = float(flow_el.get('txPackets'))
+
+        tx_duration = (parse_time_ns (flow_el.get('timeLastTxPacket')) - parse_time_ns(flow_el.get('timeFirstTxPacket')))*1e-9
+        rx_duration = (parse_time_ns (flow_el.get('timeLastRxPacket')) - parse_time_ns(flow_el.get('timeFirstRxPacket')))*1e-9
+        self.rx_duration = rx_duration
+        self.probe_stats_unsorted = []
+        if rxPackets:
+            self.hopCount = float(flow_el.get('timesForwarded')) / rxPackets + 1
+        else:
+            self.hopCount = -1000
+        if rxPackets:
+            self.delayMean = float(flow_el.get('delaySum')[:-2]) / rxPackets * 1e-9
+            self.packetSizeMean = float(flow_el.get('rxBytes')) / rxPackets
+        else:
+            self.delayMean = None
+            self.packetSizeMean = None
+        if rx_duration > 0:
+            self.rxBitrate = float(flow_el.get('rxBytes'))*8 / rx_duration
+        else:
+            self.rxBitrate = None
+        if tx_duration > 0:
+            self.txBitrate = float(flow_el.get('txBytes'))*8 / tx_duration
+        else:
+            self.txBitrate = None
+        lost = float(flow_el.get('lostPackets'))
+        #print "rxBytes: %s; txPackets: %s; rxPackets: %s; lostPackets: %s" % (flow_el.get('rxBytes'), txPackets, rxPackets, lost)
+        if rxPackets == 0:
+            self.packetLossRatio = None
+        else:
+            self.packetLossRatio = (lost / (rxPackets + lost))
+
+        interrupt_hist_elem = flow_el.find("flowInterruptionsHistogram")
+        if interrupt_hist_elem is None:
+            self.flowInterruptionsHistogram = None
+        else:
+            self.flowInterruptionsHistogram = Histogram(interrupt_hist_elem)
+
+## ProbeFlowStats
+class ProbeFlowStats(object):
+    ## class variables
+    ## @var probeId
+    #  probe ID
+    ## @var packets
+    #  network packets
+    ## @var bytes
+    #  bytes
+    ## @var delayFromFirstProbe
+    #  delay from first probe
+    ## @var __slots_
+    #  class variable list
+    __slots_ = ['probeId', 'packets', 'bytes', 'delayFromFirstProbe']
+
+## Simulation
+class Simulation(object):
+    ## class variables
+    ## @var flows
+    #  list of flows
+    def __init__(self, simulation_el):
+        '''! The initializer.
+        @param self The object pointer.
+        @param simulation_el The element.
+        '''
+        self.flows = []
+        FlowClassifier_el, = simulation_el.findall("Ipv4FlowClassifier")
+        flow_map = {}
+        for flow_el in simulation_el.findall("FlowStats/Flow"):
+            flow = Flow(flow_el)
+            flow_map[flow.flowId] = flow
+            self.flows.append(flow)
+        for flow_cls in FlowClassifier_el.findall("Flow"):
+            flowId = int(flow_cls.get('flowId'))
+            flow_map[flowId].fiveTuple = FiveTuple(flow_cls)
+
+        for probe_elem in simulation_el.findall("FlowProbes/FlowProbe"):
+            probeId = int(probe_elem.get('index'))
+            for stats in probe_elem.findall("FlowStats"):
+                flowId = int(stats.get('flowId'))
+                s = ProbeFlowStats()
+                s.packets = int(stats.get('packets'))
+                s.bytes = float(stats.get('bytes'))
+                s.probeId = probeId
+                if s.packets > 0:
+                    s.delayFromFirstProbe =  parse_time_ns(stats.get('delayFromFirstProbeSum')) / float(s.packets)
+                else:
+                    s.delayFromFirstProbe = 0
+                flow_map[flowId].probe_stats_unsorted.append(s)
+
+
+def main(argv):
+    file_obj = open(argv[1])
+    print("Reading XML file ", end=" ")
+
+    sys.stdout.flush()
+    level = 0
+    sim_list = []
+    for event, elem in ElementTree.iterparse(file_obj, events=("start", "end")):
+        if event == "start":
+            level += 1
+        if event == "end":
+            level -= 1
+            if level == 0 and elem.tag == '':
+                sim = Simulation(elem)
+                sim_list.append(sim)
+                elem.clear() # won't need this any more
+                sys.stdout.write(".")
+                sys.stdout.flush()
+    print(" done.")
+
+
+    for sim in sim_list:
+        for flow in sim.flows:
+            t = flow.fiveTuple
+            proto = {6: 'TCP', 17: 'UDP'} [t.protocol]
+            print("FlowID: %i (%s %s/%s --> %s/%i)" % \
+                (flow.flowId, proto, t.sourceAddress, t.sourcePort, t.destinationAddress, t.destinationPort))
+            if flow.txBitrate is None:
+                print("\tTX bitrate: None")
+            else:
+                print("\tTX bitrate: %.2f kbit/s" % (flow.txBitrate*1e-3,))
+            if flow.rxBitrate is None:
+                print("\tRX bitrate: None")
+            else:
+                print("\tRX bitrate: %.2f kbit/s" % (flow.rxBitrate*1e-3,))
+            if flow.delayMean is None:
+                print("\tMean Delay: None")
+            else:
+                print("\tMean Delay: %.2f ms" % (flow.delayMean*1e3,))
+            if flow.packetLossRatio is None:
+                print("\tPacket Loss Ratio: None")
+            else:
+                print("\tPacket Loss Ratio: %.2f %%" % (flow.packetLossRatio*100))
+
+
+if __name__ == '__main__':
+    main(sys.argv)
diff --git a/src/efm-monitor/examples/wifi-olsr-flowmon.py b/src/efm-monitor/examples/wifi-olsr-flowmon.py
new file mode 100644
index 000000000..834176331
--- /dev/null
+++ b/src/efm-monitor/examples/wifi-olsr-flowmon.py
@@ -0,0 +1,186 @@
+# -*-  Mode: Python; -*-
+#  Copyright (c) 2009 INESC Porto
+#
+#  This program is free software; you can redistribute it and/or modify
+#  it under the terms of the GNU General Public License version 2 as
+#  published by the Free Software Foundation;
+#
+#  This program is distributed in the hope that it will be useful,
+#  but WITHOUT ANY WARRANTY; without even the implied warranty of
+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#  GNU General Public License for more details.
+#
+#  You should have received a copy of the GNU General Public License
+#  along with this program; if not, write to the Free Software
+#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+#  Authors: Gustavo Carneiro <gjc@inescporto.pt>
+
+from __future__ import print_function
+import sys
+
+import ns.applications
+import ns.core
+import ns.flow_monitor
+import ns.internet
+import ns.mobility
+import ns.network
+import ns.olsr
+import ns.wifi
+try:
+    import ns.visualizer
+except ImportError:
+    pass
+
+DISTANCE = 20 # (m)
+NUM_NODES_SIDE = 3
+
+def main(argv):
+
+    cmd = ns.core.CommandLine()
+
+    cmd.NumNodesSide = None
+    cmd.AddValue("NumNodesSide", "Grid side number of nodes (total number of nodes will be this number squared)")
+
+    cmd.Results = None
+    cmd.AddValue("Results", "Write XML results to file")
+
+    cmd.Plot = None
+    cmd.AddValue("Plot", "Plot the results using the matplotlib python module")
+
+    cmd.Parse(argv)
+
+    wifi = ns.wifi.WifiHelper()
+    wifiMac = ns.wifi.WifiMacHelper()
+    wifiPhy = ns.wifi.YansWifiPhyHelper()
+    wifiChannel = ns.wifi.YansWifiChannelHelper.Default()
+    wifiPhy.SetChannel(wifiChannel.Create())
+    ssid = ns.wifi.Ssid("wifi-default")
+    wifiMac.SetType ("ns3::AdhocWifiMac",
+                     "Ssid", ns.wifi.SsidValue(ssid))
+
+    internet = ns.internet.InternetStackHelper()
+    list_routing = ns.internet.Ipv4ListRoutingHelper()
+    olsr_routing = ns.olsr.OlsrHelper()
+    static_routing = ns.internet.Ipv4StaticRoutingHelper()
+    list_routing.Add(static_routing, 0)
+    list_routing.Add(olsr_routing, 100)
+    internet.SetRoutingHelper(list_routing)
+
+    ipv4Addresses = ns.internet.Ipv4AddressHelper()
+    ipv4Addresses.SetBase(ns.network.Ipv4Address("10.0.0.0"), ns.network.Ipv4Mask("255.255.255.0"))
+
+    port = 9   # Discard port(RFC 863)
+    onOffHelper = ns.applications.OnOffHelper("ns3::UdpSocketFactory",
+                                  ns.network.Address(ns.network.InetSocketAddress(ns.network.Ipv4Address("10.0.0.1"), port)))
+    onOffHelper.SetAttribute("DataRate", ns.network.DataRateValue(ns.network.DataRate("100kbps")))
+    onOffHelper.SetAttribute("OnTime", ns.core.StringValue ("ns3::ConstantRandomVariable[Constant=1]"))
+    onOffHelper.SetAttribute("OffTime", ns.core.StringValue ("ns3::ConstantRandomVariable[Constant=0]"))
+
+    addresses = []
+    nodes = []
+
+    if cmd.NumNodesSide is None:
+        num_nodes_side = NUM_NODES_SIDE
+    else:
+        num_nodes_side = int(cmd.NumNodesSide)
+
+    for xi in range(num_nodes_side):
+        for yi in range(num_nodes_side):
+
+            node = ns.network.Node()
+            nodes.append(node)
+
+            internet.Install(ns.network.NodeContainer(node))
+
+            mobility = ns.mobility.ConstantPositionMobilityModel()
+            mobility.SetPosition(ns.core.Vector(xi*DISTANCE, yi*DISTANCE, 0))
+            node.AggregateObject(mobility)
+
+            devices = wifi.Install(wifiPhy, wifiMac, node)
+            ipv4_interfaces = ipv4Addresses.Assign(devices)
+            addresses.append(ipv4_interfaces.GetAddress(0))
+
+    for i, node in enumerate(nodes):
+        destaddr = addresses[(len(addresses) - 1 - i) % len(addresses)]
+        #print (i, destaddr)
+        onOffHelper.SetAttribute("Remote", ns.network.AddressValue(ns.network.InetSocketAddress(destaddr, port)))
+        app = onOffHelper.Install(ns.network.NodeContainer(node))
+        urv = ns.core.UniformRandomVariable()
+        app.Start(ns.core.Seconds(urv.GetValue(20, 30)))
+
+    #internet.EnablePcapAll("wifi-olsr")
+    flowmon_helper = ns.flow_monitor.EfmMonitorHelper()
+    #flowmon_helper.SetMonitorAttribute("StartTime", ns.core.TimeValue(ns.core.Seconds(31)))
+    monitor = flowmon_helper.InstallAll()
+    monitor = flowmon_helper.GetMonitor()
+    monitor.SetAttribute("DelayBinWidth", ns.core.DoubleValue(0.001))
+    monitor.SetAttribute("JitterBinWidth", ns.core.DoubleValue(0.001))
+    monitor.SetAttribute("PacketSizeBinWidth", ns.core.DoubleValue(20))
+
+    ns.core.Simulator.Stop(ns.core.Seconds(44.0))
+    ns.core.Simulator.Run()
+
+    def print_stats(os, st):
+        print ("  Tx Bytes: ", st.txBytes, file=os)
+        print ("  Rx Bytes: ", st.rxBytes, file=os)
+        print ("  Tx Packets: ", st.txPackets, file=os)
+        print ("  Rx Packets: ", st.rxPackets, file=os)
+        print ("  Lost Packets: ", st.lostPackets, file=os)
+        if st.rxPackets > 0:
+            print ("  Mean{Delay}: ", (st.delaySum.GetSeconds() / st.rxPackets), file=os)
+            print ("  Mean{Jitter}: ", (st.jitterSum.GetSeconds() / (st.rxPackets-1)), file=os)
+            print ("  Mean{Hop Count}: ", float(st.timesForwarded) / st.rxPackets + 1, file=os)
+
+        if 0:
+            print ("Delay Histogram", file=os)
+            for i in range(st.delayHistogram.GetNBins () ):
+              print (" ",i,"(", st.delayHistogram.GetBinStart (i), "-", \
+                  st.delayHistogram.GetBinEnd (i), "): ", st.delayHistogram.GetBinCount (i), file=os)
+            print ("Jitter Histogram", file=os)
+            for i in range(st.jitterHistogram.GetNBins () ):
+              print (" ",i,"(", st.jitterHistogram.GetBinStart (i), "-", \
+                  st.jitterHistogram.GetBinEnd (i), "): ", st.jitterHistogram.GetBinCount (i), file=os)
+            print ("PacketSize Histogram", file=os)
+            for i in range(st.packetSizeHistogram.GetNBins () ):
+              print (" ",i,"(", st.packetSizeHistogram.GetBinStart (i), "-", \
+                  st.packetSizeHistogram.GetBinEnd (i), "): ", st.packetSizeHistogram.GetBinCount (i), file=os)
+
+        for reason, drops in enumerate(st.packetsDropped):
+            print ("  Packets dropped by reason %i: %i" % (reason, drops), file=os)
+        #for reason, drops in enumerate(st.bytesDropped):
+        #    print "Bytes dropped by reason %i: %i" % (reason, drops)
+
+    monitor.CheckForLostPackets()
+    classifier = flowmon_helper.GetClassifier()
+
+    if cmd.Results is None:
+        for flow_id, flow_stats in monitor.GetFlowStats():
+            t = classifier.FindFlow(flow_id)
+            proto = {6: 'TCP', 17: 'UDP'} [t.protocol]
+            print ("FlowID: %i (%s %s/%s --> %s/%i)" % \
+                (flow_id, proto, t.sourceAddress, t.sourcePort, t.destinationAddress, t.destinationPort))
+            print_stats(sys.stdout, flow_stats)
+    else:
+        print (monitor.SerializeToXmlFile(cmd.Results, True, True))
+
+
+    if cmd.Plot is not None:
+        import pylab
+        delays = []
+        for flow_id, flow_stats in monitor.GetFlowStats():
+            tupl = classifier.FindFlow(flow_id)
+            if tupl.protocol == 17 and tupl.sourcePort == 698:
+                continue
+            delays.append(flow_stats.delaySum.GetSeconds() / flow_stats.rxPackets)
+        pylab.hist(delays, 20)
+        pylab.xlabel("Delay (s)")
+        pylab.ylabel("Number of Flows")
+        pylab.show()
+
+    return 0
+
+
+if __name__ == '__main__':
+    sys.exit(main(sys.argv))
+
diff --git a/src/efm-monitor/helper/efm-monitor-helper.cc b/src/efm-monitor/helper/efm-monitor-helper.cc
new file mode 100644
index 000000000..109421655
--- /dev/null
+++ b/src/efm-monitor/helper/efm-monitor-helper.cc
@@ -0,0 +1,186 @@
+// -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*-
+//
+// Copyright (c) 2009 INESC Porto
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 2 as
+// published by the Free Software Foundation;
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+// Author: Gustavo J. A. M. Carneiro  <gjc@inescporto.pt> <gjcarneiro@gmail.com>
+// Modifications by:
+//  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+//  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+//
+
+#include "efm-monitor-helper.h"
+
+#include "ns3/efm-monitor.h"
+#include "ns3/ipv4-efm-flow-classifier.h"
+#include "ns3/ipv4-efm-flow-probe.h"
+#include "ns3/ipv4-l3-protocol.h"
+#include "ns3/ipv6-efm-flow-classifier.h"
+#include "ns3/ipv6-efm-flow-probe.h"
+#include "ns3/ipv6-l3-protocol.h"
+#include "ns3/node.h"
+#include "ns3/node-list.h"
+
+namespace ns3 {
+
+EfmMonitorHelper::EfmMonitorHelper (uint8_t ipv4PathPrefixLength, uint8_t ipv6PathPrefixLength,
+                                    PathMatching pathMatching)
+    : m_ipv4PathPrefixLength (ipv4PathPrefixLength),
+      m_ipv6PathPrefixLength (ipv6PathPrefixLength),
+      m_pathMatching (pathMatching)
+{
+  m_monitorFactory.SetTypeId ("ns3::EfmMonitor");
+}
+
+EfmMonitorHelper::~EfmMonitorHelper ()
+{
+  if (m_efmMonitor)
+    {
+      m_efmMonitor->Dispose ();
+      m_efmMonitor = 0;
+      m_flowClassifier4 = 0;
+      m_flowClassifier6 = 0;
+    }
+}
+
+void
+EfmMonitorHelper::SetMonitorAttribute (std::string n1, const AttributeValue &v1)
+{
+  m_monitorFactory.Set (n1, v1);
+}
+
+Ptr<EfmMonitor>
+EfmMonitorHelper::GetMonitor ()
+{
+  if (!m_efmMonitor)
+    {
+      m_efmMonitor = m_monitorFactory.Create<EfmMonitor> ();
+      m_flowClassifier4 = GetClassifier ();
+      m_efmMonitor->AddFlowClassifier (m_flowClassifier4);
+      m_flowClassifier6 = GetClassifier6 ();
+      m_efmMonitor->AddFlowClassifier (m_flowClassifier6);
+    }
+  return m_efmMonitor;
+}
+
+Ptr<EfmFlowClassifier>
+EfmMonitorHelper::GetClassifier ()
+{
+  if (!m_flowClassifier4)
+    {
+      m_flowClassifier4 = Create<Ipv4EfmFlowClassifier> (m_ipv4PathPrefixLength, m_pathMatching);
+    }
+  return m_flowClassifier4;
+}
+
+Ptr<EfmFlowClassifier>
+EfmMonitorHelper::GetClassifier6 ()
+{
+  if (!m_flowClassifier6)
+    {
+      m_flowClassifier6 = Create<Ipv6EfmFlowClassifier> (m_ipv6PathPrefixLength, m_pathMatching);
+    }
+  return m_flowClassifier6;
+}
+
+Ptr<EfmMonitor>
+EfmMonitorHelper::Install (Ptr<Node> node, bool enableIpv4, bool enableIPv6)
+{
+  Ptr<EfmMonitor> monitor = GetMonitor ();
+  if (enableIpv4)
+    {
+      Ptr<EfmFlowClassifier> classifier = GetClassifier ();
+      Ptr<Ipv4L3Protocol> ipv4 = node->GetObject<Ipv4L3Protocol> ();
+      if (ipv4)
+        {
+          Ptr<Ipv4EfmFlowProbe> probe = Create<Ipv4EfmFlowProbe> (
+              monitor, DynamicCast<Ipv4EfmFlowClassifier> (classifier), node);
+        }
+    }
+
+  if (enableIPv6)
+    {
+      Ptr<EfmFlowClassifier> classifier6 = GetClassifier6 ();
+      Ptr<Ipv6L3Protocol> ipv6 = node->GetObject<Ipv6L3Protocol> ();
+      if (ipv6)
+        {
+          Ptr<Ipv6EfmFlowProbe> probe6 = Create<Ipv6EfmFlowProbe> (
+              monitor, DynamicCast<Ipv6EfmFlowClassifier> (classifier6), node);
+        }
+    }
+
+  return m_efmMonitor;
+}
+
+Ptr<EfmMonitor>
+EfmMonitorHelper::Install (NodeContainer nodes, bool enableIpv4, bool enableIPv6)
+{
+  for (NodeContainer::Iterator i = nodes.Begin (); i != nodes.End (); ++i)
+    {
+      Ptr<Node> node = *i;
+      if (node->GetObject<Ipv4L3Protocol> () || node->GetObject<Ipv6L3Protocol> ())
+        {
+          Install (node, enableIpv4, enableIPv6);
+        }
+    }
+  return m_efmMonitor;
+}
+
+Ptr<EfmMonitor>
+EfmMonitorHelper::InstallAll (bool enableIpv4, bool enableIPv6)
+{
+  for (NodeList::Iterator i = NodeList::Begin (); i != NodeList::End (); ++i)
+    {
+      Ptr<Node> node = *i;
+      if (node->GetObject<Ipv4L3Protocol> () || node->GetObject<Ipv6L3Protocol> ())
+        {
+          Install (node, enableIpv4, enableIPv6);
+        }
+    }
+  return m_efmMonitor;
+}
+
+void
+EfmMonitorHelper::SerializeToXmlStream (std::ostream &os, uint16_t indent, bool enableHistograms,
+                                        bool enableProbes)
+{
+  if (m_efmMonitor)
+    {
+      m_efmMonitor->SerializeToXmlStream (os, indent, enableHistograms, enableProbes);
+    }
+}
+
+std::string
+EfmMonitorHelper::SerializeToXmlString (uint16_t indent, bool enableHistograms, bool enableProbes)
+{
+  std::ostringstream os;
+  if (m_efmMonitor)
+    {
+      m_efmMonitor->SerializeToXmlStream (os, indent, enableHistograms, enableProbes);
+    }
+  return os.str ();
+}
+
+void
+EfmMonitorHelper::SerializeToXmlFile (std::string fileName, bool enableHistograms,
+                                      bool enableProbes)
+{
+  if (m_efmMonitor)
+    {
+      m_efmMonitor->SerializeToXmlFile (fileName, enableHistograms, enableProbes);
+    }
+}
+
+} // namespace ns3
diff --git a/src/efm-monitor/helper/efm-monitor-helper.h b/src/efm-monitor/helper/efm-monitor-helper.h
new file mode 100644
index 000000000..fed3cf098
--- /dev/null
+++ b/src/efm-monitor/helper/efm-monitor-helper.h
@@ -0,0 +1,136 @@
+// -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*-
+//
+// Copyright (c) 2009 INESC Porto
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 2 as
+// published by the Free Software Foundation;
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+// Author: Gustavo J. A. M. Carneiro  <gjc@inescporto.pt> <gjcarneiro@gmail.com>
+// Modifications by:
+//  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+//  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+//
+#ifndef FLOW_MONITOR_HELPER_H
+#define FLOW_MONITOR_HELPER_H
+
+#include "ns3/node-container.h"
+#include "ns3/object-factory.h"
+#include "ns3/efm-monitor.h"
+#include "ns3/efm-flow-classifier.h"
+#include <string>
+
+namespace ns3 {
+
+class AttributeValue;
+class Ipv4EfmFlowClassifier;
+class Ipv6EfmFlowClassifier;
+
+/**
+ * \ingroup efm-monitor
+ * \brief Helper to enable IP flow monitoring on a set of Nodes
+ */
+class EfmMonitorHelper
+{
+public:
+  EfmMonitorHelper (uint8_t ipv4PathPrefixLength, uint8_t ipv6PathPrefixLength,
+                    PathMatching pathMatching);
+  ~EfmMonitorHelper ();
+
+  // Delete copy constructor and assignment operator to avoid misuse
+  EfmMonitorHelper (const EfmMonitorHelper &) = delete;
+  EfmMonitorHelper &operator= (const EfmMonitorHelper &) = delete;
+
+  /**
+   * \brief Set an attribute for the to-be-created EfmMonitor object
+   * \param n1 attribute name
+   * \param v1 attribute value
+   */
+  void SetMonitorAttribute (std::string n1, const AttributeValue &v1);
+
+  /**
+   * \brief Enable flow monitoring on a set of nodes
+   * \param nodes A NodeContainer holding the set of nodes to work with.
+   * \returns a pointer to the EfmMonitor object
+   */
+  Ptr<EfmMonitor> Install (NodeContainer nodes, bool enableIpv4 = true, bool enableIPv6 = true);
+  /**
+   * \brief Enable flow monitoring on a single node
+   * \param node A Ptr<Node> to the node on which to enable flow monitoring.
+   * \returns a pointer to the EfmMonitor object
+   */
+  Ptr<EfmMonitor> Install (Ptr<Node> node, bool enableIpv4 = true, bool enableIPv6 = true);
+  /**
+   * \brief Enable flow monitoring on all nodes
+   * \returns a pointer to the EfmMonitor object
+   */
+  Ptr<EfmMonitor> InstallAll (bool enableIpv4 = true, bool enableIPv6 = true);
+
+  /**
+   * \brief Retrieve the EfmMonitor object created by the Install* methods
+   * \returns a pointer to the EfmMonitor object
+   */
+  Ptr<EfmMonitor> GetMonitor ();
+
+  /**
+   * \brief Retrieve the FlowClassifier object for IPv4 created by the Install* methods
+   * \returns a pointer to the FlowClassifier object
+   */
+  Ptr<EfmFlowClassifier> GetClassifier ();
+
+  /**
+   * \brief Retrieve the FlowClassifier object for IPv6 created by the Install* methods
+   * \returns a pointer to the FlowClassifier object
+   */
+  Ptr<EfmFlowClassifier> GetClassifier6 ();
+
+  /**
+   * Serializes the results to an std::ostream in XML format
+   * \param os the output stream
+   * \param indent number of spaces to use as base indentation level
+   * \param enableHistograms if true, include also the histograms in the output
+   * \param enableProbes if true, include also the per-probe/flow pair statistics in the output
+   */
+  void SerializeToXmlStream (std::ostream &os, uint16_t indent, bool enableHistograms,
+                             bool enableProbes);
+
+  /**
+   * Same as SerializeToXmlStream, but returns the output as a std::string
+   * \param indent number of spaces to use as base indentation level
+   * \param enableHistograms if true, include also the histograms in the output
+   * \param enableProbes if true, include also the per-probe/flow pair statistics in the output
+   * \return the XML output as string
+   */
+  std::string SerializeToXmlString (uint16_t indent, bool enableHistograms, bool enableProbes);
+
+  /**
+   * Same as SerializeToXmlStream, but writes to a file instead
+   * \param fileName name or path of the output file that will be created
+   * \param enableHistograms if true, include also the histograms in the output
+   * \param enableProbes if true, include also the per-probe/flow pair statistics in the output
+   */
+  void SerializeToXmlFile (std::string fileName, bool enableHistograms, bool enableProbes);
+
+private:
+  ObjectFactory m_monitorFactory; //!< Object factory
+  Ptr<EfmMonitor> m_efmMonitor; //!< the EfmMonitor object
+  Ptr<EfmFlowClassifier> m_flowClassifier4; //!< the EfmFlowClassifier object for IPv4
+  Ptr<EfmFlowClassifier> m_flowClassifier6; //!< the EfmFlowClassifier object for IPv6
+
+  uint8_t m_ipv4PathPrefixLength; //!< the IPv4 path prefix length for the flow classifier
+  uint8_t m_ipv6PathPrefixLength; //!< the IPv6 path prefix length for the flow classifier
+  PathMatching m_pathMatching; //!< the path matching mode for the flow classifier
+};
+
+} // namespace ns3
+
+#endif /* FLOW_MONITOR_HELPER_H */
diff --git a/src/efm-monitor/model/efm-flow-classifier.cc b/src/efm-monitor/model/efm-flow-classifier.cc
new file mode 100644
index 000000000..b8ec71289
--- /dev/null
+++ b/src/efm-monitor/model/efm-flow-classifier.cc
@@ -0,0 +1,53 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+//
+// Copyright (c) 2009 INESC Porto
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 2 as
+// published by the Free Software Foundation;
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+// Author: Gustavo J. A. M. Carneiro  <gjc@inescporto.pt> <gjcarneiro@gmail.com>
+// Modifications by:
+//  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+//  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+//
+
+#include "ns3/efm-flow-classifier.h"
+#include "efm-flow-classifier.h"
+
+namespace ns3 {
+
+EfmFlowClassifier::EfmFlowClassifier (uint8_t pathPrefixLength, PathMatching pathMatching)
+    : m_lastNewFlowId (EFM_FLOW_ID_FIRST_VALID),
+      m_lastNewPathId (EFM_PATH_ID_FIRST_VALID),
+      m_pathPrefixLength (pathPrefixLength),
+      m_pathMatching (pathMatching)
+{
+}
+
+EfmFlowClassifier::~EfmFlowClassifier ()
+{
+}
+
+EfmFlowId
+EfmFlowClassifier::GetNewFlowId ()
+{
+  return ++m_lastNewFlowId;
+}
+
+EfmPathId
+EfmFlowClassifier::GetNewPathId ()
+{
+  return ++m_lastNewPathId;
+}
+
+} // namespace ns3
diff --git a/src/efm-monitor/model/efm-flow-classifier.h b/src/efm-monitor/model/efm-flow-classifier.h
new file mode 100644
index 000000000..3923198bb
--- /dev/null
+++ b/src/efm-monitor/model/efm-flow-classifier.h
@@ -0,0 +1,115 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+//
+// Copyright (c) 2009 INESC Porto
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 2 as
+// published by the Free Software Foundation;
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+// Author: Gustavo J. A. M. Carneiro  <gjc@inescporto.pt> <gjcarneiro@gmail.com>
+// Modifications by:
+//  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+//  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+//
+
+#ifndef EFM_FLOW_CLASSIFIER_H
+#define EFM_FLOW_CLASSIFIER_H
+
+#include "ns3/simple-ref-count.h"
+#include <ostream>
+
+namespace ns3 {
+
+/**
+ * \ingroup efm-monitor
+ * \brief Abstract identifier of a packet flow
+ */
+typedef uint32_t EfmFlowId;
+
+typedef uint32_t EfmPathId;
+
+static const EfmFlowId EFM_FLOW_ID_FIRST_VALID = 10;
+static const EfmFlowId EFM_PATH_ID_FIRST_VALID = 10;
+
+/**
+ * \ingroup efm-monitor
+ * \brief Abstract identifier of a packet within a flow
+ */
+typedef uint32_t EfmFlowPacketId;
+
+enum class PathMatching { SRC, DST, BOTH };
+
+/// \ingroup efm-monitor
+/// Provides a method to translate raw packet data into abstract
+/// `flow identifier` and `packet identifier` parameters.  These
+/// identifiers are unsigned 32-bit integers that uniquely identify a
+/// flow and a packet within that flow, respectively, for the whole
+/// simulation, regardless of the point in which the packet was
+/// captured.  These abstract identifiers are used in the
+/// communication between FlowProbe and EfmMonitor, and all collected
+/// statistics reference only those abstract identifiers in order to
+/// keep the core architecture generic and not tied down to any
+/// particular flow capture method or classification system.
+class EfmFlowClassifier : public SimpleRefCount<EfmFlowClassifier>
+{
+private:
+  EfmFlowId m_lastNewFlowId; //!< Last known Flow ID
+  EfmPathId m_lastNewPathId; //!< Last known Path ID
+
+public:
+  EfmFlowClassifier (uint8_t pathPrefixLength, PathMatching pathMatching);
+  virtual ~EfmFlowClassifier ();
+
+  // Delete copy constructor and assignment operator to avoid misuse
+  EfmFlowClassifier (EfmFlowClassifier const &) = delete;
+  EfmFlowClassifier &operator= (EfmFlowClassifier const &) = delete;
+
+  /// Serializes the results to an std::ostream in XML format
+  /// \param os the output stream
+  /// \param indent number of spaces to use as base indentation level
+  virtual void SerializeToXmlStream (std::ostream &os, uint16_t indent) const = 0;
+
+  /// Used to obtain the flow id for the reverse flow
+  /// @param flowId flow id of the forward flow
+  /// @param revFlowId output param for the reverse flow id if it exists
+  /// @return true, if the reverse flow exists, false otherwise
+  virtual bool GetRevFlowId (EfmFlowId flowId, EfmFlowId &revFlowId) const = 0;
+
+protected:
+  /// Returns a new, unique Flow Identifier
+  /// \returns a new FlowId
+  EfmFlowId GetNewFlowId ();
+
+  /// Returns a new, unique Path Identifier
+  /// \returns a new PathId
+  EfmPathId GetNewPathId ();
+
+  ///
+  /// \brief Add a number of spaces for indentation purposes.
+  /// \param os The stream to write to.
+  /// \param level The number of spaces to add.
+  void Indent (std::ostream &os, uint16_t level) const;
+
+  uint8_t m_pathPrefixLength;
+  PathMatching m_pathMatching;
+};
+
+inline void
+EfmFlowClassifier::Indent (std::ostream &os, uint16_t level) const
+{
+  for (uint16_t __xpto = 0; __xpto < level; __xpto++)
+    os << ' ';
+}
+
+} // namespace ns3
+
+#endif /* FLOW_CLASSIFIER_H */
diff --git a/src/efm-monitor/model/efm-flow-probe.cc b/src/efm-monitor/model/efm-flow-probe.cc
new file mode 100644
index 000000000..2ccf96760
--- /dev/null
+++ b/src/efm-monitor/model/efm-flow-probe.cc
@@ -0,0 +1,783 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+//
+// Copyright (c) 2009 INESC Porto
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 2 as
+// published by the Free Software Foundation;
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+// Author: Gustavo J. A. M. Carneiro  <gjc@inescporto.pt> <gjcarneiro@gmail.com>
+// Modifications by:
+//  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+//  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+//
+
+#include "ns3/efm-flow-probe.h"
+#include "ns3/efm-monitor.h"
+#include "ns3/simulator.h"
+#include "efm-flow-probe.h"
+
+#define EFM_Q_BLOCK_SIZE 64
+#define EFM_SQ_FREQUENCY 64
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("EFM_Flow_Probe");
+
+NS_OBJECT_ENSURE_REGISTERED (EfmFlowProbe);
+
+TypeId
+EfmFlowProbe::GetTypeId (void)
+{
+  static TypeId tid =
+      TypeId ("ns3::EfmFlowProbe")
+          .SetParent<Object> ()
+          .SetGroupName ("EfmMonitor")
+          .AddTraceSource ("FlowBegin", "Emitted when monitoring of a new flow begins.",
+                           MakeTraceSourceAccessor (&EfmFlowProbe::m_flowBeginTrace),
+                           "ns3::EfmFlowProbe::EfmFlowBeginTracedCallback")
+          .AddTraceSource ("SeqLoss", "Emitted when a new SEQ-based loss measurement is available.",
+                           MakeTraceSourceAccessor (&EfmFlowProbe::m_seqLossTrace),
+                           "ns3::EfmFlowProbe::EfmBitLossEventTracedCallback")
+          .AddTraceSource ("AckSeqLoss",
+                           "Emitted when a new SEQ-based loss measurement of ACKs is available.",
+                           MakeTraceSourceAccessor (&EfmFlowProbe::m_ackSeqLossTrace),
+                           "ns3::EfmFlowProbe::EfmBitLossEventTracedCallback")
+          .AddTraceSource ("SpinBitEdge", "Emitted when a spin edge is detected.",
+                           MakeTraceSourceAccessor (&EfmFlowProbe::m_spinBitEdgeTrace),
+                           "ns3::EfmFlowProbe::EfmBitStateUpdatedTracedCallback")
+          .AddTraceSource ("QBitChange", "Emitted when a Q bit state change is detected.",
+                           MakeTraceSourceAccessor (&EfmFlowProbe::m_qBitChangeTrace),
+                           "ns3::EfmFlowProbe::EfmBitStateUpdatedTracedCallback")
+          .AddTraceSource ("RBitChange", "Emitted when a R bit state change is detected.",
+                           MakeTraceSourceAccessor (&EfmFlowProbe::m_rBitChangeTrace),
+                           "ns3::EfmFlowProbe::EfmBitStateUpdatedTracedCallback")
+          .AddTraceSource ("LBitSet", "Emitted when a when a set L bit is detected.",
+                           MakeTraceSourceAccessor (&EfmFlowProbe::m_lBitSetTrace),
+                           "ns3::EfmFlowProbe::EfmLBitSetTracedCallback")
+          .AddTraceSource ("TBitSet", "Emitted when a when a set T bit is detected.",
+                           MakeTraceSourceAccessor (&EfmFlowProbe::m_tBitSetTrace),
+                           "ns3::EfmFlowProbe::EfmTBitSetTracedCallback")
+          .AddTraceSource ("SpinBitDelayMeasured",
+                           "Emitted when a spin-bit-based RTT measurement is completed.",
+                           MakeTraceSourceAccessor (&EfmFlowProbe::m_spinBitDelayTrace),
+                           "ns3::EfmFlowProbe::EfmBitBiDelayEventTracedCallback")
+          .AddTraceSource ("QBitLossMeasured",
+                           "Emitted when a Q-bit-based loss measurement is completed.",
+                           MakeTraceSourceAccessor (&EfmFlowProbe::m_qBitLossTrace),
+                           "ns3::EfmFlowProbe::EfmBitLossEventTracedCallback")
+          .AddTraceSource ("RBitLossMeasured",
+                           "Emitted when a R-bit-based loss measurement is completed.",
+                           MakeTraceSourceAccessor (&EfmFlowProbe::m_rBitLossTrace),
+                           "ns3::EfmFlowProbe::EfmBitLossEventTracedCallback")
+          .AddTraceSource ("TBitFullLossMeasured",
+                           "Emitted when a T-bit-based full loss measurement is completed.",
+                           MakeTraceSourceAccessor (&EfmFlowProbe::m_tBitFullLossTrace),
+                           "ns3::EfmFlowProbe::EfmBitLossEventTracedCallback")
+          .AddTraceSource (
+              "TBitHalfLossMeasured",
+              "Emitted when a T-bit-based half loss measurement is completed. For a client-server "
+              "flow, this is the O-C-O loss, for a server-client flow, the O-S-O one.",
+              MakeTraceSourceAccessor (&EfmFlowProbe::m_tBitHalfLossTrace),
+              "ns3::EfmFlowProbe::EfmBitLossEventTracedCallback")
+          .AddTraceSource ("TBitPhaseChange", "Emitted when the internal T bit phase changes.",
+                           MakeTraceSourceAccessor (&EfmFlowProbe::m_tBitPhaseTrace),
+                           "ns3::EfmFlowProbe::EfmTBitPhaseUpdatedTracedCallback")
+          .AddTraceSource ("TCPDartDelayMeasured",
+                           "Emitted when a TCP-DART-based delay measurement is completed.",
+                           MakeTraceSourceAccessor (&EfmFlowProbe::m_tcpDartDelayTrace),
+                           "ns3::EfmFlowProbe::TCPUniDelayTracedCallback")
+          .AddTraceSource ("TCPReordering", "Emitted when a TCP reordering is detected.",
+                           MakeTraceSourceAccessor (&EfmFlowProbe::m_tcpReorderingTrace),
+                           "ns3::EfmFlowProbe::TCPReorderingTracedCallback")
+          .AddTraceSource ("PathLBitSet", "Emitted when a when a set L bit is detected on a path.",
+                           MakeTraceSourceAccessor (&EfmFlowProbe::m_pathLBitSetTrace),
+                           "ns3::EfmFlowProbe::EfmPathLBitSetTracedCallback")
+          .AddTraceSource ("PathSQBitsLoss",
+                           "Emitted when a new SQ-Bits-based loss estimation becomes available",
+                           MakeTraceSourceAccessor (&EfmFlowProbe::m_pathSQBitsLossTrace),
+                           "ns3::EfmFlowProbe::EfmPathLossEventTracedCallback");
+
+  return tid;
+}
+
+TypeId
+EfmFlowProbe::GetInstanceTypeId (void) const
+{
+  return GetTypeId ();
+}
+
+EfmFlowProbe::~EfmFlowProbe ()
+{
+}
+
+EfmFlowProbe::EfmFlowProbe (Ptr<EfmMonitor> efmMonitor, Ptr<Node> node)
+    : m_efmMonitor (efmMonitor), m_nodeId (node->GetId ())
+{
+  m_efmMonitor->AddProbe (this);
+}
+
+void
+EfmFlowProbe::DoDispose (void)
+{
+  m_efmMonitor = 0;
+  Object::DoDispose ();
+}
+
+void
+EfmFlowProbe::AddPacketStats (EfmFlowId flowId, uint32_t packetSize, EfmPathId pathId,
+                              Time delayFromFirstProbe)
+{
+  if (m_flowStats.find (flowId) == m_flowStats.end ())
+    ProcessNewFlow (flowId);
+  EfmFlowStats &flow = m_flowStats[flowId];
+  EfmPathStats &path = m_pathStats[pathId];
+  flow.delayFromFirstProbeSum += delayFromFirstProbe;
+  flow.bytes += packetSize;
+  ++flow.packets;
+  ++path.packets;
+}
+
+void
+EfmFlowProbe::AddPacketStatsEFM (EfmFlowId flowId, uint32_t packetSize, EfmPathId pathId,
+                                 Time delayFromFirstProbe, EfmHostTag &efmTag)
+{
+  AddPacketStats (flowId, packetSize, pathId, delayFromFirstProbe);
+  EfmFlowStats &flow = m_flowStats[flowId];
+  EfmPathStats &path = m_pathStats[pathId];
+  Time current_time = Simulator::Now ();
+  flow.efmPackets++;
+  path.efmPackets++;
+  NS_LOG_DEBUG ("Tracking packet with seq " << efmTag.GetSeq ());
+
+  //---- EFM seq-based loss for ground-truth ----
+  if (efmTag.GetSeq () < flow.seq_highest)
+    {
+      //Decrease packet loss counter to correct for faulty loss detection caused by out-of-order packet
+      flow.seq_pkt_loss--;
+      m_seqLossTrace (flowId, flow.efmPackets, flow.seq_pkt_loss);
+    }
+  else if (efmTag.GetSeq () == flow.seq_highest)
+    NS_LOG_WARN ("Duplicate EFM seq detected");
+  else
+    {
+
+      if (efmTag.GetSeq () > flow.seq_highest + 1)
+        {
+          //Increase packet loss counter by hole in seq space
+          flow.seq_pkt_loss += (efmTag.GetSeq () - flow.seq_highest - 1);
+          if (flow.seq_pkt_loss >= 0)
+            m_seqLossTrace (flowId, flow.efmPackets, flow.seq_pkt_loss);
+        }
+      //Update highest seq
+      flow.seq_highest = efmTag.GetSeq ();
+    }
+
+  if (efmTag.GetAckSeq () < flow.ackSeq_highest)
+    {
+      //Decrease packet loss counter to correct for faulty loss detection caused by out-of-order packet
+      flow.ackSeq_pkt_loss--;
+      m_ackSeqLossTrace (flowId, flow.efmPackets, flow.ackSeq_pkt_loss);
+    }
+  else if (efmTag.GetAckSeq () > flow.ackSeq_highest)
+    {
+
+      if (efmTag.GetAckSeq () > flow.ackSeq_highest + 1)
+        {
+          //Increase packet loss counter by hole in ack seq space
+          flow.ackSeq_pkt_loss += (efmTag.GetAckSeq () - flow.ackSeq_highest - 1);
+          if (flow.ackSeq_pkt_loss >= 0)
+            m_ackSeqLossTrace (flowId, flow.efmPackets, flow.ackSeq_pkt_loss);
+        }
+      //Update highest seq
+      flow.ackSeq_highest = efmTag.GetAckSeq ();
+    }
+
+  //---- Spin Bit ----
+  bool spinToggle = false;
+
+  if (efmTag.GetSpinBit () != flow.spin_last)
+    {
+
+      //Ignore false toggle detected for first packet
+      if (flow.time_of_last_spin != Time (-1))
+        {
+          // NS_LOG_DEBUG(flowId << " => Spin!");
+          spinToggle = true;
+          m_spinBitEdgeTrace (flowId, efmTag.GetSpinBit (), efmTag.GetSeq ());
+          flow.spin_period_count += 1;
+
+          //Try to measure half RTT
+          bool halfAvailable = false;
+          Time halfRtt;
+          if (flow.reverseFlowId != 0)
+            {
+              EfmFlowStats &revFlow = m_flowStats[flow.reverseFlowId];
+              if (revFlow.time_of_last_spin != Time (-1))
+                {
+                  NS_ASSERT (revFlow.time_of_last_spin <= current_time);
+                  halfAvailable = true;
+                  halfRtt = current_time - revFlow.time_of_last_spin;
+                }
+            }
+
+          ProcessSpinRTTMmnt (flowId, (current_time - flow.time_of_last_spin), halfAvailable,
+                              halfRtt);
+        }
+
+      flow.time_of_last_spin = current_time;
+      flow.spin_last = efmTag.GetSpinBit ();
+    }
+
+  //L Bit
+  if (efmTag.GetLBit () == 1)
+    {
+      ProcessLLossMmnt (flowId, pathId, efmTag.GetSeq (), flow.packets, path.packets);
+    }
+
+  //---- Q Bit ----
+  if (efmTag.GetQBit () != flow.q_last)
+    {
+      //Do not interpret as block change if this is the first packet
+      if (flow.q_last != EfmFlowStats::NO_LAST_VAL)
+        {
+          m_qBitChangeTrace (flowId, efmTag.GetQBit (), efmTag.GetSeq ());
+          flow.q_block_count++;
+
+          if (flow.q_curr_block_length > EFM_Q_BLOCK_SIZE)
+            {
+              NS_LOG_ERROR ("Current Q block length exceeded expected maximum! Flow "
+                            << flowId << ", length " << flow.q_curr_block_length);
+            }
+          else
+            {
+              ProcessQLossMmnt (flowId, flow.packets,
+                                (EFM_Q_BLOCK_SIZE - flow.q_curr_block_length));
+            }
+        }
+
+      flow.q_last = efmTag.GetQBit ();
+      flow.q_curr_block_length = 0;
+    }
+
+  flow.q_curr_block_length++;
+
+  //---- R Bit ----
+
+  if (flow.r_last == EfmFlowStats::NO_LAST_VAL)
+    {
+      //Activate R bit measurements on first set R bit
+      if (efmTag.GetRBit ())
+        {
+          m_rBitChangeTrace (flowId, efmTag.GetRBit (), efmTag.GetSeq ());
+          flow.r_last = efmTag.GetRBit ();
+          flow.r_curr_block_length++;
+        }
+    }
+  else
+    {
+      if (efmTag.GetRBit () != flow.r_last)
+        {
+          m_rBitChangeTrace (flowId, efmTag.GetRBit (), efmTag.GetSeq ());
+          flow.r_block_count++;
+          if (flow.r_curr_block_length > EFM_Q_BLOCK_SIZE)
+            {
+              NS_LOG_ERROR ("Current R block length exceeded expected maximum! Flow "
+                            << flowId << ", length " << flow.r_curr_block_length);
+            }
+          else
+            {
+              ProcessRLossMmnt (flowId, flow.packets,
+                                (EFM_Q_BLOCK_SIZE - flow.r_curr_block_length));
+            }
+          flow.r_last = efmTag.GetRBit ();
+          flow.r_curr_block_length = 0;
+        }
+      flow.r_curr_block_length++;
+    }
+
+  //---- T Bit ----
+  bool tBitSet = efmTag.GetTBit () == 1;
+
+  if (tBitSet)
+    m_tBitSetTrace (flowId, efmTag.GetSeq ());
+
+  TBitObserverPhase oldPhase = flow.t_curr_phase;
+
+  switch (flow.t_curr_phase)
+    {
+    case GEN:
+      if (spinToggle && !tBitSet)
+        {
+          NS_ASSERT (flow.t_gen_phase_count > 0);
+          flow.t_curr_phase = PAUSE_BEGIN_GEN;
+        }
+      if (tBitSet)
+        { //no else if because independent of spin toggle
+          flow.t_gen_phase_count++;
+        }
+      break;
+    case PAUSE_BEGIN_GEN:
+      if (spinToggle)
+        {
+          //Pause phase completed
+          if (tBitSet)
+            {
+              flow.t_curr_phase = REF;
+              flow.t_ref_phase_count++;
+            }
+          else
+            {
+              flow.t_curr_phase = PAUSE_FULL_GEN;
+            }
+        }
+      else if (tBitSet)
+        { //still in same spin phase
+          //Cancel pause phase
+          flow.t_curr_phase = GEN;
+          flow.t_gen_phase_count++;
+        }
+      break;
+    case PAUSE_FULL_GEN:
+      if (tBitSet)
+        {
+          flow.t_curr_phase = REF;
+          flow.t_ref_phase_count++;
+        }
+      break;
+    case REF:
+      if (spinToggle && !tBitSet)
+        {
+          NS_ASSERT (flow.t_ref_phase_count > 0);
+          flow.t_curr_phase = PAUSE_BEGIN_REF;
+        }
+      if (tBitSet)
+        { //no else if because independent of spin toggle
+          flow.t_ref_phase_count++;
+        }
+      break;
+    case PAUSE_BEGIN_REF:
+      if (spinToggle)
+        {
+          //Pause phase completed
+
+          if (flow.t_gen_phase_count < flow.t_ref_phase_count)
+            {
+              //We misattributed the phases, so we actually have been in generation phase
+              //and are now either awaiting transition to reflection phase
+              //or already entered reflection phase with this packet
+              NS_LOG_DEBUG ("T Bit phase misattribution for flow "
+                            << flowId << " with gen " << flow.t_gen_phase_count << " and ref "
+                            << flow.t_ref_phase_count);
+
+              //Correct the counters
+              flow.t_gen_phase_count = flow.t_ref_phase_count;
+              flow.t_ref_phase_count = 0;
+
+              //Perform state transition
+              if (tBitSet)
+                {
+                  flow.t_curr_phase = REF;
+                  flow.t_ref_phase_count++;
+                }
+              else
+                {
+                  flow.t_curr_phase = PAUSE_FULL_GEN;
+                }
+            }
+          else
+            {
+              //Reflection phase finished and correctly attributed
+              NS_ASSERT (flow.t_gen_phase_count >= flow.t_ref_phase_count);
+              ProcessTFullLossMmnt (flowId, flow.t_gen_phase_count,
+                                    (flow.t_gen_phase_count - flow.t_ref_phase_count));
+
+              //Try to measure half RT loss
+              if (flow.reverseFlowId != 0)
+                {
+                  EfmFlowStats &revFlow = m_flowStats[flow.reverseFlowId];
+                  if (revFlow.t_cycle_count > flow.t_cycle_count)
+                    { //Need to use last gen value for reverse flow
+
+                      if (efmTag.GetSentByClient ())
+                        {
+                          if (revFlow.t_last_gen_phase_count >= flow.t_ref_phase_count)
+                            ProcessTHalfLossMmnt (flowId, revFlow.t_last_gen_phase_count,
+                                                  revFlow.t_last_gen_phase_count -
+                                                      flow.t_ref_phase_count);
+                          else
+                            NS_LOG_ERROR ("TBit half measurement encountered invalid gen and ref "
+                                          "phase counts in client-server direction.");
+                        }
+                      else
+                        {
+                          //We could also use revFlow.t_last_ref_phase_count - flow.t_ref_phase_count
+                          if (revFlow.t_last_gen_phase_count >= flow.t_gen_phase_count)
+                            ProcessTHalfLossMmnt (flowId, revFlow.t_last_gen_phase_count,
+                                                  revFlow.t_last_gen_phase_count -
+                                                      flow.t_gen_phase_count);
+                          else
+                            NS_LOG_ERROR ("TBit half measurement encountered invalid gen phase "
+                                          "counts in server-client direction.");
+                        }
+                    }
+                  else
+                    { //Need to use current gen value for reverse flow
+                      if (efmTag.GetSentByClient ())
+                        {
+                          if (revFlow.t_gen_phase_count >= flow.t_ref_phase_count)
+                            ProcessTHalfLossMmnt (flowId, revFlow.t_gen_phase_count,
+                                                  revFlow.t_gen_phase_count -
+                                                      flow.t_ref_phase_count);
+                          else
+                            NS_LOG_ERROR ("TBit half measurement encountered invalid gen and ref "
+                                          "phase counts in client-server direction.");
+                        }
+                      else
+                        {
+                          //We could also use revFlow.t_ref_phase_count - flow.t_ref_phase_count
+                          if (revFlow.t_gen_phase_count >= flow.t_gen_phase_count)
+                            ProcessTHalfLossMmnt (flowId, revFlow.t_gen_phase_count,
+                                                  revFlow.t_gen_phase_count -
+                                                      flow.t_gen_phase_count);
+                          else
+                            NS_LOG_ERROR ("TBit half measurement encountered invalid gen phase "
+                                          "counts in server-client direction.");
+                        }
+                    }
+                }
+
+              flow.t_cycle_count++;
+              flow.t_last_gen_phase_count = flow.t_gen_phase_count;
+              flow.t_gen_phase_count = 0;
+              flow.t_ref_phase_count = 0;
+
+              //State transition
+              if (tBitSet)
+                {
+                  flow.t_curr_phase = GEN;
+                  flow.t_gen_phase_count++;
+                }
+              else
+                {
+                  flow.t_curr_phase = PAUSE_FULL_REF;
+                }
+            }
+        }
+      else if (tBitSet)
+        { //no spin edge
+          //Cancel pause phase
+          flow.t_curr_phase = REF;
+          flow.t_ref_phase_count++;
+        }
+      break;
+    case PAUSE_FULL_REF:
+      if (tBitSet)
+        {
+          flow.t_curr_phase = GEN;
+          flow.t_gen_phase_count++;
+        }
+      break;
+    }
+
+  //TODO: Gen/Ref phase count old value?
+  if (oldPhase != flow.t_curr_phase)
+    {
+      m_tBitPhaseTrace (flowId, oldPhase, flow.t_curr_phase, flow.t_gen_phase_count,
+                        flow.t_ref_phase_count);
+    }
+
+  //---- SQ Bits ----
+  if (efmTag.GetSQ1Bit ())
+    path.sqEnabledPackets++;
+  if (efmTag.GetSQ2Bit ())
+    {
+      path.sqMarkPackets++;
+      ProcessSQLossMmnt (pathId, path.sqEnabledPackets,
+                         path.sqMarkPackets * EFM_SQ_FREQUENCY - path.sqEnabledPackets);
+    }
+}
+
+const uint32_t TCP_WRAPAROUND_TH = 10000000;
+
+void
+EfmFlowProbe::AddPacketStatsTCP (EfmFlowId flowId, uint32_t packetSize, EfmPathId pathId,
+                                 TcpFlowProbeTag &tcpTag)
+{
+  EfmFlowStats &flow = m_flowStats[flowId];
+  if (flow.tcp_first_packet)
+    {
+      flow.tcp_first_packet = false;
+      flow.tcp_max_seq = tcpTag.GetSeq ();
+    }
+
+  // Loss measurement via retransmission / reordering detection
+
+  if (tcpTag.GetPayloadSize () > 0) // Only consider data packets
+    {
+      if (flow.tcp_max_seq == tcpTag.GetSeq ())
+        {
+          // We received this SEQ before, and we only consider data packets, thus this is a retransmission
+          ProcessTCPReorderMmnt (flowId, 1, flow.packets);
+        }
+      else if (flow.tcp_max_seq > tcpTag.GetSeq ())
+        {
+          if (flow.tcp_max_seq - tcpTag.GetSeq () > TCP_WRAPAROUND_TH)
+            {
+              // The received SEQ is probably smaller, because of a wraparound
+              // So we update the maximum instead of considering this a retransmission/reordering
+              flow.tcp_max_seq = tcpTag.GetSeq ();
+            }
+          else
+            {
+              ProcessTCPReorderMmnt (flowId, 1, flow.packets);
+            }
+        }
+      else // flow.tcp_max_seq < tcpTag.GetSeq ()
+        {
+          if (tcpTag.GetSeq () - flow.tcp_max_seq > TCP_WRAPAROUND_TH)
+            {
+              // The received SEQ is probably bigger, because of a wraparound
+              // So we consider this a reordering/retransmission instead of updating the maximum
+              ProcessTCPReorderMmnt (flowId, 1, flow.packets);
+            }
+          else
+            {
+              flow.tcp_max_seq = tcpTag.GetSeq ();
+            }
+        }
+    }
+
+  // Delay measurement
+  // Based on Dart as proposed by Sengupta et al., "Continuous in-network round-trip time monitoring", 2022, https://dl.acm.org/doi/abs/10.1145/3544216.3544222
+
+  // "Dart completely ignores SYN and SYN-ACK packets"
+  // This approach only works for bidirectional observers
+  if (!tcpTag.IsSYN () && flow.reverseFlowId != 0)
+    {
+      EfmFlowStats &revFlow = m_flowStats[flow.reverseFlowId];
+
+      // Update range tracker
+      bool isValidSeq = true;
+      bool isValidAck = true;
+
+      if (tcpTag.GetSeq () >= flow.tcp_dart_right_edge)
+        {
+          flow.tcp_dart_right_edge = tcpTag.GetSeq ();
+        }
+      else
+        {
+          // Reset range
+          flow.tcp_dart_left_edge = flow.tcp_dart_right_edge;
+          isValidSeq = false;
+        }
+
+      // ACKs are assoicated with the reverse flow direction
+      if (tcpTag.IsACK ())
+        {
+          // Dart ignores ACKs lesser than the left or greater than the right edge
+          if (tcpTag.GetAckSeq () < revFlow.tcp_dart_left_edge ||
+              tcpTag.GetAckSeq () > revFlow.tcp_dart_right_edge)
+            {
+              isValidAck = false;
+            }
+          else
+            {
+              if (tcpTag.GetAckSeq () > revFlow.tcp_dart_left_edge)
+                {
+                  revFlow.tcp_dart_left_edge = tcpTag.GetAckSeq ();
+                }
+              else // tcpTag.GetAckSeq () == revFlow.tcp_dart_left_edge
+                {
+                  // Reset range
+                  revFlow.tcp_dart_left_edge = revFlow.tcp_dart_right_edge;
+                  isValidAck = false;
+                }
+            }
+        }
+      else
+        isValidAck = false;
+
+      // Process packet tracker
+      if (isValidSeq)
+        {
+          flow.tcp_expected_ack_to_time[tcpTag.GetSeq ()] = Simulator::Now ();
+        }
+
+      if (isValidAck)
+        {
+          auto it = revFlow.tcp_expected_ack_to_time.find (tcpTag.GetAckSeq ());
+          if (it != revFlow.tcp_expected_ack_to_time.end ())
+            {
+              Time rtt = Simulator::Now () - it->second;
+              ProcessTCPDartDelayMmnt (flow.reverseFlowId, rtt, revFlow);
+              revFlow.tcp_expected_ack_to_time.erase (it);
+            }
+        }
+    }
+}
+
+void
+EfmFlowProbe::AddPacketDropStats (EfmFlowId flowId, uint32_t packetSize, uint32_t reasonCode)
+{
+  EfmFlowStats &flow = m_flowStats[flowId];
+
+  if (flow.packetsDropped.size () < reasonCode + 1)
+    {
+      flow.packetsDropped.resize (reasonCode + 1, 0);
+      flow.bytesDropped.resize (reasonCode + 1, 0);
+    }
+  ++flow.packetsDropped[reasonCode];
+  flow.bytesDropped[reasonCode] += packetSize;
+}
+
+void
+EfmFlowProbe::ProcessNewFlow (EfmFlowId flowId)
+{
+  NS_LOG_DEBUG ("New flow: " << flowId);
+  m_flowBeginTrace (flowId);
+  EfmFlowId revFlowId;
+  if (m_efmMonitor->GetRevFlowId (flowId, revFlowId))
+    {
+      EfmFlowStats &flow = m_flowStats[flowId];
+      flow.reverseFlowId = revFlowId;
+
+      //Set or update reverseFlowId of reverse flow if it exists
+      auto revIt = m_flowStats.find (revFlowId);
+      if (revIt != m_flowStats.end ())
+        {
+          revIt->second.reverseFlowId = flowId;
+        }
+    }
+}
+
+void
+EfmFlowProbe::ProcessSpinRTTMmnt (EfmFlowId flowId, Time rtt, bool halfAvailable, Time halfRtt)
+{
+  NS_LOG_DEBUG (flowId << " => Spin RTT Mmnt: " + std::to_string (rtt.GetMilliSeconds ()) << "ms");
+  m_spinBitDelayTrace (flowId, rtt.GetMilliSeconds (), halfAvailable,
+                       halfAvailable ? halfRtt.GetMilliSeconds () : 0);
+}
+
+void
+EfmFlowProbe::ProcessQLossMmnt (EfmFlowId flowId, uint32_t pktCount, uint8_t packetsLost)
+{
+  NS_LOG_DEBUG (m_nodeId << "N, " << flowId << "F => Q Loss Mmnt: " << std::to_string (packetsLost)
+                         << " packets lost");
+  m_qBitLossTrace (flowId, pktCount, packetsLost);
+}
+
+void
+EfmFlowProbe::ProcessLLossMmnt (EfmFlowId flowId, EfmPathId pathId, uint32_t seq,
+                                uint32_t flowPktCount, uint32_t pathPtkCount)
+{
+  NS_LOG_DEBUG (m_nodeId << "N, " << flowId << "F => L Loss Mmnt");
+  m_lBitSetTrace (flowId, flowPktCount, seq);
+  m_pathLBitSetTrace (pathId, pathPtkCount, seq);
+}
+
+void
+EfmFlowProbe::ProcessRLossMmnt (EfmFlowId flowId, uint32_t pktCount, uint8_t packetsLost)
+{
+  NS_LOG_DEBUG (flowId << " => R Loss Mmnt: " << std::to_string (packetsLost) << " packets lost");
+  m_rBitLossTrace (flowId, pktCount, packetsLost);
+}
+
+void
+EfmFlowProbe::ProcessTFullLossMmnt (EfmFlowId flowId, uint32_t pktCount, uint32_t packetsLost)
+{
+  NS_LOG_DEBUG (flowId << " => T Full Loss Mmnt: " << std::to_string (packetsLost)
+                       << " packets lost");
+  m_tBitFullLossTrace (flowId, pktCount, packetsLost);
+}
+
+void
+EfmFlowProbe::ProcessTHalfLossMmnt (EfmFlowId flowId, uint32_t pktCount, uint32_t packetsLost)
+{
+  NS_LOG_DEBUG (flowId << " => T Half Loss Mmnt: " << std::to_string (packetsLost)
+                       << " packets lost");
+  m_tBitHalfLossTrace (flowId, pktCount, packetsLost);
+}
+
+void
+EfmFlowProbe::ProcessTCPDartDelayMmnt (EfmFlowId flowId, Time delay, EfmFlowStats &flowStats)
+{
+  if (Simulator::Now () - flowStats.tcp_dart_last_report >=
+      m_efmMonitor->GetDartReportingInterval ())
+    {
+      m_tcpDartDelayTrace (flowId, delay.GetMilliSeconds ());
+      flowStats.tcp_dart_last_report = Simulator::Now ();
+    }
+}
+
+void
+EfmFlowProbe::ProcessTCPReorderMmnt (EfmFlowId flowId, uint32_t reorderCount, uint32_t pktCount)
+{
+  m_tcpReorderingTrace (flowId, pktCount, reorderCount);
+}
+
+void
+EfmFlowProbe::ProcessSQLossMmnt (EfmPathId pathId, uint32_t sqPktCount, int32_t packetsLost)
+{
+  m_pathSQBitsLossTrace (pathId, sqPktCount, packetsLost);
+}
+
+EfmFlowProbe::EfmFlowStatsMap
+EfmFlowProbe::GetFlowStats () const
+{
+  return m_flowStats;
+}
+
+uint32_t
+EfmFlowProbe::GetNodeId () const
+{
+  return m_nodeId;
+}
+
+void
+EfmFlowProbe::SerializeToXmlStream (std::ostream &os, uint16_t indent, uint32_t index) const
+{
+  os << std::string (indent, ' ') << "<EfmFlowProbe index=\"" << index << "\">\n";
+
+  indent += 2;
+
+  for (EfmFlowStatsMap::const_iterator iter = m_flowStats.begin (); iter != m_flowStats.end ();
+       iter++)
+    {
+      os << std::string (indent, ' ');
+      os << "<EfmFlowStats "
+         << " flowId=\"" << iter->first << "\""
+         << " packets=\"" << iter->second.packets << "\""
+         << " bytes=\"" << iter->second.bytes << "\""
+         << " delayFromFirstProbeSum=\"" << iter->second.delayFromFirstProbeSum << "\""
+         << " >\n";
+      indent += 2;
+      for (uint32_t reasonCode = 0; reasonCode < iter->second.packetsDropped.size (); reasonCode++)
+        {
+          os << std::string (indent, ' ');
+          os << "<packetsDropped reasonCode=\"" << reasonCode << "\""
+             << " number=\"" << iter->second.packetsDropped[reasonCode] << "\" />\n";
+        }
+      for (uint32_t reasonCode = 0; reasonCode < iter->second.bytesDropped.size (); reasonCode++)
+        {
+          os << std::string (indent, ' ');
+          os << "<bytesDropped reasonCode=\"" << reasonCode << "\""
+             << " bytes=\"" << iter->second.bytesDropped[reasonCode] << "\" />\n";
+        }
+      indent -= 2;
+      os << std::string (indent, ' ') << "</EfmFlowStats>\n";
+    }
+  indent -= 2;
+  os << std::string (indent, ' ') << "</EfmFlowProbe>\n";
+}
+
+} // namespace ns3
diff --git a/src/efm-monitor/model/efm-flow-probe.h b/src/efm-monitor/model/efm-flow-probe.h
new file mode 100644
index 000000000..39adcad95
--- /dev/null
+++ b/src/efm-monitor/model/efm-flow-probe.h
@@ -0,0 +1,298 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+//
+// Copyright (c) 2009 INESC Porto
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 2 as
+// published by the Free Software Foundation;
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+// Author: Gustavo J. A. M. Carneiro  <gjc@inescporto.pt> <gjcarneiro@gmail.com>
+// Modifications by:
+//  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+//  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+//
+
+#ifndef EFM_FLOW_PROBE_H
+#define EFM_FLOW_PROBE_H
+
+#include <map>
+#include <unordered_map>
+#include <vector>
+
+#include "ns3/object.h"
+#include "ns3/efm-flow-classifier.h"
+#include "ns3/nstime.h"
+#include "ns3/efm-host-tag.h"
+#include "ns3/traced-callback.h"
+#include "ns3/node.h"
+#include "ns3/tcp-flow-probe-tag.h"
+
+namespace ns3 {
+
+class EfmMonitor;
+
+//Represents different T bit phases
+enum TBitObserverPhase {
+  GEN, //Generation phase
+  PAUSE_BEGIN_GEN,
+  PAUSE_FULL_GEN, //Observed at least one spin period without TBits
+  REF, //Reflection phase
+  PAUSE_BEGIN_REF,
+  PAUSE_FULL_REF //Observed at least one spin period without TBits
+};
+
+/// The EfmFlowProbe class is responsible for listening for packet events
+/// in a specific point of the simulated space, report those events to
+/// the global EfmMonitor, and collect its own flow statistics
+/// regarding only the packets that pass through that probe.
+class EfmFlowProbe : public Object
+{
+protected:
+  /// Constructor
+  /// \param efmMonitor the EfmMonitor this probe is associated with
+  EfmFlowProbe (Ptr<EfmMonitor> efmMonitor, Ptr<Node> node);
+  virtual void DoDispose (void);
+
+public:
+  virtual ~EfmFlowProbe ();
+
+  // Delete copy constructor and assignment operator to avoid misuse
+  EfmFlowProbe (EfmFlowProbe const &) = delete;
+  EfmFlowProbe &operator= (EfmFlowProbe const &) = delete;
+
+  /// Register this type.
+  /// \return The TypeId.
+  static TypeId GetTypeId (void);
+  virtual TypeId GetInstanceTypeId () const;
+
+  /// Structure to hold the statistics of a flow
+  struct EfmFlowStats
+  {
+    EfmFlowStats () : delayFromFirstProbeSum (Seconds (0))
+    {
+    }
+
+    EfmFlowId reverseFlowId = 0;
+
+    /// packetsDropped[reasonCode] => number of dropped packets
+    std::vector<uint32_t> packetsDropped;
+    /// bytesDropped[reasonCode] => number of dropped bytes
+    std::vector<uint64_t> bytesDropped;
+    /// divide by 'packets' to get the average delay from the
+    /// first (entry) probe up to this one (partial delay)
+    Time delayFromFirstProbeSum;
+    /// Number of bytes seen of this flow
+    uint64_t bytes = 0;
+    /// Number of packets seen of this flow
+    uint32_t packets = 0;
+
+    //Number of packets seen of this flow with the EFM tag set
+    uint32_t efmPackets = 0;
+
+    //EFM Seq mechanism for ground-truth
+    int32_t seq_pkt_loss = 0;
+    uint32_t seq_highest = 0;
+    int32_t ackSeq_pkt_loss = 0;
+    uint32_t ackSeq_highest = 0;
+
+    //Default value if no value of an EFM bit has been encountered yet
+    static const uint8_t NO_LAST_VAL = 255;
+
+    // Spin periods
+    uint32_t spin_period_count = 0;
+    // Last value of the spin bit
+    uint8_t spin_last = NO_LAST_VAL;
+    // Time of last spin
+    Time time_of_last_spin = Time (-1);
+
+    //Last value of the Q bit
+    uint8_t q_last = NO_LAST_VAL;
+    //Number of packets with the same Q bit value since the last toggle (block)
+    uint32_t q_curr_block_length = 0;
+    //Total number of completed Q bit blocks
+    uint32_t q_block_count = 0;
+
+    //Last value of the R bit
+    uint8_t r_last = NO_LAST_VAL;
+    //Number of packets with the same R bit value since the last toggle (block)
+    uint32_t r_curr_block_length = 0;
+    //Total number of completed R bit blocks
+    uint32_t r_block_count = 0;
+
+    //Current T bit phase, begin in PAUSE_FULL_REF to enter GEN on first TBit
+    enum TBitObserverPhase t_curr_phase = TBitObserverPhase::PAUSE_FULL_REF;
+    //Number of packets in the current T bit gen phase
+    uint32_t t_gen_phase_count = 0;
+    //Number of packets in the current T bit ref phase
+    uint32_t t_ref_phase_count = 0;
+    //Total number of fully observed T bit cycles (one gen + one ref phase)
+    uint32_t t_cycle_count = 0;
+    //Number of packets in the last T bit gen phase, used for half RT measurement
+    uint32_t t_last_gen_phase_count = 0;
+
+    // TCP based measurements
+    bool tcp_first_packet = true;
+    uint32_t tcp_max_seq = 0;
+    uint32_t tcp_dart_left_edge = 0;
+    uint32_t tcp_dart_right_edge = 0;
+    std::unordered_map<uint32_t, Time> tcp_expected_ack_to_time;
+    Time tcp_dart_last_report = Time (0);
+  };
+  /// Container to map FlowId -> EfmFlowStats
+  typedef std::map<EfmFlowId, EfmFlowStats> EfmFlowStatsMap;
+
+  struct EfmPathStats
+  {
+    uint32_t packets = 0;
+    uint32_t efmPackets = 0; //Sum of all efmPackets values of the flows belonging to this path
+    int32_t sqEnabledPackets = 0; //Sum of all packets with SQ-Bit enabled
+    int32_t sqMarkPackets =
+        0; //Sum of all packets with SQ-Bit enabled and marked (current variant: 01 = enabled, 11 = enabled and marked)
+  };
+
+  typedef std::map<EfmPathId, EfmPathStats> EfmPathStatsMap;
+
+  /// Add a packet data to the flow stats
+  /// \param flowId the flow Identifier
+  /// \param packetSize the packet size
+  /// \param delayFromFirstProbe packet delay
+  void AddPacketStats (EfmFlowId flowId, uint32_t packetSize, EfmPathId pathId,
+                       Time delayFromFirstProbe);
+  /// Add a packet data to the flow stats including EFM-specific measurements
+  /// For each packet, call either this or AddPacketStats
+  /// \param flowId the flow Identifier
+  /// \param packetSize the packet size
+  /// \param delayFromFirstProbe packet delay
+  /// \param efmTag the packets efmTag containing the various EFM bits
+  void AddPacketStatsEFM (EfmFlowId flowId, uint32_t packetSize, EfmPathId pathId,
+                          Time delayFromFirstProbe, EfmHostTag &efmTag);
+
+  /// Add a packet data to the flow stats for TCP-specific measurements.
+  /// WARNING: This function can only be called in addition to AddPacketStats or AddPacketStatsEFM, not before / alone
+  /// \param flowId the flow Identifier
+  /// \param packetSize the packet size
+  /// \param pathId the path Identifier
+  /// \param efmTag the packets tcpTag
+  void AddPacketStatsTCP (EfmFlowId flowId, uint32_t packetSize, EfmPathId pathId,
+                          TcpFlowProbeTag &tcpTag);
+
+  /// Add a packet drop data to the flow stats
+  /// \param flowId the flow Identifier
+  /// \param packetSize the packet size
+  /// \param reasonCode reason code for the drop
+  void AddPacketDropStats (EfmFlowId flowId, uint32_t packetSize, uint32_t reasonCode);
+
+  /// Get the partial flow statistics stored in this probe.  With this
+  /// information you can, for example, find out what is the delay
+  /// from the first probe to this one.
+  /// \returns the partial flow statistics
+  EfmFlowStatsMap GetFlowStats () const;
+
+  /// Serializes the results to an std::ostream in XML format
+  /// \param os the output stream
+  /// \param indent number of spaces to use as base indentation level
+  /// \param index EfmFlowProbe index
+  void SerializeToXmlStream (std::ostream &os, uint16_t indent, uint32_t index) const;
+
+  uint32_t GetNodeId () const;
+
+  typedef void (*EfmFlowBeginTracedCallback) (EfmFlowId flowId);
+  typedef void (*EfmBitStateUpdatedTracedCallback) (EfmFlowId flowId, bool newState, uint32_t seq);
+  typedef void (*EfmLBitSetTracedCallback) (EfmFlowId flowId, uint32_t pktCount, uint32_t seq);
+  typedef void (*EfmTBitSetTracedCallback) (EfmFlowId flowId, uint32_t seq);
+  // typedef void (*EfmBitUniDelayEventTracedCallback) (EfmFlowId flowId, uint32_t delay);
+  typedef void (*EfmBitBiDelayEventTracedCallback) (EfmFlowId flowId, uint32_t delay,
+                                                    bool halfAccessible, uint32_t halfDelay);
+  typedef void (*EfmBitLossEventTracedCallback) (EfmFlowId flowId, uint32_t pktCount,
+                                                 uint32_t loss);
+  typedef void (*EfmTBitPhaseUpdatedTracedCallback) (EfmFlowId flowId, TBitObserverPhase oldPhase,
+                                                     TBitObserverPhase newPhase,
+                                                     uint32_t genTrainLength,
+                                                     uint32_t refTrainLength);
+
+  typedef void (*TCPUniDelayTracedCallback) (EfmFlowId flowId, uint32_t delay);
+
+  typedef void (*TCPReorderingTracedCallback) (EfmFlowId flowId, uint32_t pktCount,
+                                               uint32_t reorderCount);
+
+  typedef void (*EfmPathLBitSetTracedCallback) (EfmPathId pathId, uint32_t pktCount, uint32_t seq);
+  typedef void (*EfmPathLossEventTracedCallback) (EfmPathId pathId, uint32_t pktCount,
+                                                  int32_t loss);
+
+protected:
+  Ptr<EfmMonitor> m_efmMonitor; //!< the EfmMonitor instance
+  EfmFlowStatsMap m_flowStats; //!< The flow stats
+  EfmPathStatsMap m_pathStats; //!< The path stats
+  uint32_t m_nodeId;
+
+  TracedCallback<EfmFlowId> m_flowBeginTrace;
+  TracedCallback<EfmFlowId, uint32_t, uint32_t> m_seqLossTrace;
+  TracedCallback<EfmFlowId, uint32_t, uint32_t> m_ackSeqLossTrace;
+  TracedCallback<EfmFlowId, bool, uint32_t> m_spinBitEdgeTrace;
+  TracedCallback<EfmFlowId, bool, uint32_t> m_qBitChangeTrace;
+  TracedCallback<EfmFlowId, bool, uint32_t> m_rBitChangeTrace;
+  TracedCallback<EfmFlowId, uint32_t, uint32_t> m_lBitSetTrace;
+  TracedCallback<EfmFlowId, uint32_t> m_tBitSetTrace;
+  TracedCallback<EfmFlowId, uint32_t, bool, uint32_t> m_spinBitDelayTrace;
+  TracedCallback<EfmFlowId, uint32_t, uint32_t> m_qBitLossTrace;
+  TracedCallback<EfmFlowId, uint32_t, uint32_t> m_rBitLossTrace;
+  TracedCallback<EfmFlowId, uint32_t, uint32_t> m_tBitFullLossTrace;
+  TracedCallback<EfmFlowId, uint32_t, uint32_t> m_tBitHalfLossTrace;
+  TracedCallback<EfmFlowId, TBitObserverPhase, TBitObserverPhase, uint32_t, uint32_t>
+      m_tBitPhaseTrace;
+
+  TracedCallback<EfmFlowId, uint32_t> m_tcpDartDelayTrace;
+  TracedCallback<EfmFlowId, uint32_t, uint32_t> m_tcpReorderingTrace;
+
+  TracedCallback<EfmPathId, uint32_t, uint32_t> m_pathLBitSetTrace;
+  TracedCallback<EfmPathId, uint32_t, int32_t> m_pathSQBitsLossTrace;
+
+private:
+  /// Called if a packet from a new flow is encountered
+  /// @param flowId flow identifier
+  void ProcessNewFlow (EfmFlowId flowId);
+
+  /// Processes an RTT measurement for a specific flow generated using the spin bit
+  /// \param flowId flow identifier
+  /// \param rtt RTT measured using the spin bit
+  void ProcessSpinRTTMmnt (EfmFlowId flowId, Time rtt, bool halfAvailable, Time halfRtt);
+  /// Processes a loss measurement for a specific flow generated using the Q bit
+  /// \param flowId flow identifier
+  /// \param packetsLost the number of packets lost according to the measurement
+  void ProcessQLossMmnt (EfmFlowId flowId, uint32_t pktCount, uint8_t packetsLost);
+  /// Processes a loss measurement for a specific flow generated using the L bit
+  /// \param flowId flow identifier
+  void ProcessLLossMmnt (EfmFlowId flowId, EfmPathId pathId, uint32_t seq, uint32_t flowPktCount,
+                         uint32_t pathPtkCount);
+  /// Processes a loss measurement for a specific flow generated using the R bit
+  /// \param flowId flow identifier
+  /// \param packetsLost the number of packets lost according to the measurement
+  void ProcessRLossMmnt (EfmFlowId flowId, uint32_t pktCount, uint8_t packetsLost);
+  /// Processes a loss measurement for a specific flow generated using the T bit
+  /// \param flowId flow identifier
+  /// \param packetsLost the number of packets lost according to the measurement
+  void ProcessTFullLossMmnt (EfmFlowId flowId, uint32_t pktCount, uint32_t packetsLost);
+  /// Processes a loss measurement for a specific flow generated using the T bit
+  /// \param flowId flow identifier
+  /// \param packetsLost the number of packets lost according to the measurement
+  void ProcessTHalfLossMmnt (EfmFlowId flowId, uint32_t pktCount, uint32_t packetsLost);
+
+  void ProcessTCPDartDelayMmnt (EfmFlowId flowId, Time delay, EfmFlowStats &flowStats);
+
+  void ProcessTCPReorderMmnt (EfmFlowId flowId, uint32_t reorderCount, uint32_t pktCount);
+
+  void ProcessSQLossMmnt (EfmPathId pathId, uint32_t sqPktCount, int32_t packetsLost);
+};
+
+} // namespace ns3
+
+#endif /* FLOW_PROBE_H */
diff --git a/src/efm-monitor/model/efm-monitor.cc b/src/efm-monitor/model/efm-monitor.cc
new file mode 100644
index 000000000..8d0ddf73a
--- /dev/null
+++ b/src/efm-monitor/model/efm-monitor.cc
@@ -0,0 +1,574 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+//
+// Copyright (c) 2009 INESC Porto
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 2 as
+// published by the Free Software Foundation;
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+// Author: Gustavo J. A. M. Carneiro  <gjc@inescporto.pt> <gjcarneiro@gmail.com>
+// Modifications by:
+//  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+//  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+//
+
+#include "efm-monitor.h"
+#include "ns3/simulator.h"
+#include "ns3/log.h"
+#include "ns3/double.h"
+#include <fstream>
+#include <sstream>
+
+#define PERIODIC_CHECK_INTERVAL (Seconds (1))
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("EfmMonitor");
+
+NS_OBJECT_ENSURE_REGISTERED (EfmMonitor);
+
+TypeId
+EfmMonitor::GetTypeId (void)
+{
+  static TypeId tid =
+      TypeId ("ns3::EfmMonitor")
+          .SetParent<Object> ()
+          .SetGroupName ("EfmMonitor")
+          .AddConstructor<EfmMonitor> ()
+          .AddAttribute ("MaxPerHopDelay",
+                         ("The maximum per-hop delay that should be considered.  "
+                          "Packets still not received after this delay are to be considered lost."),
+                         TimeValue (Seconds (10.0)),
+                         MakeTimeAccessor (&EfmMonitor::m_maxPerHopDelay), MakeTimeChecker ())
+          .AddAttribute ("StartTime", ("The time when the monitoring starts."),
+                         TimeValue (Seconds (0.0)), MakeTimeAccessor (&EfmMonitor::Start),
+                         MakeTimeChecker ())
+          .AddAttribute ("DelayBinWidth", ("The width used in the delay histogram."),
+                         DoubleValue (0.001), MakeDoubleAccessor (&EfmMonitor::m_delayBinWidth),
+                         MakeDoubleChecker<double> ())
+          .AddAttribute ("JitterBinWidth", ("The width used in the jitter histogram."),
+                         DoubleValue (0.001), MakeDoubleAccessor (&EfmMonitor::m_jitterBinWidth),
+                         MakeDoubleChecker<double> ())
+          .AddAttribute ("PacketSizeBinWidth", ("The width used in the packetSize histogram."),
+                         DoubleValue (20), MakeDoubleAccessor (&EfmMonitor::m_packetSizeBinWidth),
+                         MakeDoubleChecker<double> ())
+          .AddAttribute (
+              "FlowInterruptionsBinWidth", ("The width used in the flowInterruptions histogram."),
+              DoubleValue (0.250), MakeDoubleAccessor (&EfmMonitor::m_flowInterruptionsBinWidth),
+              MakeDoubleChecker<double> ())
+          .AddAttribute ("FlowInterruptionsMinTime",
+                         ("The minimum inter-arrival time that is considered a flow interruption."),
+                         TimeValue (Seconds (0.5)),
+                         MakeTimeAccessor (&EfmMonitor::m_flowInterruptionsMinTime),
+                         MakeTimeChecker ())
+          .AddAttribute ("DartReportingInterval",
+                         ("The interval between two consecutive Dart delay reports per flow."),
+                         TimeValue (MilliSeconds (5)),
+                         MakeTimeAccessor (&EfmMonitor::m_dartReportingInterval),
+                         MakeTimeChecker ())
+          .AddTraceSource ("ProbeCreation", "Emitted when a new efm flow probe is created.",
+                           MakeTraceSourceAccessor (&EfmMonitor::m_probeCreationTrace),
+                           "ns3::EfmMonitor::EfmMonitorProbeCreationTracedCallback");
+  return tid;
+}
+
+TypeId
+EfmMonitor::GetInstanceTypeId (void) const
+{
+  return GetTypeId ();
+}
+
+EfmMonitor::EfmMonitor () : m_enabled (false)
+{
+  NS_LOG_FUNCTION (this);
+}
+
+void
+EfmMonitor::DoDispose (void)
+{
+  NS_LOG_FUNCTION (this);
+  Simulator::Cancel (m_startEvent);
+  Simulator::Cancel (m_stopEvent);
+  for (std::list<Ptr<EfmFlowClassifier>>::iterator iter = m_classifiers.begin ();
+       iter != m_classifiers.end (); iter++)
+    {
+      *iter = 0;
+    }
+  for (uint32_t i = 0; i < m_flowProbes.size (); i++)
+    {
+      m_flowProbes[i]->Dispose ();
+      m_flowProbes[i] = 0;
+    }
+  Object::DoDispose ();
+}
+
+inline EfmMonitor::EfmFlowStats &
+EfmMonitor::GetStatsForFlow (EfmFlowId flowId)
+{
+  NS_LOG_FUNCTION (this);
+  EfmFlowStatsContainerI iter;
+  iter = m_flowStats.find (flowId);
+  if (iter == m_flowStats.end ())
+    {
+      EfmMonitor::EfmFlowStats &ref = m_flowStats[flowId];
+      ref.delaySum = Seconds (0);
+      ref.jitterSum = Seconds (0);
+      ref.lastDelay = Seconds (0);
+      ref.txBytes = 0;
+      ref.rxBytes = 0;
+      ref.txPackets = 0;
+      ref.rxPackets = 0;
+      ref.lostPackets = 0;
+      ref.timesForwarded = 0;
+      ref.delayHistogram.SetDefaultBinWidth (m_delayBinWidth);
+      ref.jitterHistogram.SetDefaultBinWidth (m_jitterBinWidth);
+      ref.packetSizeHistogram.SetDefaultBinWidth (m_packetSizeBinWidth);
+      ref.flowInterruptionsHistogram.SetDefaultBinWidth (m_flowInterruptionsBinWidth);
+      return ref;
+    }
+  else
+    {
+      return iter->second;
+    }
+}
+
+void
+EfmMonitor::ReportFirstTx (Ptr<EfmFlowProbe> probe, uint32_t flowId, uint32_t packetId,
+                           uint32_t packetSize, uint32_t pathId)
+{
+  NS_LOG_FUNCTION (this << probe << flowId << packetId << packetSize);
+  if (!m_enabled)
+    {
+      NS_LOG_DEBUG ("EfmMonitor not enabled; returning");
+      return;
+    }
+  Time now = Simulator::Now ();
+  EfmTrackedPacket &tracked = m_trackedPackets[std::make_pair (flowId, packetId)];
+  tracked.firstSeenTime = now;
+  tracked.lastSeenTime = tracked.firstSeenTime;
+  tracked.timesForwarded = 0;
+  NS_LOG_DEBUG ("ReportFirstTx: adding tracked packet (flowId=" << flowId << ", packetId="
+                                                                << packetId << ").");
+
+  probe->AddPacketStats (flowId, packetSize, pathId, Seconds (0));
+
+  EfmFlowStats &stats = GetStatsForFlow (flowId);
+  stats.txBytes += packetSize;
+  stats.txPackets++;
+  if (stats.txPackets == 1)
+    {
+      stats.timeFirstTxPacket = now;
+    }
+  stats.timeLastTxPacket = now;
+}
+
+void
+EfmMonitor::ReportForwarding (Ptr<EfmFlowProbe> probe, uint32_t flowId, uint32_t packetId,
+                              EfmPathId pathId, uint32_t packetSize)
+{
+  NS_LOG_FUNCTION (this << probe << flowId << packetId << packetSize);
+  if (!m_enabled)
+    {
+      NS_LOG_DEBUG ("EfmMonitor not enabled; returning");
+      return;
+    }
+  std::pair<EfmFlowId, EfmFlowPacketId> key (flowId, packetId);
+  EfmTrackedPacketMap::iterator tracked = m_trackedPackets.find (key);
+  if (tracked == m_trackedPackets.end ())
+    {
+      NS_LOG_WARN ("Received packet forward report (flowId="
+                   << flowId << ", packetId=" << packetId << ") but not known to be transmitted.");
+      return;
+    }
+
+  tracked->second.timesForwarded++;
+  tracked->second.lastSeenTime = Simulator::Now ();
+
+  Time delay = (Simulator::Now () - tracked->second.firstSeenTime);
+  probe->AddPacketStats (flowId, packetSize, pathId, delay);
+}
+
+void
+EfmMonitor::ReportForwardingEFM (Ptr<EfmFlowProbe> probe, uint32_t flowId, uint32_t packetId,
+                                 EfmPathId pathId, uint32_t packetSize, EfmHostTag &efmTag)
+{
+  NS_LOG_FUNCTION (this << probe << flowId << packetId << packetSize);
+  if (!m_enabled)
+    {
+      NS_LOG_DEBUG ("EfmMonitor not enabled; returning");
+      return;
+    }
+  std::pair<EfmFlowId, EfmFlowPacketId> key (flowId, packetId);
+  EfmTrackedPacketMap::iterator tracked = m_trackedPackets.find (key);
+  if (tracked == m_trackedPackets.end ())
+    {
+      NS_LOG_WARN ("Received packet spin period report (flowId="
+                   << flowId << ", packetId=" << packetId << ") but not known to be transmitted.");
+      return;
+    }
+
+  tracked->second.timesForwarded++;
+  tracked->second.lastSeenTime = Simulator::Now ();
+
+  Time delay = (Simulator::Now () - tracked->second.firstSeenTime);
+  probe->AddPacketStatsEFM (flowId, packetSize, pathId, delay, efmTag);
+}
+
+void
+EfmMonitor::ReportForwardingTCP (Ptr<EfmFlowProbe> probe, EfmFlowId flowId,
+                                 EfmFlowPacketId packetId, EfmPathId pathId, uint32_t packetSize,
+                                 TcpFlowProbeTag &tcpTag)
+{
+  if (!m_enabled)
+    {
+      NS_LOG_DEBUG ("EfmMonitor not enabled; returning");
+      return;
+    }
+
+  probe->AddPacketStatsTCP (flowId, packetSize, pathId, tcpTag);
+}
+
+void
+EfmMonitor::ReportLastRx (Ptr<EfmFlowProbe> probe, uint32_t flowId, uint32_t packetId,
+                          uint32_t packetSize, uint32_t pathId)
+{
+  NS_LOG_FUNCTION (this << probe << flowId << packetId << packetSize);
+  if (!m_enabled)
+    {
+      NS_LOG_DEBUG ("EfmMonitor not enabled; returning");
+      return;
+    }
+  EfmTrackedPacketMap::iterator tracked = m_trackedPackets.find (std::make_pair (flowId, packetId));
+  if (tracked == m_trackedPackets.end ())
+    {
+      NS_LOG_WARN ("Received packet last-tx report (flowId="
+                   << flowId << ", packetId=" << packetId << ") but not known to be transmitted.");
+      return;
+    }
+
+  Time now = Simulator::Now ();
+  Time delay = (now - tracked->second.firstSeenTime);
+  probe->AddPacketStats (flowId, packetSize, pathId, delay);
+
+  EfmFlowStats &stats = GetStatsForFlow (flowId);
+  stats.delaySum += delay;
+  stats.delayHistogram.AddValue (delay.GetSeconds ());
+  if (stats.rxPackets > 0)
+    {
+      Time jitter = stats.lastDelay - delay;
+      if (jitter > Seconds (0))
+        {
+          stats.jitterSum += jitter;
+          stats.jitterHistogram.AddValue (jitter.GetSeconds ());
+        }
+      else
+        {
+          stats.jitterSum -= jitter;
+          stats.jitterHistogram.AddValue (-jitter.GetSeconds ());
+        }
+    }
+  stats.lastDelay = delay;
+
+  stats.rxBytes += packetSize;
+  stats.packetSizeHistogram.AddValue ((double) packetSize);
+  stats.rxPackets++;
+  if (stats.rxPackets == 1)
+    {
+      stats.timeFirstRxPacket = now;
+    }
+  else
+    {
+      // measure possible flow interruptions
+      Time interArrivalTime = now - stats.timeLastRxPacket;
+      if (interArrivalTime > m_flowInterruptionsMinTime)
+        {
+          stats.flowInterruptionsHistogram.AddValue (interArrivalTime.GetSeconds ());
+        }
+    }
+  stats.timeLastRxPacket = now;
+  stats.timesForwarded += tracked->second.timesForwarded;
+
+  NS_LOG_DEBUG ("ReportLastTx: removing tracked packet (flowId=" << flowId << ", packetId="
+                                                                 << packetId << ").");
+
+  m_trackedPackets.erase (tracked); // we don't need to track this packet anymore
+}
+
+void
+EfmMonitor::ReportDrop (Ptr<EfmFlowProbe> probe, uint32_t flowId, uint32_t packetId,
+                        uint32_t packetSize, uint32_t reasonCode)
+{
+  NS_LOG_FUNCTION (this << probe << flowId << packetId << packetSize << reasonCode);
+  if (!m_enabled)
+    {
+      NS_LOG_DEBUG ("EfmMonitor not enabled; returning");
+      return;
+    }
+
+  probe->AddPacketDropStats (flowId, packetSize, reasonCode);
+
+  EfmFlowStats &stats = GetStatsForFlow (flowId);
+  stats.lostPackets++;
+  if (stats.packetsDropped.size () < reasonCode + 1)
+    {
+      stats.packetsDropped.resize (reasonCode + 1, 0);
+      stats.bytesDropped.resize (reasonCode + 1, 0);
+    }
+  ++stats.packetsDropped[reasonCode];
+  stats.bytesDropped[reasonCode] += packetSize;
+  NS_LOG_DEBUG ("++stats.packetsDropped[" << reasonCode
+                                          << "]; // becomes: " << stats.packetsDropped[reasonCode]);
+
+  EfmTrackedPacketMap::iterator tracked = m_trackedPackets.find (std::make_pair (flowId, packetId));
+  if (tracked != m_trackedPackets.end ())
+    {
+      // we don't need to track this packet anymore
+      // FIXME: this will not necessarily be true with broadcast/multicast
+      NS_LOG_DEBUG ("ReportDrop: removing tracked packet (flowId=" << flowId << ", packetId="
+                                                                   << packetId << ").");
+      m_trackedPackets.erase (tracked);
+    }
+}
+
+const EfmMonitor::EfmFlowStatsContainer &
+EfmMonitor::GetFlowStats () const
+{
+  return m_flowStats;
+}
+
+void
+EfmMonitor::CheckForLostPackets (Time maxDelay)
+{
+  NS_LOG_FUNCTION (this << maxDelay.As (Time::S));
+  Time now = Simulator::Now ();
+
+  for (EfmTrackedPacketMap::iterator iter = m_trackedPackets.begin ();
+       iter != m_trackedPackets.end ();)
+    {
+      if (now - iter->second.lastSeenTime >= maxDelay)
+        {
+          // packet is considered lost, add it to the loss statistics
+          EfmFlowStatsContainerI flow = m_flowStats.find (iter->first.first);
+          NS_ASSERT (flow != m_flowStats.end ());
+          flow->second.lostPackets++;
+
+          // we won't track it anymore
+          m_trackedPackets.erase (iter++);
+        }
+      else
+        {
+          iter++;
+        }
+    }
+}
+
+bool
+EfmMonitor::GetRevFlowId (EfmFlowId flowId, EfmFlowId &revFlowId)
+{
+  for (auto it = m_classifiers.begin (); it != m_classifiers.end (); it++)
+    {
+      if ((*it)->GetRevFlowId (flowId, revFlowId))
+        return true;
+    }
+  return false;
+}
+
+Time
+EfmMonitor::GetDartReportingInterval () const
+{
+  return m_dartReportingInterval;
+}
+
+void
+EfmMonitor::CheckForLostPackets ()
+{
+  CheckForLostPackets (m_maxPerHopDelay);
+}
+
+void
+EfmMonitor::PeriodicCheckForLostPackets ()
+{
+  CheckForLostPackets ();
+  Simulator::Schedule (PERIODIC_CHECK_INTERVAL, &EfmMonitor::PeriodicCheckForLostPackets, this);
+}
+
+void
+EfmMonitor::NotifyConstructionCompleted ()
+{
+  Object::NotifyConstructionCompleted ();
+  Simulator::Schedule (PERIODIC_CHECK_INTERVAL, &EfmMonitor::PeriodicCheckForLostPackets, this);
+}
+
+void
+EfmMonitor::AddProbe (Ptr<EfmFlowProbe> probe)
+{
+  m_flowProbes.push_back (probe);
+  m_probeCreationTrace (probe);
+}
+
+const EfmMonitor::EfmFlowProbeContainer &
+EfmMonitor::GetAllProbes () const
+{
+  return m_flowProbes;
+}
+
+void
+EfmMonitor::Start (const Time &time)
+{
+  NS_LOG_FUNCTION (this << time.As (Time::S));
+  if (m_enabled)
+    {
+      NS_LOG_DEBUG ("EfmMonitor already enabled; returning");
+      return;
+    }
+  Simulator::Cancel (m_startEvent);
+  NS_LOG_DEBUG ("Scheduling start at " << time.As (Time::S));
+  m_startEvent = Simulator::Schedule (time, &EfmMonitor::StartRightNow, this);
+}
+
+void
+EfmMonitor::Stop (const Time &time)
+{
+  NS_LOG_FUNCTION (this << time.As (Time::S));
+  Simulator::Cancel (m_stopEvent);
+  NS_LOG_DEBUG ("Scheduling stop at " << time.As (Time::S));
+  m_stopEvent = Simulator::Schedule (time, &EfmMonitor::StopRightNow, this);
+}
+
+void
+EfmMonitor::StartRightNow ()
+{
+  NS_LOG_FUNCTION (this);
+  if (m_enabled)
+    {
+      NS_LOG_DEBUG ("EfmMonitor already enabled; returning");
+      return;
+    }
+  m_enabled = true;
+}
+
+void
+EfmMonitor::StopRightNow ()
+{
+  NS_LOG_FUNCTION (this);
+  if (!m_enabled)
+    {
+      NS_LOG_DEBUG ("EfmMonitor not enabled; returning");
+      return;
+    }
+  m_enabled = false;
+  CheckForLostPackets ();
+}
+
+void
+EfmMonitor::AddFlowClassifier (Ptr<EfmFlowClassifier> classifier)
+{
+  m_classifiers.push_back (classifier);
+}
+
+void
+EfmMonitor::SerializeToXmlStream (std::ostream &os, uint16_t indent, bool enableHistograms,
+                                  bool enableProbes)
+{
+  NS_LOG_FUNCTION (this << indent << enableHistograms << enableProbes);
+  CheckForLostPackets ();
+
+  os << std::string (indent, ' ') << "<EfmMonitor>\n";
+  indent += 2;
+  os << std::string (indent, ' ') << "<EfmFlowStats>\n";
+  indent += 2;
+  for (EfmFlowStatsContainerCI flowI = m_flowStats.begin (); flowI != m_flowStats.end (); flowI++)
+    {
+      os << std::string (indent, ' ');
+#define ATTRIB(name) << " " #name "=\"" << flowI->second.name << "\""
+#define ATTRIB_TIME(name) << " " #name "=\"" << flowI->second.name.As (Time::NS) << "\""
+      os << "<Flow flowId=\"" << flowI->first
+         << "\"" ATTRIB_TIME (timeFirstTxPacket) ATTRIB_TIME (timeFirstRxPacket)
+                ATTRIB_TIME (timeLastTxPacket) ATTRIB_TIME (timeLastRxPacket) ATTRIB_TIME (delaySum)
+                    ATTRIB_TIME (jitterSum) ATTRIB_TIME (lastDelay) ATTRIB (txBytes)
+                        ATTRIB (rxBytes) ATTRIB (txPackets) ATTRIB (rxPackets) ATTRIB (lostPackets)
+                            ATTRIB (timesForwarded)
+         << ">\n";
+#undef ATTRIB_TIME
+#undef ATTRIB
+
+      indent += 2;
+      for (uint32_t reasonCode = 0; reasonCode < flowI->second.packetsDropped.size (); reasonCode++)
+        {
+          os << std::string (indent, ' ');
+          os << "<packetsDropped reasonCode=\"" << reasonCode << "\""
+             << " number=\"" << flowI->second.packetsDropped[reasonCode] << "\" />\n";
+        }
+      for (uint32_t reasonCode = 0; reasonCode < flowI->second.bytesDropped.size (); reasonCode++)
+        {
+          os << std::string (indent, ' ');
+          os << "<bytesDropped reasonCode=\"" << reasonCode << "\""
+             << " bytes=\"" << flowI->second.bytesDropped[reasonCode] << "\" />\n";
+        }
+      if (enableHistograms)
+        {
+          flowI->second.delayHistogram.SerializeToXmlStream (os, indent, "delayHistogram");
+          flowI->second.jitterHistogram.SerializeToXmlStream (os, indent, "jitterHistogram");
+          flowI->second.packetSizeHistogram.SerializeToXmlStream (os, indent,
+                                                                  "packetSizeHistogram");
+          flowI->second.flowInterruptionsHistogram.SerializeToXmlStream (
+              os, indent, "flowInterruptionsHistogram");
+        }
+      indent -= 2;
+
+      os << std::string (indent, ' ') << "</Flow>\n";
+    }
+  indent -= 2;
+  os << std::string (indent, ' ') << "</EfmFlowStats>\n";
+
+  for (std::list<Ptr<EfmFlowClassifier>>::iterator iter = m_classifiers.begin ();
+       iter != m_classifiers.end (); iter++)
+    {
+      (*iter)->SerializeToXmlStream (os, indent);
+    }
+
+  if (enableProbes)
+    {
+      os << std::string (indent, ' ') << "<EfmFlowProbes>\n";
+      indent += 2;
+      for (uint32_t i = 0; i < m_flowProbes.size (); i++)
+        {
+          m_flowProbes[i]->SerializeToXmlStream (os, indent, i);
+        }
+      indent -= 2;
+      os << std::string (indent, ' ') << "</EfmFlowProbes>\n";
+    }
+
+  indent -= 2;
+  os << std::string (indent, ' ') << "</EfmMonitor>\n";
+}
+
+std::string
+EfmMonitor::SerializeToXmlString (uint16_t indent, bool enableHistograms, bool enableProbes)
+{
+  NS_LOG_FUNCTION (this << indent << enableHistograms << enableProbes);
+  std::ostringstream os;
+  SerializeToXmlStream (os, indent, enableHistograms, enableProbes);
+  return os.str ();
+}
+
+void
+EfmMonitor::SerializeToXmlFile (std::string fileName, bool enableHistograms, bool enableProbes)
+{
+  NS_LOG_FUNCTION (this << fileName << enableHistograms << enableProbes);
+  std::ofstream os (fileName.c_str (), std::ios::out | std::ios::binary);
+  os << "<?xml version=\"1.0\" ?>\n";
+  SerializeToXmlStream (os, 0, enableHistograms, enableProbes);
+  os.close ();
+}
+
+} // namespace ns3
diff --git a/src/efm-monitor/model/efm-monitor.h b/src/efm-monitor/model/efm-monitor.h
new file mode 100644
index 000000000..23023d5bb
--- /dev/null
+++ b/src/efm-monitor/model/efm-monitor.h
@@ -0,0 +1,349 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+//
+// Copyright (c) 2009 INESC Porto
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 2 as
+// published by the Free Software Foundation;
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+// Author: Gustavo J. A. M. Carneiro  <gjc@inescporto.pt> <gjcarneiro@gmail.com>
+// Modifications by:
+//  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+//  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+//
+
+#ifndef EFM_MONITOR_H
+#define EFM_MONITOR_H
+
+#include <vector>
+#include <map>
+
+#include "ns3/ptr.h"
+#include "ns3/object.h"
+#include "ns3/efm-flow-probe.h"
+#include "ns3/efm-flow-classifier.h"
+#include "ns3/histogram.h"
+#include "ns3/nstime.h"
+#include "ns3/event-id.h"
+#include "ns3/efm-host-tag.h"
+#include "ns3/traced-callback.h"
+#include "ns3/tcp-flow-probe-tag.h"
+
+namespace ns3 {
+
+/**
+ * \defgroup efm-monitor Flow Monitor
+ * \brief  Collect and store performance data from a simulation
+ */
+
+/**
+ * \ingroup efm-monitor
+ * \brief An object that monitors and reports back packet flows observed during a simulation
+ *
+ * The EfmMonitor class is responsible for coordinating efforts
+ * regarding probes, and collects end-to-end flow statistics.
+ *
+ */
+class EfmMonitor : public Object
+{
+public:
+  /// \brief Structure that represents the measured metrics of an individual packet flow
+  struct EfmFlowStats
+  {
+    /// Contains the absolute time when the first packet in the flow
+    /// was transmitted, i.e. the time when the flow transmission
+    /// starts
+    Time timeFirstTxPacket;
+
+    /// Contains the absolute time when the first packet in the flow
+    /// was received by an end node, i.e. the time when the flow
+    /// reception starts
+    Time timeFirstRxPacket;
+
+    /// Contains the absolute time when the last packet in the flow
+    /// was transmitted, i.e. the time when the flow transmission
+    /// ends
+    Time timeLastTxPacket;
+
+    /// Contains the absolute time when the last packet in the flow
+    /// was received, i.e. the time when the flow reception ends
+    Time timeLastRxPacket;
+
+    /// Contains the sum of all end-to-end delays for all received
+    /// packets of the flow.
+    Time delaySum; // delayCount == rxPackets
+
+    /// Contains the sum of all end-to-end delay jitter (delay
+    /// variation) values for all received packets of the flow.  Here
+    /// we define _jitter_ of a packet as the delay variation
+    /// relatively to the last packet of the stream,
+    /// i.e. \f$Jitter\left\{P_N\right\} = \left|Delay\left\{P_N\right\} - Delay\left\{P_{N-1}\right\}\right|\f$.
+    /// This definition is in accordance with the Type-P-One-way-ipdv
+    /// as defined in IETF \RFC{3393}.
+    Time jitterSum; // jitterCount == rxPackets - 1
+
+    /// Contains the last measured delay of a packet
+    /// It is stored to measure the packet's Jitter
+    Time lastDelay;
+
+    /// Total number of transmitted bytes for the flow
+    uint64_t txBytes;
+    /// Total number of received bytes for the flow
+    uint64_t rxBytes;
+    /// Total number of transmitted packets for the flow
+    uint32_t txPackets;
+    /// Total number of received packets for the flow
+    uint32_t rxPackets;
+
+    /// Total number of packets that are assumed to be lost,
+    /// i.e. those that were transmitted but have not been reportedly
+    /// received or forwarded for a long time.  By default, packets
+    /// missing for a period of over 10 seconds are assumed to be
+    /// lost, although this value can be easily configured in runtime
+    uint32_t lostPackets;
+
+    /// Contains the number of times a packet has been reportedly
+    /// forwarded, summed for all received packets in the flow
+    uint32_t timesForwarded;
+
+    /// Histogram of the packet delays
+    Histogram delayHistogram;
+    /// Histogram of the packet jitters
+    Histogram jitterHistogram;
+    /// Histogram of the packet sizes
+    Histogram packetSizeHistogram;
+
+    /// This attribute also tracks the number of lost packets and
+    /// bytes, but discriminates the losses by a _reason code_.  This
+    /// reason code is usually an enumeration defined by the concrete
+    /// EfmFlowProbe class, and for each reason code there may be a
+    /// vector entry indexed by that code and whose value is the
+    /// number of packets or bytes lost due to this reason.  For
+    /// instance, in the Ipv4EfmFlowProbe case the following reasons are
+    /// currently defined: DROP_NO_ROUTE (no IPv4 route found for a
+    /// packet), DROP_TTL_EXPIRE (a packet was dropped due to an IPv4
+    /// TTL field decremented and reaching zero), and
+    /// DROP_BAD_CHECKSUM (a packet had bad IPv4 header checksum and
+    /// had to be dropped).
+    std::vector<uint32_t> packetsDropped; // packetsDropped[reasonCode] => number of dropped packets
+
+    /// This attribute also tracks the number of lost bytes.  See also
+    /// comment in attribute packetsDropped.
+    std::vector<uint64_t> bytesDropped; // bytesDropped[reasonCode] => number of dropped bytes
+    Histogram flowInterruptionsHistogram; //!< histogram of durations of flow interruptions
+  };
+
+  // --- basic methods ---
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId ();
+  virtual TypeId GetInstanceTypeId () const;
+  EfmMonitor ();
+
+  /// Add a EfmFlowClassifier to be used by the flow monitor.
+  /// \param classifier the EfmFlowClassifier
+  void AddFlowClassifier (Ptr<EfmFlowClassifier> classifier);
+
+  /// Set the time, counting from the current time, from which to start monitoring flows.
+  /// This method overwrites any previous calls to Start()
+  /// \param time delta time to start
+  void Start (const Time &time);
+  /// Set the time, counting from the current time, from which to stop monitoring flows.
+  /// This method overwrites any previous calls to Stop()
+  /// \param time delta time to stop
+  void Stop (const Time &time);
+  /// Begin monitoring flows *right now*
+  void StartRightNow ();
+  /// End monitoring flows *right now*
+  void StopRightNow ();
+
+  // --- methods to be used by the EfmMonitorProbe's only ---
+  /// Register a new EfmFlowProbe that will begin monitoring and report
+  /// events to this monitor.  This method is normally only used by
+  /// EfmFlowProbe implementations.
+  /// \param probe the probe to add
+  void AddProbe (Ptr<EfmFlowProbe> probe);
+
+  /// EfmFlowProbe implementations are supposed to call this method to
+  /// report that a new packet was transmitted (but keep in mind the
+  /// distinction between a new packet entering the system and a
+  /// packet that is already known and is only being forwarded).
+  /// \param probe the reporting probe
+  /// \param flowId flow identification
+  /// \param packetId Packet ID
+  /// \param packetSize packet size
+  void ReportFirstTx (Ptr<EfmFlowProbe> probe, EfmFlowId flowId, EfmFlowPacketId packetId,
+                      uint32_t packetSize, uint32_t pathId);
+  /// EfmFlowProbe implementations are supposed to call this method to
+  /// report that a known packet without EFM bits is being forwarded.
+  /// \param probe the reporting probe
+  /// \param flowId flow identification
+  /// \param packetId Packet ID
+  /// \param packetSize packet size
+  void ReportForwarding (Ptr<EfmFlowProbe> probe, EfmFlowId flowId, EfmFlowPacketId packetId,
+                         EfmPathId pathId, uint32_t packetSize);
+
+  /// EfmFlowProbe implementations are supposed to call this method instead of \c ReportForwarding()
+  /// to report that a known packet containing EFM bits is being forwarded.
+  /// \param probe the reporting probe
+  /// \param flowId flow identification
+  /// \param packetId Packet ID
+  /// \param packetSize packet size
+  /// \param efmTag the packets EFM host tag containing the different EFM bits
+  void ReportForwardingEFM (Ptr<EfmFlowProbe> probe, EfmFlowId flowId, EfmFlowPacketId packetId,
+                            EfmPathId pathId, uint32_t packetSize, EfmHostTag &efmTag);
+
+  void ReportForwardingTCP (Ptr<EfmFlowProbe> probe, EfmFlowId flowId, EfmFlowPacketId packetId,
+                            EfmPathId pathId, uint32_t packetSize, TcpFlowProbeTag &tcpTag);
+
+  /// EfmFlowProbe implementations are supposed to call this method to
+  /// report that a known packet is being received.
+  /// \param probe the reporting probe
+  /// \param flowId flow identification
+  /// \param packetId Packet ID
+  /// \param packetSize packet size
+  void ReportLastRx (Ptr<EfmFlowProbe> probe, EfmFlowId flowId, EfmFlowPacketId packetId,
+                     uint32_t packetSize, uint32_t pathId);
+  /// EfmFlowProbe implementations are supposed to call this method to
+  /// report that a known packet is being dropped due to some reason.
+  /// \param probe the reporting probe
+  /// \param flowId flow identification
+  /// \param packetId Packet ID
+  /// \param packetSize packet size
+  /// \param reasonCode drop reason code
+  void ReportDrop (Ptr<EfmFlowProbe> probe, EfmFlowId flowId, EfmFlowPacketId packetId,
+                   uint32_t packetSize, uint32_t reasonCode);
+
+  /// Check right now for packets that appear to be lost
+  void CheckForLostPackets ();
+
+  /// Check right now for packets that appear to be lost, considering
+  /// packets as lost if not seen in the network for a time larger
+  /// than maxDelay
+  /// \param maxDelay the max delay for a packet
+  void CheckForLostPackets (Time maxDelay);
+
+  /// Used by the flow probes to obtain the flow id for the reverse flow
+  /// @param flowId flow id of the forward flow
+  /// @param revFlowId output param for the reverse flow id if it exists
+  /// @return true, if the reverse flow exists, false otherwise
+  bool GetRevFlowId (EfmFlowId flowId, EfmFlowId &revFlowId);
+
+  Time GetDartReportingInterval () const;
+
+  // --- methods to get the results ---
+
+  /// Container: FlowId, EfmFlowStats
+  typedef std::map<EfmFlowId, EfmFlowStats> EfmFlowStatsContainer;
+  /// Container Iterator: FlowId, FlowStats
+  typedef std::map<EfmFlowId, EfmFlowStats>::iterator EfmFlowStatsContainerI;
+  /// Container Const Iterator: FlowId, FlowStats
+  typedef std::map<EfmFlowId, EfmFlowStats>::const_iterator EfmFlowStatsContainerCI;
+  /// Container: EfmFlowProbe
+  typedef std::vector<Ptr<EfmFlowProbe>> EfmFlowProbeContainer;
+  /// Container Iterator: EfmFlowProbe
+  typedef std::vector<Ptr<EfmFlowProbe>>::iterator EfmFlowProbeContainerI;
+  /// Container Const Iterator: EfmFlowProbe
+  typedef std::vector<Ptr<EfmFlowProbe>>::const_iterator EfmFlowProbeContainerCI;
+
+  /// Retrieve all collected the flow statistics.  Note, if the
+  /// EfmMonitor has not stopped monitoring yet, you should call
+  /// CheckForLostPackets() to make sure all possibly lost packets are
+  /// accounted for.
+  /// \returns the flows statistics
+  const EfmFlowStatsContainer &GetFlowStats () const;
+
+  /// Get a list of all EfmFlowProbe's associated with this EfmMonitor
+  /// \returns a list of all the probes
+  const EfmFlowProbeContainer &GetAllProbes () const;
+
+  /// Serializes the results to an std::ostream in XML format
+  /// \param os the output stream
+  /// \param indent number of spaces to use as base indentation level
+  /// \param enableHistograms if true, include also the histograms in the output
+  /// \param enableProbes if true, include also the per-probe/flow pair statistics in the output
+  void SerializeToXmlStream (std::ostream &os, uint16_t indent, bool enableHistograms,
+                             bool enableProbes);
+
+  /// Same as SerializeToXmlStream, but returns the output as a std::string
+  /// \param indent number of spaces to use as base indentation level
+  /// \param enableHistograms if true, include also the histograms in the output
+  /// \param enableProbes if true, include also the per-probe/flow pair statistics in the output
+  /// \return the XML output as string
+  std::string SerializeToXmlString (uint16_t indent, bool enableHistograms, bool enableProbes);
+
+  /// Same as SerializeToXmlStream, but writes to a file instead
+  /// \param fileName name or path of the output file that will be created
+  /// \param enableHistograms if true, include also the histograms in the output
+  /// \param enableProbes if true, include also the per-probe/flow pair statistics in the output
+  void SerializeToXmlFile (std::string fileName, bool enableHistograms, bool enableProbes);
+
+  std::list<Ptr<EfmFlowClassifier>>
+  GetFlowClassifiers ()
+  {
+    return m_classifiers;
+  }
+
+  typedef void (*EfmMonitorProbeCreationTracedCallback) (const Ptr<EfmFlowProbe> probe);
+
+protected:
+  virtual void NotifyConstructionCompleted ();
+  virtual void DoDispose (void);
+
+private:
+  /// Structure to represent a single tracked packet data
+  struct EfmTrackedPacket
+  {
+    Time firstSeenTime; //!< absolute time when the packet was first seen by a probe
+    Time lastSeenTime; //!< absolute time when the packet was last seen by a probe
+    uint32_t timesForwarded; //!< number of times the packet was reportedly forwarded
+  };
+
+  /// FlowId --> EfmFlowStats
+  EfmFlowStatsContainer m_flowStats;
+
+  /// (FlowId,PacketId) --> TrackedPacket
+  typedef std::map<std::pair<EfmFlowId, EfmFlowPacketId>, EfmTrackedPacket> EfmTrackedPacketMap;
+  EfmTrackedPacketMap m_trackedPackets; //!< Tracked packets
+  Time m_maxPerHopDelay; //!< Minimum per-hop delay
+  EfmFlowProbeContainer m_flowProbes; //!< all the EfmFlowProbes
+
+  // note: this is needed only for serialization
+  std::list<Ptr<EfmFlowClassifier>> m_classifiers; //!< the EfmFlowClassifiers
+
+  EventId m_startEvent; //!< Start event
+  EventId m_stopEvent; //!< Stop event
+  bool m_enabled; //!< FlowMon is enabled
+  double m_delayBinWidth; //!< Delay bin width (for histograms)
+  double m_jitterBinWidth; //!< Jitter bin width (for histograms)
+  double m_packetSizeBinWidth; //!< packet size bin width (for histograms)
+  double m_flowInterruptionsBinWidth; //!< Flow interruptions bin width (for histograms)
+  Time m_flowInterruptionsMinTime; //!< Flow interruptions minimum time
+
+  Time m_dartReportingInterval; //!< DART reporting interval
+
+  TracedCallback<const Ptr<EfmFlowProbe>> m_probeCreationTrace;
+
+  /// Get the stats for a given flow
+  /// \param flowId the Flow identification
+  /// \returns the stats of the flow
+  EfmFlowStats &GetStatsForFlow (EfmFlowId flowId);
+
+  /// Periodic function to check for lost packets and prune statistics
+  void PeriodicCheckForLostPackets ();
+};
+
+} // namespace ns3
+
+#endif /* FLOW_MONITOR_H */
diff --git a/src/efm-monitor/model/ipv4-efm-flow-classifier.cc b/src/efm-monitor/model/ipv4-efm-flow-classifier.cc
new file mode 100644
index 000000000..9516dbc88
--- /dev/null
+++ b/src/efm-monitor/model/ipv4-efm-flow-classifier.cc
@@ -0,0 +1,353 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+//
+// Copyright (c) 2009 INESC Porto
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 2 as
+// published by the Free Software Foundation;
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+// Author: Gustavo J. A. M. Carneiro  <gjc@inescporto.pt> <gjcarneiro@gmail.com>
+// Modifications by:
+//  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+//  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+//
+
+#include "ns3/packet.h"
+
+#include "ipv4-efm-flow-classifier.h"
+#include "ns3/udp-header.h"
+#include "ns3/tcp-header.h"
+#include <algorithm>
+
+namespace ns3 {
+
+/* see http://www.iana.org/assignments/protocol-numbers */
+const uint8_t TCP_PROT_NUMBER = 6; //!< TCP Protocol number
+const uint8_t UDP_PROT_NUMBER = 17; //!< UDP Protocol number
+
+bool
+operator<(const Ipv4EfmFlowClassifier::FiveTuple &t1, const Ipv4EfmFlowClassifier::FiveTuple &t2)
+{
+  if (t1.sourceAddress < t2.sourceAddress)
+    {
+      return true;
+    }
+  if (t1.sourceAddress != t2.sourceAddress)
+    {
+      return false;
+    }
+
+  if (t1.destinationAddress < t2.destinationAddress)
+    {
+      return true;
+    }
+  if (t1.destinationAddress != t2.destinationAddress)
+    {
+      return false;
+    }
+
+  if (t1.protocol < t2.protocol)
+    {
+      return true;
+    }
+  if (t1.protocol != t2.protocol)
+    {
+      return false;
+    }
+
+  if (t1.sourcePort < t2.sourcePort)
+    {
+      return true;
+    }
+  if (t1.sourcePort != t2.sourcePort)
+    {
+      return false;
+    }
+
+  if (t1.destinationPort < t2.destinationPort)
+    {
+      return true;
+    }
+  if (t1.destinationPort != t2.destinationPort)
+    {
+      return false;
+    }
+
+  return false;
+}
+
+bool
+operator== (const Ipv4EfmFlowClassifier::FiveTuple &t1, const Ipv4EfmFlowClassifier::FiveTuple &t2)
+{
+  return (t1.sourceAddress == t2.sourceAddress && t1.destinationAddress == t2.destinationAddress &&
+          t1.protocol == t2.protocol && t1.sourcePort == t2.sourcePort &&
+          t1.destinationPort == t2.destinationPort);
+}
+
+bool
+operator< (const Ipv4EfmFlowClassifier::Ipv4Pair &t1, const Ipv4EfmFlowClassifier::Ipv4Pair &t2)
+{
+  if (t1.sourceNet < t2.sourceNet)
+    {
+      return true;
+    }
+  if (t1.sourceNet != t2.sourceNet)
+    {
+      return false;
+    }
+  if (t1.destinationNet < t2.destinationNet)
+    {
+      return true;
+    }
+  if (t1.destinationNet != t2.destinationNet)
+    {
+      return false;
+    }
+  return false;
+}
+
+bool
+operator== (const Ipv4EfmFlowClassifier::Ipv4Pair &t1, const Ipv4EfmFlowClassifier::Ipv4Pair &t2)
+{
+  return (t1.sourceNet == t2.sourceNet && t1.destinationNet == t2.destinationNet);
+}
+
+Ipv4EfmFlowClassifier::Ipv4EfmFlowClassifier (uint8_t pathPrefixLength, PathMatching pathMatching)
+    : EfmFlowClassifier (pathPrefixLength, pathMatching)
+{
+  if (pathPrefixLength > 32)
+    {
+      NS_FATAL_ERROR ("Path prefix length must be <= 32");
+    }
+
+  if (pathPrefixLength == 0)
+    m_netmask = Ipv4Mask (0u);
+  else
+    m_netmask = Ipv4Mask (0xffffffff << (32 - pathPrefixLength));
+}
+
+bool
+Ipv4EfmFlowClassifier::Classify (const Ipv4Header &ipHeader, Ptr<const Packet> ipPayload,
+                                 uint32_t &out_flowId, uint32_t &out_packetId, uint32_t &out_pathId)
+{
+  if (ipHeader.GetFragmentOffset () > 0)
+    {
+      // Ignore fragments: they don't carry a valid L4 header
+      return false;
+    }
+
+  if ((ipHeader.GetProtocol () != UDP_PROT_NUMBER) && (ipHeader.GetProtocol () != TCP_PROT_NUMBER))
+    {
+      return false;
+    }
+
+  if (ipPayload->GetSize () < 4)
+    {
+      // the packet doesn't carry enough bytes
+      return false;
+    }
+
+  FiveTuple tuple;
+  tuple.sourceAddress = ipHeader.GetSource ();
+  tuple.destinationAddress = ipHeader.GetDestination ();
+  tuple.protocol = ipHeader.GetProtocol ();
+
+  // we rely on the fact that for both TCP and UDP the ports are
+  // carried in the first 4 octects.
+  // This allows to read the ports even on fragmented packets
+  // not carrying a full TCP or UDP header.
+
+  uint8_t data[4];
+  ipPayload->CopyData (data, 4);
+
+  uint16_t srcPort = 0;
+  srcPort |= data[0];
+  srcPort <<= 8;
+  srcPort |= data[1];
+
+  uint16_t dstPort = 0;
+  dstPort |= data[2];
+  dstPort <<= 8;
+  dstPort |= data[3];
+
+  tuple.sourcePort = srcPort;
+  tuple.destinationPort = dstPort;
+
+  // try to insert the tuple, but check if it already exists
+  std::pair<std::map<FiveTuple, EfmFlowId>::iterator, bool> insert =
+      m_flowMap.insert (std::pair<FiveTuple, EfmFlowId> (tuple, 0));
+
+  // if the insertion succeeded, we need to assign this tuple a new flow identifier
+  if (insert.second)
+    {
+      EfmFlowId newFlowId = GetNewFlowId ();
+      insert.first->second = newFlowId;
+      m_flowPktIdMap[newFlowId] = 0;
+      m_flowDscpMap[newFlowId];
+    }
+  else
+    {
+      m_flowPktIdMap[insert.first->second]++;
+    }
+
+  // increment the counter of packets with the same DSCP value
+  Ipv4Header::DscpType dscp = ipHeader.GetDscp ();
+  std::pair<std::map<Ipv4Header::DscpType, uint32_t>::iterator, bool> dscpInserter =
+      m_flowDscpMap[insert.first->second].insert (
+          std::pair<Ipv4Header::DscpType, uint32_t> (dscp, 1));
+
+  // if the insertion did not succeed, we need to increment the counter
+  if (!dscpInserter.second)
+    {
+      m_flowDscpMap[insert.first->second][dscp]++;
+    }
+
+  out_flowId = insert.first->second;
+  out_packetId = m_flowPktIdMap[out_flowId];
+
+  // Now, classify the path
+
+  // The path is identified by the first pathPrefixLength bits of either the source, the destination or both
+  Ipv4Pair ipPair;
+  if (m_pathMatching == PathMatching::SRC || m_pathMatching == PathMatching::BOTH)
+    ipPair.sourceNet = tuple.sourceAddress.CombineMask (m_netmask);
+  else
+    ipPair.sourceNet = Ipv4Address::GetZero ();
+
+  if (m_pathMatching == PathMatching::DST || m_pathMatching == PathMatching::BOTH)
+    ipPair.destinationNet = tuple.destinationAddress.CombineMask (m_netmask);
+  else
+    ipPair.destinationNet = Ipv4Address::GetZero ();
+
+  // try to insert the tuple, but check if it already exists
+  std::pair<std::map<Ipv4Pair, EfmPathId>::iterator, bool> pathInsert =
+      m_pathMap.insert (std::pair<Ipv4Pair, EfmPathId> (ipPair, 0));
+
+  // if the insertion succeeded, we need to assign this tuple a new path identifier
+  if (pathInsert.second)
+    {
+      pathInsert.first->second = GetNewPathId ();
+    }
+
+  out_pathId = pathInsert.first->second;
+
+  return true;
+}
+
+Ipv4EfmFlowClassifier::FiveTuple
+Ipv4EfmFlowClassifier::FindFlow (EfmFlowId flowId) const
+{
+  for (std::map<FiveTuple, EfmFlowId>::const_iterator iter = m_flowMap.begin ();
+       iter != m_flowMap.end (); iter++)
+    {
+      if (iter->second == flowId)
+        {
+          return iter->first;
+        }
+    }
+  NS_FATAL_ERROR ("Could not find the flow with ID " << flowId);
+  FiveTuple retval = {Ipv4Address::GetZero (), Ipv4Address::GetZero (), 0, 0, 0};
+  return retval;
+}
+
+bool
+Ipv4EfmFlowClassifier::GetRevFlowId (EfmFlowId flowId, EfmFlowId &revFlowId) const
+{
+  for (auto it = m_flowMap.begin (); it != m_flowMap.end (); it++)
+    {
+      if (it->second == flowId)
+        {
+          FiveTuple revTuple;
+          revTuple.sourceAddress = it->first.destinationAddress;
+          revTuple.destinationAddress = it->first.sourceAddress;
+          revTuple.sourcePort = it->first.destinationPort;
+          revTuple.destinationPort = it->first.sourcePort;
+          revTuple.protocol = it->first.protocol;
+
+          auto revIt = m_flowMap.find (revTuple);
+          if (revIt == m_flowMap.end ())
+            return false;
+          revFlowId = revIt->second;
+          return true;
+        }
+    }
+  return false;
+}
+
+bool
+Ipv4EfmFlowClassifier::SortByCount::operator() (std::pair<Ipv4Header::DscpType, uint32_t> left,
+                                                std::pair<Ipv4Header::DscpType, uint32_t> right)
+{
+  return left.second > right.second;
+}
+
+std::vector<std::pair<Ipv4Header::DscpType, uint32_t>>
+Ipv4EfmFlowClassifier::GetDscpCounts (EfmFlowId flowId) const
+{
+  std::map<EfmFlowId, std::map<Ipv4Header::DscpType, uint32_t>>::const_iterator flow =
+      m_flowDscpMap.find (flowId);
+
+  if (flow == m_flowDscpMap.end ())
+    {
+      NS_FATAL_ERROR ("Could not find the flow with ID " << flowId);
+    }
+
+  std::vector<std::pair<Ipv4Header::DscpType, uint32_t>> v (flow->second.begin (),
+                                                            flow->second.end ());
+  std::sort (v.begin (), v.end (), SortByCount ());
+  return v;
+}
+
+void
+Ipv4EfmFlowClassifier::SerializeToXmlStream (std::ostream &os, uint16_t indent) const
+{
+  Indent (os, indent);
+  os << "<Ipv4EfmFlowClassifier>\n";
+
+  indent += 2;
+  for (std::map<FiveTuple, EfmFlowId>::const_iterator iter = m_flowMap.begin ();
+       iter != m_flowMap.end (); iter++)
+    {
+      Indent (os, indent);
+      os << "<Flow flowId=\"" << iter->second << "\""
+         << " sourceAddress=\"" << iter->first.sourceAddress << "\""
+         << " destinationAddress=\"" << iter->first.destinationAddress << "\""
+         << " protocol=\"" << int (iter->first.protocol) << "\""
+         << " sourcePort=\"" << iter->first.sourcePort << "\""
+         << " destinationPort=\"" << iter->first.destinationPort << "\">\n";
+
+      indent += 2;
+      std::map<EfmFlowId, std::map<Ipv4Header::DscpType, uint32_t>>::const_iterator flow =
+          m_flowDscpMap.find (iter->second);
+
+      if (flow != m_flowDscpMap.end ())
+        {
+          for (std::map<Ipv4Header::DscpType, uint32_t>::const_iterator i = flow->second.begin ();
+               i != flow->second.end (); i++)
+            {
+              Indent (os, indent);
+              os << "<Dscp value=\"0x" << std::hex << static_cast<uint32_t> (i->first) << "\""
+                 << " packets=\"" << std::dec << i->second << "\" />\n";
+            }
+        }
+
+      indent -= 2;
+      Indent (os, indent);
+      os << "</Flow>\n";
+    }
+
+  indent -= 2;
+  Indent (os, indent);
+  os << "</Ipv4EfmFlowClassifier>\n";
+}
+
+} // namespace ns3
diff --git a/src/efm-monitor/model/ipv4-efm-flow-classifier.h b/src/efm-monitor/model/ipv4-efm-flow-classifier.h
new file mode 100644
index 000000000..2f3567182
--- /dev/null
+++ b/src/efm-monitor/model/ipv4-efm-flow-classifier.h
@@ -0,0 +1,178 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+//
+// Copyright (c) 2009 INESC Porto
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 2 as
+// published by the Free Software Foundation;
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+// Author: Gustavo J. A. M. Carneiro  <gjc@inescporto.pt> <gjcarneiro@gmail.com>
+// Modifications by:
+//  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+//  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+//
+
+#ifndef IPV4_EFM_FLOW_CLASSIFIER_H
+#define IPV4_EFM_FLOW_CLASSIFIER_H
+
+#include <stdint.h>
+#include <map>
+
+#include "ns3/ipv4-header.h"
+#include "ns3/efm-flow-classifier.h"
+
+namespace ns3 {
+
+class Packet;
+
+/// Classifies packets by looking at their IP and TCP/UDP headers.
+/// From these packet headers, a tuple (source-ip, destination-ip,
+/// protocol, source-port, destination-port) is created, and a unique
+/// flow identifier is assigned for each different tuple combination
+class Ipv4EfmFlowClassifier : public EfmFlowClassifier
+{
+public:
+  /// Structure to classify a packet
+  struct FiveTuple
+  {
+    Ipv4Address sourceAddress; //!< Source address
+    Ipv4Address destinationAddress; //!< Destination address
+    uint8_t protocol; //!< Protocol
+    uint16_t sourcePort; //!< Source port
+    uint16_t destinationPort; //!< Destination port
+  };
+
+  /// Structure to classify a path
+  struct Ipv4Pair
+  {
+    Ipv4Address sourceNet; //!< Source network address
+    Ipv4Address destinationNet; //!< Destination network address
+  };
+
+  Ipv4EfmFlowClassifier (uint8_t pathPrefixLength, PathMatching pathMatching);
+
+  /// \brief try to classify the packet into flow-id, packet-id and path-id
+  ///
+  /// \warning: it must be called only once per packet, from SendOutgoingLogger.
+  ///
+  /// \return true if the packet was classified, false if not (i.e. it
+  /// does not appear to be part of a flow).
+  /// \param ipHeader packet's IP header
+  /// \param ipPayload packet's IP payload
+  /// \param out_flowId packet's FlowId
+  /// \param out_packetId packet's identifier
+  /// \param out_pathId packet's path identifier
+  bool Classify (const Ipv4Header &ipHeader, Ptr<const Packet> ipPayload, uint32_t &out_flowId,
+                 uint32_t &out_packetId, uint32_t &out_pathId);
+
+  /// Searches for the FiveTuple corresponding to the given flowId
+  /// \param flowId the FlowId to search for
+  /// \returns the FiveTuple corresponding to flowId
+  FiveTuple FindFlow (EfmFlowId flowId) const;
+
+  bool GetRevFlowId (EfmFlowId flowId, EfmFlowId &revFlowId) const;
+
+  /// Comparator used to sort the vector of DSCP values
+  class SortByCount
+  {
+  public:
+    /// Comparator function
+    /// \param left left operand
+    /// \param right right operand
+    /// \return true if left DSCP is greater than right DSCP
+    bool operator() (std::pair<Ipv4Header::DscpType, uint32_t> left,
+                     std::pair<Ipv4Header::DscpType, uint32_t> right);
+  };
+
+  /// \brief get the DSCP values of the packets belonging to the flow with the
+  /// given FlowId, sorted in decreasing order of number of packets seen with
+  /// that DSCP value
+  /// \param flowId the identifier of the flow of interest
+  /// \returns the vector of DSCP values
+  std::vector<std::pair<Ipv4Header::DscpType, uint32_t>> GetDscpCounts (EfmFlowId flowId) const;
+
+  virtual void SerializeToXmlStream (std::ostream &os, uint16_t indent) const;
+
+  std::map<FiveTuple, EfmFlowId>
+  GetFlowMap ()
+  {
+    return m_flowMap;
+  }
+
+  std::map<Ipv4Pair, EfmPathId>
+  GetPathMap ()
+  {
+    return m_pathMap;
+  }
+
+  Ipv4Mask
+  GetPathNetmask ()
+  {
+    return m_netmask;
+  }
+
+private:
+  /// Map to Flows Identifiers to FlowIds
+  std::map<FiveTuple, EfmFlowId> m_flowMap;
+  /// Map to FlowIds to FlowPacketId
+  std::map<EfmFlowId, EfmFlowPacketId> m_flowPktIdMap;
+  /// Map FlowIds to (DSCP value, packet count) pairs
+  std::map<EfmFlowId, std::map<Ipv4Header::DscpType, uint32_t>> m_flowDscpMap;
+  /// Maps Ipv4Pair to PathId
+  std::map<Ipv4Pair, EfmPathId> m_pathMap;
+
+  Ipv4Mask m_netmask;
+};
+
+/**
+ * \brief Less than operator.
+ *
+ * \param t1 the first operand
+ * \param t2 the first operand
+ * \returns true if the operands are equal
+ */
+bool operator<(const Ipv4EfmFlowClassifier::FiveTuple &t1,
+               const Ipv4EfmFlowClassifier::FiveTuple &t2);
+
+/**
+ * \brief Equal to operator.
+ *
+ * \param t1 the first operand
+ * \param t2 the first operand
+ * \returns true if the operands are equal
+ */
+bool operator== (const Ipv4EfmFlowClassifier::FiveTuple &t1,
+                 const Ipv4EfmFlowClassifier::FiveTuple &t2);
+
+/**
+ * \brief Less than operator.
+ *
+ * \param t1 the first operand
+ * \param t2 the first operand
+ * \returns true if the operands are equal
+ */
+bool operator< (const Ipv4EfmFlowClassifier::Ipv4Pair &t1,
+                const Ipv4EfmFlowClassifier::Ipv4Pair &t2);
+
+/**
+ * \brief Equal to operator.
+ *
+ * \param t1 the first operand
+ * \param t2 the first operand
+ * \returns true if the operands are equal
+ */
+bool operator== (const Ipv4EfmFlowClassifier::Ipv4Pair &t1,
+                 const Ipv4EfmFlowClassifier::Ipv4Pair &t2);
+
+} // namespace ns3
+
+#endif /* IPV4_FLOW_CLASSIFIER_H */
diff --git a/src/efm-monitor/model/ipv4-efm-flow-probe.cc b/src/efm-monitor/model/ipv4-efm-flow-probe.cc
new file mode 100644
index 000000000..0e609f2c0
--- /dev/null
+++ b/src/efm-monitor/model/ipv4-efm-flow-probe.cc
@@ -0,0 +1,633 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+//
+// Copyright (c) 2009 INESC Porto
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 2 as
+// published by the Free Software Foundation;
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+// Author: Gustavo J. A. M. Carneiro  <gjc@inescporto.pt> <gjcarneiro@gmail.com>
+// Modifications by:
+//  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+//  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+//
+
+#include "ns3/ipv4-efm-flow-probe.h"
+#include "ns3/ipv4-efm-flow-classifier.h"
+#include "ns3/tcp-flow-probe-tag.h"
+#include "ns3/node.h"
+#include "ns3/packet.h"
+#include "ns3/efm-monitor.h"
+#include "ns3/log.h"
+#include "ns3/pointer.h"
+#include "ns3/config.h"
+#include "ns3/flow-id-tag.h"
+#include "ns3/efm-host-tag.h"
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("Ipv4EfmFlowProbe");
+
+/* see http://www.iana.org/assignments/protocol-numbers */
+const uint8_t TCP_PROT_NUMBER = 6; //!< TCP Protocol number
+const uint8_t UDP_PROT_NUMBER = 17; //!< UDP Protocol number
+
+//////////////////////////////////////
+// Ipv4EfmFlowProbeTag class implementation //
+//////////////////////////////////////
+
+/**
+ * \ingroup efm-monitor
+ *
+ * \brief Tag used to allow a fast identification of the packet
+ *
+ * This tag is added by EfmMonitor when a packet is seen for
+ * the first time, and it is then used to classify the packet in
+ * the following hops.
+ */
+class Ipv4EfmFlowProbeTag : public Tag
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+  virtual TypeId GetInstanceTypeId (void) const;
+  virtual uint32_t GetSerializedSize (void) const;
+  virtual void Serialize (TagBuffer buf) const;
+  virtual void Deserialize (TagBuffer buf);
+  virtual void Print (std::ostream &os) const;
+  Ipv4EfmFlowProbeTag ();
+  /**
+   * \brief Consructor
+   * \param flowId the flow identifier
+   * \param packetId the packet identifier
+   * \param packetSize the packet size
+   * \param src packet source address
+   * \param dst packet destination address
+   */
+  Ipv4EfmFlowProbeTag (uint32_t flowId, uint32_t packetId, uint32_t packetSize, uint32_t pathId,
+                       Ipv4Address src, Ipv4Address dst);
+  /**
+   * \brief Set the flow identifier
+   * \param flowId the flow identifier
+   */
+  void SetFlowId (uint32_t flowId);
+  /**
+   * \brief Set the packet identifier
+   * \param packetId the packet identifier
+   */
+  void SetPacketId (uint32_t packetId);
+  /**
+   * \brief Set the packet size
+   * \param packetSize the packet size
+   */
+  void SetPacketSize (uint32_t packetSize);
+  /**
+   * \brief Set the path identifier
+   * \param pathId the path identifier
+   */
+  void SetPathId (uint32_t pathId);
+  /**
+   * \brief Get the flow identifier
+   * \returns the flow identifier
+   */
+  uint32_t GetFlowId (void) const;
+  /**
+   * \brief Get the packet identifier
+   * \returns the packet identifier
+   */
+  uint32_t GetPacketId (void) const;
+  /**
+   * \brief Get the packet size
+   * \returns the packet size
+   */
+  uint32_t GetPacketSize (void) const;
+  /**
+   * \brief Get the path identifier
+   * \returns the path identifier
+  */
+  uint32_t GetPathId (void) const;
+  /**
+   * \brief Checks if the addresses stored in tag are matching
+   * the arguments.
+   *
+   * This check is important for IP over IP encapsulation.
+   *
+   * \param src Source address.
+   * \param dst Destination address.
+   * \returns True if the addresses are matching.
+   */
+  bool IsSrcDstValid (Ipv4Address src, Ipv4Address dst) const;
+
+private:
+  uint32_t m_flowId; //!< flow identifier
+  uint32_t m_packetId; //!< packet identifier
+  uint32_t m_packetSize; //!< packet size
+  uint32_t m_pathId; //!< path identifier
+  Ipv4Address m_src; //!< IP source
+  Ipv4Address m_dst; //!< IP destination
+};
+
+TypeId
+Ipv4EfmFlowProbeTag::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::Ipv4EfmFlowProbeTag")
+                          .SetParent<Tag> ()
+                          .SetGroupName ("EfmMonitor")
+                          .AddConstructor<Ipv4EfmFlowProbeTag> ();
+  return tid;
+}
+TypeId
+Ipv4EfmFlowProbeTag::GetInstanceTypeId (void) const
+{
+  return GetTypeId ();
+}
+uint32_t
+Ipv4EfmFlowProbeTag::GetSerializedSize (void) const
+{
+  return 4 + 4 + 4 + 4 + 8;
+}
+void
+Ipv4EfmFlowProbeTag::Serialize (TagBuffer buf) const
+{
+  buf.WriteU32 (m_flowId);
+  buf.WriteU32 (m_packetId);
+  buf.WriteU32 (m_packetSize);
+  buf.WriteU32 (m_pathId);
+
+  uint8_t tBuf[4];
+  m_src.Serialize (tBuf);
+  buf.Write (tBuf, 4);
+  m_dst.Serialize (tBuf);
+  buf.Write (tBuf, 4);
+}
+void
+Ipv4EfmFlowProbeTag::Deserialize (TagBuffer buf)
+{
+  m_flowId = buf.ReadU32 ();
+  m_packetId = buf.ReadU32 ();
+  m_packetSize = buf.ReadU32 ();
+  m_pathId = buf.ReadU32 ();
+
+  uint8_t tBuf[4];
+  buf.Read (tBuf, 4);
+  m_src = Ipv4Address::Deserialize (tBuf);
+  buf.Read (tBuf, 4);
+  m_dst = Ipv4Address::Deserialize (tBuf);
+}
+void
+Ipv4EfmFlowProbeTag::Print (std::ostream &os) const
+{
+  os << "FlowId=" << m_flowId;
+  os << " PacketId=" << m_packetId;
+  os << " PacketSize=" << m_packetSize;
+  os << " PathId=" << m_pathId;
+}
+Ipv4EfmFlowProbeTag::Ipv4EfmFlowProbeTag () : Tag ()
+{
+}
+
+Ipv4EfmFlowProbeTag::Ipv4EfmFlowProbeTag (uint32_t flowId, uint32_t packetId, uint32_t packetSize,
+                                          uint32_t pathId, Ipv4Address src, Ipv4Address dst)
+    : Tag (),
+      m_flowId (flowId),
+      m_packetId (packetId),
+      m_packetSize (packetSize),
+      m_pathId (pathId),
+      m_src (src),
+      m_dst (dst)
+{
+}
+
+void
+Ipv4EfmFlowProbeTag::SetFlowId (uint32_t id)
+{
+  m_flowId = id;
+}
+void
+Ipv4EfmFlowProbeTag::SetPacketId (uint32_t id)
+{
+  m_packetId = id;
+}
+void
+Ipv4EfmFlowProbeTag::SetPacketSize (uint32_t size)
+{
+  m_packetSize = size;
+}
+void
+Ipv4EfmFlowProbeTag::SetPathId (uint32_t pathId)
+{
+  m_pathId = pathId;
+}
+uint32_t
+Ipv4EfmFlowProbeTag::GetFlowId (void) const
+{
+  return m_flowId;
+}
+uint32_t
+Ipv4EfmFlowProbeTag::GetPacketId (void) const
+{
+  return m_packetId;
+}
+uint32_t
+Ipv4EfmFlowProbeTag::GetPacketSize (void) const
+{
+  return m_packetSize;
+}
+uint32_t
+Ipv4EfmFlowProbeTag::GetPathId (void) const
+{
+  return m_pathId;
+}
+bool
+Ipv4EfmFlowProbeTag::IsSrcDstValid (Ipv4Address src, Ipv4Address dst) const
+{
+  return ((m_src == src) && (m_dst == dst));
+}
+
+////////////////////////////////////////
+// Ipv4EfmFlowProbe class implementation //
+////////////////////////////////////////
+
+Ipv4EfmFlowProbe::Ipv4EfmFlowProbe (Ptr<EfmMonitor> monitor, Ptr<Ipv4EfmFlowClassifier> classifier,
+                                    Ptr<Node> node)
+    : EfmFlowProbe (monitor, node), m_classifier (classifier)
+{
+  NS_LOG_FUNCTION (this << node->GetId ());
+
+  m_ipv4 = node->GetObject<Ipv4L3Protocol> ();
+
+  if (!m_ipv4->TraceConnectWithoutContext (
+          "SendOutgoing",
+          MakeCallback (&Ipv4EfmFlowProbe::SendOutgoingLogger, Ptr<Ipv4EfmFlowProbe> (this))))
+    {
+      NS_FATAL_ERROR ("trace fail");
+    }
+  if (!m_ipv4->TraceConnectWithoutContext (
+          "UnicastForward",
+          MakeCallback (&Ipv4EfmFlowProbe::ForwardLogger, Ptr<Ipv4EfmFlowProbe> (this))))
+    {
+      NS_FATAL_ERROR ("trace fail");
+    }
+  if (!m_ipv4->TraceConnectWithoutContext (
+          "LocalDeliver",
+          MakeCallback (&Ipv4EfmFlowProbe::ForwardUpLogger, Ptr<Ipv4EfmFlowProbe> (this))))
+    {
+      NS_FATAL_ERROR ("trace fail");
+    }
+
+  if (!m_ipv4->TraceConnectWithoutContext (
+          "Drop", MakeCallback (&Ipv4EfmFlowProbe::DropLogger, Ptr<Ipv4EfmFlowProbe> (this))))
+    {
+      NS_FATAL_ERROR ("trace fail");
+    }
+
+  std::ostringstream qd;
+  qd << "/NodeList/" << node->GetId () << "/$ns3::TrafficControlLayer/RootQueueDiscList/*/Drop";
+  Config::ConnectWithoutContextFailSafe (
+      qd.str (),
+      MakeCallback (&Ipv4EfmFlowProbe::QueueDiscDropLogger, Ptr<Ipv4EfmFlowProbe> (this)));
+
+  // code copied from point-to-point-helper.cc
+  std::ostringstream oss;
+  oss << "/NodeList/" << node->GetId () << "/DeviceList/*/TxQueue/Drop";
+  Config::ConnectWithoutContextFailSafe (
+      oss.str (), MakeCallback (&Ipv4EfmFlowProbe::QueueDropLogger, Ptr<Ipv4EfmFlowProbe> (this)));
+}
+
+Ipv4EfmFlowProbe::~Ipv4EfmFlowProbe ()
+{
+}
+
+/* static */
+TypeId
+Ipv4EfmFlowProbe::GetTypeId (void)
+{
+  static TypeId tid =
+      TypeId ("ns3::Ipv4EfmFlowProbe").SetParent<EfmFlowProbe> ().SetGroupName ("EfmMonitor")
+      // No AddConstructor because this class has no default constructor.
+      ;
+
+  return tid;
+}
+
+void
+Ipv4EfmFlowProbe::DoDispose ()
+{
+  m_ipv4 = 0;
+  m_classifier = 0;
+  EfmFlowProbe::DoDispose ();
+}
+
+void
+Ipv4EfmFlowProbe::SendOutgoingLogger (const Ipv4Header &ipHeader, Ptr<const Packet> ipPayload,
+                                      uint32_t interface)
+{
+  if (!m_ipv4->IsUnicast (ipHeader.GetDestination ()))
+    {
+      // we are not prepared to handle broadcast yet
+      return;
+    }
+
+  Ipv4EfmFlowProbeTag fTag;
+  bool found = ipPayload->FindFirstMatchingByteTag (fTag);
+  if (found)
+    {
+      return;
+    }
+
+  EfmFlowId flowId;
+  EfmFlowPacketId packetId;
+  EfmPathId pathId;
+  if (m_classifier->Classify (ipHeader, ipPayload, flowId, packetId, pathId))
+    {
+      uint32_t size = (ipPayload->GetSize () + ipHeader.GetSerializedSize ());
+      NS_LOG_DEBUG ("ReportFirstTx (" << this << ", " << flowId << ", " << packetId << ", " << size
+                                      << "); " << ipHeader << *ipPayload);
+      m_efmMonitor->ReportFirstTx (this, flowId, packetId, size, pathId);
+      // tag the packet with the flow id and packet id, so that the packet can be identified even
+      // when Ipv4Header is not accessible at some non-IPv4 protocol layer
+      Ipv4EfmFlowProbeTag fTag (flowId, packetId, size, pathId, ipHeader.GetSource (),
+                                ipHeader.GetDestination ());
+      ipPayload->AddByteTag (fTag);
+    }
+
+  if (ipHeader.GetProtocol () == TCP_PROT_NUMBER)
+    {
+      // Add TCP flow probe tag
+
+      // The first 14 bytes of the TCP header contain the source port, destination port, sequence and acknowledgement numbers, the data offset and the control flags.
+      uint8_t data[14];
+      ipPayload->CopyData (data, 14);
+      uint32_t seq = 0;
+      seq = (data[4] << 24) | (data[5] << 16) | (data[6] << 8) | data[7];
+      uint32_t ack = 0;
+      ack = (data[8] << 24) | (data[9] << 16) | (data[10] << 8) | data[11];
+      uint8_t offset = (data[12] & 0xf0) >> 4;
+      uint16_t payloadSize = ipPayload->GetSize () - (offset * 4);
+      uint8_t flags = data[13];
+      TcpFlowProbeTag tcpTag (seq, ack, payloadSize, flags);
+      ipPayload->AddPacketTag (tcpTag);
+    }
+}
+
+void
+Ipv4EfmFlowProbe::ForwardLogger (const Ipv4Header &ipHeader, Ptr<const Packet> ipPayload,
+                                 uint32_t interface)
+{
+  Ipv4EfmFlowProbeTag fTag;
+  bool found = ipPayload->FindFirstMatchingByteTag (fTag);
+
+  if (found)
+    {
+      if (!ipHeader.IsLastFragment ()) //|| ipHeader.GetFragmentOffset () != 0
+        {
+          EfmHostTag efmTag;
+          bool foundEFM = ipPayload->PeekPacketTag (efmTag);
+          if (foundEFM)
+            {
+              NS_LOG_WARN ("Not counting fragmented packets, seq " << efmTag.GetSeq ());
+            }
+          else
+            {
+              NS_LOG_WARN ("Not counting fragmented packets");
+            }
+          return;
+        }
+      if (!fTag.IsSrcDstValid (ipHeader.GetSource (), ipHeader.GetDestination ()))
+        {
+          NS_LOG_LOGIC ("Not reporting encapsulated packet");
+          return;
+        }
+
+      EfmFlowId flowId = fTag.GetFlowId ();
+      EfmFlowPacketId packetId = fTag.GetPacketId ();
+      EfmPathId pathId = fTag.GetPathId ();
+
+      uint32_t size = (ipPayload->GetSize () + ipHeader.GetSerializedSize ());
+
+      EfmHostTag efmTag;
+      bool foundEFM = ipPayload->PeekPacketTag (efmTag);
+
+      if (foundEFM)
+        {
+          NS_LOG_DEBUG ("ReportForwardingEFM (" << this << ", " << flowId << ", " << packetId
+                                                << ", " << size << ", " << efmTag.GetSpinBit ()
+                                                << ");");
+          m_efmMonitor->ReportForwardingEFM (this, flowId, packetId, pathId, size, efmTag);
+
+          TcpFlowProbeTag tcpTag;
+          if (ipPayload->PeekPacketTag (tcpTag))
+            {
+              NS_LOG_DEBUG ("ReportForwardingTCP (" << this << ", " << flowId << ", " << packetId
+                                                    << ", " << size << ", " << tcpTag.GetSeq ()
+                                                    << ", " << tcpTag.GetAckSeq () << ", "
+                                                    << tcpTag.GetPayloadSize () << ");");
+              m_efmMonitor->ReportForwardingTCP (this, flowId, packetId, pathId, size, tcpTag);
+            }
+        }
+      else
+        {
+          NS_LOG_DEBUG ("ReportForwarding (" << this << ", " << flowId << ", " << packetId << ", "
+                                             << size << ");");
+          m_efmMonitor->ReportForwarding (this, flowId, packetId, pathId, size);
+        }
+
+      // bool reportedEFM (false);
+
+      // // Check for QUIC Header
+      // // UDP follows
+      // if (ipHeader.GetProtocol() == 17) {
+
+      //   // Assume that QUIC follows in there
+      //   Ptr<Packet> payloadcopy = ipPayload->Copy();
+
+      //   UdpHeader udpHeader;
+      //   payloadcopy->RemoveHeader(udpHeader);
+
+      //   QuicHeader quicheader;
+      //   payloadcopy->RemoveHeader(quicheader);
+
+      //   if (quicheader.IsShort() == 1) {
+      //     //std::cout << "QUIC Spin Bit: " << quicheader.GetSpinBit() << std::endl;
+      //     NS_LOG_DEBUG ("ReportForwardingEFM ("<<this<<", "<<flowId<<", "<<packetId<<", "<<size<<", "<<quicheader.GetSpinBit()<<");");
+      //     // TODO
+      //     m_efmMonitor ->ReportForwardingEFM(this, flowId, packetId, size, quicheader.GetSpinBit(), quicheader.GetLBit(), quicheader.GetQBit(), quicheader.GetRBit(), quicheader.GetTBit());
+      //     reportedEFM = true;
+      //   }
+      //   //if (quicheader.IsShort()){
+      //   //  std::cout << "SHORT" << std::endl;
+      //   //}
+      //   //if (quicheader.IsLong()){
+      //   //  std::cout << "LONG" << std::endl;
+      //   //}
+      //   //std::cout << std::to_string(quicheader.GetFormat()) << std::endl;
+
+      //   // Call ReportForwarding only if ReportForwardingEFM has not been called to avoid duplicate tracking
+
+      // }
+
+      //   if (!reportedEFM){
+      //     NS_LOG_DEBUG ("ReportForwarding ("<<this<<", "<<flowId<<", "<<packetId<<", "<<size<<");");
+      //     m_efmMonitor->ReportForwarding (this, flowId, packetId, size);
+      //   }
+
+      //std::cout << ipPayload->PeekHeader() << std::endl;
+
+      //std::cout << ipPayload->ToString() << std::endl;
+    }
+}
+
+void
+Ipv4EfmFlowProbe::ForwardUpLogger (const Ipv4Header &ipHeader, Ptr<const Packet> ipPayload,
+                                   uint32_t interface)
+{
+  Ipv4EfmFlowProbeTag fTag;
+  bool found = ipPayload->FindFirstMatchingByteTag (fTag);
+
+  if (found)
+    {
+      if (!fTag.IsSrcDstValid (ipHeader.GetSource (), ipHeader.GetDestination ()))
+        {
+          NS_LOG_LOGIC ("Not reporting encapsulated packet");
+          return;
+        }
+
+      EfmFlowId flowId = fTag.GetFlowId ();
+      EfmFlowPacketId packetId = fTag.GetPacketId ();
+      EfmPathId pathId = fTag.GetPathId ();
+
+      uint32_t size = (ipPayload->GetSize () + ipHeader.GetSerializedSize ());
+      NS_LOG_DEBUG ("ReportLastRx (" << this << ", " << flowId << ", " << packetId << ", " << size
+                                     << "); " << ipHeader << *ipPayload);
+      m_efmMonitor->ReportLastRx (this, flowId, packetId, size, pathId);
+    }
+}
+
+void
+Ipv4EfmFlowProbe::DropLogger (const Ipv4Header &ipHeader, Ptr<const Packet> ipPayload,
+                              Ipv4L3Protocol::DropReason reason, Ptr<Ipv4> ipv4, uint32_t ifIndex)
+{
+#if 0
+  switch (reason)
+    {
+    case Ipv4L3Protocol::DROP_NO_ROUTE:
+      break;
+
+    case Ipv4L3Protocol::DROP_TTL_EXPIRED:
+    case Ipv4L3Protocol::DROP_BAD_CHECKSUM:
+      Ipv4Address addri = m_ipv4->GetAddress (ifIndex);
+      Ipv4Mask maski = m_ipv4->GetNetworkMask (ifIndex);
+      Ipv4Address bcast = addri.GetSubnetDirectedBroadcast (maski);
+      if (ipHeader.GetDestination () == bcast) // we don't want broadcast packets
+        {
+          return;
+        }
+    }
+#endif
+
+  Ipv4EfmFlowProbeTag fTag;
+  bool found = ipPayload->FindFirstMatchingByteTag (fTag);
+
+  if (found)
+    {
+      EfmFlowId flowId = fTag.GetFlowId ();
+      EfmFlowPacketId packetId = fTag.GetPacketId ();
+
+      uint32_t size = (ipPayload->GetSize () + ipHeader.GetSerializedSize ());
+      NS_LOG_DEBUG ("Drop (" << this << ", " << flowId << ", " << packetId << ", " << size << ", "
+                             << reason << ", destIp=" << ipHeader.GetDestination () << "); "
+                             << "HDR: " << ipHeader << " PKT: " << *ipPayload);
+
+      DropReason myReason;
+
+      switch (reason)
+        {
+        case Ipv4L3Protocol::DROP_TTL_EXPIRED:
+          myReason = DROP_TTL_EXPIRE;
+          NS_LOG_DEBUG ("DROP_TTL_EXPIRE");
+          break;
+        case Ipv4L3Protocol::DROP_NO_ROUTE:
+          myReason = DROP_NO_ROUTE;
+          NS_LOG_DEBUG ("DROP_NO_ROUTE");
+          break;
+        case Ipv4L3Protocol::DROP_BAD_CHECKSUM:
+          myReason = DROP_BAD_CHECKSUM;
+          NS_LOG_DEBUG ("DROP_BAD_CHECKSUM");
+          break;
+        case Ipv4L3Protocol::DROP_INTERFACE_DOWN:
+          myReason = DROP_INTERFACE_DOWN;
+          NS_LOG_DEBUG ("DROP_INTERFACE_DOWN");
+          break;
+        case Ipv4L3Protocol::DROP_ROUTE_ERROR:
+          myReason = DROP_ROUTE_ERROR;
+          NS_LOG_DEBUG ("DROP_ROUTE_ERROR");
+          break;
+        case Ipv4L3Protocol::DROP_FRAGMENT_TIMEOUT:
+          myReason = DROP_FRAGMENT_TIMEOUT;
+          NS_LOG_DEBUG ("DROP_FRAGMENT_TIMEOUT");
+          break;
+
+        default:
+          myReason = DROP_INVALID_REASON;
+          NS_FATAL_ERROR ("Unexpected drop reason code " << reason);
+        }
+
+      m_efmMonitor->ReportDrop (this, flowId, packetId, size, myReason);
+    }
+}
+
+void
+Ipv4EfmFlowProbe::QueueDropLogger (Ptr<const Packet> ipPayload)
+{
+  Ipv4EfmFlowProbeTag fTag;
+  bool tagFound = ipPayload->FindFirstMatchingByteTag (fTag);
+
+  if (!tagFound)
+    {
+      return;
+    }
+
+  EfmFlowId flowId = fTag.GetFlowId ();
+  EfmFlowPacketId packetId = fTag.GetPacketId ();
+  uint32_t size = fTag.GetPacketSize ();
+
+  NS_LOG_DEBUG ("Drop (" << this << ", " << flowId << ", " << packetId << ", " << size << ", "
+                         << DROP_QUEUE << "); ");
+
+  m_efmMonitor->ReportDrop (this, flowId, packetId, size, DROP_QUEUE);
+}
+
+void
+Ipv4EfmFlowProbe::QueueDiscDropLogger (Ptr<const QueueDiscItem> item)
+{
+  Ipv4EfmFlowProbeTag fTag;
+  bool tagFound = item->GetPacket ()->FindFirstMatchingByteTag (fTag);
+
+  if (!tagFound)
+    {
+      return;
+    }
+
+  EfmFlowId flowId = fTag.GetFlowId ();
+  EfmFlowPacketId packetId = fTag.GetPacketId ();
+  uint32_t size = fTag.GetPacketSize ();
+
+  NS_LOG_DEBUG ("Drop (" << this << ", " << flowId << ", " << packetId << ", " << size << ", "
+                         << DROP_QUEUE_DISC << "); ");
+
+  m_efmMonitor->ReportDrop (this, flowId, packetId, size, DROP_QUEUE_DISC);
+}
+
+} // namespace ns3
diff --git a/src/efm-monitor/model/ipv4-efm-flow-probe.h b/src/efm-monitor/model/ipv4-efm-flow-probe.h
new file mode 100644
index 000000000..bd8fc1fc4
--- /dev/null
+++ b/src/efm-monitor/model/ipv4-efm-flow-probe.h
@@ -0,0 +1,134 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+//
+// Copyright (c) 2009 INESC Porto
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 2 as
+// published by the Free Software Foundation;
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+// Author: Gustavo J. A. M. Carneiro  <gjc@inescporto.pt> <gjcarneiro@gmail.com>
+// Modifications by:
+//  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+//  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+//
+
+#ifndef IPV4_FLOW_PROBE_H
+#define IPV4_FLOW_PROBE_H
+
+#include "ns3/efm-flow-probe.h"
+#include "ns3/ipv4-efm-flow-classifier.h"
+#include "ns3/ipv4-l3-protocol.h"
+#include "ns3/udp-l4-protocol.h"
+#include "ns3/quic-header.h"
+#include "ns3/udp-header.h"
+#include "ns3/quic-l5-protocol.h"
+#include "ns3/quic-module.h"
+#include "ns3/queue-item.h"
+
+namespace ns3 {
+
+class EfmMonitor;
+class Node;
+
+/// \ingroup efm-monitor
+/// \brief Class that monitors flows at the IPv4 layer of a Node
+///
+/// For each node in the simulation, one instance of the class
+/// Ipv4EfmFlowProbe is created to monitor that node.  Ipv4EfmFlowProbe
+/// accomplishes this by connecting callbacks to trace sources in the
+/// Ipv4L3Protocol interface of the node.
+class Ipv4EfmFlowProbe : public EfmFlowProbe
+{
+
+public:
+  /// \brief Constructor
+  /// \param monitor the EfmMonitor this probe is associated with
+  /// \param classifier the Ipv4EfmFlowClassifier this probe is associated with
+  /// \param node the Node this probe is associated with
+  Ipv4EfmFlowProbe (Ptr<EfmMonitor> monitor, Ptr<Ipv4EfmFlowClassifier> classifier, Ptr<Node> node);
+  virtual ~Ipv4EfmFlowProbe ();
+
+  /// Register this type.
+  /// \return The TypeId.
+  static TypeId GetTypeId (void);
+
+  /// \brief enumeration of possible reasons why a packet may be dropped
+  enum DropReason {
+    /// Packet dropped due to missing route to the destination
+    DROP_NO_ROUTE = 0,
+
+    /// Packet dropped due to TTL decremented to zero during IPv4 forwarding
+    DROP_TTL_EXPIRE,
+
+    /// Packet dropped due to invalid checksum in the IPv4 header
+    DROP_BAD_CHECKSUM,
+
+    /// Packet dropped due to queue overflow.  Note: only works for
+    /// NetDevices that provide a TxQueue attribute of type Queue
+    /// with a Drop trace source.  It currently works with Csma and
+    /// PointToPoint devices, but not with WiFi or WiMax.
+    DROP_QUEUE,
+
+    /// Packet dropped by the queue disc
+    DROP_QUEUE_DISC,
+
+    DROP_INTERFACE_DOWN, /**< Interface is down so can not send packet */
+    DROP_ROUTE_ERROR, /**< Route error */
+    DROP_FRAGMENT_TIMEOUT, /**< Fragment timeout exceeded */
+
+    DROP_INVALID_REASON, /**< Fallback reason (no known reason) */
+  };
+
+protected:
+  virtual void DoDispose (void);
+
+private:
+  /// Log a packet being sent
+  /// \param ipHeader IP header
+  /// \param ipPayload IP payload
+  /// \param interface outgoing interface
+  void SendOutgoingLogger (const Ipv4Header &ipHeader, Ptr<const Packet> ipPayload,
+                           uint32_t interface);
+  /// Log a packet being forwarded
+  /// \param ipHeader IP header
+  /// \param ipPayload IP payload
+  /// \param interface incoming interface
+  void ForwardLogger (const Ipv4Header &ipHeader, Ptr<const Packet> ipPayload, uint32_t interface);
+  /// Log a packet being received by the destination
+  /// \param ipHeader IP header
+  /// \param ipPayload IP payload
+  /// \param interface incoming interface
+  void ForwardUpLogger (const Ipv4Header &ipHeader, Ptr<const Packet> ipPayload,
+                        uint32_t interface);
+  /// Log a packet being dropped
+  /// \param ipHeader IP header
+  /// \param ipPayload IP payload
+  /// \param reason drop reason
+  /// \param ipv4 pointer to the IP object dropping the packet
+  /// \param ifIndex interface index
+  void DropLogger (const Ipv4Header &ipHeader, Ptr<const Packet> ipPayload,
+                   Ipv4L3Protocol::DropReason reason, Ptr<Ipv4> ipv4, uint32_t ifIndex);
+  /// Log a packet being dropped by a queue
+  /// \param ipPayload IP payload
+  void QueueDropLogger (Ptr<const Packet> ipPayload);
+  /// Log a packet being dropped by a queue disc
+  /// \param item queue disc item
+  void QueueDiscDropLogger (Ptr<const QueueDiscItem> item);
+
+  Ptr<Ipv4EfmFlowClassifier>
+      m_classifier; //!< the Ipv4EfmFlowClassifier this probe is associated with
+  Ptr<Ipv4L3Protocol> m_ipv4; //!< the Ipv4L3Protocol this probe is bound to
+};
+
+} // namespace ns3
+
+#endif /* IPV4_FLOW_PROBE_H */
diff --git a/src/efm-monitor/model/ipv6-efm-flow-classifier.cc b/src/efm-monitor/model/ipv6-efm-flow-classifier.cc
new file mode 100644
index 000000000..80f386348
--- /dev/null
+++ b/src/efm-monitor/model/ipv6-efm-flow-classifier.cc
@@ -0,0 +1,333 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+//
+// Copyright (c) 2009 INESC Porto
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 2 as
+// published by the Free Software Foundation;
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+// Author: Gustavo J. A. M. Carneiro  <gjc@inescporto.pt> <gjcarneiro@gmail.com>
+// Modifications: Tommaso Pecorella <tommaso.pecorella@unifi.it>
+// Modifications by:
+//  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+//  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+//
+
+#include "ns3/packet.h"
+
+#include "ipv6-efm-flow-classifier.h"
+#include "ns3/udp-header.h"
+#include "ns3/tcp-header.h"
+#include <algorithm>
+
+namespace ns3 {
+
+/* see http://www.iana.org/assignments/protocol-numbers */
+const uint8_t TCP_PROT_NUMBER = 6; //!< TCP Protocol number
+const uint8_t UDP_PROT_NUMBER = 17; //!< UDP Protocol number
+
+bool
+operator<(const Ipv6EfmFlowClassifier::FiveTuple &t1, const Ipv6EfmFlowClassifier::FiveTuple &t2)
+{
+  if (t1.sourceAddress < t2.sourceAddress)
+    {
+      return true;
+    }
+  if (t1.sourceAddress != t2.sourceAddress)
+    {
+      return false;
+    }
+
+  if (t1.destinationAddress < t2.destinationAddress)
+    {
+      return true;
+    }
+  if (t1.destinationAddress != t2.destinationAddress)
+    {
+      return false;
+    }
+
+  if (t1.protocol < t2.protocol)
+    {
+      return true;
+    }
+  if (t1.protocol != t2.protocol)
+    {
+      return false;
+    }
+
+  if (t1.sourcePort < t2.sourcePort)
+    {
+      return true;
+    }
+  if (t1.sourcePort != t2.sourcePort)
+    {
+      return false;
+    }
+
+  if (t1.destinationPort < t2.destinationPort)
+    {
+      return true;
+    }
+  if (t1.destinationPort != t2.destinationPort)
+    {
+      return false;
+    }
+
+  return false;
+}
+
+bool
+operator== (const Ipv6EfmFlowClassifier::FiveTuple &t1, const Ipv6EfmFlowClassifier::FiveTuple &t2)
+{
+  return (t1.sourceAddress == t2.sourceAddress && t1.destinationAddress == t2.destinationAddress &&
+          t1.protocol == t2.protocol && t1.sourcePort == t2.sourcePort &&
+          t1.destinationPort == t2.destinationPort);
+}
+
+Ipv6EfmFlowClassifier::Ipv6EfmFlowClassifier (uint8_t pathPrefixLength, PathMatching pathMatching)
+    : EfmFlowClassifier (pathPrefixLength, pathMatching)
+{
+  if (pathPrefixLength > 128)
+    {
+      NS_FATAL_ERROR ("Path prefix length must be <= 128");
+    }
+}
+
+bool
+operator< (const Ipv6EfmFlowClassifier::Ipv6Pair &t1, const Ipv6EfmFlowClassifier::Ipv6Pair &t2)
+{
+  if (t1.sourceNet < t2.sourceNet)
+    {
+      return true;
+    }
+  if (t1.sourceNet != t2.sourceNet)
+    {
+      return false;
+    }
+  if (t1.destinationNet < t2.destinationNet)
+    {
+      return true;
+    }
+  if (t1.destinationNet != t2.destinationNet)
+    {
+      return false;
+    }
+  return false;
+}
+
+bool
+operator== (const Ipv6EfmFlowClassifier::Ipv6Pair &t1, const Ipv6EfmFlowClassifier::Ipv6Pair &t2)
+{
+  return (t1.sourceNet == t2.sourceNet && t1.destinationNet == t2.destinationNet);
+}
+
+bool
+Ipv6EfmFlowClassifier::Classify (const Ipv6Header &ipHeader, Ptr<const Packet> ipPayload,
+                                 uint32_t &out_flowId, uint32_t &out_packetId, uint32_t &out_pathId)
+{
+  if (ipHeader.GetDestination ().IsMulticast ())
+    {
+      // we are not prepared to handle multicast yet
+      return false;
+    }
+
+  FiveTuple tuple;
+  tuple.sourceAddress = ipHeader.GetSource ();
+  tuple.destinationAddress = ipHeader.GetDestination ();
+  tuple.protocol = ipHeader.GetNextHeader ();
+
+  if ((tuple.protocol != UDP_PROT_NUMBER) && (tuple.protocol != TCP_PROT_NUMBER))
+    {
+      return false;
+    }
+
+  if (ipPayload->GetSize () < 4)
+    {
+      // the packet doesn't carry enough bytes
+      return false;
+    }
+
+  // we rely on the fact that for both TCP and UDP the ports are
+  // carried in the first 4 octects.
+  // This allows to read the ports even on fragmented packets
+  // not carrying a full TCP or UDP header.
+
+  uint8_t data[4];
+  ipPayload->CopyData (data, 4);
+
+  uint16_t srcPort = 0;
+  srcPort |= data[0];
+  srcPort <<= 8;
+  srcPort |= data[1];
+
+  uint16_t dstPort = 0;
+  dstPort |= data[2];
+  dstPort <<= 8;
+  dstPort |= data[3];
+
+  tuple.sourcePort = srcPort;
+  tuple.destinationPort = dstPort;
+
+  // try to insert the tuple, but check if it already exists
+  std::pair<std::map<FiveTuple, EfmFlowId>::iterator, bool> insert =
+      m_flowMap.insert (std::pair<FiveTuple, EfmFlowId> (tuple, 0));
+
+  // if the insertion succeeded, we need to assign this tuple a new flow identifier
+  if (insert.second)
+    {
+      EfmFlowId newFlowId = GetNewFlowId ();
+      insert.first->second = newFlowId;
+      m_flowPktIdMap[newFlowId] = 0;
+      m_flowDscpMap[newFlowId];
+    }
+  else
+    {
+      m_flowPktIdMap[insert.first->second]++;
+    }
+
+  // increment the counter of packets with the same DSCP value
+  Ipv6Header::DscpType dscp = ipHeader.GetDscp ();
+  std::pair<std::map<Ipv6Header::DscpType, uint32_t>::iterator, bool> dscpInserter =
+      m_flowDscpMap[insert.first->second].insert (
+          std::pair<Ipv6Header::DscpType, uint32_t> (dscp, 1));
+
+  // if the insertion did not succeed, we need to increment the counter
+  if (!dscpInserter.second)
+    {
+      m_flowDscpMap[insert.first->second][dscp]++;
+    }
+
+  out_flowId = insert.first->second;
+  out_packetId = m_flowPktIdMap[out_flowId];
+
+  // Now, classify the path
+
+  // The path is identified by the first pathPrefixLength bits of either the source, the destination or both
+  Ipv6Pair ipPair;
+  if (m_pathMatching == PathMatching::SRC || m_pathMatching == PathMatching::BOTH)
+    ipPair.sourceNet = tuple.sourceAddress.CombinePrefix (Ipv6Prefix (m_pathPrefixLength));
+  else
+    ipPair.sourceNet = Ipv6Address::GetZero ();
+
+  if (m_pathMatching == PathMatching::DST || m_pathMatching == PathMatching::BOTH)
+    ipPair.destinationNet =
+        tuple.destinationAddress.CombinePrefix (Ipv6Prefix (m_pathPrefixLength));
+  else
+    ipPair.destinationNet = Ipv6Address::GetZero ();
+
+  // try to insert the tuple, but check if it already exists
+  std::pair<std::map<Ipv6Pair, EfmPathId>::iterator, bool> pathInsert =
+      m_pathMap.insert (std::pair<Ipv6Pair, EfmPathId> (ipPair, 0));
+
+  // if the insertion succeeded, we need to assign this tuple a new path identifier
+  if (pathInsert.second)
+    {
+      pathInsert.first->second = GetNewPathId ();
+    }
+
+  out_pathId = pathInsert.first->second;
+
+  return true;
+}
+
+Ipv6EfmFlowClassifier::FiveTuple
+Ipv6EfmFlowClassifier::FindFlow (EfmFlowId flowId) const
+{
+  for (std::map<FiveTuple, EfmFlowId>::const_iterator iter = m_flowMap.begin ();
+       iter != m_flowMap.end (); iter++)
+    {
+      if (iter->second == flowId)
+        {
+          return iter->first;
+        }
+    }
+  NS_FATAL_ERROR ("Could not find the flow with ID " << flowId);
+  FiveTuple retval = {Ipv6Address::GetZero (), Ipv6Address::GetZero (), 0, 0, 0};
+  return retval;
+}
+
+bool
+Ipv6EfmFlowClassifier::GetRevFlowId (EfmFlowId flowId, EfmFlowId &revFlowId) const
+{
+  //TODO: Implement
+  return false;
+}
+
+bool
+Ipv6EfmFlowClassifier::SortByCount::operator() (std::pair<Ipv6Header::DscpType, uint32_t> left,
+                                                std::pair<Ipv6Header::DscpType, uint32_t> right)
+{
+  return left.second > right.second;
+}
+
+std::vector<std::pair<Ipv6Header::DscpType, uint32_t>>
+Ipv6EfmFlowClassifier::GetDscpCounts (EfmFlowId flowId) const
+{
+  std::map<EfmFlowId, std::map<Ipv6Header::DscpType, uint32_t>>::const_iterator flow =
+      m_flowDscpMap.find (flowId);
+
+  if (flow == m_flowDscpMap.end ())
+    {
+      NS_FATAL_ERROR ("Could not find the flow with ID " << flowId);
+    }
+
+  std::vector<std::pair<Ipv6Header::DscpType, uint32_t>> v (flow->second.begin (),
+                                                            flow->second.end ());
+  std::sort (v.begin (), v.end (), SortByCount ());
+  return v;
+}
+
+void
+Ipv6EfmFlowClassifier::SerializeToXmlStream (std::ostream &os, uint16_t indent) const
+{
+  Indent (os, indent);
+  os << "<Ipv6EfmFlowClassifier>\n";
+
+  indent += 2;
+  for (std::map<FiveTuple, EfmFlowId>::const_iterator iter = m_flowMap.begin ();
+       iter != m_flowMap.end (); iter++)
+    {
+      Indent (os, indent);
+      os << "<Flow flowId=\"" << iter->second << "\""
+         << " sourceAddress=\"" << iter->first.sourceAddress << "\""
+         << " destinationAddress=\"" << iter->first.destinationAddress << "\""
+         << " protocol=\"" << int (iter->first.protocol) << "\""
+         << " sourcePort=\"" << iter->first.sourcePort << "\""
+         << " destinationPort=\"" << iter->first.destinationPort << "\">\n";
+
+      indent += 2;
+      std::map<EfmFlowId, std::map<Ipv6Header::DscpType, uint32_t>>::const_iterator flow =
+          m_flowDscpMap.find (iter->second);
+
+      if (flow != m_flowDscpMap.end ())
+        {
+          for (std::map<Ipv6Header::DscpType, uint32_t>::const_iterator i = flow->second.begin ();
+               i != flow->second.end (); i++)
+            {
+              Indent (os, indent);
+              os << "<Dscp value=\"0x" << std::hex << static_cast<uint32_t> (i->first) << "\""
+                 << " packets=\"" << std::dec << i->second << "\" />\n";
+            }
+        }
+
+      indent -= 2;
+      Indent (os, indent);
+      os << "</Flow>\n";
+    }
+
+  indent -= 2;
+  Indent (os, indent);
+  os << "</Ipv6EfmFlowClassifier>\n";
+}
+
+} // namespace ns3
diff --git a/src/efm-monitor/model/ipv6-efm-flow-classifier.h b/src/efm-monitor/model/ipv6-efm-flow-classifier.h
new file mode 100644
index 000000000..2f0863d81
--- /dev/null
+++ b/src/efm-monitor/model/ipv6-efm-flow-classifier.h
@@ -0,0 +1,157 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+//
+// Copyright (c) 2009 INESC Porto
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 2 as
+// published by the Free Software Foundation;
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+// Author: Gustavo J. A. M. Carneiro  <gjc@inescporto.pt> <gjcarneiro@gmail.com>
+// Modifications: Tommaso Pecorella <tommaso.pecorella@unifi.it>
+// Modifications by:
+//  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+//  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+//
+
+#ifndef IPV6_FLOW_CLASSIFIER_H
+#define IPV6_FLOW_CLASSIFIER_H
+
+#include <stdint.h>
+#include <map>
+
+#include "ns3/ipv6-header.h"
+#include "ns3/efm-flow-classifier.h"
+
+namespace ns3 {
+
+class Packet;
+
+/// Classifies packets by looking at their IP and TCP/UDP headers.
+/// From these packet headers, a tuple (source-ip, destination-ip,
+/// protocol, source-port, destination-port) is created, and a unique
+/// flow identifier is assigned for each different tuple combination
+class Ipv6EfmFlowClassifier : public EfmFlowClassifier
+{
+public:
+  /// Structure to classify a packet
+  struct FiveTuple
+  {
+    Ipv6Address sourceAddress; //!< Source address
+    Ipv6Address destinationAddress; //!< Destination address
+    uint8_t protocol; //!< Protocol
+    uint16_t sourcePort; //!< Source port
+    uint16_t destinationPort; //!< Destination port
+  };
+
+  struct Ipv6Pair
+  {
+    Ipv6Address sourceNet; //!< Source network address
+    Ipv6Address destinationNet; //!< Destination network address
+  };
+
+  Ipv6EfmFlowClassifier (uint8_t pathPrefixLength, PathMatching pathMatching);
+
+  /// \brief try to classify the packet into flow-id and packet-id
+  ///
+  /// \warning: it must be called only once per packet, from SendOutgoingLogger.
+  ///
+  /// \return true if the packet was classified, false if not (i.e. it
+  /// does not appear to be part of a flow).
+  /// \param ipHeader packet's IP header
+  /// \param ipPayload packet's IP payload
+  /// \param out_flowId packet's EfmFlowId
+  /// \param out_packetId packet's identifier
+  bool Classify (const Ipv6Header &ipHeader, Ptr<const Packet> ipPayload, uint32_t &out_flowId,
+                 uint32_t &out_packetId, uint32_t &out_pathId);
+
+  /// Searches for the FiveTuple corresponding to the given flowId
+  /// \param flowId the EfmFlowId to search for
+  /// \returns the FiveTuple corresponding to flowId
+  FiveTuple FindFlow (EfmFlowId flowId) const;
+
+  bool GetRevFlowId (EfmFlowId flowId, EfmFlowId &revFlowId) const;
+
+  /// Comparator used to sort the vector of DSCP values
+  class SortByCount
+  {
+  public:
+    /// Comparator function
+    /// \param left left operand
+    /// \param right right operand
+    /// \return true if left DSCP is greater than right DSCP
+    bool operator() (std::pair<Ipv6Header::DscpType, uint32_t> left,
+                     std::pair<Ipv6Header::DscpType, uint32_t> right);
+  };
+
+  /// \brief get the DSCP values of the packets belonging to the flow with the
+  /// given EfmFlowId, sorted in decreasing order of number of packets seen with
+  /// that DSCP value
+  /// \param flowId the identifier of the flow of interest
+  /// \returns the vector of DSCP values
+  std::vector<std::pair<Ipv6Header::DscpType, uint32_t>> GetDscpCounts (EfmFlowId flowId) const;
+
+  virtual void SerializeToXmlStream (std::ostream &os, uint16_t indent) const;
+
+private:
+  /// Map to Flows Identifiers to EfmFlowIds
+  std::map<FiveTuple, EfmFlowId> m_flowMap;
+  /// Map to EfmFlowIds to FlowPacketId
+  std::map<EfmFlowId, EfmFlowPacketId> m_flowPktIdMap;
+  /// Map EfmFlowIds to (DSCP value, packet count) pairs
+  std::map<EfmFlowId, std::map<Ipv6Header::DscpType, uint32_t>> m_flowDscpMap;
+  /// Maps Ipv6Pair to PathId
+  std::map<Ipv6Pair, EfmPathId> m_pathMap;
+};
+
+/**
+ * \brief Less than operator.
+ *
+ * \param t1 the first operand
+ * \param t2 the first operand
+ * \returns true if the operands are equal
+ */
+bool operator<(const Ipv6EfmFlowClassifier::FiveTuple &t1,
+               const Ipv6EfmFlowClassifier::FiveTuple &t2);
+
+/**
+ * \brief Equal to operator.
+ *
+ * \param t1 the first operand
+ * \param t2 the first operand
+ * \returns true if the operands are equal
+ */
+bool operator== (const Ipv6EfmFlowClassifier::FiveTuple &t1,
+                 const Ipv6EfmFlowClassifier::FiveTuple &t2);
+
+/**
+ * \brief Less than operator.
+ *
+ * \param t1 the first operand
+ * \param t2 the first operand
+ * \returns true if the operands are equal
+ */
+bool operator< (const Ipv6EfmFlowClassifier::Ipv6Pair &t1,
+                const Ipv6EfmFlowClassifier::Ipv6Pair &t2);
+
+/**
+ * \brief Equal to operator.
+ *
+ * \param t1 the first operand
+ * \param t2 the first operand
+ * \returns true if the operands are equal
+ */
+bool operator== (const Ipv6EfmFlowClassifier::Ipv6Pair &t1,
+                 const Ipv6EfmFlowClassifier::Ipv6Pair &t2);
+
+} // namespace ns3
+
+#endif /* IPV6_FLOW_CLASSIFIER_H */
diff --git a/src/efm-monitor/model/ipv6-efm-flow-probe.cc b/src/efm-monitor/model/ipv6-efm-flow-probe.cc
new file mode 100644
index 000000000..90aabe5a8
--- /dev/null
+++ b/src/efm-monitor/model/ipv6-efm-flow-probe.cc
@@ -0,0 +1,471 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+//
+// Copyright (c) 2009 INESC Porto
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 2 as
+// published by the Free Software Foundation;
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+// Author: Gustavo J. A. M. Carneiro  <gjc@inescporto.pt> <gjcarneiro@gmail.com>
+// Modifications: Tommaso Pecorella <tommaso.pecorella@unifi.it>
+// Modifications by:
+//  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+//  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+//
+
+#include "ns3/ipv6-efm-flow-probe.h"
+#include "ns3/ipv6-efm-flow-classifier.h"
+#include "ns3/node.h"
+#include "ns3/packet.h"
+#include "ns3/efm-monitor.h"
+#include "ns3/log.h"
+#include "ns3/pointer.h"
+#include "ns3/config.h"
+#include "ns3/flow-id-tag.h"
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("Ipv6EfmFlowProbe");
+
+//////////////////////////////////////
+// Ipv6EfmFlowProbeTag class implementation //
+//////////////////////////////////////
+
+/**
+ * \ingroup efm-monitor
+ *
+ * \brief Tag used to allow a fast identification of the packet
+ *
+ * This tag is added by EfmMonitor when a packet is seen for
+ * the first time, and it is then used to classify the packet in
+ * the following hops.
+ */
+class Ipv6EfmFlowProbeTag : public Tag
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+  virtual TypeId GetInstanceTypeId (void) const;
+  virtual uint32_t GetSerializedSize (void) const;
+  virtual void Serialize (TagBuffer buf) const;
+  virtual void Deserialize (TagBuffer buf);
+  virtual void Print (std::ostream &os) const;
+  Ipv6EfmFlowProbeTag ();
+  /**
+   * \brief Consructor
+   * \param flowId the flow identifier
+   * \param packetId the packet identifier
+   * \param packetSize the packet size
+   */
+  Ipv6EfmFlowProbeTag (uint32_t flowId, uint32_t packetId, uint32_t packetSize, uint32_t pathId);
+  /**
+   * \brief Set the flow identifier
+   * \param flowId the flow identifier
+   */
+  void SetFlowId (uint32_t flowId);
+  /**
+   * \brief Set the packet identifier
+   * \param packetId the packet identifier
+   */
+  void SetPacketId (uint32_t packetId);
+  /**
+   * \brief Set the packet size
+   * \param packetSize the packet size
+   */
+  void SetPacketSize (uint32_t packetSize);
+  /**
+   * \brief Set the path identifier
+   * \param pathId the path identifier
+   */
+  void SetPathId (uint32_t pathId);
+  /**
+   * \brief Set the flow identifier
+   * \returns the flow identifier
+   */
+  uint32_t GetFlowId (void) const;
+  /**
+   * \brief Set the packet identifier
+   * \returns the packet identifier
+   */
+  uint32_t GetPacketId (void) const;
+  /**
+   * \brief Get the packet size
+   * \returns the packet size
+   */
+  uint32_t GetPacketSize (void) const;
+  /**
+   * \brief Get the path identifier
+   * \returns the path identifier
+  */
+  uint32_t GetPathId (void) const;
+
+private:
+  uint32_t m_flowId; //!< flow identifier
+  uint32_t m_packetId; //!< packet identifier
+  uint32_t m_packetSize; //!< packet size
+  uint32_t m_pathId; //!< path identifier
+};
+
+TypeId
+Ipv6EfmFlowProbeTag::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::Ipv6EfmFlowProbeTag")
+                          .SetParent<Tag> ()
+                          .SetGroupName ("EfmMonitor")
+                          .AddConstructor<Ipv6EfmFlowProbeTag> ();
+  return tid;
+}
+TypeId
+Ipv6EfmFlowProbeTag::GetInstanceTypeId (void) const
+{
+  return GetTypeId ();
+}
+uint32_t
+Ipv6EfmFlowProbeTag::GetSerializedSize (void) const
+{
+  return 4 + 4 + 4 + 4;
+}
+void
+Ipv6EfmFlowProbeTag::Serialize (TagBuffer buf) const
+{
+  buf.WriteU32 (m_flowId);
+  buf.WriteU32 (m_packetId);
+  buf.WriteU32 (m_packetSize);
+  buf.WriteU32 (m_pathId);
+}
+void
+Ipv6EfmFlowProbeTag::Deserialize (TagBuffer buf)
+{
+  m_flowId = buf.ReadU32 ();
+  m_packetId = buf.ReadU32 ();
+  m_packetSize = buf.ReadU32 ();
+  m_pathId = buf.ReadU32 ();
+}
+void
+Ipv6EfmFlowProbeTag::Print (std::ostream &os) const
+{
+  os << "EfmFlowId=" << m_flowId;
+  os << "PacketId=" << m_packetId;
+  os << "PacketSize=" << m_packetSize;
+  os << "PathId=" << m_pathId;
+}
+Ipv6EfmFlowProbeTag::Ipv6EfmFlowProbeTag () : Tag ()
+{
+}
+
+Ipv6EfmFlowProbeTag::Ipv6EfmFlowProbeTag (uint32_t flowId, uint32_t packetId, uint32_t packetSize,
+                                          uint32_t pathId)
+    : Tag (), m_flowId (flowId), m_packetId (packetId), m_packetSize (packetSize), m_pathId (pathId)
+{
+}
+
+void
+Ipv6EfmFlowProbeTag::SetFlowId (uint32_t id)
+{
+  m_flowId = id;
+}
+void
+Ipv6EfmFlowProbeTag::SetPacketId (uint32_t id)
+{
+  m_packetId = id;
+}
+void
+Ipv6EfmFlowProbeTag::SetPacketSize (uint32_t size)
+{
+  m_packetSize = size;
+}
+void
+Ipv6EfmFlowProbeTag::SetPathId (uint32_t id)
+{
+  m_pathId = id;
+}
+uint32_t
+Ipv6EfmFlowProbeTag::GetFlowId (void) const
+{
+  return m_flowId;
+}
+uint32_t
+Ipv6EfmFlowProbeTag::GetPacketId (void) const
+{
+  return m_packetId;
+}
+uint32_t
+Ipv6EfmFlowProbeTag::GetPacketSize (void) const
+{
+  return m_packetSize;
+}
+uint32_t
+Ipv6EfmFlowProbeTag::GetPathId (void) const
+{
+  return m_pathId;
+}
+
+////////////////////////////////////////
+// Ipv6EfmFlowProbe class implementation //
+////////////////////////////////////////
+
+Ipv6EfmFlowProbe::Ipv6EfmFlowProbe (Ptr<EfmMonitor> monitor, Ptr<Ipv6EfmFlowClassifier> classifier,
+                                    Ptr<Node> node)
+    : EfmFlowProbe (monitor, node), m_classifier (classifier)
+{
+  NS_LOG_FUNCTION (this << node->GetId ());
+
+  Ptr<Ipv6L3Protocol> ipv6 = node->GetObject<Ipv6L3Protocol> ();
+
+  if (!ipv6->TraceConnectWithoutContext (
+          "SendOutgoing",
+          MakeCallback (&Ipv6EfmFlowProbe::SendOutgoingLogger, Ptr<Ipv6EfmFlowProbe> (this))))
+    {
+      NS_FATAL_ERROR ("trace fail");
+    }
+  if (!ipv6->TraceConnectWithoutContext (
+          "UnicastForward",
+          MakeCallback (&Ipv6EfmFlowProbe::ForwardLogger, Ptr<Ipv6EfmFlowProbe> (this))))
+    {
+      NS_FATAL_ERROR ("trace fail");
+    }
+  if (!ipv6->TraceConnectWithoutContext (
+          "LocalDeliver",
+          MakeCallback (&Ipv6EfmFlowProbe::ForwardUpLogger, Ptr<Ipv6EfmFlowProbe> (this))))
+    {
+      NS_FATAL_ERROR ("trace fail");
+    }
+
+  if (!ipv6->TraceConnectWithoutContext (
+          "Drop", MakeCallback (&Ipv6EfmFlowProbe::DropLogger, Ptr<Ipv6EfmFlowProbe> (this))))
+    {
+      NS_FATAL_ERROR ("trace fail");
+    }
+
+  std::ostringstream qd;
+  qd << "/NodeList/" << node->GetId () << "/$ns3::TrafficControlLayer/RootQueueDiscList/*/Drop";
+  Config::ConnectWithoutContextFailSafe (
+      qd.str (),
+      MakeCallback (&Ipv6EfmFlowProbe::QueueDiscDropLogger, Ptr<Ipv6EfmFlowProbe> (this)));
+
+  // code copied from point-to-point-helper.cc
+  std::ostringstream oss;
+  oss << "/NodeList/" << node->GetId () << "/DeviceList/*/TxQueue/Drop";
+  Config::ConnectWithoutContextFailSafe (
+      oss.str (), MakeCallback (&Ipv6EfmFlowProbe::QueueDropLogger, Ptr<Ipv6EfmFlowProbe> (this)));
+}
+
+/* static */
+TypeId
+Ipv6EfmFlowProbe::GetTypeId (void)
+{
+  static TypeId tid =
+      TypeId ("ns3::Ipv6EfmFlowProbe").SetParent<EfmFlowProbe> ().SetGroupName ("EfmMonitor")
+      // No AddConstructor because this class has no default constructor.
+      ;
+
+  return tid;
+}
+
+Ipv6EfmFlowProbe::~Ipv6EfmFlowProbe ()
+{
+}
+
+void
+Ipv6EfmFlowProbe::DoDispose ()
+{
+  EfmFlowProbe::DoDispose ();
+}
+
+void
+Ipv6EfmFlowProbe::SendOutgoingLogger (const Ipv6Header &ipHeader, Ptr<const Packet> ipPayload,
+                                      uint32_t interface)
+{
+  EfmFlowId flowId;
+  EfmFlowPacketId packetId;
+  EfmPathId pathId;
+
+  if (m_classifier->Classify (ipHeader, ipPayload, flowId, packetId, pathId))
+    {
+      uint32_t size = (ipPayload->GetSize () + ipHeader.GetSerializedSize ());
+      NS_LOG_DEBUG ("ReportFirstTx (" << this << ", " << flowId << ", " << packetId << ", " << size
+                                      << "); " << ipHeader << *ipPayload);
+      m_efmMonitor->ReportFirstTx (this, flowId, packetId, size, pathId);
+
+      // tag the packet with the flow id and packet id, so that the packet can be identified even
+      // when Ipv6Header is not accessible at some non-IPv6 protocol layer
+      Ipv6EfmFlowProbeTag fTag (flowId, packetId, size, pathId);
+      ipPayload->AddByteTag (fTag);
+    }
+}
+
+void
+Ipv6EfmFlowProbe::ForwardLogger (const Ipv6Header &ipHeader, Ptr<const Packet> ipPayload,
+                                 uint32_t interface)
+{
+  Ipv6EfmFlowProbeTag fTag;
+  bool found = ipPayload->FindFirstMatchingByteTag (fTag);
+
+  if (found)
+    {
+      EfmFlowId flowId = fTag.GetFlowId ();
+      EfmFlowPacketId packetId = fTag.GetPacketId ();
+      EfmPathId pathId = fTag.GetPathId ();
+
+      uint32_t size = (ipPayload->GetSize () + ipHeader.GetSerializedSize ());
+      NS_LOG_DEBUG ("ReportForwarding (" << this << ", " << flowId << ", " << packetId << ", "
+                                         << size << ");");
+      m_efmMonitor->ReportForwarding (this, flowId, packetId, size, pathId);
+    }
+}
+
+void
+Ipv6EfmFlowProbe::ForwardUpLogger (const Ipv6Header &ipHeader, Ptr<const Packet> ipPayload,
+                                   uint32_t interface)
+{
+  Ipv6EfmFlowProbeTag fTag;
+  bool found = ipPayload->FindFirstMatchingByteTag (fTag);
+
+  if (found)
+    {
+      EfmFlowId flowId = fTag.GetFlowId ();
+      EfmFlowPacketId packetId = fTag.GetPacketId ();
+      EfmPathId pathId = fTag.GetPathId ();
+
+      uint32_t size = (ipPayload->GetSize () + ipHeader.GetSerializedSize ());
+      NS_LOG_DEBUG ("ReportLastRx (" << this << ", " << flowId << ", " << packetId << ", " << size
+                                     << ");");
+      m_efmMonitor->ReportLastRx (this, flowId, packetId, size, pathId);
+    }
+}
+
+void
+Ipv6EfmFlowProbe::DropLogger (const Ipv6Header &ipHeader, Ptr<const Packet> ipPayload,
+                              Ipv6L3Protocol::DropReason reason, Ptr<Ipv6> ipv6, uint32_t ifIndex)
+{
+#if 0
+  switch (reason)
+    {
+    case Ipv6L3Protocol::DROP_NO_ROUTE:
+      break;
+
+    case Ipv6L3Protocol::DROP_TTL_EXPIRED:
+    case Ipv6L3Protocol::DROP_BAD_CHECKSUM:
+      Ipv6Address addri = m_ipv6->GetAddress (ifIndex);
+      Ipv6Mask maski = m_ipv6->GetNetworkMask (ifIndex);
+      Ipv6Address bcast = addri.GetSubnetDirectedBroadcast (maski);
+      if (ipHeader.GetDestination () == bcast) // we don't want broadcast packets
+        {
+          return;
+        }
+    }
+#endif
+
+  Ipv6EfmFlowProbeTag fTag;
+  bool found = ipPayload->FindFirstMatchingByteTag (fTag);
+
+  if (found)
+    {
+      EfmFlowId flowId = fTag.GetFlowId ();
+      EfmFlowPacketId packetId = fTag.GetPacketId ();
+
+      uint32_t size = (ipPayload->GetSize () + ipHeader.GetSerializedSize ());
+      NS_LOG_DEBUG ("Drop (" << this << ", " << flowId << ", " << packetId << ", " << size << ", "
+                             << reason << ", destIp=" << ipHeader.GetDestination () << "); "
+                             << "HDR: " << ipHeader << " PKT: " << *ipPayload);
+
+      DropReason myReason;
+
+      switch (reason)
+        {
+        case Ipv6L3Protocol::DROP_TTL_EXPIRED:
+          myReason = DROP_TTL_EXPIRE;
+          NS_LOG_DEBUG ("DROP_TTL_EXPIRE");
+          break;
+        case Ipv6L3Protocol::DROP_NO_ROUTE:
+          myReason = DROP_NO_ROUTE;
+          NS_LOG_DEBUG ("DROP_NO_ROUTE");
+          break;
+        case Ipv6L3Protocol::DROP_INTERFACE_DOWN:
+          myReason = DROP_INTERFACE_DOWN;
+          NS_LOG_DEBUG ("DROP_INTERFACE_DOWN");
+          break;
+        case Ipv6L3Protocol::DROP_ROUTE_ERROR:
+          myReason = DROP_ROUTE_ERROR;
+          NS_LOG_DEBUG ("DROP_ROUTE_ERROR");
+          break;
+        case Ipv6L3Protocol::DROP_UNKNOWN_PROTOCOL:
+          myReason = DROP_UNKNOWN_PROTOCOL;
+          NS_LOG_DEBUG ("DROP_UNKNOWN_PROTOCOL");
+          break;
+        case Ipv6L3Protocol::DROP_UNKNOWN_OPTION:
+          myReason = DROP_UNKNOWN_OPTION;
+          NS_LOG_DEBUG ("DROP_UNKNOWN_OPTION");
+          break;
+        case Ipv6L3Protocol::DROP_MALFORMED_HEADER:
+          myReason = DROP_MALFORMED_HEADER;
+          NS_LOG_DEBUG ("DROP_MALFORMED_HEADER");
+          break;
+        case Ipv6L3Protocol::DROP_FRAGMENT_TIMEOUT:
+          myReason = DROP_FRAGMENT_TIMEOUT;
+          NS_LOG_DEBUG ("DROP_FRAGMENT_TIMEOUT");
+          break;
+        default:
+          myReason = DROP_INVALID_REASON;
+          NS_FATAL_ERROR ("Unexpected drop reason code " << reason);
+        }
+
+      m_efmMonitor->ReportDrop (this, flowId, packetId, size, myReason);
+    }
+}
+
+void
+Ipv6EfmFlowProbe::QueueDropLogger (Ptr<const Packet> ipPayload)
+{
+  Ipv6EfmFlowProbeTag fTag;
+  bool tagFound = ipPayload->FindFirstMatchingByteTag (fTag);
+
+  if (!tagFound)
+    {
+      return;
+    }
+
+  EfmFlowId flowId = fTag.GetFlowId ();
+  EfmFlowPacketId packetId = fTag.GetPacketId ();
+  uint32_t size = fTag.GetPacketSize ();
+
+  NS_LOG_DEBUG ("Drop (" << this << ", " << flowId << ", " << packetId << ", " << size << ", "
+                         << DROP_QUEUE << "); ");
+
+  m_efmMonitor->ReportDrop (this, flowId, packetId, size, DROP_QUEUE);
+}
+
+void
+Ipv6EfmFlowProbe::QueueDiscDropLogger (Ptr<const QueueDiscItem> item)
+{
+  Ipv6EfmFlowProbeTag fTag;
+  bool tagFound = item->GetPacket ()->FindFirstMatchingByteTag (fTag);
+
+  if (!tagFound)
+    {
+      return;
+    }
+
+  EfmFlowId flowId = fTag.GetFlowId ();
+  EfmFlowPacketId packetId = fTag.GetPacketId ();
+  uint32_t size = fTag.GetPacketSize ();
+
+  NS_LOG_DEBUG ("Drop (" << this << ", " << flowId << ", " << packetId << ", " << size << ", "
+                         << DROP_QUEUE_DISC << "); ");
+
+  m_efmMonitor->ReportDrop (this, flowId, packetId, size, DROP_QUEUE_DISC);
+}
+
+} // namespace ns3
diff --git a/src/efm-monitor/model/ipv6-efm-flow-probe.h b/src/efm-monitor/model/ipv6-efm-flow-probe.h
new file mode 100644
index 000000000..66df44277
--- /dev/null
+++ b/src/efm-monitor/model/ipv6-efm-flow-probe.h
@@ -0,0 +1,134 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+//
+// Copyright (c) 2009 INESC Porto
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 2 as
+// published by the Free Software Foundation;
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+// Author: Gustavo J. A. M. Carneiro  <gjc@inescporto.pt> <gjcarneiro@gmail.com>
+// Modifications: Tommaso Pecorella <tommaso.pecorella@unifi.it>
+// Modifications by:
+//  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+//  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+//
+
+#ifndef IPV6_EFM_FLOW_PROBE_H
+#define IPV6_EFM_FLOW_PROBE_H
+
+#include "ns3/efm-flow-probe.h"
+#include "ns3/ipv6-efm-flow-classifier.h"
+#include "ns3/ipv6-l3-protocol.h"
+#include "ns3/queue-item.h"
+
+namespace ns3 {
+
+class EfmMonitor;
+class Node;
+
+/// \ingroup efm-monitor
+/// \brief Class that monitors flows at the IPv6 layer of a Node
+///
+/// For each node in the simulation, one instance of the class
+/// Ipv4EfmFlowProbe is created to monitor that node.  Ipv4EfmFlowProbe
+/// accomplishes this by connecting callbacks to trace sources in the
+/// Ipv6L3Protocol interface of the node.
+class Ipv6EfmFlowProbe : public EfmFlowProbe
+{
+
+public:
+  /// \brief Constructor
+  /// \param monitor the EfmMonitor this probe is associated with
+  /// \param classifier the Ipv4FlowClassifier this probe is associated with
+  /// \param node the Node this probe is associated with
+  Ipv6EfmFlowProbe (Ptr<EfmMonitor> monitor, Ptr<Ipv6EfmFlowClassifier> classifier, Ptr<Node> node);
+  virtual ~Ipv6EfmFlowProbe ();
+
+  /// Register this type.
+  /// \return The TypeId.
+  static TypeId GetTypeId (void);
+
+  /// \brief enumeration of possible reasons why a packet may be dropped
+  enum DropReason {
+    /// Packet dropped due to missing route to the destination
+    DROP_NO_ROUTE = 0,
+
+    /// Packet dropped due to TTL decremented to zero during IPv4 forwarding
+    DROP_TTL_EXPIRE,
+
+    /// Packet dropped due to invalid checksum in the IPv4 header
+    DROP_BAD_CHECKSUM,
+
+    /// Packet dropped due to queue overflow.  Note: only works for
+    /// NetDevices that provide a TxQueue attribute of type Queue
+    /// with a Drop trace source.  It currently works with Csma and
+    /// PointToPoint devices, but not with WiFi or WiMax.
+    DROP_QUEUE,
+
+    /// Packet dropped by the queue disc
+    DROP_QUEUE_DISC,
+
+    DROP_INTERFACE_DOWN, /**< Interface is down so can not send packet */
+    DROP_ROUTE_ERROR, /**< Route error */
+
+    DROP_UNKNOWN_PROTOCOL, /**< Unknown L4 protocol */
+    DROP_UNKNOWN_OPTION, /**< Unknown option */
+    DROP_MALFORMED_HEADER, /**< Malformed header */
+
+    DROP_FRAGMENT_TIMEOUT, /**< Fragment timeout exceeded */
+
+    DROP_INVALID_REASON, /**< Fallback reason (no known reason) */
+  };
+
+protected:
+  virtual void DoDispose (void);
+
+private:
+  /// Log a packet being sent
+  /// \param ipHeader IP header
+  /// \param ipPayload IP payload
+  /// \param interface outgoing interface
+  void SendOutgoingLogger (const Ipv6Header &ipHeader, Ptr<const Packet> ipPayload,
+                           uint32_t interface);
+  /// Log a packet being forwarded
+  /// \param ipHeader IP header
+  /// \param ipPayload IP payload
+  /// \param interface incoming interface
+  void ForwardLogger (const Ipv6Header &ipHeader, Ptr<const Packet> ipPayload, uint32_t interface);
+  /// Log a packet being received by the destination
+  /// \param ipHeader IP header
+  /// \param ipPayload IP payload
+  /// \param interface incoming interface
+  void ForwardUpLogger (const Ipv6Header &ipHeader, Ptr<const Packet> ipPayload,
+                        uint32_t interface);
+  /// Log a packet being dropped
+  /// \param ipHeader IP header
+  /// \param ipPayload IP payload
+  /// \param reason drop reason
+  /// \param ipv6 pointer to the IP object dropping the packet
+  /// \param ifIndex interface index
+  void DropLogger (const Ipv6Header &ipHeader, Ptr<const Packet> ipPayload,
+                   Ipv6L3Protocol::DropReason reason, Ptr<Ipv6> ipv6, uint32_t ifIndex);
+  /// Log a packet being dropped by a queue
+  /// \param ipPayload IP payload
+  void QueueDropLogger (Ptr<const Packet> ipPayload);
+  /// Log a packet being dropped by a queue disc
+  /// \param item queue disc item
+  void QueueDiscDropLogger (Ptr<const QueueDiscItem> item);
+
+  Ptr<Ipv6EfmFlowClassifier>
+      m_classifier; //!< the Ipv6EfmFlowClassifier this probe is associated with
+};
+
+} // namespace ns3
+
+#endif /* IPV6_FLOW_PROBE_H */
diff --git a/src/efm-monitor/model/tcp-flow-probe-tag.cc b/src/efm-monitor/model/tcp-flow-probe-tag.cc
new file mode 100644
index 000000000..21f266a29
--- /dev/null
+++ b/src/efm-monitor/model/tcp-flow-probe-tag.cc
@@ -0,0 +1,136 @@
+/*
+ * Copyright (C) 2025  RWTH Aachen University
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ * Authors: 
+ *  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+ *  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+ */
+
+#include "tcp-flow-probe-tag.h"
+
+namespace ns3 {
+
+TcpFlowProbeTag::TcpFlowProbeTag ()
+    : Tag (), m_seq (0), m_ackSeq (0), m_payloadSize (0), m_flags (0)
+{
+}
+
+TcpFlowProbeTag::TcpFlowProbeTag (uint32_t seq, uint32_t ackSeq, uint16_t payloadSize,
+                                  uint8_t flags)
+    : Tag (), m_seq (seq), m_ackSeq (ackSeq), m_payloadSize (payloadSize), m_flags (flags)
+{
+}
+
+TypeId
+TcpFlowProbeTag::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::TcpFlowProbeTag")
+                          .SetParent<Tag> ()
+                          .SetGroupName ("EfmManager")
+                          .AddConstructor<TcpFlowProbeTag> ();
+  return tid;
+}
+TypeId
+TcpFlowProbeTag::GetInstanceTypeId (void) const
+{
+  return GetTypeId ();
+}
+
+uint32_t
+TcpFlowProbeTag::GetSerializedSize (void) const
+{
+  return 4 + 4 + 2 + 1;
+}
+
+void
+TcpFlowProbeTag::Serialize (TagBuffer buf) const
+{
+  buf.WriteU32 (m_seq);
+  buf.WriteU32 (m_ackSeq);
+  buf.WriteU16 (m_payloadSize);
+  buf.WriteU8 (m_flags);
+}
+
+void
+TcpFlowProbeTag::Deserialize (TagBuffer buf)
+{
+  m_seq = buf.ReadU32 ();
+  m_ackSeq = buf.ReadU32 ();
+  m_payloadSize = buf.ReadU16 ();
+  m_flags = buf.ReadU8 ();
+}
+
+void
+TcpFlowProbeTag::Print (std::ostream &os) const
+{
+  os << "seq=" << m_seq << " ackSeq=" << m_ackSeq << " payloadSize=" << m_payloadSize
+     << " flags=" << m_flags;
+}
+
+void
+TcpFlowProbeTag::SetSeq (uint32_t seq)
+{
+  m_seq = seq;
+}
+
+void
+TcpFlowProbeTag::SetAckSeq (uint32_t ackSeq)
+{
+  m_ackSeq = ackSeq;
+}
+
+void
+TcpFlowProbeTag::SetPayloadSize (uint16_t payloadSize)
+{
+  m_payloadSize = payloadSize;
+}
+
+void
+TcpFlowProbeTag::SetFlags (uint8_t flags)
+{
+  m_flags = flags;
+}
+
+uint32_t
+TcpFlowProbeTag::GetSeq (void) const
+{
+  return m_seq;
+}
+
+uint32_t
+TcpFlowProbeTag::GetAckSeq (void) const
+{
+  return m_ackSeq;
+}
+
+uint16_t
+TcpFlowProbeTag::GetPayloadSize (void) const
+{
+  return m_payloadSize;
+}
+
+bool
+TcpFlowProbeTag::IsSYN (void) const
+{
+  return m_flags & 0b00000010;
+}
+
+bool
+TcpFlowProbeTag::IsACK (void) const
+{
+  return m_flags & 0b00010000;
+}
+
+} // namespace ns3
\ No newline at end of file
diff --git a/src/efm-monitor/model/tcp-flow-probe-tag.h b/src/efm-monitor/model/tcp-flow-probe-tag.h
new file mode 100644
index 000000000..22412e1c6
--- /dev/null
+++ b/src/efm-monitor/model/tcp-flow-probe-tag.h
@@ -0,0 +1,60 @@
+/*
+ * Copyright (C) 2025  RWTH Aachen University
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ * Authors: 
+ *  - Ike Kunze <kunze@comsys.rwth-aachen.de>
+ *  - Alexander Ruhrmann <ruhrmann@comsys.rwth-aachen.de>
+ */
+#ifndef TCP_FLOW_PROBE_TAG_H
+#define TCP_FLOW_PROBE_TAG_H
+
+#include "ns3/packet.h"
+
+namespace ns3 {
+
+class TcpFlowProbeTag : public Tag
+{
+public:
+  static TypeId GetTypeId (void);
+  virtual TypeId GetInstanceTypeId (void) const;
+  virtual uint32_t GetSerializedSize (void) const;
+  virtual void Serialize (TagBuffer buf) const;
+  virtual void Deserialize (TagBuffer buf);
+  virtual void Print (std::ostream &os) const;
+  TcpFlowProbeTag ();
+  TcpFlowProbeTag (uint32_t seq, uint32_t ackSeq, uint16_t payloadSize, uint8_t flags);
+
+  void SetSeq (uint32_t seq);
+  void SetAckSeq (uint32_t ackSeq);
+  void SetPayloadSize (uint16_t payloadSize);
+  void SetFlags (uint8_t flags);
+
+  uint32_t GetSeq (void) const;
+  uint32_t GetAckSeq (void) const;
+  uint16_t GetPayloadSize (void) const;
+
+  bool IsSYN (void) const;
+  bool IsACK (void) const;
+
+private:
+  uint32_t m_seq;
+  uint32_t m_ackSeq;
+  uint16_t m_payloadSize;
+  uint8_t m_flags;
+};
+
+} // namespace ns3
+
+#endif // TCP_FLOW_PROBE_TAG_H
\ No newline at end of file
diff --git a/src/efm-monitor/test/examples-to-run.py b/src/efm-monitor/test/examples-to-run.py
new file mode 100644
index 000000000..7e5c82378
--- /dev/null
+++ b/src/efm-monitor/test/examples-to-run.py
@@ -0,0 +1,20 @@
+#! /usr/bin/env python3
+## -*- Mode: python; py-indent-offset: 4; indent-tabs-mode: nil; coding: utf-8; -*-
+
+# A list of C++ examples to run in order to ensure that they remain
+# buildable and runnable over time.  Each tuple in the list contains
+#
+#     (example_name, do_run, do_valgrind_run).
+#
+# See test.py for more information.
+cpp_examples = []
+
+# A list of Python examples to run in order to ensure that they remain
+# runnable over time.  Each tuple in the list contains
+#
+#     (example_name, do_run).
+#
+# See test.py for more information.
+python_examples = [
+    ("wifi-olsr-flowmon.py", "True"),
+]
diff --git a/src/efm-qlog/CMakeLists.txt b/src/efm-qlog/CMakeLists.txt
new file mode 100644
index 000000000..7e9e7b88c
--- /dev/null
+++ b/src/efm-qlog/CMakeLists.txt
@@ -0,0 +1,33 @@
+check_include_file_cxx(stdint.h HAVE_STDINT_H)
+if(HAVE_STDINT_H)
+    add_definitions(-DHAVE_STDINT_H)
+endif()
+
+set(examples_as_tests_sources)
+if(${ENABLE_EXAMPLES})
+    set(examples_as_tests_sources    
+        #test/efm-qlog-examples-test-suite.cc
+        )
+endif()    
+
+build_lib(
+    LIBNAME efm-qlog
+    SOURCE_FILES model/efm-qlog.cc
+                 model/efm-qlog-otf.cc
+                 model/efm-qlog-events.cc
+                 model/qlog-types.cc
+                 helper/efm-qlog-helper.cc 
+    HEADER_FILES model/efm-qlog.h
+                 model/efm-qlog-otf.h
+                 model/efm-qlog-events.h
+                 model/qlog-types.h
+                 model/json.h
+                 helper/efm-qlog-helper.h
+    LIBRARIES_TO_LINK ${libcore}
+                      ${libconfig-store}
+                      ${libefm-manager}
+                      ${libefm-monitor}
+    TEST_SOURCES test/efm-qlog-test-suite.cc
+                 ${examples_as_tests_sources}
+)
+    
diff --git a/src/efm-qlog/README.md b/src/efm-qlog/README.md
new file mode 100644
index 000000000..5b4ac1eba
--- /dev/null
+++ b/src/efm-qlog/README.md
@@ -0,0 +1,92 @@
+# Ns 3 Efm Qlog
+
+
+
+## Getting started
+
+To make it easy for you to get started with GitLab, here's a list of recommended next steps.
+
+Already a pro? Just edit this README.md and make it your own. Want to make it easy? [Use the template at the bottom](#editing-this-readme)!
+
+## Add your files
+
+- [ ] [Create](https://docs.gitlab.com/ee/user/project/repository/web_editor.html#create-a-file) or [upload](https://docs.gitlab.com/ee/user/project/repository/web_editor.html#upload-a-file) files
+- [ ] [Add files using the command line](https://docs.gitlab.com/ee/gitlab-basics/add-file.html#add-a-file-using-the-command-line) or push an existing Git repository with the following command:
+
+```
+cd existing_repo
+git remote add origin https://laboratory.comsys.rwth-aachen.de/projects-kunze/ns-3-for-network-telemetry/ns-3-efm-qlog.git
+git branch -M main
+git push -uf origin main
+```
+
+## Integrate with your tools
+
+- [ ] [Set up project integrations](https://laboratory.comsys.rwth-aachen.de/projects-kunze/ns-3-for-network-telemetry/ns-3-efm-qlog/-/settings/integrations)
+
+## Collaborate with your team
+
+- [ ] [Invite team members and collaborators](https://docs.gitlab.com/ee/user/project/members/)
+- [ ] [Create a new merge request](https://docs.gitlab.com/ee/user/project/merge_requests/creating_merge_requests.html)
+- [ ] [Automatically close issues from merge requests](https://docs.gitlab.com/ee/user/project/issues/managing_issues.html#closing-issues-automatically)
+- [ ] [Enable merge request approvals](https://docs.gitlab.com/ee/user/project/merge_requests/approvals/)
+- [ ] [Automatically merge when pipeline succeeds](https://docs.gitlab.com/ee/user/project/merge_requests/merge_when_pipeline_succeeds.html)
+
+## Test and Deploy
+
+Use the built-in continuous integration in GitLab.
+
+- [ ] [Get started with GitLab CI/CD](https://docs.gitlab.com/ee/ci/quick_start/index.html)
+- [ ] [Analyze your code for known vulnerabilities with Static Application Security Testing(SAST)](https://docs.gitlab.com/ee/user/application_security/sast/)
+- [ ] [Deploy to Kubernetes, Amazon EC2, or Amazon ECS using Auto Deploy](https://docs.gitlab.com/ee/topics/autodevops/requirements.html)
+- [ ] [Use pull-based deployments for improved Kubernetes management](https://docs.gitlab.com/ee/user/clusters/agent/)
+- [ ] [Set up protected environments](https://docs.gitlab.com/ee/ci/environments/protected_environments.html)
+
+***
+
+# Editing this README
+
+When you're ready to make this README your own, just edit this file and use the handy template below (or feel free to structure it however you want - this is just a starting point!). Thank you to [makeareadme.com](https://www.makeareadme.com/) for this template.
+
+## Suggestions for a good README
+Every project is different, so consider which of these sections apply to yours. The sections used in the template are suggestions for most open source projects. Also keep in mind that while a README can be too long and detailed, too long is better than too short. If you think your README is too long, consider utilizing another form of documentation rather than cutting out information.
+
+## Name
+Choose a self-explaining name for your project.
+
+## Description
+Let people know what your project can do specifically. Provide context and add a link to any reference visitors might be unfamiliar with. A list of Features or a Background subsection can also be added here. If there are alternatives to your project, this is a good place to list differentiating factors.
+
+## Badges
+On some READMEs, you may see small images that convey metadata, such as whether or not all the tests are passing for the project. You can use Shields to add some to your README. Many services also have instructions for adding a badge.
+
+## Visuals
+Depending on what you are making, it can be a good idea to include screenshots or even a video (you'll frequently see GIFs rather than actual videos). Tools like ttygif can help, but check out Asciinema for a more sophisticated method.
+
+## Installation
+Within a particular ecosystem, there may be a common way of installing things, such as using Yarn, NuGet, or Homebrew. However, consider the possibility that whoever is reading your README is a novice and would like more guidance. Listing specific steps helps remove ambiguity and gets people to using your project as quickly as possible. If it only runs in a specific context like a particular programming language version or operating system or has dependencies that have to be installed manually, also add a Requirements subsection.
+
+## Usage
+Use examples liberally, and show the expected output if you can. It's helpful to have inline the smallest example of usage that you can demonstrate, while providing links to more sophisticated examples if they are too long to reasonably include in the README.
+
+## Support
+Tell people where they can go to for help. It can be any combination of an issue tracker, a chat room, an email address, etc.
+
+## Roadmap
+If you have ideas for releases in the future, it is a good idea to list them in the README.
+
+## Contributing
+State if you are open to contributions and what your requirements are for accepting them.
+
+For people who want to make changes to your project, it's helpful to have some documentation on how to get started. Perhaps there is a script that they should run or some environment variables that they need to set. Make these steps explicit. These instructions could also be useful to your future self.
+
+You can also document commands to lint the code or run tests. These steps help to ensure high code quality and reduce the likelihood that the changes inadvertently break something. Having instructions for running tests is especially helpful if it requires external setup, such as starting a Selenium server for testing in a browser.
+
+## Authors and acknowledgment
+Show your appreciation to those who have contributed to the project.
+
+## License
+For open source projects, say how it is licensed.
+
+## Project status
+If you have run out of energy or time for your project, put a note at the top of the README saying that development has slowed down or stopped completely. Someone may choose to fork your project or volunteer to step in as a maintainer or owner, allowing your project to keep going. You can also make an explicit request for maintainers.
diff --git a/src/efm-qlog/doc/efm-qlog.rst b/src/efm-qlog/doc/efm-qlog.rst
new file mode 100644
index 000000000..a86df0e56
--- /dev/null
+++ b/src/efm-qlog/doc/efm-qlog.rst
@@ -0,0 +1,98 @@
+Example Module Documentation
+----------------------------
+
+.. include:: replace.txt
+.. highlight:: cpp
+
+.. heading hierarchy:
+   ------------- Chapter
+   ************* Section (#.#)
+   ============= Subsection (#.#.#)
+   ############# Paragraph (no number)
+
+This is a suggested outline for adding new module documentation to |ns3|.
+See ``src/click/doc/click.rst`` for an example.
+
+The introductory paragraph is for describing what this code is trying to
+model.
+
+For consistency (italicized formatting), please use |ns3| to refer to
+ns-3 in the documentation (and likewise, |ns2| for ns-2).  These macros
+are defined in the file ``replace.txt``.
+
+Model Description
+*****************
+
+The source code for the new module lives in the directory ``src/efm-qlog``.
+
+Add here a basic description of what is being modeled.
+
+Design
+======
+
+Briefly describe the software design of the model and how it fits into 
+the existing ns-3 architecture. 
+
+Scope and Limitations
+=====================
+
+What can the model do?  What can it not do?  Please use this section to
+describe the scope and limitations of the model.
+
+References
+==========
+
+Add academic citations here, such as if you published a paper on this
+model, or if readers should read a particular specification or other work.
+
+Usage
+*****
+
+This section is principally concerned with the usage of your model, using
+the public API.  Focus first on most common usage patterns, then go
+into more advanced topics.
+
+Building New Module
+===================
+
+Include this subsection only if there are special build instructions or
+platform limitations.
+
+Helpers
+=======
+
+What helper API will users typically use?  Describe it here.
+
+Attributes
+==========
+
+What classes hold attributes, and what are the key ones worth mentioning?
+
+Output
+======
+
+What kind of data does the model generate?  What are the key trace
+sources?   What kind of logging output can be enabled?
+
+Advanced Usage
+==============
+
+Go into further details (such as using the API outside of the helpers)
+in additional sections, as needed.
+
+Examples
+========
+
+What examples using this new code are available?  Describe them here.
+
+Troubleshooting
+===============
+
+Add any tips for avoiding pitfalls, etc.
+
+Validation
+**********
+
+Describe how the model has been tested/validated.  What tests run in the
+test suite?  How much API and code is covered by the tests?  Again, 
+references to outside published work may help here.
diff --git a/src/efm-qlog/examples/CMakeLists.txt b/src/efm-qlog/examples/CMakeLists.txt
new file mode 100644
index 000000000..db9baf677
--- /dev/null
+++ b/src/efm-qlog/examples/CMakeLists.txt
@@ -0,0 +1,6 @@
+build_lib_example(
+    NAME efm-qlog-example
+    SOURCE_FILES efm-qlog-example.cc
+    LIBRARIES_TO_LINK ${libefm-qlog}
+)
+
diff --git a/src/efm-qlog/examples/efm-qlog-example.cc b/src/efm-qlog/examples/efm-qlog-example.cc
new file mode 100644
index 000000000..d3a289cac
--- /dev/null
+++ b/src/efm-qlog/examples/efm-qlog-example.cc
@@ -0,0 +1,26 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+
+#include "ns3/core-module.h"
+#include "ns3/efm-qlog-helper.h"
+
+using namespace ns3;
+
+
+int 
+main (int argc, char *argv[])
+{
+  bool verbose = true;
+
+  CommandLine cmd (__FILE__);
+  cmd.AddValue ("verbose", "Tell application to log if true", verbose);
+
+  cmd.Parse (argc,argv);
+
+  /* ... */
+
+  Simulator::Run ();
+  Simulator::Destroy ();
+  return 0;
+}
+
+
diff --git a/src/efm-qlog/helper/efm-qlog-helper.cc b/src/efm-qlog/helper/efm-qlog-helper.cc
new file mode 100644
index 000000000..549a87f04
--- /dev/null
+++ b/src/efm-qlog/helper/efm-qlog-helper.cc
@@ -0,0 +1,11 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+
+#include "efm-qlog-helper.h"
+
+namespace ns3 {
+
+/* ... */
+
+
+}
+
diff --git a/src/efm-qlog/helper/efm-qlog-helper.h b/src/efm-qlog/helper/efm-qlog-helper.h
new file mode 100644
index 000000000..dd5df68a5
--- /dev/null
+++ b/src/efm-qlog/helper/efm-qlog-helper.h
@@ -0,0 +1,14 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+#ifndef EFM_QLOG_HELPER_H
+#define EFM_QLOG_HELPER_H
+
+#include "ns3/efm-qlog.h"
+
+namespace ns3 {
+
+/* ... */
+
+}
+
+#endif /* EFM_QLOG_HELPER_H */
+
diff --git a/src/efm-qlog/model/efm-qlog-events.cc b/src/efm-qlog/model/efm-qlog-events.cc
new file mode 100644
index 000000000..e6c86197d
--- /dev/null
+++ b/src/efm-qlog/model/efm-qlog-events.cc
@@ -0,0 +1,177 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+
+#include "efm-qlog-events.h"
+
+namespace ns3 {
+
+static std::string
+TBitClientPhaseToString (TBitClientPhase phase)
+{
+  switch (phase)
+    {
+    case GEN1:
+      return "gen1";
+    case GEN2:
+      return "gen2";
+    case PAUSE_GEN:
+      return "gen_pause";
+    case REF1:
+      return "ref1";
+    case REF2:
+      return "ref2";
+    case PAUSE_REF:
+      return "ref_pause";
+    default:
+      NS_ASSERT (false);
+      return "error";
+    }
+}
+
+static std::string
+TBitObserverPhaseToString (TBitObserverPhase phase)
+{
+  switch (phase)
+    {
+    case GEN:
+      return "gen";
+    case PAUSE_BEGIN_GEN:
+      return "gen_pause_begin";
+    case PAUSE_FULL_GEN:
+      return "gen_pause_full";
+    case REF:
+      return "ref";
+    case PAUSE_BEGIN_REF:
+      return "ref_pause_begin";
+    case PAUSE_FULL_REF:
+      return "ref_pause_full";
+    default:
+      NS_ASSERT (false);
+      return "error";
+    }
+}
+
+json
+EfmFlowGroupID::ToJson () const
+{
+  json j;
+  j["flow_id"] = flow_id;
+  return j;
+}
+
+json
+EfmBitUpdateEvent::ToJson () const
+{
+  json j;
+  j["new_state"] = new_state;
+  j["seq"] = seq;
+  return j;
+}
+
+json
+EfmLBitCounterUpdateEvent::ToJson () const
+{
+  json j;
+  j["old_value"] = old_value;
+  j["new_value"] = new_value;
+  return j;
+}
+
+json
+EfmBitSetEvent::ToJson () const
+{
+  json j = json::object ();
+  j["seq"] = seq;
+  if (pkt_count)
+    j["pkt_count"] = *pkt_count;
+  return j;
+}
+
+json
+EfmRBitBlockLenUpdateEvent::ToJson () const
+{
+  json j;
+  j["new_length"] = new_length;
+  return j;
+}
+
+json
+EfmTBitHostPhaseUpdateEvent::ToJson () const
+{
+  json j;
+  j["old_phase"] = TBitClientPhaseToString (old_phase);
+  j["new_phase"] = TBitClientPhaseToString (new_phase);
+  return j;
+}
+
+json
+EfmTBitObserverPhaseUpdateEvent::ToJson () const
+{
+  json j;
+  j["old_phase"] = TBitObserverPhaseToString (old_phase);
+  j["new_phase"] = TBitObserverPhaseToString (new_phase);
+  if (gen_train_length)
+    {
+      j["gen_train_length"] = *gen_train_length;
+    }
+  if (ref_train_length)
+    {
+      j["ref_train_length"] = *ref_train_length;
+    }
+  return j;
+}
+
+json
+EfmDelayMeasurementEvent::ToJson () const
+{
+  json j;
+  j["full_delay_ms"] = full_delay_ms;
+  if (half_delay_ms)
+    {
+      j["half_delay_ms"] = *half_delay_ms;
+    }
+  return j;
+}
+
+json
+EfmLossMeasurementEvent::ToJson () const
+{
+  json j;
+  j["pkt_count"] = pkt_count;
+  j["loss"] = loss;
+  return j;
+}
+
+json
+EfmSignedLossMeasurementEvent::ToJson () const
+{
+  json j;
+  j["pkt_count"] = pkt_count;
+  j["loss"] = loss;
+  return j;
+}
+
+json
+EfmEvent::ToJson () const
+{
+  json j = json::object ();
+  j["name"] = eventType;
+  j["time"] = time;
+  if (data)
+    j["data"] = data->ToJson ();
+  if (time_format)
+    j["time_format"] = TimeFormatToString (*time_format);
+  if (protocol_type)
+    {
+      j["protocol_type"] = json::array ();
+      for (std::vector<std::string>::const_iterator iter = protocol_type->begin ();
+           iter != protocol_type->end (); iter++)
+        {
+          j["protocol_type"].push_back (*iter);
+        }
+    }
+  if (group_id)
+    j["group_id"] = group_id->ToJson ();
+  return j;
+}
+
+} //namespace ns3
diff --git a/src/efm-qlog/model/efm-qlog-events.h b/src/efm-qlog/model/efm-qlog-events.h
new file mode 100644
index 000000000..d43d6355b
--- /dev/null
+++ b/src/efm-qlog/model/efm-qlog-events.h
@@ -0,0 +1,225 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+#ifndef EFM_QLOG_EVENTS_H
+#define EFM_QLOG_EVENTS_H
+
+#include "ns3/qlog-types.h"
+#include "ns3/efm-manager-module.h"
+#include "ns3/efm-monitor-module.h"
+#include "ns3/json.h"
+#include <stdint.h>
+using json = nlohmann::json;
+
+namespace ns3 {
+
+struct EfmFlowGroupID : qlog::GroupID
+{
+  EfmFlowGroupID (EfmFlowId flowId) : flow_id (flowId)
+  {
+  }
+  EfmFlowId flow_id;
+  json ToJson () const override;
+};
+
+enum class SimEventType {
+  UNKNOWN = 0,
+  HOST_GT_TRANS_DELAY = 1,
+  HOST_GT_APP_DELAY = 2,
+  HOST_SPIN_BIT_UDPATE = 3,
+  HOST_L_BIT_COUNTER_UPDATE = 4,
+  HOST_L_BIT_SET = 5,
+  HOST_Q_BIT_UPDATE = 6,
+  HOST_R_BIT_UPDATE = 7,
+  HOST_R_BIT_BLOCK_UPDATE = 8,
+  HOST_T_BIT_SET = 9,
+  HOST_T_BIT_PHASE_UPDATE = 10,
+  OBSV_FLOW_BEGIN = 11,
+  OBSV_SEQ_LOSS = 12,
+  OBSV_ACK_SEQ_LOSS = 13,
+  OBSV_SPIN_BIT_EDGE = 14,
+  OBSV_SPIN_BIT_DELAY = 15,
+  OBSV_L_BIT_SET = 16,
+  OBSV_Q_BIT_CHANGE = 17,
+  OBSV_Q_BIT_LOSS = 18,
+  OBSV_R_BIT_CHANGE = 19,
+  OBSV_R_BIT_LOSS = 20,
+  OBSV_T_BIT_SET = 21,
+  OBSV_T_BIT_PHASE_UPDATE = 22,
+  OBSV_T_BIT_FULL_LOSS = 23,
+  OBSV_T_BIT_HALF_LOSS = 24,
+  OBSV_P_L_BIT_SET = 25,
+  OBSV_P_SQ_BITS_LOSS = 26,
+  OBSV_TCP_DART_DELAY = 27,
+  OBSV_TCP_REORDERING = 28,
+  PING_RT_DELAY = 29,
+  PING_ETE_DELAY = 30,
+  PING_RT_LOSS = 31,
+  PING_ETE_LOSS = 32
+};
+
+NLOHMANN_JSON_SERIALIZE_ENUM (
+    SimEventType, {{SimEventType::UNKNOWN, "unknown"},
+                   {SimEventType::HOST_GT_TRANS_DELAY, "efm_host:groundtruth_trans_delay"},
+                   {SimEventType::HOST_GT_APP_DELAY, "efm_host:groundtruth_app_delay"},
+                   {SimEventType::HOST_SPIN_BIT_UDPATE, "efm_host:spin_bit_update"},
+                   {SimEventType::HOST_L_BIT_COUNTER_UPDATE, "efm_host:l_bit_counter_update"},
+                   {SimEventType::HOST_L_BIT_SET, "efm_host:l_bit_set"},
+                   {SimEventType::HOST_Q_BIT_UPDATE, "efm_host:q_bit_update"},
+                   {SimEventType::HOST_R_BIT_UPDATE, "efm_host:r_bit_update"},
+                   {SimEventType::HOST_R_BIT_BLOCK_UPDATE, "efm_host:r_bit_block_update"},
+                   {SimEventType::HOST_T_BIT_SET, "efm_host:t_bit_set"},
+                   {SimEventType::HOST_T_BIT_PHASE_UPDATE, "efm_host:t_bit_phase_update"},
+                   {SimEventType::OBSV_FLOW_BEGIN, "efm_observer:flow_begin"},
+                   {SimEventType::OBSV_SEQ_LOSS, "efm_observer:seq_loss"},
+                   {SimEventType::OBSV_ACK_SEQ_LOSS, "efm_observer:ack_seq_loss"},
+                   {SimEventType::OBSV_SPIN_BIT_EDGE, "efm_observer:spin_bit_edge"},
+                   {SimEventType::OBSV_SPIN_BIT_DELAY, "efm_observer:spin_bit_delay"},
+                   {SimEventType::OBSV_L_BIT_SET, "efm_observer:l_bit_set"},
+                   {SimEventType::OBSV_Q_BIT_CHANGE, "efm_observer:q_bit_change"},
+                   {SimEventType::OBSV_Q_BIT_LOSS, "efm_observer:q_bit_loss"},
+                   {SimEventType::OBSV_R_BIT_CHANGE, "efm_observer:r_bit_change"},
+                   {SimEventType::OBSV_R_BIT_LOSS, "efm_observer:r_bit_loss"},
+                   {SimEventType::OBSV_T_BIT_SET, "efm_observer:t_bit_set"},
+                   {SimEventType::OBSV_T_BIT_PHASE_UPDATE, "efm_observer:t_bit_phase_update"},
+                   {SimEventType::OBSV_T_BIT_FULL_LOSS, "efm_observer:t_bit_loss_full"},
+                   {SimEventType::OBSV_T_BIT_HALF_LOSS, "efm_observer:t_bit_loss_half"},
+                   {SimEventType::OBSV_P_L_BIT_SET, "efm_observer:p_l_bit_set"},
+                   {SimEventType::OBSV_P_SQ_BITS_LOSS, "efm_observer:p_sq_bits_loss"},
+                   {SimEventType::OBSV_TCP_DART_DELAY, "efm_observer:tcp_dart_delay"},
+                   {SimEventType::OBSV_TCP_REORDERING, "efm_observer:tcp_reordering"},
+                   {SimEventType::PING_RT_DELAY, "ping:rt_delay"},
+                   {SimEventType::PING_ETE_DELAY, "ping:ete_delay"},
+                   {SimEventType::PING_RT_LOSS, "ping:rt_loss"},
+                   {SimEventType::PING_ETE_LOSS, "ping:ete_loss"}})
+
+struct EfmEvent : qlog::Event
+{
+  EfmEvent (double time, SimEventType evType, std::unique_ptr<qlog::EventData> data)
+      : Event (time, "", std::move (data)), eventType (evType)
+  {
+  }
+  EfmEvent (double time, SimEventType evType, std::unique_ptr<qlog::EventData> data,
+            std::unique_ptr<qlog::GroupID> group_id)
+      : Event (time, "", std::move (data), std::move (group_id)), eventType (evType)
+  {
+  }
+  SimEventType eventType;
+  json ToJson () const override;
+};
+
+struct EfmBitUpdateEvent : qlog::EventData
+{
+  EfmBitUpdateEvent (bool newState, uint32_t seq) : new_state (newState), seq (seq)
+  {
+  }
+  bool new_state;
+  uint32_t seq;
+
+  json ToJson () const;
+};
+
+struct EfmLBitCounterUpdateEvent : qlog::EventData
+{
+  EfmLBitCounterUpdateEvent (uint32_t old_value, uint32_t new_value)
+      : old_value (old_value), new_value (new_value)
+  {
+  }
+  uint32_t old_value;
+  uint32_t new_value;
+
+  json ToJson () const;
+};
+
+struct EfmBitSetEvent : qlog::EventData
+{
+  EfmBitSetEvent (uint32_t seq) : seq (seq)
+  {
+  }
+  EfmBitSetEvent (uint32_t seq, uint32_t pkt_count) : seq (seq), pkt_count (pkt_count)
+  {
+  }
+  uint32_t seq;
+  std::optional<uint32_t> pkt_count;
+
+  json ToJson () const;
+};
+
+struct EfmRBitBlockLenUpdateEvent : qlog::EventData
+{
+  EfmRBitBlockLenUpdateEvent (uint32_t new_length) : new_length (new_length)
+  {
+  }
+  uint32_t new_length;
+
+  json ToJson () const;
+};
+
+struct EfmTBitHostPhaseUpdateEvent : qlog::EventData
+{
+  EfmTBitHostPhaseUpdateEvent (TBitClientPhase old_phase, TBitClientPhase new_phase)
+      : old_phase (old_phase), new_phase (new_phase)
+  {
+  }
+  TBitClientPhase old_phase;
+  TBitClientPhase new_phase;
+
+  json ToJson () const;
+};
+
+struct EfmTBitObserverPhaseUpdateEvent : qlog::EventData
+{
+  EfmTBitObserverPhaseUpdateEvent (TBitObserverPhase old_phase, TBitObserverPhase new_phase,
+                                   std::optional<uint32_t> gen_train_length = std::nullopt,
+                                   std::optional<uint32_t> ref_train_length = std::nullopt)
+      : old_phase (old_phase),
+        new_phase (new_phase),
+        gen_train_length (gen_train_length),
+        ref_train_length (ref_train_length)
+  {
+  }
+  TBitObserverPhase old_phase;
+  TBitObserverPhase new_phase;
+  std::optional<uint32_t> gen_train_length;
+  std::optional<uint32_t> ref_train_length;
+
+  json ToJson () const;
+};
+
+struct EfmDelayMeasurementEvent : qlog::EventData
+{
+  EfmDelayMeasurementEvent (uint32_t full_delay_ms,
+                            std::optional<uint32_t> half_delay_ms = std::nullopt)
+      : full_delay_ms (full_delay_ms), half_delay_ms (half_delay_ms)
+  {
+  }
+  uint32_t full_delay_ms;
+  std::optional<uint32_t> half_delay_ms;
+
+  json ToJson () const;
+};
+
+struct EfmLossMeasurementEvent : qlog::EventData
+{
+  EfmLossMeasurementEvent (uint32_t pkt_count, uint32_t loss) : pkt_count (pkt_count), loss (loss)
+  {
+  }
+  uint32_t pkt_count;
+  uint32_t loss;
+
+  json ToJson () const;
+};
+
+struct EfmSignedLossMeasurementEvent : qlog::EventData
+{
+  EfmSignedLossMeasurementEvent (uint32_t pkt_count, int32_t loss)
+      : pkt_count (pkt_count), loss (loss)
+  {
+  }
+  uint32_t pkt_count;
+  int32_t loss;
+
+  json ToJson () const;
+};
+
+} // namespace ns3
+
+#endif /* EFM_QLOG_EVENTS_H */
diff --git a/src/efm-qlog/model/efm-qlog-otf.cc b/src/efm-qlog/model/efm-qlog-otf.cc
new file mode 100644
index 000000000..406db7a75
--- /dev/null
+++ b/src/efm-qlog/model/efm-qlog-otf.cc
@@ -0,0 +1,576 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+
+#include "efm-qlog-otf.h"
+
+namespace ns3 {
+
+void compress(std::filesystem::path executionPath,
+                std::string compress_operation_to_perform)
+{
+  // std::cout << "Try to change current path from " << std::filesystem::current_path ().c_str ()
+  //           << " to " << executionPath.c_str () << std::endl;
+  std::filesystem::current_path (executionPath);
+  system (compress_operation_to_perform.c_str ());
+  return;
+}
+
+EfmQlogOtf::EfmQlogOtf (std::string simTitle, json config, std::filesystem::path filePath,
+                        bool inclEndhosts, bool inclObservers, bool pretty, uint32_t tracesPerFile,
+                        uint32_t traceEventsPerFile, bool onTheFlyCompression)
+    : EfmQlog (simTitle, config),
+      m_inclEndhosts (inclEndhosts),
+      m_inclObservers (inclObservers),
+      m_pretty (pretty),
+      m_tracesPerFile (tracesPerFile),
+      m_traceEventsPerFile (traceEventsPerFile),
+      m_onTheFlyCompression (onTheFlyCompression)
+{
+  if (m_traceEventsPerFile == 0)
+    NS_FATAL_ERROR ("Trace events per file must be greater than 0 for on-the-fly serialization!");
+
+  m_filePath = std::filesystem::absolute (filePath);
+}
+
+void
+EfmQlogOtf::PerformFinalSerialization ()
+{
+  if (m_finalSerializationPerformed)
+    NS_FATAL_ERROR ("Final serialization already performed!");
+
+  if (!m_directoryPrepared)
+    PrepareDirectory ();
+
+  WriteHeaderFile ();
+  WriteTraceFiles (true);
+  JoinWriteThread ();
+  m_finalSerializationPerformed = true;
+}
+
+void
+EfmQlogOtf::PerformOnTheFlySerialization ()
+{
+  if (m_finalSerializationPerformed)
+    NS_FATAL_ERROR ("Final serialization already performed!");
+
+  if (!m_directoryPrepared)
+    PrepareDirectory ();
+
+  WriteTraceFiles (false);
+}
+
+void
+EfmQlogOtf::JoinWriteThread ()
+{
+  if (m_writeThread.joinable ())
+    m_writeThread.join ();
+}
+
+void
+EfmQlogOtf::PrepareDirectory ()
+{
+  if (m_filePath.has_filename ())
+    std::filesystem::create_directories (m_filePath.parent_path ());
+  else
+    NS_FATAL_ERROR ("File path has to include a filename!");
+  m_directoryPrepared = true;
+}
+
+std::filesystem::path
+EfmQlogOtf::GetFilePath (uint32_t fileIndex) const
+{
+  std::filesystem::path newFilePath = m_filePath;
+  newFilePath.replace_extension (
+      std::to_string (fileIndex) +
+      (m_filePath.has_extension () ? m_filePath.extension ().string () : ".json"));
+  return newFilePath;
+}
+
+std::string
+EfmQlogOtf::GetTarCommand (uint32_t fileIndex) const
+{
+  std::filesystem::path json_filepath = m_filePath;
+  json_filepath.replace_extension (
+      std::to_string (fileIndex) +
+      (m_filePath.has_extension () ? m_filePath.extension ().string () : ".json"));
+
+  std::filesystem::path tar_filepath = m_filePath;
+  tar_filepath.replace_extension (
+      std::to_string (fileIndex) +
+      (m_filePath.has_extension () ? ".tar.gz" : ".tar.gz"));    
+  
+  std::string tar_command = "tar -czf " + tar_filepath.filename().generic_string() + " " + json_filepath.filename().generic_string() + " --remove-files";
+  //std::cout << "Tar command: " << tar_command << std::endl;
+
+  return tar_command;
+}
+
+void
+EfmQlogOtf::WriteHeaderFile ()
+{
+  std::ofstream os;
+  os.open (GetFilePath (0), std::ios::out | std::ios::binary);
+  SerializeToJsonStream (os, false, false, m_pretty);
+  os.close ();
+  if (m_onTheFlyCompression)
+    compress (m_filePath.parent_path (), GetTarCommand (0));
+}
+
+void
+EfmQlogOtf::WriteTraceFilesSingleThread (bool forceAll)
+{
+  uint32_t filesLeft = 0;
+  if (forceAll)
+    {
+      filesLeft = UINT32_MAX; //Do not stop until all traces are written
+    }
+  else
+    {
+      if (m_currentEventsStored < m_traceEventsPerFile)
+        return;
+      filesLeft = CalculateTraceFileCount (true);
+      if (filesLeft == 0)
+        return;
+    }
+
+  json jTitleRef = m_simTitle;
+
+  uint32_t traceCount = 0;
+  uint32_t traceEventCount = 0;
+
+  std::ofstream os;
+
+  auto traceWriter = [&] (QlogNodeTrace &traces) {
+    for (auto iter = traces.begin (); iter != traces.end (); iter++)
+      {
+        if (iter->second.empty ())
+          continue;
+
+        //Check if the next trace would exceed the traceEventsPerFile limit
+        //and if so, split before writing the trace
+        //but only if the traceEventsPerFile limit is actually set and the current file is not empty
+        if (m_traceEventsPerFile > 0 && traceEventCount > 0 &&
+            traceEventCount + iter->second.GetEventCount () > m_traceEventsPerFile)
+          {
+            os << "]}";
+            os.close ();
+            traceCount = 0;
+            traceEventCount = 0;
+            filesLeft--;
+            if (m_onTheFlyCompression)
+              {
+                std::thread compress_thread (compress, m_filePath.parent_path (),
+                                             GetTarCommand (m_fileIndex));
+                if (filesLeft == 0)
+                  {
+                    compress_thread.join ();
+                  }
+                else
+                  {
+                    compress_thread.detach ();
+                  }
+              }
+            m_fileIndex++;
+            if (filesLeft == 0)
+              {
+                return;
+              }
+          }
+
+        //Open a new file at the beginning/after splitting
+        if (traceCount == 0)
+          {
+            // std::cout << "Writer is opening file with index " << std::to_string (m_fileIndex)
+            //           << std::endl;
+            os.open (GetFilePath (m_fileIndex), std::ios::out | std::ios::binary);
+            os << "{ \"title_ref\": " << jTitleRef.dump () << ", \"traces\": "
+               << " [";
+          }
+        else
+          {
+            os << ","; //Prepare for the next trace
+          }
+
+        //Write current trace to file, delete trace events from internal storage and update counters
+        uint32_t eventCount = iter->second.GetEventCount ();
+        os << iter->second.ToJson ().dump ();
+        m_totalEventsDumped += eventCount;
+        traceCount++;
+        traceEventCount += eventCount;
+        iter->second.Clear ();
+        m_currentEventsStored -= eventCount;
+
+        //Close the file if one of the limits is reached after writing the trace
+        if ((m_tracesPerFile > 0 && traceCount == m_tracesPerFile) ||
+            (m_traceEventsPerFile > 0 && traceEventCount >= m_traceEventsPerFile))
+          {
+            os << "]}";
+            os.close ();
+            traceCount = 0;
+            traceEventCount = 0;
+            filesLeft--;
+            if (m_onTheFlyCompression)
+              {
+                std::thread compress_thread (compress, m_filePath.parent_path (),
+                                             GetTarCommand (m_fileIndex));
+                if (filesLeft == 0)
+                  {
+                    compress_thread.join ();
+                  }
+                else
+                  {
+                    compress_thread.detach ();
+                  }
+              }
+            m_fileIndex++;
+            if (filesLeft == 0)
+              {
+                return;
+              }
+          }
+      }
+  };
+
+  if (m_inclEndhosts && filesLeft > 0)
+    {
+      traceWriter (m_hostTraces);
+    }
+  if (m_inclObservers && filesLeft > 0)
+    {
+      traceWriter (m_observerTraces);
+      traceWriter (m_pingClientTraces);
+      traceWriter (m_pingServerTraces);
+    }
+
+  //Ensure the last file is closed properly
+  if (traceCount != 0)
+    {
+      os << "]}";
+      os.close ();
+      if (m_onTheFlyCompression)
+        {
+          std::thread compress_thread (compress, m_filePath.parent_path (),
+                                       GetTarCommand (m_fileIndex));
+          compress_thread.join ();
+        }
+      m_fileIndex++;
+    }
+}
+
+void
+EfmQlogOtf::WriteTraceFiles (bool forceAll)
+{
+  if (m_currentEventsStored < m_traceEventsPerFile && !forceAll)
+    return;
+  uint32_t filesLeft = CalculateTraceFileCount (false);
+  if (filesLeft == 0)
+    return;
+  uint32_t startFileIndex = m_fileIndex;
+  m_fileIndex += filesLeft;
+
+  QlogNodeTraceEvents observerTracesEvent;
+  QlogNodeTraceEvents hostTracesEvents;
+  QlogNodeTraceEvents pingClientTracesEvents;
+  QlogNodeTraceEvents pingServerTracesEvents;
+
+  if (m_inclEndhosts)
+    {
+      for (auto iter = m_hostTraces.begin (); iter != m_hostTraces.end (); iter++)
+        {
+          if (iter->second.empty ())
+            continue;
+          auto &vec = hostTracesEvents[iter->first];
+          vec.swap (iter->second.events);
+        }
+    }
+  if (m_inclObservers)
+    {
+      for (auto iter = m_observerTraces.begin (); iter != m_observerTraces.end (); iter++)
+        {
+          if (iter->second.empty ())
+            continue;
+          auto &vec = observerTracesEvent[iter->first];
+          vec.swap (iter->second.events);
+        }
+      for (auto iter = m_pingClientTraces.begin (); iter != m_pingClientTraces.end (); iter++)
+        {
+          if (iter->second.empty ())
+            continue;
+          auto &vec = pingClientTracesEvents[iter->first];
+          vec.swap (iter->second.events);
+        }
+      for (auto iter = m_pingServerTraces.begin (); iter != m_pingServerTraces.end (); iter++)
+        {
+          if (iter->second.empty ())
+            continue;
+          auto &vec = pingServerTracesEvents[iter->first];
+          vec.swap (iter->second.events);
+        }
+    }
+
+  if (m_writeThread.joinable ())
+    {
+      // std::cout << "Waiting for old write thread..." << std::endl;
+      m_writeThread.join ();
+      // std::cout << "Wating done!" << std::endl;
+    }
+  // std::cout << "Spawn write thread..." << std::endl;
+  std::thread write_thread (&EfmQlogOtf::WriteTraceFilesThread, this, filesLeft, startFileIndex,
+                            std::move (observerTracesEvent), std::move (hostTracesEvents),
+                            std::move (pingClientTracesEvents), std::move (pingServerTracesEvents));
+  m_writeThread = std::move (write_thread);
+}
+
+void
+EfmQlogOtf::WriteTraceFilesThread (uint32_t filesLeft, uint32_t startFileIndex,
+                                   QlogNodeTraceEvents observerTracesEvent,
+                                   QlogNodeTraceEvents hostTracesEvents,
+                                   QlogNodeTraceEvents pingClientTracesEvents,
+                                   QlogNodeTraceEvents pingServerTracesEvents)
+{
+  // std::cout << "Write thread started with startFileIndex " << std::to_string (startFileIndex)
+  //           << " and filesLeft " << std::to_string (filesLeft) << "..." << std::endl;
+
+  json jTitleRef = m_simTitle;
+
+  uint32_t traceCount = 0;
+  uint32_t traceEventCount = 0;
+
+  std::ofstream os;
+
+  auto traceWriter = [&] (QlogNodeTrace &traces, QlogNodeTraceEvents &tracesEvents) {
+    for (auto iter = traces.begin (); iter != traces.end (); iter++)
+      {
+        auto &currEvents = tracesEvents[iter->first];
+        if (currEvents.empty ())
+          continue;
+
+        //Check if the next trace would exceed the traceEventsPerFile limit
+        //and if so, split before writing the trace
+        //but only if the traceEventsPerFile limit is actually set and the current file is not empty
+        if (m_traceEventsPerFile > 0 && traceEventCount > 0 &&
+            traceEventCount + currEvents.size () > m_traceEventsPerFile)
+          {
+            os << "]}";
+            os.close ();
+            traceCount = 0;
+            traceEventCount = 0;
+            filesLeft--;
+            if (m_onTheFlyCompression)
+              {
+                std::thread compress_thread (compress, m_filePath.parent_path (),
+                                             GetTarCommand (startFileIndex));
+                if (filesLeft == 0)
+                  {
+                    compress_thread.join ();
+                  }
+                else
+                  {
+                    compress_thread.detach ();
+                  }
+              }
+            startFileIndex++;
+            if (filesLeft == 0)
+              {
+                return;
+              }
+          }
+
+        //Open a new file at the beginning/after splitting
+        if (traceCount == 0)
+          {
+            // std::cout << "Write thread is opening file..." << std::endl;
+            os.open (GetFilePath (startFileIndex), std::ios::out | std::ios::binary);
+            os << "{ \"title_ref\": " << jTitleRef.dump () << ", \"traces\": "
+               << " [";
+          }
+        else
+          {
+            os << ","; //Prepare for the next trace
+          }
+
+        //Write current trace to file, delete trace events from internal storage and update counters
+        uint32_t eventCount = currEvents.size ();
+        os << TraceToJson (iter->second, currEvents).dump ();
+        m_totalEventsDumped += eventCount;
+        traceCount++;
+        traceEventCount += eventCount;
+        currEvents.clear ();
+        m_currentEventsStored -= eventCount;
+
+        //Close the file if one of the limits is reached after writing the trace
+        if ((m_tracesPerFile > 0 && traceCount == m_tracesPerFile) ||
+            (m_traceEventsPerFile > 0 && traceEventCount >= m_traceEventsPerFile))
+          {
+            os << "]}";
+            os.close ();
+            traceCount = 0;
+            traceEventCount = 0;
+            filesLeft--;
+            if (m_onTheFlyCompression)
+              {
+                std::thread compress_thread (compress, m_filePath.parent_path (),
+                                             GetTarCommand (startFileIndex));
+                if (filesLeft == 0)
+                  {
+                    compress_thread.join ();
+                  }
+                else
+                  {
+                    compress_thread.detach ();
+                  }
+              }
+            startFileIndex++;
+            if (filesLeft == 0)
+              {
+                return;
+              }
+          }
+      }
+  };
+
+  if (m_inclEndhosts && filesLeft > 0)
+    {
+      traceWriter (m_hostTraces, hostTracesEvents);
+    }
+  if (m_inclObservers)
+    {
+      if (filesLeft > 0)
+        traceWriter (m_observerTraces, observerTracesEvent);
+      if (filesLeft > 0)
+        traceWriter (m_pingClientTraces, pingClientTracesEvents);
+      if (filesLeft > 0)
+        traceWriter (m_pingServerTraces, pingServerTracesEvents);
+    }
+
+  //Ensure the last file is closed properly
+  if (traceCount != 0)
+    {
+      os << "]}";
+      os.close ();
+      if (m_onTheFlyCompression)
+        {
+          std::thread compress_thread (compress, m_filePath.parent_path (),
+                                       GetTarCommand (startFileIndex));
+          compress_thread.join ();
+        }
+      startFileIndex++;
+    }
+
+  // Sanity check
+  if (m_inclEndhosts)
+    {
+      for (const auto &iter : hostTracesEvents)
+        {
+          if (!iter.second.empty ())
+            NS_FATAL_ERROR ("Host trace events left after writing!");
+        }
+    }
+  if (m_inclObservers)
+    {
+      for (const auto &iter : observerTracesEvent)
+        {
+          if (!iter.second.empty ())
+            NS_FATAL_ERROR ("Observer trace events left after writing!");
+        }
+
+      for (const auto &iter : pingClientTracesEvents)
+        {
+          if (!iter.second.empty ())
+            NS_FATAL_ERROR ("Ping client trace events left after writing!");
+        }
+      for (const auto &iter : pingServerTracesEvents)
+        {
+          if (!iter.second.empty ())
+            NS_FATAL_ERROR ("Ping server trace events left after writing!");
+        }
+    }
+}
+
+json
+EfmQlogOtf::TraceToJson (qlog::Trace &trace,
+                         std::vector<std::unique_ptr<qlog::Event>> &traceEvents) const
+{
+  json j = json::object ();
+  if (trace.title)
+    j["title"] = *trace.title;
+  if (trace.description)
+    j["description"] = *trace.description;
+  if (trace.configuration)
+    j["configuration"] = trace.configuration->ToJson ();
+  if (trace.common_fields)
+    j["common_fields"] = trace.common_fields->ToJson ();
+  if (trace.vantage_point)
+    j["vantage_point"] = trace.vantage_point->ToJson ();
+
+  j["events"] = json::array ();
+  for (std::vector<std::unique_ptr<qlog::Event>>::const_iterator iter = traceEvents.begin ();
+       iter != traceEvents.end (); iter++)
+    {
+      j["events"].push_back ((*iter)->ToJson ());
+    }
+  return j;
+}
+
+void
+EfmQlogOtf::CountFiles (const QlogNodeTrace &traces, uint32_t &traceCount,
+                        uint32_t &traceEventCount, uint32_t &fileCount) const
+{
+  for (const auto &trace : traces)
+    {
+      if (trace.second.empty ())
+        continue;
+
+      // Split file if the next trace would exceed the tracesPerFile limit
+      // or the next trace would exceed the traceEventsPerFile limit and the current file is not empty
+      if ((m_tracesPerFile > 0 && traceCount == m_tracesPerFile) ||
+          (m_traceEventsPerFile > 0 && traceEventCount > 0 &&
+           traceEventCount + trace.second.GetEventCount () >= m_traceEventsPerFile))
+        {
+          traceCount = 1;
+          traceEventCount = trace.second.GetEventCount ();
+          fileCount++;
+        }
+      else
+        {
+          // No file splitting, append to current file
+          traceCount++;
+          traceEventCount += trace.second.GetEventCount ();
+        }
+    }
+}
+
+uint32_t
+EfmQlogOtf::CalculateTraceFileCount (bool bigEnoughOnly) const
+{
+  uint32_t traceCount = 0;
+  uint32_t traceEventCount = 0;
+  uint32_t fileCount = 0;
+
+  if (m_inclEndhosts)
+    {
+      CountFiles (m_hostTraces, traceCount, traceEventCount, fileCount);
+    }
+  if (m_inclObservers)
+    {
+      CountFiles (m_observerTraces, traceCount, traceEventCount, fileCount);
+      CountFiles (m_pingClientTraces, traceCount, traceEventCount, fileCount);
+      CountFiles (m_pingServerTraces, traceCount, traceEventCount, fileCount);
+    }
+
+  if (bigEnoughOnly)
+    {
+      // Handle last 'open' file (we only create files on the fly if they are big enough)
+      if (traceEventCount >= m_traceEventsPerFile)
+        fileCount++;
+    }
+  else
+    {
+      // Handle last 'open' file (we consume all available events event if this creates a tiny file)
+      if (traceEventCount > 0)
+        fileCount++;
+    }
+
+  return fileCount;
+}
+
+} // namespace ns3
\ No newline at end of file
diff --git a/src/efm-qlog/model/efm-qlog-otf.h b/src/efm-qlog/model/efm-qlog-otf.h
new file mode 100644
index 000000000..0b8052d73
--- /dev/null
+++ b/src/efm-qlog/model/efm-qlog-otf.h
@@ -0,0 +1,63 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+#ifndef EFM_QLOG_OTF_H
+#define EFM_QLOG_OTF_H
+
+#include "ns3/efm-qlog.h"
+#include <thread>
+
+namespace ns3 {
+
+void compress (std::filesystem::path executionPath, std::string compress_operation_to_perform);
+
+class EfmQlogOtf : public EfmQlog
+{
+public:
+  EfmQlogOtf (std::string simTitle, json config, std::filesystem::path filePath, bool inclEndhosts,
+              bool inclObservers, bool pretty, uint32_t tracesPerFile, uint32_t traceEventsPerFile,
+              bool onTheFlyCompression);
+  virtual ~EfmQlogOtf () = default;
+
+  void PerformFinalSerialization ();
+  void PerformOnTheFlySerialization ();
+
+  void JoinWriteThread ();
+
+protected:
+  std::filesystem::path m_filePath;
+  bool m_inclEndhosts;
+  bool m_inclObservers;
+  bool m_pretty;
+  uint32_t m_tracesPerFile;
+  uint32_t m_traceEventsPerFile;
+  bool m_onTheFlyCompression;
+
+private:
+  void PrepareDirectory ();
+  std::filesystem::path GetFilePath (uint32_t fileIndex) const;
+  std::string GetTarCommand(uint32_t fileIndex) const; 
+  void WriteHeaderFile ();
+  void WriteTraceFilesSingleThread (bool forceAll);
+  void WriteTraceFiles (bool forceAll);
+  typedef std::map<std::pair<uint32_t, uint16_t>, std::vector<std::unique_ptr<qlog::Event>>>
+      QlogNodeTraceEvents;
+
+  void WriteTraceFilesThread (uint32_t filesLeft, uint32_t startFileIndex,
+                              QlogNodeTraceEvents observerTracesEvent,
+                              QlogNodeTraceEvents hostTracesEvents,
+                              QlogNodeTraceEvents pingClientTracesEvents,
+                              QlogNodeTraceEvents pingServerTracesEvents);
+  json TraceToJson (qlog::Trace &trace,
+                    std::vector<std::unique_ptr<qlog::Event>> &traceEvents) const;
+  uint32_t CalculateTraceFileCount (bool bigEnoughOnly) const;
+  void CountFiles (const QlogNodeTrace &traces, uint32_t &traceCount, uint32_t &traceEventCount,
+                   uint32_t &fileCount) const;
+
+  bool m_directoryPrepared = false;
+  bool m_finalSerializationPerformed = false;
+  uint32_t m_fileIndex = 1; // Use index 0 for header (summary etc.), so start with 1 for traces
+  std::thread m_writeThread;
+};
+
+} // namespace ns3
+
+#endif // EFM_QLOG_OTF_H
\ No newline at end of file
diff --git a/src/efm-qlog/model/efm-qlog.cc b/src/efm-qlog/model/efm-qlog.cc
new file mode 100644
index 000000000..113468602
--- /dev/null
+++ b/src/efm-qlog/model/efm-qlog.cc
@@ -0,0 +1,990 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+
+#include "efm-qlog.h"
+
+#include "ns3/efm-flow-probe.h"
+
+#include <fstream>
+#include <sstream>
+
+#define FAKE_PER_NODE_ID 0
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("EFM_Qlog");
+
+EfmQlog::EfmQlog (std::string simTitle) : m_simTitle (simTitle)
+{
+  m_summary = json::object ();
+}
+
+EfmQlog::EfmQlog (std::string simTitle, json config) : m_simTitle (simTitle)
+{
+  m_summary = json::object ();
+  m_summary["config"] = config;
+}
+
+EfmQlog::~EfmQlog ()
+{
+}
+
+void
+EfmQlog::Install (Ptr<EfmManager> efmManager)
+{
+  if (!efmManager->TraceConnectWithoutContext (
+          "EfmHostHandlerCreated", MakeCallback (&EfmQlog::EfmHostHandlerCreationHandler, this)))
+    NS_FATAL_ERROR ("Failed to connect to EfmHostHandlerCreated trace");
+}
+
+void
+EfmQlog::Install (Ptr<EfmMonitor> efmMonitor)
+{
+  EfmMonitor::EfmFlowProbeContainer container = efmMonitor->GetAllProbes ();
+  for (uint32_t i = 0; i < container.size (); i++)
+    {
+      Install (container[i]);
+    }
+}
+
+void
+EfmQlog::Install (Ptr<EfmHostHandler> efmHostHandler)
+{
+
+  uint32_t nodeId = efmHostHandler->GetNodeId ();
+  uint16_t perNodeId = 0;
+
+  //Create new trace
+  while (m_hostTraces.find (std::pair (nodeId, perNodeId)) != m_hostTraces.end ())
+    {
+      NS_ASSERT (perNodeId < 65535);
+      perNodeId++;
+    }
+  qlog::Trace &trace = m_hostTraces[std::pair (nodeId, perNodeId)];
+
+  //Set vantage point
+  qlog::VantagePointType vt;
+  switch (efmHostHandler->GetHostMode ())
+    {
+    case CLIENT:
+      vt = qlog::CLIENT;
+      break;
+    case SERVER:
+      vt = qlog::SERVER;
+      break;
+    default:
+      NS_FATAL_ERROR ("Unexpected host mode");
+    }
+  trace.vantage_point = std::make_unique<qlog::VantagePoint> (vt);
+  trace.vantage_point->name = std::to_string (nodeId) + "/" + std::to_string (perNodeId);
+
+  //Set common fields
+  trace.common_fields = std::make_unique<qlog::CommonFields> ();
+  trace.common_fields->reference_time = 0.0; //TODO: Is this always true?
+  trace.common_fields->time_format = qlog::RELATIVE; //Using simulation time
+
+  std::string context = std::to_string (nodeId) + "/" + std::to_string (perNodeId);
+
+  if (!efmHostHandler->TraceConnect ("TransDelayMeasured", context,
+                                     MakeCallback (&EfmQlog::EfmHHgtTransDelayHandler, this)))
+    NS_FATAL_ERROR ("Failed to connect efmHostHandler trace");
+  efmHostHandler->TraceConnect ("AppDelayMeasured", context,
+                                MakeCallback (&EfmQlog::EfmHHgtAppDelayHandler, this));
+  efmHostHandler->TraceConnect ("SpinBitUpdated", context,
+                                MakeCallback (&EfmQlog::EfmHHspinBitUpdateHandler, this));
+  efmHostHandler->TraceConnect ("QBitUpdated", context,
+                                MakeCallback (&EfmQlog::EfmHHqBitUpdateHandler, this));
+  efmHostHandler->TraceConnect ("RBitUpdated", context,
+                                MakeCallback (&EfmQlog::EfmHHrBitUpdateHandler, this));
+  efmHostHandler->TraceConnect ("LBitSet", context,
+                                MakeCallback (&EfmQlog::EfmHHlBitSetHandler, this));
+  efmHostHandler->TraceConnect ("TBitSet", context,
+                                MakeCallback (&EfmQlog::EfmHHtBitSetHandler, this));
+  efmHostHandler->TraceConnect ("LBitCounterUpdated", context,
+                                MakeCallback (&EfmQlog::EfmHHlBitCounterUpdateHandler, this));
+  efmHostHandler->TraceConnect ("RBitBlockLenUpdated", context,
+                                MakeCallback (&EfmQlog::EfmHHrBitBlockLenUpdateHandler, this));
+  efmHostHandler->TraceConnect ("TBitPhaseUpdated", context,
+                                MakeCallback (&EfmQlog::EfmHHtBitPhaseUpdateHandler, this));
+}
+
+void
+EfmQlog::Install (Ptr<EfmFlowProbe> efmProbe)
+{
+  uint32_t nodeId = efmProbe->GetNodeId ();
+  uint16_t perNodeId = 0;
+
+  //Create new trace
+  while (m_observerTraces.find (std::pair (nodeId, perNodeId)) != m_observerTraces.end ())
+    {
+      NS_ASSERT (perNodeId < 65535);
+      perNodeId++;
+    }
+  qlog::Trace &trace = m_observerTraces[std::pair (nodeId, perNodeId)];
+
+  //Set vantage point
+  trace.vantage_point = std::make_unique<qlog::VantagePoint> (qlog::NETWORK);
+  trace.vantage_point->name = std::to_string (nodeId) + "/" + std::to_string (perNodeId);
+
+  //Set common fields
+  trace.common_fields = std::make_unique<qlog::CommonFields> ();
+  trace.common_fields->reference_time = 0.0; //TODO: Is this always true?
+  trace.common_fields->time_format = qlog::RELATIVE; //Using simulation time
+
+  std::string context = std::to_string (nodeId) + "/" + std::to_string (perNodeId);
+
+  if (!efmProbe->TraceConnect ("FlowBegin", context,
+                               MakeCallback (&EfmQlog::EfmFPFlowBeginHandler, this)))
+    NS_FATAL_ERROR ("Failed to connect efmProbe trace");
+  efmProbe->TraceConnect ("SeqLoss", context, MakeCallback (&EfmQlog::EfmFPSeqLossHandler, this));
+  efmProbe->TraceConnect ("AckSeqLoss", context,
+                          MakeCallback (&EfmQlog::EfmFPAckSeqLossHandler, this));
+  efmProbe->TraceConnect ("SpinBitEdge", context,
+                          MakeCallback (&EfmQlog::EfmFPspinBitEdgeHandler, this));
+  efmProbe->TraceConnect ("QBitChange", context,
+                          MakeCallback (&EfmQlog::EfmFPqBitChangeHandler, this));
+  efmProbe->TraceConnect ("RBitChange", context,
+                          MakeCallback (&EfmQlog::EfmFPrBitChangeHandler, this));
+  efmProbe->TraceConnect ("LBitSet", context, MakeCallback (&EfmQlog::EfmFPlBitSetHandler, this));
+  efmProbe->TraceConnect ("TBitSet", context, MakeCallback (&EfmQlog::EfmFPtBitSetHandler, this));
+  efmProbe->TraceConnect ("SpinBitDelayMeasured", context,
+                          MakeCallback (&EfmQlog::EfmFPspinBitDelayHandler, this));
+  efmProbe->TraceConnect ("QBitLossMeasured", context,
+                          MakeCallback (&EfmQlog::EfmFPqBitLossHandler, this));
+  efmProbe->TraceConnect ("RBitLossMeasured", context,
+                          MakeCallback (&EfmQlog::EfmFPrBitLossHandler, this));
+  efmProbe->TraceConnect ("TBitFullLossMeasured", context,
+                          MakeCallback (&EfmQlog::EfmFPtBitFullLossHandler, this));
+  efmProbe->TraceConnect ("TBitHalfLossMeasured", context,
+                          MakeCallback (&EfmQlog::EfmFPtBitHalfLossHandler, this));
+  efmProbe->TraceConnect ("TBitPhaseChange", context,
+                          MakeCallback (&EfmQlog::EfmFPtBitPhaseHandler, this));
+
+  efmProbe->TraceConnect ("TCPDartDelayMeasured", context,
+                          MakeCallback (&EfmQlog::TcpFPdartDelayHandler, this));
+  efmProbe->TraceConnect ("TCPReordering", context,
+                          MakeCallback (&EfmQlog::TcpFPreorderingHandler, this));
+
+  efmProbe->TraceConnect ("PathLBitSet", context,
+                          MakeCallback (&EfmQlog::EfmFPpLBitSetHandler, this));
+  efmProbe->TraceConnect ("PathSQBitsLoss", context,
+                          MakeCallback (&EfmQlog::EfmFPpSQBitsLossHandler, this));
+
+  // std::cout << "HERE " << nodeId << "/" << (int) perNodeId << std::endl;
+}
+
+void
+EfmQlog::Install (
+    const std::vector<std::pair<Ptr<BetterPingClient>, Ptr<BetterPingServer>>> &pingPairs)
+{
+  for (const auto &[client, server] : pingPairs)
+    {
+      uint32_t nodeIdClient = client->GetNode ()->GetId ();
+      uint32_t nodeIdServer = server->GetNode ()->GetId ();
+
+      // If the client trace does not exist, create and initialize it
+      if (m_pingClientTraces.find (std::make_pair (nodeIdClient, FAKE_PER_NODE_ID)) ==
+          m_pingClientTraces.end ())
+        {
+          qlog::Trace &trace = m_pingClientTraces[std::make_pair (nodeIdClient, FAKE_PER_NODE_ID)];
+
+          trace.vantage_point = std::make_unique<qlog::VantagePoint> (qlog::NETWORK);
+          // We do not use per-node-ids for ping traces, so we use a fixed id to ensure compatibility
+          trace.vantage_point->name = std::to_string (nodeIdClient) + "/-1";
+
+          trace.common_fields = std::make_unique<qlog::CommonFields> ();
+          trace.common_fields->reference_time = 0.0;
+          trace.common_fields->time_format = qlog::RELATIVE; //Using simulation time
+        }
+
+      // If the server trace does not exist, create and initialize it
+      if (m_pingServerTraces.find (std::make_pair (nodeIdServer, FAKE_PER_NODE_ID)) ==
+          m_pingServerTraces.end ())
+        {
+          qlog::Trace &trace = m_pingServerTraces[std::make_pair (nodeIdServer, FAKE_PER_NODE_ID)];
+
+          trace.vantage_point = std::make_unique<qlog::VantagePoint> (qlog::NETWORK);
+          // We do not use per-node-ids for ping traces, so we use a fixed id to ensure compatibility
+          trace.vantage_point->name = std::to_string (nodeIdServer) + "/-1";
+
+          trace.common_fields = std::make_unique<qlog::CommonFields> ();
+          trace.common_fields->reference_time = 0.0;
+          trace.common_fields->time_format = qlog::RELATIVE; //Using simulation time
+        }
+
+      // We abuse the per-node-id of the context to store the ping target id
+      std::string clientContext =
+          std::to_string (nodeIdClient) + "/" + std::to_string (nodeIdServer);
+      std::string serverContext =
+          std::to_string (nodeIdServer) + "/" + std::to_string (nodeIdClient);
+
+      //Connect traces
+      if (!client->TraceConnect ("LossMmnt", clientContext,
+                                 MakeCallback (&EfmQlog::BetterPingClientLossMmntHandler, this)))
+        {
+          NS_FATAL_ERROR ("Failed to connect to BetterPingClient lossMmnt");
+        }
+      client->TraceConnect ("DelayMmnt", clientContext,
+                            MakeCallback (&EfmQlog::BetterPingClientDelayMmntHandler, this));
+
+      if (!server->TraceConnect ("LossMmnt", serverContext,
+                                 MakeCallback (&EfmQlog::BetterPingServerLossMmntHandler, this)))
+        {
+          NS_FATAL_ERROR ("Failed to connect to BetterPingServer lossMmnt");
+        }
+      server->TraceConnect ("DelayMmnt", serverContext,
+                            MakeCallback (&EfmQlog::BetterPingServerDelayMmntHandler, this));
+    }
+}
+
+void
+EfmQlog::EfmHostHandlerCreationHandler (const Ptr<EfmHostHandler> hostHandler)
+{
+  Install (hostHandler);
+}
+
+void
+EfmQlog::AddToSummary (std::string key, const json &data)
+{
+  NS_ASSERT (m_summary.find (key) == m_summary.end ());
+  m_summary[key] = data;
+}
+
+//-------------
+// JSON methods
+//-------------
+
+std::string
+EfmQlog::SerializeToJsonString (uint16_t indent, bool inclEndhosts, bool inclObservers, bool pretty)
+{
+  NS_LOG_FUNCTION (this << indent << inclEndhosts << inclObservers);
+  std::ostringstream os;
+  SerializeToJsonStream (os, inclEndhosts, inclObservers, pretty);
+  return os.str ();
+}
+
+void
+EfmQlog::SerializeToJsonStream (std::ostream &os, bool inclEndhosts, bool inclObservers,
+                                bool pretty)
+{
+  //Define nested helper functions
+  auto insertSeparator = [&] () {
+    if (pretty)
+      {
+        os << "," << std::endl;
+      }
+    else
+      {
+        os << ",";
+      }
+  };
+
+  auto traceWriter = [&] (QlogNodeTrace &traces) {
+    bool first = true;
+    for (QlogNodeTrace::const_iterator iter = traces.begin (); iter != traces.end (); iter++)
+      {
+        if (iter->second.empty ())
+          continue;
+        if (!first)
+          {
+            insertSeparator ();
+          }
+        else
+          {
+            first = false;
+          }
+        os << iter->second.ToJson ().dump ();
+        m_totalEventsDumped += iter->second.GetEventCount();
+      }
+  };
+
+  //Start of qlog
+  os << "{";
+  if (pretty)
+    {
+      os << std::endl;
+    }
+
+  //Add qlog version
+  os << "\"qlog_version\": \"0.3\"";
+  insertSeparator ();
+
+  //Add qlog format
+  os << "\"qlog_format\": \"JSON\"";
+  insertSeparator ();
+
+  //Add title
+  json title = m_simTitle;
+  os << "\"title\": " << title.dump ();
+  insertSeparator ();
+
+  //Add summary
+  os << "\"summary\": " << m_summary.dump ();
+  insertSeparator ();
+
+  //Add traces
+  os << "\"traces\": ["; //Start of traces array
+
+  if (inclEndhosts && !m_hostTraces.empty ())
+    {
+      traceWriter (m_hostTraces);
+      if (inclObservers && !m_observerTraces.empty ())
+        {
+          insertSeparator ();
+        }
+    }
+  if (inclObservers)
+    {
+      if (!m_observerTraces.empty ())
+        traceWriter (m_observerTraces);
+      if (!m_pingClientTraces.empty ())
+        traceWriter (m_pingClientTraces);
+      if (!m_pingServerTraces.empty ())
+        traceWriter (m_pingServerTraces);
+    }
+
+  os << "]"; //End of traces array
+
+  //End of qlog
+  os << "}";
+  if (pretty)
+    {
+      os << std::endl;
+    }
+}
+
+void
+EfmQlog::SerializeToJsonFile (std::filesystem::path filePath, bool inclEndhosts, bool inclObservers,
+                              bool pretty, uint32_t tracesPerFile, uint32_t traceEventsPerFile)
+{
+  NS_LOG_FUNCTION (this << filePath << inclEndhosts << inclObservers << pretty << tracesPerFile);
+  //Create directories if needed
+  if (filePath.has_filename ())
+    std::filesystem::create_directories (filePath.parent_path ());
+  else
+    NS_FATAL_ERROR ("File path has to include a filename!");
+
+  if ((tracesPerFile == 0 && traceEventsPerFile == 0) ||
+      (!inclEndhosts && !inclObservers)) //Put all traces in one file
+    {
+      std::ofstream os (filePath, std::ios::out | std::ios::binary);
+      SerializeToJsonStream (os, inclEndhosts, inclObservers, pretty);
+      os.close ();
+    }
+  else //Split up traces in multiple files
+    {
+      uint32_t fileCount = 0;
+      std::ofstream os;
+
+      auto filePathCreator = [&filePath] (uint32_t fileCount) -> std::filesystem::path {
+        std::filesystem::path newFilePath = filePath;
+        newFilePath.replace_extension (
+            std::to_string (fileCount) +
+            (filePath.has_extension () ? filePath.extension ().string () : ".json"));
+        return newFilePath;
+      };
+
+      //Write all information except the actual traces to the first file
+      os.open (filePathCreator (fileCount), std::ios::out | std::ios::binary);
+      SerializeToJsonStream (os, false, false, pretty);
+      os.close ();
+      fileCount++;
+
+      //Write traces with references to the simTitle
+      //and split the file when either tracesPerFile or traceEventsPerFile is reached
+      json jTitleRef = m_simTitle;
+      uint32_t traceCount = 0;
+      uint32_t traceEventCount = 0;
+
+      auto traceWriter = [&] (QlogNodeTrace &traces) {
+        for (QlogNodeTrace::const_iterator iter = traces.begin (); iter != traces.end (); iter++)
+          {
+            if (iter->second.empty ())
+              continue;
+
+            //Check if the next trace would exceed the traceEventsPerFile limit
+            //and if so, split before writing the trace
+            //but only if the traceEventsPerFile limit is actually set and the current file is not empty
+            if (traceEventsPerFile > 0 && traceEventCount > 0 &&
+                traceEventCount + iter->second.GetEventCount () > traceEventsPerFile)
+              {
+                os << "]}";
+                os.close ();
+                traceCount = 0;
+                traceEventCount = 0;
+                fileCount++;
+              }
+
+            //Open a new file at the beginning/after splitting
+            if (traceCount == 0)
+              {
+                os.open (filePathCreator (fileCount), std::ios::out | std::ios::binary);
+                os << "{ \"title_ref\": " << jTitleRef.dump () << ", \"traces\": "
+                   << " [";
+              }
+            else
+              {
+                os << ","; //Prepare for the next trace
+              }
+
+            //Write current trace to file and update counters
+            os << iter->second.ToJson ().dump ();
+            m_totalEventsDumped += iter->second.GetEventCount ();
+            traceCount++;
+            traceEventCount += iter->second.GetEventCount ();
+
+            //Close the file if one of the limits is reached after writing the trace
+            if ((tracesPerFile > 0 && traceCount == tracesPerFile) ||
+                (traceEventsPerFile > 0 && traceEventCount >= traceEventsPerFile))
+              {
+                os << "]}";
+                os.close ();
+                traceCount = 0;
+                traceEventCount = 0;
+                fileCount++;
+              }
+          }
+      };
+
+      if (inclEndhosts)
+        {
+          traceWriter (m_hostTraces);
+        }
+      if (inclObservers)
+        {
+          traceWriter (m_observerTraces);
+          traceWriter (m_pingClientTraces);
+          traceWriter (m_pingServerTraces);
+        }
+
+      //Ensure the last file is closed properly
+      if (traceCount != 0)
+        {
+          os << "]}";
+          os.close ();
+        }
+    }
+}
+
+//----------------------
+// Efm event trace sinks
+//----------------------
+
+static void
+ContextToIds (std::string &context, uint32_t &nodeId, uint32_t &perNodeId)
+{
+  size_t index = context.find ('/');
+  nodeId = std::stoi (context.substr (0, index));
+  perNodeId = std::stoi (context.substr (index + 1));
+}
+
+//flow probe trace sinks
+
+void
+EfmQlog::EfmFPFlowBeginHandler (std::string context, EfmFlowId flowId)
+{
+  NS_LOG_DEBUG ("EfmFPFlowBeginHandler " << context << ", " << flowId);
+  uint32_t nodeId, perNodeId;
+  ContextToIds (context, nodeId, perNodeId);
+  qlog::Trace &trace = m_observerTraces[std::pair (nodeId, perNodeId)];
+
+  trace.events.push_back (std::make_unique<EfmEvent> (
+      Now ().GetMicroSeconds (), SimEventType::OBSV_FLOW_BEGIN,
+      std::make_unique<qlog::EventData> (), std::make_unique<EfmFlowGroupID> (flowId)));
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::EfmFPSeqLossHandler (std::string context, EfmFlowId flowId, uint32_t pktCount,
+                              uint32_t loss)
+{
+  NS_LOG_DEBUG ("EfmFPSeqLossHandler " << context << ", " << flowId << ", " << pktCount << ", "
+                                       << loss);
+  uint32_t nodeId, perNodeId;
+  ContextToIds (context, nodeId, perNodeId);
+  qlog::Trace &trace = m_observerTraces[std::pair (nodeId, perNodeId)];
+
+  trace.events.push_back (
+      std::make_unique<EfmEvent> (Now ().GetMicroSeconds (), SimEventType::OBSV_SEQ_LOSS,
+                                  std::make_unique<EfmLossMeasurementEvent> (pktCount, loss),
+                                  std::make_unique<EfmFlowGroupID> (flowId)));
+
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::EfmFPAckSeqLossHandler (std::string context, EfmFlowId flowId, uint32_t pktCount,
+                                 uint32_t loss)
+{
+  NS_LOG_DEBUG ("EfmFPAckSeqLossHandler " << context << ", " << flowId << ", " << pktCount << ", "
+                                          << loss);
+  uint32_t nodeId, perNodeId;
+  ContextToIds (context, nodeId, perNodeId);
+  qlog::Trace &trace = m_observerTraces[std::pair (nodeId, perNodeId)];
+
+  trace.events.push_back (
+      std::make_unique<EfmEvent> (Now ().GetMicroSeconds (), SimEventType::OBSV_ACK_SEQ_LOSS,
+                                  std::make_unique<EfmLossMeasurementEvent> (pktCount, loss),
+                                  std::make_unique<EfmFlowGroupID> (flowId)));
+
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::EfmFPspinBitEdgeHandler (std::string context, EfmFlowId flowId, bool newState,
+                                  uint32_t seq)
+{
+  NS_LOG_DEBUG ("EfmFPspinBitEdgeHandler " << context << ", " << flowId << ", " << newState << ", "
+                                           << seq);
+  uint32_t nodeId, perNodeId;
+  ContextToIds (context, nodeId, perNodeId);
+  qlog::Trace &trace = m_observerTraces[std::pair (nodeId, perNodeId)];
+
+  trace.events.push_back (
+      std::make_unique<EfmEvent> (Now ().GetMicroSeconds (), SimEventType::OBSV_SPIN_BIT_EDGE,
+                                  std::make_unique<EfmBitUpdateEvent> (newState, seq),
+                                  std::make_unique<EfmFlowGroupID> (flowId)));
+
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::EfmFPqBitChangeHandler (std::string context, EfmFlowId flowId, bool newState, uint32_t seq)
+{
+  uint32_t nodeId, perNodeId;
+  ContextToIds (context, nodeId, perNodeId);
+  qlog::Trace &trace = m_observerTraces[std::pair (nodeId, perNodeId)];
+
+  trace.events.push_back (
+      std::make_unique<EfmEvent> (Now ().GetMicroSeconds (), SimEventType::OBSV_Q_BIT_CHANGE,
+                                  std::make_unique<EfmBitUpdateEvent> (newState, seq),
+                                  std::make_unique<EfmFlowGroupID> (flowId)));
+
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::EfmFPrBitChangeHandler (std::string context, EfmFlowId flowId, bool newState, uint32_t seq)
+{
+  uint32_t nodeId, perNodeId;
+  ContextToIds (context, nodeId, perNodeId);
+  qlog::Trace &trace = m_observerTraces[std::pair (nodeId, perNodeId)];
+
+  trace.events.push_back (
+      std::make_unique<EfmEvent> (Now ().GetMicroSeconds (), SimEventType::OBSV_R_BIT_CHANGE,
+                                  std::make_unique<EfmBitUpdateEvent> (newState, seq),
+                                  std::make_unique<EfmFlowGroupID> (flowId)));
+
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::EfmFPlBitSetHandler (std::string context, EfmFlowId flowId, uint32_t pktCount,
+                              uint32_t seq)
+{
+  uint32_t nodeId, perNodeId;
+  ContextToIds (context, nodeId, perNodeId);
+  qlog::Trace &trace = m_observerTraces[std::pair (nodeId, perNodeId)];
+
+  trace.events.push_back (std::make_unique<EfmEvent> (
+      Now ().GetMicroSeconds (), SimEventType::OBSV_L_BIT_SET,
+      std::make_unique<EfmBitSetEvent> (seq, pktCount), std::make_unique<EfmFlowGroupID> (flowId)));
+
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::EfmFPtBitSetHandler (std::string context, EfmFlowId flowId, uint32_t seq)
+{
+  uint32_t nodeId, perNodeId;
+  ContextToIds (context, nodeId, perNodeId);
+  qlog::Trace &trace = m_observerTraces[std::pair (nodeId, perNodeId)];
+
+  trace.events.push_back (std::make_unique<EfmEvent> (
+      Now ().GetMicroSeconds (), SimEventType::OBSV_T_BIT_SET,
+      std::make_unique<EfmBitSetEvent> (seq), std::make_unique<EfmFlowGroupID> (flowId)));
+
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::EfmFPspinBitDelayHandler (std::string context, EfmFlowId flowId, uint32_t fullDelay,
+                                   bool halfAccessible, uint32_t halfDelay)
+{
+  uint32_t nodeId, perNodeId;
+  ContextToIds (context, nodeId, perNodeId);
+  qlog::Trace &trace = m_observerTraces[std::pair (nodeId, perNodeId)];
+
+  trace.events.push_back (std::make_unique<EfmEvent> (
+      Now ().GetMicroSeconds (), SimEventType::OBSV_SPIN_BIT_DELAY,
+      std::make_unique<EfmDelayMeasurementEvent> (
+          fullDelay, halfAccessible ? std::optional (halfDelay) : std::nullopt),
+      std::make_unique<EfmFlowGroupID> (flowId)));
+
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::EfmFPqBitLossHandler (std::string context, EfmFlowId flowId, uint32_t pktCount,
+                               uint32_t loss)
+{
+  uint32_t nodeId, perNodeId;
+  ContextToIds (context, nodeId, perNodeId);
+  qlog::Trace &trace = m_observerTraces[std::pair (nodeId, perNodeId)];
+
+  trace.events.push_back (
+      std::make_unique<EfmEvent> (Now ().GetMicroSeconds (), SimEventType::OBSV_Q_BIT_LOSS,
+                                  std::make_unique<EfmLossMeasurementEvent> (pktCount, loss),
+                                  std::make_unique<EfmFlowGroupID> (flowId)));
+
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::EfmFPrBitLossHandler (std::string context, EfmFlowId flowId, uint32_t pktCount,
+                               uint32_t loss)
+{
+  uint32_t nodeId, perNodeId;
+  ContextToIds (context, nodeId, perNodeId);
+  qlog::Trace &trace = m_observerTraces[std::pair (nodeId, perNodeId)];
+  trace.events.push_back (
+      std::make_unique<EfmEvent> (Now ().GetMicroSeconds (), SimEventType::OBSV_R_BIT_LOSS,
+                                  std::make_unique<EfmLossMeasurementEvent> (pktCount, loss),
+                                  std::make_unique<EfmFlowGroupID> (flowId)));
+
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::EfmFPtBitFullLossHandler (std::string context, EfmFlowId flowId, uint32_t pktCount,
+                                   uint32_t fullLoss)
+{
+  uint32_t nodeId, perNodeId;
+  ContextToIds (context, nodeId, perNodeId);
+  qlog::Trace &trace = m_observerTraces[std::pair (nodeId, perNodeId)];
+
+  trace.events.push_back (
+      std::make_unique<EfmEvent> (Now ().GetMicroSeconds (), SimEventType::OBSV_T_BIT_FULL_LOSS,
+                                  std::make_unique<EfmLossMeasurementEvent> (pktCount, fullLoss),
+                                  std::make_unique<EfmFlowGroupID> (flowId)));
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::EfmFPtBitHalfLossHandler (std::string context, EfmFlowId flowId, uint32_t pktCount,
+                                   uint32_t halfLoss)
+{
+  uint32_t nodeId, perNodeId;
+  ContextToIds (context, nodeId, perNodeId);
+  qlog::Trace &trace = m_observerTraces[std::pair (nodeId, perNodeId)];
+
+  trace.events.push_back (
+      std::make_unique<EfmEvent> (Now ().GetMicroSeconds (), SimEventType::OBSV_T_BIT_HALF_LOSS,
+                                  std::make_unique<EfmLossMeasurementEvent> (pktCount, halfLoss),
+                                  std::make_unique<EfmFlowGroupID> (flowId)));
+
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::EfmFPtBitPhaseHandler (std::string context, EfmFlowId flowId, TBitObserverPhase oldPhase,
+                                TBitObserverPhase newPhase, uint32_t genTrainLength,
+                                uint32_t refTrainLength)
+{
+  uint32_t nodeId, perNodeId;
+  ContextToIds (context, nodeId, perNodeId);
+  qlog::Trace &trace = m_observerTraces[std::pair (nodeId, perNodeId)];
+
+  trace.events.push_back (std::make_unique<EfmEvent> (
+      Now ().GetMicroSeconds (), SimEventType::OBSV_T_BIT_PHASE_UPDATE,
+      std::make_unique<EfmTBitObserverPhaseUpdateEvent> (
+          oldPhase, newPhase, genTrainLength > 0 ? std::optional (genTrainLength) : std::nullopt,
+          refTrainLength > 0 ? std::optional (refTrainLength) : std::nullopt),
+      std::make_unique<EfmFlowGroupID> (flowId)));
+
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::TcpFPdartDelayHandler (std::string context, EfmFlowId flowId, uint32_t fullDelay)
+{
+  uint32_t nodeId, perNodeId;
+  ContextToIds (context, nodeId, perNodeId);
+  qlog::Trace &trace = m_observerTraces[std::pair (nodeId, perNodeId)];
+
+  trace.events.push_back (
+      std::make_unique<EfmEvent> (Now ().GetMicroSeconds (), SimEventType::OBSV_TCP_DART_DELAY,
+                                  std::make_unique<EfmDelayMeasurementEvent> (fullDelay),
+                                  std::make_unique<EfmFlowGroupID> (flowId)));
+
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::TcpFPreorderingHandler (std::string context, EfmFlowId flowId, uint32_t pktCount,
+                                 uint32_t reorderCount)
+{
+  uint32_t nodeId, perNodeId;
+  ContextToIds (context, nodeId, perNodeId);
+  qlog::Trace &trace = m_observerTraces[std::pair (nodeId, perNodeId)];
+
+  trace.events.push_back (std::make_unique<EfmEvent> (
+      Now ().GetMicroSeconds (), SimEventType::OBSV_TCP_REORDERING,
+      std::make_unique<EfmLossMeasurementEvent> (pktCount, reorderCount),
+      std::make_unique<EfmFlowGroupID> (flowId)));
+
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::EfmFPpLBitSetHandler (std::string context, EfmFlowId pathId, uint32_t pktCount,
+                               uint32_t seq)
+{
+  uint32_t nodeId, perNodeId;
+  ContextToIds (context, nodeId, perNodeId);
+  qlog::Trace &trace = m_observerTraces[std::pair (nodeId, perNodeId)];
+
+  trace.events.push_back (std::make_unique<EfmEvent> (
+      Now ().GetMicroSeconds (), SimEventType::OBSV_P_L_BIT_SET,
+      std::make_unique<EfmBitSetEvent> (seq, pktCount), std::make_unique<EfmFlowGroupID> (pathId)));
+
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::EfmFPpSQBitsLossHandler (std::string context, EfmPathId pathId, uint32_t sqPktCount,
+                                  int32_t loss)
+{
+  uint32_t nodeId, perNodeId;
+  ContextToIds (context, nodeId, perNodeId);
+  qlog::Trace &trace = m_observerTraces[std::pair (nodeId, perNodeId)];
+
+  trace.events.push_back (std::make_unique<EfmEvent> (
+      Now ().GetMicroSeconds (), SimEventType::OBSV_P_SQ_BITS_LOSS,
+      std::make_unique<EfmSignedLossMeasurementEvent> (loss, sqPktCount),
+      std::make_unique<EfmFlowGroupID> (pathId)));
+
+  m_currentEventsStored++;
+}
+
+//host handler trace sinks
+
+void
+EfmQlog::EfmHHgtTransDelayHandler (std::string context, EfmHostConnId connId, uint32_t halfDelay,
+                                   uint32_t fullDelay)
+{
+  uint32_t nodeId, perNodeId;
+  ContextToIds (context, nodeId, perNodeId);
+  qlog::Trace &trace = m_hostTraces[std::pair (nodeId, perNodeId)];
+
+  trace.events.push_back (
+      std::make_unique<EfmEvent> (Now ().GetMicroSeconds (), SimEventType::HOST_GT_TRANS_DELAY,
+                                  std::make_unique<EfmDelayMeasurementEvent> (fullDelay, halfDelay),
+                                  std::make_unique<EfmFlowGroupID> (connId)));
+
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::EfmHHgtAppDelayHandler (std::string context, EfmHostConnId connId, uint32_t halfDelay,
+                                 uint32_t fullDelay)
+{
+  uint32_t nodeId, perNodeId;
+  ContextToIds (context, nodeId, perNodeId);
+  qlog::Trace &trace = m_hostTraces[std::pair (nodeId, perNodeId)];
+
+  trace.events.push_back (
+      std::make_unique<EfmEvent> (Now ().GetMicroSeconds (), SimEventType::HOST_GT_APP_DELAY,
+                                  std::make_unique<EfmDelayMeasurementEvent> (fullDelay, halfDelay),
+                                  std::make_unique<EfmFlowGroupID> (connId)));
+
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::EfmHHspinBitUpdateHandler (std::string context, EfmHostConnId connId, bool newState,
+                                    uint32_t seq)
+{
+  uint32_t nodeId, perNodeId;
+  ContextToIds (context, nodeId, perNodeId);
+  qlog::Trace &trace = m_hostTraces[std::pair (nodeId, perNodeId)];
+
+  trace.events.push_back (
+      std::make_unique<EfmEvent> (Now ().GetMicroSeconds (), SimEventType::HOST_SPIN_BIT_UDPATE,
+                                  std::make_unique<EfmBitUpdateEvent> (newState, seq),
+                                  std::make_unique<EfmFlowGroupID> (connId)));
+
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::EfmHHqBitUpdateHandler (std::string context, EfmHostConnId connId, bool newState,
+                                 uint32_t seq)
+{
+  uint32_t nodeId, perNodeId;
+  ContextToIds (context, nodeId, perNodeId);
+  qlog::Trace &trace = m_hostTraces[std::pair (nodeId, perNodeId)];
+
+  trace.events.push_back (
+      std::make_unique<EfmEvent> (Now ().GetMicroSeconds (), SimEventType::HOST_Q_BIT_UPDATE,
+                                  std::make_unique<EfmBitUpdateEvent> (newState, seq),
+                                  std::make_unique<EfmFlowGroupID> (connId)));
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::EfmHHrBitUpdateHandler (std::string context, EfmHostConnId connId, bool newState,
+                                 uint32_t seq)
+{
+  uint32_t nodeId, perNodeId;
+  ContextToIds (context, nodeId, perNodeId);
+  qlog::Trace &trace = m_hostTraces[std::pair (nodeId, perNodeId)];
+
+  trace.events.push_back (
+      std::make_unique<EfmEvent> (Now ().GetMicroSeconds (), SimEventType::HOST_R_BIT_UPDATE,
+                                  std::make_unique<EfmBitUpdateEvent> (newState, seq),
+                                  std::make_unique<EfmFlowGroupID> (connId)));
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::EfmHHlBitSetHandler (std::string context, EfmHostConnId connId, uint32_t seq)
+{
+  uint32_t nodeId, perNodeId;
+  ContextToIds (context, nodeId, perNodeId);
+  qlog::Trace &trace = m_hostTraces[std::pair (nodeId, perNodeId)];
+
+  trace.events.push_back (std::make_unique<EfmEvent> (
+      Now ().GetMicroSeconds (), SimEventType::HOST_L_BIT_SET,
+      std::make_unique<EfmBitSetEvent> (seq), std::make_unique<EfmFlowGroupID> (connId)));
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::EfmHHtBitSetHandler (std::string context, EfmHostConnId connId, uint32_t seq)
+{
+  uint32_t nodeId, perNodeId;
+  ContextToIds (context, nodeId, perNodeId);
+  qlog::Trace &trace = m_hostTraces[std::pair (nodeId, perNodeId)];
+
+  trace.events.push_back (std::make_unique<EfmEvent> (
+      Now ().GetMicroSeconds (), SimEventType::HOST_T_BIT_SET,
+      std::make_unique<EfmBitSetEvent> (seq), std::make_unique<EfmFlowGroupID> (connId)));
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::EfmHHlBitCounterUpdateHandler (std::string context, EfmHostConnId connId,
+                                        uint32_t oldValue, uint32_t newValue)
+{
+  uint32_t nodeId, perNodeId;
+  ContextToIds (context, nodeId, perNodeId);
+  qlog::Trace &trace = m_hostTraces[std::pair (nodeId, perNodeId)];
+
+  trace.events.push_back (std::make_unique<EfmEvent> (
+      Now ().GetMicroSeconds (), SimEventType::HOST_L_BIT_COUNTER_UPDATE,
+      std::make_unique<EfmLBitCounterUpdateEvent> (oldValue, newValue),
+      std::make_unique<EfmFlowGroupID> (connId)));
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::EfmHHrBitBlockLenUpdateHandler (std::string context, EfmHostConnId connId,
+                                         uint32_t newValue)
+{
+  uint32_t nodeId, perNodeId;
+  ContextToIds (context, nodeId, perNodeId);
+  qlog::Trace &trace = m_hostTraces[std::pair (nodeId, perNodeId)];
+
+  trace.events.push_back (
+      std::make_unique<EfmEvent> (Now ().GetMicroSeconds (), SimEventType::HOST_R_BIT_BLOCK_UPDATE,
+                                  std::make_unique<EfmRBitBlockLenUpdateEvent> (newValue),
+                                  std::make_unique<EfmFlowGroupID> (connId)));
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::EfmHHtBitPhaseUpdateHandler (std::string context, EfmHostConnId connId,
+                                      TBitClientPhase oldPhase, TBitClientPhase newPhase)
+{
+  uint32_t nodeId, perNodeId;
+  ContextToIds (context, nodeId, perNodeId);
+  qlog::Trace &trace = m_hostTraces[std::pair (nodeId, perNodeId)];
+
+  trace.events.push_back (std::make_unique<EfmEvent> (
+      Now ().GetMicroSeconds (), SimEventType::HOST_T_BIT_PHASE_UPDATE,
+      std::make_unique<EfmTBitHostPhaseUpdateEvent> (oldPhase, newPhase),
+      std::make_unique<EfmFlowGroupID> (connId)));
+  m_currentEventsStored++;
+}
+
+//----------------------
+// Better Ping event trace sinks
+//----------------------
+
+void
+EfmQlog::BetterPingClientLossMmntHandler (std::string context, uint32_t totalRtLoss,
+                                          uint32_t pktCount)
+{
+  uint32_t nodeId, targetId;
+  ContextToIds (context, nodeId, targetId);
+  qlog::Trace &trace = m_pingClientTraces[std::make_pair (nodeId, FAKE_PER_NODE_ID)];
+
+  // These aren't really EFM events, but we're using the same trace format for convenience
+  trace.events.push_back (
+      std::make_unique<EfmEvent> (Now ().GetMicroSeconds (), SimEventType::PING_RT_LOSS,
+                                  std::make_unique<EfmLossMeasurementEvent> (pktCount, totalRtLoss),
+                                  std::make_unique<EfmFlowGroupID> (targetId)));
+
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::BetterPingClientDelayMmntHandler (std::string context, uint32_t rtDelay)
+{
+  uint32_t nodeId, targetId;
+  ContextToIds (context, nodeId, targetId);
+  qlog::Trace &trace = m_pingClientTraces[std::make_pair (nodeId, FAKE_PER_NODE_ID)];
+
+  // These aren't really EFM events, but we're using the same trace format for convenience
+  trace.events.push_back (
+      std::make_unique<EfmEvent> (Now ().GetMicroSeconds (), SimEventType::PING_RT_DELAY,
+                                  std::make_unique<EfmDelayMeasurementEvent> (rtDelay),
+                                  std::make_unique<EfmFlowGroupID> (targetId)));
+
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::BetterPingServerLossMmntHandler (std::string context, uint32_t totalEtELoss,
+                                          uint32_t pktCount)
+{
+  uint32_t nodeId, targetId;
+  ContextToIds (context, nodeId, targetId);
+  qlog::Trace &trace = m_pingServerTraces[std::make_pair (nodeId, FAKE_PER_NODE_ID)];
+
+  // These aren't really EFM events, but we're using the same trace format for convenience
+  trace.events.push_back (std::make_unique<EfmEvent> (
+      Now ().GetMicroSeconds (), SimEventType::PING_ETE_LOSS,
+      std::make_unique<EfmLossMeasurementEvent> (pktCount, totalEtELoss),
+      std::make_unique<EfmFlowGroupID> (targetId)));
+
+  m_currentEventsStored++;
+}
+
+void
+EfmQlog::BetterPingServerDelayMmntHandler (std::string context, uint32_t eTeDelay)
+{
+  uint32_t nodeId, targetId;
+  ContextToIds (context, nodeId, targetId);
+  qlog::Trace &trace = m_pingServerTraces[std::make_pair (nodeId, FAKE_PER_NODE_ID)];
+
+  // These aren't really EFM events, but we're using the same trace format for convenience
+  trace.events.push_back (
+      std::make_unique<EfmEvent> (Now ().GetMicroSeconds (), SimEventType::PING_ETE_DELAY,
+                                  std::make_unique<EfmDelayMeasurementEvent> (eTeDelay),
+                                  std::make_unique<EfmFlowGroupID> (targetId)));
+
+  m_currentEventsStored++;
+}
+
+} //namespace ns3
diff --git a/src/efm-qlog/model/efm-qlog.h b/src/efm-qlog/model/efm-qlog.h
new file mode 100644
index 000000000..a9ddeffc3
--- /dev/null
+++ b/src/efm-qlog/model/efm-qlog.h
@@ -0,0 +1,144 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+#ifndef EFM_QLOG_H
+#define EFM_QLOG_H
+
+#include "ns3/efm-manager-module.h"
+#include "ns3/efm-monitor-module.h"
+#include "ns3/better-ping-client.h"
+#include "ns3/better-ping-server.h"
+#include "ns3/efm-qlog-events.h"
+#include <map>
+#include <filesystem>
+
+#include "ns3/json.h"
+
+namespace ns3 {
+
+class EfmQlog
+{
+
+public:
+  EfmQlog (std::string simTitle);
+  EfmQlog (std::string simTitle, nlohmann::json config);
+  virtual ~EfmQlog ();
+
+  void Install (Ptr<EfmManager> efmManager);
+  void Install (Ptr<EfmMonitor> efmMonitor);
+
+  void Install (Ptr<EfmHostHandler> efmHostHandler);
+  void Install (Ptr<EfmFlowProbe> efmProbe);
+
+  void
+  Install (const std::vector<std::pair<Ptr<BetterPingClient>, Ptr<BetterPingServer>>> &pingPairs);
+
+  void AddToSummary (std::string key, const nlohmann::json &data);
+
+  void SerializeToJsonStream (std::ostream &os, bool inclEndhosts, bool inclObservers, bool pretty);
+  std::string SerializeToJsonString (uint16_t indent, bool inclEndhosts, bool inclObservers,
+                                     bool pretty);
+
+  /// @brief Serialize the qlog traces to a file
+  /// @param filePath File to write, non-existing directories will be created
+  /// @param inclEndhosts Include endhost traces?
+  /// @param inclObservers Include observer traces?
+  /// @param pretty Pretty print the JSON?
+  /// @param tracesPerFile Number of traces per file before splitting to a new one, 0 to disable limit
+  /// @param traceEventsPerFile Number of trace events per file before splitting to a new one, 0 to disable limit (only splits whole traces)
+  void SerializeToJsonFile (std::filesystem::path filePath, bool inclEndhosts, bool inclObservers,
+                            bool pretty, uint32_t tracesPerFile, uint32_t traceEventsPerFile);
+
+  uint32_t
+  GetTotalEventsProcessed () const
+  {
+    return m_currentEventsStored + m_totalEventsDumped;
+  }
+
+protected:
+  //maps pair of nodeId and per-node-identifier to trace
+  typedef std::map<std::pair<uint32_t, uint16_t>, qlog::Trace> QlogNodeTrace;
+
+  QlogNodeTrace m_observerTraces;
+  QlogNodeTrace m_hostTraces;
+
+  QlogNodeTrace m_pingClientTraces;
+  QlogNodeTrace m_pingServerTraces;
+
+  uint32_t m_currentEventsStored = 0;
+  uint32_t m_totalEventsDumped = 0;
+
+  std::string m_simTitle;
+  nlohmann::json m_summary;
+
+private:
+  void EfmHostHandlerCreationHandler (const Ptr<EfmHostHandler> hostHandler);
+  void EfmFlowProbeCreationHandler (const Ptr<EfmFlowProbe> flowProbe);
+
+  //flow probe trace sinks
+  void EfmFPFlowBeginHandler (std::string context, EfmFlowId flowId);
+  void EfmFPSeqLossHandler (std::string context, EfmFlowId flowId, uint32_t pktCount,
+                            uint32_t loss);
+  void EfmFPAckSeqLossHandler (std::string context, EfmFlowId flowId, uint32_t pktCount,
+                               uint32_t loss);
+  void EfmFPspinBitEdgeHandler (std::string context, EfmFlowId flowId, bool newState, uint32_t seq);
+  void EfmFPqBitChangeHandler (std::string context, EfmFlowId flowId, bool newState, uint32_t seq);
+  void EfmFPrBitChangeHandler (std::string context, EfmFlowId flowId, bool newState, uint32_t seq);
+  void EfmFPlBitSetHandler (std::string context, EfmFlowId flowId, uint32_t pktCount, uint32_t seq);
+  void EfmFPtBitSetHandler (std::string context, EfmFlowId flowId, uint32_t seq);
+  void EfmFPspinBitDelayHandler (std::string context, EfmFlowId flowId, uint32_t fullDelay,
+                                 bool halfAccessible, uint32_t halfDelay);
+  void EfmFPqBitLossHandler (std::string context, EfmFlowId flowId, uint32_t pktCount,
+                             uint32_t loss);
+  void EfmFPrBitLossHandler (std::string context, EfmFlowId flowId, uint32_t pktCount,
+                             uint32_t loss);
+  void EfmFPtBitFullLossHandler (std::string context, EfmFlowId flowId, uint32_t pktCount,
+                                 uint32_t fullLoss);
+  void EfmFPtBitHalfLossHandler (std::string context, EfmFlowId flowId, uint32_t pktCount,
+                                 uint32_t halfLoss);
+  void EfmFPtBitPhaseHandler (std::string context, EfmFlowId flowId, TBitObserverPhase oldPhase,
+                              TBitObserverPhase newPhase, uint32_t genTrainLength,
+                              uint32_t refTrainLength);
+
+  void TcpFPdartDelayHandler (std::string context, EfmFlowId flowId, uint32_t fullDelay);
+  void TcpFPreorderingHandler (std::string context, EfmFlowId flowId, uint32_t pktCount,
+                               uint32_t reorderCount);
+
+  void EfmFPpLBitSetHandler (std::string context, EfmPathId pathId, uint32_t pktCount,
+                             uint32_t seq);
+  void EfmFPpSQBitsLossHandler (std::string context, EfmPathId pathId, uint32_t sqPktCount,
+                                int32_t loss);
+
+  //host handler trace sinks
+  void EfmHHgtTransDelayHandler (std::string context, EfmHostConnId connId, uint32_t halfDelay,
+                                 uint32_t fullDelay);
+  void EfmHHgtAppDelayHandler (std::string context, EfmHostConnId connId, uint32_t halfDelay,
+                               uint32_t fullDelay);
+  void EfmHHspinBitUpdateHandler (std::string context, EfmHostConnId connId, bool newState,
+                                  uint32_t seq);
+  void EfmHHqBitUpdateHandler (std::string context, EfmHostConnId connId, bool newState,
+                               uint32_t seq);
+  void EfmHHrBitUpdateHandler (std::string context, EfmHostConnId connId, bool newState,
+                               uint32_t seq);
+  void EfmHHlBitSetHandler (std::string context, EfmHostConnId connId, uint32_t seq);
+  void EfmHHtBitSetHandler (std::string context, EfmHostConnId connId, uint32_t seq);
+  void EfmHHlBitCounterUpdateHandler (std::string context, EfmHostConnId connId, uint32_t oldValue,
+                                      uint32_t newValue);
+  void EfmHHrBitBlockLenUpdateHandler (std::string context, EfmHostConnId connId,
+                                       uint32_t newValue);
+  void EfmHHtBitPhaseUpdateHandler (std::string context, EfmHostConnId connId,
+                                    TBitClientPhase oldPhase, TBitClientPhase newPhase);
+
+  // BetterPing trace sinks
+  void BetterPingClientLossMmntHandler (std::string context, uint32_t totalRtLoss,
+                                        uint32_t pktCount);
+
+  void BetterPingClientDelayMmntHandler (std::string context, uint32_t rtDelay);
+
+  void BetterPingServerLossMmntHandler (std::string context, uint32_t totalEtELoss,
+                                        uint32_t pktCount);
+
+  void BetterPingServerDelayMmntHandler (std::string context, uint32_t eTeDelay);
+};
+
+} // namespace ns3
+
+#endif /* EFM_QLOG_H */
diff --git a/src/efm-qlog/model/json.h b/src/efm-qlog/model/json.h
new file mode 100644
index 000000000..2448bf22d
--- /dev/null
+++ b/src/efm-qlog/model/json.h
@@ -0,0 +1,24640 @@
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+/****************************************************************************\
+ * Note on documentation: The source files contain links to the online      *
+ * documentation of the public API at https://json.nlohmann.me. This URL    *
+ * contains the most recent documentation and should also be applicable to  *
+ * previous versions; documentation for deprecated functions is not         *
+ * removed, but marked deprecated. See "Generate documentation" section in  *
+ * file docs/README.md.                                                     *
+\****************************************************************************/
+
+#ifndef INCLUDE_NLOHMANN_JSON_HPP_
+#define INCLUDE_NLOHMANN_JSON_HPP_
+
+#include <algorithm> // all_of, find, for_each
+#include <cstddef> // nullptr_t, ptrdiff_t, size_t
+#include <functional> // hash, less
+#include <initializer_list> // initializer_list
+#ifndef JSON_NO_IO
+    #include <iosfwd> // istream, ostream
+#endif  // JSON_NO_IO
+#include <iterator> // random_access_iterator_tag
+#include <memory> // unique_ptr
+#include <string> // string, stoi, to_string
+#include <utility> // declval, forward, move, pair, swap
+#include <vector> // vector
+
+// #include <nlohmann/adl_serializer.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <utility>
+
+// #include <nlohmann/detail/abi_macros.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+// This file contains all macro definitions affecting or depending on the ABI
+
+#ifndef JSON_SKIP_LIBRARY_VERSION_CHECK
+    #if defined(NLOHMANN_JSON_VERSION_MAJOR) && defined(NLOHMANN_JSON_VERSION_MINOR) && defined(NLOHMANN_JSON_VERSION_PATCH)
+        #if NLOHMANN_JSON_VERSION_MAJOR != 3 || NLOHMANN_JSON_VERSION_MINOR != 11 || NLOHMANN_JSON_VERSION_PATCH != 2
+            #warning "Already included a different version of the library!"
+        #endif
+    #endif
+#endif
+
+#define NLOHMANN_JSON_VERSION_MAJOR 3   // NOLINT(modernize-macro-to-enum)
+#define NLOHMANN_JSON_VERSION_MINOR 11  // NOLINT(modernize-macro-to-enum)
+#define NLOHMANN_JSON_VERSION_PATCH 2   // NOLINT(modernize-macro-to-enum)
+
+#ifndef JSON_DIAGNOSTICS
+    #define JSON_DIAGNOSTICS 0
+#endif
+
+#ifndef JSON_USE_LEGACY_DISCARDED_VALUE_COMPARISON
+    #define JSON_USE_LEGACY_DISCARDED_VALUE_COMPARISON 0
+#endif
+
+#if JSON_DIAGNOSTICS
+    #define NLOHMANN_JSON_ABI_TAG_DIAGNOSTICS _diag
+#else
+    #define NLOHMANN_JSON_ABI_TAG_DIAGNOSTICS
+#endif
+
+#if JSON_USE_LEGACY_DISCARDED_VALUE_COMPARISON
+    #define NLOHMANN_JSON_ABI_TAG_LEGACY_DISCARDED_VALUE_COMPARISON _ldvcmp
+#else
+    #define NLOHMANN_JSON_ABI_TAG_LEGACY_DISCARDED_VALUE_COMPARISON
+#endif
+
+#ifndef NLOHMANN_JSON_NAMESPACE_NO_VERSION
+    #define NLOHMANN_JSON_NAMESPACE_NO_VERSION 0
+#endif
+
+// Construct the namespace ABI tags component
+#define NLOHMANN_JSON_ABI_TAGS_CONCAT_EX(a, b) json_abi ## a ## b
+#define NLOHMANN_JSON_ABI_TAGS_CONCAT(a, b) \
+    NLOHMANN_JSON_ABI_TAGS_CONCAT_EX(a, b)
+
+#define NLOHMANN_JSON_ABI_TAGS                                       \
+    NLOHMANN_JSON_ABI_TAGS_CONCAT(                                   \
+            NLOHMANN_JSON_ABI_TAG_DIAGNOSTICS,                       \
+            NLOHMANN_JSON_ABI_TAG_LEGACY_DISCARDED_VALUE_COMPARISON)
+
+// Construct the namespace version component
+#define NLOHMANN_JSON_NAMESPACE_VERSION_CONCAT_EX(major, minor, patch) \
+    _v ## major ## _ ## minor ## _ ## patch
+#define NLOHMANN_JSON_NAMESPACE_VERSION_CONCAT(major, minor, patch) \
+    NLOHMANN_JSON_NAMESPACE_VERSION_CONCAT_EX(major, minor, patch)
+
+#if NLOHMANN_JSON_NAMESPACE_NO_VERSION
+#define NLOHMANN_JSON_NAMESPACE_VERSION
+#else
+#define NLOHMANN_JSON_NAMESPACE_VERSION                                 \
+    NLOHMANN_JSON_NAMESPACE_VERSION_CONCAT(NLOHMANN_JSON_VERSION_MAJOR, \
+                                           NLOHMANN_JSON_VERSION_MINOR, \
+                                           NLOHMANN_JSON_VERSION_PATCH)
+#endif
+
+// Combine namespace components
+#define NLOHMANN_JSON_NAMESPACE_CONCAT_EX(a, b) a ## b
+#define NLOHMANN_JSON_NAMESPACE_CONCAT(a, b) \
+    NLOHMANN_JSON_NAMESPACE_CONCAT_EX(a, b)
+
+#ifndef NLOHMANN_JSON_NAMESPACE
+#define NLOHMANN_JSON_NAMESPACE               \
+    nlohmann::NLOHMANN_JSON_NAMESPACE_CONCAT( \
+            NLOHMANN_JSON_ABI_TAGS,           \
+            NLOHMANN_JSON_NAMESPACE_VERSION)
+#endif
+
+#ifndef NLOHMANN_JSON_NAMESPACE_BEGIN
+#define NLOHMANN_JSON_NAMESPACE_BEGIN                \
+    namespace nlohmann                               \
+    {                                                \
+    inline namespace NLOHMANN_JSON_NAMESPACE_CONCAT( \
+                NLOHMANN_JSON_ABI_TAGS,              \
+                NLOHMANN_JSON_NAMESPACE_VERSION)     \
+    {
+#endif
+
+#ifndef NLOHMANN_JSON_NAMESPACE_END
+#define NLOHMANN_JSON_NAMESPACE_END                                     \
+    }  /* namespace (inline namespace) NOLINT(readability/namespace) */ \
+    }  // namespace nlohmann
+#endif
+
+// #include <nlohmann/detail/conversions/from_json.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <algorithm> // transform
+#include <array> // array
+#include <forward_list> // forward_list
+#include <iterator> // inserter, front_inserter, end
+#include <map> // map
+#include <string> // string
+#include <tuple> // tuple, make_tuple
+#include <type_traits> // is_arithmetic, is_same, is_enum, underlying_type, is_convertible
+#include <unordered_map> // unordered_map
+#include <utility> // pair, declval
+#include <valarray> // valarray
+
+// #include <nlohmann/detail/exceptions.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <cstddef> // nullptr_t
+#include <exception> // exception
+#if JSON_DIAGNOSTICS
+    #include <numeric> // accumulate
+#endif
+#include <stdexcept> // runtime_error
+#include <string> // to_string
+#include <vector> // vector
+
+// #include <nlohmann/detail/value_t.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <array> // array
+#include <cstddef> // size_t
+#include <cstdint> // uint8_t
+#include <string> // string
+
+// #include <nlohmann/detail/macro_scope.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <utility> // declval, pair
+// #include <nlohmann/detail/meta/detected.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <type_traits>
+
+// #include <nlohmann/detail/meta/void_t.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+// #include <nlohmann/detail/abi_macros.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+
+template<typename ...Ts> struct make_void
+{
+    using type = void;
+};
+template<typename ...Ts> using void_t = typename make_void<Ts...>::type;
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+
+// https://en.cppreference.com/w/cpp/experimental/is_detected
+struct nonesuch
+{
+    nonesuch() = delete;
+    ~nonesuch() = delete;
+    nonesuch(nonesuch const&) = delete;
+    nonesuch(nonesuch const&&) = delete;
+    void operator=(nonesuch const&) = delete;
+    void operator=(nonesuch&&) = delete;
+};
+
+template<class Default,
+         class AlwaysVoid,
+         template<class...> class Op,
+         class... Args>
+struct detector
+{
+    using value_t = std::false_type;
+    using type = Default;
+};
+
+template<class Default, template<class...> class Op, class... Args>
+struct detector<Default, void_t<Op<Args...>>, Op, Args...>
+{
+    using value_t = std::true_type;
+    using type = Op<Args...>;
+};
+
+template<template<class...> class Op, class... Args>
+using is_detected = typename detector<nonesuch, void, Op, Args...>::value_t;
+
+template<template<class...> class Op, class... Args>
+struct is_detected_lazy : is_detected<Op, Args...> { };
+
+template<template<class...> class Op, class... Args>
+using detected_t = typename detector<nonesuch, void, Op, Args...>::type;
+
+template<class Default, template<class...> class Op, class... Args>
+using detected_or = detector<Default, void, Op, Args...>;
+
+template<class Default, template<class...> class Op, class... Args>
+using detected_or_t = typename detected_or<Default, Op, Args...>::type;
+
+template<class Expected, template<class...> class Op, class... Args>
+using is_detected_exact = std::is_same<Expected, detected_t<Op, Args...>>;
+
+template<class To, template<class...> class Op, class... Args>
+using is_detected_convertible =
+    std::is_convertible<detected_t<Op, Args...>, To>;
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/thirdparty/hedley/hedley.hpp>
+
+
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-FileCopyrightText: 2016-2021 Evan Nemerson <evan@nemerson.com>
+// SPDX-License-Identifier: MIT
+
+/* Hedley - https://nemequ.github.io/hedley
+ * Created by Evan Nemerson <evan@nemerson.com>
+ */
+
+#if !defined(JSON_HEDLEY_VERSION) || (JSON_HEDLEY_VERSION < 15)
+#if defined(JSON_HEDLEY_VERSION)
+    #undef JSON_HEDLEY_VERSION
+#endif
+#define JSON_HEDLEY_VERSION 15
+
+#if defined(JSON_HEDLEY_STRINGIFY_EX)
+    #undef JSON_HEDLEY_STRINGIFY_EX
+#endif
+#define JSON_HEDLEY_STRINGIFY_EX(x) #x
+
+#if defined(JSON_HEDLEY_STRINGIFY)
+    #undef JSON_HEDLEY_STRINGIFY
+#endif
+#define JSON_HEDLEY_STRINGIFY(x) JSON_HEDLEY_STRINGIFY_EX(x)
+
+#if defined(JSON_HEDLEY_CONCAT_EX)
+    #undef JSON_HEDLEY_CONCAT_EX
+#endif
+#define JSON_HEDLEY_CONCAT_EX(a,b) a##b
+
+#if defined(JSON_HEDLEY_CONCAT)
+    #undef JSON_HEDLEY_CONCAT
+#endif
+#define JSON_HEDLEY_CONCAT(a,b) JSON_HEDLEY_CONCAT_EX(a,b)
+
+#if defined(JSON_HEDLEY_CONCAT3_EX)
+    #undef JSON_HEDLEY_CONCAT3_EX
+#endif
+#define JSON_HEDLEY_CONCAT3_EX(a,b,c) a##b##c
+
+#if defined(JSON_HEDLEY_CONCAT3)
+    #undef JSON_HEDLEY_CONCAT3
+#endif
+#define JSON_HEDLEY_CONCAT3(a,b,c) JSON_HEDLEY_CONCAT3_EX(a,b,c)
+
+#if defined(JSON_HEDLEY_VERSION_ENCODE)
+    #undef JSON_HEDLEY_VERSION_ENCODE
+#endif
+#define JSON_HEDLEY_VERSION_ENCODE(major,minor,revision) (((major) * 1000000) + ((minor) * 1000) + (revision))
+
+#if defined(JSON_HEDLEY_VERSION_DECODE_MAJOR)
+    #undef JSON_HEDLEY_VERSION_DECODE_MAJOR
+#endif
+#define JSON_HEDLEY_VERSION_DECODE_MAJOR(version) ((version) / 1000000)
+
+#if defined(JSON_HEDLEY_VERSION_DECODE_MINOR)
+    #undef JSON_HEDLEY_VERSION_DECODE_MINOR
+#endif
+#define JSON_HEDLEY_VERSION_DECODE_MINOR(version) (((version) % 1000000) / 1000)
+
+#if defined(JSON_HEDLEY_VERSION_DECODE_REVISION)
+    #undef JSON_HEDLEY_VERSION_DECODE_REVISION
+#endif
+#define JSON_HEDLEY_VERSION_DECODE_REVISION(version) ((version) % 1000)
+
+#if defined(JSON_HEDLEY_GNUC_VERSION)
+    #undef JSON_HEDLEY_GNUC_VERSION
+#endif
+#if defined(__GNUC__) && defined(__GNUC_PATCHLEVEL__)
+    #define JSON_HEDLEY_GNUC_VERSION JSON_HEDLEY_VERSION_ENCODE(__GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__)
+#elif defined(__GNUC__)
+    #define JSON_HEDLEY_GNUC_VERSION JSON_HEDLEY_VERSION_ENCODE(__GNUC__, __GNUC_MINOR__, 0)
+#endif
+
+#if defined(JSON_HEDLEY_GNUC_VERSION_CHECK)
+    #undef JSON_HEDLEY_GNUC_VERSION_CHECK
+#endif
+#if defined(JSON_HEDLEY_GNUC_VERSION)
+    #define JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_GNUC_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
+#else
+    #define JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch) (0)
+#endif
+
+#if defined(JSON_HEDLEY_MSVC_VERSION)
+    #undef JSON_HEDLEY_MSVC_VERSION
+#endif
+#if defined(_MSC_FULL_VER) && (_MSC_FULL_VER >= 140000000) && !defined(__ICL)
+    #define JSON_HEDLEY_MSVC_VERSION JSON_HEDLEY_VERSION_ENCODE(_MSC_FULL_VER / 10000000, (_MSC_FULL_VER % 10000000) / 100000, (_MSC_FULL_VER % 100000) / 100)
+#elif defined(_MSC_FULL_VER) && !defined(__ICL)
+    #define JSON_HEDLEY_MSVC_VERSION JSON_HEDLEY_VERSION_ENCODE(_MSC_FULL_VER / 1000000, (_MSC_FULL_VER % 1000000) / 10000, (_MSC_FULL_VER % 10000) / 10)
+#elif defined(_MSC_VER) && !defined(__ICL)
+    #define JSON_HEDLEY_MSVC_VERSION JSON_HEDLEY_VERSION_ENCODE(_MSC_VER / 100, _MSC_VER % 100, 0)
+#endif
+
+#if defined(JSON_HEDLEY_MSVC_VERSION_CHECK)
+    #undef JSON_HEDLEY_MSVC_VERSION_CHECK
+#endif
+#if !defined(JSON_HEDLEY_MSVC_VERSION)
+    #define JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch) (0)
+#elif defined(_MSC_VER) && (_MSC_VER >= 1400)
+    #define JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch) (_MSC_FULL_VER >= ((major * 10000000) + (minor * 100000) + (patch)))
+#elif defined(_MSC_VER) && (_MSC_VER >= 1200)
+    #define JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch) (_MSC_FULL_VER >= ((major * 1000000) + (minor * 10000) + (patch)))
+#else
+    #define JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch) (_MSC_VER >= ((major * 100) + (minor)))
+#endif
+
+#if defined(JSON_HEDLEY_INTEL_VERSION)
+    #undef JSON_HEDLEY_INTEL_VERSION
+#endif
+#if defined(__INTEL_COMPILER) && defined(__INTEL_COMPILER_UPDATE) && !defined(__ICL)
+    #define JSON_HEDLEY_INTEL_VERSION JSON_HEDLEY_VERSION_ENCODE(__INTEL_COMPILER / 100, __INTEL_COMPILER % 100, __INTEL_COMPILER_UPDATE)
+#elif defined(__INTEL_COMPILER) && !defined(__ICL)
+    #define JSON_HEDLEY_INTEL_VERSION JSON_HEDLEY_VERSION_ENCODE(__INTEL_COMPILER / 100, __INTEL_COMPILER % 100, 0)
+#endif
+
+#if defined(JSON_HEDLEY_INTEL_VERSION_CHECK)
+    #undef JSON_HEDLEY_INTEL_VERSION_CHECK
+#endif
+#if defined(JSON_HEDLEY_INTEL_VERSION)
+    #define JSON_HEDLEY_INTEL_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_INTEL_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
+#else
+    #define JSON_HEDLEY_INTEL_VERSION_CHECK(major,minor,patch) (0)
+#endif
+
+#if defined(JSON_HEDLEY_INTEL_CL_VERSION)
+    #undef JSON_HEDLEY_INTEL_CL_VERSION
+#endif
+#if defined(__INTEL_COMPILER) && defined(__INTEL_COMPILER_UPDATE) && defined(__ICL)
+    #define JSON_HEDLEY_INTEL_CL_VERSION JSON_HEDLEY_VERSION_ENCODE(__INTEL_COMPILER, __INTEL_COMPILER_UPDATE, 0)
+#endif
+
+#if defined(JSON_HEDLEY_INTEL_CL_VERSION_CHECK)
+    #undef JSON_HEDLEY_INTEL_CL_VERSION_CHECK
+#endif
+#if defined(JSON_HEDLEY_INTEL_CL_VERSION)
+    #define JSON_HEDLEY_INTEL_CL_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_INTEL_CL_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
+#else
+    #define JSON_HEDLEY_INTEL_CL_VERSION_CHECK(major,minor,patch) (0)
+#endif
+
+#if defined(JSON_HEDLEY_PGI_VERSION)
+    #undef JSON_HEDLEY_PGI_VERSION
+#endif
+#if defined(__PGI) && defined(__PGIC__) && defined(__PGIC_MINOR__) && defined(__PGIC_PATCHLEVEL__)
+    #define JSON_HEDLEY_PGI_VERSION JSON_HEDLEY_VERSION_ENCODE(__PGIC__, __PGIC_MINOR__, __PGIC_PATCHLEVEL__)
+#endif
+
+#if defined(JSON_HEDLEY_PGI_VERSION_CHECK)
+    #undef JSON_HEDLEY_PGI_VERSION_CHECK
+#endif
+#if defined(JSON_HEDLEY_PGI_VERSION)
+    #define JSON_HEDLEY_PGI_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_PGI_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
+#else
+    #define JSON_HEDLEY_PGI_VERSION_CHECK(major,minor,patch) (0)
+#endif
+
+#if defined(JSON_HEDLEY_SUNPRO_VERSION)
+    #undef JSON_HEDLEY_SUNPRO_VERSION
+#endif
+#if defined(__SUNPRO_C) && (__SUNPRO_C > 0x1000)
+    #define JSON_HEDLEY_SUNPRO_VERSION JSON_HEDLEY_VERSION_ENCODE((((__SUNPRO_C >> 16) & 0xf) * 10) + ((__SUNPRO_C >> 12) & 0xf), (((__SUNPRO_C >> 8) & 0xf) * 10) + ((__SUNPRO_C >> 4) & 0xf), (__SUNPRO_C & 0xf) * 10)
+#elif defined(__SUNPRO_C)
+    #define JSON_HEDLEY_SUNPRO_VERSION JSON_HEDLEY_VERSION_ENCODE((__SUNPRO_C >> 8) & 0xf, (__SUNPRO_C >> 4) & 0xf, (__SUNPRO_C) & 0xf)
+#elif defined(__SUNPRO_CC) && (__SUNPRO_CC > 0x1000)
+    #define JSON_HEDLEY_SUNPRO_VERSION JSON_HEDLEY_VERSION_ENCODE((((__SUNPRO_CC >> 16) & 0xf) * 10) + ((__SUNPRO_CC >> 12) & 0xf), (((__SUNPRO_CC >> 8) & 0xf) * 10) + ((__SUNPRO_CC >> 4) & 0xf), (__SUNPRO_CC & 0xf) * 10)
+#elif defined(__SUNPRO_CC)
+    #define JSON_HEDLEY_SUNPRO_VERSION JSON_HEDLEY_VERSION_ENCODE((__SUNPRO_CC >> 8) & 0xf, (__SUNPRO_CC >> 4) & 0xf, (__SUNPRO_CC) & 0xf)
+#endif
+
+#if defined(JSON_HEDLEY_SUNPRO_VERSION_CHECK)
+    #undef JSON_HEDLEY_SUNPRO_VERSION_CHECK
+#endif
+#if defined(JSON_HEDLEY_SUNPRO_VERSION)
+    #define JSON_HEDLEY_SUNPRO_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_SUNPRO_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
+#else
+    #define JSON_HEDLEY_SUNPRO_VERSION_CHECK(major,minor,patch) (0)
+#endif
+
+#if defined(JSON_HEDLEY_EMSCRIPTEN_VERSION)
+    #undef JSON_HEDLEY_EMSCRIPTEN_VERSION
+#endif
+#if defined(__EMSCRIPTEN__)
+    #define JSON_HEDLEY_EMSCRIPTEN_VERSION JSON_HEDLEY_VERSION_ENCODE(__EMSCRIPTEN_major__, __EMSCRIPTEN_minor__, __EMSCRIPTEN_tiny__)
+#endif
+
+#if defined(JSON_HEDLEY_EMSCRIPTEN_VERSION_CHECK)
+    #undef JSON_HEDLEY_EMSCRIPTEN_VERSION_CHECK
+#endif
+#if defined(JSON_HEDLEY_EMSCRIPTEN_VERSION)
+    #define JSON_HEDLEY_EMSCRIPTEN_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_EMSCRIPTEN_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
+#else
+    #define JSON_HEDLEY_EMSCRIPTEN_VERSION_CHECK(major,minor,patch) (0)
+#endif
+
+#if defined(JSON_HEDLEY_ARM_VERSION)
+    #undef JSON_HEDLEY_ARM_VERSION
+#endif
+#if defined(__CC_ARM) && defined(__ARMCOMPILER_VERSION)
+    #define JSON_HEDLEY_ARM_VERSION JSON_HEDLEY_VERSION_ENCODE(__ARMCOMPILER_VERSION / 1000000, (__ARMCOMPILER_VERSION % 1000000) / 10000, (__ARMCOMPILER_VERSION % 10000) / 100)
+#elif defined(__CC_ARM) && defined(__ARMCC_VERSION)
+    #define JSON_HEDLEY_ARM_VERSION JSON_HEDLEY_VERSION_ENCODE(__ARMCC_VERSION / 1000000, (__ARMCC_VERSION % 1000000) / 10000, (__ARMCC_VERSION % 10000) / 100)
+#endif
+
+#if defined(JSON_HEDLEY_ARM_VERSION_CHECK)
+    #undef JSON_HEDLEY_ARM_VERSION_CHECK
+#endif
+#if defined(JSON_HEDLEY_ARM_VERSION)
+    #define JSON_HEDLEY_ARM_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_ARM_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
+#else
+    #define JSON_HEDLEY_ARM_VERSION_CHECK(major,minor,patch) (0)
+#endif
+
+#if defined(JSON_HEDLEY_IBM_VERSION)
+    #undef JSON_HEDLEY_IBM_VERSION
+#endif
+#if defined(__ibmxl__)
+    #define JSON_HEDLEY_IBM_VERSION JSON_HEDLEY_VERSION_ENCODE(__ibmxl_version__, __ibmxl_release__, __ibmxl_modification__)
+#elif defined(__xlC__) && defined(__xlC_ver__)
+    #define JSON_HEDLEY_IBM_VERSION JSON_HEDLEY_VERSION_ENCODE(__xlC__ >> 8, __xlC__ & 0xff, (__xlC_ver__ >> 8) & 0xff)
+#elif defined(__xlC__)
+    #define JSON_HEDLEY_IBM_VERSION JSON_HEDLEY_VERSION_ENCODE(__xlC__ >> 8, __xlC__ & 0xff, 0)
+#endif
+
+#if defined(JSON_HEDLEY_IBM_VERSION_CHECK)
+    #undef JSON_HEDLEY_IBM_VERSION_CHECK
+#endif
+#if defined(JSON_HEDLEY_IBM_VERSION)
+    #define JSON_HEDLEY_IBM_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_IBM_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
+#else
+    #define JSON_HEDLEY_IBM_VERSION_CHECK(major,minor,patch) (0)
+#endif
+
+#if defined(JSON_HEDLEY_TI_VERSION)
+    #undef JSON_HEDLEY_TI_VERSION
+#endif
+#if \
+    defined(__TI_COMPILER_VERSION__) && \
+    ( \
+      defined(__TMS470__) || defined(__TI_ARM__) || \
+      defined(__MSP430__) || \
+      defined(__TMS320C2000__) \
+    )
+#if (__TI_COMPILER_VERSION__ >= 16000000)
+    #define JSON_HEDLEY_TI_VERSION JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__ / 1000000, (__TI_COMPILER_VERSION__ % 1000000) / 1000, (__TI_COMPILER_VERSION__ % 1000))
+#endif
+#endif
+
+#if defined(JSON_HEDLEY_TI_VERSION_CHECK)
+    #undef JSON_HEDLEY_TI_VERSION_CHECK
+#endif
+#if defined(JSON_HEDLEY_TI_VERSION)
+    #define JSON_HEDLEY_TI_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_TI_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
+#else
+    #define JSON_HEDLEY_TI_VERSION_CHECK(major,minor,patch) (0)
+#endif
+
+#if defined(JSON_HEDLEY_TI_CL2000_VERSION)
+    #undef JSON_HEDLEY_TI_CL2000_VERSION
+#endif
+#if defined(__TI_COMPILER_VERSION__) && defined(__TMS320C2000__)
+    #define JSON_HEDLEY_TI_CL2000_VERSION JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__ / 1000000, (__TI_COMPILER_VERSION__ % 1000000) / 1000, (__TI_COMPILER_VERSION__ % 1000))
+#endif
+
+#if defined(JSON_HEDLEY_TI_CL2000_VERSION_CHECK)
+    #undef JSON_HEDLEY_TI_CL2000_VERSION_CHECK
+#endif
+#if defined(JSON_HEDLEY_TI_CL2000_VERSION)
+    #define JSON_HEDLEY_TI_CL2000_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_TI_CL2000_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
+#else
+    #define JSON_HEDLEY_TI_CL2000_VERSION_CHECK(major,minor,patch) (0)
+#endif
+
+#if defined(JSON_HEDLEY_TI_CL430_VERSION)
+    #undef JSON_HEDLEY_TI_CL430_VERSION
+#endif
+#if defined(__TI_COMPILER_VERSION__) && defined(__MSP430__)
+    #define JSON_HEDLEY_TI_CL430_VERSION JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__ / 1000000, (__TI_COMPILER_VERSION__ % 1000000) / 1000, (__TI_COMPILER_VERSION__ % 1000))
+#endif
+
+#if defined(JSON_HEDLEY_TI_CL430_VERSION_CHECK)
+    #undef JSON_HEDLEY_TI_CL430_VERSION_CHECK
+#endif
+#if defined(JSON_HEDLEY_TI_CL430_VERSION)
+    #define JSON_HEDLEY_TI_CL430_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_TI_CL430_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
+#else
+    #define JSON_HEDLEY_TI_CL430_VERSION_CHECK(major,minor,patch) (0)
+#endif
+
+#if defined(JSON_HEDLEY_TI_ARMCL_VERSION)
+    #undef JSON_HEDLEY_TI_ARMCL_VERSION
+#endif
+#if defined(__TI_COMPILER_VERSION__) && (defined(__TMS470__) || defined(__TI_ARM__))
+    #define JSON_HEDLEY_TI_ARMCL_VERSION JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__ / 1000000, (__TI_COMPILER_VERSION__ % 1000000) / 1000, (__TI_COMPILER_VERSION__ % 1000))
+#endif
+
+#if defined(JSON_HEDLEY_TI_ARMCL_VERSION_CHECK)
+    #undef JSON_HEDLEY_TI_ARMCL_VERSION_CHECK
+#endif
+#if defined(JSON_HEDLEY_TI_ARMCL_VERSION)
+    #define JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_TI_ARMCL_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
+#else
+    #define JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(major,minor,patch) (0)
+#endif
+
+#if defined(JSON_HEDLEY_TI_CL6X_VERSION)
+    #undef JSON_HEDLEY_TI_CL6X_VERSION
+#endif
+#if defined(__TI_COMPILER_VERSION__) && defined(__TMS320C6X__)
+    #define JSON_HEDLEY_TI_CL6X_VERSION JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__ / 1000000, (__TI_COMPILER_VERSION__ % 1000000) / 1000, (__TI_COMPILER_VERSION__ % 1000))
+#endif
+
+#if defined(JSON_HEDLEY_TI_CL6X_VERSION_CHECK)
+    #undef JSON_HEDLEY_TI_CL6X_VERSION_CHECK
+#endif
+#if defined(JSON_HEDLEY_TI_CL6X_VERSION)
+    #define JSON_HEDLEY_TI_CL6X_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_TI_CL6X_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
+#else
+    #define JSON_HEDLEY_TI_CL6X_VERSION_CHECK(major,minor,patch) (0)
+#endif
+
+#if defined(JSON_HEDLEY_TI_CL7X_VERSION)
+    #undef JSON_HEDLEY_TI_CL7X_VERSION
+#endif
+#if defined(__TI_COMPILER_VERSION__) && defined(__C7000__)
+    #define JSON_HEDLEY_TI_CL7X_VERSION JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__ / 1000000, (__TI_COMPILER_VERSION__ % 1000000) / 1000, (__TI_COMPILER_VERSION__ % 1000))
+#endif
+
+#if defined(JSON_HEDLEY_TI_CL7X_VERSION_CHECK)
+    #undef JSON_HEDLEY_TI_CL7X_VERSION_CHECK
+#endif
+#if defined(JSON_HEDLEY_TI_CL7X_VERSION)
+    #define JSON_HEDLEY_TI_CL7X_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_TI_CL7X_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
+#else
+    #define JSON_HEDLEY_TI_CL7X_VERSION_CHECK(major,minor,patch) (0)
+#endif
+
+#if defined(JSON_HEDLEY_TI_CLPRU_VERSION)
+    #undef JSON_HEDLEY_TI_CLPRU_VERSION
+#endif
+#if defined(__TI_COMPILER_VERSION__) && defined(__PRU__)
+    #define JSON_HEDLEY_TI_CLPRU_VERSION JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__ / 1000000, (__TI_COMPILER_VERSION__ % 1000000) / 1000, (__TI_COMPILER_VERSION__ % 1000))
+#endif
+
+#if defined(JSON_HEDLEY_TI_CLPRU_VERSION_CHECK)
+    #undef JSON_HEDLEY_TI_CLPRU_VERSION_CHECK
+#endif
+#if defined(JSON_HEDLEY_TI_CLPRU_VERSION)
+    #define JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_TI_CLPRU_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
+#else
+    #define JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(major,minor,patch) (0)
+#endif
+
+#if defined(JSON_HEDLEY_CRAY_VERSION)
+    #undef JSON_HEDLEY_CRAY_VERSION
+#endif
+#if defined(_CRAYC)
+    #if defined(_RELEASE_PATCHLEVEL)
+        #define JSON_HEDLEY_CRAY_VERSION JSON_HEDLEY_VERSION_ENCODE(_RELEASE_MAJOR, _RELEASE_MINOR, _RELEASE_PATCHLEVEL)
+    #else
+        #define JSON_HEDLEY_CRAY_VERSION JSON_HEDLEY_VERSION_ENCODE(_RELEASE_MAJOR, _RELEASE_MINOR, 0)
+    #endif
+#endif
+
+#if defined(JSON_HEDLEY_CRAY_VERSION_CHECK)
+    #undef JSON_HEDLEY_CRAY_VERSION_CHECK
+#endif
+#if defined(JSON_HEDLEY_CRAY_VERSION)
+    #define JSON_HEDLEY_CRAY_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_CRAY_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
+#else
+    #define JSON_HEDLEY_CRAY_VERSION_CHECK(major,minor,patch) (0)
+#endif
+
+#if defined(JSON_HEDLEY_IAR_VERSION)
+    #undef JSON_HEDLEY_IAR_VERSION
+#endif
+#if defined(__IAR_SYSTEMS_ICC__)
+    #if __VER__ > 1000
+        #define JSON_HEDLEY_IAR_VERSION JSON_HEDLEY_VERSION_ENCODE((__VER__ / 1000000), ((__VER__ / 1000) % 1000), (__VER__ % 1000))
+    #else
+        #define JSON_HEDLEY_IAR_VERSION JSON_HEDLEY_VERSION_ENCODE(__VER__ / 100, __VER__ % 100, 0)
+    #endif
+#endif
+
+#if defined(JSON_HEDLEY_IAR_VERSION_CHECK)
+    #undef JSON_HEDLEY_IAR_VERSION_CHECK
+#endif
+#if defined(JSON_HEDLEY_IAR_VERSION)
+    #define JSON_HEDLEY_IAR_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_IAR_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
+#else
+    #define JSON_HEDLEY_IAR_VERSION_CHECK(major,minor,patch) (0)
+#endif
+
+#if defined(JSON_HEDLEY_TINYC_VERSION)
+    #undef JSON_HEDLEY_TINYC_VERSION
+#endif
+#if defined(__TINYC__)
+    #define JSON_HEDLEY_TINYC_VERSION JSON_HEDLEY_VERSION_ENCODE(__TINYC__ / 1000, (__TINYC__ / 100) % 10, __TINYC__ % 100)
+#endif
+
+#if defined(JSON_HEDLEY_TINYC_VERSION_CHECK)
+    #undef JSON_HEDLEY_TINYC_VERSION_CHECK
+#endif
+#if defined(JSON_HEDLEY_TINYC_VERSION)
+    #define JSON_HEDLEY_TINYC_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_TINYC_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
+#else
+    #define JSON_HEDLEY_TINYC_VERSION_CHECK(major,minor,patch) (0)
+#endif
+
+#if defined(JSON_HEDLEY_DMC_VERSION)
+    #undef JSON_HEDLEY_DMC_VERSION
+#endif
+#if defined(__DMC__)
+    #define JSON_HEDLEY_DMC_VERSION JSON_HEDLEY_VERSION_ENCODE(__DMC__ >> 8, (__DMC__ >> 4) & 0xf, __DMC__ & 0xf)
+#endif
+
+#if defined(JSON_HEDLEY_DMC_VERSION_CHECK)
+    #undef JSON_HEDLEY_DMC_VERSION_CHECK
+#endif
+#if defined(JSON_HEDLEY_DMC_VERSION)
+    #define JSON_HEDLEY_DMC_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_DMC_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
+#else
+    #define JSON_HEDLEY_DMC_VERSION_CHECK(major,minor,patch) (0)
+#endif
+
+#if defined(JSON_HEDLEY_COMPCERT_VERSION)
+    #undef JSON_HEDLEY_COMPCERT_VERSION
+#endif
+#if defined(__COMPCERT_VERSION__)
+    #define JSON_HEDLEY_COMPCERT_VERSION JSON_HEDLEY_VERSION_ENCODE(__COMPCERT_VERSION__ / 10000, (__COMPCERT_VERSION__ / 100) % 100, __COMPCERT_VERSION__ % 100)
+#endif
+
+#if defined(JSON_HEDLEY_COMPCERT_VERSION_CHECK)
+    #undef JSON_HEDLEY_COMPCERT_VERSION_CHECK
+#endif
+#if defined(JSON_HEDLEY_COMPCERT_VERSION)
+    #define JSON_HEDLEY_COMPCERT_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_COMPCERT_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
+#else
+    #define JSON_HEDLEY_COMPCERT_VERSION_CHECK(major,minor,patch) (0)
+#endif
+
+#if defined(JSON_HEDLEY_PELLES_VERSION)
+    #undef JSON_HEDLEY_PELLES_VERSION
+#endif
+#if defined(__POCC__)
+    #define JSON_HEDLEY_PELLES_VERSION JSON_HEDLEY_VERSION_ENCODE(__POCC__ / 100, __POCC__ % 100, 0)
+#endif
+
+#if defined(JSON_HEDLEY_PELLES_VERSION_CHECK)
+    #undef JSON_HEDLEY_PELLES_VERSION_CHECK
+#endif
+#if defined(JSON_HEDLEY_PELLES_VERSION)
+    #define JSON_HEDLEY_PELLES_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_PELLES_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
+#else
+    #define JSON_HEDLEY_PELLES_VERSION_CHECK(major,minor,patch) (0)
+#endif
+
+#if defined(JSON_HEDLEY_MCST_LCC_VERSION)
+    #undef JSON_HEDLEY_MCST_LCC_VERSION
+#endif
+#if defined(__LCC__) && defined(__LCC_MINOR__)
+    #define JSON_HEDLEY_MCST_LCC_VERSION JSON_HEDLEY_VERSION_ENCODE(__LCC__ / 100, __LCC__ % 100, __LCC_MINOR__)
+#endif
+
+#if defined(JSON_HEDLEY_MCST_LCC_VERSION_CHECK)
+    #undef JSON_HEDLEY_MCST_LCC_VERSION_CHECK
+#endif
+#if defined(JSON_HEDLEY_MCST_LCC_VERSION)
+    #define JSON_HEDLEY_MCST_LCC_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_MCST_LCC_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
+#else
+    #define JSON_HEDLEY_MCST_LCC_VERSION_CHECK(major,minor,patch) (0)
+#endif
+
+#if defined(JSON_HEDLEY_GCC_VERSION)
+    #undef JSON_HEDLEY_GCC_VERSION
+#endif
+#if \
+    defined(JSON_HEDLEY_GNUC_VERSION) && \
+    !defined(__clang__) && \
+    !defined(JSON_HEDLEY_INTEL_VERSION) && \
+    !defined(JSON_HEDLEY_PGI_VERSION) && \
+    !defined(JSON_HEDLEY_ARM_VERSION) && \
+    !defined(JSON_HEDLEY_CRAY_VERSION) && \
+    !defined(JSON_HEDLEY_TI_VERSION) && \
+    !defined(JSON_HEDLEY_TI_ARMCL_VERSION) && \
+    !defined(JSON_HEDLEY_TI_CL430_VERSION) && \
+    !defined(JSON_HEDLEY_TI_CL2000_VERSION) && \
+    !defined(JSON_HEDLEY_TI_CL6X_VERSION) && \
+    !defined(JSON_HEDLEY_TI_CL7X_VERSION) && \
+    !defined(JSON_HEDLEY_TI_CLPRU_VERSION) && \
+    !defined(__COMPCERT__) && \
+    !defined(JSON_HEDLEY_MCST_LCC_VERSION)
+    #define JSON_HEDLEY_GCC_VERSION JSON_HEDLEY_GNUC_VERSION
+#endif
+
+#if defined(JSON_HEDLEY_GCC_VERSION_CHECK)
+    #undef JSON_HEDLEY_GCC_VERSION_CHECK
+#endif
+#if defined(JSON_HEDLEY_GCC_VERSION)
+    #define JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_GCC_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
+#else
+    #define JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch) (0)
+#endif
+
+#if defined(JSON_HEDLEY_HAS_ATTRIBUTE)
+    #undef JSON_HEDLEY_HAS_ATTRIBUTE
+#endif
+#if \
+  defined(__has_attribute) && \
+  ( \
+    (!defined(JSON_HEDLEY_IAR_VERSION) || JSON_HEDLEY_IAR_VERSION_CHECK(8,5,9)) \
+  )
+#  define JSON_HEDLEY_HAS_ATTRIBUTE(attribute) __has_attribute(attribute)
+#else
+#  define JSON_HEDLEY_HAS_ATTRIBUTE(attribute) (0)
+#endif
+
+#if defined(JSON_HEDLEY_GNUC_HAS_ATTRIBUTE)
+    #undef JSON_HEDLEY_GNUC_HAS_ATTRIBUTE
+#endif
+#if defined(__has_attribute)
+    #define JSON_HEDLEY_GNUC_HAS_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_HAS_ATTRIBUTE(attribute)
+#else
+    #define JSON_HEDLEY_GNUC_HAS_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)
+#endif
+
+#if defined(JSON_HEDLEY_GCC_HAS_ATTRIBUTE)
+    #undef JSON_HEDLEY_GCC_HAS_ATTRIBUTE
+#endif
+#if defined(__has_attribute)
+    #define JSON_HEDLEY_GCC_HAS_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_HAS_ATTRIBUTE(attribute)
+#else
+    #define JSON_HEDLEY_GCC_HAS_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)
+#endif
+
+#if defined(JSON_HEDLEY_HAS_CPP_ATTRIBUTE)
+    #undef JSON_HEDLEY_HAS_CPP_ATTRIBUTE
+#endif
+#if \
+    defined(__has_cpp_attribute) && \
+    defined(__cplusplus) && \
+    (!defined(JSON_HEDLEY_SUNPRO_VERSION) || JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,15,0))
+    #define JSON_HEDLEY_HAS_CPP_ATTRIBUTE(attribute) __has_cpp_attribute(attribute)
+#else
+    #define JSON_HEDLEY_HAS_CPP_ATTRIBUTE(attribute) (0)
+#endif
+
+#if defined(JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS)
+    #undef JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS
+#endif
+#if !defined(__cplusplus) || !defined(__has_cpp_attribute)
+    #define JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS(ns,attribute) (0)
+#elif \
+    !defined(JSON_HEDLEY_PGI_VERSION) && \
+    !defined(JSON_HEDLEY_IAR_VERSION) && \
+    (!defined(JSON_HEDLEY_SUNPRO_VERSION) || JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,15,0)) && \
+    (!defined(JSON_HEDLEY_MSVC_VERSION) || JSON_HEDLEY_MSVC_VERSION_CHECK(19,20,0))
+    #define JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS(ns,attribute) JSON_HEDLEY_HAS_CPP_ATTRIBUTE(ns::attribute)
+#else
+    #define JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS(ns,attribute) (0)
+#endif
+
+#if defined(JSON_HEDLEY_GNUC_HAS_CPP_ATTRIBUTE)
+    #undef JSON_HEDLEY_GNUC_HAS_CPP_ATTRIBUTE
+#endif
+#if defined(__has_cpp_attribute) && defined(__cplusplus)
+    #define JSON_HEDLEY_GNUC_HAS_CPP_ATTRIBUTE(attribute,major,minor,patch) __has_cpp_attribute(attribute)
+#else
+    #define JSON_HEDLEY_GNUC_HAS_CPP_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)
+#endif
+
+#if defined(JSON_HEDLEY_GCC_HAS_CPP_ATTRIBUTE)
+    #undef JSON_HEDLEY_GCC_HAS_CPP_ATTRIBUTE
+#endif
+#if defined(__has_cpp_attribute) && defined(__cplusplus)
+    #define JSON_HEDLEY_GCC_HAS_CPP_ATTRIBUTE(attribute,major,minor,patch) __has_cpp_attribute(attribute)
+#else
+    #define JSON_HEDLEY_GCC_HAS_CPP_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)
+#endif
+
+#if defined(JSON_HEDLEY_HAS_BUILTIN)
+    #undef JSON_HEDLEY_HAS_BUILTIN
+#endif
+#if defined(__has_builtin)
+    #define JSON_HEDLEY_HAS_BUILTIN(builtin) __has_builtin(builtin)
+#else
+    #define JSON_HEDLEY_HAS_BUILTIN(builtin) (0)
+#endif
+
+#if defined(JSON_HEDLEY_GNUC_HAS_BUILTIN)
+    #undef JSON_HEDLEY_GNUC_HAS_BUILTIN
+#endif
+#if defined(__has_builtin)
+    #define JSON_HEDLEY_GNUC_HAS_BUILTIN(builtin,major,minor,patch) __has_builtin(builtin)
+#else
+    #define JSON_HEDLEY_GNUC_HAS_BUILTIN(builtin,major,minor,patch) JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)
+#endif
+
+#if defined(JSON_HEDLEY_GCC_HAS_BUILTIN)
+    #undef JSON_HEDLEY_GCC_HAS_BUILTIN
+#endif
+#if defined(__has_builtin)
+    #define JSON_HEDLEY_GCC_HAS_BUILTIN(builtin,major,minor,patch) __has_builtin(builtin)
+#else
+    #define JSON_HEDLEY_GCC_HAS_BUILTIN(builtin,major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)
+#endif
+
+#if defined(JSON_HEDLEY_HAS_FEATURE)
+    #undef JSON_HEDLEY_HAS_FEATURE
+#endif
+#if defined(__has_feature)
+    #define JSON_HEDLEY_HAS_FEATURE(feature) __has_feature(feature)
+#else
+    #define JSON_HEDLEY_HAS_FEATURE(feature) (0)
+#endif
+
+#if defined(JSON_HEDLEY_GNUC_HAS_FEATURE)
+    #undef JSON_HEDLEY_GNUC_HAS_FEATURE
+#endif
+#if defined(__has_feature)
+    #define JSON_HEDLEY_GNUC_HAS_FEATURE(feature,major,minor,patch) __has_feature(feature)
+#else
+    #define JSON_HEDLEY_GNUC_HAS_FEATURE(feature,major,minor,patch) JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)
+#endif
+
+#if defined(JSON_HEDLEY_GCC_HAS_FEATURE)
+    #undef JSON_HEDLEY_GCC_HAS_FEATURE
+#endif
+#if defined(__has_feature)
+    #define JSON_HEDLEY_GCC_HAS_FEATURE(feature,major,minor,patch) __has_feature(feature)
+#else
+    #define JSON_HEDLEY_GCC_HAS_FEATURE(feature,major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)
+#endif
+
+#if defined(JSON_HEDLEY_HAS_EXTENSION)
+    #undef JSON_HEDLEY_HAS_EXTENSION
+#endif
+#if defined(__has_extension)
+    #define JSON_HEDLEY_HAS_EXTENSION(extension) __has_extension(extension)
+#else
+    #define JSON_HEDLEY_HAS_EXTENSION(extension) (0)
+#endif
+
+#if defined(JSON_HEDLEY_GNUC_HAS_EXTENSION)
+    #undef JSON_HEDLEY_GNUC_HAS_EXTENSION
+#endif
+#if defined(__has_extension)
+    #define JSON_HEDLEY_GNUC_HAS_EXTENSION(extension,major,minor,patch) __has_extension(extension)
+#else
+    #define JSON_HEDLEY_GNUC_HAS_EXTENSION(extension,major,minor,patch) JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)
+#endif
+
+#if defined(JSON_HEDLEY_GCC_HAS_EXTENSION)
+    #undef JSON_HEDLEY_GCC_HAS_EXTENSION
+#endif
+#if defined(__has_extension)
+    #define JSON_HEDLEY_GCC_HAS_EXTENSION(extension,major,minor,patch) __has_extension(extension)
+#else
+    #define JSON_HEDLEY_GCC_HAS_EXTENSION(extension,major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)
+#endif
+
+#if defined(JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE)
+    #undef JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE
+#endif
+#if defined(__has_declspec_attribute)
+    #define JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE(attribute) __has_declspec_attribute(attribute)
+#else
+    #define JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE(attribute) (0)
+#endif
+
+#if defined(JSON_HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE)
+    #undef JSON_HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE
+#endif
+#if defined(__has_declspec_attribute)
+    #define JSON_HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE(attribute,major,minor,patch) __has_declspec_attribute(attribute)
+#else
+    #define JSON_HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)
+#endif
+
+#if defined(JSON_HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE)
+    #undef JSON_HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE
+#endif
+#if defined(__has_declspec_attribute)
+    #define JSON_HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE(attribute,major,minor,patch) __has_declspec_attribute(attribute)
+#else
+    #define JSON_HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)
+#endif
+
+#if defined(JSON_HEDLEY_HAS_WARNING)
+    #undef JSON_HEDLEY_HAS_WARNING
+#endif
+#if defined(__has_warning)
+    #define JSON_HEDLEY_HAS_WARNING(warning) __has_warning(warning)
+#else
+    #define JSON_HEDLEY_HAS_WARNING(warning) (0)
+#endif
+
+#if defined(JSON_HEDLEY_GNUC_HAS_WARNING)
+    #undef JSON_HEDLEY_GNUC_HAS_WARNING
+#endif
+#if defined(__has_warning)
+    #define JSON_HEDLEY_GNUC_HAS_WARNING(warning,major,minor,patch) __has_warning(warning)
+#else
+    #define JSON_HEDLEY_GNUC_HAS_WARNING(warning,major,minor,patch) JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)
+#endif
+
+#if defined(JSON_HEDLEY_GCC_HAS_WARNING)
+    #undef JSON_HEDLEY_GCC_HAS_WARNING
+#endif
+#if defined(__has_warning)
+    #define JSON_HEDLEY_GCC_HAS_WARNING(warning,major,minor,patch) __has_warning(warning)
+#else
+    #define JSON_HEDLEY_GCC_HAS_WARNING(warning,major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)
+#endif
+
+#if \
+    (defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L)) || \
+    defined(__clang__) || \
+    JSON_HEDLEY_GCC_VERSION_CHECK(3,0,0) || \
+    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
+    JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0) || \
+    JSON_HEDLEY_PGI_VERSION_CHECK(18,4,0) || \
+    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
+    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \
+    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,7,0) || \
+    JSON_HEDLEY_TI_CL430_VERSION_CHECK(2,0,1) || \
+    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,1,0) || \
+    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,0,0) || \
+    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
+    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \
+    JSON_HEDLEY_CRAY_VERSION_CHECK(5,0,0) || \
+    JSON_HEDLEY_TINYC_VERSION_CHECK(0,9,17) || \
+    JSON_HEDLEY_SUNPRO_VERSION_CHECK(8,0,0) || \
+    (JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) && defined(__C99_PRAGMA_OPERATOR))
+    #define JSON_HEDLEY_PRAGMA(value) _Pragma(#value)
+#elif JSON_HEDLEY_MSVC_VERSION_CHECK(15,0,0)
+    #define JSON_HEDLEY_PRAGMA(value) __pragma(value)
+#else
+    #define JSON_HEDLEY_PRAGMA(value)
+#endif
+
+#if defined(JSON_HEDLEY_DIAGNOSTIC_PUSH)
+    #undef JSON_HEDLEY_DIAGNOSTIC_PUSH
+#endif
+#if defined(JSON_HEDLEY_DIAGNOSTIC_POP)
+    #undef JSON_HEDLEY_DIAGNOSTIC_POP
+#endif
+#if defined(__clang__)
+    #define JSON_HEDLEY_DIAGNOSTIC_PUSH _Pragma("clang diagnostic push")
+    #define JSON_HEDLEY_DIAGNOSTIC_POP _Pragma("clang diagnostic pop")
+#elif JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_PUSH _Pragma("warning(push)")
+    #define JSON_HEDLEY_DIAGNOSTIC_POP _Pragma("warning(pop)")
+#elif JSON_HEDLEY_GCC_VERSION_CHECK(4,6,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_PUSH _Pragma("GCC diagnostic push")
+    #define JSON_HEDLEY_DIAGNOSTIC_POP _Pragma("GCC diagnostic pop")
+#elif \
+    JSON_HEDLEY_MSVC_VERSION_CHECK(15,0,0) || \
+    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_PUSH __pragma(warning(push))
+    #define JSON_HEDLEY_DIAGNOSTIC_POP __pragma(warning(pop))
+#elif JSON_HEDLEY_ARM_VERSION_CHECK(5,6,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_PUSH _Pragma("push")
+    #define JSON_HEDLEY_DIAGNOSTIC_POP _Pragma("pop")
+#elif \
+    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \
+    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \
+    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,4,0) || \
+    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(8,1,0) || \
+    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
+    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_PUSH _Pragma("diag_push")
+    #define JSON_HEDLEY_DIAGNOSTIC_POP _Pragma("diag_pop")
+#elif JSON_HEDLEY_PELLES_VERSION_CHECK(2,90,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_PUSH _Pragma("warning(push)")
+    #define JSON_HEDLEY_DIAGNOSTIC_POP _Pragma("warning(pop)")
+#else
+    #define JSON_HEDLEY_DIAGNOSTIC_PUSH
+    #define JSON_HEDLEY_DIAGNOSTIC_POP
+#endif
+
+/* JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_ is for
+   HEDLEY INTERNAL USE ONLY.  API subject to change without notice. */
+#if defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_)
+    #undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_
+#endif
+#if defined(__cplusplus)
+#  if JSON_HEDLEY_HAS_WARNING("-Wc++98-compat")
+#    if JSON_HEDLEY_HAS_WARNING("-Wc++17-extensions")
+#      if JSON_HEDLEY_HAS_WARNING("-Wc++1z-extensions")
+#        define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(xpr) \
+    JSON_HEDLEY_DIAGNOSTIC_PUSH \
+    _Pragma("clang diagnostic ignored \"-Wc++98-compat\"") \
+    _Pragma("clang diagnostic ignored \"-Wc++17-extensions\"") \
+    _Pragma("clang diagnostic ignored \"-Wc++1z-extensions\"") \
+    xpr \
+    JSON_HEDLEY_DIAGNOSTIC_POP
+#      else
+#        define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(xpr) \
+    JSON_HEDLEY_DIAGNOSTIC_PUSH \
+    _Pragma("clang diagnostic ignored \"-Wc++98-compat\"") \
+    _Pragma("clang diagnostic ignored \"-Wc++17-extensions\"") \
+    xpr \
+    JSON_HEDLEY_DIAGNOSTIC_POP
+#      endif
+#    else
+#      define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(xpr) \
+    JSON_HEDLEY_DIAGNOSTIC_PUSH \
+    _Pragma("clang diagnostic ignored \"-Wc++98-compat\"") \
+    xpr \
+    JSON_HEDLEY_DIAGNOSTIC_POP
+#    endif
+#  endif
+#endif
+#if !defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(x) x
+#endif
+
+#if defined(JSON_HEDLEY_CONST_CAST)
+    #undef JSON_HEDLEY_CONST_CAST
+#endif
+#if defined(__cplusplus)
+#  define JSON_HEDLEY_CONST_CAST(T, expr) (const_cast<T>(expr))
+#elif \
+  JSON_HEDLEY_HAS_WARNING("-Wcast-qual") || \
+  JSON_HEDLEY_GCC_VERSION_CHECK(4,6,0) || \
+  JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)
+#  define JSON_HEDLEY_CONST_CAST(T, expr) (__extension__ ({ \
+        JSON_HEDLEY_DIAGNOSTIC_PUSH \
+        JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL \
+        ((T) (expr)); \
+        JSON_HEDLEY_DIAGNOSTIC_POP \
+    }))
+#else
+#  define JSON_HEDLEY_CONST_CAST(T, expr) ((T) (expr))
+#endif
+
+#if defined(JSON_HEDLEY_REINTERPRET_CAST)
+    #undef JSON_HEDLEY_REINTERPRET_CAST
+#endif
+#if defined(__cplusplus)
+    #define JSON_HEDLEY_REINTERPRET_CAST(T, expr) (reinterpret_cast<T>(expr))
+#else
+    #define JSON_HEDLEY_REINTERPRET_CAST(T, expr) ((T) (expr))
+#endif
+
+#if defined(JSON_HEDLEY_STATIC_CAST)
+    #undef JSON_HEDLEY_STATIC_CAST
+#endif
+#if defined(__cplusplus)
+    #define JSON_HEDLEY_STATIC_CAST(T, expr) (static_cast<T>(expr))
+#else
+    #define JSON_HEDLEY_STATIC_CAST(T, expr) ((T) (expr))
+#endif
+
+#if defined(JSON_HEDLEY_CPP_CAST)
+    #undef JSON_HEDLEY_CPP_CAST
+#endif
+#if defined(__cplusplus)
+#  if JSON_HEDLEY_HAS_WARNING("-Wold-style-cast")
+#    define JSON_HEDLEY_CPP_CAST(T, expr) \
+    JSON_HEDLEY_DIAGNOSTIC_PUSH \
+    _Pragma("clang diagnostic ignored \"-Wold-style-cast\"") \
+    ((T) (expr)) \
+    JSON_HEDLEY_DIAGNOSTIC_POP
+#  elif JSON_HEDLEY_IAR_VERSION_CHECK(8,3,0)
+#    define JSON_HEDLEY_CPP_CAST(T, expr) \
+    JSON_HEDLEY_DIAGNOSTIC_PUSH \
+    _Pragma("diag_suppress=Pe137") \
+    JSON_HEDLEY_DIAGNOSTIC_POP
+#  else
+#    define JSON_HEDLEY_CPP_CAST(T, expr) ((T) (expr))
+#  endif
+#else
+#  define JSON_HEDLEY_CPP_CAST(T, expr) (expr)
+#endif
+
+#if defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED)
+    #undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED
+#endif
+#if JSON_HEDLEY_HAS_WARNING("-Wdeprecated-declarations")
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("clang diagnostic ignored \"-Wdeprecated-declarations\"")
+#elif JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("warning(disable:1478 1786)")
+#elif JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED __pragma(warning(disable:1478 1786))
+#elif JSON_HEDLEY_PGI_VERSION_CHECK(20,7,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("diag_suppress 1215,1216,1444,1445")
+#elif JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("diag_suppress 1215,1444")
+#elif JSON_HEDLEY_GCC_VERSION_CHECK(4,3,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("GCC diagnostic ignored \"-Wdeprecated-declarations\"")
+#elif JSON_HEDLEY_MSVC_VERSION_CHECK(15,0,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED __pragma(warning(disable:4996))
+#elif JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("diag_suppress 1215,1444")
+#elif \
+    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \
+    (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \
+    (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \
+    (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \
+    (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \
+    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
+    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("diag_suppress 1291,1718")
+#elif JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,13,0) && !defined(__cplusplus)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("error_messages(off,E_DEPRECATED_ATT,E_DEPRECATED_ATT_MESS)")
+#elif JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,13,0) && defined(__cplusplus)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("error_messages(off,symdeprecated,symdeprecated2)")
+#elif JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("diag_suppress=Pe1444,Pe1215")
+#elif JSON_HEDLEY_PELLES_VERSION_CHECK(2,90,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("warn(disable:2241)")
+#else
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED
+#endif
+
+#if defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS)
+    #undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS
+#endif
+#if JSON_HEDLEY_HAS_WARNING("-Wunknown-pragmas")
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma("clang diagnostic ignored \"-Wunknown-pragmas\"")
+#elif JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma("warning(disable:161)")
+#elif JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS __pragma(warning(disable:161))
+#elif JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma("diag_suppress 1675")
+#elif JSON_HEDLEY_GCC_VERSION_CHECK(4,3,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma("GCC diagnostic ignored \"-Wunknown-pragmas\"")
+#elif JSON_HEDLEY_MSVC_VERSION_CHECK(15,0,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS __pragma(warning(disable:4068))
+#elif \
+    JSON_HEDLEY_TI_VERSION_CHECK(16,9,0) || \
+    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(8,0,0) || \
+    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
+    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,3,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma("diag_suppress 163")
+#elif JSON_HEDLEY_TI_CL6X_VERSION_CHECK(8,0,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma("diag_suppress 163")
+#elif JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma("diag_suppress=Pe161")
+#elif JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma("diag_suppress 161")
+#else
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS
+#endif
+
+#if defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES)
+    #undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES
+#endif
+#if JSON_HEDLEY_HAS_WARNING("-Wunknown-attributes")
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("clang diagnostic ignored \"-Wunknown-attributes\"")
+#elif JSON_HEDLEY_GCC_VERSION_CHECK(4,6,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("GCC diagnostic ignored \"-Wdeprecated-declarations\"")
+#elif JSON_HEDLEY_INTEL_VERSION_CHECK(17,0,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("warning(disable:1292)")
+#elif JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES __pragma(warning(disable:1292))
+#elif JSON_HEDLEY_MSVC_VERSION_CHECK(19,0,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES __pragma(warning(disable:5030))
+#elif JSON_HEDLEY_PGI_VERSION_CHECK(20,7,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("diag_suppress 1097,1098")
+#elif JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("diag_suppress 1097")
+#elif JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,14,0) && defined(__cplusplus)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("error_messages(off,attrskipunsup)")
+#elif \
+    JSON_HEDLEY_TI_VERSION_CHECK(18,1,0) || \
+    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(8,3,0) || \
+    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("diag_suppress 1173")
+#elif JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("diag_suppress=Pe1097")
+#elif JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("diag_suppress 1097")
+#else
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES
+#endif
+
+#if defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL)
+    #undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL
+#endif
+#if JSON_HEDLEY_HAS_WARNING("-Wcast-qual")
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL _Pragma("clang diagnostic ignored \"-Wcast-qual\"")
+#elif JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL _Pragma("warning(disable:2203 2331)")
+#elif JSON_HEDLEY_GCC_VERSION_CHECK(3,0,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL _Pragma("GCC diagnostic ignored \"-Wcast-qual\"")
+#else
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL
+#endif
+
+#if defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION)
+    #undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION
+#endif
+#if JSON_HEDLEY_HAS_WARNING("-Wunused-function")
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION _Pragma("clang diagnostic ignored \"-Wunused-function\"")
+#elif JSON_HEDLEY_GCC_VERSION_CHECK(3,4,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION _Pragma("GCC diagnostic ignored \"-Wunused-function\"")
+#elif JSON_HEDLEY_MSVC_VERSION_CHECK(1,0,0)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION __pragma(warning(disable:4505))
+#elif JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION _Pragma("diag_suppress 3142")
+#else
+    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION
+#endif
+
+#if defined(JSON_HEDLEY_DEPRECATED)
+    #undef JSON_HEDLEY_DEPRECATED
+#endif
+#if defined(JSON_HEDLEY_DEPRECATED_FOR)
+    #undef JSON_HEDLEY_DEPRECATED_FOR
+#endif
+#if \
+    JSON_HEDLEY_MSVC_VERSION_CHECK(14,0,0) || \
+    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)
+    #define JSON_HEDLEY_DEPRECATED(since) __declspec(deprecated("Since " # since))
+    #define JSON_HEDLEY_DEPRECATED_FOR(since, replacement) __declspec(deprecated("Since " #since "; use " #replacement))
+#elif \
+    (JSON_HEDLEY_HAS_EXTENSION(attribute_deprecated_with_message) && !defined(JSON_HEDLEY_IAR_VERSION)) || \
+    JSON_HEDLEY_GCC_VERSION_CHECK(4,5,0) || \
+    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
+    JSON_HEDLEY_ARM_VERSION_CHECK(5,6,0) || \
+    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,13,0) || \
+    JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0) || \
+    JSON_HEDLEY_TI_VERSION_CHECK(18,1,0) || \
+    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(18,1,0) || \
+    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(8,3,0) || \
+    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
+    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,3,0) || \
+    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
+    #define JSON_HEDLEY_DEPRECATED(since) __attribute__((__deprecated__("Since " #since)))
+    #define JSON_HEDLEY_DEPRECATED_FOR(since, replacement) __attribute__((__deprecated__("Since " #since "; use " #replacement)))
+#elif defined(__cplusplus) && (__cplusplus >= 201402L)
+    #define JSON_HEDLEY_DEPRECATED(since) JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[deprecated("Since " #since)]])
+    #define JSON_HEDLEY_DEPRECATED_FOR(since, replacement) JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[deprecated("Since " #since "; use " #replacement)]])
+#elif \
+    JSON_HEDLEY_HAS_ATTRIBUTE(deprecated) || \
+    JSON_HEDLEY_GCC_VERSION_CHECK(3,1,0) || \
+    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
+    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \
+    (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \
+    (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \
+    (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \
+    (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \
+    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
+    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \
+    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10) || \
+    JSON_HEDLEY_IAR_VERSION_CHECK(8,10,0)
+    #define JSON_HEDLEY_DEPRECATED(since) __attribute__((__deprecated__))
+    #define JSON_HEDLEY_DEPRECATED_FOR(since, replacement) __attribute__((__deprecated__))
+#elif \
+    JSON_HEDLEY_MSVC_VERSION_CHECK(13,10,0) || \
+    JSON_HEDLEY_PELLES_VERSION_CHECK(6,50,0) || \
+    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)
+    #define JSON_HEDLEY_DEPRECATED(since) __declspec(deprecated)
+    #define JSON_HEDLEY_DEPRECATED_FOR(since, replacement) __declspec(deprecated)
+#elif JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)
+    #define JSON_HEDLEY_DEPRECATED(since) _Pragma("deprecated")
+    #define JSON_HEDLEY_DEPRECATED_FOR(since, replacement) _Pragma("deprecated")
+#else
+    #define JSON_HEDLEY_DEPRECATED(since)
+    #define JSON_HEDLEY_DEPRECATED_FOR(since, replacement)
+#endif
+
+#if defined(JSON_HEDLEY_UNAVAILABLE)
+    #undef JSON_HEDLEY_UNAVAILABLE
+#endif
+#if \
+    JSON_HEDLEY_HAS_ATTRIBUTE(warning) || \
+    JSON_HEDLEY_GCC_VERSION_CHECK(4,3,0) || \
+    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
+    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
+    #define JSON_HEDLEY_UNAVAILABLE(available_since) __attribute__((__warning__("Not available until " #available_since)))
+#else
+    #define JSON_HEDLEY_UNAVAILABLE(available_since)
+#endif
+
+#if defined(JSON_HEDLEY_WARN_UNUSED_RESULT)
+    #undef JSON_HEDLEY_WARN_UNUSED_RESULT
+#endif
+#if defined(JSON_HEDLEY_WARN_UNUSED_RESULT_MSG)
+    #undef JSON_HEDLEY_WARN_UNUSED_RESULT_MSG
+#endif
+#if \
+    JSON_HEDLEY_HAS_ATTRIBUTE(warn_unused_result) || \
+    JSON_HEDLEY_GCC_VERSION_CHECK(3,4,0) || \
+    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
+    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \
+    (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \
+    (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \
+    (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \
+    (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \
+    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
+    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \
+    (JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,15,0) && defined(__cplusplus)) || \
+    JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0) || \
+    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
+    #define JSON_HEDLEY_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))
+    #define JSON_HEDLEY_WARN_UNUSED_RESULT_MSG(msg) __attribute__((__warn_unused_result__))
+#elif (JSON_HEDLEY_HAS_CPP_ATTRIBUTE(nodiscard) >= 201907L)
+    #define JSON_HEDLEY_WARN_UNUSED_RESULT JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[nodiscard]])
+    #define JSON_HEDLEY_WARN_UNUSED_RESULT_MSG(msg) JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[nodiscard(msg)]])
+#elif JSON_HEDLEY_HAS_CPP_ATTRIBUTE(nodiscard)
+    #define JSON_HEDLEY_WARN_UNUSED_RESULT JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[nodiscard]])
+    #define JSON_HEDLEY_WARN_UNUSED_RESULT_MSG(msg) JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[nodiscard]])
+#elif defined(_Check_return_) /* SAL */
+    #define JSON_HEDLEY_WARN_UNUSED_RESULT _Check_return_
+    #define JSON_HEDLEY_WARN_UNUSED_RESULT_MSG(msg) _Check_return_
+#else
+    #define JSON_HEDLEY_WARN_UNUSED_RESULT
+    #define JSON_HEDLEY_WARN_UNUSED_RESULT_MSG(msg)
+#endif
+
+#if defined(JSON_HEDLEY_SENTINEL)
+    #undef JSON_HEDLEY_SENTINEL
+#endif
+#if \
+    JSON_HEDLEY_HAS_ATTRIBUTE(sentinel) || \
+    JSON_HEDLEY_GCC_VERSION_CHECK(4,0,0) || \
+    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
+    JSON_HEDLEY_ARM_VERSION_CHECK(5,4,0) || \
+    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
+    #define JSON_HEDLEY_SENTINEL(position) __attribute__((__sentinel__(position)))
+#else
+    #define JSON_HEDLEY_SENTINEL(position)
+#endif
+
+#if defined(JSON_HEDLEY_NO_RETURN)
+    #undef JSON_HEDLEY_NO_RETURN
+#endif
+#if JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)
+    #define JSON_HEDLEY_NO_RETURN __noreturn
+#elif \
+    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
+    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
+    #define JSON_HEDLEY_NO_RETURN __attribute__((__noreturn__))
+#elif defined(__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
+    #define JSON_HEDLEY_NO_RETURN _Noreturn
+#elif defined(__cplusplus) && (__cplusplus >= 201103L)
+    #define JSON_HEDLEY_NO_RETURN JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[noreturn]])
+#elif \
+    JSON_HEDLEY_HAS_ATTRIBUTE(noreturn) || \
+    JSON_HEDLEY_GCC_VERSION_CHECK(3,2,0) || \
+    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0) || \
+    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
+    JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \
+    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \
+    (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \
+    (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \
+    (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \
+    (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \
+    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
+    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \
+    JSON_HEDLEY_IAR_VERSION_CHECK(8,10,0)
+    #define JSON_HEDLEY_NO_RETURN __attribute__((__noreturn__))
+#elif JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,10,0)
+    #define JSON_HEDLEY_NO_RETURN _Pragma("does_not_return")
+#elif \
+    JSON_HEDLEY_MSVC_VERSION_CHECK(13,10,0) || \
+    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)
+    #define JSON_HEDLEY_NO_RETURN __declspec(noreturn)
+#elif JSON_HEDLEY_TI_CL6X_VERSION_CHECK(6,0,0) && defined(__cplusplus)
+    #define JSON_HEDLEY_NO_RETURN _Pragma("FUNC_NEVER_RETURNS;")
+#elif JSON_HEDLEY_COMPCERT_VERSION_CHECK(3,2,0)
+    #define JSON_HEDLEY_NO_RETURN __attribute((noreturn))
+#elif JSON_HEDLEY_PELLES_VERSION_CHECK(9,0,0)
+    #define JSON_HEDLEY_NO_RETURN __declspec(noreturn)
+#else
+    #define JSON_HEDLEY_NO_RETURN
+#endif
+
+#if defined(JSON_HEDLEY_NO_ESCAPE)
+    #undef JSON_HEDLEY_NO_ESCAPE
+#endif
+#if JSON_HEDLEY_HAS_ATTRIBUTE(noescape)
+    #define JSON_HEDLEY_NO_ESCAPE __attribute__((__noescape__))
+#else
+    #define JSON_HEDLEY_NO_ESCAPE
+#endif
+
+#if defined(JSON_HEDLEY_UNREACHABLE)
+    #undef JSON_HEDLEY_UNREACHABLE
+#endif
+#if defined(JSON_HEDLEY_UNREACHABLE_RETURN)
+    #undef JSON_HEDLEY_UNREACHABLE_RETURN
+#endif
+#if defined(JSON_HEDLEY_ASSUME)
+    #undef JSON_HEDLEY_ASSUME
+#endif
+#if \
+    JSON_HEDLEY_MSVC_VERSION_CHECK(13,10,0) || \
+    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
+    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)
+    #define JSON_HEDLEY_ASSUME(expr) __assume(expr)
+#elif JSON_HEDLEY_HAS_BUILTIN(__builtin_assume)
+    #define JSON_HEDLEY_ASSUME(expr) __builtin_assume(expr)
+#elif \
+    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,2,0) || \
+    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(4,0,0)
+    #if defined(__cplusplus)
+        #define JSON_HEDLEY_ASSUME(expr) std::_nassert(expr)
+    #else
+        #define JSON_HEDLEY_ASSUME(expr) _nassert(expr)
+    #endif
+#endif
+#if \
+    (JSON_HEDLEY_HAS_BUILTIN(__builtin_unreachable) && (!defined(JSON_HEDLEY_ARM_VERSION))) || \
+    JSON_HEDLEY_GCC_VERSION_CHECK(4,5,0) || \
+    JSON_HEDLEY_PGI_VERSION_CHECK(18,10,0) || \
+    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
+    JSON_HEDLEY_IBM_VERSION_CHECK(13,1,5) || \
+    JSON_HEDLEY_CRAY_VERSION_CHECK(10,0,0) || \
+    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
+    #define JSON_HEDLEY_UNREACHABLE() __builtin_unreachable()
+#elif defined(JSON_HEDLEY_ASSUME)
+    #define JSON_HEDLEY_UNREACHABLE() JSON_HEDLEY_ASSUME(0)
+#endif
+#if !defined(JSON_HEDLEY_ASSUME)
+    #if defined(JSON_HEDLEY_UNREACHABLE)
+        #define JSON_HEDLEY_ASSUME(expr) JSON_HEDLEY_STATIC_CAST(void, ((expr) ? 1 : (JSON_HEDLEY_UNREACHABLE(), 1)))
+    #else
+        #define JSON_HEDLEY_ASSUME(expr) JSON_HEDLEY_STATIC_CAST(void, expr)
+    #endif
+#endif
+#if defined(JSON_HEDLEY_UNREACHABLE)
+    #if  \
+        JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,2,0) || \
+        JSON_HEDLEY_TI_CL6X_VERSION_CHECK(4,0,0)
+        #define JSON_HEDLEY_UNREACHABLE_RETURN(value) return (JSON_HEDLEY_STATIC_CAST(void, JSON_HEDLEY_ASSUME(0)), (value))
+    #else
+        #define JSON_HEDLEY_UNREACHABLE_RETURN(value) JSON_HEDLEY_UNREACHABLE()
+    #endif
+#else
+    #define JSON_HEDLEY_UNREACHABLE_RETURN(value) return (value)
+#endif
+#if !defined(JSON_HEDLEY_UNREACHABLE)
+    #define JSON_HEDLEY_UNREACHABLE() JSON_HEDLEY_ASSUME(0)
+#endif
+
+JSON_HEDLEY_DIAGNOSTIC_PUSH
+#if JSON_HEDLEY_HAS_WARNING("-Wpedantic")
+    #pragma clang diagnostic ignored "-Wpedantic"
+#endif
+#if JSON_HEDLEY_HAS_WARNING("-Wc++98-compat-pedantic") && defined(__cplusplus)
+    #pragma clang diagnostic ignored "-Wc++98-compat-pedantic"
+#endif
+#if JSON_HEDLEY_GCC_HAS_WARNING("-Wvariadic-macros",4,0,0)
+    #if defined(__clang__)
+        #pragma clang diagnostic ignored "-Wvariadic-macros"
+    #elif defined(JSON_HEDLEY_GCC_VERSION)
+        #pragma GCC diagnostic ignored "-Wvariadic-macros"
+    #endif
+#endif
+#if defined(JSON_HEDLEY_NON_NULL)
+    #undef JSON_HEDLEY_NON_NULL
+#endif
+#if \
+    JSON_HEDLEY_HAS_ATTRIBUTE(nonnull) || \
+    JSON_HEDLEY_GCC_VERSION_CHECK(3,3,0) || \
+    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
+    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0)
+    #define JSON_HEDLEY_NON_NULL(...) __attribute__((__nonnull__(__VA_ARGS__)))
+#else
+    #define JSON_HEDLEY_NON_NULL(...)
+#endif
+JSON_HEDLEY_DIAGNOSTIC_POP
+
+#if defined(JSON_HEDLEY_PRINTF_FORMAT)
+    #undef JSON_HEDLEY_PRINTF_FORMAT
+#endif
+#if defined(__MINGW32__) && JSON_HEDLEY_GCC_HAS_ATTRIBUTE(format,4,4,0) && !defined(__USE_MINGW_ANSI_STDIO)
+    #define JSON_HEDLEY_PRINTF_FORMAT(string_idx,first_to_check) __attribute__((__format__(ms_printf, string_idx, first_to_check)))
+#elif defined(__MINGW32__) && JSON_HEDLEY_GCC_HAS_ATTRIBUTE(format,4,4,0) && defined(__USE_MINGW_ANSI_STDIO)
+    #define JSON_HEDLEY_PRINTF_FORMAT(string_idx,first_to_check) __attribute__((__format__(gnu_printf, string_idx, first_to_check)))
+#elif \
+    JSON_HEDLEY_HAS_ATTRIBUTE(format) || \
+    JSON_HEDLEY_GCC_VERSION_CHECK(3,1,0) || \
+    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
+    JSON_HEDLEY_ARM_VERSION_CHECK(5,6,0) || \
+    JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \
+    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \
+    (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \
+    (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \
+    (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \
+    (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \
+    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
+    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \
+    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
+    #define JSON_HEDLEY_PRINTF_FORMAT(string_idx,first_to_check) __attribute__((__format__(__printf__, string_idx, first_to_check)))
+#elif JSON_HEDLEY_PELLES_VERSION_CHECK(6,0,0)
+    #define JSON_HEDLEY_PRINTF_FORMAT(string_idx,first_to_check) __declspec(vaformat(printf,string_idx,first_to_check))
+#else
+    #define JSON_HEDLEY_PRINTF_FORMAT(string_idx,first_to_check)
+#endif
+
+#if defined(JSON_HEDLEY_CONSTEXPR)
+    #undef JSON_HEDLEY_CONSTEXPR
+#endif
+#if defined(__cplusplus)
+    #if __cplusplus >= 201103L
+        #define JSON_HEDLEY_CONSTEXPR JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(constexpr)
+    #endif
+#endif
+#if !defined(JSON_HEDLEY_CONSTEXPR)
+    #define JSON_HEDLEY_CONSTEXPR
+#endif
+
+#if defined(JSON_HEDLEY_PREDICT)
+    #undef JSON_HEDLEY_PREDICT
+#endif
+#if defined(JSON_HEDLEY_LIKELY)
+    #undef JSON_HEDLEY_LIKELY
+#endif
+#if defined(JSON_HEDLEY_UNLIKELY)
+    #undef JSON_HEDLEY_UNLIKELY
+#endif
+#if defined(JSON_HEDLEY_UNPREDICTABLE)
+    #undef JSON_HEDLEY_UNPREDICTABLE
+#endif
+#if JSON_HEDLEY_HAS_BUILTIN(__builtin_unpredictable)
+    #define JSON_HEDLEY_UNPREDICTABLE(expr) __builtin_unpredictable((expr))
+#endif
+#if \
+  (JSON_HEDLEY_HAS_BUILTIN(__builtin_expect_with_probability) && !defined(JSON_HEDLEY_PGI_VERSION)) || \
+  JSON_HEDLEY_GCC_VERSION_CHECK(9,0,0) || \
+  JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
+#  define JSON_HEDLEY_PREDICT(expr, value, probability) __builtin_expect_with_probability(  (expr), (value), (probability))
+#  define JSON_HEDLEY_PREDICT_TRUE(expr, probability)   __builtin_expect_with_probability(!!(expr),    1   , (probability))
+#  define JSON_HEDLEY_PREDICT_FALSE(expr, probability)  __builtin_expect_with_probability(!!(expr),    0   , (probability))
+#  define JSON_HEDLEY_LIKELY(expr)                      __builtin_expect                 (!!(expr),    1                  )
+#  define JSON_HEDLEY_UNLIKELY(expr)                    __builtin_expect                 (!!(expr),    0                  )
+#elif \
+  (JSON_HEDLEY_HAS_BUILTIN(__builtin_expect) && !defined(JSON_HEDLEY_INTEL_CL_VERSION)) || \
+  JSON_HEDLEY_GCC_VERSION_CHECK(3,0,0) || \
+  JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
+  (JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,15,0) && defined(__cplusplus)) || \
+  JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
+  JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \
+  JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \
+  JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,7,0) || \
+  JSON_HEDLEY_TI_CL430_VERSION_CHECK(3,1,0) || \
+  JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,1,0) || \
+  JSON_HEDLEY_TI_CL6X_VERSION_CHECK(6,1,0) || \
+  JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
+  JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \
+  JSON_HEDLEY_TINYC_VERSION_CHECK(0,9,27) || \
+  JSON_HEDLEY_CRAY_VERSION_CHECK(8,1,0) || \
+  JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
+#  define JSON_HEDLEY_PREDICT(expr, expected, probability) \
+    (((probability) >= 0.9) ? __builtin_expect((expr), (expected)) : (JSON_HEDLEY_STATIC_CAST(void, expected), (expr)))
+#  define JSON_HEDLEY_PREDICT_TRUE(expr, probability) \
+    (__extension__ ({ \
+        double hedley_probability_ = (probability); \
+        ((hedley_probability_ >= 0.9) ? __builtin_expect(!!(expr), 1) : ((hedley_probability_ <= 0.1) ? __builtin_expect(!!(expr), 0) : !!(expr))); \
+    }))
+#  define JSON_HEDLEY_PREDICT_FALSE(expr, probability) \
+    (__extension__ ({ \
+        double hedley_probability_ = (probability); \
+        ((hedley_probability_ >= 0.9) ? __builtin_expect(!!(expr), 0) : ((hedley_probability_ <= 0.1) ? __builtin_expect(!!(expr), 1) : !!(expr))); \
+    }))
+#  define JSON_HEDLEY_LIKELY(expr)   __builtin_expect(!!(expr), 1)
+#  define JSON_HEDLEY_UNLIKELY(expr) __builtin_expect(!!(expr), 0)
+#else
+#  define JSON_HEDLEY_PREDICT(expr, expected, probability) (JSON_HEDLEY_STATIC_CAST(void, expected), (expr))
+#  define JSON_HEDLEY_PREDICT_TRUE(expr, probability) (!!(expr))
+#  define JSON_HEDLEY_PREDICT_FALSE(expr, probability) (!!(expr))
+#  define JSON_HEDLEY_LIKELY(expr) (!!(expr))
+#  define JSON_HEDLEY_UNLIKELY(expr) (!!(expr))
+#endif
+#if !defined(JSON_HEDLEY_UNPREDICTABLE)
+    #define JSON_HEDLEY_UNPREDICTABLE(expr) JSON_HEDLEY_PREDICT(expr, 1, 0.5)
+#endif
+
+#if defined(JSON_HEDLEY_MALLOC)
+    #undef JSON_HEDLEY_MALLOC
+#endif
+#if \
+    JSON_HEDLEY_HAS_ATTRIBUTE(malloc) || \
+    JSON_HEDLEY_GCC_VERSION_CHECK(3,1,0) || \
+    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
+    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0) || \
+    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
+    JSON_HEDLEY_IBM_VERSION_CHECK(12,1,0) || \
+    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \
+    (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \
+    (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \
+    (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \
+    (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \
+    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
+    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \
+    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
+    #define JSON_HEDLEY_MALLOC __attribute__((__malloc__))
+#elif JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,10,0)
+    #define JSON_HEDLEY_MALLOC _Pragma("returns_new_memory")
+#elif \
+    JSON_HEDLEY_MSVC_VERSION_CHECK(14,0,0) || \
+    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)
+    #define JSON_HEDLEY_MALLOC __declspec(restrict)
+#else
+    #define JSON_HEDLEY_MALLOC
+#endif
+
+#if defined(JSON_HEDLEY_PURE)
+    #undef JSON_HEDLEY_PURE
+#endif
+#if \
+  JSON_HEDLEY_HAS_ATTRIBUTE(pure) || \
+  JSON_HEDLEY_GCC_VERSION_CHECK(2,96,0) || \
+  JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
+  JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0) || \
+  JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
+  JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \
+  JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \
+  (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+  JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \
+  (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+  JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \
+  (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+  JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \
+  (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+  JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \
+  JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
+  JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \
+  JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0) || \
+  JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
+#  define JSON_HEDLEY_PURE __attribute__((__pure__))
+#elif JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,10,0)
+#  define JSON_HEDLEY_PURE _Pragma("does_not_write_global_data")
+#elif defined(__cplusplus) && \
+    ( \
+      JSON_HEDLEY_TI_CL430_VERSION_CHECK(2,0,1) || \
+      JSON_HEDLEY_TI_CL6X_VERSION_CHECK(4,0,0) || \
+      JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) \
+    )
+#  define JSON_HEDLEY_PURE _Pragma("FUNC_IS_PURE;")
+#else
+#  define JSON_HEDLEY_PURE
+#endif
+
+#if defined(JSON_HEDLEY_CONST)
+    #undef JSON_HEDLEY_CONST
+#endif
+#if \
+    JSON_HEDLEY_HAS_ATTRIBUTE(const) || \
+    JSON_HEDLEY_GCC_VERSION_CHECK(2,5,0) || \
+    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
+    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0) || \
+    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
+    JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \
+    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \
+    (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \
+    (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \
+    (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \
+    (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \
+    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
+    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \
+    JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0) || \
+    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
+    #define JSON_HEDLEY_CONST __attribute__((__const__))
+#elif \
+    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,10,0)
+    #define JSON_HEDLEY_CONST _Pragma("no_side_effect")
+#else
+    #define JSON_HEDLEY_CONST JSON_HEDLEY_PURE
+#endif
+
+#if defined(JSON_HEDLEY_RESTRICT)
+    #undef JSON_HEDLEY_RESTRICT
+#endif
+#if defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L) && !defined(__cplusplus)
+    #define JSON_HEDLEY_RESTRICT restrict
+#elif \
+    JSON_HEDLEY_GCC_VERSION_CHECK(3,1,0) || \
+    JSON_HEDLEY_MSVC_VERSION_CHECK(14,0,0) || \
+    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
+    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0) || \
+    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
+    JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \
+    JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0) || \
+    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \
+    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,2,4) || \
+    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(8,1,0) || \
+    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
+    (JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,14,0) && defined(__cplusplus)) || \
+    JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0) || \
+    defined(__clang__) || \
+    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
+    #define JSON_HEDLEY_RESTRICT __restrict
+#elif JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,3,0) && !defined(__cplusplus)
+    #define JSON_HEDLEY_RESTRICT _Restrict
+#else
+    #define JSON_HEDLEY_RESTRICT
+#endif
+
+#if defined(JSON_HEDLEY_INLINE)
+    #undef JSON_HEDLEY_INLINE
+#endif
+#if \
+    (defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L)) || \
+    (defined(__cplusplus) && (__cplusplus >= 199711L))
+    #define JSON_HEDLEY_INLINE inline
+#elif \
+    defined(JSON_HEDLEY_GCC_VERSION) || \
+    JSON_HEDLEY_ARM_VERSION_CHECK(6,2,0)
+    #define JSON_HEDLEY_INLINE __inline__
+#elif \
+    JSON_HEDLEY_MSVC_VERSION_CHECK(12,0,0) || \
+    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0) || \
+    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
+    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,1,0) || \
+    JSON_HEDLEY_TI_CL430_VERSION_CHECK(3,1,0) || \
+    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,2,0) || \
+    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(8,0,0) || \
+    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
+    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \
+    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
+    #define JSON_HEDLEY_INLINE __inline
+#else
+    #define JSON_HEDLEY_INLINE
+#endif
+
+#if defined(JSON_HEDLEY_ALWAYS_INLINE)
+    #undef JSON_HEDLEY_ALWAYS_INLINE
+#endif
+#if \
+  JSON_HEDLEY_HAS_ATTRIBUTE(always_inline) || \
+  JSON_HEDLEY_GCC_VERSION_CHECK(4,0,0) || \
+  JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
+  JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0) || \
+  JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
+  JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \
+  JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \
+  (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+  JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \
+  (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+  JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \
+  (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+  JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \
+  (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+  JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \
+  JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
+  JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \
+  JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10) || \
+  JSON_HEDLEY_IAR_VERSION_CHECK(8,10,0)
+#  define JSON_HEDLEY_ALWAYS_INLINE __attribute__((__always_inline__)) JSON_HEDLEY_INLINE
+#elif \
+  JSON_HEDLEY_MSVC_VERSION_CHECK(12,0,0) || \
+  JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)
+#  define JSON_HEDLEY_ALWAYS_INLINE __forceinline
+#elif defined(__cplusplus) && \
+    ( \
+      JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \
+      JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \
+      JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \
+      JSON_HEDLEY_TI_CL6X_VERSION_CHECK(6,1,0) || \
+      JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
+      JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) \
+    )
+#  define JSON_HEDLEY_ALWAYS_INLINE _Pragma("FUNC_ALWAYS_INLINE;")
+#elif JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)
+#  define JSON_HEDLEY_ALWAYS_INLINE _Pragma("inline=forced")
+#else
+#  define JSON_HEDLEY_ALWAYS_INLINE JSON_HEDLEY_INLINE
+#endif
+
+#if defined(JSON_HEDLEY_NEVER_INLINE)
+    #undef JSON_HEDLEY_NEVER_INLINE
+#endif
+#if \
+    JSON_HEDLEY_HAS_ATTRIBUTE(noinline) || \
+    JSON_HEDLEY_GCC_VERSION_CHECK(4,0,0) || \
+    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
+    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0) || \
+    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
+    JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \
+    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \
+    (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \
+    (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \
+    (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \
+    (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \
+    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
+    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \
+    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10) || \
+    JSON_HEDLEY_IAR_VERSION_CHECK(8,10,0)
+    #define JSON_HEDLEY_NEVER_INLINE __attribute__((__noinline__))
+#elif \
+    JSON_HEDLEY_MSVC_VERSION_CHECK(13,10,0) || \
+    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)
+    #define JSON_HEDLEY_NEVER_INLINE __declspec(noinline)
+#elif JSON_HEDLEY_PGI_VERSION_CHECK(10,2,0)
+    #define JSON_HEDLEY_NEVER_INLINE _Pragma("noinline")
+#elif JSON_HEDLEY_TI_CL6X_VERSION_CHECK(6,0,0) && defined(__cplusplus)
+    #define JSON_HEDLEY_NEVER_INLINE _Pragma("FUNC_CANNOT_INLINE;")
+#elif JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)
+    #define JSON_HEDLEY_NEVER_INLINE _Pragma("inline=never")
+#elif JSON_HEDLEY_COMPCERT_VERSION_CHECK(3,2,0)
+    #define JSON_HEDLEY_NEVER_INLINE __attribute((noinline))
+#elif JSON_HEDLEY_PELLES_VERSION_CHECK(9,0,0)
+    #define JSON_HEDLEY_NEVER_INLINE __declspec(noinline)
+#else
+    #define JSON_HEDLEY_NEVER_INLINE
+#endif
+
+#if defined(JSON_HEDLEY_PRIVATE)
+    #undef JSON_HEDLEY_PRIVATE
+#endif
+#if defined(JSON_HEDLEY_PUBLIC)
+    #undef JSON_HEDLEY_PUBLIC
+#endif
+#if defined(JSON_HEDLEY_IMPORT)
+    #undef JSON_HEDLEY_IMPORT
+#endif
+#if defined(_WIN32) || defined(__CYGWIN__)
+#  define JSON_HEDLEY_PRIVATE
+#  define JSON_HEDLEY_PUBLIC   __declspec(dllexport)
+#  define JSON_HEDLEY_IMPORT   __declspec(dllimport)
+#else
+#  if \
+    JSON_HEDLEY_HAS_ATTRIBUTE(visibility) || \
+    JSON_HEDLEY_GCC_VERSION_CHECK(3,3,0) || \
+    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0) || \
+    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
+    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
+    JSON_HEDLEY_IBM_VERSION_CHECK(13,1,0) || \
+    ( \
+      defined(__TI_EABI__) && \
+      ( \
+        (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
+        JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) \
+      ) \
+    ) || \
+    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
+#    define JSON_HEDLEY_PRIVATE __attribute__((__visibility__("hidden")))
+#    define JSON_HEDLEY_PUBLIC  __attribute__((__visibility__("default")))
+#  else
+#    define JSON_HEDLEY_PRIVATE
+#    define JSON_HEDLEY_PUBLIC
+#  endif
+#  define JSON_HEDLEY_IMPORT    extern
+#endif
+
+#if defined(JSON_HEDLEY_NO_THROW)
+    #undef JSON_HEDLEY_NO_THROW
+#endif
+#if \
+    JSON_HEDLEY_HAS_ATTRIBUTE(nothrow) || \
+    JSON_HEDLEY_GCC_VERSION_CHECK(3,3,0) || \
+    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
+    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
+    #define JSON_HEDLEY_NO_THROW __attribute__((__nothrow__))
+#elif \
+    JSON_HEDLEY_MSVC_VERSION_CHECK(13,1,0) || \
+    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0) || \
+    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0)
+    #define JSON_HEDLEY_NO_THROW __declspec(nothrow)
+#else
+    #define JSON_HEDLEY_NO_THROW
+#endif
+
+#if defined(JSON_HEDLEY_FALL_THROUGH)
+    #undef JSON_HEDLEY_FALL_THROUGH
+#endif
+#if \
+    JSON_HEDLEY_HAS_ATTRIBUTE(fallthrough) || \
+    JSON_HEDLEY_GCC_VERSION_CHECK(7,0,0) || \
+    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
+    #define JSON_HEDLEY_FALL_THROUGH __attribute__((__fallthrough__))
+#elif JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS(clang,fallthrough)
+    #define JSON_HEDLEY_FALL_THROUGH JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[clang::fallthrough]])
+#elif JSON_HEDLEY_HAS_CPP_ATTRIBUTE(fallthrough)
+    #define JSON_HEDLEY_FALL_THROUGH JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[fallthrough]])
+#elif defined(__fallthrough) /* SAL */
+    #define JSON_HEDLEY_FALL_THROUGH __fallthrough
+#else
+    #define JSON_HEDLEY_FALL_THROUGH
+#endif
+
+#if defined(JSON_HEDLEY_RETURNS_NON_NULL)
+    #undef JSON_HEDLEY_RETURNS_NON_NULL
+#endif
+#if \
+    JSON_HEDLEY_HAS_ATTRIBUTE(returns_nonnull) || \
+    JSON_HEDLEY_GCC_VERSION_CHECK(4,9,0) || \
+    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
+    #define JSON_HEDLEY_RETURNS_NON_NULL __attribute__((__returns_nonnull__))
+#elif defined(_Ret_notnull_) /* SAL */
+    #define JSON_HEDLEY_RETURNS_NON_NULL _Ret_notnull_
+#else
+    #define JSON_HEDLEY_RETURNS_NON_NULL
+#endif
+
+#if defined(JSON_HEDLEY_ARRAY_PARAM)
+    #undef JSON_HEDLEY_ARRAY_PARAM
+#endif
+#if \
+    defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L) && \
+    !defined(__STDC_NO_VLA__) && \
+    !defined(__cplusplus) && \
+    !defined(JSON_HEDLEY_PGI_VERSION) && \
+    !defined(JSON_HEDLEY_TINYC_VERSION)
+    #define JSON_HEDLEY_ARRAY_PARAM(name) (name)
+#else
+    #define JSON_HEDLEY_ARRAY_PARAM(name)
+#endif
+
+#if defined(JSON_HEDLEY_IS_CONSTANT)
+    #undef JSON_HEDLEY_IS_CONSTANT
+#endif
+#if defined(JSON_HEDLEY_REQUIRE_CONSTEXPR)
+    #undef JSON_HEDLEY_REQUIRE_CONSTEXPR
+#endif
+/* JSON_HEDLEY_IS_CONSTEXPR_ is for
+   HEDLEY INTERNAL USE ONLY.  API subject to change without notice. */
+#if defined(JSON_HEDLEY_IS_CONSTEXPR_)
+    #undef JSON_HEDLEY_IS_CONSTEXPR_
+#endif
+#if \
+    JSON_HEDLEY_HAS_BUILTIN(__builtin_constant_p) || \
+    JSON_HEDLEY_GCC_VERSION_CHECK(3,4,0) || \
+    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
+    JSON_HEDLEY_TINYC_VERSION_CHECK(0,9,19) || \
+    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
+    JSON_HEDLEY_IBM_VERSION_CHECK(13,1,0) || \
+    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(6,1,0) || \
+    (JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,10,0) && !defined(__cplusplus)) || \
+    JSON_HEDLEY_CRAY_VERSION_CHECK(8,1,0) || \
+    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
+    #define JSON_HEDLEY_IS_CONSTANT(expr) __builtin_constant_p(expr)
+#endif
+#if !defined(__cplusplus)
+#  if \
+       JSON_HEDLEY_HAS_BUILTIN(__builtin_types_compatible_p) || \
+       JSON_HEDLEY_GCC_VERSION_CHECK(3,4,0) || \
+       JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
+       JSON_HEDLEY_IBM_VERSION_CHECK(13,1,0) || \
+       JSON_HEDLEY_CRAY_VERSION_CHECK(8,1,0) || \
+       JSON_HEDLEY_ARM_VERSION_CHECK(5,4,0) || \
+       JSON_HEDLEY_TINYC_VERSION_CHECK(0,9,24)
+#if defined(__INTPTR_TYPE__)
+    #define JSON_HEDLEY_IS_CONSTEXPR_(expr) __builtin_types_compatible_p(__typeof__((1 ? (void*) ((__INTPTR_TYPE__) ((expr) * 0)) : (int*) 0)), int*)
+#else
+    #include <stdint.h>
+    #define JSON_HEDLEY_IS_CONSTEXPR_(expr) __builtin_types_compatible_p(__typeof__((1 ? (void*) ((intptr_t) ((expr) * 0)) : (int*) 0)), int*)
+#endif
+#  elif \
+       ( \
+          defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 201112L) && \
+          !defined(JSON_HEDLEY_SUNPRO_VERSION) && \
+          !defined(JSON_HEDLEY_PGI_VERSION) && \
+          !defined(JSON_HEDLEY_IAR_VERSION)) || \
+       (JSON_HEDLEY_HAS_EXTENSION(c_generic_selections) && !defined(JSON_HEDLEY_IAR_VERSION)) || \
+       JSON_HEDLEY_GCC_VERSION_CHECK(4,9,0) || \
+       JSON_HEDLEY_INTEL_VERSION_CHECK(17,0,0) || \
+       JSON_HEDLEY_IBM_VERSION_CHECK(12,1,0) || \
+       JSON_HEDLEY_ARM_VERSION_CHECK(5,3,0)
+#if defined(__INTPTR_TYPE__)
+    #define JSON_HEDLEY_IS_CONSTEXPR_(expr) _Generic((1 ? (void*) ((__INTPTR_TYPE__) ((expr) * 0)) : (int*) 0), int*: 1, void*: 0)
+#else
+    #include <stdint.h>
+    #define JSON_HEDLEY_IS_CONSTEXPR_(expr) _Generic((1 ? (void*) ((intptr_t) * 0) : (int*) 0), int*: 1, void*: 0)
+#endif
+#  elif \
+       defined(JSON_HEDLEY_GCC_VERSION) || \
+       defined(JSON_HEDLEY_INTEL_VERSION) || \
+       defined(JSON_HEDLEY_TINYC_VERSION) || \
+       defined(JSON_HEDLEY_TI_ARMCL_VERSION) || \
+       JSON_HEDLEY_TI_CL430_VERSION_CHECK(18,12,0) || \
+       defined(JSON_HEDLEY_TI_CL2000_VERSION) || \
+       defined(JSON_HEDLEY_TI_CL6X_VERSION) || \
+       defined(JSON_HEDLEY_TI_CL7X_VERSION) || \
+       defined(JSON_HEDLEY_TI_CLPRU_VERSION) || \
+       defined(__clang__)
+#    define JSON_HEDLEY_IS_CONSTEXPR_(expr) ( \
+        sizeof(void) != \
+        sizeof(*( \
+                  1 ? \
+                  ((void*) ((expr) * 0L) ) : \
+((struct { char v[sizeof(void) * 2]; } *) 1) \
+                ) \
+              ) \
+                                            )
+#  endif
+#endif
+#if defined(JSON_HEDLEY_IS_CONSTEXPR_)
+    #if !defined(JSON_HEDLEY_IS_CONSTANT)
+        #define JSON_HEDLEY_IS_CONSTANT(expr) JSON_HEDLEY_IS_CONSTEXPR_(expr)
+    #endif
+    #define JSON_HEDLEY_REQUIRE_CONSTEXPR(expr) (JSON_HEDLEY_IS_CONSTEXPR_(expr) ? (expr) : (-1))
+#else
+    #if !defined(JSON_HEDLEY_IS_CONSTANT)
+        #define JSON_HEDLEY_IS_CONSTANT(expr) (0)
+    #endif
+    #define JSON_HEDLEY_REQUIRE_CONSTEXPR(expr) (expr)
+#endif
+
+#if defined(JSON_HEDLEY_BEGIN_C_DECLS)
+    #undef JSON_HEDLEY_BEGIN_C_DECLS
+#endif
+#if defined(JSON_HEDLEY_END_C_DECLS)
+    #undef JSON_HEDLEY_END_C_DECLS
+#endif
+#if defined(JSON_HEDLEY_C_DECL)
+    #undef JSON_HEDLEY_C_DECL
+#endif
+#if defined(__cplusplus)
+    #define JSON_HEDLEY_BEGIN_C_DECLS extern "C" {
+    #define JSON_HEDLEY_END_C_DECLS }
+    #define JSON_HEDLEY_C_DECL extern "C"
+#else
+    #define JSON_HEDLEY_BEGIN_C_DECLS
+    #define JSON_HEDLEY_END_C_DECLS
+    #define JSON_HEDLEY_C_DECL
+#endif
+
+#if defined(JSON_HEDLEY_STATIC_ASSERT)
+    #undef JSON_HEDLEY_STATIC_ASSERT
+#endif
+#if \
+  !defined(__cplusplus) && ( \
+      (defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 201112L)) || \
+      (JSON_HEDLEY_HAS_FEATURE(c_static_assert) && !defined(JSON_HEDLEY_INTEL_CL_VERSION)) || \
+      JSON_HEDLEY_GCC_VERSION_CHECK(6,0,0) || \
+      JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
+      defined(_Static_assert) \
+    )
+#  define JSON_HEDLEY_STATIC_ASSERT(expr, message) _Static_assert(expr, message)
+#elif \
+  (defined(__cplusplus) && (__cplusplus >= 201103L)) || \
+  JSON_HEDLEY_MSVC_VERSION_CHECK(16,0,0) || \
+  JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)
+#  define JSON_HEDLEY_STATIC_ASSERT(expr, message) JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(static_assert(expr, message))
+#else
+#  define JSON_HEDLEY_STATIC_ASSERT(expr, message)
+#endif
+
+#if defined(JSON_HEDLEY_NULL)
+    #undef JSON_HEDLEY_NULL
+#endif
+#if defined(__cplusplus)
+    #if __cplusplus >= 201103L
+        #define JSON_HEDLEY_NULL JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(nullptr)
+    #elif defined(NULL)
+        #define JSON_HEDLEY_NULL NULL
+    #else
+        #define JSON_HEDLEY_NULL JSON_HEDLEY_STATIC_CAST(void*, 0)
+    #endif
+#elif defined(NULL)
+    #define JSON_HEDLEY_NULL NULL
+#else
+    #define JSON_HEDLEY_NULL ((void*) 0)
+#endif
+
+#if defined(JSON_HEDLEY_MESSAGE)
+    #undef JSON_HEDLEY_MESSAGE
+#endif
+#if JSON_HEDLEY_HAS_WARNING("-Wunknown-pragmas")
+#  define JSON_HEDLEY_MESSAGE(msg) \
+    JSON_HEDLEY_DIAGNOSTIC_PUSH \
+    JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS \
+    JSON_HEDLEY_PRAGMA(message msg) \
+    JSON_HEDLEY_DIAGNOSTIC_POP
+#elif \
+  JSON_HEDLEY_GCC_VERSION_CHECK(4,4,0) || \
+  JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)
+#  define JSON_HEDLEY_MESSAGE(msg) JSON_HEDLEY_PRAGMA(message msg)
+#elif JSON_HEDLEY_CRAY_VERSION_CHECK(5,0,0)
+#  define JSON_HEDLEY_MESSAGE(msg) JSON_HEDLEY_PRAGMA(_CRI message msg)
+#elif JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)
+#  define JSON_HEDLEY_MESSAGE(msg) JSON_HEDLEY_PRAGMA(message(msg))
+#elif JSON_HEDLEY_PELLES_VERSION_CHECK(2,0,0)
+#  define JSON_HEDLEY_MESSAGE(msg) JSON_HEDLEY_PRAGMA(message(msg))
+#else
+#  define JSON_HEDLEY_MESSAGE(msg)
+#endif
+
+#if defined(JSON_HEDLEY_WARNING)
+    #undef JSON_HEDLEY_WARNING
+#endif
+#if JSON_HEDLEY_HAS_WARNING("-Wunknown-pragmas")
+#  define JSON_HEDLEY_WARNING(msg) \
+    JSON_HEDLEY_DIAGNOSTIC_PUSH \
+    JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS \
+    JSON_HEDLEY_PRAGMA(clang warning msg) \
+    JSON_HEDLEY_DIAGNOSTIC_POP
+#elif \
+  JSON_HEDLEY_GCC_VERSION_CHECK(4,8,0) || \
+  JSON_HEDLEY_PGI_VERSION_CHECK(18,4,0) || \
+  JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)
+#  define JSON_HEDLEY_WARNING(msg) JSON_HEDLEY_PRAGMA(GCC warning msg)
+#elif \
+  JSON_HEDLEY_MSVC_VERSION_CHECK(15,0,0) || \
+  JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)
+#  define JSON_HEDLEY_WARNING(msg) JSON_HEDLEY_PRAGMA(message(msg))
+#else
+#  define JSON_HEDLEY_WARNING(msg) JSON_HEDLEY_MESSAGE(msg)
+#endif
+
+#if defined(JSON_HEDLEY_REQUIRE)
+    #undef JSON_HEDLEY_REQUIRE
+#endif
+#if defined(JSON_HEDLEY_REQUIRE_MSG)
+    #undef JSON_HEDLEY_REQUIRE_MSG
+#endif
+#if JSON_HEDLEY_HAS_ATTRIBUTE(diagnose_if)
+#  if JSON_HEDLEY_HAS_WARNING("-Wgcc-compat")
+#    define JSON_HEDLEY_REQUIRE(expr) \
+    JSON_HEDLEY_DIAGNOSTIC_PUSH \
+    _Pragma("clang diagnostic ignored \"-Wgcc-compat\"") \
+    __attribute__((diagnose_if(!(expr), #expr, "error"))) \
+    JSON_HEDLEY_DIAGNOSTIC_POP
+#    define JSON_HEDLEY_REQUIRE_MSG(expr,msg) \
+    JSON_HEDLEY_DIAGNOSTIC_PUSH \
+    _Pragma("clang diagnostic ignored \"-Wgcc-compat\"") \
+    __attribute__((diagnose_if(!(expr), msg, "error"))) \
+    JSON_HEDLEY_DIAGNOSTIC_POP
+#  else
+#    define JSON_HEDLEY_REQUIRE(expr) __attribute__((diagnose_if(!(expr), #expr, "error")))
+#    define JSON_HEDLEY_REQUIRE_MSG(expr,msg) __attribute__((diagnose_if(!(expr), msg, "error")))
+#  endif
+#else
+#  define JSON_HEDLEY_REQUIRE(expr)
+#  define JSON_HEDLEY_REQUIRE_MSG(expr,msg)
+#endif
+
+#if defined(JSON_HEDLEY_FLAGS)
+    #undef JSON_HEDLEY_FLAGS
+#endif
+#if JSON_HEDLEY_HAS_ATTRIBUTE(flag_enum) && (!defined(__cplusplus) || JSON_HEDLEY_HAS_WARNING("-Wbitfield-enum-conversion"))
+    #define JSON_HEDLEY_FLAGS __attribute__((__flag_enum__))
+#else
+    #define JSON_HEDLEY_FLAGS
+#endif
+
+#if defined(JSON_HEDLEY_FLAGS_CAST)
+    #undef JSON_HEDLEY_FLAGS_CAST
+#endif
+#if JSON_HEDLEY_INTEL_VERSION_CHECK(19,0,0)
+#  define JSON_HEDLEY_FLAGS_CAST(T, expr) (__extension__ ({ \
+        JSON_HEDLEY_DIAGNOSTIC_PUSH \
+        _Pragma("warning(disable:188)") \
+        ((T) (expr)); \
+        JSON_HEDLEY_DIAGNOSTIC_POP \
+    }))
+#else
+#  define JSON_HEDLEY_FLAGS_CAST(T, expr) JSON_HEDLEY_STATIC_CAST(T, expr)
+#endif
+
+#if defined(JSON_HEDLEY_EMPTY_BASES)
+    #undef JSON_HEDLEY_EMPTY_BASES
+#endif
+#if \
+    (JSON_HEDLEY_MSVC_VERSION_CHECK(19,0,23918) && !JSON_HEDLEY_MSVC_VERSION_CHECK(20,0,0)) || \
+    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)
+    #define JSON_HEDLEY_EMPTY_BASES __declspec(empty_bases)
+#else
+    #define JSON_HEDLEY_EMPTY_BASES
+#endif
+
+/* Remaining macros are deprecated. */
+
+#if defined(JSON_HEDLEY_GCC_NOT_CLANG_VERSION_CHECK)
+    #undef JSON_HEDLEY_GCC_NOT_CLANG_VERSION_CHECK
+#endif
+#if defined(__clang__)
+    #define JSON_HEDLEY_GCC_NOT_CLANG_VERSION_CHECK(major,minor,patch) (0)
+#else
+    #define JSON_HEDLEY_GCC_NOT_CLANG_VERSION_CHECK(major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)
+#endif
+
+#if defined(JSON_HEDLEY_CLANG_HAS_ATTRIBUTE)
+    #undef JSON_HEDLEY_CLANG_HAS_ATTRIBUTE
+#endif
+#define JSON_HEDLEY_CLANG_HAS_ATTRIBUTE(attribute) JSON_HEDLEY_HAS_ATTRIBUTE(attribute)
+
+#if defined(JSON_HEDLEY_CLANG_HAS_CPP_ATTRIBUTE)
+    #undef JSON_HEDLEY_CLANG_HAS_CPP_ATTRIBUTE
+#endif
+#define JSON_HEDLEY_CLANG_HAS_CPP_ATTRIBUTE(attribute) JSON_HEDLEY_HAS_CPP_ATTRIBUTE(attribute)
+
+#if defined(JSON_HEDLEY_CLANG_HAS_BUILTIN)
+    #undef JSON_HEDLEY_CLANG_HAS_BUILTIN
+#endif
+#define JSON_HEDLEY_CLANG_HAS_BUILTIN(builtin) JSON_HEDLEY_HAS_BUILTIN(builtin)
+
+#if defined(JSON_HEDLEY_CLANG_HAS_FEATURE)
+    #undef JSON_HEDLEY_CLANG_HAS_FEATURE
+#endif
+#define JSON_HEDLEY_CLANG_HAS_FEATURE(feature) JSON_HEDLEY_HAS_FEATURE(feature)
+
+#if defined(JSON_HEDLEY_CLANG_HAS_EXTENSION)
+    #undef JSON_HEDLEY_CLANG_HAS_EXTENSION
+#endif
+#define JSON_HEDLEY_CLANG_HAS_EXTENSION(extension) JSON_HEDLEY_HAS_EXTENSION(extension)
+
+#if defined(JSON_HEDLEY_CLANG_HAS_DECLSPEC_DECLSPEC_ATTRIBUTE)
+    #undef JSON_HEDLEY_CLANG_HAS_DECLSPEC_DECLSPEC_ATTRIBUTE
+#endif
+#define JSON_HEDLEY_CLANG_HAS_DECLSPEC_ATTRIBUTE(attribute) JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE(attribute)
+
+#if defined(JSON_HEDLEY_CLANG_HAS_WARNING)
+    #undef JSON_HEDLEY_CLANG_HAS_WARNING
+#endif
+#define JSON_HEDLEY_CLANG_HAS_WARNING(warning) JSON_HEDLEY_HAS_WARNING(warning)
+
+#endif /* !defined(JSON_HEDLEY_VERSION) || (JSON_HEDLEY_VERSION < X) */
+
+
+// This file contains all internal macro definitions (except those affecting ABI)
+// You MUST include macro_unscope.hpp at the end of json.hpp to undef all of them
+
+// #include <nlohmann/detail/abi_macros.hpp>
+
+
+// exclude unsupported compilers
+#if !defined(JSON_SKIP_UNSUPPORTED_COMPILER_CHECK)
+    #if defined(__clang__)
+        #if (__clang_major__ * 10000 + __clang_minor__ * 100 + __clang_patchlevel__) < 30400
+            #error "unsupported Clang version - see https://github.com/nlohmann/json#supported-compilers"
+        #endif
+    #elif defined(__GNUC__) && !(defined(__ICC) || defined(__INTEL_COMPILER))
+        #if (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__) < 40800
+            #error "unsupported GCC version - see https://github.com/nlohmann/json#supported-compilers"
+        #endif
+    #endif
+#endif
+
+// C++ language standard detection
+// if the user manually specified the used c++ version this is skipped
+#if !defined(JSON_HAS_CPP_20) && !defined(JSON_HAS_CPP_17) && !defined(JSON_HAS_CPP_14) && !defined(JSON_HAS_CPP_11)
+    #if (defined(__cplusplus) && __cplusplus >= 202002L) || (defined(_MSVC_LANG) && _MSVC_LANG >= 202002L)
+        #define JSON_HAS_CPP_20
+        #define JSON_HAS_CPP_17
+        #define JSON_HAS_CPP_14
+    #elif (defined(__cplusplus) && __cplusplus >= 201703L) || (defined(_HAS_CXX17) && _HAS_CXX17 == 1) // fix for issue #464
+        #define JSON_HAS_CPP_17
+        #define JSON_HAS_CPP_14
+    #elif (defined(__cplusplus) && __cplusplus >= 201402L) || (defined(_HAS_CXX14) && _HAS_CXX14 == 1)
+        #define JSON_HAS_CPP_14
+    #endif
+    // the cpp 11 flag is always specified because it is the minimal required version
+    #define JSON_HAS_CPP_11
+#endif
+
+#ifdef __has_include
+    #if __has_include(<version>)
+        #include <version>
+    #endif
+#endif
+
+#if !defined(JSON_HAS_FILESYSTEM) && !defined(JSON_HAS_EXPERIMENTAL_FILESYSTEM)
+    #ifdef JSON_HAS_CPP_17
+        #if defined(__cpp_lib_filesystem)
+            #define JSON_HAS_FILESYSTEM 1
+        #elif defined(__cpp_lib_experimental_filesystem)
+            #define JSON_HAS_EXPERIMENTAL_FILESYSTEM 1
+        #elif !defined(__has_include)
+            #define JSON_HAS_EXPERIMENTAL_FILESYSTEM 1
+        #elif __has_include(<filesystem>)
+            #define JSON_HAS_FILESYSTEM 1
+        #elif __has_include(<experimental/filesystem>)
+            #define JSON_HAS_EXPERIMENTAL_FILESYSTEM 1
+        #endif
+
+        // std::filesystem does not work on MinGW GCC 8: https://sourceforge.net/p/mingw-w64/bugs/737/
+        #if defined(__MINGW32__) && defined(__GNUC__) && __GNUC__ == 8
+            #undef JSON_HAS_FILESYSTEM
+            #undef JSON_HAS_EXPERIMENTAL_FILESYSTEM
+        #endif
+
+        // no filesystem support before GCC 8: https://en.cppreference.com/w/cpp/compiler_support
+        #if defined(__GNUC__) && !defined(__clang__) && __GNUC__ < 8
+            #undef JSON_HAS_FILESYSTEM
+            #undef JSON_HAS_EXPERIMENTAL_FILESYSTEM
+        #endif
+
+        // no filesystem support before Clang 7: https://en.cppreference.com/w/cpp/compiler_support
+        #if defined(__clang_major__) && __clang_major__ < 7
+            #undef JSON_HAS_FILESYSTEM
+            #undef JSON_HAS_EXPERIMENTAL_FILESYSTEM
+        #endif
+
+        // no filesystem support before MSVC 19.14: https://en.cppreference.com/w/cpp/compiler_support
+        #if defined(_MSC_VER) && _MSC_VER < 1914
+            #undef JSON_HAS_FILESYSTEM
+            #undef JSON_HAS_EXPERIMENTAL_FILESYSTEM
+        #endif
+
+        // no filesystem support before iOS 13
+        #if defined(__IPHONE_OS_VERSION_MIN_REQUIRED) && __IPHONE_OS_VERSION_MIN_REQUIRED < 130000
+            #undef JSON_HAS_FILESYSTEM
+            #undef JSON_HAS_EXPERIMENTAL_FILESYSTEM
+        #endif
+
+        // no filesystem support before macOS Catalina
+        #if defined(__MAC_OS_X_VERSION_MIN_REQUIRED) && __MAC_OS_X_VERSION_MIN_REQUIRED < 101500
+            #undef JSON_HAS_FILESYSTEM
+            #undef JSON_HAS_EXPERIMENTAL_FILESYSTEM
+        #endif
+    #endif
+#endif
+
+#ifndef JSON_HAS_EXPERIMENTAL_FILESYSTEM
+    #define JSON_HAS_EXPERIMENTAL_FILESYSTEM 0
+#endif
+
+#ifndef JSON_HAS_FILESYSTEM
+    #define JSON_HAS_FILESYSTEM 0
+#endif
+
+#ifndef JSON_HAS_THREE_WAY_COMPARISON
+    #if defined(__cpp_impl_three_way_comparison) && __cpp_impl_three_way_comparison >= 201907L \
+        && defined(__cpp_lib_three_way_comparison) && __cpp_lib_three_way_comparison >= 201907L
+        #define JSON_HAS_THREE_WAY_COMPARISON 1
+    #else
+        #define JSON_HAS_THREE_WAY_COMPARISON 0
+    #endif
+#endif
+
+#ifndef JSON_HAS_RANGES
+    // ranges header shipping in GCC 11.1.0 (released 2021-04-27) has syntax error
+    #if defined(__GLIBCXX__) && __GLIBCXX__ == 20210427
+        #define JSON_HAS_RANGES 0
+    #elif defined(__cpp_lib_ranges)
+        #define JSON_HAS_RANGES 1
+    #else
+        #define JSON_HAS_RANGES 0
+    #endif
+#endif
+
+#ifdef JSON_HAS_CPP_17
+    #define JSON_INLINE_VARIABLE inline
+#else
+    #define JSON_INLINE_VARIABLE
+#endif
+
+#if JSON_HEDLEY_HAS_ATTRIBUTE(no_unique_address)
+    #define JSON_NO_UNIQUE_ADDRESS [[no_unique_address]]
+#else
+    #define JSON_NO_UNIQUE_ADDRESS
+#endif
+
+// disable documentation warnings on clang
+#if defined(__clang__)
+    #pragma clang diagnostic push
+    #pragma clang diagnostic ignored "-Wdocumentation"
+    #pragma clang diagnostic ignored "-Wdocumentation-unknown-command"
+#endif
+
+// allow disabling exceptions
+#if (defined(__cpp_exceptions) || defined(__EXCEPTIONS) || defined(_CPPUNWIND)) && !defined(JSON_NOEXCEPTION)
+    #define JSON_THROW(exception) throw exception
+    #define JSON_TRY try
+    #define JSON_CATCH(exception) catch(exception)
+    #define JSON_INTERNAL_CATCH(exception) catch(exception)
+#else
+    #include <cstdlib>
+    #define JSON_THROW(exception) std::abort()
+    #define JSON_TRY if(true)
+    #define JSON_CATCH(exception) if(false)
+    #define JSON_INTERNAL_CATCH(exception) if(false)
+#endif
+
+// override exception macros
+#if defined(JSON_THROW_USER)
+    #undef JSON_THROW
+    #define JSON_THROW JSON_THROW_USER
+#endif
+#if defined(JSON_TRY_USER)
+    #undef JSON_TRY
+    #define JSON_TRY JSON_TRY_USER
+#endif
+#if defined(JSON_CATCH_USER)
+    #undef JSON_CATCH
+    #define JSON_CATCH JSON_CATCH_USER
+    #undef JSON_INTERNAL_CATCH
+    #define JSON_INTERNAL_CATCH JSON_CATCH_USER
+#endif
+#if defined(JSON_INTERNAL_CATCH_USER)
+    #undef JSON_INTERNAL_CATCH
+    #define JSON_INTERNAL_CATCH JSON_INTERNAL_CATCH_USER
+#endif
+
+// allow overriding assert
+#if !defined(JSON_ASSERT)
+    #include <cassert> // assert
+    #define JSON_ASSERT(x) assert(x)
+#endif
+
+// allow to access some private functions (needed by the test suite)
+#if defined(JSON_TESTS_PRIVATE)
+    #define JSON_PRIVATE_UNLESS_TESTED public
+#else
+    #define JSON_PRIVATE_UNLESS_TESTED private
+#endif
+
+/*!
+@brief macro to briefly define a mapping between an enum and JSON
+@def NLOHMANN_JSON_SERIALIZE_ENUM
+@since version 3.4.0
+*/
+#define NLOHMANN_JSON_SERIALIZE_ENUM(ENUM_TYPE, ...)                                            \
+    template<typename BasicJsonType>                                                            \
+    inline void to_json(BasicJsonType& j, const ENUM_TYPE& e)                                   \
+    {                                                                                           \
+        static_assert(std::is_enum<ENUM_TYPE>::value, #ENUM_TYPE " must be an enum!");          \
+        static const std::pair<ENUM_TYPE, BasicJsonType> m[] = __VA_ARGS__;                     \
+        auto it = std::find_if(std::begin(m), std::end(m),                                      \
+                               [e](const std::pair<ENUM_TYPE, BasicJsonType>& ej_pair) -> bool  \
+        {                                                                                       \
+            return ej_pair.first == e;                                                          \
+        });                                                                                     \
+        j = ((it != std::end(m)) ? it : std::begin(m))->second;                                 \
+    }                                                                                           \
+    template<typename BasicJsonType>                                                            \
+    inline void from_json(const BasicJsonType& j, ENUM_TYPE& e)                                 \
+    {                                                                                           \
+        static_assert(std::is_enum<ENUM_TYPE>::value, #ENUM_TYPE " must be an enum!");          \
+        static const std::pair<ENUM_TYPE, BasicJsonType> m[] = __VA_ARGS__;                     \
+        auto it = std::find_if(std::begin(m), std::end(m),                                      \
+                               [&j](const std::pair<ENUM_TYPE, BasicJsonType>& ej_pair) -> bool \
+        {                                                                                       \
+            return ej_pair.second == j;                                                         \
+        });                                                                                     \
+        e = ((it != std::end(m)) ? it : std::begin(m))->first;                                  \
+    }
+
+// Ugly macros to avoid uglier copy-paste when specializing basic_json. They
+// may be removed in the future once the class is split.
+
+#define NLOHMANN_BASIC_JSON_TPL_DECLARATION                                \
+    template<template<typename, typename, typename...> class ObjectType,   \
+             template<typename, typename...> class ArrayType,              \
+             class StringType, class BooleanType, class NumberIntegerType, \
+             class NumberUnsignedType, class NumberFloatType,              \
+             template<typename> class AllocatorType,                       \
+             template<typename, typename = void> class JSONSerializer,     \
+             class BinaryType,                                             \
+             class CustomBaseClass>
+
+#define NLOHMANN_BASIC_JSON_TPL                                            \
+    basic_json<ObjectType, ArrayType, StringType, BooleanType,             \
+    NumberIntegerType, NumberUnsignedType, NumberFloatType,                \
+    AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>
+
+// Macros to simplify conversion from/to types
+
+#define NLOHMANN_JSON_EXPAND( x ) x
+#define NLOHMANN_JSON_GET_MACRO(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, NAME,...) NAME
+#define NLOHMANN_JSON_PASTE(...) NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_GET_MACRO(__VA_ARGS__, \
+        NLOHMANN_JSON_PASTE64, \
+        NLOHMANN_JSON_PASTE63, \
+        NLOHMANN_JSON_PASTE62, \
+        NLOHMANN_JSON_PASTE61, \
+        NLOHMANN_JSON_PASTE60, \
+        NLOHMANN_JSON_PASTE59, \
+        NLOHMANN_JSON_PASTE58, \
+        NLOHMANN_JSON_PASTE57, \
+        NLOHMANN_JSON_PASTE56, \
+        NLOHMANN_JSON_PASTE55, \
+        NLOHMANN_JSON_PASTE54, \
+        NLOHMANN_JSON_PASTE53, \
+        NLOHMANN_JSON_PASTE52, \
+        NLOHMANN_JSON_PASTE51, \
+        NLOHMANN_JSON_PASTE50, \
+        NLOHMANN_JSON_PASTE49, \
+        NLOHMANN_JSON_PASTE48, \
+        NLOHMANN_JSON_PASTE47, \
+        NLOHMANN_JSON_PASTE46, \
+        NLOHMANN_JSON_PASTE45, \
+        NLOHMANN_JSON_PASTE44, \
+        NLOHMANN_JSON_PASTE43, \
+        NLOHMANN_JSON_PASTE42, \
+        NLOHMANN_JSON_PASTE41, \
+        NLOHMANN_JSON_PASTE40, \
+        NLOHMANN_JSON_PASTE39, \
+        NLOHMANN_JSON_PASTE38, \
+        NLOHMANN_JSON_PASTE37, \
+        NLOHMANN_JSON_PASTE36, \
+        NLOHMANN_JSON_PASTE35, \
+        NLOHMANN_JSON_PASTE34, \
+        NLOHMANN_JSON_PASTE33, \
+        NLOHMANN_JSON_PASTE32, \
+        NLOHMANN_JSON_PASTE31, \
+        NLOHMANN_JSON_PASTE30, \
+        NLOHMANN_JSON_PASTE29, \
+        NLOHMANN_JSON_PASTE28, \
+        NLOHMANN_JSON_PASTE27, \
+        NLOHMANN_JSON_PASTE26, \
+        NLOHMANN_JSON_PASTE25, \
+        NLOHMANN_JSON_PASTE24, \
+        NLOHMANN_JSON_PASTE23, \
+        NLOHMANN_JSON_PASTE22, \
+        NLOHMANN_JSON_PASTE21, \
+        NLOHMANN_JSON_PASTE20, \
+        NLOHMANN_JSON_PASTE19, \
+        NLOHMANN_JSON_PASTE18, \
+        NLOHMANN_JSON_PASTE17, \
+        NLOHMANN_JSON_PASTE16, \
+        NLOHMANN_JSON_PASTE15, \
+        NLOHMANN_JSON_PASTE14, \
+        NLOHMANN_JSON_PASTE13, \
+        NLOHMANN_JSON_PASTE12, \
+        NLOHMANN_JSON_PASTE11, \
+        NLOHMANN_JSON_PASTE10, \
+        NLOHMANN_JSON_PASTE9, \
+        NLOHMANN_JSON_PASTE8, \
+        NLOHMANN_JSON_PASTE7, \
+        NLOHMANN_JSON_PASTE6, \
+        NLOHMANN_JSON_PASTE5, \
+        NLOHMANN_JSON_PASTE4, \
+        NLOHMANN_JSON_PASTE3, \
+        NLOHMANN_JSON_PASTE2, \
+        NLOHMANN_JSON_PASTE1)(__VA_ARGS__))
+#define NLOHMANN_JSON_PASTE2(func, v1) func(v1)
+#define NLOHMANN_JSON_PASTE3(func, v1, v2) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE2(func, v2)
+#define NLOHMANN_JSON_PASTE4(func, v1, v2, v3) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE3(func, v2, v3)
+#define NLOHMANN_JSON_PASTE5(func, v1, v2, v3, v4) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE4(func, v2, v3, v4)
+#define NLOHMANN_JSON_PASTE6(func, v1, v2, v3, v4, v5) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE5(func, v2, v3, v4, v5)
+#define NLOHMANN_JSON_PASTE7(func, v1, v2, v3, v4, v5, v6) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE6(func, v2, v3, v4, v5, v6)
+#define NLOHMANN_JSON_PASTE8(func, v1, v2, v3, v4, v5, v6, v7) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE7(func, v2, v3, v4, v5, v6, v7)
+#define NLOHMANN_JSON_PASTE9(func, v1, v2, v3, v4, v5, v6, v7, v8) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE8(func, v2, v3, v4, v5, v6, v7, v8)
+#define NLOHMANN_JSON_PASTE10(func, v1, v2, v3, v4, v5, v6, v7, v8, v9) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE9(func, v2, v3, v4, v5, v6, v7, v8, v9)
+#define NLOHMANN_JSON_PASTE11(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE10(func, v2, v3, v4, v5, v6, v7, v8, v9, v10)
+#define NLOHMANN_JSON_PASTE12(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE11(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
+#define NLOHMANN_JSON_PASTE13(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE12(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12)
+#define NLOHMANN_JSON_PASTE14(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE13(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13)
+#define NLOHMANN_JSON_PASTE15(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE14(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14)
+#define NLOHMANN_JSON_PASTE16(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE15(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15)
+#define NLOHMANN_JSON_PASTE17(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE16(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16)
+#define NLOHMANN_JSON_PASTE18(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE17(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17)
+#define NLOHMANN_JSON_PASTE19(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE18(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18)
+#define NLOHMANN_JSON_PASTE20(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE19(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19)
+#define NLOHMANN_JSON_PASTE21(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE20(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20)
+#define NLOHMANN_JSON_PASTE22(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE21(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21)
+#define NLOHMANN_JSON_PASTE23(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE22(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22)
+#define NLOHMANN_JSON_PASTE24(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE23(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23)
+#define NLOHMANN_JSON_PASTE25(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE24(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24)
+#define NLOHMANN_JSON_PASTE26(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE25(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25)
+#define NLOHMANN_JSON_PASTE27(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE26(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26)
+#define NLOHMANN_JSON_PASTE28(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE27(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27)
+#define NLOHMANN_JSON_PASTE29(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE28(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28)
+#define NLOHMANN_JSON_PASTE30(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE29(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29)
+#define NLOHMANN_JSON_PASTE31(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE30(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30)
+#define NLOHMANN_JSON_PASTE32(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE31(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31)
+#define NLOHMANN_JSON_PASTE33(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE32(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32)
+#define NLOHMANN_JSON_PASTE34(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE33(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33)
+#define NLOHMANN_JSON_PASTE35(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE34(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34)
+#define NLOHMANN_JSON_PASTE36(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE35(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35)
+#define NLOHMANN_JSON_PASTE37(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE36(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36)
+#define NLOHMANN_JSON_PASTE38(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE37(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37)
+#define NLOHMANN_JSON_PASTE39(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE38(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38)
+#define NLOHMANN_JSON_PASTE40(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE39(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39)
+#define NLOHMANN_JSON_PASTE41(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE40(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40)
+#define NLOHMANN_JSON_PASTE42(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE41(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41)
+#define NLOHMANN_JSON_PASTE43(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE42(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42)
+#define NLOHMANN_JSON_PASTE44(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE43(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43)
+#define NLOHMANN_JSON_PASTE45(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE44(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44)
+#define NLOHMANN_JSON_PASTE46(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE45(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45)
+#define NLOHMANN_JSON_PASTE47(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE46(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46)
+#define NLOHMANN_JSON_PASTE48(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE47(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47)
+#define NLOHMANN_JSON_PASTE49(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE48(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48)
+#define NLOHMANN_JSON_PASTE50(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE49(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49)
+#define NLOHMANN_JSON_PASTE51(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE50(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50)
+#define NLOHMANN_JSON_PASTE52(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE51(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51)
+#define NLOHMANN_JSON_PASTE53(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE52(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52)
+#define NLOHMANN_JSON_PASTE54(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE53(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53)
+#define NLOHMANN_JSON_PASTE55(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE54(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54)
+#define NLOHMANN_JSON_PASTE56(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE55(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55)
+#define NLOHMANN_JSON_PASTE57(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE56(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56)
+#define NLOHMANN_JSON_PASTE58(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE57(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57)
+#define NLOHMANN_JSON_PASTE59(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE58(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58)
+#define NLOHMANN_JSON_PASTE60(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE59(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59)
+#define NLOHMANN_JSON_PASTE61(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE60(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60)
+#define NLOHMANN_JSON_PASTE62(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE61(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61)
+#define NLOHMANN_JSON_PASTE63(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE62(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62)
+#define NLOHMANN_JSON_PASTE64(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE63(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63)
+
+#define NLOHMANN_JSON_TO(v1) nlohmann_json_j[#v1] = nlohmann_json_t.v1;
+#define NLOHMANN_JSON_FROM(v1) nlohmann_json_j.at(#v1).get_to(nlohmann_json_t.v1);
+#define NLOHMANN_JSON_FROM_WITH_DEFAULT(v1) nlohmann_json_t.v1 = nlohmann_json_j.value(#v1, nlohmann_json_default_obj.v1);
+
+/*!
+@brief macro
+@def NLOHMANN_DEFINE_TYPE_INTRUSIVE
+@since version 3.9.0
+*/
+#define NLOHMANN_DEFINE_TYPE_INTRUSIVE(Type, ...)  \
+    friend void to_json(nlohmann::json& nlohmann_json_j, const Type& nlohmann_json_t) { NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_TO, __VA_ARGS__)) } \
+    friend void from_json(const nlohmann::json& nlohmann_json_j, Type& nlohmann_json_t) { NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_FROM, __VA_ARGS__)) }
+
+#define NLOHMANN_DEFINE_TYPE_INTRUSIVE_WITH_DEFAULT(Type, ...)  \
+    friend void to_json(nlohmann::json& nlohmann_json_j, const Type& nlohmann_json_t) { NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_TO, __VA_ARGS__)) } \
+    friend void from_json(const nlohmann::json& nlohmann_json_j, Type& nlohmann_json_t) { const Type nlohmann_json_default_obj{}; NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_FROM_WITH_DEFAULT, __VA_ARGS__)) }
+
+/*!
+@brief macro
+@def NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE
+@since version 3.9.0
+*/
+#define NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE(Type, ...)  \
+    inline void to_json(nlohmann::json& nlohmann_json_j, const Type& nlohmann_json_t) { NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_TO, __VA_ARGS__)) } \
+    inline void from_json(const nlohmann::json& nlohmann_json_j, Type& nlohmann_json_t) { NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_FROM, __VA_ARGS__)) }
+
+#define NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE_WITH_DEFAULT(Type, ...)  \
+    inline void to_json(nlohmann::json& nlohmann_json_j, const Type& nlohmann_json_t) { NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_TO, __VA_ARGS__)) } \
+    inline void from_json(const nlohmann::json& nlohmann_json_j, Type& nlohmann_json_t) { const Type nlohmann_json_default_obj{}; NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_FROM_WITH_DEFAULT, __VA_ARGS__)) }
+
+
+// inspired from https://stackoverflow.com/a/26745591
+// allows to call any std function as if (e.g. with begin):
+// using std::begin; begin(x);
+//
+// it allows using the detected idiom to retrieve the return type
+// of such an expression
+#define NLOHMANN_CAN_CALL_STD_FUNC_IMPL(std_name)                                 \
+    namespace detail {                                                            \
+    using std::std_name;                                                          \
+    \
+    template<typename... T>                                                       \
+    using result_of_##std_name = decltype(std_name(std::declval<T>()...));        \
+    }                                                                             \
+    \
+    namespace detail2 {                                                           \
+    struct std_name##_tag                                                         \
+    {                                                                             \
+    };                                                                            \
+    \
+    template<typename... T>                                                       \
+    std_name##_tag std_name(T&&...);                                              \
+    \
+    template<typename... T>                                                       \
+    using result_of_##std_name = decltype(std_name(std::declval<T>()...));        \
+    \
+    template<typename... T>                                                       \
+    struct would_call_std_##std_name                                              \
+    {                                                                             \
+        static constexpr auto const value = ::nlohmann::detail::                  \
+                                            is_detected_exact<std_name##_tag, result_of_##std_name, T...>::value; \
+    };                                                                            \
+    } /* namespace detail2 */ \
+    \
+    template<typename... T>                                                       \
+    struct would_call_std_##std_name : detail2::would_call_std_##std_name<T...>   \
+    {                                                                             \
+    }
+
+#ifndef JSON_USE_IMPLICIT_CONVERSIONS
+    #define JSON_USE_IMPLICIT_CONVERSIONS 1
+#endif
+
+#if JSON_USE_IMPLICIT_CONVERSIONS
+    #define JSON_EXPLICIT
+#else
+    #define JSON_EXPLICIT explicit
+#endif
+
+#ifndef JSON_DISABLE_ENUM_SERIALIZATION
+    #define JSON_DISABLE_ENUM_SERIALIZATION 0
+#endif
+
+#ifndef JSON_USE_GLOBAL_UDLS
+    #define JSON_USE_GLOBAL_UDLS 1
+#endif
+
+#if JSON_HAS_THREE_WAY_COMPARISON
+    #include <compare> // partial_ordering
+#endif
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+
+///////////////////////////
+// JSON type enumeration //
+///////////////////////////
+
+/*!
+@brief the JSON type enumeration
+
+This enumeration collects the different JSON types. It is internally used to
+distinguish the stored values, and the functions @ref basic_json::is_null(),
+@ref basic_json::is_object(), @ref basic_json::is_array(),
+@ref basic_json::is_string(), @ref basic_json::is_boolean(),
+@ref basic_json::is_number() (with @ref basic_json::is_number_integer(),
+@ref basic_json::is_number_unsigned(), and @ref basic_json::is_number_float()),
+@ref basic_json::is_discarded(), @ref basic_json::is_primitive(), and
+@ref basic_json::is_structured() rely on it.
+
+@note There are three enumeration entries (number_integer, number_unsigned, and
+number_float), because the library distinguishes these three types for numbers:
+@ref basic_json::number_unsigned_t is used for unsigned integers,
+@ref basic_json::number_integer_t is used for signed integers, and
+@ref basic_json::number_float_t is used for floating-point numbers or to
+approximate integers which do not fit in the limits of their respective type.
+
+@sa see @ref basic_json::basic_json(const value_t value_type) -- create a JSON
+value with the default value for a given type
+
+@since version 1.0.0
+*/
+enum class value_t : std::uint8_t
+{
+    null,             ///< null value
+    object,           ///< object (unordered set of name/value pairs)
+    array,            ///< array (ordered collection of values)
+    string,           ///< string value
+    boolean,          ///< boolean value
+    number_integer,   ///< number value (signed integer)
+    number_unsigned,  ///< number value (unsigned integer)
+    number_float,     ///< number value (floating-point)
+    binary,           ///< binary array (ordered collection of bytes)
+    discarded         ///< discarded by the parser callback function
+};
+
+/*!
+@brief comparison operator for JSON types
+
+Returns an ordering that is similar to Python:
+- order: null < boolean < number < object < array < string < binary
+- furthermore, each type is not smaller than itself
+- discarded values are not comparable
+- binary is represented as a b"" string in python and directly comparable to a
+  string; however, making a binary array directly comparable with a string would
+  be surprising behavior in a JSON file.
+
+@since version 1.0.0
+*/
+#if JSON_HAS_THREE_WAY_COMPARISON
+    inline std::partial_ordering operator<=>(const value_t lhs, const value_t rhs) noexcept // *NOPAD*
+#else
+    inline bool operator<(const value_t lhs, const value_t rhs) noexcept
+#endif
+{
+    static constexpr std::array<std::uint8_t, 9> order = {{
+            0 /* null */, 3 /* object */, 4 /* array */, 5 /* string */,
+            1 /* boolean */, 2 /* integer */, 2 /* unsigned */, 2 /* float */,
+            6 /* binary */
+        }
+    };
+
+    const auto l_index = static_cast<std::size_t>(lhs);
+    const auto r_index = static_cast<std::size_t>(rhs);
+#if JSON_HAS_THREE_WAY_COMPARISON
+    if (l_index < order.size() && r_index < order.size())
+    {
+        return order[l_index] <=> order[r_index]; // *NOPAD*
+    }
+    return std::partial_ordering::unordered;
+#else
+    return l_index < order.size() && r_index < order.size() && order[l_index] < order[r_index];
+#endif
+}
+
+// GCC selects the built-in operator< over an operator rewritten from
+// a user-defined spaceship operator
+// Clang, MSVC, and ICC select the rewritten candidate
+// (see GCC bug https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105200)
+#if JSON_HAS_THREE_WAY_COMPARISON && defined(__GNUC__)
+inline bool operator<(const value_t lhs, const value_t rhs) noexcept
+{
+    return std::is_lt(lhs <=> rhs); // *NOPAD*
+}
+#endif
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/string_escape.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+// #include <nlohmann/detail/abi_macros.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+
+/*!
+@brief replace all occurrences of a substring by another string
+
+@param[in,out] s  the string to manipulate; changed so that all
+               occurrences of @a f are replaced with @a t
+@param[in]     f  the substring to replace with @a t
+@param[in]     t  the string to replace @a f
+
+@pre The search string @a f must not be empty. **This precondition is
+enforced with an assertion.**
+
+@since version 2.0.0
+*/
+template<typename StringType>
+inline void replace_substring(StringType& s, const StringType& f,
+                              const StringType& t)
+{
+    JSON_ASSERT(!f.empty());
+    for (auto pos = s.find(f);                // find first occurrence of f
+            pos != StringType::npos;          // make sure f was found
+            s.replace(pos, f.size(), t),      // replace with t, and
+            pos = s.find(f, pos + t.size()))  // find next occurrence of f
+    {}
+}
+
+/*!
+ * @brief string escaping as described in RFC 6901 (Sect. 4)
+ * @param[in] s string to escape
+ * @return    escaped string
+ *
+ * Note the order of escaping "~" to "~0" and "/" to "~1" is important.
+ */
+template<typename StringType>
+inline StringType escape(StringType s)
+{
+    replace_substring(s, StringType{"~"}, StringType{"~0"});
+    replace_substring(s, StringType{"/"}, StringType{"~1"});
+    return s;
+}
+
+/*!
+ * @brief string unescaping as described in RFC 6901 (Sect. 4)
+ * @param[in] s string to unescape
+ * @return    unescaped string
+ *
+ * Note the order of escaping "~1" to "/" and "~0" to "~" is important.
+ */
+template<typename StringType>
+static void unescape(StringType& s)
+{
+    replace_substring(s, StringType{"~1"}, StringType{"/"});
+    replace_substring(s, StringType{"~0"}, StringType{"~"});
+}
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/input/position_t.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <cstddef> // size_t
+
+// #include <nlohmann/detail/abi_macros.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+
+/// struct to capture the start position of the current token
+struct position_t
+{
+    /// the total number of characters read
+    std::size_t chars_read_total = 0;
+    /// the number of characters read in the current line
+    std::size_t chars_read_current_line = 0;
+    /// the number of lines read
+    std::size_t lines_read = 0;
+
+    /// conversion to size_t to preserve SAX interface
+    constexpr operator size_t() const
+    {
+        return chars_read_total;
+    }
+};
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/macro_scope.hpp>
+
+// #include <nlohmann/detail/meta/cpp_future.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-FileCopyrightText: 2018 The Abseil Authors
+// SPDX-License-Identifier: MIT
+
+
+
+#include <array> // array
+#include <cstddef> // size_t
+#include <type_traits> // conditional, enable_if, false_type, integral_constant, is_constructible, is_integral, is_same, remove_cv, remove_reference, true_type
+#include <utility> // index_sequence, make_index_sequence, index_sequence_for
+
+// #include <nlohmann/detail/macro_scope.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+
+template<typename T>
+using uncvref_t = typename std::remove_cv<typename std::remove_reference<T>::type>::type;
+
+#ifdef JSON_HAS_CPP_14
+
+// the following utilities are natively available in C++14
+using std::enable_if_t;
+using std::index_sequence;
+using std::make_index_sequence;
+using std::index_sequence_for;
+
+#else
+
+// alias templates to reduce boilerplate
+template<bool B, typename T = void>
+using enable_if_t = typename std::enable_if<B, T>::type;
+
+// The following code is taken from https://github.com/abseil/abseil-cpp/blob/10cb35e459f5ecca5b2ff107635da0bfa41011b4/absl/utility/utility.h
+// which is part of Google Abseil (https://github.com/abseil/abseil-cpp), licensed under the Apache License 2.0.
+
+//// START OF CODE FROM GOOGLE ABSEIL
+
+// integer_sequence
+//
+// Class template representing a compile-time integer sequence. An instantiation
+// of `integer_sequence<T, Ints...>` has a sequence of integers encoded in its
+// type through its template arguments (which is a common need when
+// working with C++11 variadic templates). `absl::integer_sequence` is designed
+// to be a drop-in replacement for C++14's `std::integer_sequence`.
+//
+// Example:
+//
+//   template< class T, T... Ints >
+//   void user_function(integer_sequence<T, Ints...>);
+//
+//   int main()
+//   {
+//     // user_function's `T` will be deduced to `int` and `Ints...`
+//     // will be deduced to `0, 1, 2, 3, 4`.
+//     user_function(make_integer_sequence<int, 5>());
+//   }
+template <typename T, T... Ints>
+struct integer_sequence
+{
+    using value_type = T;
+    static constexpr std::size_t size() noexcept
+    {
+        return sizeof...(Ints);
+    }
+};
+
+// index_sequence
+//
+// A helper template for an `integer_sequence` of `size_t`,
+// `absl::index_sequence` is designed to be a drop-in replacement for C++14's
+// `std::index_sequence`.
+template <size_t... Ints>
+using index_sequence = integer_sequence<size_t, Ints...>;
+
+namespace utility_internal
+{
+
+template <typename Seq, size_t SeqSize, size_t Rem>
+struct Extend;
+
+// Note that SeqSize == sizeof...(Ints). It's passed explicitly for efficiency.
+template <typename T, T... Ints, size_t SeqSize>
+struct Extend<integer_sequence<T, Ints...>, SeqSize, 0>
+{
+    using type = integer_sequence < T, Ints..., (Ints + SeqSize)... >;
+};
+
+template <typename T, T... Ints, size_t SeqSize>
+struct Extend<integer_sequence<T, Ints...>, SeqSize, 1>
+{
+    using type = integer_sequence < T, Ints..., (Ints + SeqSize)..., 2 * SeqSize >;
+};
+
+// Recursion helper for 'make_integer_sequence<T, N>'.
+// 'Gen<T, N>::type' is an alias for 'integer_sequence<T, 0, 1, ... N-1>'.
+template <typename T, size_t N>
+struct Gen
+{
+    using type =
+        typename Extend < typename Gen < T, N / 2 >::type, N / 2, N % 2 >::type;
+};
+
+template <typename T>
+struct Gen<T, 0>
+{
+    using type = integer_sequence<T>;
+};
+
+}  // namespace utility_internal
+
+// Compile-time sequences of integers
+
+// make_integer_sequence
+//
+// This template alias is equivalent to
+// `integer_sequence<int, 0, 1, ..., N-1>`, and is designed to be a drop-in
+// replacement for C++14's `std::make_integer_sequence`.
+template <typename T, T N>
+using make_integer_sequence = typename utility_internal::Gen<T, N>::type;
+
+// make_index_sequence
+//
+// This template alias is equivalent to `index_sequence<0, 1, ..., N-1>`,
+// and is designed to be a drop-in replacement for C++14's
+// `std::make_index_sequence`.
+template <size_t N>
+using make_index_sequence = make_integer_sequence<size_t, N>;
+
+// index_sequence_for
+//
+// Converts a typename pack into an index sequence of the same length, and
+// is designed to be a drop-in replacement for C++14's
+// `std::index_sequence_for()`
+template <typename... Ts>
+using index_sequence_for = make_index_sequence<sizeof...(Ts)>;
+
+//// END OF CODE FROM GOOGLE ABSEIL
+
+#endif
+
+// dispatch utility (taken from ranges-v3)
+template<unsigned N> struct priority_tag : priority_tag < N - 1 > {};
+template<> struct priority_tag<0> {};
+
+// taken from ranges-v3
+template<typename T>
+struct static_const
+{
+    static JSON_INLINE_VARIABLE constexpr T value{};
+};
+
+#ifndef JSON_HAS_CPP_17
+    template<typename T>
+    constexpr T static_const<T>::value;
+#endif
+
+template<typename T, typename... Args>
+inline constexpr std::array<T, sizeof...(Args)> make_array(Args&& ... args)
+{
+    return std::array<T, sizeof...(Args)> {{static_cast<T>(std::forward<Args>(args))...}};
+}
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/meta/type_traits.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <limits> // numeric_limits
+#include <type_traits> // false_type, is_constructible, is_integral, is_same, true_type
+#include <utility> // declval
+#include <tuple> // tuple
+
+// #include <nlohmann/detail/iterators/iterator_traits.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <iterator> // random_access_iterator_tag
+
+// #include <nlohmann/detail/abi_macros.hpp>
+
+// #include <nlohmann/detail/meta/void_t.hpp>
+
+// #include <nlohmann/detail/meta/cpp_future.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+
+template<typename It, typename = void>
+struct iterator_types {};
+
+template<typename It>
+struct iterator_types <
+    It,
+    void_t<typename It::difference_type, typename It::value_type, typename It::pointer,
+    typename It::reference, typename It::iterator_category >>
+{
+    using difference_type = typename It::difference_type;
+    using value_type = typename It::value_type;
+    using pointer = typename It::pointer;
+    using reference = typename It::reference;
+    using iterator_category = typename It::iterator_category;
+};
+
+// This is required as some compilers implement std::iterator_traits in a way that
+// doesn't work with SFINAE. See https://github.com/nlohmann/json/issues/1341.
+template<typename T, typename = void>
+struct iterator_traits
+{
+};
+
+template<typename T>
+struct iterator_traits < T, enable_if_t < !std::is_pointer<T>::value >>
+            : iterator_types<T>
+{
+};
+
+template<typename T>
+struct iterator_traits<T*, enable_if_t<std::is_object<T>::value>>
+{
+    using iterator_category = std::random_access_iterator_tag;
+    using value_type = T;
+    using difference_type = ptrdiff_t;
+    using pointer = T*;
+    using reference = T&;
+};
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/macro_scope.hpp>
+
+// #include <nlohmann/detail/meta/call_std/begin.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+// #include <nlohmann/detail/macro_scope.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+
+NLOHMANN_CAN_CALL_STD_FUNC_IMPL(begin);
+
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/meta/call_std/end.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+// #include <nlohmann/detail/macro_scope.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+
+NLOHMANN_CAN_CALL_STD_FUNC_IMPL(end);
+
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/meta/cpp_future.hpp>
+
+// #include <nlohmann/detail/meta/detected.hpp>
+
+// #include <nlohmann/json_fwd.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+#ifndef INCLUDE_NLOHMANN_JSON_FWD_HPP_
+    #define INCLUDE_NLOHMANN_JSON_FWD_HPP_
+
+    #include <cstdint> // int64_t, uint64_t
+    #include <map> // map
+    #include <memory> // allocator
+    #include <string> // string
+    #include <vector> // vector
+
+    // #include <nlohmann/detail/abi_macros.hpp>
+
+
+    /*!
+    @brief namespace for Niels Lohmann
+    @see https://github.com/nlohmann
+    @since version 1.0.0
+    */
+    NLOHMANN_JSON_NAMESPACE_BEGIN
+
+    /*!
+    @brief default JSONSerializer template argument
+
+    This serializer ignores the template arguments and uses ADL
+    ([argument-dependent lookup](https://en.cppreference.com/w/cpp/language/adl))
+    for serialization.
+    */
+    template<typename T = void, typename SFINAE = void>
+    struct adl_serializer;
+
+    /// a class to store JSON values
+    /// @sa https://json.nlohmann.me/api/basic_json/
+    template<template<typename U, typename V, typename... Args> class ObjectType =
+    std::map,
+    template<typename U, typename... Args> class ArrayType = std::vector,
+    class StringType = std::string, class BooleanType = bool,
+    class NumberIntegerType = std::int64_t,
+    class NumberUnsignedType = std::uint64_t,
+    class NumberFloatType = double,
+    template<typename U> class AllocatorType = std::allocator,
+    template<typename T, typename SFINAE = void> class JSONSerializer =
+    adl_serializer,
+    class BinaryType = std::vector<std::uint8_t>, // cppcheck-suppress syntaxError
+    class CustomBaseClass = void>
+    class basic_json;
+
+    /// @brief JSON Pointer defines a string syntax for identifying a specific value within a JSON document
+    /// @sa https://json.nlohmann.me/api/json_pointer/
+    template<typename RefStringType>
+    class json_pointer;
+
+    /*!
+    @brief default specialization
+    @sa https://json.nlohmann.me/api/json/
+    */
+    using json = basic_json<>;
+
+    /// @brief a minimal map-like container that preserves insertion order
+    /// @sa https://json.nlohmann.me/api/ordered_map/
+    template<class Key, class T, class IgnoredLess, class Allocator>
+    struct ordered_map;
+
+    /// @brief specialization that maintains the insertion order of object keys
+    /// @sa https://json.nlohmann.me/api/ordered_json/
+    using ordered_json = basic_json<nlohmann::ordered_map>;
+
+    NLOHMANN_JSON_NAMESPACE_END
+
+#endif  // INCLUDE_NLOHMANN_JSON_FWD_HPP_
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+/*!
+@brief detail namespace with internal helper functions
+
+This namespace collects functions that should not be exposed,
+implementations of some @ref basic_json methods, and meta-programming helpers.
+
+@since version 2.1.0
+*/
+namespace detail
+{
+
+/////////////
+// helpers //
+/////////////
+
+// Note to maintainers:
+//
+// Every trait in this file expects a non CV-qualified type.
+// The only exceptions are in the 'aliases for detected' section
+// (i.e. those of the form: decltype(T::member_function(std::declval<T>())))
+//
+// In this case, T has to be properly CV-qualified to constraint the function arguments
+// (e.g. to_json(BasicJsonType&, const T&))
+
+template<typename> struct is_basic_json : std::false_type {};
+
+NLOHMANN_BASIC_JSON_TPL_DECLARATION
+struct is_basic_json<NLOHMANN_BASIC_JSON_TPL> : std::true_type {};
+
+// used by exceptions create() member functions
+// true_type for pointer to possibly cv-qualified basic_json or std::nullptr_t
+// false_type otherwise
+template<typename BasicJsonContext>
+struct is_basic_json_context :
+    std::integral_constant < bool,
+    is_basic_json<typename std::remove_cv<typename std::remove_pointer<BasicJsonContext>::type>::type>::value
+    || std::is_same<BasicJsonContext, std::nullptr_t>::value >
+{};
+
+//////////////////////
+// json_ref helpers //
+//////////////////////
+
+template<typename>
+class json_ref;
+
+template<typename>
+struct is_json_ref : std::false_type {};
+
+template<typename T>
+struct is_json_ref<json_ref<T>> : std::true_type {};
+
+//////////////////////////
+// aliases for detected //
+//////////////////////////
+
+template<typename T>
+using mapped_type_t = typename T::mapped_type;
+
+template<typename T>
+using key_type_t = typename T::key_type;
+
+template<typename T>
+using value_type_t = typename T::value_type;
+
+template<typename T>
+using difference_type_t = typename T::difference_type;
+
+template<typename T>
+using pointer_t = typename T::pointer;
+
+template<typename T>
+using reference_t = typename T::reference;
+
+template<typename T>
+using iterator_category_t = typename T::iterator_category;
+
+template<typename T, typename... Args>
+using to_json_function = decltype(T::to_json(std::declval<Args>()...));
+
+template<typename T, typename... Args>
+using from_json_function = decltype(T::from_json(std::declval<Args>()...));
+
+template<typename T, typename U>
+using get_template_function = decltype(std::declval<T>().template get<U>());
+
+// trait checking if JSONSerializer<T>::from_json(json const&, udt&) exists
+template<typename BasicJsonType, typename T, typename = void>
+struct has_from_json : std::false_type {};
+
+// trait checking if j.get<T> is valid
+// use this trait instead of std::is_constructible or std::is_convertible,
+// both rely on, or make use of implicit conversions, and thus fail when T
+// has several constructors/operator= (see https://github.com/nlohmann/json/issues/958)
+template <typename BasicJsonType, typename T>
+struct is_getable
+{
+    static constexpr bool value = is_detected<get_template_function, const BasicJsonType&, T>::value;
+};
+
+template<typename BasicJsonType, typename T>
+struct has_from_json < BasicJsonType, T, enable_if_t < !is_basic_json<T>::value >>
+{
+    using serializer = typename BasicJsonType::template json_serializer<T, void>;
+
+    static constexpr bool value =
+        is_detected_exact<void, from_json_function, serializer,
+        const BasicJsonType&, T&>::value;
+};
+
+// This trait checks if JSONSerializer<T>::from_json(json const&) exists
+// this overload is used for non-default-constructible user-defined-types
+template<typename BasicJsonType, typename T, typename = void>
+struct has_non_default_from_json : std::false_type {};
+
+template<typename BasicJsonType, typename T>
+struct has_non_default_from_json < BasicJsonType, T, enable_if_t < !is_basic_json<T>::value >>
+{
+    using serializer = typename BasicJsonType::template json_serializer<T, void>;
+
+    static constexpr bool value =
+        is_detected_exact<T, from_json_function, serializer,
+        const BasicJsonType&>::value;
+};
+
+// This trait checks if BasicJsonType::json_serializer<T>::to_json exists
+// Do not evaluate the trait when T is a basic_json type, to avoid template instantiation infinite recursion.
+template<typename BasicJsonType, typename T, typename = void>
+struct has_to_json : std::false_type {};
+
+template<typename BasicJsonType, typename T>
+struct has_to_json < BasicJsonType, T, enable_if_t < !is_basic_json<T>::value >>
+{
+    using serializer = typename BasicJsonType::template json_serializer<T, void>;
+
+    static constexpr bool value =
+        is_detected_exact<void, to_json_function, serializer, BasicJsonType&,
+        T>::value;
+};
+
+template<typename T>
+using detect_key_compare = typename T::key_compare;
+
+template<typename T>
+struct has_key_compare : std::integral_constant<bool, is_detected<detect_key_compare, T>::value> {};
+
+// obtains the actual object key comparator
+template<typename BasicJsonType>
+struct actual_object_comparator
+{
+    using object_t = typename BasicJsonType::object_t;
+    using object_comparator_t = typename BasicJsonType::default_object_comparator_t;
+    using type = typename std::conditional < has_key_compare<object_t>::value,
+          typename object_t::key_compare, object_comparator_t>::type;
+};
+
+template<typename BasicJsonType>
+using actual_object_comparator_t = typename actual_object_comparator<BasicJsonType>::type;
+
+///////////////////
+// is_ functions //
+///////////////////
+
+// https://en.cppreference.com/w/cpp/types/conjunction
+template<class...> struct conjunction : std::true_type { };
+template<class B> struct conjunction<B> : B { };
+template<class B, class... Bn>
+struct conjunction<B, Bn...>
+: std::conditional<static_cast<bool>(B::value), conjunction<Bn...>, B>::type {};
+
+// https://en.cppreference.com/w/cpp/types/negation
+template<class B> struct negation : std::integral_constant < bool, !B::value > { };
+
+// Reimplementation of is_constructible and is_default_constructible, due to them being broken for
+// std::pair and std::tuple until LWG 2367 fix (see https://cplusplus.github.io/LWG/lwg-defects.html#2367).
+// This causes compile errors in e.g. clang 3.5 or gcc 4.9.
+template <typename T>
+struct is_default_constructible : std::is_default_constructible<T> {};
+
+template <typename T1, typename T2>
+struct is_default_constructible<std::pair<T1, T2>>
+            : conjunction<is_default_constructible<T1>, is_default_constructible<T2>> {};
+
+template <typename T1, typename T2>
+struct is_default_constructible<const std::pair<T1, T2>>
+            : conjunction<is_default_constructible<T1>, is_default_constructible<T2>> {};
+
+template <typename... Ts>
+struct is_default_constructible<std::tuple<Ts...>>
+            : conjunction<is_default_constructible<Ts>...> {};
+
+template <typename... Ts>
+struct is_default_constructible<const std::tuple<Ts...>>
+            : conjunction<is_default_constructible<Ts>...> {};
+
+
+template <typename T, typename... Args>
+struct is_constructible : std::is_constructible<T, Args...> {};
+
+template <typename T1, typename T2>
+struct is_constructible<std::pair<T1, T2>> : is_default_constructible<std::pair<T1, T2>> {};
+
+template <typename T1, typename T2>
+struct is_constructible<const std::pair<T1, T2>> : is_default_constructible<const std::pair<T1, T2>> {};
+
+template <typename... Ts>
+struct is_constructible<std::tuple<Ts...>> : is_default_constructible<std::tuple<Ts...>> {};
+
+template <typename... Ts>
+struct is_constructible<const std::tuple<Ts...>> : is_default_constructible<const std::tuple<Ts...>> {};
+
+
+template<typename T, typename = void>
+struct is_iterator_traits : std::false_type {};
+
+template<typename T>
+struct is_iterator_traits<iterator_traits<T>>
+{
+  private:
+    using traits = iterator_traits<T>;
+
+  public:
+    static constexpr auto value =
+        is_detected<value_type_t, traits>::value &&
+        is_detected<difference_type_t, traits>::value &&
+        is_detected<pointer_t, traits>::value &&
+        is_detected<iterator_category_t, traits>::value &&
+        is_detected<reference_t, traits>::value;
+};
+
+template<typename T>
+struct is_range
+{
+  private:
+    using t_ref = typename std::add_lvalue_reference<T>::type;
+
+    using iterator = detected_t<result_of_begin, t_ref>;
+    using sentinel = detected_t<result_of_end, t_ref>;
+
+    // to be 100% correct, it should use https://en.cppreference.com/w/cpp/iterator/input_or_output_iterator
+    // and https://en.cppreference.com/w/cpp/iterator/sentinel_for
+    // but reimplementing these would be too much work, as a lot of other concepts are used underneath
+    static constexpr auto is_iterator_begin =
+        is_iterator_traits<iterator_traits<iterator>>::value;
+
+  public:
+    static constexpr bool value = !std::is_same<iterator, nonesuch>::value && !std::is_same<sentinel, nonesuch>::value && is_iterator_begin;
+};
+
+template<typename R>
+using iterator_t = enable_if_t<is_range<R>::value, result_of_begin<decltype(std::declval<R&>())>>;
+
+template<typename T>
+using range_value_t = value_type_t<iterator_traits<iterator_t<T>>>;
+
+// The following implementation of is_complete_type is taken from
+// https://blogs.msdn.microsoft.com/vcblog/2015/12/02/partial-support-for-expression-sfinae-in-vs-2015-update-1/
+// and is written by Xiang Fan who agreed to using it in this library.
+
+template<typename T, typename = void>
+struct is_complete_type : std::false_type {};
+
+template<typename T>
+struct is_complete_type<T, decltype(void(sizeof(T)))> : std::true_type {};
+
+template<typename BasicJsonType, typename CompatibleObjectType,
+         typename = void>
+struct is_compatible_object_type_impl : std::false_type {};
+
+template<typename BasicJsonType, typename CompatibleObjectType>
+struct is_compatible_object_type_impl <
+    BasicJsonType, CompatibleObjectType,
+    enable_if_t < is_detected<mapped_type_t, CompatibleObjectType>::value&&
+    is_detected<key_type_t, CompatibleObjectType>::value >>
+{
+    using object_t = typename BasicJsonType::object_t;
+
+    // macOS's is_constructible does not play well with nonesuch...
+    static constexpr bool value =
+        is_constructible<typename object_t::key_type,
+        typename CompatibleObjectType::key_type>::value &&
+        is_constructible<typename object_t::mapped_type,
+        typename CompatibleObjectType::mapped_type>::value;
+};
+
+template<typename BasicJsonType, typename CompatibleObjectType>
+struct is_compatible_object_type
+    : is_compatible_object_type_impl<BasicJsonType, CompatibleObjectType> {};
+
+template<typename BasicJsonType, typename ConstructibleObjectType,
+         typename = void>
+struct is_constructible_object_type_impl : std::false_type {};
+
+template<typename BasicJsonType, typename ConstructibleObjectType>
+struct is_constructible_object_type_impl <
+    BasicJsonType, ConstructibleObjectType,
+    enable_if_t < is_detected<mapped_type_t, ConstructibleObjectType>::value&&
+    is_detected<key_type_t, ConstructibleObjectType>::value >>
+{
+    using object_t = typename BasicJsonType::object_t;
+
+    static constexpr bool value =
+        (is_default_constructible<ConstructibleObjectType>::value &&
+         (std::is_move_assignable<ConstructibleObjectType>::value ||
+          std::is_copy_assignable<ConstructibleObjectType>::value) &&
+         (is_constructible<typename ConstructibleObjectType::key_type,
+          typename object_t::key_type>::value &&
+          std::is_same <
+          typename object_t::mapped_type,
+          typename ConstructibleObjectType::mapped_type >::value)) ||
+        (has_from_json<BasicJsonType,
+         typename ConstructibleObjectType::mapped_type>::value ||
+         has_non_default_from_json <
+         BasicJsonType,
+         typename ConstructibleObjectType::mapped_type >::value);
+};
+
+template<typename BasicJsonType, typename ConstructibleObjectType>
+struct is_constructible_object_type
+    : is_constructible_object_type_impl<BasicJsonType,
+      ConstructibleObjectType> {};
+
+template<typename BasicJsonType, typename CompatibleStringType>
+struct is_compatible_string_type
+{
+    static constexpr auto value =
+        is_constructible<typename BasicJsonType::string_t, CompatibleStringType>::value;
+};
+
+template<typename BasicJsonType, typename ConstructibleStringType>
+struct is_constructible_string_type
+{
+    // launder type through decltype() to fix compilation failure on ICPC
+#ifdef __INTEL_COMPILER
+    using laundered_type = decltype(std::declval<ConstructibleStringType>());
+#else
+    using laundered_type = ConstructibleStringType;
+#endif
+
+    static constexpr auto value =
+        conjunction <
+        is_constructible<laundered_type, typename BasicJsonType::string_t>,
+        is_detected_exact<typename BasicJsonType::string_t::value_type,
+        value_type_t, laundered_type >>::value;
+};
+
+template<typename BasicJsonType, typename CompatibleArrayType, typename = void>
+struct is_compatible_array_type_impl : std::false_type {};
+
+template<typename BasicJsonType, typename CompatibleArrayType>
+struct is_compatible_array_type_impl <
+    BasicJsonType, CompatibleArrayType,
+    enable_if_t <
+    is_detected<iterator_t, CompatibleArrayType>::value&&
+    is_iterator_traits<iterator_traits<detected_t<iterator_t, CompatibleArrayType>>>::value&&
+// special case for types like std::filesystem::path whose iterator's value_type are themselves
+// c.f. https://github.com/nlohmann/json/pull/3073
+    !std::is_same<CompatibleArrayType, detected_t<range_value_t, CompatibleArrayType>>::value >>
+{
+    static constexpr bool value =
+        is_constructible<BasicJsonType,
+        range_value_t<CompatibleArrayType>>::value;
+};
+
+template<typename BasicJsonType, typename CompatibleArrayType>
+struct is_compatible_array_type
+    : is_compatible_array_type_impl<BasicJsonType, CompatibleArrayType> {};
+
+template<typename BasicJsonType, typename ConstructibleArrayType, typename = void>
+struct is_constructible_array_type_impl : std::false_type {};
+
+template<typename BasicJsonType, typename ConstructibleArrayType>
+struct is_constructible_array_type_impl <
+    BasicJsonType, ConstructibleArrayType,
+    enable_if_t<std::is_same<ConstructibleArrayType,
+    typename BasicJsonType::value_type>::value >>
+            : std::true_type {};
+
+template<typename BasicJsonType, typename ConstructibleArrayType>
+struct is_constructible_array_type_impl <
+    BasicJsonType, ConstructibleArrayType,
+    enable_if_t < !std::is_same<ConstructibleArrayType,
+    typename BasicJsonType::value_type>::value&&
+    !is_compatible_string_type<BasicJsonType, ConstructibleArrayType>::value&&
+    is_default_constructible<ConstructibleArrayType>::value&&
+(std::is_move_assignable<ConstructibleArrayType>::value ||
+ std::is_copy_assignable<ConstructibleArrayType>::value)&&
+is_detected<iterator_t, ConstructibleArrayType>::value&&
+is_iterator_traits<iterator_traits<detected_t<iterator_t, ConstructibleArrayType>>>::value&&
+is_detected<range_value_t, ConstructibleArrayType>::value&&
+// special case for types like std::filesystem::path whose iterator's value_type are themselves
+// c.f. https://github.com/nlohmann/json/pull/3073
+!std::is_same<ConstructibleArrayType, detected_t<range_value_t, ConstructibleArrayType>>::value&&
+        is_complete_type <
+        detected_t<range_value_t, ConstructibleArrayType >>::value >>
+{
+    using value_type = range_value_t<ConstructibleArrayType>;
+
+    static constexpr bool value =
+        std::is_same<value_type,
+        typename BasicJsonType::array_t::value_type>::value ||
+        has_from_json<BasicJsonType,
+        value_type>::value ||
+        has_non_default_from_json <
+        BasicJsonType,
+        value_type >::value;
+};
+
+template<typename BasicJsonType, typename ConstructibleArrayType>
+struct is_constructible_array_type
+    : is_constructible_array_type_impl<BasicJsonType, ConstructibleArrayType> {};
+
+template<typename RealIntegerType, typename CompatibleNumberIntegerType,
+         typename = void>
+struct is_compatible_integer_type_impl : std::false_type {};
+
+template<typename RealIntegerType, typename CompatibleNumberIntegerType>
+struct is_compatible_integer_type_impl <
+    RealIntegerType, CompatibleNumberIntegerType,
+    enable_if_t < std::is_integral<RealIntegerType>::value&&
+    std::is_integral<CompatibleNumberIntegerType>::value&&
+    !std::is_same<bool, CompatibleNumberIntegerType>::value >>
+{
+    // is there an assert somewhere on overflows?
+    using RealLimits = std::numeric_limits<RealIntegerType>;
+    using CompatibleLimits = std::numeric_limits<CompatibleNumberIntegerType>;
+
+    static constexpr auto value =
+        is_constructible<RealIntegerType,
+        CompatibleNumberIntegerType>::value &&
+        CompatibleLimits::is_integer &&
+        RealLimits::is_signed == CompatibleLimits::is_signed;
+};
+
+template<typename RealIntegerType, typename CompatibleNumberIntegerType>
+struct is_compatible_integer_type
+    : is_compatible_integer_type_impl<RealIntegerType,
+      CompatibleNumberIntegerType> {};
+
+template<typename BasicJsonType, typename CompatibleType, typename = void>
+struct is_compatible_type_impl: std::false_type {};
+
+template<typename BasicJsonType, typename CompatibleType>
+struct is_compatible_type_impl <
+    BasicJsonType, CompatibleType,
+    enable_if_t<is_complete_type<CompatibleType>::value >>
+{
+    static constexpr bool value =
+        has_to_json<BasicJsonType, CompatibleType>::value;
+};
+
+template<typename BasicJsonType, typename CompatibleType>
+struct is_compatible_type
+    : is_compatible_type_impl<BasicJsonType, CompatibleType> {};
+
+template<typename T1, typename T2>
+struct is_constructible_tuple : std::false_type {};
+
+template<typename T1, typename... Args>
+struct is_constructible_tuple<T1, std::tuple<Args...>> : conjunction<is_constructible<T1, Args>...> {};
+
+template<typename BasicJsonType, typename T>
+struct is_json_iterator_of : std::false_type {};
+
+template<typename BasicJsonType>
+struct is_json_iterator_of<BasicJsonType, typename BasicJsonType::iterator> : std::true_type {};
+
+template<typename BasicJsonType>
+struct is_json_iterator_of<BasicJsonType, typename BasicJsonType::const_iterator> : std::true_type
+{};
+
+// checks if a given type T is a template specialization of Primary
+template<template <typename...> class Primary, typename T>
+struct is_specialization_of : std::false_type {};
+
+template<template <typename...> class Primary, typename... Args>
+struct is_specialization_of<Primary, Primary<Args...>> : std::true_type {};
+
+template<typename T>
+using is_json_pointer = is_specialization_of<::nlohmann::json_pointer, uncvref_t<T>>;
+
+// checks if A and B are comparable using Compare functor
+template<typename Compare, typename A, typename B, typename = void>
+struct is_comparable : std::false_type {};
+
+template<typename Compare, typename A, typename B>
+struct is_comparable<Compare, A, B, void_t<
+decltype(std::declval<Compare>()(std::declval<A>(), std::declval<B>())),
+decltype(std::declval<Compare>()(std::declval<B>(), std::declval<A>()))
+>> : std::true_type {};
+
+template<typename T>
+using detect_is_transparent = typename T::is_transparent;
+
+// type trait to check if KeyType can be used as object key (without a BasicJsonType)
+// see is_usable_as_basic_json_key_type below
+template<typename Comparator, typename ObjectKeyType, typename KeyTypeCVRef, bool RequireTransparentComparator = true,
+         bool ExcludeObjectKeyType = RequireTransparentComparator, typename KeyType = uncvref_t<KeyTypeCVRef>>
+using is_usable_as_key_type = typename std::conditional <
+                              is_comparable<Comparator, ObjectKeyType, KeyTypeCVRef>::value
+                              && !(ExcludeObjectKeyType && std::is_same<KeyType,
+                                   ObjectKeyType>::value)
+                              && (!RequireTransparentComparator
+                                  || is_detected <detect_is_transparent, Comparator>::value)
+                              && !is_json_pointer<KeyType>::value,
+                              std::true_type,
+                              std::false_type >::type;
+
+// type trait to check if KeyType can be used as object key
+// true if:
+//   - KeyType is comparable with BasicJsonType::object_t::key_type
+//   - if ExcludeObjectKeyType is true, KeyType is not BasicJsonType::object_t::key_type
+//   - the comparator is transparent or RequireTransparentComparator is false
+//   - KeyType is not a JSON iterator or json_pointer
+template<typename BasicJsonType, typename KeyTypeCVRef, bool RequireTransparentComparator = true,
+         bool ExcludeObjectKeyType = RequireTransparentComparator, typename KeyType = uncvref_t<KeyTypeCVRef>>
+using is_usable_as_basic_json_key_type = typename std::conditional <
+        is_usable_as_key_type<typename BasicJsonType::object_comparator_t,
+        typename BasicJsonType::object_t::key_type, KeyTypeCVRef,
+        RequireTransparentComparator, ExcludeObjectKeyType>::value
+        && !is_json_iterator_of<BasicJsonType, KeyType>::value,
+        std::true_type,
+        std::false_type >::type;
+
+template<typename ObjectType, typename KeyType>
+using detect_erase_with_key_type = decltype(std::declval<ObjectType&>().erase(std::declval<KeyType>()));
+
+// type trait to check if object_t has an erase() member functions accepting KeyType
+template<typename BasicJsonType, typename KeyType>
+using has_erase_with_key_type = typename std::conditional <
+                                is_detected <
+                                detect_erase_with_key_type,
+                                typename BasicJsonType::object_t, KeyType >::value,
+                                std::true_type,
+                                std::false_type >::type;
+
+// a naive helper to check if a type is an ordered_map (exploits the fact that
+// ordered_map inherits capacity() from std::vector)
+template <typename T>
+struct is_ordered_map
+{
+    using one = char;
+
+    struct two
+    {
+        char x[2]; // NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)
+    };
+
+    template <typename C> static one test( decltype(&C::capacity) ) ;
+    template <typename C> static two test(...);
+
+    enum { value = sizeof(test<T>(nullptr)) == sizeof(char) }; // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)
+};
+
+// to avoid useless casts (see https://github.com/nlohmann/json/issues/2893#issuecomment-889152324)
+template < typename T, typename U, enable_if_t < !std::is_same<T, U>::value, int > = 0 >
+T conditional_static_cast(U value)
+{
+    return static_cast<T>(value);
+}
+
+template<typename T, typename U, enable_if_t<std::is_same<T, U>::value, int> = 0>
+T conditional_static_cast(U value)
+{
+    return value;
+}
+
+template<typename... Types>
+using all_integral = conjunction<std::is_integral<Types>...>;
+
+template<typename... Types>
+using all_signed = conjunction<std::is_signed<Types>...>;
+
+template<typename... Types>
+using all_unsigned = conjunction<std::is_unsigned<Types>...>;
+
+// there's a disjunction trait in another PR; replace when merged
+template<typename... Types>
+using same_sign = std::integral_constant < bool,
+      all_signed<Types...>::value || all_unsigned<Types...>::value >;
+
+template<typename OfType, typename T>
+using never_out_of_range = std::integral_constant < bool,
+      (std::is_signed<OfType>::value && (sizeof(T) < sizeof(OfType)))
+      || (same_sign<OfType, T>::value && sizeof(OfType) == sizeof(T)) >;
+
+template<typename OfType, typename T,
+         bool OfTypeSigned = std::is_signed<OfType>::value,
+         bool TSigned = std::is_signed<T>::value>
+struct value_in_range_of_impl2;
+
+template<typename OfType, typename T>
+struct value_in_range_of_impl2<OfType, T, false, false>
+{
+    static constexpr bool test(T val)
+    {
+        using CommonType = typename std::common_type<OfType, T>::type;
+        return static_cast<CommonType>(val) <= static_cast<CommonType>((std::numeric_limits<OfType>::max)());
+    }
+};
+
+template<typename OfType, typename T>
+struct value_in_range_of_impl2<OfType, T, true, false>
+{
+    static constexpr bool test(T val)
+    {
+        using CommonType = typename std::common_type<OfType, T>::type;
+        return static_cast<CommonType>(val) <= static_cast<CommonType>((std::numeric_limits<OfType>::max)());
+    }
+};
+
+template<typename OfType, typename T>
+struct value_in_range_of_impl2<OfType, T, false, true>
+{
+    static constexpr bool test(T val)
+    {
+        using CommonType = typename std::common_type<OfType, T>::type;
+        return val >= 0 && static_cast<CommonType>(val) <= static_cast<CommonType>((std::numeric_limits<OfType>::max)());
+    }
+};
+
+
+template<typename OfType, typename T>
+struct value_in_range_of_impl2<OfType, T, true, true>
+{
+    static constexpr bool test(T val)
+    {
+        using CommonType = typename std::common_type<OfType, T>::type;
+        return static_cast<CommonType>(val) >= static_cast<CommonType>((std::numeric_limits<OfType>::min)())
+               && static_cast<CommonType>(val) <= static_cast<CommonType>((std::numeric_limits<OfType>::max)());
+    }
+};
+
+template<typename OfType, typename T,
+         bool NeverOutOfRange = never_out_of_range<OfType, T>::value,
+         typename = detail::enable_if_t<all_integral<OfType, T>::value>>
+struct value_in_range_of_impl1;
+
+template<typename OfType, typename T>
+struct value_in_range_of_impl1<OfType, T, false>
+{
+    static constexpr bool test(T val)
+    {
+        return value_in_range_of_impl2<OfType, T>::test(val);
+    }
+};
+
+template<typename OfType, typename T>
+struct value_in_range_of_impl1<OfType, T, true>
+{
+    static constexpr bool test(T /*val*/)
+    {
+        return true;
+    }
+};
+
+template<typename OfType, typename T>
+inline constexpr bool value_in_range_of(T val)
+{
+    return value_in_range_of_impl1<OfType, T>::test(val);
+}
+
+template<bool Value>
+using bool_constant = std::integral_constant<bool, Value>;
+
+///////////////////////////////////////////////////////////////////////////////
+// is_c_string
+///////////////////////////////////////////////////////////////////////////////
+
+namespace impl
+{
+
+template<typename T>
+inline constexpr bool is_c_string()
+{
+    using TUnExt = typename std::remove_extent<T>::type;
+    using TUnCVExt = typename std::remove_cv<TUnExt>::type;
+    using TUnPtr = typename std::remove_pointer<T>::type;
+    using TUnCVPtr = typename std::remove_cv<TUnPtr>::type;
+    return
+        (std::is_array<T>::value && std::is_same<TUnCVExt, char>::value)
+        || (std::is_pointer<T>::value && std::is_same<TUnCVPtr, char>::value);
+}
+
+}  // namespace impl
+
+// checks whether T is a [cv] char */[cv] char[] C string
+template<typename T>
+struct is_c_string : bool_constant<impl::is_c_string<T>()> {};
+
+template<typename T>
+using is_c_string_uncvref = is_c_string<uncvref_t<T>>;
+
+///////////////////////////////////////////////////////////////////////////////
+// is_transparent
+///////////////////////////////////////////////////////////////////////////////
+
+namespace impl
+{
+
+template<typename T>
+inline constexpr bool is_transparent()
+{
+    return is_detected<detect_is_transparent, T>::value;
+}
+
+}  // namespace impl
+
+// checks whether T has a member named is_transparent
+template<typename T>
+struct is_transparent : bool_constant<impl::is_transparent<T>()> {};
+
+///////////////////////////////////////////////////////////////////////////////
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/string_concat.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <cstring> // strlen
+#include <string> // string
+#include <utility> // forward
+
+// #include <nlohmann/detail/meta/cpp_future.hpp>
+
+// #include <nlohmann/detail/meta/detected.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+
+inline std::size_t concat_length()
+{
+    return 0;
+}
+
+template<typename... Args>
+inline std::size_t concat_length(const char* cstr, const Args& ... rest);
+
+template<typename StringType, typename... Args>
+inline std::size_t concat_length(const StringType& str, const Args& ... rest);
+
+template<typename... Args>
+inline std::size_t concat_length(const char /*c*/, const Args& ... rest)
+{
+    return 1 + concat_length(rest...);
+}
+
+template<typename... Args>
+inline std::size_t concat_length(const char* cstr, const Args& ... rest)
+{
+    // cppcheck-suppress ignoredReturnValue
+    return ::strlen(cstr) + concat_length(rest...);
+}
+
+template<typename StringType, typename... Args>
+inline std::size_t concat_length(const StringType& str, const Args& ... rest)
+{
+    return str.size() + concat_length(rest...);
+}
+
+template<typename OutStringType>
+inline void concat_into(OutStringType& /*out*/)
+{}
+
+template<typename StringType, typename Arg>
+using string_can_append = decltype(std::declval<StringType&>().append(std::declval < Arg && > ()));
+
+template<typename StringType, typename Arg>
+using detect_string_can_append = is_detected<string_can_append, StringType, Arg>;
+
+template<typename StringType, typename Arg>
+using string_can_append_op = decltype(std::declval<StringType&>() += std::declval < Arg && > ());
+
+template<typename StringType, typename Arg>
+using detect_string_can_append_op = is_detected<string_can_append_op, StringType, Arg>;
+
+template<typename StringType, typename Arg>
+using string_can_append_iter = decltype(std::declval<StringType&>().append(std::declval<const Arg&>().begin(), std::declval<const Arg&>().end()));
+
+template<typename StringType, typename Arg>
+using detect_string_can_append_iter = is_detected<string_can_append_iter, StringType, Arg>;
+
+template<typename StringType, typename Arg>
+using string_can_append_data = decltype(std::declval<StringType&>().append(std::declval<const Arg&>().data(), std::declval<const Arg&>().size()));
+
+template<typename StringType, typename Arg>
+using detect_string_can_append_data = is_detected<string_can_append_data, StringType, Arg>;
+
+template < typename OutStringType, typename Arg, typename... Args,
+           enable_if_t < !detect_string_can_append<OutStringType, Arg>::value
+                         && detect_string_can_append_op<OutStringType, Arg>::value, int > = 0 >
+inline void concat_into(OutStringType& out, Arg && arg, Args && ... rest);
+
+template < typename OutStringType, typename Arg, typename... Args,
+           enable_if_t < !detect_string_can_append<OutStringType, Arg>::value
+                         && !detect_string_can_append_op<OutStringType, Arg>::value
+                         && detect_string_can_append_iter<OutStringType, Arg>::value, int > = 0 >
+inline void concat_into(OutStringType& out, const Arg& arg, Args && ... rest);
+
+template < typename OutStringType, typename Arg, typename... Args,
+           enable_if_t < !detect_string_can_append<OutStringType, Arg>::value
+                         && !detect_string_can_append_op<OutStringType, Arg>::value
+                         && !detect_string_can_append_iter<OutStringType, Arg>::value
+                         && detect_string_can_append_data<OutStringType, Arg>::value, int > = 0 >
+inline void concat_into(OutStringType& out, const Arg& arg, Args && ... rest);
+
+template<typename OutStringType, typename Arg, typename... Args,
+         enable_if_t<detect_string_can_append<OutStringType, Arg>::value, int> = 0>
+inline void concat_into(OutStringType& out, Arg && arg, Args && ... rest)
+{
+    out.append(std::forward<Arg>(arg));
+    concat_into(out, std::forward<Args>(rest)...);
+}
+
+template < typename OutStringType, typename Arg, typename... Args,
+           enable_if_t < !detect_string_can_append<OutStringType, Arg>::value
+                         && detect_string_can_append_op<OutStringType, Arg>::value, int > >
+inline void concat_into(OutStringType& out, Arg&& arg, Args&& ... rest)
+{
+    out += std::forward<Arg>(arg);
+    concat_into(out, std::forward<Args>(rest)...);
+}
+
+template < typename OutStringType, typename Arg, typename... Args,
+           enable_if_t < !detect_string_can_append<OutStringType, Arg>::value
+                         && !detect_string_can_append_op<OutStringType, Arg>::value
+                         && detect_string_can_append_iter<OutStringType, Arg>::value, int > >
+inline void concat_into(OutStringType& out, const Arg& arg, Args&& ... rest)
+{
+    out.append(arg.begin(), arg.end());
+    concat_into(out, std::forward<Args>(rest)...);
+}
+
+template < typename OutStringType, typename Arg, typename... Args,
+           enable_if_t < !detect_string_can_append<OutStringType, Arg>::value
+                         && !detect_string_can_append_op<OutStringType, Arg>::value
+                         && !detect_string_can_append_iter<OutStringType, Arg>::value
+                         && detect_string_can_append_data<OutStringType, Arg>::value, int > >
+inline void concat_into(OutStringType& out, const Arg& arg, Args&& ... rest)
+{
+    out.append(arg.data(), arg.size());
+    concat_into(out, std::forward<Args>(rest)...);
+}
+
+template<typename OutStringType = std::string, typename... Args>
+inline OutStringType concat(Args && ... args)
+{
+    OutStringType str;
+    str.reserve(concat_length(args...));
+    concat_into(str, std::forward<Args>(args)...);
+    return str;
+}
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+
+////////////////
+// exceptions //
+////////////////
+
+/// @brief general exception of the @ref basic_json class
+/// @sa https://json.nlohmann.me/api/basic_json/exception/
+class exception : public std::exception
+{
+  public:
+    /// returns the explanatory string
+    const char* what() const noexcept override
+    {
+        return m.what();
+    }
+
+    /// the id of the exception
+    const int id; // NOLINT(cppcoreguidelines-non-private-member-variables-in-classes)
+
+  protected:
+    JSON_HEDLEY_NON_NULL(3)
+    exception(int id_, const char* what_arg) : id(id_), m(what_arg) {} // NOLINT(bugprone-throw-keyword-missing)
+
+    static std::string name(const std::string& ename, int id_)
+    {
+        return concat("[json.exception.", ename, '.', std::to_string(id_), "] ");
+    }
+
+    static std::string diagnostics(std::nullptr_t /*leaf_element*/)
+    {
+        return "";
+    }
+
+    template<typename BasicJsonType>
+    static std::string diagnostics(const BasicJsonType* leaf_element)
+    {
+#if JSON_DIAGNOSTICS
+        std::vector<std::string> tokens;
+        for (const auto* current = leaf_element; current != nullptr && current->m_parent != nullptr; current = current->m_parent)
+        {
+            switch (current->m_parent->type())
+            {
+                case value_t::array:
+                {
+                    for (std::size_t i = 0; i < current->m_parent->m_value.array->size(); ++i)
+                    {
+                        if (&current->m_parent->m_value.array->operator[](i) == current)
+                        {
+                            tokens.emplace_back(std::to_string(i));
+                            break;
+                        }
+                    }
+                    break;
+                }
+
+                case value_t::object:
+                {
+                    for (const auto& element : *current->m_parent->m_value.object)
+                    {
+                        if (&element.second == current)
+                        {
+                            tokens.emplace_back(element.first.c_str());
+                            break;
+                        }
+                    }
+                    break;
+                }
+
+                case value_t::null: // LCOV_EXCL_LINE
+                case value_t::string: // LCOV_EXCL_LINE
+                case value_t::boolean: // LCOV_EXCL_LINE
+                case value_t::number_integer: // LCOV_EXCL_LINE
+                case value_t::number_unsigned: // LCOV_EXCL_LINE
+                case value_t::number_float: // LCOV_EXCL_LINE
+                case value_t::binary: // LCOV_EXCL_LINE
+                case value_t::discarded: // LCOV_EXCL_LINE
+                default:   // LCOV_EXCL_LINE
+                    break; // LCOV_EXCL_LINE
+            }
+        }
+
+        if (tokens.empty())
+        {
+            return "";
+        }
+
+        auto str = std::accumulate(tokens.rbegin(), tokens.rend(), std::string{},
+                                   [](const std::string & a, const std::string & b)
+        {
+            return concat(a, '/', detail::escape(b));
+        });
+        return concat('(', str, ") ");
+#else
+        static_cast<void>(leaf_element);
+        return "";
+#endif
+    }
+
+  private:
+    /// an exception object as storage for error messages
+    std::runtime_error m;
+};
+
+/// @brief exception indicating a parse error
+/// @sa https://json.nlohmann.me/api/basic_json/parse_error/
+class parse_error : public exception
+{
+  public:
+    /*!
+    @brief create a parse error exception
+    @param[in] id_       the id of the exception
+    @param[in] pos       the position where the error occurred (or with
+                         chars_read_total=0 if the position cannot be
+                         determined)
+    @param[in] what_arg  the explanatory string
+    @return parse_error object
+    */
+    template<typename BasicJsonContext, enable_if_t<is_basic_json_context<BasicJsonContext>::value, int> = 0>
+    static parse_error create(int id_, const position_t& pos, const std::string& what_arg, BasicJsonContext context)
+    {
+        const std::string w = concat(exception::name("parse_error", id_), "parse error",
+                                     position_string(pos), ": ", exception::diagnostics(context), what_arg);
+        return {id_, pos.chars_read_total, w.c_str()};
+    }
+
+    template<typename BasicJsonContext, enable_if_t<is_basic_json_context<BasicJsonContext>::value, int> = 0>
+    static parse_error create(int id_, std::size_t byte_, const std::string& what_arg, BasicJsonContext context)
+    {
+        const std::string w = concat(exception::name("parse_error", id_), "parse error",
+                                     (byte_ != 0 ? (concat(" at byte ", std::to_string(byte_))) : ""),
+                                     ": ", exception::diagnostics(context), what_arg);
+        return {id_, byte_, w.c_str()};
+    }
+
+    /*!
+    @brief byte index of the parse error
+
+    The byte index of the last read character in the input file.
+
+    @note For an input with n bytes, 1 is the index of the first character and
+          n+1 is the index of the terminating null byte or the end of file.
+          This also holds true when reading a byte vector (CBOR or MessagePack).
+    */
+    const std::size_t byte;
+
+  private:
+    parse_error(int id_, std::size_t byte_, const char* what_arg)
+        : exception(id_, what_arg), byte(byte_) {}
+
+    static std::string position_string(const position_t& pos)
+    {
+        return concat(" at line ", std::to_string(pos.lines_read + 1),
+                      ", column ", std::to_string(pos.chars_read_current_line));
+    }
+};
+
+/// @brief exception indicating errors with iterators
+/// @sa https://json.nlohmann.me/api/basic_json/invalid_iterator/
+class invalid_iterator : public exception
+{
+  public:
+    template<typename BasicJsonContext, enable_if_t<is_basic_json_context<BasicJsonContext>::value, int> = 0>
+    static invalid_iterator create(int id_, const std::string& what_arg, BasicJsonContext context)
+    {
+        const std::string w = concat(exception::name("invalid_iterator", id_), exception::diagnostics(context), what_arg);
+        return {id_, w.c_str()};
+    }
+
+  private:
+    JSON_HEDLEY_NON_NULL(3)
+    invalid_iterator(int id_, const char* what_arg)
+        : exception(id_, what_arg) {}
+};
+
+/// @brief exception indicating executing a member function with a wrong type
+/// @sa https://json.nlohmann.me/api/basic_json/type_error/
+class type_error : public exception
+{
+  public:
+    template<typename BasicJsonContext, enable_if_t<is_basic_json_context<BasicJsonContext>::value, int> = 0>
+    static type_error create(int id_, const std::string& what_arg, BasicJsonContext context)
+    {
+        const std::string w = concat(exception::name("type_error", id_), exception::diagnostics(context), what_arg);
+        return {id_, w.c_str()};
+    }
+
+  private:
+    JSON_HEDLEY_NON_NULL(3)
+    type_error(int id_, const char* what_arg) : exception(id_, what_arg) {}
+};
+
+/// @brief exception indicating access out of the defined range
+/// @sa https://json.nlohmann.me/api/basic_json/out_of_range/
+class out_of_range : public exception
+{
+  public:
+    template<typename BasicJsonContext, enable_if_t<is_basic_json_context<BasicJsonContext>::value, int> = 0>
+    static out_of_range create(int id_, const std::string& what_arg, BasicJsonContext context)
+    {
+        const std::string w = concat(exception::name("out_of_range", id_), exception::diagnostics(context), what_arg);
+        return {id_, w.c_str()};
+    }
+
+  private:
+    JSON_HEDLEY_NON_NULL(3)
+    out_of_range(int id_, const char* what_arg) : exception(id_, what_arg) {}
+};
+
+/// @brief exception indicating other library errors
+/// @sa https://json.nlohmann.me/api/basic_json/other_error/
+class other_error : public exception
+{
+  public:
+    template<typename BasicJsonContext, enable_if_t<is_basic_json_context<BasicJsonContext>::value, int> = 0>
+    static other_error create(int id_, const std::string& what_arg, BasicJsonContext context)
+    {
+        const std::string w = concat(exception::name("other_error", id_), exception::diagnostics(context), what_arg);
+        return {id_, w.c_str()};
+    }
+
+  private:
+    JSON_HEDLEY_NON_NULL(3)
+    other_error(int id_, const char* what_arg) : exception(id_, what_arg) {}
+};
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/macro_scope.hpp>
+
+// #include <nlohmann/detail/meta/cpp_future.hpp>
+
+// #include <nlohmann/detail/meta/identity_tag.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+// #include <nlohmann/detail/abi_macros.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+
+// dispatching helper struct
+template <class T> struct identity_tag {};
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/meta/std_fs.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+// #include <nlohmann/detail/macro_scope.hpp>
+
+
+#if JSON_HAS_EXPERIMENTAL_FILESYSTEM
+#include <experimental/filesystem>
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+namespace std_fs = std::experimental::filesystem;
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+#elif JSON_HAS_FILESYSTEM
+#include <filesystem>
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+namespace std_fs = std::filesystem;
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+#endif
+
+// #include <nlohmann/detail/meta/type_traits.hpp>
+
+// #include <nlohmann/detail/string_concat.hpp>
+
+// #include <nlohmann/detail/value_t.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+
+template<typename BasicJsonType>
+inline void from_json(const BasicJsonType& j, typename std::nullptr_t& n)
+{
+    if (JSON_HEDLEY_UNLIKELY(!j.is_null()))
+    {
+        JSON_THROW(type_error::create(302, concat("type must be null, but is ", j.type_name()), &j));
+    }
+    n = nullptr;
+}
+
+// overloads for basic_json template parameters
+template < typename BasicJsonType, typename ArithmeticType,
+           enable_if_t < std::is_arithmetic<ArithmeticType>::value&&
+                         !std::is_same<ArithmeticType, typename BasicJsonType::boolean_t>::value,
+                         int > = 0 >
+void get_arithmetic_value(const BasicJsonType& j, ArithmeticType& val)
+{
+    switch (static_cast<value_t>(j))
+    {
+        case value_t::number_unsigned:
+        {
+            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_unsigned_t*>());
+            break;
+        }
+        case value_t::number_integer:
+        {
+            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_integer_t*>());
+            break;
+        }
+        case value_t::number_float:
+        {
+            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_float_t*>());
+            break;
+        }
+
+        case value_t::null:
+        case value_t::object:
+        case value_t::array:
+        case value_t::string:
+        case value_t::boolean:
+        case value_t::binary:
+        case value_t::discarded:
+        default:
+            JSON_THROW(type_error::create(302, concat("type must be number, but is ", j.type_name()), &j));
+    }
+}
+
+template<typename BasicJsonType>
+inline void from_json(const BasicJsonType& j, typename BasicJsonType::boolean_t& b)
+{
+    if (JSON_HEDLEY_UNLIKELY(!j.is_boolean()))
+    {
+        JSON_THROW(type_error::create(302, concat("type must be boolean, but is ", j.type_name()), &j));
+    }
+    b = *j.template get_ptr<const typename BasicJsonType::boolean_t*>();
+}
+
+template<typename BasicJsonType>
+inline void from_json(const BasicJsonType& j, typename BasicJsonType::string_t& s)
+{
+    if (JSON_HEDLEY_UNLIKELY(!j.is_string()))
+    {
+        JSON_THROW(type_error::create(302, concat("type must be string, but is ", j.type_name()), &j));
+    }
+    s = *j.template get_ptr<const typename BasicJsonType::string_t*>();
+}
+
+template <
+    typename BasicJsonType, typename StringType,
+    enable_if_t <
+        std::is_assignable<StringType&, const typename BasicJsonType::string_t>::value
+        && is_detected_exact<typename BasicJsonType::string_t::value_type, value_type_t, StringType>::value
+        && !std::is_same<typename BasicJsonType::string_t, StringType>::value
+        && !is_json_ref<StringType>::value, int > = 0 >
+inline void from_json(const BasicJsonType& j, StringType& s)
+{
+    if (JSON_HEDLEY_UNLIKELY(!j.is_string()))
+    {
+        JSON_THROW(type_error::create(302, concat("type must be string, but is ", j.type_name()), &j));
+    }
+
+    s = *j.template get_ptr<const typename BasicJsonType::string_t*>();
+}
+
+template<typename BasicJsonType>
+inline void from_json(const BasicJsonType& j, typename BasicJsonType::number_float_t& val)
+{
+    get_arithmetic_value(j, val);
+}
+
+template<typename BasicJsonType>
+inline void from_json(const BasicJsonType& j, typename BasicJsonType::number_unsigned_t& val)
+{
+    get_arithmetic_value(j, val);
+}
+
+template<typename BasicJsonType>
+inline void from_json(const BasicJsonType& j, typename BasicJsonType::number_integer_t& val)
+{
+    get_arithmetic_value(j, val);
+}
+
+#if !JSON_DISABLE_ENUM_SERIALIZATION
+template<typename BasicJsonType, typename EnumType,
+         enable_if_t<std::is_enum<EnumType>::value, int> = 0>
+inline void from_json(const BasicJsonType& j, EnumType& e)
+{
+    typename std::underlying_type<EnumType>::type val;
+    get_arithmetic_value(j, val);
+    e = static_cast<EnumType>(val);
+}
+#endif  // JSON_DISABLE_ENUM_SERIALIZATION
+
+// forward_list doesn't have an insert method
+template<typename BasicJsonType, typename T, typename Allocator,
+         enable_if_t<is_getable<BasicJsonType, T>::value, int> = 0>
+inline void from_json(const BasicJsonType& j, std::forward_list<T, Allocator>& l)
+{
+    if (JSON_HEDLEY_UNLIKELY(!j.is_array()))
+    {
+        JSON_THROW(type_error::create(302, concat("type must be array, but is ", j.type_name()), &j));
+    }
+    l.clear();
+    std::transform(j.rbegin(), j.rend(),
+                   std::front_inserter(l), [](const BasicJsonType & i)
+    {
+        return i.template get<T>();
+    });
+}
+
+// valarray doesn't have an insert method
+template<typename BasicJsonType, typename T,
+         enable_if_t<is_getable<BasicJsonType, T>::value, int> = 0>
+inline void from_json(const BasicJsonType& j, std::valarray<T>& l)
+{
+    if (JSON_HEDLEY_UNLIKELY(!j.is_array()))
+    {
+        JSON_THROW(type_error::create(302, concat("type must be array, but is ", j.type_name()), &j));
+    }
+    l.resize(j.size());
+    std::transform(j.begin(), j.end(), std::begin(l),
+                   [](const BasicJsonType & elem)
+    {
+        return elem.template get<T>();
+    });
+}
+
+template<typename BasicJsonType, typename T, std::size_t N>
+auto from_json(const BasicJsonType& j, T (&arr)[N])  // NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)
+-> decltype(j.template get<T>(), void())
+{
+    for (std::size_t i = 0; i < N; ++i)
+    {
+        arr[i] = j.at(i).template get<T>();
+    }
+}
+
+template<typename BasicJsonType>
+inline void from_json_array_impl(const BasicJsonType& j, typename BasicJsonType::array_t& arr, priority_tag<3> /*unused*/)
+{
+    arr = *j.template get_ptr<const typename BasicJsonType::array_t*>();
+}
+
+template<typename BasicJsonType, typename T, std::size_t N>
+auto from_json_array_impl(const BasicJsonType& j, std::array<T, N>& arr,
+                          priority_tag<2> /*unused*/)
+-> decltype(j.template get<T>(), void())
+{
+    for (std::size_t i = 0; i < N; ++i)
+    {
+        arr[i] = j.at(i).template get<T>();
+    }
+}
+
+template<typename BasicJsonType, typename ConstructibleArrayType,
+         enable_if_t<
+             std::is_assignable<ConstructibleArrayType&, ConstructibleArrayType>::value,
+             int> = 0>
+auto from_json_array_impl(const BasicJsonType& j, ConstructibleArrayType& arr, priority_tag<1> /*unused*/)
+-> decltype(
+    arr.reserve(std::declval<typename ConstructibleArrayType::size_type>()),
+    j.template get<typename ConstructibleArrayType::value_type>(),
+    void())
+{
+    using std::end;
+
+    ConstructibleArrayType ret;
+    ret.reserve(j.size());
+    std::transform(j.begin(), j.end(),
+                   std::inserter(ret, end(ret)), [](const BasicJsonType & i)
+    {
+        // get<BasicJsonType>() returns *this, this won't call a from_json
+        // method when value_type is BasicJsonType
+        return i.template get<typename ConstructibleArrayType::value_type>();
+    });
+    arr = std::move(ret);
+}
+
+template<typename BasicJsonType, typename ConstructibleArrayType,
+         enable_if_t<
+             std::is_assignable<ConstructibleArrayType&, ConstructibleArrayType>::value,
+             int> = 0>
+inline void from_json_array_impl(const BasicJsonType& j, ConstructibleArrayType& arr,
+                                 priority_tag<0> /*unused*/)
+{
+    using std::end;
+
+    ConstructibleArrayType ret;
+    std::transform(
+        j.begin(), j.end(), std::inserter(ret, end(ret)),
+        [](const BasicJsonType & i)
+    {
+        // get<BasicJsonType>() returns *this, this won't call a from_json
+        // method when value_type is BasicJsonType
+        return i.template get<typename ConstructibleArrayType::value_type>();
+    });
+    arr = std::move(ret);
+}
+
+template < typename BasicJsonType, typename ConstructibleArrayType,
+           enable_if_t <
+               is_constructible_array_type<BasicJsonType, ConstructibleArrayType>::value&&
+               !is_constructible_object_type<BasicJsonType, ConstructibleArrayType>::value&&
+               !is_constructible_string_type<BasicJsonType, ConstructibleArrayType>::value&&
+               !std::is_same<ConstructibleArrayType, typename BasicJsonType::binary_t>::value&&
+               !is_basic_json<ConstructibleArrayType>::value,
+               int > = 0 >
+auto from_json(const BasicJsonType& j, ConstructibleArrayType& arr)
+-> decltype(from_json_array_impl(j, arr, priority_tag<3> {}),
+j.template get<typename ConstructibleArrayType::value_type>(),
+void())
+{
+    if (JSON_HEDLEY_UNLIKELY(!j.is_array()))
+    {
+        JSON_THROW(type_error::create(302, concat("type must be array, but is ", j.type_name()), &j));
+    }
+
+    from_json_array_impl(j, arr, priority_tag<3> {});
+}
+
+template < typename BasicJsonType, typename T, std::size_t... Idx >
+std::array<T, sizeof...(Idx)> from_json_inplace_array_impl(BasicJsonType&& j,
+        identity_tag<std::array<T, sizeof...(Idx)>> /*unused*/, index_sequence<Idx...> /*unused*/)
+{
+    return { { std::forward<BasicJsonType>(j).at(Idx).template get<T>()... } };
+}
+
+template < typename BasicJsonType, typename T, std::size_t N >
+auto from_json(BasicJsonType&& j, identity_tag<std::array<T, N>> tag)
+-> decltype(from_json_inplace_array_impl(std::forward<BasicJsonType>(j), tag, make_index_sequence<N> {}))
+{
+    if (JSON_HEDLEY_UNLIKELY(!j.is_array()))
+    {
+        JSON_THROW(type_error::create(302, concat("type must be array, but is ", j.type_name()), &j));
+    }
+
+    return from_json_inplace_array_impl(std::forward<BasicJsonType>(j), tag, make_index_sequence<N> {});
+}
+
+template<typename BasicJsonType>
+inline void from_json(const BasicJsonType& j, typename BasicJsonType::binary_t& bin)
+{
+    if (JSON_HEDLEY_UNLIKELY(!j.is_binary()))
+    {
+        JSON_THROW(type_error::create(302, concat("type must be binary, but is ", j.type_name()), &j));
+    }
+
+    bin = *j.template get_ptr<const typename BasicJsonType::binary_t*>();
+}
+
+template<typename BasicJsonType, typename ConstructibleObjectType,
+         enable_if_t<is_constructible_object_type<BasicJsonType, ConstructibleObjectType>::value, int> = 0>
+inline void from_json(const BasicJsonType& j, ConstructibleObjectType& obj)
+{
+    if (JSON_HEDLEY_UNLIKELY(!j.is_object()))
+    {
+        JSON_THROW(type_error::create(302, concat("type must be object, but is ", j.type_name()), &j));
+    }
+
+    ConstructibleObjectType ret;
+    const auto* inner_object = j.template get_ptr<const typename BasicJsonType::object_t*>();
+    using value_type = typename ConstructibleObjectType::value_type;
+    std::transform(
+        inner_object->begin(), inner_object->end(),
+        std::inserter(ret, ret.begin()),
+        [](typename BasicJsonType::object_t::value_type const & p)
+    {
+        return value_type(p.first, p.second.template get<typename ConstructibleObjectType::mapped_type>());
+    });
+    obj = std::move(ret);
+}
+
+// overload for arithmetic types, not chosen for basic_json template arguments
+// (BooleanType, etc..); note: Is it really necessary to provide explicit
+// overloads for boolean_t etc. in case of a custom BooleanType which is not
+// an arithmetic type?
+template < typename BasicJsonType, typename ArithmeticType,
+           enable_if_t <
+               std::is_arithmetic<ArithmeticType>::value&&
+               !std::is_same<ArithmeticType, typename BasicJsonType::number_unsigned_t>::value&&
+               !std::is_same<ArithmeticType, typename BasicJsonType::number_integer_t>::value&&
+               !std::is_same<ArithmeticType, typename BasicJsonType::number_float_t>::value&&
+               !std::is_same<ArithmeticType, typename BasicJsonType::boolean_t>::value,
+               int > = 0 >
+inline void from_json(const BasicJsonType& j, ArithmeticType& val)
+{
+    switch (static_cast<value_t>(j))
+    {
+        case value_t::number_unsigned:
+        {
+            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_unsigned_t*>());
+            break;
+        }
+        case value_t::number_integer:
+        {
+            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_integer_t*>());
+            break;
+        }
+        case value_t::number_float:
+        {
+            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_float_t*>());
+            break;
+        }
+        case value_t::boolean:
+        {
+            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::boolean_t*>());
+            break;
+        }
+
+        case value_t::null:
+        case value_t::object:
+        case value_t::array:
+        case value_t::string:
+        case value_t::binary:
+        case value_t::discarded:
+        default:
+            JSON_THROW(type_error::create(302, concat("type must be number, but is ", j.type_name()), &j));
+    }
+}
+
+template<typename BasicJsonType, typename... Args, std::size_t... Idx>
+std::tuple<Args...> from_json_tuple_impl_base(BasicJsonType&& j, index_sequence<Idx...> /*unused*/)
+{
+    return std::make_tuple(std::forward<BasicJsonType>(j).at(Idx).template get<Args>()...);
+}
+
+template < typename BasicJsonType, class A1, class A2 >
+std::pair<A1, A2> from_json_tuple_impl(BasicJsonType&& j, identity_tag<std::pair<A1, A2>> /*unused*/, priority_tag<0> /*unused*/)
+{
+    return {std::forward<BasicJsonType>(j).at(0).template get<A1>(),
+            std::forward<BasicJsonType>(j).at(1).template get<A2>()};
+}
+
+template<typename BasicJsonType, typename A1, typename A2>
+inline void from_json_tuple_impl(BasicJsonType&& j, std::pair<A1, A2>& p, priority_tag<1> /*unused*/)
+{
+    p = from_json_tuple_impl(std::forward<BasicJsonType>(j), identity_tag<std::pair<A1, A2>> {}, priority_tag<0> {});
+}
+
+template<typename BasicJsonType, typename... Args>
+std::tuple<Args...> from_json_tuple_impl(BasicJsonType&& j, identity_tag<std::tuple<Args...>> /*unused*/, priority_tag<2> /*unused*/)
+{
+    return from_json_tuple_impl_base<BasicJsonType, Args...>(std::forward<BasicJsonType>(j), index_sequence_for<Args...> {});
+}
+
+template<typename BasicJsonType, typename... Args>
+inline void from_json_tuple_impl(BasicJsonType&& j, std::tuple<Args...>& t, priority_tag<3> /*unused*/)
+{
+    t = from_json_tuple_impl_base<BasicJsonType, Args...>(std::forward<BasicJsonType>(j), index_sequence_for<Args...> {});
+}
+
+template<typename BasicJsonType, typename TupleRelated>
+auto from_json(BasicJsonType&& j, TupleRelated&& t)
+-> decltype(from_json_tuple_impl(std::forward<BasicJsonType>(j), std::forward<TupleRelated>(t), priority_tag<3> {}))
+{
+    if (JSON_HEDLEY_UNLIKELY(!j.is_array()))
+    {
+        JSON_THROW(type_error::create(302, concat("type must be array, but is ", j.type_name()), &j));
+    }
+
+    return from_json_tuple_impl(std::forward<BasicJsonType>(j), std::forward<TupleRelated>(t), priority_tag<3> {});
+}
+
+template < typename BasicJsonType, typename Key, typename Value, typename Compare, typename Allocator,
+           typename = enable_if_t < !std::is_constructible <
+                                        typename BasicJsonType::string_t, Key >::value >>
+inline void from_json(const BasicJsonType& j, std::map<Key, Value, Compare, Allocator>& m)
+{
+    if (JSON_HEDLEY_UNLIKELY(!j.is_array()))
+    {
+        JSON_THROW(type_error::create(302, concat("type must be array, but is ", j.type_name()), &j));
+    }
+    m.clear();
+    for (const auto& p : j)
+    {
+        if (JSON_HEDLEY_UNLIKELY(!p.is_array()))
+        {
+            JSON_THROW(type_error::create(302, concat("type must be array, but is ", p.type_name()), &j));
+        }
+        m.emplace(p.at(0).template get<Key>(), p.at(1).template get<Value>());
+    }
+}
+
+template < typename BasicJsonType, typename Key, typename Value, typename Hash, typename KeyEqual, typename Allocator,
+           typename = enable_if_t < !std::is_constructible <
+                                        typename BasicJsonType::string_t, Key >::value >>
+inline void from_json(const BasicJsonType& j, std::unordered_map<Key, Value, Hash, KeyEqual, Allocator>& m)
+{
+    if (JSON_HEDLEY_UNLIKELY(!j.is_array()))
+    {
+        JSON_THROW(type_error::create(302, concat("type must be array, but is ", j.type_name()), &j));
+    }
+    m.clear();
+    for (const auto& p : j)
+    {
+        if (JSON_HEDLEY_UNLIKELY(!p.is_array()))
+        {
+            JSON_THROW(type_error::create(302, concat("type must be array, but is ", p.type_name()), &j));
+        }
+        m.emplace(p.at(0).template get<Key>(), p.at(1).template get<Value>());
+    }
+}
+
+#if JSON_HAS_FILESYSTEM || JSON_HAS_EXPERIMENTAL_FILESYSTEM
+template<typename BasicJsonType>
+inline void from_json(const BasicJsonType& j, std_fs::path& p)
+{
+    if (JSON_HEDLEY_UNLIKELY(!j.is_string()))
+    {
+        JSON_THROW(type_error::create(302, concat("type must be string, but is ", j.type_name()), &j));
+    }
+    p = *j.template get_ptr<const typename BasicJsonType::string_t*>();
+}
+#endif
+
+struct from_json_fn
+{
+    template<typename BasicJsonType, typename T>
+    auto operator()(const BasicJsonType& j, T&& val) const
+    noexcept(noexcept(from_json(j, std::forward<T>(val))))
+    -> decltype(from_json(j, std::forward<T>(val)))
+    {
+        return from_json(j, std::forward<T>(val));
+    }
+};
+
+}  // namespace detail
+
+#ifndef JSON_HAS_CPP_17
+/// namespace to hold default `from_json` function
+/// to see why this is required:
+/// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4381.html
+namespace // NOLINT(cert-dcl59-cpp,fuchsia-header-anon-namespaces,google-build-namespaces)
+{
+#endif
+JSON_INLINE_VARIABLE constexpr const auto& from_json = // NOLINT(misc-definitions-in-headers)
+    detail::static_const<detail::from_json_fn>::value;
+#ifndef JSON_HAS_CPP_17
+}  // namespace
+#endif
+
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/conversions/to_json.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <algorithm> // copy
+#include <iterator> // begin, end
+#include <string> // string
+#include <tuple> // tuple, get
+#include <type_traits> // is_same, is_constructible, is_floating_point, is_enum, underlying_type
+#include <utility> // move, forward, declval, pair
+#include <valarray> // valarray
+#include <vector> // vector
+
+// #include <nlohmann/detail/iterators/iteration_proxy.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <cstddef> // size_t
+#include <iterator> // input_iterator_tag
+#include <string> // string, to_string
+#include <tuple> // tuple_size, get, tuple_element
+#include <utility> // move
+
+#if JSON_HAS_RANGES
+    #include <ranges> // enable_borrowed_range
+#endif
+
+// #include <nlohmann/detail/abi_macros.hpp>
+
+// #include <nlohmann/detail/meta/type_traits.hpp>
+
+// #include <nlohmann/detail/value_t.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+
+template<typename string_type>
+void int_to_string( string_type& target, std::size_t value )
+{
+    // For ADL
+    using std::to_string;
+    target = to_string(value);
+}
+template<typename IteratorType> class iteration_proxy_value
+{
+  public:
+    using difference_type = std::ptrdiff_t;
+    using value_type = iteration_proxy_value;
+    using pointer = value_type *;
+    using reference = value_type &;
+    using iterator_category = std::input_iterator_tag;
+    using string_type = typename std::remove_cv< typename std::remove_reference<decltype( std::declval<IteratorType>().key() ) >::type >::type;
+
+  private:
+    /// the iterator
+    IteratorType anchor{};
+    /// an index for arrays (used to create key names)
+    std::size_t array_index = 0;
+    /// last stringified array index
+    mutable std::size_t array_index_last = 0;
+    /// a string representation of the array index
+    mutable string_type array_index_str = "0";
+    /// an empty string (to return a reference for primitive values)
+    string_type empty_str{};
+
+  public:
+    explicit iteration_proxy_value() = default;
+    explicit iteration_proxy_value(IteratorType it, std::size_t array_index_ = 0)
+    noexcept(std::is_nothrow_move_constructible<IteratorType>::value
+             && std::is_nothrow_default_constructible<string_type>::value)
+        : anchor(std::move(it))
+        , array_index(array_index_)
+    {}
+
+    iteration_proxy_value(iteration_proxy_value const&) = default;
+    iteration_proxy_value& operator=(iteration_proxy_value const&) = default;
+    // older GCCs are a bit fussy and require explicit noexcept specifiers on defaulted functions
+    iteration_proxy_value(iteration_proxy_value&&)
+    noexcept(std::is_nothrow_move_constructible<IteratorType>::value
+             && std::is_nothrow_move_constructible<string_type>::value) = default;
+    iteration_proxy_value& operator=(iteration_proxy_value&&)
+    noexcept(std::is_nothrow_move_assignable<IteratorType>::value
+             && std::is_nothrow_move_assignable<string_type>::value) = default;
+    ~iteration_proxy_value() = default;
+
+    /// dereference operator (needed for range-based for)
+    const iteration_proxy_value& operator*() const
+    {
+        return *this;
+    }
+
+    /// increment operator (needed for range-based for)
+    iteration_proxy_value& operator++()
+    {
+        ++anchor;
+        ++array_index;
+
+        return *this;
+    }
+
+    iteration_proxy_value operator++(int)& // NOLINT(cert-dcl21-cpp)
+    {
+        auto tmp = iteration_proxy_value(anchor, array_index);
+        ++anchor;
+        ++array_index;
+        return tmp;
+    }
+
+    /// equality operator (needed for InputIterator)
+    bool operator==(const iteration_proxy_value& o) const
+    {
+        return anchor == o.anchor;
+    }
+
+    /// inequality operator (needed for range-based for)
+    bool operator!=(const iteration_proxy_value& o) const
+    {
+        return anchor != o.anchor;
+    }
+
+    /// return key of the iterator
+    const string_type& key() const
+    {
+        JSON_ASSERT(anchor.m_object != nullptr);
+
+        switch (anchor.m_object->type())
+        {
+            // use integer array index as key
+            case value_t::array:
+            {
+                if (array_index != array_index_last)
+                {
+                    int_to_string( array_index_str, array_index );
+                    array_index_last = array_index;
+                }
+                return array_index_str;
+            }
+
+            // use key from the object
+            case value_t::object:
+                return anchor.key();
+
+            // use an empty key for all primitive types
+            case value_t::null:
+            case value_t::string:
+            case value_t::boolean:
+            case value_t::number_integer:
+            case value_t::number_unsigned:
+            case value_t::number_float:
+            case value_t::binary:
+            case value_t::discarded:
+            default:
+                return empty_str;
+        }
+    }
+
+    /// return value of the iterator
+    typename IteratorType::reference value() const
+    {
+        return anchor.value();
+    }
+};
+
+/// proxy class for the items() function
+template<typename IteratorType> class iteration_proxy
+{
+  private:
+    /// the container to iterate
+    typename IteratorType::pointer container = nullptr;
+
+  public:
+    explicit iteration_proxy() = default;
+
+    /// construct iteration proxy from a container
+    explicit iteration_proxy(typename IteratorType::reference cont) noexcept
+        : container(&cont) {}
+
+    iteration_proxy(iteration_proxy const&) = default;
+    iteration_proxy& operator=(iteration_proxy const&) = default;
+    iteration_proxy(iteration_proxy&&) noexcept = default;
+    iteration_proxy& operator=(iteration_proxy&&) noexcept = default;
+    ~iteration_proxy() = default;
+
+    /// return iterator begin (needed for range-based for)
+    iteration_proxy_value<IteratorType> begin() const noexcept
+    {
+        return iteration_proxy_value<IteratorType>(container->begin());
+    }
+
+    /// return iterator end (needed for range-based for)
+    iteration_proxy_value<IteratorType> end() const noexcept
+    {
+        return iteration_proxy_value<IteratorType>(container->end());
+    }
+};
+
+// Structured Bindings Support
+// For further reference see https://blog.tartanllama.xyz/structured-bindings/
+// And see https://github.com/nlohmann/json/pull/1391
+template<std::size_t N, typename IteratorType, enable_if_t<N == 0, int> = 0>
+auto get(const nlohmann::detail::iteration_proxy_value<IteratorType>& i) -> decltype(i.key())
+{
+    return i.key();
+}
+// Structured Bindings Support
+// For further reference see https://blog.tartanllama.xyz/structured-bindings/
+// And see https://github.com/nlohmann/json/pull/1391
+template<std::size_t N, typename IteratorType, enable_if_t<N == 1, int> = 0>
+auto get(const nlohmann::detail::iteration_proxy_value<IteratorType>& i) -> decltype(i.value())
+{
+    return i.value();
+}
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+// The Addition to the STD Namespace is required to add
+// Structured Bindings Support to the iteration_proxy_value class
+// For further reference see https://blog.tartanllama.xyz/structured-bindings/
+// And see https://github.com/nlohmann/json/pull/1391
+namespace std
+{
+
+#if defined(__clang__)
+    // Fix: https://github.com/nlohmann/json/issues/1401
+    #pragma clang diagnostic push
+    #pragma clang diagnostic ignored "-Wmismatched-tags"
+#endif
+template<typename IteratorType>
+class tuple_size<::nlohmann::detail::iteration_proxy_value<IteratorType>> // NOLINT(cert-dcl58-cpp)
+            : public std::integral_constant<std::size_t, 2> {};
+
+template<std::size_t N, typename IteratorType>
+class tuple_element<N, ::nlohmann::detail::iteration_proxy_value<IteratorType >> // NOLINT(cert-dcl58-cpp)
+{
+  public:
+    using type = decltype(
+                     get<N>(std::declval <
+                            ::nlohmann::detail::iteration_proxy_value<IteratorType >> ()));
+};
+#if defined(__clang__)
+    #pragma clang diagnostic pop
+#endif
+
+}  // namespace std
+
+#if JSON_HAS_RANGES
+    template <typename IteratorType>
+    inline constexpr bool ::std::ranges::enable_borrowed_range<::nlohmann::detail::iteration_proxy<IteratorType>> = true;
+#endif
+
+// #include <nlohmann/detail/macro_scope.hpp>
+
+// #include <nlohmann/detail/meta/cpp_future.hpp>
+
+// #include <nlohmann/detail/meta/std_fs.hpp>
+
+// #include <nlohmann/detail/meta/type_traits.hpp>
+
+// #include <nlohmann/detail/value_t.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+
+//////////////////
+// constructors //
+//////////////////
+
+/*
+ * Note all external_constructor<>::construct functions need to call
+ * j.m_value.destroy(j.m_type) to avoid a memory leak in case j contains an
+ * allocated value (e.g., a string). See bug issue
+ * https://github.com/nlohmann/json/issues/2865 for more information.
+ */
+
+template<value_t> struct external_constructor;
+
+template<>
+struct external_constructor<value_t::boolean>
+{
+    template<typename BasicJsonType>
+    static void construct(BasicJsonType& j, typename BasicJsonType::boolean_t b) noexcept
+    {
+        j.m_value.destroy(j.m_type);
+        j.m_type = value_t::boolean;
+        j.m_value = b;
+        j.assert_invariant();
+    }
+};
+
+template<>
+struct external_constructor<value_t::string>
+{
+    template<typename BasicJsonType>
+    static void construct(BasicJsonType& j, const typename BasicJsonType::string_t& s)
+    {
+        j.m_value.destroy(j.m_type);
+        j.m_type = value_t::string;
+        j.m_value = s;
+        j.assert_invariant();
+    }
+
+    template<typename BasicJsonType>
+    static void construct(BasicJsonType& j, typename BasicJsonType::string_t&& s)
+    {
+        j.m_value.destroy(j.m_type);
+        j.m_type = value_t::string;
+        j.m_value = std::move(s);
+        j.assert_invariant();
+    }
+
+    template < typename BasicJsonType, typename CompatibleStringType,
+               enable_if_t < !std::is_same<CompatibleStringType, typename BasicJsonType::string_t>::value,
+                             int > = 0 >
+    static void construct(BasicJsonType& j, const CompatibleStringType& str)
+    {
+        j.m_value.destroy(j.m_type);
+        j.m_type = value_t::string;
+        j.m_value.string = j.template create<typename BasicJsonType::string_t>(str);
+        j.assert_invariant();
+    }
+};
+
+template<>
+struct external_constructor<value_t::binary>
+{
+    template<typename BasicJsonType>
+    static void construct(BasicJsonType& j, const typename BasicJsonType::binary_t& b)
+    {
+        j.m_value.destroy(j.m_type);
+        j.m_type = value_t::binary;
+        j.m_value = typename BasicJsonType::binary_t(b);
+        j.assert_invariant();
+    }
+
+    template<typename BasicJsonType>
+    static void construct(BasicJsonType& j, typename BasicJsonType::binary_t&& b)
+    {
+        j.m_value.destroy(j.m_type);
+        j.m_type = value_t::binary;
+        j.m_value = typename BasicJsonType::binary_t(std::move(b));
+        j.assert_invariant();
+    }
+};
+
+template<>
+struct external_constructor<value_t::number_float>
+{
+    template<typename BasicJsonType>
+    static void construct(BasicJsonType& j, typename BasicJsonType::number_float_t val) noexcept
+    {
+        j.m_value.destroy(j.m_type);
+        j.m_type = value_t::number_float;
+        j.m_value = val;
+        j.assert_invariant();
+    }
+};
+
+template<>
+struct external_constructor<value_t::number_unsigned>
+{
+    template<typename BasicJsonType>
+    static void construct(BasicJsonType& j, typename BasicJsonType::number_unsigned_t val) noexcept
+    {
+        j.m_value.destroy(j.m_type);
+        j.m_type = value_t::number_unsigned;
+        j.m_value = val;
+        j.assert_invariant();
+    }
+};
+
+template<>
+struct external_constructor<value_t::number_integer>
+{
+    template<typename BasicJsonType>
+    static void construct(BasicJsonType& j, typename BasicJsonType::number_integer_t val) noexcept
+    {
+        j.m_value.destroy(j.m_type);
+        j.m_type = value_t::number_integer;
+        j.m_value = val;
+        j.assert_invariant();
+    }
+};
+
+template<>
+struct external_constructor<value_t::array>
+{
+    template<typename BasicJsonType>
+    static void construct(BasicJsonType& j, const typename BasicJsonType::array_t& arr)
+    {
+        j.m_value.destroy(j.m_type);
+        j.m_type = value_t::array;
+        j.m_value = arr;
+        j.set_parents();
+        j.assert_invariant();
+    }
+
+    template<typename BasicJsonType>
+    static void construct(BasicJsonType& j, typename BasicJsonType::array_t&& arr)
+    {
+        j.m_value.destroy(j.m_type);
+        j.m_type = value_t::array;
+        j.m_value = std::move(arr);
+        j.set_parents();
+        j.assert_invariant();
+    }
+
+    template < typename BasicJsonType, typename CompatibleArrayType,
+               enable_if_t < !std::is_same<CompatibleArrayType, typename BasicJsonType::array_t>::value,
+                             int > = 0 >
+    static void construct(BasicJsonType& j, const CompatibleArrayType& arr)
+    {
+        using std::begin;
+        using std::end;
+
+        j.m_value.destroy(j.m_type);
+        j.m_type = value_t::array;
+        j.m_value.array = j.template create<typename BasicJsonType::array_t>(begin(arr), end(arr));
+        j.set_parents();
+        j.assert_invariant();
+    }
+
+    template<typename BasicJsonType>
+    static void construct(BasicJsonType& j, const std::vector<bool>& arr)
+    {
+        j.m_value.destroy(j.m_type);
+        j.m_type = value_t::array;
+        j.m_value = value_t::array;
+        j.m_value.array->reserve(arr.size());
+        for (const bool x : arr)
+        {
+            j.m_value.array->push_back(x);
+            j.set_parent(j.m_value.array->back());
+        }
+        j.assert_invariant();
+    }
+
+    template<typename BasicJsonType, typename T,
+             enable_if_t<std::is_convertible<T, BasicJsonType>::value, int> = 0>
+    static void construct(BasicJsonType& j, const std::valarray<T>& arr)
+    {
+        j.m_value.destroy(j.m_type);
+        j.m_type = value_t::array;
+        j.m_value = value_t::array;
+        j.m_value.array->resize(arr.size());
+        if (arr.size() > 0)
+        {
+            std::copy(std::begin(arr), std::end(arr), j.m_value.array->begin());
+        }
+        j.set_parents();
+        j.assert_invariant();
+    }
+};
+
+template<>
+struct external_constructor<value_t::object>
+{
+    template<typename BasicJsonType>
+    static void construct(BasicJsonType& j, const typename BasicJsonType::object_t& obj)
+    {
+        j.m_value.destroy(j.m_type);
+        j.m_type = value_t::object;
+        j.m_value = obj;
+        j.set_parents();
+        j.assert_invariant();
+    }
+
+    template<typename BasicJsonType>
+    static void construct(BasicJsonType& j, typename BasicJsonType::object_t&& obj)
+    {
+        j.m_value.destroy(j.m_type);
+        j.m_type = value_t::object;
+        j.m_value = std::move(obj);
+        j.set_parents();
+        j.assert_invariant();
+    }
+
+    template < typename BasicJsonType, typename CompatibleObjectType,
+               enable_if_t < !std::is_same<CompatibleObjectType, typename BasicJsonType::object_t>::value, int > = 0 >
+    static void construct(BasicJsonType& j, const CompatibleObjectType& obj)
+    {
+        using std::begin;
+        using std::end;
+
+        j.m_value.destroy(j.m_type);
+        j.m_type = value_t::object;
+        j.m_value.object = j.template create<typename BasicJsonType::object_t>(begin(obj), end(obj));
+        j.set_parents();
+        j.assert_invariant();
+    }
+};
+
+/////////////
+// to_json //
+/////////////
+
+template<typename BasicJsonType, typename T,
+         enable_if_t<std::is_same<T, typename BasicJsonType::boolean_t>::value, int> = 0>
+inline void to_json(BasicJsonType& j, T b) noexcept
+{
+    external_constructor<value_t::boolean>::construct(j, b);
+}
+
+template < typename BasicJsonType, typename BoolRef,
+           enable_if_t <
+               ((std::is_same<std::vector<bool>::reference, BoolRef>::value
+                 && !std::is_same <std::vector<bool>::reference, typename BasicJsonType::boolean_t&>::value)
+                || (std::is_same<std::vector<bool>::const_reference, BoolRef>::value
+                    && !std::is_same <detail::uncvref_t<std::vector<bool>::const_reference>,
+                                      typename BasicJsonType::boolean_t >::value))
+               && std::is_convertible<const BoolRef&, typename BasicJsonType::boolean_t>::value, int > = 0 >
+inline void to_json(BasicJsonType& j, const BoolRef& b) noexcept
+{
+    external_constructor<value_t::boolean>::construct(j, static_cast<typename BasicJsonType::boolean_t>(b));
+}
+
+template<typename BasicJsonType, typename CompatibleString,
+         enable_if_t<std::is_constructible<typename BasicJsonType::string_t, CompatibleString>::value, int> = 0>
+inline void to_json(BasicJsonType& j, const CompatibleString& s)
+{
+    external_constructor<value_t::string>::construct(j, s);
+}
+
+template<typename BasicJsonType>
+inline void to_json(BasicJsonType& j, typename BasicJsonType::string_t&& s)
+{
+    external_constructor<value_t::string>::construct(j, std::move(s));
+}
+
+template<typename BasicJsonType, typename FloatType,
+         enable_if_t<std::is_floating_point<FloatType>::value, int> = 0>
+inline void to_json(BasicJsonType& j, FloatType val) noexcept
+{
+    external_constructor<value_t::number_float>::construct(j, static_cast<typename BasicJsonType::number_float_t>(val));
+}
+
+template<typename BasicJsonType, typename CompatibleNumberUnsignedType,
+         enable_if_t<is_compatible_integer_type<typename BasicJsonType::number_unsigned_t, CompatibleNumberUnsignedType>::value, int> = 0>
+inline void to_json(BasicJsonType& j, CompatibleNumberUnsignedType val) noexcept
+{
+    external_constructor<value_t::number_unsigned>::construct(j, static_cast<typename BasicJsonType::number_unsigned_t>(val));
+}
+
+template<typename BasicJsonType, typename CompatibleNumberIntegerType,
+         enable_if_t<is_compatible_integer_type<typename BasicJsonType::number_integer_t, CompatibleNumberIntegerType>::value, int> = 0>
+inline void to_json(BasicJsonType& j, CompatibleNumberIntegerType val) noexcept
+{
+    external_constructor<value_t::number_integer>::construct(j, static_cast<typename BasicJsonType::number_integer_t>(val));
+}
+
+#if !JSON_DISABLE_ENUM_SERIALIZATION
+template<typename BasicJsonType, typename EnumType,
+         enable_if_t<std::is_enum<EnumType>::value, int> = 0>
+inline void to_json(BasicJsonType& j, EnumType e) noexcept
+{
+    using underlying_type = typename std::underlying_type<EnumType>::type;
+    external_constructor<value_t::number_integer>::construct(j, static_cast<underlying_type>(e));
+}
+#endif  // JSON_DISABLE_ENUM_SERIALIZATION
+
+template<typename BasicJsonType>
+inline void to_json(BasicJsonType& j, const std::vector<bool>& e)
+{
+    external_constructor<value_t::array>::construct(j, e);
+}
+
+template < typename BasicJsonType, typename CompatibleArrayType,
+           enable_if_t < is_compatible_array_type<BasicJsonType,
+                         CompatibleArrayType>::value&&
+                         !is_compatible_object_type<BasicJsonType, CompatibleArrayType>::value&&
+                         !is_compatible_string_type<BasicJsonType, CompatibleArrayType>::value&&
+                         !std::is_same<typename BasicJsonType::binary_t, CompatibleArrayType>::value&&
+                         !is_basic_json<CompatibleArrayType>::value,
+                         int > = 0 >
+inline void to_json(BasicJsonType& j, const CompatibleArrayType& arr)
+{
+    external_constructor<value_t::array>::construct(j, arr);
+}
+
+template<typename BasicJsonType>
+inline void to_json(BasicJsonType& j, const typename BasicJsonType::binary_t& bin)
+{
+    external_constructor<value_t::binary>::construct(j, bin);
+}
+
+template<typename BasicJsonType, typename T,
+         enable_if_t<std::is_convertible<T, BasicJsonType>::value, int> = 0>
+inline void to_json(BasicJsonType& j, const std::valarray<T>& arr)
+{
+    external_constructor<value_t::array>::construct(j, std::move(arr));
+}
+
+template<typename BasicJsonType>
+inline void to_json(BasicJsonType& j, typename BasicJsonType::array_t&& arr)
+{
+    external_constructor<value_t::array>::construct(j, std::move(arr));
+}
+
+template < typename BasicJsonType, typename CompatibleObjectType,
+           enable_if_t < is_compatible_object_type<BasicJsonType, CompatibleObjectType>::value&& !is_basic_json<CompatibleObjectType>::value, int > = 0 >
+inline void to_json(BasicJsonType& j, const CompatibleObjectType& obj)
+{
+    external_constructor<value_t::object>::construct(j, obj);
+}
+
+template<typename BasicJsonType>
+inline void to_json(BasicJsonType& j, typename BasicJsonType::object_t&& obj)
+{
+    external_constructor<value_t::object>::construct(j, std::move(obj));
+}
+
+template <
+    typename BasicJsonType, typename T, std::size_t N,
+    enable_if_t < !std::is_constructible<typename BasicJsonType::string_t,
+                  const T(&)[N]>::value, // NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)
+                  int > = 0 >
+inline void to_json(BasicJsonType& j, const T(&arr)[N]) // NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)
+{
+    external_constructor<value_t::array>::construct(j, arr);
+}
+
+template < typename BasicJsonType, typename T1, typename T2, enable_if_t < std::is_constructible<BasicJsonType, T1>::value&& std::is_constructible<BasicJsonType, T2>::value, int > = 0 >
+inline void to_json(BasicJsonType& j, const std::pair<T1, T2>& p)
+{
+    j = { p.first, p.second };
+}
+
+// for https://github.com/nlohmann/json/pull/1134
+template<typename BasicJsonType, typename T,
+         enable_if_t<std::is_same<T, iteration_proxy_value<typename BasicJsonType::iterator>>::value, int> = 0>
+inline void to_json(BasicJsonType& j, const T& b)
+{
+    j = { {b.key(), b.value()} };
+}
+
+template<typename BasicJsonType, typename Tuple, std::size_t... Idx>
+inline void to_json_tuple_impl(BasicJsonType& j, const Tuple& t, index_sequence<Idx...> /*unused*/)
+{
+    j = { std::get<Idx>(t)... };
+}
+
+template<typename BasicJsonType, typename T, enable_if_t<is_constructible_tuple<BasicJsonType, T>::value, int > = 0>
+inline void to_json(BasicJsonType& j, const T& t)
+{
+    to_json_tuple_impl(j, t, make_index_sequence<std::tuple_size<T>::value> {});
+}
+
+#if JSON_HAS_FILESYSTEM || JSON_HAS_EXPERIMENTAL_FILESYSTEM
+template<typename BasicJsonType>
+inline void to_json(BasicJsonType& j, const std_fs::path& p)
+{
+    j = p.string();
+}
+#endif
+
+struct to_json_fn
+{
+    template<typename BasicJsonType, typename T>
+    auto operator()(BasicJsonType& j, T&& val) const noexcept(noexcept(to_json(j, std::forward<T>(val))))
+    -> decltype(to_json(j, std::forward<T>(val)), void())
+    {
+        return to_json(j, std::forward<T>(val));
+    }
+};
+}  // namespace detail
+
+#ifndef JSON_HAS_CPP_17
+/// namespace to hold default `to_json` function
+/// to see why this is required:
+/// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4381.html
+namespace // NOLINT(cert-dcl59-cpp,fuchsia-header-anon-namespaces,google-build-namespaces)
+{
+#endif
+JSON_INLINE_VARIABLE constexpr const auto& to_json = // NOLINT(misc-definitions-in-headers)
+    detail::static_const<detail::to_json_fn>::value;
+#ifndef JSON_HAS_CPP_17
+}  // namespace
+#endif
+
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/meta/identity_tag.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+
+/// @sa https://json.nlohmann.me/api/adl_serializer/
+template<typename ValueType, typename>
+struct adl_serializer
+{
+    /// @brief convert a JSON value to any value type
+    /// @sa https://json.nlohmann.me/api/adl_serializer/from_json/
+    template<typename BasicJsonType, typename TargetType = ValueType>
+    static auto from_json(BasicJsonType && j, TargetType& val) noexcept(
+        noexcept(::nlohmann::from_json(std::forward<BasicJsonType>(j), val)))
+    -> decltype(::nlohmann::from_json(std::forward<BasicJsonType>(j), val), void())
+    {
+        ::nlohmann::from_json(std::forward<BasicJsonType>(j), val);
+    }
+
+    /// @brief convert a JSON value to any value type
+    /// @sa https://json.nlohmann.me/api/adl_serializer/from_json/
+    template<typename BasicJsonType, typename TargetType = ValueType>
+    static auto from_json(BasicJsonType && j) noexcept(
+    noexcept(::nlohmann::from_json(std::forward<BasicJsonType>(j), detail::identity_tag<TargetType> {})))
+    -> decltype(::nlohmann::from_json(std::forward<BasicJsonType>(j), detail::identity_tag<TargetType> {}))
+    {
+        return ::nlohmann::from_json(std::forward<BasicJsonType>(j), detail::identity_tag<TargetType> {});
+    }
+
+    /// @brief convert any value type to a JSON value
+    /// @sa https://json.nlohmann.me/api/adl_serializer/to_json/
+    template<typename BasicJsonType, typename TargetType = ValueType>
+    static auto to_json(BasicJsonType& j, TargetType && val) noexcept(
+        noexcept(::nlohmann::to_json(j, std::forward<TargetType>(val))))
+    -> decltype(::nlohmann::to_json(j, std::forward<TargetType>(val)), void())
+    {
+        ::nlohmann::to_json(j, std::forward<TargetType>(val));
+    }
+};
+
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/byte_container_with_subtype.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <cstdint> // uint8_t, uint64_t
+#include <tuple> // tie
+#include <utility> // move
+
+// #include <nlohmann/detail/abi_macros.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+
+/// @brief an internal type for a backed binary type
+/// @sa https://json.nlohmann.me/api/byte_container_with_subtype/
+template<typename BinaryType>
+class byte_container_with_subtype : public BinaryType
+{
+  public:
+    using container_type = BinaryType;
+    using subtype_type = std::uint64_t;
+
+    /// @sa https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/
+    byte_container_with_subtype() noexcept(noexcept(container_type()))
+        : container_type()
+    {}
+
+    /// @sa https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/
+    byte_container_with_subtype(const container_type& b) noexcept(noexcept(container_type(b)))
+        : container_type(b)
+    {}
+
+    /// @sa https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/
+    byte_container_with_subtype(container_type&& b) noexcept(noexcept(container_type(std::move(b))))
+        : container_type(std::move(b))
+    {}
+
+    /// @sa https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/
+    byte_container_with_subtype(const container_type& b, subtype_type subtype_) noexcept(noexcept(container_type(b)))
+        : container_type(b)
+        , m_subtype(subtype_)
+        , m_has_subtype(true)
+    {}
+
+    /// @sa https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/
+    byte_container_with_subtype(container_type&& b, subtype_type subtype_) noexcept(noexcept(container_type(std::move(b))))
+        : container_type(std::move(b))
+        , m_subtype(subtype_)
+        , m_has_subtype(true)
+    {}
+
+    bool operator==(const byte_container_with_subtype& rhs) const
+    {
+        return std::tie(static_cast<const BinaryType&>(*this), m_subtype, m_has_subtype) ==
+               std::tie(static_cast<const BinaryType&>(rhs), rhs.m_subtype, rhs.m_has_subtype);
+    }
+
+    bool operator!=(const byte_container_with_subtype& rhs) const
+    {
+        return !(rhs == *this);
+    }
+
+    /// @brief sets the binary subtype
+    /// @sa https://json.nlohmann.me/api/byte_container_with_subtype/set_subtype/
+    void set_subtype(subtype_type subtype_) noexcept
+    {
+        m_subtype = subtype_;
+        m_has_subtype = true;
+    }
+
+    /// @brief return the binary subtype
+    /// @sa https://json.nlohmann.me/api/byte_container_with_subtype/subtype/
+    constexpr subtype_type subtype() const noexcept
+    {
+        return m_has_subtype ? m_subtype : static_cast<subtype_type>(-1);
+    }
+
+    /// @brief return whether the value has a subtype
+    /// @sa https://json.nlohmann.me/api/byte_container_with_subtype/has_subtype/
+    constexpr bool has_subtype() const noexcept
+    {
+        return m_has_subtype;
+    }
+
+    /// @brief clears the binary subtype
+    /// @sa https://json.nlohmann.me/api/byte_container_with_subtype/clear_subtype/
+    void clear_subtype() noexcept
+    {
+        m_subtype = 0;
+        m_has_subtype = false;
+    }
+
+  private:
+    subtype_type m_subtype = 0;
+    bool m_has_subtype = false;
+};
+
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/conversions/from_json.hpp>
+
+// #include <nlohmann/detail/conversions/to_json.hpp>
+
+// #include <nlohmann/detail/exceptions.hpp>
+
+// #include <nlohmann/detail/hash.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <cstdint> // uint8_t
+#include <cstddef> // size_t
+#include <functional> // hash
+
+// #include <nlohmann/detail/abi_macros.hpp>
+
+// #include <nlohmann/detail/value_t.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+
+// boost::hash_combine
+inline std::size_t combine(std::size_t seed, std::size_t h) noexcept
+{
+    seed ^= h + 0x9e3779b9 + (seed << 6U) + (seed >> 2U);
+    return seed;
+}
+
+/*!
+@brief hash a JSON value
+
+The hash function tries to rely on std::hash where possible. Furthermore, the
+type of the JSON value is taken into account to have different hash values for
+null, 0, 0U, and false, etc.
+
+@tparam BasicJsonType basic_json specialization
+@param j JSON value to hash
+@return hash value of j
+*/
+template<typename BasicJsonType>
+std::size_t hash(const BasicJsonType& j)
+{
+    using string_t = typename BasicJsonType::string_t;
+    using number_integer_t = typename BasicJsonType::number_integer_t;
+    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
+    using number_float_t = typename BasicJsonType::number_float_t;
+
+    const auto type = static_cast<std::size_t>(j.type());
+    switch (j.type())
+    {
+        case BasicJsonType::value_t::null:
+        case BasicJsonType::value_t::discarded:
+        {
+            return combine(type, 0);
+        }
+
+        case BasicJsonType::value_t::object:
+        {
+            auto seed = combine(type, j.size());
+            for (const auto& element : j.items())
+            {
+                const auto h = std::hash<string_t> {}(element.key());
+                seed = combine(seed, h);
+                seed = combine(seed, hash(element.value()));
+            }
+            return seed;
+        }
+
+        case BasicJsonType::value_t::array:
+        {
+            auto seed = combine(type, j.size());
+            for (const auto& element : j)
+            {
+                seed = combine(seed, hash(element));
+            }
+            return seed;
+        }
+
+        case BasicJsonType::value_t::string:
+        {
+            const auto h = std::hash<string_t> {}(j.template get_ref<const string_t&>());
+            return combine(type, h);
+        }
+
+        case BasicJsonType::value_t::boolean:
+        {
+            const auto h = std::hash<bool> {}(j.template get<bool>());
+            return combine(type, h);
+        }
+
+        case BasicJsonType::value_t::number_integer:
+        {
+            const auto h = std::hash<number_integer_t> {}(j.template get<number_integer_t>());
+            return combine(type, h);
+        }
+
+        case BasicJsonType::value_t::number_unsigned:
+        {
+            const auto h = std::hash<number_unsigned_t> {}(j.template get<number_unsigned_t>());
+            return combine(type, h);
+        }
+
+        case BasicJsonType::value_t::number_float:
+        {
+            const auto h = std::hash<number_float_t> {}(j.template get<number_float_t>());
+            return combine(type, h);
+        }
+
+        case BasicJsonType::value_t::binary:
+        {
+            auto seed = combine(type, j.get_binary().size());
+            const auto h = std::hash<bool> {}(j.get_binary().has_subtype());
+            seed = combine(seed, h);
+            seed = combine(seed, static_cast<std::size_t>(j.get_binary().subtype()));
+            for (const auto byte : j.get_binary())
+            {
+                seed = combine(seed, std::hash<std::uint8_t> {}(byte));
+            }
+            return seed;
+        }
+
+        default:                   // LCOV_EXCL_LINE
+            JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE
+            return 0;              // LCOV_EXCL_LINE
+    }
+}
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/input/binary_reader.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <algorithm> // generate_n
+#include <array> // array
+#include <cmath> // ldexp
+#include <cstddef> // size_t
+#include <cstdint> // uint8_t, uint16_t, uint32_t, uint64_t
+#include <cstdio> // snprintf
+#include <cstring> // memcpy
+#include <iterator> // back_inserter
+#include <limits> // numeric_limits
+#include <string> // char_traits, string
+#include <utility> // make_pair, move
+#include <vector> // vector
+
+// #include <nlohmann/detail/exceptions.hpp>
+
+// #include <nlohmann/detail/input/input_adapters.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <array> // array
+#include <cstddef> // size_t
+#include <cstring> // strlen
+#include <iterator> // begin, end, iterator_traits, random_access_iterator_tag, distance, next
+#include <memory> // shared_ptr, make_shared, addressof
+#include <numeric> // accumulate
+#include <string> // string, char_traits
+#include <type_traits> // enable_if, is_base_of, is_pointer, is_integral, remove_pointer
+#include <utility> // pair, declval
+
+#ifndef JSON_NO_IO
+    #include <cstdio>   // FILE *
+    #include <istream>  // istream
+#endif                  // JSON_NO_IO
+
+// #include <nlohmann/detail/iterators/iterator_traits.hpp>
+
+// #include <nlohmann/detail/macro_scope.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+
+/// the supported input formats
+enum class input_format_t { json, cbor, msgpack, ubjson, bson, bjdata };
+
+////////////////////
+// input adapters //
+////////////////////
+
+#ifndef JSON_NO_IO
+/*!
+Input adapter for stdio file access. This adapter read only 1 byte and do not use any
+ buffer. This adapter is a very low level adapter.
+*/
+class file_input_adapter
+{
+  public:
+    using char_type = char;
+
+    JSON_HEDLEY_NON_NULL(2)
+    explicit file_input_adapter(std::FILE* f) noexcept
+        : m_file(f)
+    {
+        JSON_ASSERT(m_file != nullptr);
+    }
+
+    // make class move-only
+    file_input_adapter(const file_input_adapter&) = delete;
+    file_input_adapter(file_input_adapter&&) noexcept = default;
+    file_input_adapter& operator=(const file_input_adapter&) = delete;
+    file_input_adapter& operator=(file_input_adapter&&) = delete;
+    ~file_input_adapter() = default;
+
+    std::char_traits<char>::int_type get_character() noexcept
+    {
+        return std::fgetc(m_file);
+    }
+
+  private:
+    /// the file pointer to read from
+    std::FILE* m_file;
+};
+
+
+/*!
+Input adapter for a (caching) istream. Ignores a UFT Byte Order Mark at
+beginning of input. Does not support changing the underlying std::streambuf
+in mid-input. Maintains underlying std::istream and std::streambuf to support
+subsequent use of standard std::istream operations to process any input
+characters following those used in parsing the JSON input.  Clears the
+std::istream flags; any input errors (e.g., EOF) will be detected by the first
+subsequent call for input from the std::istream.
+*/
+class input_stream_adapter
+{
+  public:
+    using char_type = char;
+
+    ~input_stream_adapter()
+    {
+        // clear stream flags; we use underlying streambuf I/O, do not
+        // maintain ifstream flags, except eof
+        if (is != nullptr)
+        {
+            is->clear(is->rdstate() & std::ios::eofbit);
+        }
+    }
+
+    explicit input_stream_adapter(std::istream& i)
+        : is(&i), sb(i.rdbuf())
+    {}
+
+    // delete because of pointer members
+    input_stream_adapter(const input_stream_adapter&) = delete;
+    input_stream_adapter& operator=(input_stream_adapter&) = delete;
+    input_stream_adapter& operator=(input_stream_adapter&&) = delete;
+
+    input_stream_adapter(input_stream_adapter&& rhs) noexcept
+        : is(rhs.is), sb(rhs.sb)
+    {
+        rhs.is = nullptr;
+        rhs.sb = nullptr;
+    }
+
+    // std::istream/std::streambuf use std::char_traits<char>::to_int_type, to
+    // ensure that std::char_traits<char>::eof() and the character 0xFF do not
+    // end up as the same value, e.g. 0xFFFFFFFF.
+    std::char_traits<char>::int_type get_character()
+    {
+        auto res = sb->sbumpc();
+        // set eof manually, as we don't use the istream interface.
+        if (JSON_HEDLEY_UNLIKELY(res == std::char_traits<char>::eof()))
+        {
+            is->clear(is->rdstate() | std::ios::eofbit);
+        }
+        return res;
+    }
+
+  private:
+    /// the associated input stream
+    std::istream* is = nullptr;
+    std::streambuf* sb = nullptr;
+};
+#endif  // JSON_NO_IO
+
+// General-purpose iterator-based adapter. It might not be as fast as
+// theoretically possible for some containers, but it is extremely versatile.
+template<typename IteratorType>
+class iterator_input_adapter
+{
+  public:
+    using char_type = typename std::iterator_traits<IteratorType>::value_type;
+
+    iterator_input_adapter(IteratorType first, IteratorType last)
+        : current(std::move(first)), end(std::move(last))
+    {}
+
+    typename std::char_traits<char_type>::int_type get_character()
+    {
+        if (JSON_HEDLEY_LIKELY(current != end))
+        {
+            auto result = std::char_traits<char_type>::to_int_type(*current);
+            std::advance(current, 1);
+            return result;
+        }
+
+        return std::char_traits<char_type>::eof();
+    }
+
+  private:
+    IteratorType current;
+    IteratorType end;
+
+    template<typename BaseInputAdapter, size_t T>
+    friend struct wide_string_input_helper;
+
+    bool empty() const
+    {
+        return current == end;
+    }
+};
+
+
+template<typename BaseInputAdapter, size_t T>
+struct wide_string_input_helper;
+
+template<typename BaseInputAdapter>
+struct wide_string_input_helper<BaseInputAdapter, 4>
+{
+    // UTF-32
+    static void fill_buffer(BaseInputAdapter& input,
+                            std::array<std::char_traits<char>::int_type, 4>& utf8_bytes,
+                            size_t& utf8_bytes_index,
+                            size_t& utf8_bytes_filled)
+    {
+        utf8_bytes_index = 0;
+
+        if (JSON_HEDLEY_UNLIKELY(input.empty()))
+        {
+            utf8_bytes[0] = std::char_traits<char>::eof();
+            utf8_bytes_filled = 1;
+        }
+        else
+        {
+            // get the current character
+            const auto wc = input.get_character();
+
+            // UTF-32 to UTF-8 encoding
+            if (wc < 0x80)
+            {
+                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(wc);
+                utf8_bytes_filled = 1;
+            }
+            else if (wc <= 0x7FF)
+            {
+                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xC0u | ((static_cast<unsigned int>(wc) >> 6u) & 0x1Fu));
+                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));
+                utf8_bytes_filled = 2;
+            }
+            else if (wc <= 0xFFFF)
+            {
+                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xE0u | ((static_cast<unsigned int>(wc) >> 12u) & 0x0Fu));
+                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 6u) & 0x3Fu));
+                utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));
+                utf8_bytes_filled = 3;
+            }
+            else if (wc <= 0x10FFFF)
+            {
+                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xF0u | ((static_cast<unsigned int>(wc) >> 18u) & 0x07u));
+                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 12u) & 0x3Fu));
+                utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 6u) & 0x3Fu));
+                utf8_bytes[3] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));
+                utf8_bytes_filled = 4;
+            }
+            else
+            {
+                // unknown character
+                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(wc);
+                utf8_bytes_filled = 1;
+            }
+        }
+    }
+};
+
+template<typename BaseInputAdapter>
+struct wide_string_input_helper<BaseInputAdapter, 2>
+{
+    // UTF-16
+    static void fill_buffer(BaseInputAdapter& input,
+                            std::array<std::char_traits<char>::int_type, 4>& utf8_bytes,
+                            size_t& utf8_bytes_index,
+                            size_t& utf8_bytes_filled)
+    {
+        utf8_bytes_index = 0;
+
+        if (JSON_HEDLEY_UNLIKELY(input.empty()))
+        {
+            utf8_bytes[0] = std::char_traits<char>::eof();
+            utf8_bytes_filled = 1;
+        }
+        else
+        {
+            // get the current character
+            const auto wc = input.get_character();
+
+            // UTF-16 to UTF-8 encoding
+            if (wc < 0x80)
+            {
+                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(wc);
+                utf8_bytes_filled = 1;
+            }
+            else if (wc <= 0x7FF)
+            {
+                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xC0u | ((static_cast<unsigned int>(wc) >> 6u)));
+                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));
+                utf8_bytes_filled = 2;
+            }
+            else if (0xD800 > wc || wc >= 0xE000)
+            {
+                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xE0u | ((static_cast<unsigned int>(wc) >> 12u)));
+                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 6u) & 0x3Fu));
+                utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));
+                utf8_bytes_filled = 3;
+            }
+            else
+            {
+                if (JSON_HEDLEY_UNLIKELY(!input.empty()))
+                {
+                    const auto wc2 = static_cast<unsigned int>(input.get_character());
+                    const auto charcode = 0x10000u + (((static_cast<unsigned int>(wc) & 0x3FFu) << 10u) | (wc2 & 0x3FFu));
+                    utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xF0u | (charcode >> 18u));
+                    utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((charcode >> 12u) & 0x3Fu));
+                    utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | ((charcode >> 6u) & 0x3Fu));
+                    utf8_bytes[3] = static_cast<std::char_traits<char>::int_type>(0x80u | (charcode & 0x3Fu));
+                    utf8_bytes_filled = 4;
+                }
+                else
+                {
+                    utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(wc);
+                    utf8_bytes_filled = 1;
+                }
+            }
+        }
+    }
+};
+
+// Wraps another input apdater to convert wide character types into individual bytes.
+template<typename BaseInputAdapter, typename WideCharType>
+class wide_string_input_adapter
+{
+  public:
+    using char_type = char;
+
+    wide_string_input_adapter(BaseInputAdapter base)
+        : base_adapter(base) {}
+
+    typename std::char_traits<char>::int_type get_character() noexcept
+    {
+        // check if buffer needs to be filled
+        if (utf8_bytes_index == utf8_bytes_filled)
+        {
+            fill_buffer<sizeof(WideCharType)>();
+
+            JSON_ASSERT(utf8_bytes_filled > 0);
+            JSON_ASSERT(utf8_bytes_index == 0);
+        }
+
+        // use buffer
+        JSON_ASSERT(utf8_bytes_filled > 0);
+        JSON_ASSERT(utf8_bytes_index < utf8_bytes_filled);
+        return utf8_bytes[utf8_bytes_index++];
+    }
+
+  private:
+    BaseInputAdapter base_adapter;
+
+    template<size_t T>
+    void fill_buffer()
+    {
+        wide_string_input_helper<BaseInputAdapter, T>::fill_buffer(base_adapter, utf8_bytes, utf8_bytes_index, utf8_bytes_filled);
+    }
+
+    /// a buffer for UTF-8 bytes
+    std::array<std::char_traits<char>::int_type, 4> utf8_bytes = {{0, 0, 0, 0}};
+
+    /// index to the utf8_codes array for the next valid byte
+    std::size_t utf8_bytes_index = 0;
+    /// number of valid bytes in the utf8_codes array
+    std::size_t utf8_bytes_filled = 0;
+};
+
+
+template<typename IteratorType, typename Enable = void>
+struct iterator_input_adapter_factory
+{
+    using iterator_type = IteratorType;
+    using char_type = typename std::iterator_traits<iterator_type>::value_type;
+    using adapter_type = iterator_input_adapter<iterator_type>;
+
+    static adapter_type create(IteratorType first, IteratorType last)
+    {
+        return adapter_type(std::move(first), std::move(last));
+    }
+};
+
+template<typename T>
+struct is_iterator_of_multibyte
+{
+    using value_type = typename std::iterator_traits<T>::value_type;
+    enum
+    {
+        value = sizeof(value_type) > 1
+    };
+};
+
+template<typename IteratorType>
+struct iterator_input_adapter_factory<IteratorType, enable_if_t<is_iterator_of_multibyte<IteratorType>::value>>
+{
+    using iterator_type = IteratorType;
+    using char_type = typename std::iterator_traits<iterator_type>::value_type;
+    using base_adapter_type = iterator_input_adapter<iterator_type>;
+    using adapter_type = wide_string_input_adapter<base_adapter_type, char_type>;
+
+    static adapter_type create(IteratorType first, IteratorType last)
+    {
+        return adapter_type(base_adapter_type(std::move(first), std::move(last)));
+    }
+};
+
+// General purpose iterator-based input
+template<typename IteratorType>
+typename iterator_input_adapter_factory<IteratorType>::adapter_type input_adapter(IteratorType first, IteratorType last)
+{
+    using factory_type = iterator_input_adapter_factory<IteratorType>;
+    return factory_type::create(first, last);
+}
+
+// Convenience shorthand from container to iterator
+// Enables ADL on begin(container) and end(container)
+// Encloses the using declarations in namespace for not to leak them to outside scope
+
+namespace container_input_adapter_factory_impl
+{
+
+using std::begin;
+using std::end;
+
+template<typename ContainerType, typename Enable = void>
+struct container_input_adapter_factory {};
+
+template<typename ContainerType>
+struct container_input_adapter_factory< ContainerType,
+       void_t<decltype(begin(std::declval<ContainerType>()), end(std::declval<ContainerType>()))>>
+       {
+           using adapter_type = decltype(input_adapter(begin(std::declval<ContainerType>()), end(std::declval<ContainerType>())));
+
+           static adapter_type create(const ContainerType& container)
+{
+    return input_adapter(begin(container), end(container));
+}
+       };
+
+}  // namespace container_input_adapter_factory_impl
+
+template<typename ContainerType>
+typename container_input_adapter_factory_impl::container_input_adapter_factory<ContainerType>::adapter_type input_adapter(const ContainerType& container)
+{
+    return container_input_adapter_factory_impl::container_input_adapter_factory<ContainerType>::create(container);
+}
+
+#ifndef JSON_NO_IO
+// Special cases with fast paths
+inline file_input_adapter input_adapter(std::FILE* file)
+{
+    return file_input_adapter(file);
+}
+
+inline input_stream_adapter input_adapter(std::istream& stream)
+{
+    return input_stream_adapter(stream);
+}
+
+inline input_stream_adapter input_adapter(std::istream&& stream)
+{
+    return input_stream_adapter(stream);
+}
+#endif  // JSON_NO_IO
+
+using contiguous_bytes_input_adapter = decltype(input_adapter(std::declval<const char*>(), std::declval<const char*>()));
+
+// Null-delimited strings, and the like.
+template < typename CharT,
+           typename std::enable_if <
+               std::is_pointer<CharT>::value&&
+               !std::is_array<CharT>::value&&
+               std::is_integral<typename std::remove_pointer<CharT>::type>::value&&
+               sizeof(typename std::remove_pointer<CharT>::type) == 1,
+               int >::type = 0 >
+contiguous_bytes_input_adapter input_adapter(CharT b)
+{
+    auto length = std::strlen(reinterpret_cast<const char*>(b));
+    const auto* ptr = reinterpret_cast<const char*>(b);
+    return input_adapter(ptr, ptr + length);
+}
+
+template<typename T, std::size_t N>
+auto input_adapter(T (&array)[N]) -> decltype(input_adapter(array, array + N)) // NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)
+{
+    return input_adapter(array, array + N);
+}
+
+// This class only handles inputs of input_buffer_adapter type.
+// It's required so that expressions like {ptr, len} can be implicitly cast
+// to the correct adapter.
+class span_input_adapter
+{
+  public:
+    template < typename CharT,
+               typename std::enable_if <
+                   std::is_pointer<CharT>::value&&
+                   std::is_integral<typename std::remove_pointer<CharT>::type>::value&&
+                   sizeof(typename std::remove_pointer<CharT>::type) == 1,
+                   int >::type = 0 >
+    span_input_adapter(CharT b, std::size_t l)
+        : ia(reinterpret_cast<const char*>(b), reinterpret_cast<const char*>(b) + l) {}
+
+    template<class IteratorType,
+             typename std::enable_if<
+                 std::is_same<typename iterator_traits<IteratorType>::iterator_category, std::random_access_iterator_tag>::value,
+                 int>::type = 0>
+    span_input_adapter(IteratorType first, IteratorType last)
+        : ia(input_adapter(first, last)) {}
+
+    contiguous_bytes_input_adapter&& get()
+    {
+        return std::move(ia); // NOLINT(hicpp-move-const-arg,performance-move-const-arg)
+    }
+
+  private:
+    contiguous_bytes_input_adapter ia;
+};
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/input/json_sax.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <cstddef>
+#include <string> // string
+#include <utility> // move
+#include <vector> // vector
+
+// #include <nlohmann/detail/exceptions.hpp>
+
+// #include <nlohmann/detail/macro_scope.hpp>
+
+// #include <nlohmann/detail/string_concat.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+
+/*!
+@brief SAX interface
+
+This class describes the SAX interface used by @ref nlohmann::json::sax_parse.
+Each function is called in different situations while the input is parsed. The
+boolean return value informs the parser whether to continue processing the
+input.
+*/
+template<typename BasicJsonType>
+struct json_sax
+{
+    using number_integer_t = typename BasicJsonType::number_integer_t;
+    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
+    using number_float_t = typename BasicJsonType::number_float_t;
+    using string_t = typename BasicJsonType::string_t;
+    using binary_t = typename BasicJsonType::binary_t;
+
+    /*!
+    @brief a null value was read
+    @return whether parsing should proceed
+    */
+    virtual bool null() = 0;
+
+    /*!
+    @brief a boolean value was read
+    @param[in] val  boolean value
+    @return whether parsing should proceed
+    */
+    virtual bool boolean(bool val) = 0;
+
+    /*!
+    @brief an integer number was read
+    @param[in] val  integer value
+    @return whether parsing should proceed
+    */
+    virtual bool number_integer(number_integer_t val) = 0;
+
+    /*!
+    @brief an unsigned integer number was read
+    @param[in] val  unsigned integer value
+    @return whether parsing should proceed
+    */
+    virtual bool number_unsigned(number_unsigned_t val) = 0;
+
+    /*!
+    @brief a floating-point number was read
+    @param[in] val  floating-point value
+    @param[in] s    raw token value
+    @return whether parsing should proceed
+    */
+    virtual bool number_float(number_float_t val, const string_t& s) = 0;
+
+    /*!
+    @brief a string value was read
+    @param[in] val  string value
+    @return whether parsing should proceed
+    @note It is safe to move the passed string value.
+    */
+    virtual bool string(string_t& val) = 0;
+
+    /*!
+    @brief a binary value was read
+    @param[in] val  binary value
+    @return whether parsing should proceed
+    @note It is safe to move the passed binary value.
+    */
+    virtual bool binary(binary_t& val) = 0;
+
+    /*!
+    @brief the beginning of an object was read
+    @param[in] elements  number of object elements or -1 if unknown
+    @return whether parsing should proceed
+    @note binary formats may report the number of elements
+    */
+    virtual bool start_object(std::size_t elements) = 0;
+
+    /*!
+    @brief an object key was read
+    @param[in] val  object key
+    @return whether parsing should proceed
+    @note It is safe to move the passed string.
+    */
+    virtual bool key(string_t& val) = 0;
+
+    /*!
+    @brief the end of an object was read
+    @return whether parsing should proceed
+    */
+    virtual bool end_object() = 0;
+
+    /*!
+    @brief the beginning of an array was read
+    @param[in] elements  number of array elements or -1 if unknown
+    @return whether parsing should proceed
+    @note binary formats may report the number of elements
+    */
+    virtual bool start_array(std::size_t elements) = 0;
+
+    /*!
+    @brief the end of an array was read
+    @return whether parsing should proceed
+    */
+    virtual bool end_array() = 0;
+
+    /*!
+    @brief a parse error occurred
+    @param[in] position    the position in the input where the error occurs
+    @param[in] last_token  the last read token
+    @param[in] ex          an exception object describing the error
+    @return whether parsing should proceed (must return false)
+    */
+    virtual bool parse_error(std::size_t position,
+                             const std::string& last_token,
+                             const detail::exception& ex) = 0;
+
+    json_sax() = default;
+    json_sax(const json_sax&) = default;
+    json_sax(json_sax&&) noexcept = default;
+    json_sax& operator=(const json_sax&) = default;
+    json_sax& operator=(json_sax&&) noexcept = default;
+    virtual ~json_sax() = default;
+};
+
+
+namespace detail
+{
+/*!
+@brief SAX implementation to create a JSON value from SAX events
+
+This class implements the @ref json_sax interface and processes the SAX events
+to create a JSON value which makes it basically a DOM parser. The structure or
+hierarchy of the JSON value is managed by the stack `ref_stack` which contains
+a pointer to the respective array or object for each recursion depth.
+
+After successful parsing, the value that is passed by reference to the
+constructor contains the parsed value.
+
+@tparam BasicJsonType  the JSON type
+*/
+template<typename BasicJsonType>
+class json_sax_dom_parser
+{
+  public:
+    using number_integer_t = typename BasicJsonType::number_integer_t;
+    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
+    using number_float_t = typename BasicJsonType::number_float_t;
+    using string_t = typename BasicJsonType::string_t;
+    using binary_t = typename BasicJsonType::binary_t;
+
+    /*!
+    @param[in,out] r  reference to a JSON value that is manipulated while
+                       parsing
+    @param[in] allow_exceptions_  whether parse errors yield exceptions
+    */
+    explicit json_sax_dom_parser(BasicJsonType& r, const bool allow_exceptions_ = true)
+        : root(r), allow_exceptions(allow_exceptions_)
+    {}
+
+    // make class move-only
+    json_sax_dom_parser(const json_sax_dom_parser&) = delete;
+    json_sax_dom_parser(json_sax_dom_parser&&) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)
+    json_sax_dom_parser& operator=(const json_sax_dom_parser&) = delete;
+    json_sax_dom_parser& operator=(json_sax_dom_parser&&) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)
+    ~json_sax_dom_parser() = default;
+
+    bool null()
+    {
+        handle_value(nullptr);
+        return true;
+    }
+
+    bool boolean(bool val)
+    {
+        handle_value(val);
+        return true;
+    }
+
+    bool number_integer(number_integer_t val)
+    {
+        handle_value(val);
+        return true;
+    }
+
+    bool number_unsigned(number_unsigned_t val)
+    {
+        handle_value(val);
+        return true;
+    }
+
+    bool number_float(number_float_t val, const string_t& /*unused*/)
+    {
+        handle_value(val);
+        return true;
+    }
+
+    bool string(string_t& val)
+    {
+        handle_value(val);
+        return true;
+    }
+
+    bool binary(binary_t& val)
+    {
+        handle_value(std::move(val));
+        return true;
+    }
+
+    bool start_object(std::size_t len)
+    {
+        ref_stack.push_back(handle_value(BasicJsonType::value_t::object));
+
+        if (JSON_HEDLEY_UNLIKELY(len != static_cast<std::size_t>(-1) && len > ref_stack.back()->max_size()))
+        {
+            JSON_THROW(out_of_range::create(408, concat("excessive object size: ", std::to_string(len)), ref_stack.back()));
+        }
+
+        return true;
+    }
+
+    bool key(string_t& val)
+    {
+        JSON_ASSERT(!ref_stack.empty());
+        JSON_ASSERT(ref_stack.back()->is_object());
+
+        // add null at given key and store the reference for later
+        object_element = &(ref_stack.back()->m_value.object->operator[](val));
+        return true;
+    }
+
+    bool end_object()
+    {
+        JSON_ASSERT(!ref_stack.empty());
+        JSON_ASSERT(ref_stack.back()->is_object());
+
+        ref_stack.back()->set_parents();
+        ref_stack.pop_back();
+        return true;
+    }
+
+    bool start_array(std::size_t len)
+    {
+        ref_stack.push_back(handle_value(BasicJsonType::value_t::array));
+
+        if (JSON_HEDLEY_UNLIKELY(len != static_cast<std::size_t>(-1) && len > ref_stack.back()->max_size()))
+        {
+            JSON_THROW(out_of_range::create(408, concat("excessive array size: ", std::to_string(len)), ref_stack.back()));
+        }
+
+        return true;
+    }
+
+    bool end_array()
+    {
+        JSON_ASSERT(!ref_stack.empty());
+        JSON_ASSERT(ref_stack.back()->is_array());
+
+        ref_stack.back()->set_parents();
+        ref_stack.pop_back();
+        return true;
+    }
+
+    template<class Exception>
+    bool parse_error(std::size_t /*unused*/, const std::string& /*unused*/,
+                     const Exception& ex)
+    {
+        errored = true;
+        static_cast<void>(ex);
+        if (allow_exceptions)
+        {
+            JSON_THROW(ex);
+        }
+        return false;
+    }
+
+    constexpr bool is_errored() const
+    {
+        return errored;
+    }
+
+  private:
+    /*!
+    @invariant If the ref stack is empty, then the passed value will be the new
+               root.
+    @invariant If the ref stack contains a value, then it is an array or an
+               object to which we can add elements
+    */
+    template<typename Value>
+    JSON_HEDLEY_RETURNS_NON_NULL
+    BasicJsonType* handle_value(Value&& v)
+    {
+        if (ref_stack.empty())
+        {
+            root = BasicJsonType(std::forward<Value>(v));
+            return &root;
+        }
+
+        JSON_ASSERT(ref_stack.back()->is_array() || ref_stack.back()->is_object());
+
+        if (ref_stack.back()->is_array())
+        {
+            ref_stack.back()->m_value.array->emplace_back(std::forward<Value>(v));
+            return &(ref_stack.back()->m_value.array->back());
+        }
+
+        JSON_ASSERT(ref_stack.back()->is_object());
+        JSON_ASSERT(object_element);
+        *object_element = BasicJsonType(std::forward<Value>(v));
+        return object_element;
+    }
+
+    /// the parsed JSON value
+    BasicJsonType& root;
+    /// stack to model hierarchy of values
+    std::vector<BasicJsonType*> ref_stack {};
+    /// helper to hold the reference for the next object element
+    BasicJsonType* object_element = nullptr;
+    /// whether a syntax error occurred
+    bool errored = false;
+    /// whether to throw exceptions in case of errors
+    const bool allow_exceptions = true;
+};
+
+template<typename BasicJsonType>
+class json_sax_dom_callback_parser
+{
+  public:
+    using number_integer_t = typename BasicJsonType::number_integer_t;
+    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
+    using number_float_t = typename BasicJsonType::number_float_t;
+    using string_t = typename BasicJsonType::string_t;
+    using binary_t = typename BasicJsonType::binary_t;
+    using parser_callback_t = typename BasicJsonType::parser_callback_t;
+    using parse_event_t = typename BasicJsonType::parse_event_t;
+
+    json_sax_dom_callback_parser(BasicJsonType& r,
+                                 const parser_callback_t cb,
+                                 const bool allow_exceptions_ = true)
+        : root(r), callback(cb), allow_exceptions(allow_exceptions_)
+    {
+        keep_stack.push_back(true);
+    }
+
+    // make class move-only
+    json_sax_dom_callback_parser(const json_sax_dom_callback_parser&) = delete;
+    json_sax_dom_callback_parser(json_sax_dom_callback_parser&&) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)
+    json_sax_dom_callback_parser& operator=(const json_sax_dom_callback_parser&) = delete;
+    json_sax_dom_callback_parser& operator=(json_sax_dom_callback_parser&&) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)
+    ~json_sax_dom_callback_parser() = default;
+
+    bool null()
+    {
+        handle_value(nullptr);
+        return true;
+    }
+
+    bool boolean(bool val)
+    {
+        handle_value(val);
+        return true;
+    }
+
+    bool number_integer(number_integer_t val)
+    {
+        handle_value(val);
+        return true;
+    }
+
+    bool number_unsigned(number_unsigned_t val)
+    {
+        handle_value(val);
+        return true;
+    }
+
+    bool number_float(number_float_t val, const string_t& /*unused*/)
+    {
+        handle_value(val);
+        return true;
+    }
+
+    bool string(string_t& val)
+    {
+        handle_value(val);
+        return true;
+    }
+
+    bool binary(binary_t& val)
+    {
+        handle_value(std::move(val));
+        return true;
+    }
+
+    bool start_object(std::size_t len)
+    {
+        // check callback for object start
+        const bool keep = callback(static_cast<int>(ref_stack.size()), parse_event_t::object_start, discarded);
+        keep_stack.push_back(keep);
+
+        auto val = handle_value(BasicJsonType::value_t::object, true);
+        ref_stack.push_back(val.second);
+
+        // check object limit
+        if (ref_stack.back() && JSON_HEDLEY_UNLIKELY(len != static_cast<std::size_t>(-1) && len > ref_stack.back()->max_size()))
+        {
+            JSON_THROW(out_of_range::create(408, concat("excessive object size: ", std::to_string(len)), ref_stack.back()));
+        }
+
+        return true;
+    }
+
+    bool key(string_t& val)
+    {
+        BasicJsonType k = BasicJsonType(val);
+
+        // check callback for key
+        const bool keep = callback(static_cast<int>(ref_stack.size()), parse_event_t::key, k);
+        key_keep_stack.push_back(keep);
+
+        // add discarded value at given key and store the reference for later
+        if (keep && ref_stack.back())
+        {
+            object_element = &(ref_stack.back()->m_value.object->operator[](val) = discarded);
+        }
+
+        return true;
+    }
+
+    bool end_object()
+    {
+        if (ref_stack.back())
+        {
+            if (!callback(static_cast<int>(ref_stack.size()) - 1, parse_event_t::object_end, *ref_stack.back()))
+            {
+                // discard object
+                *ref_stack.back() = discarded;
+            }
+            else
+            {
+                ref_stack.back()->set_parents();
+            }
+        }
+
+        JSON_ASSERT(!ref_stack.empty());
+        JSON_ASSERT(!keep_stack.empty());
+        ref_stack.pop_back();
+        keep_stack.pop_back();
+
+        if (!ref_stack.empty() && ref_stack.back() && ref_stack.back()->is_structured())
+        {
+            // remove discarded value
+            for (auto it = ref_stack.back()->begin(); it != ref_stack.back()->end(); ++it)
+            {
+                if (it->is_discarded())
+                {
+                    ref_stack.back()->erase(it);
+                    break;
+                }
+            }
+        }
+
+        return true;
+    }
+
+    bool start_array(std::size_t len)
+    {
+        const bool keep = callback(static_cast<int>(ref_stack.size()), parse_event_t::array_start, discarded);
+        keep_stack.push_back(keep);
+
+        auto val = handle_value(BasicJsonType::value_t::array, true);
+        ref_stack.push_back(val.second);
+
+        // check array limit
+        if (ref_stack.back() && JSON_HEDLEY_UNLIKELY(len != static_cast<std::size_t>(-1) && len > ref_stack.back()->max_size()))
+        {
+            JSON_THROW(out_of_range::create(408, concat("excessive array size: ", std::to_string(len)), ref_stack.back()));
+        }
+
+        return true;
+    }
+
+    bool end_array()
+    {
+        bool keep = true;
+
+        if (ref_stack.back())
+        {
+            keep = callback(static_cast<int>(ref_stack.size()) - 1, parse_event_t::array_end, *ref_stack.back());
+            if (keep)
+            {
+                ref_stack.back()->set_parents();
+            }
+            else
+            {
+                // discard array
+                *ref_stack.back() = discarded;
+            }
+        }
+
+        JSON_ASSERT(!ref_stack.empty());
+        JSON_ASSERT(!keep_stack.empty());
+        ref_stack.pop_back();
+        keep_stack.pop_back();
+
+        // remove discarded value
+        if (!keep && !ref_stack.empty() && ref_stack.back()->is_array())
+        {
+            ref_stack.back()->m_value.array->pop_back();
+        }
+
+        return true;
+    }
+
+    template<class Exception>
+    bool parse_error(std::size_t /*unused*/, const std::string& /*unused*/,
+                     const Exception& ex)
+    {
+        errored = true;
+        static_cast<void>(ex);
+        if (allow_exceptions)
+        {
+            JSON_THROW(ex);
+        }
+        return false;
+    }
+
+    constexpr bool is_errored() const
+    {
+        return errored;
+    }
+
+  private:
+    /*!
+    @param[in] v  value to add to the JSON value we build during parsing
+    @param[in] skip_callback  whether we should skip calling the callback
+               function; this is required after start_array() and
+               start_object() SAX events, because otherwise we would call the
+               callback function with an empty array or object, respectively.
+
+    @invariant If the ref stack is empty, then the passed value will be the new
+               root.
+    @invariant If the ref stack contains a value, then it is an array or an
+               object to which we can add elements
+
+    @return pair of boolean (whether value should be kept) and pointer (to the
+            passed value in the ref_stack hierarchy; nullptr if not kept)
+    */
+    template<typename Value>
+    std::pair<bool, BasicJsonType*> handle_value(Value&& v, const bool skip_callback = false)
+    {
+        JSON_ASSERT(!keep_stack.empty());
+
+        // do not handle this value if we know it would be added to a discarded
+        // container
+        if (!keep_stack.back())
+        {
+            return {false, nullptr};
+        }
+
+        // create value
+        auto value = BasicJsonType(std::forward<Value>(v));
+
+        // check callback
+        const bool keep = skip_callback || callback(static_cast<int>(ref_stack.size()), parse_event_t::value, value);
+
+        // do not handle this value if we just learnt it shall be discarded
+        if (!keep)
+        {
+            return {false, nullptr};
+        }
+
+        if (ref_stack.empty())
+        {
+            root = std::move(value);
+            return {true, &root};
+        }
+
+        // skip this value if we already decided to skip the parent
+        // (https://github.com/nlohmann/json/issues/971#issuecomment-413678360)
+        if (!ref_stack.back())
+        {
+            return {false, nullptr};
+        }
+
+        // we now only expect arrays and objects
+        JSON_ASSERT(ref_stack.back()->is_array() || ref_stack.back()->is_object());
+
+        // array
+        if (ref_stack.back()->is_array())
+        {
+            ref_stack.back()->m_value.array->emplace_back(std::move(value));
+            return {true, &(ref_stack.back()->m_value.array->back())};
+        }
+
+        // object
+        JSON_ASSERT(ref_stack.back()->is_object());
+        // check if we should store an element for the current key
+        JSON_ASSERT(!key_keep_stack.empty());
+        const bool store_element = key_keep_stack.back();
+        key_keep_stack.pop_back();
+
+        if (!store_element)
+        {
+            return {false, nullptr};
+        }
+
+        JSON_ASSERT(object_element);
+        *object_element = std::move(value);
+        return {true, object_element};
+    }
+
+    /// the parsed JSON value
+    BasicJsonType& root;
+    /// stack to model hierarchy of values
+    std::vector<BasicJsonType*> ref_stack {};
+    /// stack to manage which values to keep
+    std::vector<bool> keep_stack {};
+    /// stack to manage which object keys to keep
+    std::vector<bool> key_keep_stack {};
+    /// helper to hold the reference for the next object element
+    BasicJsonType* object_element = nullptr;
+    /// whether a syntax error occurred
+    bool errored = false;
+    /// callback function
+    const parser_callback_t callback = nullptr;
+    /// whether to throw exceptions in case of errors
+    const bool allow_exceptions = true;
+    /// a discarded value for the callback
+    BasicJsonType discarded = BasicJsonType::value_t::discarded;
+};
+
+template<typename BasicJsonType>
+class json_sax_acceptor
+{
+  public:
+    using number_integer_t = typename BasicJsonType::number_integer_t;
+    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
+    using number_float_t = typename BasicJsonType::number_float_t;
+    using string_t = typename BasicJsonType::string_t;
+    using binary_t = typename BasicJsonType::binary_t;
+
+    bool null()
+    {
+        return true;
+    }
+
+    bool boolean(bool /*unused*/)
+    {
+        return true;
+    }
+
+    bool number_integer(number_integer_t /*unused*/)
+    {
+        return true;
+    }
+
+    bool number_unsigned(number_unsigned_t /*unused*/)
+    {
+        return true;
+    }
+
+    bool number_float(number_float_t /*unused*/, const string_t& /*unused*/)
+    {
+        return true;
+    }
+
+    bool string(string_t& /*unused*/)
+    {
+        return true;
+    }
+
+    bool binary(binary_t& /*unused*/)
+    {
+        return true;
+    }
+
+    bool start_object(std::size_t /*unused*/ = static_cast<std::size_t>(-1))
+    {
+        return true;
+    }
+
+    bool key(string_t& /*unused*/)
+    {
+        return true;
+    }
+
+    bool end_object()
+    {
+        return true;
+    }
+
+    bool start_array(std::size_t /*unused*/ = static_cast<std::size_t>(-1))
+    {
+        return true;
+    }
+
+    bool end_array()
+    {
+        return true;
+    }
+
+    bool parse_error(std::size_t /*unused*/, const std::string& /*unused*/, const detail::exception& /*unused*/)
+    {
+        return false;
+    }
+};
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/input/lexer.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <array> // array
+#include <clocale> // localeconv
+#include <cstddef> // size_t
+#include <cstdio> // snprintf
+#include <cstdlib> // strtof, strtod, strtold, strtoll, strtoull
+#include <initializer_list> // initializer_list
+#include <string> // char_traits, string
+#include <utility> // move
+#include <vector> // vector
+
+// #include <nlohmann/detail/input/input_adapters.hpp>
+
+// #include <nlohmann/detail/input/position_t.hpp>
+
+// #include <nlohmann/detail/macro_scope.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+
+///////////
+// lexer //
+///////////
+
+template<typename BasicJsonType>
+class lexer_base
+{
+  public:
+    /// token types for the parser
+    enum class token_type
+    {
+        uninitialized,    ///< indicating the scanner is uninitialized
+        literal_true,     ///< the `true` literal
+        literal_false,    ///< the `false` literal
+        literal_null,     ///< the `null` literal
+        value_string,     ///< a string -- use get_string() for actual value
+        value_unsigned,   ///< an unsigned integer -- use get_number_unsigned() for actual value
+        value_integer,    ///< a signed integer -- use get_number_integer() for actual value
+        value_float,      ///< an floating point number -- use get_number_float() for actual value
+        begin_array,      ///< the character for array begin `[`
+        begin_object,     ///< the character for object begin `{`
+        end_array,        ///< the character for array end `]`
+        end_object,       ///< the character for object end `}`
+        name_separator,   ///< the name separator `:`
+        value_separator,  ///< the value separator `,`
+        parse_error,      ///< indicating a parse error
+        end_of_input,     ///< indicating the end of the input buffer
+        literal_or_value  ///< a literal or the begin of a value (only for diagnostics)
+    };
+
+    /// return name of values of type token_type (only used for errors)
+    JSON_HEDLEY_RETURNS_NON_NULL
+    JSON_HEDLEY_CONST
+    static const char* token_type_name(const token_type t) noexcept
+    {
+        switch (t)
+        {
+            case token_type::uninitialized:
+                return "<uninitialized>";
+            case token_type::literal_true:
+                return "true literal";
+            case token_type::literal_false:
+                return "false literal";
+            case token_type::literal_null:
+                return "null literal";
+            case token_type::value_string:
+                return "string literal";
+            case token_type::value_unsigned:
+            case token_type::value_integer:
+            case token_type::value_float:
+                return "number literal";
+            case token_type::begin_array:
+                return "'['";
+            case token_type::begin_object:
+                return "'{'";
+            case token_type::end_array:
+                return "']'";
+            case token_type::end_object:
+                return "'}'";
+            case token_type::name_separator:
+                return "':'";
+            case token_type::value_separator:
+                return "','";
+            case token_type::parse_error:
+                return "<parse error>";
+            case token_type::end_of_input:
+                return "end of input";
+            case token_type::literal_or_value:
+                return "'[', '{', or a literal";
+            // LCOV_EXCL_START
+            default: // catch non-enum values
+                return "unknown token";
+                // LCOV_EXCL_STOP
+        }
+    }
+};
+/*!
+@brief lexical analysis
+
+This class organizes the lexical analysis during JSON deserialization.
+*/
+template<typename BasicJsonType, typename InputAdapterType>
+class lexer : public lexer_base<BasicJsonType>
+{
+    using number_integer_t = typename BasicJsonType::number_integer_t;
+    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
+    using number_float_t = typename BasicJsonType::number_float_t;
+    using string_t = typename BasicJsonType::string_t;
+    using char_type = typename InputAdapterType::char_type;
+    using char_int_type = typename std::char_traits<char_type>::int_type;
+
+  public:
+    using token_type = typename lexer_base<BasicJsonType>::token_type;
+
+    explicit lexer(InputAdapterType&& adapter, bool ignore_comments_ = false) noexcept
+        : ia(std::move(adapter))
+        , ignore_comments(ignore_comments_)
+        , decimal_point_char(static_cast<char_int_type>(get_decimal_point()))
+    {}
+
+    // delete because of pointer members
+    lexer(const lexer&) = delete;
+    lexer(lexer&&) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)
+    lexer& operator=(lexer&) = delete;
+    lexer& operator=(lexer&&) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)
+    ~lexer() = default;
+
+  private:
+    /////////////////////
+    // locales
+    /////////////////////
+
+    /// return the locale-dependent decimal point
+    JSON_HEDLEY_PURE
+    static char get_decimal_point() noexcept
+    {
+        const auto* loc = localeconv();
+        JSON_ASSERT(loc != nullptr);
+        return (loc->decimal_point == nullptr) ? '.' : *(loc->decimal_point);
+    }
+
+    /////////////////////
+    // scan functions
+    /////////////////////
+
+    /*!
+    @brief get codepoint from 4 hex characters following `\u`
+
+    For input "\u c1 c2 c3 c4" the codepoint is:
+      (c1 * 0x1000) + (c2 * 0x0100) + (c3 * 0x0010) + c4
+    = (c1 << 12) + (c2 << 8) + (c3 << 4) + (c4 << 0)
+
+    Furthermore, the possible characters '0'..'9', 'A'..'F', and 'a'..'f'
+    must be converted to the integers 0x0..0x9, 0xA..0xF, 0xA..0xF, resp. The
+    conversion is done by subtracting the offset (0x30, 0x37, and 0x57)
+    between the ASCII value of the character and the desired integer value.
+
+    @return codepoint (0x0000..0xFFFF) or -1 in case of an error (e.g. EOF or
+            non-hex character)
+    */
+    int get_codepoint()
+    {
+        // this function only makes sense after reading `\u`
+        JSON_ASSERT(current == 'u');
+        int codepoint = 0;
+
+        const auto factors = { 12u, 8u, 4u, 0u };
+        for (const auto factor : factors)
+        {
+            get();
+
+            if (current >= '0' && current <= '9')
+            {
+                codepoint += static_cast<int>((static_cast<unsigned int>(current) - 0x30u) << factor);
+            }
+            else if (current >= 'A' && current <= 'F')
+            {
+                codepoint += static_cast<int>((static_cast<unsigned int>(current) - 0x37u) << factor);
+            }
+            else if (current >= 'a' && current <= 'f')
+            {
+                codepoint += static_cast<int>((static_cast<unsigned int>(current) - 0x57u) << factor);
+            }
+            else
+            {
+                return -1;
+            }
+        }
+
+        JSON_ASSERT(0x0000 <= codepoint && codepoint <= 0xFFFF);
+        return codepoint;
+    }
+
+    /*!
+    @brief check if the next byte(s) are inside a given range
+
+    Adds the current byte and, for each passed range, reads a new byte and
+    checks if it is inside the range. If a violation was detected, set up an
+    error message and return false. Otherwise, return true.
+
+    @param[in] ranges  list of integers; interpreted as list of pairs of
+                       inclusive lower and upper bound, respectively
+
+    @pre The passed list @a ranges must have 2, 4, or 6 elements; that is,
+         1, 2, or 3 pairs. This precondition is enforced by an assertion.
+
+    @return true if and only if no range violation was detected
+    */
+    bool next_byte_in_range(std::initializer_list<char_int_type> ranges)
+    {
+        JSON_ASSERT(ranges.size() == 2 || ranges.size() == 4 || ranges.size() == 6);
+        add(current);
+
+        for (auto range = ranges.begin(); range != ranges.end(); ++range)
+        {
+            get();
+            if (JSON_HEDLEY_LIKELY(*range <= current && current <= *(++range)))
+            {
+                add(current);
+            }
+            else
+            {
+                error_message = "invalid string: ill-formed UTF-8 byte";
+                return false;
+            }
+        }
+
+        return true;
+    }
+
+    /*!
+    @brief scan a string literal
+
+    This function scans a string according to Sect. 7 of RFC 8259. While
+    scanning, bytes are escaped and copied into buffer token_buffer. Then the
+    function returns successfully, token_buffer is *not* null-terminated (as it
+    may contain \0 bytes), and token_buffer.size() is the number of bytes in the
+    string.
+
+    @return token_type::value_string if string could be successfully scanned,
+            token_type::parse_error otherwise
+
+    @note In case of errors, variable error_message contains a textual
+          description.
+    */
+    token_type scan_string()
+    {
+        // reset token_buffer (ignore opening quote)
+        reset();
+
+        // we entered the function by reading an open quote
+        JSON_ASSERT(current == '\"');
+
+        while (true)
+        {
+            // get next character
+            switch (get())
+            {
+                // end of file while parsing string
+                case std::char_traits<char_type>::eof():
+                {
+                    error_message = "invalid string: missing closing quote";
+                    return token_type::parse_error;
+                }
+
+                // closing quote
+                case '\"':
+                {
+                    return token_type::value_string;
+                }
+
+                // escapes
+                case '\\':
+                {
+                    switch (get())
+                    {
+                        // quotation mark
+                        case '\"':
+                            add('\"');
+                            break;
+                        // reverse solidus
+                        case '\\':
+                            add('\\');
+                            break;
+                        // solidus
+                        case '/':
+                            add('/');
+                            break;
+                        // backspace
+                        case 'b':
+                            add('\b');
+                            break;
+                        // form feed
+                        case 'f':
+                            add('\f');
+                            break;
+                        // line feed
+                        case 'n':
+                            add('\n');
+                            break;
+                        // carriage return
+                        case 'r':
+                            add('\r');
+                            break;
+                        // tab
+                        case 't':
+                            add('\t');
+                            break;
+
+                        // unicode escapes
+                        case 'u':
+                        {
+                            const int codepoint1 = get_codepoint();
+                            int codepoint = codepoint1; // start with codepoint1
+
+                            if (JSON_HEDLEY_UNLIKELY(codepoint1 == -1))
+                            {
+                                error_message = "invalid string: '\\u' must be followed by 4 hex digits";
+                                return token_type::parse_error;
+                            }
+
+                            // check if code point is a high surrogate
+                            if (0xD800 <= codepoint1 && codepoint1 <= 0xDBFF)
+                            {
+                                // expect next \uxxxx entry
+                                if (JSON_HEDLEY_LIKELY(get() == '\\' && get() == 'u'))
+                                {
+                                    const int codepoint2 = get_codepoint();
+
+                                    if (JSON_HEDLEY_UNLIKELY(codepoint2 == -1))
+                                    {
+                                        error_message = "invalid string: '\\u' must be followed by 4 hex digits";
+                                        return token_type::parse_error;
+                                    }
+
+                                    // check if codepoint2 is a low surrogate
+                                    if (JSON_HEDLEY_LIKELY(0xDC00 <= codepoint2 && codepoint2 <= 0xDFFF))
+                                    {
+                                        // overwrite codepoint
+                                        codepoint = static_cast<int>(
+                                                        // high surrogate occupies the most significant 22 bits
+                                                        (static_cast<unsigned int>(codepoint1) << 10u)
+                                                        // low surrogate occupies the least significant 15 bits
+                                                        + static_cast<unsigned int>(codepoint2)
+                                                        // there is still the 0xD800, 0xDC00 and 0x10000 noise
+                                                        // in the result, so we have to subtract with:
+                                                        // (0xD800 << 10) + DC00 - 0x10000 = 0x35FDC00
+                                                        - 0x35FDC00u);
+                                    }
+                                    else
+                                    {
+                                        error_message = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
+                                        return token_type::parse_error;
+                                    }
+                                }
+                                else
+                                {
+                                    error_message = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
+                                    return token_type::parse_error;
+                                }
+                            }
+                            else
+                            {
+                                if (JSON_HEDLEY_UNLIKELY(0xDC00 <= codepoint1 && codepoint1 <= 0xDFFF))
+                                {
+                                    error_message = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
+                                    return token_type::parse_error;
+                                }
+                            }
+
+                            // result of the above calculation yields a proper codepoint
+                            JSON_ASSERT(0x00 <= codepoint && codepoint <= 0x10FFFF);
+
+                            // translate codepoint into bytes
+                            if (codepoint < 0x80)
+                            {
+                                // 1-byte characters: 0xxxxxxx (ASCII)
+                                add(static_cast<char_int_type>(codepoint));
+                            }
+                            else if (codepoint <= 0x7FF)
+                            {
+                                // 2-byte characters: 110xxxxx 10xxxxxx
+                                add(static_cast<char_int_type>(0xC0u | (static_cast<unsigned int>(codepoint) >> 6u)));
+                                add(static_cast<char_int_type>(0x80u | (static_cast<unsigned int>(codepoint) & 0x3Fu)));
+                            }
+                            else if (codepoint <= 0xFFFF)
+                            {
+                                // 3-byte characters: 1110xxxx 10xxxxxx 10xxxxxx
+                                add(static_cast<char_int_type>(0xE0u | (static_cast<unsigned int>(codepoint) >> 12u)));
+                                add(static_cast<char_int_type>(0x80u | ((static_cast<unsigned int>(codepoint) >> 6u) & 0x3Fu)));
+                                add(static_cast<char_int_type>(0x80u | (static_cast<unsigned int>(codepoint) & 0x3Fu)));
+                            }
+                            else
+                            {
+                                // 4-byte characters: 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
+                                add(static_cast<char_int_type>(0xF0u | (static_cast<unsigned int>(codepoint) >> 18u)));
+                                add(static_cast<char_int_type>(0x80u | ((static_cast<unsigned int>(codepoint) >> 12u) & 0x3Fu)));
+                                add(static_cast<char_int_type>(0x80u | ((static_cast<unsigned int>(codepoint) >> 6u) & 0x3Fu)));
+                                add(static_cast<char_int_type>(0x80u | (static_cast<unsigned int>(codepoint) & 0x3Fu)));
+                            }
+
+                            break;
+                        }
+
+                        // other characters after escape
+                        default:
+                            error_message = "invalid string: forbidden character after backslash";
+                            return token_type::parse_error;
+                    }
+
+                    break;
+                }
+
+                // invalid control characters
+                case 0x00:
+                {
+                    error_message = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
+                    return token_type::parse_error;
+                }
+
+                case 0x01:
+                {
+                    error_message = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
+                    return token_type::parse_error;
+                }
+
+                case 0x02:
+                {
+                    error_message = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
+                    return token_type::parse_error;
+                }
+
+                case 0x03:
+                {
+                    error_message = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
+                    return token_type::parse_error;
+                }
+
+                case 0x04:
+                {
+                    error_message = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
+                    return token_type::parse_error;
+                }
+
+                case 0x05:
+                {
+                    error_message = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
+                    return token_type::parse_error;
+                }
+
+                case 0x06:
+                {
+                    error_message = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
+                    return token_type::parse_error;
+                }
+
+                case 0x07:
+                {
+                    error_message = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
+                    return token_type::parse_error;
+                }
+
+                case 0x08:
+                {
+                    error_message = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
+                    return token_type::parse_error;
+                }
+
+                case 0x09:
+                {
+                    error_message = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
+                    return token_type::parse_error;
+                }
+
+                case 0x0A:
+                {
+                    error_message = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
+                    return token_type::parse_error;
+                }
+
+                case 0x0B:
+                {
+                    error_message = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
+                    return token_type::parse_error;
+                }
+
+                case 0x0C:
+                {
+                    error_message = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
+                    return token_type::parse_error;
+                }
+
+                case 0x0D:
+                {
+                    error_message = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
+                    return token_type::parse_error;
+                }
+
+                case 0x0E:
+                {
+                    error_message = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
+                    return token_type::parse_error;
+                }
+
+                case 0x0F:
+                {
+                    error_message = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
+                    return token_type::parse_error;
+                }
+
+                case 0x10:
+                {
+                    error_message = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
+                    return token_type::parse_error;
+                }
+
+                case 0x11:
+                {
+                    error_message = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
+                    return token_type::parse_error;
+                }
+
+                case 0x12:
+                {
+                    error_message = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
+                    return token_type::parse_error;
+                }
+
+                case 0x13:
+                {
+                    error_message = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
+                    return token_type::parse_error;
+                }
+
+                case 0x14:
+                {
+                    error_message = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
+                    return token_type::parse_error;
+                }
+
+                case 0x15:
+                {
+                    error_message = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
+                    return token_type::parse_error;
+                }
+
+                case 0x16:
+                {
+                    error_message = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
+                    return token_type::parse_error;
+                }
+
+                case 0x17:
+                {
+                    error_message = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
+                    return token_type::parse_error;
+                }
+
+                case 0x18:
+                {
+                    error_message = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
+                    return token_type::parse_error;
+                }
+
+                case 0x19:
+                {
+                    error_message = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
+                    return token_type::parse_error;
+                }
+
+                case 0x1A:
+                {
+                    error_message = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
+                    return token_type::parse_error;
+                }
+
+                case 0x1B:
+                {
+                    error_message = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
+                    return token_type::parse_error;
+                }
+
+                case 0x1C:
+                {
+                    error_message = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
+                    return token_type::parse_error;
+                }
+
+                case 0x1D:
+                {
+                    error_message = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
+                    return token_type::parse_error;
+                }
+
+                case 0x1E:
+                {
+                    error_message = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
+                    return token_type::parse_error;
+                }
+
+                case 0x1F:
+                {
+                    error_message = "invalid string: control character U+001F (US) must be escaped to \\u001F";
+                    return token_type::parse_error;
+                }
+
+                // U+0020..U+007F (except U+0022 (quote) and U+005C (backspace))
+                case 0x20:
+                case 0x21:
+                case 0x23:
+                case 0x24:
+                case 0x25:
+                case 0x26:
+                case 0x27:
+                case 0x28:
+                case 0x29:
+                case 0x2A:
+                case 0x2B:
+                case 0x2C:
+                case 0x2D:
+                case 0x2E:
+                case 0x2F:
+                case 0x30:
+                case 0x31:
+                case 0x32:
+                case 0x33:
+                case 0x34:
+                case 0x35:
+                case 0x36:
+                case 0x37:
+                case 0x38:
+                case 0x39:
+                case 0x3A:
+                case 0x3B:
+                case 0x3C:
+                case 0x3D:
+                case 0x3E:
+                case 0x3F:
+                case 0x40:
+                case 0x41:
+                case 0x42:
+                case 0x43:
+                case 0x44:
+                case 0x45:
+                case 0x46:
+                case 0x47:
+                case 0x48:
+                case 0x49:
+                case 0x4A:
+                case 0x4B:
+                case 0x4C:
+                case 0x4D:
+                case 0x4E:
+                case 0x4F:
+                case 0x50:
+                case 0x51:
+                case 0x52:
+                case 0x53:
+                case 0x54:
+                case 0x55:
+                case 0x56:
+                case 0x57:
+                case 0x58:
+                case 0x59:
+                case 0x5A:
+                case 0x5B:
+                case 0x5D:
+                case 0x5E:
+                case 0x5F:
+                case 0x60:
+                case 0x61:
+                case 0x62:
+                case 0x63:
+                case 0x64:
+                case 0x65:
+                case 0x66:
+                case 0x67:
+                case 0x68:
+                case 0x69:
+                case 0x6A:
+                case 0x6B:
+                case 0x6C:
+                case 0x6D:
+                case 0x6E:
+                case 0x6F:
+                case 0x70:
+                case 0x71:
+                case 0x72:
+                case 0x73:
+                case 0x74:
+                case 0x75:
+                case 0x76:
+                case 0x77:
+                case 0x78:
+                case 0x79:
+                case 0x7A:
+                case 0x7B:
+                case 0x7C:
+                case 0x7D:
+                case 0x7E:
+                case 0x7F:
+                {
+                    add(current);
+                    break;
+                }
+
+                // U+0080..U+07FF: bytes C2..DF 80..BF
+                case 0xC2:
+                case 0xC3:
+                case 0xC4:
+                case 0xC5:
+                case 0xC6:
+                case 0xC7:
+                case 0xC8:
+                case 0xC9:
+                case 0xCA:
+                case 0xCB:
+                case 0xCC:
+                case 0xCD:
+                case 0xCE:
+                case 0xCF:
+                case 0xD0:
+                case 0xD1:
+                case 0xD2:
+                case 0xD3:
+                case 0xD4:
+                case 0xD5:
+                case 0xD6:
+                case 0xD7:
+                case 0xD8:
+                case 0xD9:
+                case 0xDA:
+                case 0xDB:
+                case 0xDC:
+                case 0xDD:
+                case 0xDE:
+                case 0xDF:
+                {
+                    if (JSON_HEDLEY_UNLIKELY(!next_byte_in_range({0x80, 0xBF})))
+                    {
+                        return token_type::parse_error;
+                    }
+                    break;
+                }
+
+                // U+0800..U+0FFF: bytes E0 A0..BF 80..BF
+                case 0xE0:
+                {
+                    if (JSON_HEDLEY_UNLIKELY(!(next_byte_in_range({0xA0, 0xBF, 0x80, 0xBF}))))
+                    {
+                        return token_type::parse_error;
+                    }
+                    break;
+                }
+
+                // U+1000..U+CFFF: bytes E1..EC 80..BF 80..BF
+                // U+E000..U+FFFF: bytes EE..EF 80..BF 80..BF
+                case 0xE1:
+                case 0xE2:
+                case 0xE3:
+                case 0xE4:
+                case 0xE5:
+                case 0xE6:
+                case 0xE7:
+                case 0xE8:
+                case 0xE9:
+                case 0xEA:
+                case 0xEB:
+                case 0xEC:
+                case 0xEE:
+                case 0xEF:
+                {
+                    if (JSON_HEDLEY_UNLIKELY(!(next_byte_in_range({0x80, 0xBF, 0x80, 0xBF}))))
+                    {
+                        return token_type::parse_error;
+                    }
+                    break;
+                }
+
+                // U+D000..U+D7FF: bytes ED 80..9F 80..BF
+                case 0xED:
+                {
+                    if (JSON_HEDLEY_UNLIKELY(!(next_byte_in_range({0x80, 0x9F, 0x80, 0xBF}))))
+                    {
+                        return token_type::parse_error;
+                    }
+                    break;
+                }
+
+                // U+10000..U+3FFFF F0 90..BF 80..BF 80..BF
+                case 0xF0:
+                {
+                    if (JSON_HEDLEY_UNLIKELY(!(next_byte_in_range({0x90, 0xBF, 0x80, 0xBF, 0x80, 0xBF}))))
+                    {
+                        return token_type::parse_error;
+                    }
+                    break;
+                }
+
+                // U+40000..U+FFFFF F1..F3 80..BF 80..BF 80..BF
+                case 0xF1:
+                case 0xF2:
+                case 0xF3:
+                {
+                    if (JSON_HEDLEY_UNLIKELY(!(next_byte_in_range({0x80, 0xBF, 0x80, 0xBF, 0x80, 0xBF}))))
+                    {
+                        return token_type::parse_error;
+                    }
+                    break;
+                }
+
+                // U+100000..U+10FFFF F4 80..8F 80..BF 80..BF
+                case 0xF4:
+                {
+                    if (JSON_HEDLEY_UNLIKELY(!(next_byte_in_range({0x80, 0x8F, 0x80, 0xBF, 0x80, 0xBF}))))
+                    {
+                        return token_type::parse_error;
+                    }
+                    break;
+                }
+
+                // remaining bytes (80..C1 and F5..FF) are ill-formed
+                default:
+                {
+                    error_message = "invalid string: ill-formed UTF-8 byte";
+                    return token_type::parse_error;
+                }
+            }
+        }
+    }
+
+    /*!
+     * @brief scan a comment
+     * @return whether comment could be scanned successfully
+     */
+    bool scan_comment()
+    {
+        switch (get())
+        {
+            // single-line comments skip input until a newline or EOF is read
+            case '/':
+            {
+                while (true)
+                {
+                    switch (get())
+                    {
+                        case '\n':
+                        case '\r':
+                        case std::char_traits<char_type>::eof():
+                        case '\0':
+                            return true;
+
+                        default:
+                            break;
+                    }
+                }
+            }
+
+            // multi-line comments skip input until */ is read
+            case '*':
+            {
+                while (true)
+                {
+                    switch (get())
+                    {
+                        case std::char_traits<char_type>::eof():
+                        case '\0':
+                        {
+                            error_message = "invalid comment; missing closing '*/'";
+                            return false;
+                        }
+
+                        case '*':
+                        {
+                            switch (get())
+                            {
+                                case '/':
+                                    return true;
+
+                                default:
+                                {
+                                    unget();
+                                    continue;
+                                }
+                            }
+                        }
+
+                        default:
+                            continue;
+                    }
+                }
+            }
+
+            // unexpected character after reading '/'
+            default:
+            {
+                error_message = "invalid comment; expecting '/' or '*' after '/'";
+                return false;
+            }
+        }
+    }
+
+    JSON_HEDLEY_NON_NULL(2)
+    static void strtof(float& f, const char* str, char** endptr) noexcept
+    {
+        f = std::strtof(str, endptr);
+    }
+
+    JSON_HEDLEY_NON_NULL(2)
+    static void strtof(double& f, const char* str, char** endptr) noexcept
+    {
+        f = std::strtod(str, endptr);
+    }
+
+    JSON_HEDLEY_NON_NULL(2)
+    static void strtof(long double& f, const char* str, char** endptr) noexcept
+    {
+        f = std::strtold(str, endptr);
+    }
+
+    /*!
+    @brief scan a number literal
+
+    This function scans a string according to Sect. 6 of RFC 8259.
+
+    The function is realized with a deterministic finite state machine derived
+    from the grammar described in RFC 8259. Starting in state "init", the
+    input is read and used to determined the next state. Only state "done"
+    accepts the number. State "error" is a trap state to model errors. In the
+    table below, "anything" means any character but the ones listed before.
+
+    state    | 0        | 1-9      | e E      | +       | -       | .        | anything
+    ---------|----------|----------|----------|---------|---------|----------|-----------
+    init     | zero     | any1     | [error]  | [error] | minus   | [error]  | [error]
+    minus    | zero     | any1     | [error]  | [error] | [error] | [error]  | [error]
+    zero     | done     | done     | exponent | done    | done    | decimal1 | done
+    any1     | any1     | any1     | exponent | done    | done    | decimal1 | done
+    decimal1 | decimal2 | decimal2 | [error]  | [error] | [error] | [error]  | [error]
+    decimal2 | decimal2 | decimal2 | exponent | done    | done    | done     | done
+    exponent | any2     | any2     | [error]  | sign    | sign    | [error]  | [error]
+    sign     | any2     | any2     | [error]  | [error] | [error] | [error]  | [error]
+    any2     | any2     | any2     | done     | done    | done    | done     | done
+
+    The state machine is realized with one label per state (prefixed with
+    "scan_number_") and `goto` statements between them. The state machine
+    contains cycles, but any cycle can be left when EOF is read. Therefore,
+    the function is guaranteed to terminate.
+
+    During scanning, the read bytes are stored in token_buffer. This string is
+    then converted to a signed integer, an unsigned integer, or a
+    floating-point number.
+
+    @return token_type::value_unsigned, token_type::value_integer, or
+            token_type::value_float if number could be successfully scanned,
+            token_type::parse_error otherwise
+
+    @note The scanner is independent of the current locale. Internally, the
+          locale's decimal point is used instead of `.` to work with the
+          locale-dependent converters.
+    */
+    token_type scan_number()  // lgtm [cpp/use-of-goto]
+    {
+        // reset token_buffer to store the number's bytes
+        reset();
+
+        // the type of the parsed number; initially set to unsigned; will be
+        // changed if minus sign, decimal point or exponent is read
+        token_type number_type = token_type::value_unsigned;
+
+        // state (init): we just found out we need to scan a number
+        switch (current)
+        {
+            case '-':
+            {
+                add(current);
+                goto scan_number_minus;
+            }
+
+            case '0':
+            {
+                add(current);
+                goto scan_number_zero;
+            }
+
+            case '1':
+            case '2':
+            case '3':
+            case '4':
+            case '5':
+            case '6':
+            case '7':
+            case '8':
+            case '9':
+            {
+                add(current);
+                goto scan_number_any1;
+            }
+
+            // all other characters are rejected outside scan_number()
+            default:            // LCOV_EXCL_LINE
+                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE
+        }
+
+scan_number_minus:
+        // state: we just parsed a leading minus sign
+        number_type = token_type::value_integer;
+        switch (get())
+        {
+            case '0':
+            {
+                add(current);
+                goto scan_number_zero;
+            }
+
+            case '1':
+            case '2':
+            case '3':
+            case '4':
+            case '5':
+            case '6':
+            case '7':
+            case '8':
+            case '9':
+            {
+                add(current);
+                goto scan_number_any1;
+            }
+
+            default:
+            {
+                error_message = "invalid number; expected digit after '-'";
+                return token_type::parse_error;
+            }
+        }
+
+scan_number_zero:
+        // state: we just parse a zero (maybe with a leading minus sign)
+        switch (get())
+        {
+            case '.':
+            {
+                add(decimal_point_char);
+                goto scan_number_decimal1;
+            }
+
+            case 'e':
+            case 'E':
+            {
+                add(current);
+                goto scan_number_exponent;
+            }
+
+            default:
+                goto scan_number_done;
+        }
+
+scan_number_any1:
+        // state: we just parsed a number 0-9 (maybe with a leading minus sign)
+        switch (get())
+        {
+            case '0':
+            case '1':
+            case '2':
+            case '3':
+            case '4':
+            case '5':
+            case '6':
+            case '7':
+            case '8':
+            case '9':
+            {
+                add(current);
+                goto scan_number_any1;
+            }
+
+            case '.':
+            {
+                add(decimal_point_char);
+                goto scan_number_decimal1;
+            }
+
+            case 'e':
+            case 'E':
+            {
+                add(current);
+                goto scan_number_exponent;
+            }
+
+            default:
+                goto scan_number_done;
+        }
+
+scan_number_decimal1:
+        // state: we just parsed a decimal point
+        number_type = token_type::value_float;
+        switch (get())
+        {
+            case '0':
+            case '1':
+            case '2':
+            case '3':
+            case '4':
+            case '5':
+            case '6':
+            case '7':
+            case '8':
+            case '9':
+            {
+                add(current);
+                goto scan_number_decimal2;
+            }
+
+            default:
+            {
+                error_message = "invalid number; expected digit after '.'";
+                return token_type::parse_error;
+            }
+        }
+
+scan_number_decimal2:
+        // we just parsed at least one number after a decimal point
+        switch (get())
+        {
+            case '0':
+            case '1':
+            case '2':
+            case '3':
+            case '4':
+            case '5':
+            case '6':
+            case '7':
+            case '8':
+            case '9':
+            {
+                add(current);
+                goto scan_number_decimal2;
+            }
+
+            case 'e':
+            case 'E':
+            {
+                add(current);
+                goto scan_number_exponent;
+            }
+
+            default:
+                goto scan_number_done;
+        }
+
+scan_number_exponent:
+        // we just parsed an exponent
+        number_type = token_type::value_float;
+        switch (get())
+        {
+            case '+':
+            case '-':
+            {
+                add(current);
+                goto scan_number_sign;
+            }
+
+            case '0':
+            case '1':
+            case '2':
+            case '3':
+            case '4':
+            case '5':
+            case '6':
+            case '7':
+            case '8':
+            case '9':
+            {
+                add(current);
+                goto scan_number_any2;
+            }
+
+            default:
+            {
+                error_message =
+                    "invalid number; expected '+', '-', or digit after exponent";
+                return token_type::parse_error;
+            }
+        }
+
+scan_number_sign:
+        // we just parsed an exponent sign
+        switch (get())
+        {
+            case '0':
+            case '1':
+            case '2':
+            case '3':
+            case '4':
+            case '5':
+            case '6':
+            case '7':
+            case '8':
+            case '9':
+            {
+                add(current);
+                goto scan_number_any2;
+            }
+
+            default:
+            {
+                error_message = "invalid number; expected digit after exponent sign";
+                return token_type::parse_error;
+            }
+        }
+
+scan_number_any2:
+        // we just parsed a number after the exponent or exponent sign
+        switch (get())
+        {
+            case '0':
+            case '1':
+            case '2':
+            case '3':
+            case '4':
+            case '5':
+            case '6':
+            case '7':
+            case '8':
+            case '9':
+            {
+                add(current);
+                goto scan_number_any2;
+            }
+
+            default:
+                goto scan_number_done;
+        }
+
+scan_number_done:
+        // unget the character after the number (we only read it to know that
+        // we are done scanning a number)
+        unget();
+
+        char* endptr = nullptr; // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)
+        errno = 0;
+
+        // try to parse integers first and fall back to floats
+        if (number_type == token_type::value_unsigned)
+        {
+            const auto x = std::strtoull(token_buffer.data(), &endptr, 10);
+
+            // we checked the number format before
+            JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());
+
+            if (errno == 0)
+            {
+                value_unsigned = static_cast<number_unsigned_t>(x);
+                if (value_unsigned == x)
+                {
+                    return token_type::value_unsigned;
+                }
+            }
+        }
+        else if (number_type == token_type::value_integer)
+        {
+            const auto x = std::strtoll(token_buffer.data(), &endptr, 10);
+
+            // we checked the number format before
+            JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());
+
+            if (errno == 0)
+            {
+                value_integer = static_cast<number_integer_t>(x);
+                if (value_integer == x)
+                {
+                    return token_type::value_integer;
+                }
+            }
+        }
+
+        // this code is reached if we parse a floating-point number or if an
+        // integer conversion above failed
+        strtof(value_float, token_buffer.data(), &endptr);
+
+        // we checked the number format before
+        JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());
+
+        return token_type::value_float;
+    }
+
+    /*!
+    @param[in] literal_text  the literal text to expect
+    @param[in] length        the length of the passed literal text
+    @param[in] return_type   the token type to return on success
+    */
+    JSON_HEDLEY_NON_NULL(2)
+    token_type scan_literal(const char_type* literal_text, const std::size_t length,
+                            token_type return_type)
+    {
+        JSON_ASSERT(std::char_traits<char_type>::to_char_type(current) == literal_text[0]);
+        for (std::size_t i = 1; i < length; ++i)
+        {
+            if (JSON_HEDLEY_UNLIKELY(std::char_traits<char_type>::to_char_type(get()) != literal_text[i]))
+            {
+                error_message = "invalid literal";
+                return token_type::parse_error;
+            }
+        }
+        return return_type;
+    }
+
+    /////////////////////
+    // input management
+    /////////////////////
+
+    /// reset token_buffer; current character is beginning of token
+    void reset() noexcept
+    {
+        token_buffer.clear();
+        token_string.clear();
+        token_string.push_back(std::char_traits<char_type>::to_char_type(current));
+    }
+
+    /*
+    @brief get next character from the input
+
+    This function provides the interface to the used input adapter. It does
+    not throw in case the input reached EOF, but returns a
+    `std::char_traits<char>::eof()` in that case.  Stores the scanned characters
+    for use in error messages.
+
+    @return character read from the input
+    */
+    char_int_type get()
+    {
+        ++position.chars_read_total;
+        ++position.chars_read_current_line;
+
+        if (next_unget)
+        {
+            // just reset the next_unget variable and work with current
+            next_unget = false;
+        }
+        else
+        {
+            current = ia.get_character();
+        }
+
+        if (JSON_HEDLEY_LIKELY(current != std::char_traits<char_type>::eof()))
+        {
+            token_string.push_back(std::char_traits<char_type>::to_char_type(current));
+        }
+
+        if (current == '\n')
+        {
+            ++position.lines_read;
+            position.chars_read_current_line = 0;
+        }
+
+        return current;
+    }
+
+    /*!
+    @brief unget current character (read it again on next get)
+
+    We implement unget by setting variable next_unget to true. The input is not
+    changed - we just simulate ungetting by modifying chars_read_total,
+    chars_read_current_line, and token_string. The next call to get() will
+    behave as if the unget character is read again.
+    */
+    void unget()
+    {
+        next_unget = true;
+
+        --position.chars_read_total;
+
+        // in case we "unget" a newline, we have to also decrement the lines_read
+        if (position.chars_read_current_line == 0)
+        {
+            if (position.lines_read > 0)
+            {
+                --position.lines_read;
+            }
+        }
+        else
+        {
+            --position.chars_read_current_line;
+        }
+
+        if (JSON_HEDLEY_LIKELY(current != std::char_traits<char_type>::eof()))
+        {
+            JSON_ASSERT(!token_string.empty());
+            token_string.pop_back();
+        }
+    }
+
+    /// add a character to token_buffer
+    void add(char_int_type c)
+    {
+        token_buffer.push_back(static_cast<typename string_t::value_type>(c));
+    }
+
+  public:
+    /////////////////////
+    // value getters
+    /////////////////////
+
+    /// return integer value
+    constexpr number_integer_t get_number_integer() const noexcept
+    {
+        return value_integer;
+    }
+
+    /// return unsigned integer value
+    constexpr number_unsigned_t get_number_unsigned() const noexcept
+    {
+        return value_unsigned;
+    }
+
+    /// return floating-point value
+    constexpr number_float_t get_number_float() const noexcept
+    {
+        return value_float;
+    }
+
+    /// return current string value (implicitly resets the token; useful only once)
+    string_t& get_string()
+    {
+        return token_buffer;
+    }
+
+    /////////////////////
+    // diagnostics
+    /////////////////////
+
+    /// return position of last read token
+    constexpr position_t get_position() const noexcept
+    {
+        return position;
+    }
+
+    /// return the last read token (for errors only).  Will never contain EOF
+    /// (an arbitrary value that is not a valid char value, often -1), because
+    /// 255 may legitimately occur.  May contain NUL, which should be escaped.
+    std::string get_token_string() const
+    {
+        // escape control characters
+        std::string result;
+        for (const auto c : token_string)
+        {
+            if (static_cast<unsigned char>(c) <= '\x1F')
+            {
+                // escape control characters
+                std::array<char, 9> cs{{}};
+                static_cast<void>((std::snprintf)(cs.data(), cs.size(), "<U+%.4X>", static_cast<unsigned char>(c))); // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)
+                result += cs.data();
+            }
+            else
+            {
+                // add character as is
+                result.push_back(static_cast<std::string::value_type>(c));
+            }
+        }
+
+        return result;
+    }
+
+    /// return syntax error message
+    JSON_HEDLEY_RETURNS_NON_NULL
+    constexpr const char* get_error_message() const noexcept
+    {
+        return error_message;
+    }
+
+    /////////////////////
+    // actual scanner
+    /////////////////////
+
+    /*!
+    @brief skip the UTF-8 byte order mark
+    @return true iff there is no BOM or the correct BOM has been skipped
+    */
+    bool skip_bom()
+    {
+        if (get() == 0xEF)
+        {
+            // check if we completely parse the BOM
+            return get() == 0xBB && get() == 0xBF;
+        }
+
+        // the first character is not the beginning of the BOM; unget it to
+        // process is later
+        unget();
+        return true;
+    }
+
+    void skip_whitespace()
+    {
+        do
+        {
+            get();
+        }
+        while (current == ' ' || current == '\t' || current == '\n' || current == '\r');
+    }
+
+    token_type scan()
+    {
+        // initially, skip the BOM
+        if (position.chars_read_total == 0 && !skip_bom())
+        {
+            error_message = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
+            return token_type::parse_error;
+        }
+
+        // read next character and ignore whitespace
+        skip_whitespace();
+
+        // ignore comments
+        while (ignore_comments && current == '/')
+        {
+            if (!scan_comment())
+            {
+                return token_type::parse_error;
+            }
+
+            // skip following whitespace
+            skip_whitespace();
+        }
+
+        switch (current)
+        {
+            // structural characters
+            case '[':
+                return token_type::begin_array;
+            case ']':
+                return token_type::end_array;
+            case '{':
+                return token_type::begin_object;
+            case '}':
+                return token_type::end_object;
+            case ':':
+                return token_type::name_separator;
+            case ',':
+                return token_type::value_separator;
+
+            // literals
+            case 't':
+            {
+                std::array<char_type, 4> true_literal = {{static_cast<char_type>('t'), static_cast<char_type>('r'), static_cast<char_type>('u'), static_cast<char_type>('e')}};
+                return scan_literal(true_literal.data(), true_literal.size(), token_type::literal_true);
+            }
+            case 'f':
+            {
+                std::array<char_type, 5> false_literal = {{static_cast<char_type>('f'), static_cast<char_type>('a'), static_cast<char_type>('l'), static_cast<char_type>('s'), static_cast<char_type>('e')}};
+                return scan_literal(false_literal.data(), false_literal.size(), token_type::literal_false);
+            }
+            case 'n':
+            {
+                std::array<char_type, 4> null_literal = {{static_cast<char_type>('n'), static_cast<char_type>('u'), static_cast<char_type>('l'), static_cast<char_type>('l')}};
+                return scan_literal(null_literal.data(), null_literal.size(), token_type::literal_null);
+            }
+
+            // string
+            case '\"':
+                return scan_string();
+
+            // number
+            case '-':
+            case '0':
+            case '1':
+            case '2':
+            case '3':
+            case '4':
+            case '5':
+            case '6':
+            case '7':
+            case '8':
+            case '9':
+                return scan_number();
+
+            // end of input (the null byte is needed when parsing from
+            // string literals)
+            case '\0':
+            case std::char_traits<char_type>::eof():
+                return token_type::end_of_input;
+
+            // error
+            default:
+                error_message = "invalid literal";
+                return token_type::parse_error;
+        }
+    }
+
+  private:
+    /// input adapter
+    InputAdapterType ia;
+
+    /// whether comments should be ignored (true) or signaled as errors (false)
+    const bool ignore_comments = false;
+
+    /// the current character
+    char_int_type current = std::char_traits<char_type>::eof();
+
+    /// whether the next get() call should just return current
+    bool next_unget = false;
+
+    /// the start position of the current token
+    position_t position {};
+
+    /// raw input token string (for error messages)
+    std::vector<char_type> token_string {};
+
+    /// buffer for variable-length tokens (numbers, strings)
+    string_t token_buffer {};
+
+    /// a description of occurred lexer errors
+    const char* error_message = "";
+
+    // number values
+    number_integer_t value_integer = 0;
+    number_unsigned_t value_unsigned = 0;
+    number_float_t value_float = 0;
+
+    /// the decimal point
+    const char_int_type decimal_point_char = '.';
+};
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/macro_scope.hpp>
+
+// #include <nlohmann/detail/meta/is_sax.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <cstdint> // size_t
+#include <utility> // declval
+#include <string> // string
+
+// #include <nlohmann/detail/abi_macros.hpp>
+
+// #include <nlohmann/detail/meta/detected.hpp>
+
+// #include <nlohmann/detail/meta/type_traits.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+
+template<typename T>
+using null_function_t = decltype(std::declval<T&>().null());
+
+template<typename T>
+using boolean_function_t =
+    decltype(std::declval<T&>().boolean(std::declval<bool>()));
+
+template<typename T, typename Integer>
+using number_integer_function_t =
+    decltype(std::declval<T&>().number_integer(std::declval<Integer>()));
+
+template<typename T, typename Unsigned>
+using number_unsigned_function_t =
+    decltype(std::declval<T&>().number_unsigned(std::declval<Unsigned>()));
+
+template<typename T, typename Float, typename String>
+using number_float_function_t = decltype(std::declval<T&>().number_float(
+                                    std::declval<Float>(), std::declval<const String&>()));
+
+template<typename T, typename String>
+using string_function_t =
+    decltype(std::declval<T&>().string(std::declval<String&>()));
+
+template<typename T, typename Binary>
+using binary_function_t =
+    decltype(std::declval<T&>().binary(std::declval<Binary&>()));
+
+template<typename T>
+using start_object_function_t =
+    decltype(std::declval<T&>().start_object(std::declval<std::size_t>()));
+
+template<typename T, typename String>
+using key_function_t =
+    decltype(std::declval<T&>().key(std::declval<String&>()));
+
+template<typename T>
+using end_object_function_t = decltype(std::declval<T&>().end_object());
+
+template<typename T>
+using start_array_function_t =
+    decltype(std::declval<T&>().start_array(std::declval<std::size_t>()));
+
+template<typename T>
+using end_array_function_t = decltype(std::declval<T&>().end_array());
+
+template<typename T, typename Exception>
+using parse_error_function_t = decltype(std::declval<T&>().parse_error(
+        std::declval<std::size_t>(), std::declval<const std::string&>(),
+        std::declval<const Exception&>()));
+
+template<typename SAX, typename BasicJsonType>
+struct is_sax
+{
+  private:
+    static_assert(is_basic_json<BasicJsonType>::value,
+                  "BasicJsonType must be of type basic_json<...>");
+
+    using number_integer_t = typename BasicJsonType::number_integer_t;
+    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
+    using number_float_t = typename BasicJsonType::number_float_t;
+    using string_t = typename BasicJsonType::string_t;
+    using binary_t = typename BasicJsonType::binary_t;
+    using exception_t = typename BasicJsonType::exception;
+
+  public:
+    static constexpr bool value =
+        is_detected_exact<bool, null_function_t, SAX>::value &&
+        is_detected_exact<bool, boolean_function_t, SAX>::value &&
+        is_detected_exact<bool, number_integer_function_t, SAX, number_integer_t>::value &&
+        is_detected_exact<bool, number_unsigned_function_t, SAX, number_unsigned_t>::value &&
+        is_detected_exact<bool, number_float_function_t, SAX, number_float_t, string_t>::value &&
+        is_detected_exact<bool, string_function_t, SAX, string_t>::value &&
+        is_detected_exact<bool, binary_function_t, SAX, binary_t>::value &&
+        is_detected_exact<bool, start_object_function_t, SAX>::value &&
+        is_detected_exact<bool, key_function_t, SAX, string_t>::value &&
+        is_detected_exact<bool, end_object_function_t, SAX>::value &&
+        is_detected_exact<bool, start_array_function_t, SAX>::value &&
+        is_detected_exact<bool, end_array_function_t, SAX>::value &&
+        is_detected_exact<bool, parse_error_function_t, SAX, exception_t>::value;
+};
+
+template<typename SAX, typename BasicJsonType>
+struct is_sax_static_asserts
+{
+  private:
+    static_assert(is_basic_json<BasicJsonType>::value,
+                  "BasicJsonType must be of type basic_json<...>");
+
+    using number_integer_t = typename BasicJsonType::number_integer_t;
+    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
+    using number_float_t = typename BasicJsonType::number_float_t;
+    using string_t = typename BasicJsonType::string_t;
+    using binary_t = typename BasicJsonType::binary_t;
+    using exception_t = typename BasicJsonType::exception;
+
+  public:
+    static_assert(is_detected_exact<bool, null_function_t, SAX>::value,
+                  "Missing/invalid function: bool null()");
+    static_assert(is_detected_exact<bool, boolean_function_t, SAX>::value,
+                  "Missing/invalid function: bool boolean(bool)");
+    static_assert(is_detected_exact<bool, boolean_function_t, SAX>::value,
+                  "Missing/invalid function: bool boolean(bool)");
+    static_assert(
+        is_detected_exact<bool, number_integer_function_t, SAX,
+        number_integer_t>::value,
+        "Missing/invalid function: bool number_integer(number_integer_t)");
+    static_assert(
+        is_detected_exact<bool, number_unsigned_function_t, SAX,
+        number_unsigned_t>::value,
+        "Missing/invalid function: bool number_unsigned(number_unsigned_t)");
+    static_assert(is_detected_exact<bool, number_float_function_t, SAX,
+                  number_float_t, string_t>::value,
+                  "Missing/invalid function: bool number_float(number_float_t, const string_t&)");
+    static_assert(
+        is_detected_exact<bool, string_function_t, SAX, string_t>::value,
+        "Missing/invalid function: bool string(string_t&)");
+    static_assert(
+        is_detected_exact<bool, binary_function_t, SAX, binary_t>::value,
+        "Missing/invalid function: bool binary(binary_t&)");
+    static_assert(is_detected_exact<bool, start_object_function_t, SAX>::value,
+                  "Missing/invalid function: bool start_object(std::size_t)");
+    static_assert(is_detected_exact<bool, key_function_t, SAX, string_t>::value,
+                  "Missing/invalid function: bool key(string_t&)");
+    static_assert(is_detected_exact<bool, end_object_function_t, SAX>::value,
+                  "Missing/invalid function: bool end_object()");
+    static_assert(is_detected_exact<bool, start_array_function_t, SAX>::value,
+                  "Missing/invalid function: bool start_array(std::size_t)");
+    static_assert(is_detected_exact<bool, end_array_function_t, SAX>::value,
+                  "Missing/invalid function: bool end_array()");
+    static_assert(
+        is_detected_exact<bool, parse_error_function_t, SAX, exception_t>::value,
+        "Missing/invalid function: bool parse_error(std::size_t, const "
+        "std::string&, const exception&)");
+};
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/meta/type_traits.hpp>
+
+// #include <nlohmann/detail/string_concat.hpp>
+
+// #include <nlohmann/detail/value_t.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+
+/// how to treat CBOR tags
+enum class cbor_tag_handler_t
+{
+    error,   ///< throw a parse_error exception in case of a tag
+    ignore,  ///< ignore tags
+    store    ///< store tags as binary type
+};
+
+/*!
+@brief determine system byte order
+
+@return true if and only if system's byte order is little endian
+
+@note from https://stackoverflow.com/a/1001328/266378
+*/
+static inline bool little_endianness(int num = 1) noexcept
+{
+    return *reinterpret_cast<char*>(&num) == 1;
+}
+
+
+///////////////////
+// binary reader //
+///////////////////
+
+/*!
+@brief deserialization of CBOR, MessagePack, and UBJSON values
+*/
+template<typename BasicJsonType, typename InputAdapterType, typename SAX = json_sax_dom_parser<BasicJsonType>>
+class binary_reader
+{
+    using number_integer_t = typename BasicJsonType::number_integer_t;
+    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
+    using number_float_t = typename BasicJsonType::number_float_t;
+    using string_t = typename BasicJsonType::string_t;
+    using binary_t = typename BasicJsonType::binary_t;
+    using json_sax_t = SAX;
+    using char_type = typename InputAdapterType::char_type;
+    using char_int_type = typename std::char_traits<char_type>::int_type;
+
+  public:
+    /*!
+    @brief create a binary reader
+
+    @param[in] adapter  input adapter to read from
+    */
+    explicit binary_reader(InputAdapterType&& adapter, const input_format_t format = input_format_t::json) noexcept : ia(std::move(adapter)), input_format(format)
+    {
+        (void)detail::is_sax_static_asserts<SAX, BasicJsonType> {};
+    }
+
+    // make class move-only
+    binary_reader(const binary_reader&) = delete;
+    binary_reader(binary_reader&&) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)
+    binary_reader& operator=(const binary_reader&) = delete;
+    binary_reader& operator=(binary_reader&&) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)
+    ~binary_reader() = default;
+
+    /*!
+    @param[in] format  the binary format to parse
+    @param[in] sax_    a SAX event processor
+    @param[in] strict  whether to expect the input to be consumed completed
+    @param[in] tag_handler  how to treat CBOR tags
+
+    @return whether parsing was successful
+    */
+    JSON_HEDLEY_NON_NULL(3)
+    bool sax_parse(const input_format_t format,
+                   json_sax_t* sax_,
+                   const bool strict = true,
+                   const cbor_tag_handler_t tag_handler = cbor_tag_handler_t::error)
+    {
+        sax = sax_;
+        bool result = false;
+
+        switch (format)
+        {
+            case input_format_t::bson:
+                result = parse_bson_internal();
+                break;
+
+            case input_format_t::cbor:
+                result = parse_cbor_internal(true, tag_handler);
+                break;
+
+            case input_format_t::msgpack:
+                result = parse_msgpack_internal();
+                break;
+
+            case input_format_t::ubjson:
+            case input_format_t::bjdata:
+                result = parse_ubjson_internal();
+                break;
+
+            case input_format_t::json: // LCOV_EXCL_LINE
+            default:            // LCOV_EXCL_LINE
+                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE
+        }
+
+        // strict mode: next byte must be EOF
+        if (result && strict)
+        {
+            if (input_format == input_format_t::ubjson || input_format == input_format_t::bjdata)
+            {
+                get_ignore_noop();
+            }
+            else
+            {
+                get();
+            }
+
+            if (JSON_HEDLEY_UNLIKELY(current != std::char_traits<char_type>::eof()))
+            {
+                return sax->parse_error(chars_read, get_token_string(), parse_error::create(110, chars_read,
+                                        exception_message(input_format, concat("expected end of input; last byte: 0x", get_token_string()), "value"), nullptr));
+            }
+        }
+
+        return result;
+    }
+
+  private:
+    //////////
+    // BSON //
+    //////////
+
+    /*!
+    @brief Reads in a BSON-object and passes it to the SAX-parser.
+    @return whether a valid BSON-value was passed to the SAX parser
+    */
+    bool parse_bson_internal()
+    {
+        std::int32_t document_size{};
+        get_number<std::int32_t, true>(input_format_t::bson, document_size);
+
+        if (JSON_HEDLEY_UNLIKELY(!sax->start_object(static_cast<std::size_t>(-1))))
+        {
+            return false;
+        }
+
+        if (JSON_HEDLEY_UNLIKELY(!parse_bson_element_list(/*is_array*/false)))
+        {
+            return false;
+        }
+
+        return sax->end_object();
+    }
+
+    /*!
+    @brief Parses a C-style string from the BSON input.
+    @param[in,out] result  A reference to the string variable where the read
+                            string is to be stored.
+    @return `true` if the \x00-byte indicating the end of the string was
+             encountered before the EOF; false` indicates an unexpected EOF.
+    */
+    bool get_bson_cstr(string_t& result)
+    {
+        auto out = std::back_inserter(result);
+        while (true)
+        {
+            get();
+            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::bson, "cstring")))
+            {
+                return false;
+            }
+            if (current == 0x00)
+            {
+                return true;
+            }
+            *out++ = static_cast<typename string_t::value_type>(current);
+        }
+    }
+
+    /*!
+    @brief Parses a zero-terminated string of length @a len from the BSON
+           input.
+    @param[in] len  The length (including the zero-byte at the end) of the
+                    string to be read.
+    @param[in,out] result  A reference to the string variable where the read
+                            string is to be stored.
+    @tparam NumberType The type of the length @a len
+    @pre len >= 1
+    @return `true` if the string was successfully parsed
+    */
+    template<typename NumberType>
+    bool get_bson_string(const NumberType len, string_t& result)
+    {
+        if (JSON_HEDLEY_UNLIKELY(len < 1))
+        {
+            auto last_token = get_token_string();
+            return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
+                                    exception_message(input_format_t::bson, concat("string length must be at least 1, is ", std::to_string(len)), "string"), nullptr));
+        }
+
+        return get_string(input_format_t::bson, len - static_cast<NumberType>(1), result) && get() != std::char_traits<char_type>::eof();
+    }
+
+    /*!
+    @brief Parses a byte array input of length @a len from the BSON input.
+    @param[in] len  The length of the byte array to be read.
+    @param[in,out] result  A reference to the binary variable where the read
+                            array is to be stored.
+    @tparam NumberType The type of the length @a len
+    @pre len >= 0
+    @return `true` if the byte array was successfully parsed
+    */
+    template<typename NumberType>
+    bool get_bson_binary(const NumberType len, binary_t& result)
+    {
+        if (JSON_HEDLEY_UNLIKELY(len < 0))
+        {
+            auto last_token = get_token_string();
+            return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
+                                    exception_message(input_format_t::bson, concat("byte array length cannot be negative, is ", std::to_string(len)), "binary"), nullptr));
+        }
+
+        // All BSON binary values have a subtype
+        std::uint8_t subtype{};
+        get_number<std::uint8_t>(input_format_t::bson, subtype);
+        result.set_subtype(subtype);
+
+        return get_binary(input_format_t::bson, len, result);
+    }
+
+    /*!
+    @brief Read a BSON document element of the given @a element_type.
+    @param[in] element_type The BSON element type, c.f. http://bsonspec.org/spec.html
+    @param[in] element_type_parse_position The position in the input stream,
+               where the `element_type` was read.
+    @warning Not all BSON element types are supported yet. An unsupported
+             @a element_type will give rise to a parse_error.114:
+             Unsupported BSON record type 0x...
+    @return whether a valid BSON-object/array was passed to the SAX parser
+    */
+    bool parse_bson_element_internal(const char_int_type element_type,
+                                     const std::size_t element_type_parse_position)
+    {
+        switch (element_type)
+        {
+            case 0x01: // double
+            {
+                double number{};
+                return get_number<double, true>(input_format_t::bson, number) && sax->number_float(static_cast<number_float_t>(number), "");
+            }
+
+            case 0x02: // string
+            {
+                std::int32_t len{};
+                string_t value;
+                return get_number<std::int32_t, true>(input_format_t::bson, len) && get_bson_string(len, value) && sax->string(value);
+            }
+
+            case 0x03: // object
+            {
+                return parse_bson_internal();
+            }
+
+            case 0x04: // array
+            {
+                return parse_bson_array();
+            }
+
+            case 0x05: // binary
+            {
+                std::int32_t len{};
+                binary_t value;
+                return get_number<std::int32_t, true>(input_format_t::bson, len) && get_bson_binary(len, value) && sax->binary(value);
+            }
+
+            case 0x08: // boolean
+            {
+                return sax->boolean(get() != 0);
+            }
+
+            case 0x0A: // null
+            {
+                return sax->null();
+            }
+
+            case 0x10: // int32
+            {
+                std::int32_t value{};
+                return get_number<std::int32_t, true>(input_format_t::bson, value) && sax->number_integer(value);
+            }
+
+            case 0x12: // int64
+            {
+                std::int64_t value{};
+                return get_number<std::int64_t, true>(input_format_t::bson, value) && sax->number_integer(value);
+            }
+
+            default: // anything else not supported (yet)
+            {
+                std::array<char, 3> cr{{}};
+                static_cast<void>((std::snprintf)(cr.data(), cr.size(), "%.2hhX", static_cast<unsigned char>(element_type))); // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)
+                const std::string cr_str{cr.data()};
+                return sax->parse_error(element_type_parse_position, cr_str,
+                                        parse_error::create(114, element_type_parse_position, concat("Unsupported BSON record type 0x", cr_str), nullptr));
+            }
+        }
+    }
+
+    /*!
+    @brief Read a BSON element list (as specified in the BSON-spec)
+
+    The same binary layout is used for objects and arrays, hence it must be
+    indicated with the argument @a is_array which one is expected
+    (true --> array, false --> object).
+
+    @param[in] is_array Determines if the element list being read is to be
+                        treated as an object (@a is_array == false), or as an
+                        array (@a is_array == true).
+    @return whether a valid BSON-object/array was passed to the SAX parser
+    */
+    bool parse_bson_element_list(const bool is_array)
+    {
+        string_t key;
+
+        while (auto element_type = get())
+        {
+            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::bson, "element list")))
+            {
+                return false;
+            }
+
+            const std::size_t element_type_parse_position = chars_read;
+            if (JSON_HEDLEY_UNLIKELY(!get_bson_cstr(key)))
+            {
+                return false;
+            }
+
+            if (!is_array && !sax->key(key))
+            {
+                return false;
+            }
+
+            if (JSON_HEDLEY_UNLIKELY(!parse_bson_element_internal(element_type, element_type_parse_position)))
+            {
+                return false;
+            }
+
+            // get_bson_cstr only appends
+            key.clear();
+        }
+
+        return true;
+    }
+
+    /*!
+    @brief Reads an array from the BSON input and passes it to the SAX-parser.
+    @return whether a valid BSON-array was passed to the SAX parser
+    */
+    bool parse_bson_array()
+    {
+        std::int32_t document_size{};
+        get_number<std::int32_t, true>(input_format_t::bson, document_size);
+
+        if (JSON_HEDLEY_UNLIKELY(!sax->start_array(static_cast<std::size_t>(-1))))
+        {
+            return false;
+        }
+
+        if (JSON_HEDLEY_UNLIKELY(!parse_bson_element_list(/*is_array*/true)))
+        {
+            return false;
+        }
+
+        return sax->end_array();
+    }
+
+    //////////
+    // CBOR //
+    //////////
+
+    /*!
+    @param[in] get_char  whether a new character should be retrieved from the
+                         input (true) or whether the last read character should
+                         be considered instead (false)
+    @param[in] tag_handler how CBOR tags should be treated
+
+    @return whether a valid CBOR value was passed to the SAX parser
+    */
+    bool parse_cbor_internal(const bool get_char,
+                             const cbor_tag_handler_t tag_handler)
+    {
+        switch (get_char ? get() : current)
+        {
+            // EOF
+            case std::char_traits<char_type>::eof():
+                return unexpect_eof(input_format_t::cbor, "value");
+
+            // Integer 0x00..0x17 (0..23)
+            case 0x00:
+            case 0x01:
+            case 0x02:
+            case 0x03:
+            case 0x04:
+            case 0x05:
+            case 0x06:
+            case 0x07:
+            case 0x08:
+            case 0x09:
+            case 0x0A:
+            case 0x0B:
+            case 0x0C:
+            case 0x0D:
+            case 0x0E:
+            case 0x0F:
+            case 0x10:
+            case 0x11:
+            case 0x12:
+            case 0x13:
+            case 0x14:
+            case 0x15:
+            case 0x16:
+            case 0x17:
+                return sax->number_unsigned(static_cast<number_unsigned_t>(current));
+
+            case 0x18: // Unsigned integer (one-byte uint8_t follows)
+            {
+                std::uint8_t number{};
+                return get_number(input_format_t::cbor, number) && sax->number_unsigned(number);
+            }
+
+            case 0x19: // Unsigned integer (two-byte uint16_t follows)
+            {
+                std::uint16_t number{};
+                return get_number(input_format_t::cbor, number) && sax->number_unsigned(number);
+            }
+
+            case 0x1A: // Unsigned integer (four-byte uint32_t follows)
+            {
+                std::uint32_t number{};
+                return get_number(input_format_t::cbor, number) && sax->number_unsigned(number);
+            }
+
+            case 0x1B: // Unsigned integer (eight-byte uint64_t follows)
+            {
+                std::uint64_t number{};
+                return get_number(input_format_t::cbor, number) && sax->number_unsigned(number);
+            }
+
+            // Negative integer -1-0x00..-1-0x17 (-1..-24)
+            case 0x20:
+            case 0x21:
+            case 0x22:
+            case 0x23:
+            case 0x24:
+            case 0x25:
+            case 0x26:
+            case 0x27:
+            case 0x28:
+            case 0x29:
+            case 0x2A:
+            case 0x2B:
+            case 0x2C:
+            case 0x2D:
+            case 0x2E:
+            case 0x2F:
+            case 0x30:
+            case 0x31:
+            case 0x32:
+            case 0x33:
+            case 0x34:
+            case 0x35:
+            case 0x36:
+            case 0x37:
+                return sax->number_integer(static_cast<std::int8_t>(0x20 - 1 - current));
+
+            case 0x38: // Negative integer (one-byte uint8_t follows)
+            {
+                std::uint8_t number{};
+                return get_number(input_format_t::cbor, number) && sax->number_integer(static_cast<number_integer_t>(-1) - number);
+            }
+
+            case 0x39: // Negative integer -1-n (two-byte uint16_t follows)
+            {
+                std::uint16_t number{};
+                return get_number(input_format_t::cbor, number) && sax->number_integer(static_cast<number_integer_t>(-1) - number);
+            }
+
+            case 0x3A: // Negative integer -1-n (four-byte uint32_t follows)
+            {
+                std::uint32_t number{};
+                return get_number(input_format_t::cbor, number) && sax->number_integer(static_cast<number_integer_t>(-1) - number);
+            }
+
+            case 0x3B: // Negative integer -1-n (eight-byte uint64_t follows)
+            {
+                std::uint64_t number{};
+                return get_number(input_format_t::cbor, number) && sax->number_integer(static_cast<number_integer_t>(-1)
+                        - static_cast<number_integer_t>(number));
+            }
+
+            // Binary data (0x00..0x17 bytes follow)
+            case 0x40:
+            case 0x41:
+            case 0x42:
+            case 0x43:
+            case 0x44:
+            case 0x45:
+            case 0x46:
+            case 0x47:
+            case 0x48:
+            case 0x49:
+            case 0x4A:
+            case 0x4B:
+            case 0x4C:
+            case 0x4D:
+            case 0x4E:
+            case 0x4F:
+            case 0x50:
+            case 0x51:
+            case 0x52:
+            case 0x53:
+            case 0x54:
+            case 0x55:
+            case 0x56:
+            case 0x57:
+            case 0x58: // Binary data (one-byte uint8_t for n follows)
+            case 0x59: // Binary data (two-byte uint16_t for n follow)
+            case 0x5A: // Binary data (four-byte uint32_t for n follow)
+            case 0x5B: // Binary data (eight-byte uint64_t for n follow)
+            case 0x5F: // Binary data (indefinite length)
+            {
+                binary_t b;
+                return get_cbor_binary(b) && sax->binary(b);
+            }
+
+            // UTF-8 string (0x00..0x17 bytes follow)
+            case 0x60:
+            case 0x61:
+            case 0x62:
+            case 0x63:
+            case 0x64:
+            case 0x65:
+            case 0x66:
+            case 0x67:
+            case 0x68:
+            case 0x69:
+            case 0x6A:
+            case 0x6B:
+            case 0x6C:
+            case 0x6D:
+            case 0x6E:
+            case 0x6F:
+            case 0x70:
+            case 0x71:
+            case 0x72:
+            case 0x73:
+            case 0x74:
+            case 0x75:
+            case 0x76:
+            case 0x77:
+            case 0x78: // UTF-8 string (one-byte uint8_t for n follows)
+            case 0x79: // UTF-8 string (two-byte uint16_t for n follow)
+            case 0x7A: // UTF-8 string (four-byte uint32_t for n follow)
+            case 0x7B: // UTF-8 string (eight-byte uint64_t for n follow)
+            case 0x7F: // UTF-8 string (indefinite length)
+            {
+                string_t s;
+                return get_cbor_string(s) && sax->string(s);
+            }
+
+            // array (0x00..0x17 data items follow)
+            case 0x80:
+            case 0x81:
+            case 0x82:
+            case 0x83:
+            case 0x84:
+            case 0x85:
+            case 0x86:
+            case 0x87:
+            case 0x88:
+            case 0x89:
+            case 0x8A:
+            case 0x8B:
+            case 0x8C:
+            case 0x8D:
+            case 0x8E:
+            case 0x8F:
+            case 0x90:
+            case 0x91:
+            case 0x92:
+            case 0x93:
+            case 0x94:
+            case 0x95:
+            case 0x96:
+            case 0x97:
+                return get_cbor_array(
+                           conditional_static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x1Fu), tag_handler);
+
+            case 0x98: // array (one-byte uint8_t for n follows)
+            {
+                std::uint8_t len{};
+                return get_number(input_format_t::cbor, len) && get_cbor_array(static_cast<std::size_t>(len), tag_handler);
+            }
+
+            case 0x99: // array (two-byte uint16_t for n follow)
+            {
+                std::uint16_t len{};
+                return get_number(input_format_t::cbor, len) && get_cbor_array(static_cast<std::size_t>(len), tag_handler);
+            }
+
+            case 0x9A: // array (four-byte uint32_t for n follow)
+            {
+                std::uint32_t len{};
+                return get_number(input_format_t::cbor, len) && get_cbor_array(conditional_static_cast<std::size_t>(len), tag_handler);
+            }
+
+            case 0x9B: // array (eight-byte uint64_t for n follow)
+            {
+                std::uint64_t len{};
+                return get_number(input_format_t::cbor, len) && get_cbor_array(conditional_static_cast<std::size_t>(len), tag_handler);
+            }
+
+            case 0x9F: // array (indefinite length)
+                return get_cbor_array(static_cast<std::size_t>(-1), tag_handler);
+
+            // map (0x00..0x17 pairs of data items follow)
+            case 0xA0:
+            case 0xA1:
+            case 0xA2:
+            case 0xA3:
+            case 0xA4:
+            case 0xA5:
+            case 0xA6:
+            case 0xA7:
+            case 0xA8:
+            case 0xA9:
+            case 0xAA:
+            case 0xAB:
+            case 0xAC:
+            case 0xAD:
+            case 0xAE:
+            case 0xAF:
+            case 0xB0:
+            case 0xB1:
+            case 0xB2:
+            case 0xB3:
+            case 0xB4:
+            case 0xB5:
+            case 0xB6:
+            case 0xB7:
+                return get_cbor_object(conditional_static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x1Fu), tag_handler);
+
+            case 0xB8: // map (one-byte uint8_t for n follows)
+            {
+                std::uint8_t len{};
+                return get_number(input_format_t::cbor, len) && get_cbor_object(static_cast<std::size_t>(len), tag_handler);
+            }
+
+            case 0xB9: // map (two-byte uint16_t for n follow)
+            {
+                std::uint16_t len{};
+                return get_number(input_format_t::cbor, len) && get_cbor_object(static_cast<std::size_t>(len), tag_handler);
+            }
+
+            case 0xBA: // map (four-byte uint32_t for n follow)
+            {
+                std::uint32_t len{};
+                return get_number(input_format_t::cbor, len) && get_cbor_object(conditional_static_cast<std::size_t>(len), tag_handler);
+            }
+
+            case 0xBB: // map (eight-byte uint64_t for n follow)
+            {
+                std::uint64_t len{};
+                return get_number(input_format_t::cbor, len) && get_cbor_object(conditional_static_cast<std::size_t>(len), tag_handler);
+            }
+
+            case 0xBF: // map (indefinite length)
+                return get_cbor_object(static_cast<std::size_t>(-1), tag_handler);
+
+            case 0xC6: // tagged item
+            case 0xC7:
+            case 0xC8:
+            case 0xC9:
+            case 0xCA:
+            case 0xCB:
+            case 0xCC:
+            case 0xCD:
+            case 0xCE:
+            case 0xCF:
+            case 0xD0:
+            case 0xD1:
+            case 0xD2:
+            case 0xD3:
+            case 0xD4:
+            case 0xD8: // tagged item (1 bytes follow)
+            case 0xD9: // tagged item (2 bytes follow)
+            case 0xDA: // tagged item (4 bytes follow)
+            case 0xDB: // tagged item (8 bytes follow)
+            {
+                switch (tag_handler)
+                {
+                    case cbor_tag_handler_t::error:
+                    {
+                        auto last_token = get_token_string();
+                        return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
+                                                exception_message(input_format_t::cbor, concat("invalid byte: 0x", last_token), "value"), nullptr));
+                    }
+
+                    case cbor_tag_handler_t::ignore:
+                    {
+                        // ignore binary subtype
+                        switch (current)
+                        {
+                            case 0xD8:
+                            {
+                                std::uint8_t subtype_to_ignore{};
+                                get_number(input_format_t::cbor, subtype_to_ignore);
+                                break;
+                            }
+                            case 0xD9:
+                            {
+                                std::uint16_t subtype_to_ignore{};
+                                get_number(input_format_t::cbor, subtype_to_ignore);
+                                break;
+                            }
+                            case 0xDA:
+                            {
+                                std::uint32_t subtype_to_ignore{};
+                                get_number(input_format_t::cbor, subtype_to_ignore);
+                                break;
+                            }
+                            case 0xDB:
+                            {
+                                std::uint64_t subtype_to_ignore{};
+                                get_number(input_format_t::cbor, subtype_to_ignore);
+                                break;
+                            }
+                            default:
+                                break;
+                        }
+                        return parse_cbor_internal(true, tag_handler);
+                    }
+
+                    case cbor_tag_handler_t::store:
+                    {
+                        binary_t b;
+                        // use binary subtype and store in binary container
+                        switch (current)
+                        {
+                            case 0xD8:
+                            {
+                                std::uint8_t subtype{};
+                                get_number(input_format_t::cbor, subtype);
+                                b.set_subtype(detail::conditional_static_cast<typename binary_t::subtype_type>(subtype));
+                                break;
+                            }
+                            case 0xD9:
+                            {
+                                std::uint16_t subtype{};
+                                get_number(input_format_t::cbor, subtype);
+                                b.set_subtype(detail::conditional_static_cast<typename binary_t::subtype_type>(subtype));
+                                break;
+                            }
+                            case 0xDA:
+                            {
+                                std::uint32_t subtype{};
+                                get_number(input_format_t::cbor, subtype);
+                                b.set_subtype(detail::conditional_static_cast<typename binary_t::subtype_type>(subtype));
+                                break;
+                            }
+                            case 0xDB:
+                            {
+                                std::uint64_t subtype{};
+                                get_number(input_format_t::cbor, subtype);
+                                b.set_subtype(detail::conditional_static_cast<typename binary_t::subtype_type>(subtype));
+                                break;
+                            }
+                            default:
+                                return parse_cbor_internal(true, tag_handler);
+                        }
+                        get();
+                        return get_cbor_binary(b) && sax->binary(b);
+                    }
+
+                    default:                 // LCOV_EXCL_LINE
+                        JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE
+                        return false;        // LCOV_EXCL_LINE
+                }
+            }
+
+            case 0xF4: // false
+                return sax->boolean(false);
+
+            case 0xF5: // true
+                return sax->boolean(true);
+
+            case 0xF6: // null
+                return sax->null();
+
+            case 0xF9: // Half-Precision Float (two-byte IEEE 754)
+            {
+                const auto byte1_raw = get();
+                if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::cbor, "number")))
+                {
+                    return false;
+                }
+                const auto byte2_raw = get();
+                if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::cbor, "number")))
+                {
+                    return false;
+                }
+
+                const auto byte1 = static_cast<unsigned char>(byte1_raw);
+                const auto byte2 = static_cast<unsigned char>(byte2_raw);
+
+                // code from RFC 7049, Appendix D, Figure 3:
+                // As half-precision floating-point numbers were only added
+                // to IEEE 754 in 2008, today's programming platforms often
+                // still only have limited support for them. It is very
+                // easy to include at least decoding support for them even
+                // without such support. An example of a small decoder for
+                // half-precision floating-point numbers in the C language
+                // is shown in Fig. 3.
+                const auto half = static_cast<unsigned int>((byte1 << 8u) + byte2);
+                const double val = [&half]
+                {
+                    const int exp = (half >> 10u) & 0x1Fu;
+                    const unsigned int mant = half & 0x3FFu;
+                    JSON_ASSERT(0 <= exp&& exp <= 32);
+                    JSON_ASSERT(mant <= 1024);
+                    switch (exp)
+                    {
+                        case 0:
+                            return std::ldexp(mant, -24);
+                        case 31:
+                            return (mant == 0)
+                            ? std::numeric_limits<double>::infinity()
+                            : std::numeric_limits<double>::quiet_NaN();
+                        default:
+                            return std::ldexp(mant + 1024, exp - 25);
+                    }
+                }();
+                return sax->number_float((half & 0x8000u) != 0
+                                         ? static_cast<number_float_t>(-val)
+                                         : static_cast<number_float_t>(val), "");
+            }
+
+            case 0xFA: // Single-Precision Float (four-byte IEEE 754)
+            {
+                float number{};
+                return get_number(input_format_t::cbor, number) && sax->number_float(static_cast<number_float_t>(number), "");
+            }
+
+            case 0xFB: // Double-Precision Float (eight-byte IEEE 754)
+            {
+                double number{};
+                return get_number(input_format_t::cbor, number) && sax->number_float(static_cast<number_float_t>(number), "");
+            }
+
+            default: // anything else (0xFF is handled inside the other types)
+            {
+                auto last_token = get_token_string();
+                return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
+                                        exception_message(input_format_t::cbor, concat("invalid byte: 0x", last_token), "value"), nullptr));
+            }
+        }
+    }
+
+    /*!
+    @brief reads a CBOR string
+
+    This function first reads starting bytes to determine the expected
+    string length and then copies this number of bytes into a string.
+    Additionally, CBOR's strings with indefinite lengths are supported.
+
+    @param[out] result  created string
+
+    @return whether string creation completed
+    */
+    bool get_cbor_string(string_t& result)
+    {
+        if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::cbor, "string")))
+        {
+            return false;
+        }
+
+        switch (current)
+        {
+            // UTF-8 string (0x00..0x17 bytes follow)
+            case 0x60:
+            case 0x61:
+            case 0x62:
+            case 0x63:
+            case 0x64:
+            case 0x65:
+            case 0x66:
+            case 0x67:
+            case 0x68:
+            case 0x69:
+            case 0x6A:
+            case 0x6B:
+            case 0x6C:
+            case 0x6D:
+            case 0x6E:
+            case 0x6F:
+            case 0x70:
+            case 0x71:
+            case 0x72:
+            case 0x73:
+            case 0x74:
+            case 0x75:
+            case 0x76:
+            case 0x77:
+            {
+                return get_string(input_format_t::cbor, static_cast<unsigned int>(current) & 0x1Fu, result);
+            }
+
+            case 0x78: // UTF-8 string (one-byte uint8_t for n follows)
+            {
+                std::uint8_t len{};
+                return get_number(input_format_t::cbor, len) && get_string(input_format_t::cbor, len, result);
+            }
+
+            case 0x79: // UTF-8 string (two-byte uint16_t for n follow)
+            {
+                std::uint16_t len{};
+                return get_number(input_format_t::cbor, len) && get_string(input_format_t::cbor, len, result);
+            }
+
+            case 0x7A: // UTF-8 string (four-byte uint32_t for n follow)
+            {
+                std::uint32_t len{};
+                return get_number(input_format_t::cbor, len) && get_string(input_format_t::cbor, len, result);
+            }
+
+            case 0x7B: // UTF-8 string (eight-byte uint64_t for n follow)
+            {
+                std::uint64_t len{};
+                return get_number(input_format_t::cbor, len) && get_string(input_format_t::cbor, len, result);
+            }
+
+            case 0x7F: // UTF-8 string (indefinite length)
+            {
+                while (get() != 0xFF)
+                {
+                    string_t chunk;
+                    if (!get_cbor_string(chunk))
+                    {
+                        return false;
+                    }
+                    result.append(chunk);
+                }
+                return true;
+            }
+
+            default:
+            {
+                auto last_token = get_token_string();
+                return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read,
+                                        exception_message(input_format_t::cbor, concat("expected length specification (0x60-0x7B) or indefinite string type (0x7F); last byte: 0x", last_token), "string"), nullptr));
+            }
+        }
+    }
+
+    /*!
+    @brief reads a CBOR byte array
+
+    This function first reads starting bytes to determine the expected
+    byte array length and then copies this number of bytes into the byte array.
+    Additionally, CBOR's byte arrays with indefinite lengths are supported.
+
+    @param[out] result  created byte array
+
+    @return whether byte array creation completed
+    */
+    bool get_cbor_binary(binary_t& result)
+    {
+        if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::cbor, "binary")))
+        {
+            return false;
+        }
+
+        switch (current)
+        {
+            // Binary data (0x00..0x17 bytes follow)
+            case 0x40:
+            case 0x41:
+            case 0x42:
+            case 0x43:
+            case 0x44:
+            case 0x45:
+            case 0x46:
+            case 0x47:
+            case 0x48:
+            case 0x49:
+            case 0x4A:
+            case 0x4B:
+            case 0x4C:
+            case 0x4D:
+            case 0x4E:
+            case 0x4F:
+            case 0x50:
+            case 0x51:
+            case 0x52:
+            case 0x53:
+            case 0x54:
+            case 0x55:
+            case 0x56:
+            case 0x57:
+            {
+                return get_binary(input_format_t::cbor, static_cast<unsigned int>(current) & 0x1Fu, result);
+            }
+
+            case 0x58: // Binary data (one-byte uint8_t for n follows)
+            {
+                std::uint8_t len{};
+                return get_number(input_format_t::cbor, len) &&
+                       get_binary(input_format_t::cbor, len, result);
+            }
+
+            case 0x59: // Binary data (two-byte uint16_t for n follow)
+            {
+                std::uint16_t len{};
+                return get_number(input_format_t::cbor, len) &&
+                       get_binary(input_format_t::cbor, len, result);
+            }
+
+            case 0x5A: // Binary data (four-byte uint32_t for n follow)
+            {
+                std::uint32_t len{};
+                return get_number(input_format_t::cbor, len) &&
+                       get_binary(input_format_t::cbor, len, result);
+            }
+
+            case 0x5B: // Binary data (eight-byte uint64_t for n follow)
+            {
+                std::uint64_t len{};
+                return get_number(input_format_t::cbor, len) &&
+                       get_binary(input_format_t::cbor, len, result);
+            }
+
+            case 0x5F: // Binary data (indefinite length)
+            {
+                while (get() != 0xFF)
+                {
+                    binary_t chunk;
+                    if (!get_cbor_binary(chunk))
+                    {
+                        return false;
+                    }
+                    result.insert(result.end(), chunk.begin(), chunk.end());
+                }
+                return true;
+            }
+
+            default:
+            {
+                auto last_token = get_token_string();
+                return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read,
+                                        exception_message(input_format_t::cbor, concat("expected length specification (0x40-0x5B) or indefinite binary array type (0x5F); last byte: 0x", last_token), "binary"), nullptr));
+            }
+        }
+    }
+
+    /*!
+    @param[in] len  the length of the array or static_cast<std::size_t>(-1) for an
+                    array of indefinite size
+    @param[in] tag_handler how CBOR tags should be treated
+    @return whether array creation completed
+    */
+    bool get_cbor_array(const std::size_t len,
+                        const cbor_tag_handler_t tag_handler)
+    {
+        if (JSON_HEDLEY_UNLIKELY(!sax->start_array(len)))
+        {
+            return false;
+        }
+
+        if (len != static_cast<std::size_t>(-1))
+        {
+            for (std::size_t i = 0; i < len; ++i)
+            {
+                if (JSON_HEDLEY_UNLIKELY(!parse_cbor_internal(true, tag_handler)))
+                {
+                    return false;
+                }
+            }
+        }
+        else
+        {
+            while (get() != 0xFF)
+            {
+                if (JSON_HEDLEY_UNLIKELY(!parse_cbor_internal(false, tag_handler)))
+                {
+                    return false;
+                }
+            }
+        }
+
+        return sax->end_array();
+    }
+
+    /*!
+    @param[in] len  the length of the object or static_cast<std::size_t>(-1) for an
+                    object of indefinite size
+    @param[in] tag_handler how CBOR tags should be treated
+    @return whether object creation completed
+    */
+    bool get_cbor_object(const std::size_t len,
+                         const cbor_tag_handler_t tag_handler)
+    {
+        if (JSON_HEDLEY_UNLIKELY(!sax->start_object(len)))
+        {
+            return false;
+        }
+
+        if (len != 0)
+        {
+            string_t key;
+            if (len != static_cast<std::size_t>(-1))
+            {
+                for (std::size_t i = 0; i < len; ++i)
+                {
+                    get();
+                    if (JSON_HEDLEY_UNLIKELY(!get_cbor_string(key) || !sax->key(key)))
+                    {
+                        return false;
+                    }
+
+                    if (JSON_HEDLEY_UNLIKELY(!parse_cbor_internal(true, tag_handler)))
+                    {
+                        return false;
+                    }
+                    key.clear();
+                }
+            }
+            else
+            {
+                while (get() != 0xFF)
+                {
+                    if (JSON_HEDLEY_UNLIKELY(!get_cbor_string(key) || !sax->key(key)))
+                    {
+                        return false;
+                    }
+
+                    if (JSON_HEDLEY_UNLIKELY(!parse_cbor_internal(true, tag_handler)))
+                    {
+                        return false;
+                    }
+                    key.clear();
+                }
+            }
+        }
+
+        return sax->end_object();
+    }
+
+    /////////////
+    // MsgPack //
+    /////////////
+
+    /*!
+    @return whether a valid MessagePack value was passed to the SAX parser
+    */
+    bool parse_msgpack_internal()
+    {
+        switch (get())
+        {
+            // EOF
+            case std::char_traits<char_type>::eof():
+                return unexpect_eof(input_format_t::msgpack, "value");
+
+            // positive fixint
+            case 0x00:
+            case 0x01:
+            case 0x02:
+            case 0x03:
+            case 0x04:
+            case 0x05:
+            case 0x06:
+            case 0x07:
+            case 0x08:
+            case 0x09:
+            case 0x0A:
+            case 0x0B:
+            case 0x0C:
+            case 0x0D:
+            case 0x0E:
+            case 0x0F:
+            case 0x10:
+            case 0x11:
+            case 0x12:
+            case 0x13:
+            case 0x14:
+            case 0x15:
+            case 0x16:
+            case 0x17:
+            case 0x18:
+            case 0x19:
+            case 0x1A:
+            case 0x1B:
+            case 0x1C:
+            case 0x1D:
+            case 0x1E:
+            case 0x1F:
+            case 0x20:
+            case 0x21:
+            case 0x22:
+            case 0x23:
+            case 0x24:
+            case 0x25:
+            case 0x26:
+            case 0x27:
+            case 0x28:
+            case 0x29:
+            case 0x2A:
+            case 0x2B:
+            case 0x2C:
+            case 0x2D:
+            case 0x2E:
+            case 0x2F:
+            case 0x30:
+            case 0x31:
+            case 0x32:
+            case 0x33:
+            case 0x34:
+            case 0x35:
+            case 0x36:
+            case 0x37:
+            case 0x38:
+            case 0x39:
+            case 0x3A:
+            case 0x3B:
+            case 0x3C:
+            case 0x3D:
+            case 0x3E:
+            case 0x3F:
+            case 0x40:
+            case 0x41:
+            case 0x42:
+            case 0x43:
+            case 0x44:
+            case 0x45:
+            case 0x46:
+            case 0x47:
+            case 0x48:
+            case 0x49:
+            case 0x4A:
+            case 0x4B:
+            case 0x4C:
+            case 0x4D:
+            case 0x4E:
+            case 0x4F:
+            case 0x50:
+            case 0x51:
+            case 0x52:
+            case 0x53:
+            case 0x54:
+            case 0x55:
+            case 0x56:
+            case 0x57:
+            case 0x58:
+            case 0x59:
+            case 0x5A:
+            case 0x5B:
+            case 0x5C:
+            case 0x5D:
+            case 0x5E:
+            case 0x5F:
+            case 0x60:
+            case 0x61:
+            case 0x62:
+            case 0x63:
+            case 0x64:
+            case 0x65:
+            case 0x66:
+            case 0x67:
+            case 0x68:
+            case 0x69:
+            case 0x6A:
+            case 0x6B:
+            case 0x6C:
+            case 0x6D:
+            case 0x6E:
+            case 0x6F:
+            case 0x70:
+            case 0x71:
+            case 0x72:
+            case 0x73:
+            case 0x74:
+            case 0x75:
+            case 0x76:
+            case 0x77:
+            case 0x78:
+            case 0x79:
+            case 0x7A:
+            case 0x7B:
+            case 0x7C:
+            case 0x7D:
+            case 0x7E:
+            case 0x7F:
+                return sax->number_unsigned(static_cast<number_unsigned_t>(current));
+
+            // fixmap
+            case 0x80:
+            case 0x81:
+            case 0x82:
+            case 0x83:
+            case 0x84:
+            case 0x85:
+            case 0x86:
+            case 0x87:
+            case 0x88:
+            case 0x89:
+            case 0x8A:
+            case 0x8B:
+            case 0x8C:
+            case 0x8D:
+            case 0x8E:
+            case 0x8F:
+                return get_msgpack_object(conditional_static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x0Fu));
+
+            // fixarray
+            case 0x90:
+            case 0x91:
+            case 0x92:
+            case 0x93:
+            case 0x94:
+            case 0x95:
+            case 0x96:
+            case 0x97:
+            case 0x98:
+            case 0x99:
+            case 0x9A:
+            case 0x9B:
+            case 0x9C:
+            case 0x9D:
+            case 0x9E:
+            case 0x9F:
+                return get_msgpack_array(conditional_static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x0Fu));
+
+            // fixstr
+            case 0xA0:
+            case 0xA1:
+            case 0xA2:
+            case 0xA3:
+            case 0xA4:
+            case 0xA5:
+            case 0xA6:
+            case 0xA7:
+            case 0xA8:
+            case 0xA9:
+            case 0xAA:
+            case 0xAB:
+            case 0xAC:
+            case 0xAD:
+            case 0xAE:
+            case 0xAF:
+            case 0xB0:
+            case 0xB1:
+            case 0xB2:
+            case 0xB3:
+            case 0xB4:
+            case 0xB5:
+            case 0xB6:
+            case 0xB7:
+            case 0xB8:
+            case 0xB9:
+            case 0xBA:
+            case 0xBB:
+            case 0xBC:
+            case 0xBD:
+            case 0xBE:
+            case 0xBF:
+            case 0xD9: // str 8
+            case 0xDA: // str 16
+            case 0xDB: // str 32
+            {
+                string_t s;
+                return get_msgpack_string(s) && sax->string(s);
+            }
+
+            case 0xC0: // nil
+                return sax->null();
+
+            case 0xC2: // false
+                return sax->boolean(false);
+
+            case 0xC3: // true
+                return sax->boolean(true);
+
+            case 0xC4: // bin 8
+            case 0xC5: // bin 16
+            case 0xC6: // bin 32
+            case 0xC7: // ext 8
+            case 0xC8: // ext 16
+            case 0xC9: // ext 32
+            case 0xD4: // fixext 1
+            case 0xD5: // fixext 2
+            case 0xD6: // fixext 4
+            case 0xD7: // fixext 8
+            case 0xD8: // fixext 16
+            {
+                binary_t b;
+                return get_msgpack_binary(b) && sax->binary(b);
+            }
+
+            case 0xCA: // float 32
+            {
+                float number{};
+                return get_number(input_format_t::msgpack, number) && sax->number_float(static_cast<number_float_t>(number), "");
+            }
+
+            case 0xCB: // float 64
+            {
+                double number{};
+                return get_number(input_format_t::msgpack, number) && sax->number_float(static_cast<number_float_t>(number), "");
+            }
+
+            case 0xCC: // uint 8
+            {
+                std::uint8_t number{};
+                return get_number(input_format_t::msgpack, number) && sax->number_unsigned(number);
+            }
+
+            case 0xCD: // uint 16
+            {
+                std::uint16_t number{};
+                return get_number(input_format_t::msgpack, number) && sax->number_unsigned(number);
+            }
+
+            case 0xCE: // uint 32
+            {
+                std::uint32_t number{};
+                return get_number(input_format_t::msgpack, number) && sax->number_unsigned(number);
+            }
+
+            case 0xCF: // uint 64
+            {
+                std::uint64_t number{};
+                return get_number(input_format_t::msgpack, number) && sax->number_unsigned(number);
+            }
+
+            case 0xD0: // int 8
+            {
+                std::int8_t number{};
+                return get_number(input_format_t::msgpack, number) && sax->number_integer(number);
+            }
+
+            case 0xD1: // int 16
+            {
+                std::int16_t number{};
+                return get_number(input_format_t::msgpack, number) && sax->number_integer(number);
+            }
+
+            case 0xD2: // int 32
+            {
+                std::int32_t number{};
+                return get_number(input_format_t::msgpack, number) && sax->number_integer(number);
+            }
+
+            case 0xD3: // int 64
+            {
+                std::int64_t number{};
+                return get_number(input_format_t::msgpack, number) && sax->number_integer(number);
+            }
+
+            case 0xDC: // array 16
+            {
+                std::uint16_t len{};
+                return get_number(input_format_t::msgpack, len) && get_msgpack_array(static_cast<std::size_t>(len));
+            }
+
+            case 0xDD: // array 32
+            {
+                std::uint32_t len{};
+                return get_number(input_format_t::msgpack, len) && get_msgpack_array(conditional_static_cast<std::size_t>(len));
+            }
+
+            case 0xDE: // map 16
+            {
+                std::uint16_t len{};
+                return get_number(input_format_t::msgpack, len) && get_msgpack_object(static_cast<std::size_t>(len));
+            }
+
+            case 0xDF: // map 32
+            {
+                std::uint32_t len{};
+                return get_number(input_format_t::msgpack, len) && get_msgpack_object(conditional_static_cast<std::size_t>(len));
+            }
+
+            // negative fixint
+            case 0xE0:
+            case 0xE1:
+            case 0xE2:
+            case 0xE3:
+            case 0xE4:
+            case 0xE5:
+            case 0xE6:
+            case 0xE7:
+            case 0xE8:
+            case 0xE9:
+            case 0xEA:
+            case 0xEB:
+            case 0xEC:
+            case 0xED:
+            case 0xEE:
+            case 0xEF:
+            case 0xF0:
+            case 0xF1:
+            case 0xF2:
+            case 0xF3:
+            case 0xF4:
+            case 0xF5:
+            case 0xF6:
+            case 0xF7:
+            case 0xF8:
+            case 0xF9:
+            case 0xFA:
+            case 0xFB:
+            case 0xFC:
+            case 0xFD:
+            case 0xFE:
+            case 0xFF:
+                return sax->number_integer(static_cast<std::int8_t>(current));
+
+            default: // anything else
+            {
+                auto last_token = get_token_string();
+                return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
+                                        exception_message(input_format_t::msgpack, concat("invalid byte: 0x", last_token), "value"), nullptr));
+            }
+        }
+    }
+
+    /*!
+    @brief reads a MessagePack string
+
+    This function first reads starting bytes to determine the expected
+    string length and then copies this number of bytes into a string.
+
+    @param[out] result  created string
+
+    @return whether string creation completed
+    */
+    bool get_msgpack_string(string_t& result)
+    {
+        if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::msgpack, "string")))
+        {
+            return false;
+        }
+
+        switch (current)
+        {
+            // fixstr
+            case 0xA0:
+            case 0xA1:
+            case 0xA2:
+            case 0xA3:
+            case 0xA4:
+            case 0xA5:
+            case 0xA6:
+            case 0xA7:
+            case 0xA8:
+            case 0xA9:
+            case 0xAA:
+            case 0xAB:
+            case 0xAC:
+            case 0xAD:
+            case 0xAE:
+            case 0xAF:
+            case 0xB0:
+            case 0xB1:
+            case 0xB2:
+            case 0xB3:
+            case 0xB4:
+            case 0xB5:
+            case 0xB6:
+            case 0xB7:
+            case 0xB8:
+            case 0xB9:
+            case 0xBA:
+            case 0xBB:
+            case 0xBC:
+            case 0xBD:
+            case 0xBE:
+            case 0xBF:
+            {
+                return get_string(input_format_t::msgpack, static_cast<unsigned int>(current) & 0x1Fu, result);
+            }
+
+            case 0xD9: // str 8
+            {
+                std::uint8_t len{};
+                return get_number(input_format_t::msgpack, len) && get_string(input_format_t::msgpack, len, result);
+            }
+
+            case 0xDA: // str 16
+            {
+                std::uint16_t len{};
+                return get_number(input_format_t::msgpack, len) && get_string(input_format_t::msgpack, len, result);
+            }
+
+            case 0xDB: // str 32
+            {
+                std::uint32_t len{};
+                return get_number(input_format_t::msgpack, len) && get_string(input_format_t::msgpack, len, result);
+            }
+
+            default:
+            {
+                auto last_token = get_token_string();
+                return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read,
+                                        exception_message(input_format_t::msgpack, concat("expected length specification (0xA0-0xBF, 0xD9-0xDB); last byte: 0x", last_token), "string"), nullptr));
+            }
+        }
+    }
+
+    /*!
+    @brief reads a MessagePack byte array
+
+    This function first reads starting bytes to determine the expected
+    byte array length and then copies this number of bytes into a byte array.
+
+    @param[out] result  created byte array
+
+    @return whether byte array creation completed
+    */
+    bool get_msgpack_binary(binary_t& result)
+    {
+        // helper function to set the subtype
+        auto assign_and_return_true = [&result](std::int8_t subtype)
+        {
+            result.set_subtype(static_cast<std::uint8_t>(subtype));
+            return true;
+        };
+
+        switch (current)
+        {
+            case 0xC4: // bin 8
+            {
+                std::uint8_t len{};
+                return get_number(input_format_t::msgpack, len) &&
+                       get_binary(input_format_t::msgpack, len, result);
+            }
+
+            case 0xC5: // bin 16
+            {
+                std::uint16_t len{};
+                return get_number(input_format_t::msgpack, len) &&
+                       get_binary(input_format_t::msgpack, len, result);
+            }
+
+            case 0xC6: // bin 32
+            {
+                std::uint32_t len{};
+                return get_number(input_format_t::msgpack, len) &&
+                       get_binary(input_format_t::msgpack, len, result);
+            }
+
+            case 0xC7: // ext 8
+            {
+                std::uint8_t len{};
+                std::int8_t subtype{};
+                return get_number(input_format_t::msgpack, len) &&
+                       get_number(input_format_t::msgpack, subtype) &&
+                       get_binary(input_format_t::msgpack, len, result) &&
+                       assign_and_return_true(subtype);
+            }
+
+            case 0xC8: // ext 16
+            {
+                std::uint16_t len{};
+                std::int8_t subtype{};
+                return get_number(input_format_t::msgpack, len) &&
+                       get_number(input_format_t::msgpack, subtype) &&
+                       get_binary(input_format_t::msgpack, len, result) &&
+                       assign_and_return_true(subtype);
+            }
+
+            case 0xC9: // ext 32
+            {
+                std::uint32_t len{};
+                std::int8_t subtype{};
+                return get_number(input_format_t::msgpack, len) &&
+                       get_number(input_format_t::msgpack, subtype) &&
+                       get_binary(input_format_t::msgpack, len, result) &&
+                       assign_and_return_true(subtype);
+            }
+
+            case 0xD4: // fixext 1
+            {
+                std::int8_t subtype{};
+                return get_number(input_format_t::msgpack, subtype) &&
+                       get_binary(input_format_t::msgpack, 1, result) &&
+                       assign_and_return_true(subtype);
+            }
+
+            case 0xD5: // fixext 2
+            {
+                std::int8_t subtype{};
+                return get_number(input_format_t::msgpack, subtype) &&
+                       get_binary(input_format_t::msgpack, 2, result) &&
+                       assign_and_return_true(subtype);
+            }
+
+            case 0xD6: // fixext 4
+            {
+                std::int8_t subtype{};
+                return get_number(input_format_t::msgpack, subtype) &&
+                       get_binary(input_format_t::msgpack, 4, result) &&
+                       assign_and_return_true(subtype);
+            }
+
+            case 0xD7: // fixext 8
+            {
+                std::int8_t subtype{};
+                return get_number(input_format_t::msgpack, subtype) &&
+                       get_binary(input_format_t::msgpack, 8, result) &&
+                       assign_and_return_true(subtype);
+            }
+
+            case 0xD8: // fixext 16
+            {
+                std::int8_t subtype{};
+                return get_number(input_format_t::msgpack, subtype) &&
+                       get_binary(input_format_t::msgpack, 16, result) &&
+                       assign_and_return_true(subtype);
+            }
+
+            default:           // LCOV_EXCL_LINE
+                return false;  // LCOV_EXCL_LINE
+        }
+    }
+
+    /*!
+    @param[in] len  the length of the array
+    @return whether array creation completed
+    */
+    bool get_msgpack_array(const std::size_t len)
+    {
+        if (JSON_HEDLEY_UNLIKELY(!sax->start_array(len)))
+        {
+            return false;
+        }
+
+        for (std::size_t i = 0; i < len; ++i)
+        {
+            if (JSON_HEDLEY_UNLIKELY(!parse_msgpack_internal()))
+            {
+                return false;
+            }
+        }
+
+        return sax->end_array();
+    }
+
+    /*!
+    @param[in] len  the length of the object
+    @return whether object creation completed
+    */
+    bool get_msgpack_object(const std::size_t len)
+    {
+        if (JSON_HEDLEY_UNLIKELY(!sax->start_object(len)))
+        {
+            return false;
+        }
+
+        string_t key;
+        for (std::size_t i = 0; i < len; ++i)
+        {
+            get();
+            if (JSON_HEDLEY_UNLIKELY(!get_msgpack_string(key) || !sax->key(key)))
+            {
+                return false;
+            }
+
+            if (JSON_HEDLEY_UNLIKELY(!parse_msgpack_internal()))
+            {
+                return false;
+            }
+            key.clear();
+        }
+
+        return sax->end_object();
+    }
+
+    ////////////
+    // UBJSON //
+    ////////////
+
+    /*!
+    @param[in] get_char  whether a new character should be retrieved from the
+                         input (true, default) or whether the last read
+                         character should be considered instead
+
+    @return whether a valid UBJSON value was passed to the SAX parser
+    */
+    bool parse_ubjson_internal(const bool get_char = true)
+    {
+        return get_ubjson_value(get_char ? get_ignore_noop() : current);
+    }
+
+    /*!
+    @brief reads a UBJSON string
+
+    This function is either called after reading the 'S' byte explicitly
+    indicating a string, or in case of an object key where the 'S' byte can be
+    left out.
+
+    @param[out] result   created string
+    @param[in] get_char  whether a new character should be retrieved from the
+                         input (true, default) or whether the last read
+                         character should be considered instead
+
+    @return whether string creation completed
+    */
+    bool get_ubjson_string(string_t& result, const bool get_char = true)
+    {
+        if (get_char)
+        {
+            get();  // TODO(niels): may we ignore N here?
+        }
+
+        if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, "value")))
+        {
+            return false;
+        }
+
+        switch (current)
+        {
+            case 'U':
+            {
+                std::uint8_t len{};
+                return get_number(input_format, len) && get_string(input_format, len, result);
+            }
+
+            case 'i':
+            {
+                std::int8_t len{};
+                return get_number(input_format, len) && get_string(input_format, len, result);
+            }
+
+            case 'I':
+            {
+                std::int16_t len{};
+                return get_number(input_format, len) && get_string(input_format, len, result);
+            }
+
+            case 'l':
+            {
+                std::int32_t len{};
+                return get_number(input_format, len) && get_string(input_format, len, result);
+            }
+
+            case 'L':
+            {
+                std::int64_t len{};
+                return get_number(input_format, len) && get_string(input_format, len, result);
+            }
+
+            case 'u':
+            {
+                if (input_format != input_format_t::bjdata)
+                {
+                    break;
+                }
+                std::uint16_t len{};
+                return get_number(input_format, len) && get_string(input_format, len, result);
+            }
+
+            case 'm':
+            {
+                if (input_format != input_format_t::bjdata)
+                {
+                    break;
+                }
+                std::uint32_t len{};
+                return get_number(input_format, len) && get_string(input_format, len, result);
+            }
+
+            case 'M':
+            {
+                if (input_format != input_format_t::bjdata)
+                {
+                    break;
+                }
+                std::uint64_t len{};
+                return get_number(input_format, len) && get_string(input_format, len, result);
+            }
+
+            default:
+                break;
+        }
+        auto last_token = get_token_string();
+        std::string message;
+
+        if (input_format != input_format_t::bjdata)
+        {
+            message = "expected length type specification (U, i, I, l, L); last byte: 0x" + last_token;
+        }
+        else
+        {
+            message = "expected length type specification (U, i, u, I, m, l, M, L); last byte: 0x" + last_token;
+        }
+        return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read, exception_message(input_format, message, "string"), nullptr));
+    }
+
+    /*!
+    @param[out] dim  an integer vector storing the ND array dimensions
+    @return whether reading ND array size vector is successful
+    */
+    bool get_ubjson_ndarray_size(std::vector<size_t>& dim)
+    {
+        std::pair<std::size_t, char_int_type> size_and_type;
+        size_t dimlen = 0;
+        bool no_ndarray = true;
+
+        if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_type(size_and_type, no_ndarray)))
+        {
+            return false;
+        }
+
+        if (size_and_type.first != npos)
+        {
+            if (size_and_type.second != 0)
+            {
+                if (size_and_type.second != 'N')
+                {
+                    for (std::size_t i = 0; i < size_and_type.first; ++i)
+                    {
+                        if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_value(dimlen, no_ndarray, size_and_type.second)))
+                        {
+                            return false;
+                        }
+                        dim.push_back(dimlen);
+                    }
+                }
+            }
+            else
+            {
+                for (std::size_t i = 0; i < size_and_type.first; ++i)
+                {
+                    if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_value(dimlen, no_ndarray)))
+                    {
+                        return false;
+                    }
+                    dim.push_back(dimlen);
+                }
+            }
+        }
+        else
+        {
+            while (current != ']')
+            {
+                if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_value(dimlen, no_ndarray, current)))
+                {
+                    return false;
+                }
+                dim.push_back(dimlen);
+                get_ignore_noop();
+            }
+        }
+        return true;
+    }
+
+    /*!
+    @param[out] result  determined size
+    @param[in,out] is_ndarray  for input, `true` means already inside an ndarray vector
+                               or ndarray dimension is not allowed; `false` means ndarray
+                               is allowed; for output, `true` means an ndarray is found;
+                               is_ndarray can only return `true` when its initial value
+                               is `false`
+    @param[in] prefix  type marker if already read, otherwise set to 0
+
+    @return whether size determination completed
+    */
+    bool get_ubjson_size_value(std::size_t& result, bool& is_ndarray, char_int_type prefix = 0)
+    {
+        if (prefix == 0)
+        {
+            prefix = get_ignore_noop();
+        }
+
+        switch (prefix)
+        {
+            case 'U':
+            {
+                std::uint8_t number{};
+                if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
+                {
+                    return false;
+                }
+                result = static_cast<std::size_t>(number);
+                return true;
+            }
+
+            case 'i':
+            {
+                std::int8_t number{};
+                if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
+                {
+                    return false;
+                }
+                if (number < 0)
+                {
+                    return sax->parse_error(chars_read, get_token_string(), parse_error::create(113, chars_read,
+                                            exception_message(input_format, "count in an optimized container must be positive", "size"), nullptr));
+                }
+                result = static_cast<std::size_t>(number); // NOLINT(bugprone-signed-char-misuse,cert-str34-c): number is not a char
+                return true;
+            }
+
+            case 'I':
+            {
+                std::int16_t number{};
+                if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
+                {
+                    return false;
+                }
+                if (number < 0)
+                {
+                    return sax->parse_error(chars_read, get_token_string(), parse_error::create(113, chars_read,
+                                            exception_message(input_format, "count in an optimized container must be positive", "size"), nullptr));
+                }
+                result = static_cast<std::size_t>(number);
+                return true;
+            }
+
+            case 'l':
+            {
+                std::int32_t number{};
+                if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
+                {
+                    return false;
+                }
+                if (number < 0)
+                {
+                    return sax->parse_error(chars_read, get_token_string(), parse_error::create(113, chars_read,
+                                            exception_message(input_format, "count in an optimized container must be positive", "size"), nullptr));
+                }
+                result = static_cast<std::size_t>(number);
+                return true;
+            }
+
+            case 'L':
+            {
+                std::int64_t number{};
+                if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
+                {
+                    return false;
+                }
+                if (number < 0)
+                {
+                    return sax->parse_error(chars_read, get_token_string(), parse_error::create(113, chars_read,
+                                            exception_message(input_format, "count in an optimized container must be positive", "size"), nullptr));
+                }
+                if (!value_in_range_of<std::size_t>(number))
+                {
+                    return sax->parse_error(chars_read, get_token_string(), out_of_range::create(408,
+                                            exception_message(input_format, "integer value overflow", "size"), nullptr));
+                }
+                result = static_cast<std::size_t>(number);
+                return true;
+            }
+
+            case 'u':
+            {
+                if (input_format != input_format_t::bjdata)
+                {
+                    break;
+                }
+                std::uint16_t number{};
+                if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
+                {
+                    return false;
+                }
+                result = static_cast<std::size_t>(number);
+                return true;
+            }
+
+            case 'm':
+            {
+                if (input_format != input_format_t::bjdata)
+                {
+                    break;
+                }
+                std::uint32_t number{};
+                if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
+                {
+                    return false;
+                }
+                result = conditional_static_cast<std::size_t>(number);
+                return true;
+            }
+
+            case 'M':
+            {
+                if (input_format != input_format_t::bjdata)
+                {
+                    break;
+                }
+                std::uint64_t number{};
+                if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
+                {
+                    return false;
+                }
+                if (!value_in_range_of<std::size_t>(number))
+                {
+                    return sax->parse_error(chars_read, get_token_string(), out_of_range::create(408,
+                                            exception_message(input_format, "integer value overflow", "size"), nullptr));
+                }
+                result = detail::conditional_static_cast<std::size_t>(number);
+                return true;
+            }
+
+            case '[':
+            {
+                if (input_format != input_format_t::bjdata)
+                {
+                    break;
+                }
+                if (is_ndarray) // ndarray dimensional vector can only contain integers, and can not embed another array
+                {
+                    return sax->parse_error(chars_read, get_token_string(), parse_error::create(113, chars_read, exception_message(input_format, "ndarray dimensional vector is not allowed", "size"), nullptr));
+                }
+                std::vector<size_t> dim;
+                if (JSON_HEDLEY_UNLIKELY(!get_ubjson_ndarray_size(dim)))
+                {
+                    return false;
+                }
+                if (dim.size() == 1 || (dim.size() == 2 && dim.at(0) == 1)) // return normal array size if 1D row vector
+                {
+                    result = dim.at(dim.size() - 1);
+                    return true;
+                }
+                if (!dim.empty())  // if ndarray, convert to an object in JData annotated array format
+                {
+                    for (auto i : dim) // test if any dimension in an ndarray is 0, if so, return a 1D empty container
+                    {
+                        if ( i == 0 )
+                        {
+                            result = 0;
+                            return true;
+                        }
+                    }
+
+                    string_t key = "_ArraySize_";
+                    if (JSON_HEDLEY_UNLIKELY(!sax->start_object(3) || !sax->key(key) || !sax->start_array(dim.size())))
+                    {
+                        return false;
+                    }
+                    result = 1;
+                    for (auto i : dim)
+                    {
+                        result *= i;
+                        if (result == 0 || result == npos) // because dim elements shall not have zeros, result = 0 means overflow happened; it also can't be npos as it is used to initialize size in get_ubjson_size_type()
+                        {
+                            return sax->parse_error(chars_read, get_token_string(), out_of_range::create(408, exception_message(input_format, "excessive ndarray size caused overflow", "size"), nullptr));
+                        }
+                        if (JSON_HEDLEY_UNLIKELY(!sax->number_unsigned(static_cast<number_unsigned_t>(i))))
+                        {
+                            return false;
+                        }
+                    }
+                    is_ndarray = true;
+                    return sax->end_array();
+                }
+                result = 0;
+                return true;
+            }
+
+            default:
+                break;
+        }
+        auto last_token = get_token_string();
+        std::string message;
+
+        if (input_format != input_format_t::bjdata)
+        {
+            message = "expected length type specification (U, i, I, l, L) after '#'; last byte: 0x" + last_token;
+        }
+        else
+        {
+            message = "expected length type specification (U, i, u, I, m, l, M, L) after '#'; last byte: 0x" + last_token;
+        }
+        return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read, exception_message(input_format, message, "size"), nullptr));
+    }
+
+    /*!
+    @brief determine the type and size for a container
+
+    In the optimized UBJSON format, a type and a size can be provided to allow
+    for a more compact representation.
+
+    @param[out] result  pair of the size and the type
+    @param[in] inside_ndarray  whether the parser is parsing an ND array dimensional vector
+
+    @return whether pair creation completed
+    */
+    bool get_ubjson_size_type(std::pair<std::size_t, char_int_type>& result, bool inside_ndarray = false)
+    {
+        result.first = npos; // size
+        result.second = 0; // type
+        bool is_ndarray = false;
+
+        get_ignore_noop();
+
+        if (current == '$')
+        {
+            result.second = get();  // must not ignore 'N', because 'N' maybe the type
+            if (input_format == input_format_t::bjdata
+                    && JSON_HEDLEY_UNLIKELY(std::binary_search(bjd_optimized_type_markers.begin(), bjd_optimized_type_markers.end(), result.second)))
+            {
+                auto last_token = get_token_string();
+                return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
+                                        exception_message(input_format, concat("marker 0x", last_token, " is not a permitted optimized array type"), "type"), nullptr));
+            }
+
+            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, "type")))
+            {
+                return false;
+            }
+
+            get_ignore_noop();
+            if (JSON_HEDLEY_UNLIKELY(current != '#'))
+            {
+                if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, "value")))
+                {
+                    return false;
+                }
+                auto last_token = get_token_string();
+                return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
+                                        exception_message(input_format, concat("expected '#' after type information; last byte: 0x", last_token), "size"), nullptr));
+            }
+
+            const bool is_error = get_ubjson_size_value(result.first, is_ndarray);
+            if (input_format == input_format_t::bjdata && is_ndarray)
+            {
+                if (inside_ndarray)
+                {
+                    return sax->parse_error(chars_read, get_token_string(), parse_error::create(112, chars_read,
+                                            exception_message(input_format, "ndarray can not be recursive", "size"), nullptr));
+                }
+                result.second |= (1 << 8); // use bit 8 to indicate ndarray, all UBJSON and BJData markers should be ASCII letters
+            }
+            return is_error;
+        }
+
+        if (current == '#')
+        {
+            const bool is_error = get_ubjson_size_value(result.first, is_ndarray);
+            if (input_format == input_format_t::bjdata && is_ndarray)
+            {
+                return sax->parse_error(chars_read, get_token_string(), parse_error::create(112, chars_read,
+                                        exception_message(input_format, "ndarray requires both type and size", "size"), nullptr));
+            }
+            return is_error;
+        }
+
+        return true;
+    }
+
+    /*!
+    @param prefix  the previously read or set type prefix
+    @return whether value creation completed
+    */
+    bool get_ubjson_value(const char_int_type prefix)
+    {
+        switch (prefix)
+        {
+            case std::char_traits<char_type>::eof():  // EOF
+                return unexpect_eof(input_format, "value");
+
+            case 'T':  // true
+                return sax->boolean(true);
+            case 'F':  // false
+                return sax->boolean(false);
+
+            case 'Z':  // null
+                return sax->null();
+
+            case 'U':
+            {
+                std::uint8_t number{};
+                return get_number(input_format, number) && sax->number_unsigned(number);
+            }
+
+            case 'i':
+            {
+                std::int8_t number{};
+                return get_number(input_format, number) && sax->number_integer(number);
+            }
+
+            case 'I':
+            {
+                std::int16_t number{};
+                return get_number(input_format, number) && sax->number_integer(number);
+            }
+
+            case 'l':
+            {
+                std::int32_t number{};
+                return get_number(input_format, number) && sax->number_integer(number);
+            }
+
+            case 'L':
+            {
+                std::int64_t number{};
+                return get_number(input_format, number) && sax->number_integer(number);
+            }
+
+            case 'u':
+            {
+                if (input_format != input_format_t::bjdata)
+                {
+                    break;
+                }
+                std::uint16_t number{};
+                return get_number(input_format, number) && sax->number_unsigned(number);
+            }
+
+            case 'm':
+            {
+                if (input_format != input_format_t::bjdata)
+                {
+                    break;
+                }
+                std::uint32_t number{};
+                return get_number(input_format, number) && sax->number_unsigned(number);
+            }
+
+            case 'M':
+            {
+                if (input_format != input_format_t::bjdata)
+                {
+                    break;
+                }
+                std::uint64_t number{};
+                return get_number(input_format, number) && sax->number_unsigned(number);
+            }
+
+            case 'h':
+            {
+                if (input_format != input_format_t::bjdata)
+                {
+                    break;
+                }
+                const auto byte1_raw = get();
+                if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, "number")))
+                {
+                    return false;
+                }
+                const auto byte2_raw = get();
+                if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, "number")))
+                {
+                    return false;
+                }
+
+                const auto byte1 = static_cast<unsigned char>(byte1_raw);
+                const auto byte2 = static_cast<unsigned char>(byte2_raw);
+
+                // code from RFC 7049, Appendix D, Figure 3:
+                // As half-precision floating-point numbers were only added
+                // to IEEE 754 in 2008, today's programming platforms often
+                // still only have limited support for them. It is very
+                // easy to include at least decoding support for them even
+                // without such support. An example of a small decoder for
+                // half-precision floating-point numbers in the C language
+                // is shown in Fig. 3.
+                const auto half = static_cast<unsigned int>((byte2 << 8u) + byte1);
+                const double val = [&half]
+                {
+                    const int exp = (half >> 10u) & 0x1Fu;
+                    const unsigned int mant = half & 0x3FFu;
+                    JSON_ASSERT(0 <= exp&& exp <= 32);
+                    JSON_ASSERT(mant <= 1024);
+                    switch (exp)
+                    {
+                        case 0:
+                            return std::ldexp(mant, -24);
+                        case 31:
+                            return (mant == 0)
+                            ? std::numeric_limits<double>::infinity()
+                            : std::numeric_limits<double>::quiet_NaN();
+                        default:
+                            return std::ldexp(mant + 1024, exp - 25);
+                    }
+                }();
+                return sax->number_float((half & 0x8000u) != 0
+                                         ? static_cast<number_float_t>(-val)
+                                         : static_cast<number_float_t>(val), "");
+            }
+
+            case 'd':
+            {
+                float number{};
+                return get_number(input_format, number) && sax->number_float(static_cast<number_float_t>(number), "");
+            }
+
+            case 'D':
+            {
+                double number{};
+                return get_number(input_format, number) && sax->number_float(static_cast<number_float_t>(number), "");
+            }
+
+            case 'H':
+            {
+                return get_ubjson_high_precision_number();
+            }
+
+            case 'C':  // char
+            {
+                get();
+                if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, "char")))
+                {
+                    return false;
+                }
+                if (JSON_HEDLEY_UNLIKELY(current > 127))
+                {
+                    auto last_token = get_token_string();
+                    return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read,
+                                            exception_message(input_format, concat("byte after 'C' must be in range 0x00..0x7F; last byte: 0x", last_token), "char"), nullptr));
+                }
+                string_t s(1, static_cast<typename string_t::value_type>(current));
+                return sax->string(s);
+            }
+
+            case 'S':  // string
+            {
+                string_t s;
+                return get_ubjson_string(s) && sax->string(s);
+            }
+
+            case '[':  // array
+                return get_ubjson_array();
+
+            case '{':  // object
+                return get_ubjson_object();
+
+            default: // anything else
+                break;
+        }
+        auto last_token = get_token_string();
+        return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read, exception_message(input_format, "invalid byte: 0x" + last_token, "value"), nullptr));
+    }
+
+    /*!
+    @return whether array creation completed
+    */
+    bool get_ubjson_array()
+    {
+        std::pair<std::size_t, char_int_type> size_and_type;
+        if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_type(size_and_type)))
+        {
+            return false;
+        }
+
+        // if bit-8 of size_and_type.second is set to 1, encode bjdata ndarray as an object in JData annotated array format (https://github.com/NeuroJSON/jdata):
+        // {"_ArrayType_" : "typeid", "_ArraySize_" : [n1, n2, ...], "_ArrayData_" : [v1, v2, ...]}
+
+        if (input_format == input_format_t::bjdata && size_and_type.first != npos && (size_and_type.second & (1 << 8)) != 0)
+        {
+            size_and_type.second &= ~(static_cast<char_int_type>(1) << 8);  // use bit 8 to indicate ndarray, here we remove the bit to restore the type marker
+            auto it = std::lower_bound(bjd_types_map.begin(), bjd_types_map.end(), size_and_type.second, [](const bjd_type & p, char_int_type t)
+            {
+                return p.first < t;
+            });
+            string_t key = "_ArrayType_";
+            if (JSON_HEDLEY_UNLIKELY(it == bjd_types_map.end() || it->first != size_and_type.second))
+            {
+                auto last_token = get_token_string();
+                return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
+                                        exception_message(input_format, "invalid byte: 0x" + last_token, "type"), nullptr));
+            }
+
+            string_t type = it->second; // sax->string() takes a reference
+            if (JSON_HEDLEY_UNLIKELY(!sax->key(key) || !sax->string(type)))
+            {
+                return false;
+            }
+
+            if (size_and_type.second == 'C')
+            {
+                size_and_type.second = 'U';
+            }
+
+            key = "_ArrayData_";
+            if (JSON_HEDLEY_UNLIKELY(!sax->key(key) || !sax->start_array(size_and_type.first) ))
+            {
+                return false;
+            }
+
+            for (std::size_t i = 0; i < size_and_type.first; ++i)
+            {
+                if (JSON_HEDLEY_UNLIKELY(!get_ubjson_value(size_and_type.second)))
+                {
+                    return false;
+                }
+            }
+
+            return (sax->end_array() && sax->end_object());
+        }
+
+        if (size_and_type.first != npos)
+        {
+            if (JSON_HEDLEY_UNLIKELY(!sax->start_array(size_and_type.first)))
+            {
+                return false;
+            }
+
+            if (size_and_type.second != 0)
+            {
+                if (size_and_type.second != 'N')
+                {
+                    for (std::size_t i = 0; i < size_and_type.first; ++i)
+                    {
+                        if (JSON_HEDLEY_UNLIKELY(!get_ubjson_value(size_and_type.second)))
+                        {
+                            return false;
+                        }
+                    }
+                }
+            }
+            else
+            {
+                for (std::size_t i = 0; i < size_and_type.first; ++i)
+                {
+                    if (JSON_HEDLEY_UNLIKELY(!parse_ubjson_internal()))
+                    {
+                        return false;
+                    }
+                }
+            }
+        }
+        else
+        {
+            if (JSON_HEDLEY_UNLIKELY(!sax->start_array(static_cast<std::size_t>(-1))))
+            {
+                return false;
+            }
+
+            while (current != ']')
+            {
+                if (JSON_HEDLEY_UNLIKELY(!parse_ubjson_internal(false)))
+                {
+                    return false;
+                }
+                get_ignore_noop();
+            }
+        }
+
+        return sax->end_array();
+    }
+
+    /*!
+    @return whether object creation completed
+    */
+    bool get_ubjson_object()
+    {
+        std::pair<std::size_t, char_int_type> size_and_type;
+        if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_type(size_and_type)))
+        {
+            return false;
+        }
+
+        // do not accept ND-array size in objects in BJData
+        if (input_format == input_format_t::bjdata && size_and_type.first != npos && (size_and_type.second & (1 << 8)) != 0)
+        {
+            auto last_token = get_token_string();
+            return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
+                                    exception_message(input_format, "BJData object does not support ND-array size in optimized format", "object"), nullptr));
+        }
+
+        string_t key;
+        if (size_and_type.first != npos)
+        {
+            if (JSON_HEDLEY_UNLIKELY(!sax->start_object(size_and_type.first)))
+            {
+                return false;
+            }
+
+            if (size_and_type.second != 0)
+            {
+                for (std::size_t i = 0; i < size_and_type.first; ++i)
+                {
+                    if (JSON_HEDLEY_UNLIKELY(!get_ubjson_string(key) || !sax->key(key)))
+                    {
+                        return false;
+                    }
+                    if (JSON_HEDLEY_UNLIKELY(!get_ubjson_value(size_and_type.second)))
+                    {
+                        return false;
+                    }
+                    key.clear();
+                }
+            }
+            else
+            {
+                for (std::size_t i = 0; i < size_and_type.first; ++i)
+                {
+                    if (JSON_HEDLEY_UNLIKELY(!get_ubjson_string(key) || !sax->key(key)))
+                    {
+                        return false;
+                    }
+                    if (JSON_HEDLEY_UNLIKELY(!parse_ubjson_internal()))
+                    {
+                        return false;
+                    }
+                    key.clear();
+                }
+            }
+        }
+        else
+        {
+            if (JSON_HEDLEY_UNLIKELY(!sax->start_object(static_cast<std::size_t>(-1))))
+            {
+                return false;
+            }
+
+            while (current != '}')
+            {
+                if (JSON_HEDLEY_UNLIKELY(!get_ubjson_string(key, false) || !sax->key(key)))
+                {
+                    return false;
+                }
+                if (JSON_HEDLEY_UNLIKELY(!parse_ubjson_internal()))
+                {
+                    return false;
+                }
+                get_ignore_noop();
+                key.clear();
+            }
+        }
+
+        return sax->end_object();
+    }
+
+    // Note, no reader for UBJSON binary types is implemented because they do
+    // not exist
+
+    bool get_ubjson_high_precision_number()
+    {
+        // get size of following number string
+        std::size_t size{};
+        bool no_ndarray = true;
+        auto res = get_ubjson_size_value(size, no_ndarray);
+        if (JSON_HEDLEY_UNLIKELY(!res))
+        {
+            return res;
+        }
+
+        // get number string
+        std::vector<char> number_vector;
+        for (std::size_t i = 0; i < size; ++i)
+        {
+            get();
+            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, "number")))
+            {
+                return false;
+            }
+            number_vector.push_back(static_cast<char>(current));
+        }
+
+        // parse number string
+        using ia_type = decltype(detail::input_adapter(number_vector));
+        auto number_lexer = detail::lexer<BasicJsonType, ia_type>(detail::input_adapter(number_vector), false);
+        const auto result_number = number_lexer.scan();
+        const auto number_string = number_lexer.get_token_string();
+        const auto result_remainder = number_lexer.scan();
+
+        using token_type = typename detail::lexer_base<BasicJsonType>::token_type;
+
+        if (JSON_HEDLEY_UNLIKELY(result_remainder != token_type::end_of_input))
+        {
+            return sax->parse_error(chars_read, number_string, parse_error::create(115, chars_read,
+                                    exception_message(input_format, concat("invalid number text: ", number_lexer.get_token_string()), "high-precision number"), nullptr));
+        }
+
+        switch (result_number)
+        {
+            case token_type::value_integer:
+                return sax->number_integer(number_lexer.get_number_integer());
+            case token_type::value_unsigned:
+                return sax->number_unsigned(number_lexer.get_number_unsigned());
+            case token_type::value_float:
+                return sax->number_float(number_lexer.get_number_float(), std::move(number_string));
+            case token_type::uninitialized:
+            case token_type::literal_true:
+            case token_type::literal_false:
+            case token_type::literal_null:
+            case token_type::value_string:
+            case token_type::begin_array:
+            case token_type::begin_object:
+            case token_type::end_array:
+            case token_type::end_object:
+            case token_type::name_separator:
+            case token_type::value_separator:
+            case token_type::parse_error:
+            case token_type::end_of_input:
+            case token_type::literal_or_value:
+            default:
+                return sax->parse_error(chars_read, number_string, parse_error::create(115, chars_read,
+                                        exception_message(input_format, concat("invalid number text: ", number_lexer.get_token_string()), "high-precision number"), nullptr));
+        }
+    }
+
+    ///////////////////////
+    // Utility functions //
+    ///////////////////////
+
+    /*!
+    @brief get next character from the input
+
+    This function provides the interface to the used input adapter. It does
+    not throw in case the input reached EOF, but returns a -'ve valued
+    `std::char_traits<char_type>::eof()` in that case.
+
+    @return character read from the input
+    */
+    char_int_type get()
+    {
+        ++chars_read;
+        return current = ia.get_character();
+    }
+
+    /*!
+    @return character read from the input after ignoring all 'N' entries
+    */
+    char_int_type get_ignore_noop()
+    {
+        do
+        {
+            get();
+        }
+        while (current == 'N');
+
+        return current;
+    }
+
+    /*
+    @brief read a number from the input
+
+    @tparam NumberType the type of the number
+    @param[in] format   the current format (for diagnostics)
+    @param[out] result  number of type @a NumberType
+
+    @return whether conversion completed
+
+    @note This function needs to respect the system's endianness, because
+          bytes in CBOR, MessagePack, and UBJSON are stored in network order
+          (big endian) and therefore need reordering on little endian systems.
+          On the other hand, BSON and BJData use little endian and should reorder
+          on big endian systems.
+    */
+    template<typename NumberType, bool InputIsLittleEndian = false>
+    bool get_number(const input_format_t format, NumberType& result)
+    {
+        // step 1: read input into array with system's byte order
+        std::array<std::uint8_t, sizeof(NumberType)> vec{};
+        for (std::size_t i = 0; i < sizeof(NumberType); ++i)
+        {
+            get();
+            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(format, "number")))
+            {
+                return false;
+            }
+
+            // reverse byte order prior to conversion if necessary
+            if (is_little_endian != (InputIsLittleEndian || format == input_format_t::bjdata))
+            {
+                vec[sizeof(NumberType) - i - 1] = static_cast<std::uint8_t>(current);
+            }
+            else
+            {
+                vec[i] = static_cast<std::uint8_t>(current); // LCOV_EXCL_LINE
+            }
+        }
+
+        // step 2: convert array into number of type T and return
+        std::memcpy(&result, vec.data(), sizeof(NumberType));
+        return true;
+    }
+
+    /*!
+    @brief create a string by reading characters from the input
+
+    @tparam NumberType the type of the number
+    @param[in] format the current format (for diagnostics)
+    @param[in] len number of characters to read
+    @param[out] result string created by reading @a len bytes
+
+    @return whether string creation completed
+
+    @note We can not reserve @a len bytes for the result, because @a len
+          may be too large. Usually, @ref unexpect_eof() detects the end of
+          the input before we run out of string memory.
+    */
+    template<typename NumberType>
+    bool get_string(const input_format_t format,
+                    const NumberType len,
+                    string_t& result)
+    {
+        bool success = true;
+        for (NumberType i = 0; i < len; i++)
+        {
+            get();
+            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(format, "string")))
+            {
+                success = false;
+                break;
+            }
+            result.push_back(static_cast<typename string_t::value_type>(current));
+        }
+        return success;
+    }
+
+    /*!
+    @brief create a byte array by reading bytes from the input
+
+    @tparam NumberType the type of the number
+    @param[in] format the current format (for diagnostics)
+    @param[in] len number of bytes to read
+    @param[out] result byte array created by reading @a len bytes
+
+    @return whether byte array creation completed
+
+    @note We can not reserve @a len bytes for the result, because @a len
+          may be too large. Usually, @ref unexpect_eof() detects the end of
+          the input before we run out of memory.
+    */
+    template<typename NumberType>
+    bool get_binary(const input_format_t format,
+                    const NumberType len,
+                    binary_t& result)
+    {
+        bool success = true;
+        for (NumberType i = 0; i < len; i++)
+        {
+            get();
+            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(format, "binary")))
+            {
+                success = false;
+                break;
+            }
+            result.push_back(static_cast<std::uint8_t>(current));
+        }
+        return success;
+    }
+
+    /*!
+    @param[in] format   the current format (for diagnostics)
+    @param[in] context  further context information (for diagnostics)
+    @return whether the last read character is not EOF
+    */
+    JSON_HEDLEY_NON_NULL(3)
+    bool unexpect_eof(const input_format_t format, const char* context) const
+    {
+        if (JSON_HEDLEY_UNLIKELY(current == std::char_traits<char_type>::eof()))
+        {
+            return sax->parse_error(chars_read, "<end of file>",
+                                    parse_error::create(110, chars_read, exception_message(format, "unexpected end of input", context), nullptr));
+        }
+        return true;
+    }
+
+    /*!
+    @return a string representation of the last read byte
+    */
+    std::string get_token_string() const
+    {
+        std::array<char, 3> cr{{}};
+        static_cast<void>((std::snprintf)(cr.data(), cr.size(), "%.2hhX", static_cast<unsigned char>(current))); // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)
+        return std::string{cr.data()};
+    }
+
+    /*!
+    @param[in] format   the current format
+    @param[in] detail   a detailed error message
+    @param[in] context  further context information
+    @return a message string to use in the parse_error exceptions
+    */
+    std::string exception_message(const input_format_t format,
+                                  const std::string& detail,
+                                  const std::string& context) const
+    {
+        std::string error_msg = "syntax error while parsing ";
+
+        switch (format)
+        {
+            case input_format_t::cbor:
+                error_msg += "CBOR";
+                break;
+
+            case input_format_t::msgpack:
+                error_msg += "MessagePack";
+                break;
+
+            case input_format_t::ubjson:
+                error_msg += "UBJSON";
+                break;
+
+            case input_format_t::bson:
+                error_msg += "BSON";
+                break;
+
+            case input_format_t::bjdata:
+                error_msg += "BJData";
+                break;
+
+            case input_format_t::json: // LCOV_EXCL_LINE
+            default:            // LCOV_EXCL_LINE
+                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE
+        }
+
+        return concat(error_msg, ' ', context, ": ", detail);
+    }
+
+  private:
+    static JSON_INLINE_VARIABLE constexpr std::size_t npos = static_cast<std::size_t>(-1);
+
+    /// input adapter
+    InputAdapterType ia;
+
+    /// the current character
+    char_int_type current = std::char_traits<char_type>::eof();
+
+    /// the number of characters read
+    std::size_t chars_read = 0;
+
+    /// whether we can assume little endianness
+    const bool is_little_endian = little_endianness();
+
+    /// input format
+    const input_format_t input_format = input_format_t::json;
+
+    /// the SAX parser
+    json_sax_t* sax = nullptr;
+
+    // excluded markers in bjdata optimized type
+#define JSON_BINARY_READER_MAKE_BJD_OPTIMIZED_TYPE_MARKERS_ \
+    make_array<char_int_type>('F', 'H', 'N', 'S', 'T', 'Z', '[', '{')
+
+#define JSON_BINARY_READER_MAKE_BJD_TYPES_MAP_ \
+    make_array<bjd_type>(                      \
+    bjd_type{'C', "char"},                     \
+    bjd_type{'D', "double"},                   \
+    bjd_type{'I', "int16"},                    \
+    bjd_type{'L', "int64"},                    \
+    bjd_type{'M', "uint64"},                   \
+    bjd_type{'U', "uint8"},                    \
+    bjd_type{'d', "single"},                   \
+    bjd_type{'i', "int8"},                     \
+    bjd_type{'l', "int32"},                    \
+    bjd_type{'m', "uint32"},                   \
+    bjd_type{'u', "uint16"})
+
+  JSON_PRIVATE_UNLESS_TESTED:
+    // lookup tables
+    // NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)
+    const decltype(JSON_BINARY_READER_MAKE_BJD_OPTIMIZED_TYPE_MARKERS_) bjd_optimized_type_markers =
+        JSON_BINARY_READER_MAKE_BJD_OPTIMIZED_TYPE_MARKERS_;
+
+    using bjd_type = std::pair<char_int_type, string_t>;
+    // NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)
+    const decltype(JSON_BINARY_READER_MAKE_BJD_TYPES_MAP_) bjd_types_map =
+        JSON_BINARY_READER_MAKE_BJD_TYPES_MAP_;
+
+#undef JSON_BINARY_READER_MAKE_BJD_OPTIMIZED_TYPE_MARKERS_
+#undef JSON_BINARY_READER_MAKE_BJD_TYPES_MAP_
+};
+
+#ifndef JSON_HAS_CPP_17
+    template<typename BasicJsonType, typename InputAdapterType, typename SAX>
+    constexpr std::size_t binary_reader<BasicJsonType, InputAdapterType, SAX>::npos;
+#endif
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/input/input_adapters.hpp>
+
+// #include <nlohmann/detail/input/lexer.hpp>
+
+// #include <nlohmann/detail/input/parser.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <cmath> // isfinite
+#include <cstdint> // uint8_t
+#include <functional> // function
+#include <string> // string
+#include <utility> // move
+#include <vector> // vector
+
+// #include <nlohmann/detail/exceptions.hpp>
+
+// #include <nlohmann/detail/input/input_adapters.hpp>
+
+// #include <nlohmann/detail/input/json_sax.hpp>
+
+// #include <nlohmann/detail/input/lexer.hpp>
+
+// #include <nlohmann/detail/macro_scope.hpp>
+
+// #include <nlohmann/detail/meta/is_sax.hpp>
+
+// #include <nlohmann/detail/string_concat.hpp>
+
+// #include <nlohmann/detail/value_t.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+////////////
+// parser //
+////////////
+
+enum class parse_event_t : std::uint8_t
+{
+    /// the parser read `{` and started to process a JSON object
+    object_start,
+    /// the parser read `}` and finished processing a JSON object
+    object_end,
+    /// the parser read `[` and started to process a JSON array
+    array_start,
+    /// the parser read `]` and finished processing a JSON array
+    array_end,
+    /// the parser read a key of a value in an object
+    key,
+    /// the parser finished reading a JSON value
+    value
+};
+
+template<typename BasicJsonType>
+using parser_callback_t =
+    std::function<bool(int /*depth*/, parse_event_t /*event*/, BasicJsonType& /*parsed*/)>;
+
+/*!
+@brief syntax analysis
+
+This class implements a recursive descent parser.
+*/
+template<typename BasicJsonType, typename InputAdapterType>
+class parser
+{
+    using number_integer_t = typename BasicJsonType::number_integer_t;
+    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
+    using number_float_t = typename BasicJsonType::number_float_t;
+    using string_t = typename BasicJsonType::string_t;
+    using lexer_t = lexer<BasicJsonType, InputAdapterType>;
+    using token_type = typename lexer_t::token_type;
+
+  public:
+    /// a parser reading from an input adapter
+    explicit parser(InputAdapterType&& adapter,
+                    const parser_callback_t<BasicJsonType> cb = nullptr,
+                    const bool allow_exceptions_ = true,
+                    const bool skip_comments = false)
+        : callback(cb)
+        , m_lexer(std::move(adapter), skip_comments)
+        , allow_exceptions(allow_exceptions_)
+    {
+        // read first token
+        get_token();
+    }
+
+    /*!
+    @brief public parser interface
+
+    @param[in] strict      whether to expect the last token to be EOF
+    @param[in,out] result  parsed JSON value
+
+    @throw parse_error.101 in case of an unexpected token
+    @throw parse_error.102 if to_unicode fails or surrogate error
+    @throw parse_error.103 if to_unicode fails
+    */
+    void parse(const bool strict, BasicJsonType& result)
+    {
+        if (callback)
+        {
+            json_sax_dom_callback_parser<BasicJsonType> sdp(result, callback, allow_exceptions);
+            sax_parse_internal(&sdp);
+
+            // in strict mode, input must be completely read
+            if (strict && (get_token() != token_type::end_of_input))
+            {
+                sdp.parse_error(m_lexer.get_position(),
+                                m_lexer.get_token_string(),
+                                parse_error::create(101, m_lexer.get_position(),
+                                                    exception_message(token_type::end_of_input, "value"), nullptr));
+            }
+
+            // in case of an error, return discarded value
+            if (sdp.is_errored())
+            {
+                result = value_t::discarded;
+                return;
+            }
+
+            // set top-level value to null if it was discarded by the callback
+            // function
+            if (result.is_discarded())
+            {
+                result = nullptr;
+            }
+        }
+        else
+        {
+            json_sax_dom_parser<BasicJsonType> sdp(result, allow_exceptions);
+            sax_parse_internal(&sdp);
+
+            // in strict mode, input must be completely read
+            if (strict && (get_token() != token_type::end_of_input))
+            {
+                sdp.parse_error(m_lexer.get_position(),
+                                m_lexer.get_token_string(),
+                                parse_error::create(101, m_lexer.get_position(), exception_message(token_type::end_of_input, "value"), nullptr));
+            }
+
+            // in case of an error, return discarded value
+            if (sdp.is_errored())
+            {
+                result = value_t::discarded;
+                return;
+            }
+        }
+
+        result.assert_invariant();
+    }
+
+    /*!
+    @brief public accept interface
+
+    @param[in] strict  whether to expect the last token to be EOF
+    @return whether the input is a proper JSON text
+    */
+    bool accept(const bool strict = true)
+    {
+        json_sax_acceptor<BasicJsonType> sax_acceptor;
+        return sax_parse(&sax_acceptor, strict);
+    }
+
+    template<typename SAX>
+    JSON_HEDLEY_NON_NULL(2)
+    bool sax_parse(SAX* sax, const bool strict = true)
+    {
+        (void)detail::is_sax_static_asserts<SAX, BasicJsonType> {};
+        const bool result = sax_parse_internal(sax);
+
+        // strict mode: next byte must be EOF
+        if (result && strict && (get_token() != token_type::end_of_input))
+        {
+            return sax->parse_error(m_lexer.get_position(),
+                                    m_lexer.get_token_string(),
+                                    parse_error::create(101, m_lexer.get_position(), exception_message(token_type::end_of_input, "value"), nullptr));
+        }
+
+        return result;
+    }
+
+  private:
+    template<typename SAX>
+    JSON_HEDLEY_NON_NULL(2)
+    bool sax_parse_internal(SAX* sax)
+    {
+        // stack to remember the hierarchy of structured values we are parsing
+        // true = array; false = object
+        std::vector<bool> states;
+        // value to avoid a goto (see comment where set to true)
+        bool skip_to_state_evaluation = false;
+
+        while (true)
+        {
+            if (!skip_to_state_evaluation)
+            {
+                // invariant: get_token() was called before each iteration
+                switch (last_token)
+                {
+                    case token_type::begin_object:
+                    {
+                        if (JSON_HEDLEY_UNLIKELY(!sax->start_object(static_cast<std::size_t>(-1))))
+                        {
+                            return false;
+                        }
+
+                        // closing } -> we are done
+                        if (get_token() == token_type::end_object)
+                        {
+                            if (JSON_HEDLEY_UNLIKELY(!sax->end_object()))
+                            {
+                                return false;
+                            }
+                            break;
+                        }
+
+                        // parse key
+                        if (JSON_HEDLEY_UNLIKELY(last_token != token_type::value_string))
+                        {
+                            return sax->parse_error(m_lexer.get_position(),
+                                                    m_lexer.get_token_string(),
+                                                    parse_error::create(101, m_lexer.get_position(), exception_message(token_type::value_string, "object key"), nullptr));
+                        }
+                        if (JSON_HEDLEY_UNLIKELY(!sax->key(m_lexer.get_string())))
+                        {
+                            return false;
+                        }
+
+                        // parse separator (:)
+                        if (JSON_HEDLEY_UNLIKELY(get_token() != token_type::name_separator))
+                        {
+                            return sax->parse_error(m_lexer.get_position(),
+                                                    m_lexer.get_token_string(),
+                                                    parse_error::create(101, m_lexer.get_position(), exception_message(token_type::name_separator, "object separator"), nullptr));
+                        }
+
+                        // remember we are now inside an object
+                        states.push_back(false);
+
+                        // parse values
+                        get_token();
+                        continue;
+                    }
+
+                    case token_type::begin_array:
+                    {
+                        if (JSON_HEDLEY_UNLIKELY(!sax->start_array(static_cast<std::size_t>(-1))))
+                        {
+                            return false;
+                        }
+
+                        // closing ] -> we are done
+                        if (get_token() == token_type::end_array)
+                        {
+                            if (JSON_HEDLEY_UNLIKELY(!sax->end_array()))
+                            {
+                                return false;
+                            }
+                            break;
+                        }
+
+                        // remember we are now inside an array
+                        states.push_back(true);
+
+                        // parse values (no need to call get_token)
+                        continue;
+                    }
+
+                    case token_type::value_float:
+                    {
+                        const auto res = m_lexer.get_number_float();
+
+                        if (JSON_HEDLEY_UNLIKELY(!std::isfinite(res)))
+                        {
+                            return sax->parse_error(m_lexer.get_position(),
+                                                    m_lexer.get_token_string(),
+                                                    out_of_range::create(406, concat("number overflow parsing '", m_lexer.get_token_string(), '\''), nullptr));
+                        }
+
+                        if (JSON_HEDLEY_UNLIKELY(!sax->number_float(res, m_lexer.get_string())))
+                        {
+                            return false;
+                        }
+
+                        break;
+                    }
+
+                    case token_type::literal_false:
+                    {
+                        if (JSON_HEDLEY_UNLIKELY(!sax->boolean(false)))
+                        {
+                            return false;
+                        }
+                        break;
+                    }
+
+                    case token_type::literal_null:
+                    {
+                        if (JSON_HEDLEY_UNLIKELY(!sax->null()))
+                        {
+                            return false;
+                        }
+                        break;
+                    }
+
+                    case token_type::literal_true:
+                    {
+                        if (JSON_HEDLEY_UNLIKELY(!sax->boolean(true)))
+                        {
+                            return false;
+                        }
+                        break;
+                    }
+
+                    case token_type::value_integer:
+                    {
+                        if (JSON_HEDLEY_UNLIKELY(!sax->number_integer(m_lexer.get_number_integer())))
+                        {
+                            return false;
+                        }
+                        break;
+                    }
+
+                    case token_type::value_string:
+                    {
+                        if (JSON_HEDLEY_UNLIKELY(!sax->string(m_lexer.get_string())))
+                        {
+                            return false;
+                        }
+                        break;
+                    }
+
+                    case token_type::value_unsigned:
+                    {
+                        if (JSON_HEDLEY_UNLIKELY(!sax->number_unsigned(m_lexer.get_number_unsigned())))
+                        {
+                            return false;
+                        }
+                        break;
+                    }
+
+                    case token_type::parse_error:
+                    {
+                        // using "uninitialized" to avoid "expected" message
+                        return sax->parse_error(m_lexer.get_position(),
+                                                m_lexer.get_token_string(),
+                                                parse_error::create(101, m_lexer.get_position(), exception_message(token_type::uninitialized, "value"), nullptr));
+                    }
+
+                    case token_type::uninitialized:
+                    case token_type::end_array:
+                    case token_type::end_object:
+                    case token_type::name_separator:
+                    case token_type::value_separator:
+                    case token_type::end_of_input:
+                    case token_type::literal_or_value:
+                    default: // the last token was unexpected
+                    {
+                        return sax->parse_error(m_lexer.get_position(),
+                                                m_lexer.get_token_string(),
+                                                parse_error::create(101, m_lexer.get_position(), exception_message(token_type::literal_or_value, "value"), nullptr));
+                    }
+                }
+            }
+            else
+            {
+                skip_to_state_evaluation = false;
+            }
+
+            // we reached this line after we successfully parsed a value
+            if (states.empty())
+            {
+                // empty stack: we reached the end of the hierarchy: done
+                return true;
+            }
+
+            if (states.back())  // array
+            {
+                // comma -> next value
+                if (get_token() == token_type::value_separator)
+                {
+                    // parse a new value
+                    get_token();
+                    continue;
+                }
+
+                // closing ]
+                if (JSON_HEDLEY_LIKELY(last_token == token_type::end_array))
+                {
+                    if (JSON_HEDLEY_UNLIKELY(!sax->end_array()))
+                    {
+                        return false;
+                    }
+
+                    // We are done with this array. Before we can parse a
+                    // new value, we need to evaluate the new state first.
+                    // By setting skip_to_state_evaluation to false, we
+                    // are effectively jumping to the beginning of this if.
+                    JSON_ASSERT(!states.empty());
+                    states.pop_back();
+                    skip_to_state_evaluation = true;
+                    continue;
+                }
+
+                return sax->parse_error(m_lexer.get_position(),
+                                        m_lexer.get_token_string(),
+                                        parse_error::create(101, m_lexer.get_position(), exception_message(token_type::end_array, "array"), nullptr));
+            }
+
+            // states.back() is false -> object
+
+            // comma -> next value
+            if (get_token() == token_type::value_separator)
+            {
+                // parse key
+                if (JSON_HEDLEY_UNLIKELY(get_token() != token_type::value_string))
+                {
+                    return sax->parse_error(m_lexer.get_position(),
+                                            m_lexer.get_token_string(),
+                                            parse_error::create(101, m_lexer.get_position(), exception_message(token_type::value_string, "object key"), nullptr));
+                }
+
+                if (JSON_HEDLEY_UNLIKELY(!sax->key(m_lexer.get_string())))
+                {
+                    return false;
+                }
+
+                // parse separator (:)
+                if (JSON_HEDLEY_UNLIKELY(get_token() != token_type::name_separator))
+                {
+                    return sax->parse_error(m_lexer.get_position(),
+                                            m_lexer.get_token_string(),
+                                            parse_error::create(101, m_lexer.get_position(), exception_message(token_type::name_separator, "object separator"), nullptr));
+                }
+
+                // parse values
+                get_token();
+                continue;
+            }
+
+            // closing }
+            if (JSON_HEDLEY_LIKELY(last_token == token_type::end_object))
+            {
+                if (JSON_HEDLEY_UNLIKELY(!sax->end_object()))
+                {
+                    return false;
+                }
+
+                // We are done with this object. Before we can parse a
+                // new value, we need to evaluate the new state first.
+                // By setting skip_to_state_evaluation to false, we
+                // are effectively jumping to the beginning of this if.
+                JSON_ASSERT(!states.empty());
+                states.pop_back();
+                skip_to_state_evaluation = true;
+                continue;
+            }
+
+            return sax->parse_error(m_lexer.get_position(),
+                                    m_lexer.get_token_string(),
+                                    parse_error::create(101, m_lexer.get_position(), exception_message(token_type::end_object, "object"), nullptr));
+        }
+    }
+
+    /// get next token from lexer
+    token_type get_token()
+    {
+        return last_token = m_lexer.scan();
+    }
+
+    std::string exception_message(const token_type expected, const std::string& context)
+    {
+        std::string error_msg = "syntax error ";
+
+        if (!context.empty())
+        {
+            error_msg += concat("while parsing ", context, ' ');
+        }
+
+        error_msg += "- ";
+
+        if (last_token == token_type::parse_error)
+        {
+            error_msg += concat(m_lexer.get_error_message(), "; last read: '",
+                                m_lexer.get_token_string(), '\'');
+        }
+        else
+        {
+            error_msg += concat("unexpected ", lexer_t::token_type_name(last_token));
+        }
+
+        if (expected != token_type::uninitialized)
+        {
+            error_msg += concat("; expected ", lexer_t::token_type_name(expected));
+        }
+
+        return error_msg;
+    }
+
+  private:
+    /// callback function
+    const parser_callback_t<BasicJsonType> callback = nullptr;
+    /// the type of the last read token
+    token_type last_token = token_type::uninitialized;
+    /// the lexer
+    lexer_t m_lexer;
+    /// whether to throw exceptions in case of errors
+    const bool allow_exceptions = true;
+};
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/iterators/internal_iterator.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+// #include <nlohmann/detail/abi_macros.hpp>
+
+// #include <nlohmann/detail/iterators/primitive_iterator.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <cstddef> // ptrdiff_t
+#include <limits>  // numeric_limits
+
+// #include <nlohmann/detail/macro_scope.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+
+/*
+@brief an iterator for primitive JSON types
+
+This class models an iterator for primitive JSON types (boolean, number,
+string). It's only purpose is to allow the iterator/const_iterator classes
+to "iterate" over primitive values. Internally, the iterator is modeled by
+a `difference_type` variable. Value begin_value (`0`) models the begin,
+end_value (`1`) models past the end.
+*/
+class primitive_iterator_t
+{
+  private:
+    using difference_type = std::ptrdiff_t;
+    static constexpr difference_type begin_value = 0;
+    static constexpr difference_type end_value = begin_value + 1;
+
+  JSON_PRIVATE_UNLESS_TESTED:
+    /// iterator as signed integer type
+    difference_type m_it = (std::numeric_limits<std::ptrdiff_t>::min)();
+
+  public:
+    constexpr difference_type get_value() const noexcept
+    {
+        return m_it;
+    }
+
+    /// set iterator to a defined beginning
+    void set_begin() noexcept
+    {
+        m_it = begin_value;
+    }
+
+    /// set iterator to a defined past the end
+    void set_end() noexcept
+    {
+        m_it = end_value;
+    }
+
+    /// return whether the iterator can be dereferenced
+    constexpr bool is_begin() const noexcept
+    {
+        return m_it == begin_value;
+    }
+
+    /// return whether the iterator is at end
+    constexpr bool is_end() const noexcept
+    {
+        return m_it == end_value;
+    }
+
+    friend constexpr bool operator==(primitive_iterator_t lhs, primitive_iterator_t rhs) noexcept
+    {
+        return lhs.m_it == rhs.m_it;
+    }
+
+    friend constexpr bool operator<(primitive_iterator_t lhs, primitive_iterator_t rhs) noexcept
+    {
+        return lhs.m_it < rhs.m_it;
+    }
+
+    primitive_iterator_t operator+(difference_type n) noexcept
+    {
+        auto result = *this;
+        result += n;
+        return result;
+    }
+
+    friend constexpr difference_type operator-(primitive_iterator_t lhs, primitive_iterator_t rhs) noexcept
+    {
+        return lhs.m_it - rhs.m_it;
+    }
+
+    primitive_iterator_t& operator++() noexcept
+    {
+        ++m_it;
+        return *this;
+    }
+
+    primitive_iterator_t operator++(int)& noexcept // NOLINT(cert-dcl21-cpp)
+    {
+        auto result = *this;
+        ++m_it;
+        return result;
+    }
+
+    primitive_iterator_t& operator--() noexcept
+    {
+        --m_it;
+        return *this;
+    }
+
+    primitive_iterator_t operator--(int)& noexcept // NOLINT(cert-dcl21-cpp)
+    {
+        auto result = *this;
+        --m_it;
+        return result;
+    }
+
+    primitive_iterator_t& operator+=(difference_type n) noexcept
+    {
+        m_it += n;
+        return *this;
+    }
+
+    primitive_iterator_t& operator-=(difference_type n) noexcept
+    {
+        m_it -= n;
+        return *this;
+    }
+};
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+
+/*!
+@brief an iterator value
+
+@note This structure could easily be a union, but MSVC currently does not allow
+unions members with complex constructors, see https://github.com/nlohmann/json/pull/105.
+*/
+template<typename BasicJsonType> struct internal_iterator
+{
+    /// iterator for JSON objects
+    typename BasicJsonType::object_t::iterator object_iterator {};
+    /// iterator for JSON arrays
+    typename BasicJsonType::array_t::iterator array_iterator {};
+    /// generic iterator for all other types
+    primitive_iterator_t primitive_iterator {};
+};
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/iterators/iter_impl.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <iterator> // iterator, random_access_iterator_tag, bidirectional_iterator_tag, advance, next
+#include <type_traits> // conditional, is_const, remove_const
+
+// #include <nlohmann/detail/exceptions.hpp>
+
+// #include <nlohmann/detail/iterators/internal_iterator.hpp>
+
+// #include <nlohmann/detail/iterators/primitive_iterator.hpp>
+
+// #include <nlohmann/detail/macro_scope.hpp>
+
+// #include <nlohmann/detail/meta/cpp_future.hpp>
+
+// #include <nlohmann/detail/meta/type_traits.hpp>
+
+// #include <nlohmann/detail/value_t.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+
+// forward declare, to be able to friend it later on
+template<typename IteratorType> class iteration_proxy;
+template<typename IteratorType> class iteration_proxy_value;
+
+/*!
+@brief a template for a bidirectional iterator for the @ref basic_json class
+This class implements a both iterators (iterator and const_iterator) for the
+@ref basic_json class.
+@note An iterator is called *initialized* when a pointer to a JSON value has
+      been set (e.g., by a constructor or a copy assignment). If the iterator is
+      default-constructed, it is *uninitialized* and most methods are undefined.
+      **The library uses assertions to detect calls on uninitialized iterators.**
+@requirement The class satisfies the following concept requirements:
+-
+[BidirectionalIterator](https://en.cppreference.com/w/cpp/named_req/BidirectionalIterator):
+  The iterator that can be moved can be moved in both directions (i.e.
+  incremented and decremented).
+@since version 1.0.0, simplified in version 2.0.9, change to bidirectional
+       iterators in version 3.0.0 (see https://github.com/nlohmann/json/issues/593)
+*/
+template<typename BasicJsonType>
+class iter_impl // NOLINT(cppcoreguidelines-special-member-functions,hicpp-special-member-functions)
+{
+    /// the iterator with BasicJsonType of different const-ness
+    using other_iter_impl = iter_impl<typename std::conditional<std::is_const<BasicJsonType>::value, typename std::remove_const<BasicJsonType>::type, const BasicJsonType>::type>;
+    /// allow basic_json to access private members
+    friend other_iter_impl;
+    friend BasicJsonType;
+    friend iteration_proxy<iter_impl>;
+    friend iteration_proxy_value<iter_impl>;
+
+    using object_t = typename BasicJsonType::object_t;
+    using array_t = typename BasicJsonType::array_t;
+    // make sure BasicJsonType is basic_json or const basic_json
+    static_assert(is_basic_json<typename std::remove_const<BasicJsonType>::type>::value,
+                  "iter_impl only accepts (const) basic_json");
+    // superficial check for the LegacyBidirectionalIterator named requirement
+    static_assert(std::is_base_of<std::bidirectional_iterator_tag, std::bidirectional_iterator_tag>::value
+                  &&  std::is_base_of<std::bidirectional_iterator_tag, typename std::iterator_traits<typename array_t::iterator>::iterator_category>::value,
+                  "basic_json iterator assumes array and object type iterators satisfy the LegacyBidirectionalIterator named requirement.");
+
+  public:
+    /// The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17.
+    /// The C++ Standard has never required user-defined iterators to derive from std::iterator.
+    /// A user-defined iterator should provide publicly accessible typedefs named
+    /// iterator_category, value_type, difference_type, pointer, and reference.
+    /// Note that value_type is required to be non-const, even for constant iterators.
+    using iterator_category = std::bidirectional_iterator_tag;
+
+    /// the type of the values when the iterator is dereferenced
+    using value_type = typename BasicJsonType::value_type;
+    /// a type to represent differences between iterators
+    using difference_type = typename BasicJsonType::difference_type;
+    /// defines a pointer to the type iterated over (value_type)
+    using pointer = typename std::conditional<std::is_const<BasicJsonType>::value,
+          typename BasicJsonType::const_pointer,
+          typename BasicJsonType::pointer>::type;
+    /// defines a reference to the type iterated over (value_type)
+    using reference =
+        typename std::conditional<std::is_const<BasicJsonType>::value,
+        typename BasicJsonType::const_reference,
+        typename BasicJsonType::reference>::type;
+
+    iter_impl() = default;
+    ~iter_impl() = default;
+    iter_impl(iter_impl&&) noexcept = default;
+    iter_impl& operator=(iter_impl&&) noexcept = default;
+
+    /*!
+    @brief constructor for a given JSON instance
+    @param[in] object  pointer to a JSON object for this iterator
+    @pre object != nullptr
+    @post The iterator is initialized; i.e. `m_object != nullptr`.
+    */
+    explicit iter_impl(pointer object) noexcept : m_object(object)
+    {
+        JSON_ASSERT(m_object != nullptr);
+
+        switch (m_object->m_type)
+        {
+            case value_t::object:
+            {
+                m_it.object_iterator = typename object_t::iterator();
+                break;
+            }
+
+            case value_t::array:
+            {
+                m_it.array_iterator = typename array_t::iterator();
+                break;
+            }
+
+            case value_t::null:
+            case value_t::string:
+            case value_t::boolean:
+            case value_t::number_integer:
+            case value_t::number_unsigned:
+            case value_t::number_float:
+            case value_t::binary:
+            case value_t::discarded:
+            default:
+            {
+                m_it.primitive_iterator = primitive_iterator_t();
+                break;
+            }
+        }
+    }
+
+    /*!
+    @note The conventional copy constructor and copy assignment are implicitly
+          defined. Combined with the following converting constructor and
+          assignment, they support: (1) copy from iterator to iterator, (2)
+          copy from const iterator to const iterator, and (3) conversion from
+          iterator to const iterator. However conversion from const iterator
+          to iterator is not defined.
+    */
+
+    /*!
+    @brief const copy constructor
+    @param[in] other const iterator to copy from
+    @note This copy constructor had to be defined explicitly to circumvent a bug
+          occurring on msvc v19.0 compiler (VS 2015) debug build. For more
+          information refer to: https://github.com/nlohmann/json/issues/1608
+    */
+    iter_impl(const iter_impl<const BasicJsonType>& other) noexcept
+        : m_object(other.m_object), m_it(other.m_it)
+    {}
+
+    /*!
+    @brief converting assignment
+    @param[in] other const iterator to copy from
+    @return const/non-const iterator
+    @note It is not checked whether @a other is initialized.
+    */
+    iter_impl& operator=(const iter_impl<const BasicJsonType>& other) noexcept
+    {
+        if (&other != this)
+        {
+            m_object = other.m_object;
+            m_it = other.m_it;
+        }
+        return *this;
+    }
+
+    /*!
+    @brief converting constructor
+    @param[in] other  non-const iterator to copy from
+    @note It is not checked whether @a other is initialized.
+    */
+    iter_impl(const iter_impl<typename std::remove_const<BasicJsonType>::type>& other) noexcept
+        : m_object(other.m_object), m_it(other.m_it)
+    {}
+
+    /*!
+    @brief converting assignment
+    @param[in] other  non-const iterator to copy from
+    @return const/non-const iterator
+    @note It is not checked whether @a other is initialized.
+    */
+    iter_impl& operator=(const iter_impl<typename std::remove_const<BasicJsonType>::type>& other) noexcept // NOLINT(cert-oop54-cpp)
+    {
+        m_object = other.m_object;
+        m_it = other.m_it;
+        return *this;
+    }
+
+  JSON_PRIVATE_UNLESS_TESTED:
+    /*!
+    @brief set the iterator to the first value
+    @pre The iterator is initialized; i.e. `m_object != nullptr`.
+    */
+    void set_begin() noexcept
+    {
+        JSON_ASSERT(m_object != nullptr);
+
+        switch (m_object->m_type)
+        {
+            case value_t::object:
+            {
+                m_it.object_iterator = m_object->m_value.object->begin();
+                break;
+            }
+
+            case value_t::array:
+            {
+                m_it.array_iterator = m_object->m_value.array->begin();
+                break;
+            }
+
+            case value_t::null:
+            {
+                // set to end so begin()==end() is true: null is empty
+                m_it.primitive_iterator.set_end();
+                break;
+            }
+
+            case value_t::string:
+            case value_t::boolean:
+            case value_t::number_integer:
+            case value_t::number_unsigned:
+            case value_t::number_float:
+            case value_t::binary:
+            case value_t::discarded:
+            default:
+            {
+                m_it.primitive_iterator.set_begin();
+                break;
+            }
+        }
+    }
+
+    /*!
+    @brief set the iterator past the last value
+    @pre The iterator is initialized; i.e. `m_object != nullptr`.
+    */
+    void set_end() noexcept
+    {
+        JSON_ASSERT(m_object != nullptr);
+
+        switch (m_object->m_type)
+        {
+            case value_t::object:
+            {
+                m_it.object_iterator = m_object->m_value.object->end();
+                break;
+            }
+
+            case value_t::array:
+            {
+                m_it.array_iterator = m_object->m_value.array->end();
+                break;
+            }
+
+            case value_t::null:
+            case value_t::string:
+            case value_t::boolean:
+            case value_t::number_integer:
+            case value_t::number_unsigned:
+            case value_t::number_float:
+            case value_t::binary:
+            case value_t::discarded:
+            default:
+            {
+                m_it.primitive_iterator.set_end();
+                break;
+            }
+        }
+    }
+
+  public:
+    /*!
+    @brief return a reference to the value pointed to by the iterator
+    @pre The iterator is initialized; i.e. `m_object != nullptr`.
+    */
+    reference operator*() const
+    {
+        JSON_ASSERT(m_object != nullptr);
+
+        switch (m_object->m_type)
+        {
+            case value_t::object:
+            {
+                JSON_ASSERT(m_it.object_iterator != m_object->m_value.object->end());
+                return m_it.object_iterator->second;
+            }
+
+            case value_t::array:
+            {
+                JSON_ASSERT(m_it.array_iterator != m_object->m_value.array->end());
+                return *m_it.array_iterator;
+            }
+
+            case value_t::null:
+                JSON_THROW(invalid_iterator::create(214, "cannot get value", m_object));
+
+            case value_t::string:
+            case value_t::boolean:
+            case value_t::number_integer:
+            case value_t::number_unsigned:
+            case value_t::number_float:
+            case value_t::binary:
+            case value_t::discarded:
+            default:
+            {
+                if (JSON_HEDLEY_LIKELY(m_it.primitive_iterator.is_begin()))
+                {
+                    return *m_object;
+                }
+
+                JSON_THROW(invalid_iterator::create(214, "cannot get value", m_object));
+            }
+        }
+    }
+
+    /*!
+    @brief dereference the iterator
+    @pre The iterator is initialized; i.e. `m_object != nullptr`.
+    */
+    pointer operator->() const
+    {
+        JSON_ASSERT(m_object != nullptr);
+
+        switch (m_object->m_type)
+        {
+            case value_t::object:
+            {
+                JSON_ASSERT(m_it.object_iterator != m_object->m_value.object->end());
+                return &(m_it.object_iterator->second);
+            }
+
+            case value_t::array:
+            {
+                JSON_ASSERT(m_it.array_iterator != m_object->m_value.array->end());
+                return &*m_it.array_iterator;
+            }
+
+            case value_t::null:
+            case value_t::string:
+            case value_t::boolean:
+            case value_t::number_integer:
+            case value_t::number_unsigned:
+            case value_t::number_float:
+            case value_t::binary:
+            case value_t::discarded:
+            default:
+            {
+                if (JSON_HEDLEY_LIKELY(m_it.primitive_iterator.is_begin()))
+                {
+                    return m_object;
+                }
+
+                JSON_THROW(invalid_iterator::create(214, "cannot get value", m_object));
+            }
+        }
+    }
+
+    /*!
+    @brief post-increment (it++)
+    @pre The iterator is initialized; i.e. `m_object != nullptr`.
+    */
+    iter_impl operator++(int)& // NOLINT(cert-dcl21-cpp)
+    {
+        auto result = *this;
+        ++(*this);
+        return result;
+    }
+
+    /*!
+    @brief pre-increment (++it)
+    @pre The iterator is initialized; i.e. `m_object != nullptr`.
+    */
+    iter_impl& operator++()
+    {
+        JSON_ASSERT(m_object != nullptr);
+
+        switch (m_object->m_type)
+        {
+            case value_t::object:
+            {
+                std::advance(m_it.object_iterator, 1);
+                break;
+            }
+
+            case value_t::array:
+            {
+                std::advance(m_it.array_iterator, 1);
+                break;
+            }
+
+            case value_t::null:
+            case value_t::string:
+            case value_t::boolean:
+            case value_t::number_integer:
+            case value_t::number_unsigned:
+            case value_t::number_float:
+            case value_t::binary:
+            case value_t::discarded:
+            default:
+            {
+                ++m_it.primitive_iterator;
+                break;
+            }
+        }
+
+        return *this;
+    }
+
+    /*!
+    @brief post-decrement (it--)
+    @pre The iterator is initialized; i.e. `m_object != nullptr`.
+    */
+    iter_impl operator--(int)& // NOLINT(cert-dcl21-cpp)
+    {
+        auto result = *this;
+        --(*this);
+        return result;
+    }
+
+    /*!
+    @brief pre-decrement (--it)
+    @pre The iterator is initialized; i.e. `m_object != nullptr`.
+    */
+    iter_impl& operator--()
+    {
+        JSON_ASSERT(m_object != nullptr);
+
+        switch (m_object->m_type)
+        {
+            case value_t::object:
+            {
+                std::advance(m_it.object_iterator, -1);
+                break;
+            }
+
+            case value_t::array:
+            {
+                std::advance(m_it.array_iterator, -1);
+                break;
+            }
+
+            case value_t::null:
+            case value_t::string:
+            case value_t::boolean:
+            case value_t::number_integer:
+            case value_t::number_unsigned:
+            case value_t::number_float:
+            case value_t::binary:
+            case value_t::discarded:
+            default:
+            {
+                --m_it.primitive_iterator;
+                break;
+            }
+        }
+
+        return *this;
+    }
+
+    /*!
+    @brief comparison: equal
+    @pre The iterator is initialized; i.e. `m_object != nullptr`.
+    */
+    template < typename IterImpl, detail::enable_if_t < (std::is_same<IterImpl, iter_impl>::value || std::is_same<IterImpl, other_iter_impl>::value), std::nullptr_t > = nullptr >
+    bool operator==(const IterImpl& other) const
+    {
+        // if objects are not the same, the comparison is undefined
+        if (JSON_HEDLEY_UNLIKELY(m_object != other.m_object))
+        {
+            JSON_THROW(invalid_iterator::create(212, "cannot compare iterators of different containers", m_object));
+        }
+
+        JSON_ASSERT(m_object != nullptr);
+
+        switch (m_object->m_type)
+        {
+            case value_t::object:
+                return (m_it.object_iterator == other.m_it.object_iterator);
+
+            case value_t::array:
+                return (m_it.array_iterator == other.m_it.array_iterator);
+
+            case value_t::null:
+            case value_t::string:
+            case value_t::boolean:
+            case value_t::number_integer:
+            case value_t::number_unsigned:
+            case value_t::number_float:
+            case value_t::binary:
+            case value_t::discarded:
+            default:
+                return (m_it.primitive_iterator == other.m_it.primitive_iterator);
+        }
+    }
+
+    /*!
+    @brief comparison: not equal
+    @pre The iterator is initialized; i.e. `m_object != nullptr`.
+    */
+    template < typename IterImpl, detail::enable_if_t < (std::is_same<IterImpl, iter_impl>::value || std::is_same<IterImpl, other_iter_impl>::value), std::nullptr_t > = nullptr >
+    bool operator!=(const IterImpl& other) const
+    {
+        return !operator==(other);
+    }
+
+    /*!
+    @brief comparison: smaller
+    @pre The iterator is initialized; i.e. `m_object != nullptr`.
+    */
+    bool operator<(const iter_impl& other) const
+    {
+        // if objects are not the same, the comparison is undefined
+        if (JSON_HEDLEY_UNLIKELY(m_object != other.m_object))
+        {
+            JSON_THROW(invalid_iterator::create(212, "cannot compare iterators of different containers", m_object));
+        }
+
+        JSON_ASSERT(m_object != nullptr);
+
+        switch (m_object->m_type)
+        {
+            case value_t::object:
+                JSON_THROW(invalid_iterator::create(213, "cannot compare order of object iterators", m_object));
+
+            case value_t::array:
+                return (m_it.array_iterator < other.m_it.array_iterator);
+
+            case value_t::null:
+            case value_t::string:
+            case value_t::boolean:
+            case value_t::number_integer:
+            case value_t::number_unsigned:
+            case value_t::number_float:
+            case value_t::binary:
+            case value_t::discarded:
+            default:
+                return (m_it.primitive_iterator < other.m_it.primitive_iterator);
+        }
+    }
+
+    /*!
+    @brief comparison: less than or equal
+    @pre The iterator is initialized; i.e. `m_object != nullptr`.
+    */
+    bool operator<=(const iter_impl& other) const
+    {
+        return !other.operator < (*this);
+    }
+
+    /*!
+    @brief comparison: greater than
+    @pre The iterator is initialized; i.e. `m_object != nullptr`.
+    */
+    bool operator>(const iter_impl& other) const
+    {
+        return !operator<=(other);
+    }
+
+    /*!
+    @brief comparison: greater than or equal
+    @pre The iterator is initialized; i.e. `m_object != nullptr`.
+    */
+    bool operator>=(const iter_impl& other) const
+    {
+        return !operator<(other);
+    }
+
+    /*!
+    @brief add to iterator
+    @pre The iterator is initialized; i.e. `m_object != nullptr`.
+    */
+    iter_impl& operator+=(difference_type i)
+    {
+        JSON_ASSERT(m_object != nullptr);
+
+        switch (m_object->m_type)
+        {
+            case value_t::object:
+                JSON_THROW(invalid_iterator::create(209, "cannot use offsets with object iterators", m_object));
+
+            case value_t::array:
+            {
+                std::advance(m_it.array_iterator, i);
+                break;
+            }
+
+            case value_t::null:
+            case value_t::string:
+            case value_t::boolean:
+            case value_t::number_integer:
+            case value_t::number_unsigned:
+            case value_t::number_float:
+            case value_t::binary:
+            case value_t::discarded:
+            default:
+            {
+                m_it.primitive_iterator += i;
+                break;
+            }
+        }
+
+        return *this;
+    }
+
+    /*!
+    @brief subtract from iterator
+    @pre The iterator is initialized; i.e. `m_object != nullptr`.
+    */
+    iter_impl& operator-=(difference_type i)
+    {
+        return operator+=(-i);
+    }
+
+    /*!
+    @brief add to iterator
+    @pre The iterator is initialized; i.e. `m_object != nullptr`.
+    */
+    iter_impl operator+(difference_type i) const
+    {
+        auto result = *this;
+        result += i;
+        return result;
+    }
+
+    /*!
+    @brief addition of distance and iterator
+    @pre The iterator is initialized; i.e. `m_object != nullptr`.
+    */
+    friend iter_impl operator+(difference_type i, const iter_impl& it)
+    {
+        auto result = it;
+        result += i;
+        return result;
+    }
+
+    /*!
+    @brief subtract from iterator
+    @pre The iterator is initialized; i.e. `m_object != nullptr`.
+    */
+    iter_impl operator-(difference_type i) const
+    {
+        auto result = *this;
+        result -= i;
+        return result;
+    }
+
+    /*!
+    @brief return difference
+    @pre The iterator is initialized; i.e. `m_object != nullptr`.
+    */
+    difference_type operator-(const iter_impl& other) const
+    {
+        JSON_ASSERT(m_object != nullptr);
+
+        switch (m_object->m_type)
+        {
+            case value_t::object:
+                JSON_THROW(invalid_iterator::create(209, "cannot use offsets with object iterators", m_object));
+
+            case value_t::array:
+                return m_it.array_iterator - other.m_it.array_iterator;
+
+            case value_t::null:
+            case value_t::string:
+            case value_t::boolean:
+            case value_t::number_integer:
+            case value_t::number_unsigned:
+            case value_t::number_float:
+            case value_t::binary:
+            case value_t::discarded:
+            default:
+                return m_it.primitive_iterator - other.m_it.primitive_iterator;
+        }
+    }
+
+    /*!
+    @brief access to successor
+    @pre The iterator is initialized; i.e. `m_object != nullptr`.
+    */
+    reference operator[](difference_type n) const
+    {
+        JSON_ASSERT(m_object != nullptr);
+
+        switch (m_object->m_type)
+        {
+            case value_t::object:
+                JSON_THROW(invalid_iterator::create(208, "cannot use operator[] for object iterators", m_object));
+
+            case value_t::array:
+                return *std::next(m_it.array_iterator, n);
+
+            case value_t::null:
+                JSON_THROW(invalid_iterator::create(214, "cannot get value", m_object));
+
+            case value_t::string:
+            case value_t::boolean:
+            case value_t::number_integer:
+            case value_t::number_unsigned:
+            case value_t::number_float:
+            case value_t::binary:
+            case value_t::discarded:
+            default:
+            {
+                if (JSON_HEDLEY_LIKELY(m_it.primitive_iterator.get_value() == -n))
+                {
+                    return *m_object;
+                }
+
+                JSON_THROW(invalid_iterator::create(214, "cannot get value", m_object));
+            }
+        }
+    }
+
+    /*!
+    @brief return the key of an object iterator
+    @pre The iterator is initialized; i.e. `m_object != nullptr`.
+    */
+    const typename object_t::key_type& key() const
+    {
+        JSON_ASSERT(m_object != nullptr);
+
+        if (JSON_HEDLEY_LIKELY(m_object->is_object()))
+        {
+            return m_it.object_iterator->first;
+        }
+
+        JSON_THROW(invalid_iterator::create(207, "cannot use key() for non-object iterators", m_object));
+    }
+
+    /*!
+    @brief return the value of an iterator
+    @pre The iterator is initialized; i.e. `m_object != nullptr`.
+    */
+    reference value() const
+    {
+        return operator*();
+    }
+
+  JSON_PRIVATE_UNLESS_TESTED:
+    /// associated JSON instance
+    pointer m_object = nullptr;
+    /// the actual iterator of the associated instance
+    internal_iterator<typename std::remove_const<BasicJsonType>::type> m_it {};
+};
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/iterators/iteration_proxy.hpp>
+
+// #include <nlohmann/detail/iterators/json_reverse_iterator.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <cstddef> // ptrdiff_t
+#include <iterator> // reverse_iterator
+#include <utility> // declval
+
+// #include <nlohmann/detail/abi_macros.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+
+//////////////////////
+// reverse_iterator //
+//////////////////////
+
+/*!
+@brief a template for a reverse iterator class
+
+@tparam Base the base iterator type to reverse. Valid types are @ref
+iterator (to create @ref reverse_iterator) and @ref const_iterator (to
+create @ref const_reverse_iterator).
+
+@requirement The class satisfies the following concept requirements:
+-
+[BidirectionalIterator](https://en.cppreference.com/w/cpp/named_req/BidirectionalIterator):
+  The iterator that can be moved can be moved in both directions (i.e.
+  incremented and decremented).
+- [OutputIterator](https://en.cppreference.com/w/cpp/named_req/OutputIterator):
+  It is possible to write to the pointed-to element (only if @a Base is
+  @ref iterator).
+
+@since version 1.0.0
+*/
+template<typename Base>
+class json_reverse_iterator : public std::reverse_iterator<Base>
+{
+  public:
+    using difference_type = std::ptrdiff_t;
+    /// shortcut to the reverse iterator adapter
+    using base_iterator = std::reverse_iterator<Base>;
+    /// the reference type for the pointed-to element
+    using reference = typename Base::reference;
+
+    /// create reverse iterator from iterator
+    explicit json_reverse_iterator(const typename base_iterator::iterator_type& it) noexcept
+        : base_iterator(it) {}
+
+    /// create reverse iterator from base class
+    explicit json_reverse_iterator(const base_iterator& it) noexcept : base_iterator(it) {}
+
+    /// post-increment (it++)
+    json_reverse_iterator operator++(int)& // NOLINT(cert-dcl21-cpp)
+    {
+        return static_cast<json_reverse_iterator>(base_iterator::operator++(1));
+    }
+
+    /// pre-increment (++it)
+    json_reverse_iterator& operator++()
+    {
+        return static_cast<json_reverse_iterator&>(base_iterator::operator++());
+    }
+
+    /// post-decrement (it--)
+    json_reverse_iterator operator--(int)& // NOLINT(cert-dcl21-cpp)
+    {
+        return static_cast<json_reverse_iterator>(base_iterator::operator--(1));
+    }
+
+    /// pre-decrement (--it)
+    json_reverse_iterator& operator--()
+    {
+        return static_cast<json_reverse_iterator&>(base_iterator::operator--());
+    }
+
+    /// add to iterator
+    json_reverse_iterator& operator+=(difference_type i)
+    {
+        return static_cast<json_reverse_iterator&>(base_iterator::operator+=(i));
+    }
+
+    /// add to iterator
+    json_reverse_iterator operator+(difference_type i) const
+    {
+        return static_cast<json_reverse_iterator>(base_iterator::operator+(i));
+    }
+
+    /// subtract from iterator
+    json_reverse_iterator operator-(difference_type i) const
+    {
+        return static_cast<json_reverse_iterator>(base_iterator::operator-(i));
+    }
+
+    /// return difference
+    difference_type operator-(const json_reverse_iterator& other) const
+    {
+        return base_iterator(*this) - base_iterator(other);
+    }
+
+    /// access to successor
+    reference operator[](difference_type n) const
+    {
+        return *(this->operator+(n));
+    }
+
+    /// return the key of an object iterator
+    auto key() const -> decltype(std::declval<Base>().key())
+    {
+        auto it = --this->base();
+        return it.key();
+    }
+
+    /// return the value of an iterator
+    reference value() const
+    {
+        auto it = --this->base();
+        return it.operator * ();
+    }
+};
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/iterators/primitive_iterator.hpp>
+
+// #include <nlohmann/detail/json_custom_base_class.hpp>
+
+
+#include <type_traits> // conditional, is_same
+
+// #include <nlohmann/detail/abi_macros.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+
+/*!
+@brief Default base class of the @ref basic_json class.
+
+So that the correct implementations of the copy / move ctors / assign operators
+of @ref basic_json do not require complex case distinctions
+(no base class / custom base class used as customization point),
+@ref basic_json always has a base class.
+By default, this class is used because it is empty and thus has no effect
+on the behavior of @ref basic_json.
+*/
+struct json_default_base {};
+
+template<class T>
+using json_base_class = typename std::conditional <
+                        std::is_same<T, void>::value,
+                        json_default_base,
+                        T
+                        >::type;
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/json_pointer.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <algorithm> // all_of
+#include <cctype> // isdigit
+#include <cerrno> // errno, ERANGE
+#include <cstdlib> // strtoull
+#ifndef JSON_NO_IO
+    #include <iosfwd> // ostream
+#endif  // JSON_NO_IO
+#include <limits> // max
+#include <numeric> // accumulate
+#include <string> // string
+#include <utility> // move
+#include <vector> // vector
+
+// #include <nlohmann/detail/exceptions.hpp>
+
+// #include <nlohmann/detail/macro_scope.hpp>
+
+// #include <nlohmann/detail/string_concat.hpp>
+
+// #include <nlohmann/detail/string_escape.hpp>
+
+// #include <nlohmann/detail/value_t.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+
+/// @brief JSON Pointer defines a string syntax for identifying a specific value within a JSON document
+/// @sa https://json.nlohmann.me/api/json_pointer/
+template<typename RefStringType>
+class json_pointer
+{
+    // allow basic_json to access private members
+    NLOHMANN_BASIC_JSON_TPL_DECLARATION
+    friend class basic_json;
+
+    template<typename>
+    friend class json_pointer;
+
+    template<typename T>
+    struct string_t_helper
+    {
+        using type = T;
+    };
+
+    NLOHMANN_BASIC_JSON_TPL_DECLARATION
+    struct string_t_helper<NLOHMANN_BASIC_JSON_TPL>
+    {
+        using type = StringType;
+    };
+
+  public:
+    // for backwards compatibility accept BasicJsonType
+    using string_t = typename string_t_helper<RefStringType>::type;
+
+    /// @brief create JSON pointer
+    /// @sa https://json.nlohmann.me/api/json_pointer/json_pointer/
+    explicit json_pointer(const string_t& s = "")
+        : reference_tokens(split(s))
+    {}
+
+    /// @brief return a string representation of the JSON pointer
+    /// @sa https://json.nlohmann.me/api/json_pointer/to_string/
+    string_t to_string() const
+    {
+        return std::accumulate(reference_tokens.begin(), reference_tokens.end(),
+                               string_t{},
+                               [](const string_t& a, const string_t& b)
+        {
+            return detail::concat(a, '/', detail::escape(b));
+        });
+    }
+
+    /// @brief return a string representation of the JSON pointer
+    /// @sa https://json.nlohmann.me/api/json_pointer/operator_string/
+    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, to_string())
+    operator string_t() const
+    {
+        return to_string();
+    }
+
+#ifndef JSON_NO_IO
+    /// @brief write string representation of the JSON pointer to stream
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_ltlt/
+    friend std::ostream& operator<<(std::ostream& o, const json_pointer& ptr)
+    {
+        o << ptr.to_string();
+        return o;
+    }
+#endif
+
+    /// @brief append another JSON pointer at the end of this JSON pointer
+    /// @sa https://json.nlohmann.me/api/json_pointer/operator_slasheq/
+    json_pointer& operator/=(const json_pointer& ptr)
+    {
+        reference_tokens.insert(reference_tokens.end(),
+                                ptr.reference_tokens.begin(),
+                                ptr.reference_tokens.end());
+        return *this;
+    }
+
+    /// @brief append an unescaped reference token at the end of this JSON pointer
+    /// @sa https://json.nlohmann.me/api/json_pointer/operator_slasheq/
+    json_pointer& operator/=(string_t token)
+    {
+        push_back(std::move(token));
+        return *this;
+    }
+
+    /// @brief append an array index at the end of this JSON pointer
+    /// @sa https://json.nlohmann.me/api/json_pointer/operator_slasheq/
+    json_pointer& operator/=(std::size_t array_idx)
+    {
+        return *this /= std::to_string(array_idx);
+    }
+
+    /// @brief create a new JSON pointer by appending the right JSON pointer at the end of the left JSON pointer
+    /// @sa https://json.nlohmann.me/api/json_pointer/operator_slash/
+    friend json_pointer operator/(const json_pointer& lhs,
+                                  const json_pointer& rhs)
+    {
+        return json_pointer(lhs) /= rhs;
+    }
+
+    /// @brief create a new JSON pointer by appending the unescaped token at the end of the JSON pointer
+    /// @sa https://json.nlohmann.me/api/json_pointer/operator_slash/
+    friend json_pointer operator/(const json_pointer& lhs, string_t token) // NOLINT(performance-unnecessary-value-param)
+    {
+        return json_pointer(lhs) /= std::move(token);
+    }
+
+    /// @brief create a new JSON pointer by appending the array-index-token at the end of the JSON pointer
+    /// @sa https://json.nlohmann.me/api/json_pointer/operator_slash/
+    friend json_pointer operator/(const json_pointer& lhs, std::size_t array_idx)
+    {
+        return json_pointer(lhs) /= array_idx;
+    }
+
+    /// @brief returns the parent of this JSON pointer
+    /// @sa https://json.nlohmann.me/api/json_pointer/parent_pointer/
+    json_pointer parent_pointer() const
+    {
+        if (empty())
+        {
+            return *this;
+        }
+
+        json_pointer res = *this;
+        res.pop_back();
+        return res;
+    }
+
+    /// @brief remove last reference token
+    /// @sa https://json.nlohmann.me/api/json_pointer/pop_back/
+    void pop_back()
+    {
+        if (JSON_HEDLEY_UNLIKELY(empty()))
+        {
+            JSON_THROW(detail::out_of_range::create(405, "JSON pointer has no parent", nullptr));
+        }
+
+        reference_tokens.pop_back();
+    }
+
+    /// @brief return last reference token
+    /// @sa https://json.nlohmann.me/api/json_pointer/back/
+    const string_t& back() const
+    {
+        if (JSON_HEDLEY_UNLIKELY(empty()))
+        {
+            JSON_THROW(detail::out_of_range::create(405, "JSON pointer has no parent", nullptr));
+        }
+
+        return reference_tokens.back();
+    }
+
+    /// @brief append an unescaped token at the end of the reference pointer
+    /// @sa https://json.nlohmann.me/api/json_pointer/push_back/
+    void push_back(const string_t& token)
+    {
+        reference_tokens.push_back(token);
+    }
+
+    /// @brief append an unescaped token at the end of the reference pointer
+    /// @sa https://json.nlohmann.me/api/json_pointer/push_back/
+    void push_back(string_t&& token)
+    {
+        reference_tokens.push_back(std::move(token));
+    }
+
+    /// @brief return whether pointer points to the root document
+    /// @sa https://json.nlohmann.me/api/json_pointer/empty/
+    bool empty() const noexcept
+    {
+        return reference_tokens.empty();
+    }
+
+  private:
+    /*!
+    @param[in] s  reference token to be converted into an array index
+
+    @return integer representation of @a s
+
+    @throw parse_error.106  if an array index begins with '0'
+    @throw parse_error.109  if an array index begins not with a digit
+    @throw out_of_range.404 if string @a s could not be converted to an integer
+    @throw out_of_range.410 if an array index exceeds size_type
+    */
+    template<typename BasicJsonType>
+    static typename BasicJsonType::size_type array_index(const string_t& s)
+    {
+        using size_type = typename BasicJsonType::size_type;
+
+        // error condition (cf. RFC 6901, Sect. 4)
+        if (JSON_HEDLEY_UNLIKELY(s.size() > 1 && s[0] == '0'))
+        {
+            JSON_THROW(detail::parse_error::create(106, 0, detail::concat("array index '", s, "' must not begin with '0'"), nullptr));
+        }
+
+        // error condition (cf. RFC 6901, Sect. 4)
+        if (JSON_HEDLEY_UNLIKELY(s.size() > 1 && !(s[0] >= '1' && s[0] <= '9')))
+        {
+            JSON_THROW(detail::parse_error::create(109, 0, detail::concat("array index '", s, "' is not a number"), nullptr));
+        }
+
+        const char* p = s.c_str();
+        char* p_end = nullptr;
+        errno = 0; // strtoull doesn't reset errno
+        const unsigned long long res = std::strtoull(p, &p_end, 10); // NOLINT(runtime/int)
+        if (p == p_end // invalid input or empty string
+                || errno == ERANGE // out of range
+                || JSON_HEDLEY_UNLIKELY(static_cast<std::size_t>(p_end - p) != s.size())) // incomplete read
+        {
+            JSON_THROW(detail::out_of_range::create(404, detail::concat("unresolved reference token '", s, "'"), nullptr));
+        }
+
+        // only triggered on special platforms (like 32bit), see also
+        // https://github.com/nlohmann/json/pull/2203
+        if (res >= static_cast<unsigned long long>((std::numeric_limits<size_type>::max)()))  // NOLINT(runtime/int)
+        {
+            JSON_THROW(detail::out_of_range::create(410, detail::concat("array index ", s, " exceeds size_type"), nullptr));   // LCOV_EXCL_LINE
+        }
+
+        return static_cast<size_type>(res);
+    }
+
+  JSON_PRIVATE_UNLESS_TESTED:
+    json_pointer top() const
+    {
+        if (JSON_HEDLEY_UNLIKELY(empty()))
+        {
+            JSON_THROW(detail::out_of_range::create(405, "JSON pointer has no parent", nullptr));
+        }
+
+        json_pointer result = *this;
+        result.reference_tokens = {reference_tokens[0]};
+        return result;
+    }
+
+  private:
+    /*!
+    @brief create and return a reference to the pointed to value
+
+    @complexity Linear in the number of reference tokens.
+
+    @throw parse_error.109 if array index is not a number
+    @throw type_error.313 if value cannot be unflattened
+    */
+    template<typename BasicJsonType>
+    BasicJsonType& get_and_create(BasicJsonType& j) const
+    {
+        auto* result = &j;
+
+        // in case no reference tokens exist, return a reference to the JSON value
+        // j which will be overwritten by a primitive value
+        for (const auto& reference_token : reference_tokens)
+        {
+            switch (result->type())
+            {
+                case detail::value_t::null:
+                {
+                    if (reference_token == "0")
+                    {
+                        // start a new array if reference token is 0
+                        result = &result->operator[](0);
+                    }
+                    else
+                    {
+                        // start a new object otherwise
+                        result = &result->operator[](reference_token);
+                    }
+                    break;
+                }
+
+                case detail::value_t::object:
+                {
+                    // create an entry in the object
+                    result = &result->operator[](reference_token);
+                    break;
+                }
+
+                case detail::value_t::array:
+                {
+                    // create an entry in the array
+                    result = &result->operator[](array_index<BasicJsonType>(reference_token));
+                    break;
+                }
+
+                /*
+                The following code is only reached if there exists a reference
+                token _and_ the current value is primitive. In this case, we have
+                an error situation, because primitive values may only occur as
+                single value; that is, with an empty list of reference tokens.
+                */
+                case detail::value_t::string:
+                case detail::value_t::boolean:
+                case detail::value_t::number_integer:
+                case detail::value_t::number_unsigned:
+                case detail::value_t::number_float:
+                case detail::value_t::binary:
+                case detail::value_t::discarded:
+                default:
+                    JSON_THROW(detail::type_error::create(313, "invalid value to unflatten", &j));
+            }
+        }
+
+        return *result;
+    }
+
+    /*!
+    @brief return a reference to the pointed to value
+
+    @note This version does not throw if a value is not present, but tries to
+          create nested values instead. For instance, calling this function
+          with pointer `"/this/that"` on a null value is equivalent to calling
+          `operator[]("this").operator[]("that")` on that value, effectively
+          changing the null value to an object.
+
+    @param[in] ptr  a JSON value
+
+    @return reference to the JSON value pointed to by the JSON pointer
+
+    @complexity Linear in the length of the JSON pointer.
+
+    @throw parse_error.106   if an array index begins with '0'
+    @throw parse_error.109   if an array index was not a number
+    @throw out_of_range.404  if the JSON pointer can not be resolved
+    */
+    template<typename BasicJsonType>
+    BasicJsonType& get_unchecked(BasicJsonType* ptr) const
+    {
+        for (const auto& reference_token : reference_tokens)
+        {
+            // convert null values to arrays or objects before continuing
+            if (ptr->is_null())
+            {
+                // check if reference token is a number
+                const bool nums =
+                    std::all_of(reference_token.begin(), reference_token.end(),
+                                [](const unsigned char x)
+                {
+                    return std::isdigit(x);
+                });
+
+                // change value to array for numbers or "-" or to object otherwise
+                *ptr = (nums || reference_token == "-")
+                       ? detail::value_t::array
+                       : detail::value_t::object;
+            }
+
+            switch (ptr->type())
+            {
+                case detail::value_t::object:
+                {
+                    // use unchecked object access
+                    ptr = &ptr->operator[](reference_token);
+                    break;
+                }
+
+                case detail::value_t::array:
+                {
+                    if (reference_token == "-")
+                    {
+                        // explicitly treat "-" as index beyond the end
+                        ptr = &ptr->operator[](ptr->m_value.array->size());
+                    }
+                    else
+                    {
+                        // convert array index to number; unchecked access
+                        ptr = &ptr->operator[](array_index<BasicJsonType>(reference_token));
+                    }
+                    break;
+                }
+
+                case detail::value_t::null:
+                case detail::value_t::string:
+                case detail::value_t::boolean:
+                case detail::value_t::number_integer:
+                case detail::value_t::number_unsigned:
+                case detail::value_t::number_float:
+                case detail::value_t::binary:
+                case detail::value_t::discarded:
+                default:
+                    JSON_THROW(detail::out_of_range::create(404, detail::concat("unresolved reference token '", reference_token, "'"), ptr));
+            }
+        }
+
+        return *ptr;
+    }
+
+    /*!
+    @throw parse_error.106   if an array index begins with '0'
+    @throw parse_error.109   if an array index was not a number
+    @throw out_of_range.402  if the array index '-' is used
+    @throw out_of_range.404  if the JSON pointer can not be resolved
+    */
+    template<typename BasicJsonType>
+    BasicJsonType& get_checked(BasicJsonType* ptr) const
+    {
+        for (const auto& reference_token : reference_tokens)
+        {
+            switch (ptr->type())
+            {
+                case detail::value_t::object:
+                {
+                    // note: at performs range check
+                    ptr = &ptr->at(reference_token);
+                    break;
+                }
+
+                case detail::value_t::array:
+                {
+                    if (JSON_HEDLEY_UNLIKELY(reference_token == "-"))
+                    {
+                        // "-" always fails the range check
+                        JSON_THROW(detail::out_of_range::create(402, detail::concat(
+                                "array index '-' (", std::to_string(ptr->m_value.array->size()),
+                                ") is out of range"), ptr));
+                    }
+
+                    // note: at performs range check
+                    ptr = &ptr->at(array_index<BasicJsonType>(reference_token));
+                    break;
+                }
+
+                case detail::value_t::null:
+                case detail::value_t::string:
+                case detail::value_t::boolean:
+                case detail::value_t::number_integer:
+                case detail::value_t::number_unsigned:
+                case detail::value_t::number_float:
+                case detail::value_t::binary:
+                case detail::value_t::discarded:
+                default:
+                    JSON_THROW(detail::out_of_range::create(404, detail::concat("unresolved reference token '", reference_token, "'"), ptr));
+            }
+        }
+
+        return *ptr;
+    }
+
+    /*!
+    @brief return a const reference to the pointed to value
+
+    @param[in] ptr  a JSON value
+
+    @return const reference to the JSON value pointed to by the JSON
+    pointer
+
+    @throw parse_error.106   if an array index begins with '0'
+    @throw parse_error.109   if an array index was not a number
+    @throw out_of_range.402  if the array index '-' is used
+    @throw out_of_range.404  if the JSON pointer can not be resolved
+    */
+    template<typename BasicJsonType>
+    const BasicJsonType& get_unchecked(const BasicJsonType* ptr) const
+    {
+        for (const auto& reference_token : reference_tokens)
+        {
+            switch (ptr->type())
+            {
+                case detail::value_t::object:
+                {
+                    // use unchecked object access
+                    ptr = &ptr->operator[](reference_token);
+                    break;
+                }
+
+                case detail::value_t::array:
+                {
+                    if (JSON_HEDLEY_UNLIKELY(reference_token == "-"))
+                    {
+                        // "-" cannot be used for const access
+                        JSON_THROW(detail::out_of_range::create(402, detail::concat("array index '-' (", std::to_string(ptr->m_value.array->size()), ") is out of range"), ptr));
+                    }
+
+                    // use unchecked array access
+                    ptr = &ptr->operator[](array_index<BasicJsonType>(reference_token));
+                    break;
+                }
+
+                case detail::value_t::null:
+                case detail::value_t::string:
+                case detail::value_t::boolean:
+                case detail::value_t::number_integer:
+                case detail::value_t::number_unsigned:
+                case detail::value_t::number_float:
+                case detail::value_t::binary:
+                case detail::value_t::discarded:
+                default:
+                    JSON_THROW(detail::out_of_range::create(404, detail::concat("unresolved reference token '", reference_token, "'"), ptr));
+            }
+        }
+
+        return *ptr;
+    }
+
+    /*!
+    @throw parse_error.106   if an array index begins with '0'
+    @throw parse_error.109   if an array index was not a number
+    @throw out_of_range.402  if the array index '-' is used
+    @throw out_of_range.404  if the JSON pointer can not be resolved
+    */
+    template<typename BasicJsonType>
+    const BasicJsonType& get_checked(const BasicJsonType* ptr) const
+    {
+        for (const auto& reference_token : reference_tokens)
+        {
+            switch (ptr->type())
+            {
+                case detail::value_t::object:
+                {
+                    // note: at performs range check
+                    ptr = &ptr->at(reference_token);
+                    break;
+                }
+
+                case detail::value_t::array:
+                {
+                    if (JSON_HEDLEY_UNLIKELY(reference_token == "-"))
+                    {
+                        // "-" always fails the range check
+                        JSON_THROW(detail::out_of_range::create(402, detail::concat(
+                                "array index '-' (", std::to_string(ptr->m_value.array->size()),
+                                ") is out of range"), ptr));
+                    }
+
+                    // note: at performs range check
+                    ptr = &ptr->at(array_index<BasicJsonType>(reference_token));
+                    break;
+                }
+
+                case detail::value_t::null:
+                case detail::value_t::string:
+                case detail::value_t::boolean:
+                case detail::value_t::number_integer:
+                case detail::value_t::number_unsigned:
+                case detail::value_t::number_float:
+                case detail::value_t::binary:
+                case detail::value_t::discarded:
+                default:
+                    JSON_THROW(detail::out_of_range::create(404, detail::concat("unresolved reference token '", reference_token, "'"), ptr));
+            }
+        }
+
+        return *ptr;
+    }
+
+    /*!
+    @throw parse_error.106   if an array index begins with '0'
+    @throw parse_error.109   if an array index was not a number
+    */
+    template<typename BasicJsonType>
+    bool contains(const BasicJsonType* ptr) const
+    {
+        for (const auto& reference_token : reference_tokens)
+        {
+            switch (ptr->type())
+            {
+                case detail::value_t::object:
+                {
+                    if (!ptr->contains(reference_token))
+                    {
+                        // we did not find the key in the object
+                        return false;
+                    }
+
+                    ptr = &ptr->operator[](reference_token);
+                    break;
+                }
+
+                case detail::value_t::array:
+                {
+                    if (JSON_HEDLEY_UNLIKELY(reference_token == "-"))
+                    {
+                        // "-" always fails the range check
+                        return false;
+                    }
+                    if (JSON_HEDLEY_UNLIKELY(reference_token.size() == 1 && !("0" <= reference_token && reference_token <= "9")))
+                    {
+                        // invalid char
+                        return false;
+                    }
+                    if (JSON_HEDLEY_UNLIKELY(reference_token.size() > 1))
+                    {
+                        if (JSON_HEDLEY_UNLIKELY(!('1' <= reference_token[0] && reference_token[0] <= '9')))
+                        {
+                            // first char should be between '1' and '9'
+                            return false;
+                        }
+                        for (std::size_t i = 1; i < reference_token.size(); i++)
+                        {
+                            if (JSON_HEDLEY_UNLIKELY(!('0' <= reference_token[i] && reference_token[i] <= '9')))
+                            {
+                                // other char should be between '0' and '9'
+                                return false;
+                            }
+                        }
+                    }
+
+                    const auto idx = array_index<BasicJsonType>(reference_token);
+                    if (idx >= ptr->size())
+                    {
+                        // index out of range
+                        return false;
+                    }
+
+                    ptr = &ptr->operator[](idx);
+                    break;
+                }
+
+                case detail::value_t::null:
+                case detail::value_t::string:
+                case detail::value_t::boolean:
+                case detail::value_t::number_integer:
+                case detail::value_t::number_unsigned:
+                case detail::value_t::number_float:
+                case detail::value_t::binary:
+                case detail::value_t::discarded:
+                default:
+                {
+                    // we do not expect primitive values if there is still a
+                    // reference token to process
+                    return false;
+                }
+            }
+        }
+
+        // no reference token left means we found a primitive value
+        return true;
+    }
+
+    /*!
+    @brief split the string input to reference tokens
+
+    @note This function is only called by the json_pointer constructor.
+          All exceptions below are documented there.
+
+    @throw parse_error.107  if the pointer is not empty or begins with '/'
+    @throw parse_error.108  if character '~' is not followed by '0' or '1'
+    */
+    static std::vector<string_t> split(const string_t& reference_string)
+    {
+        std::vector<string_t> result;
+
+        // special case: empty reference string -> no reference tokens
+        if (reference_string.empty())
+        {
+            return result;
+        }
+
+        // check if nonempty reference string begins with slash
+        if (JSON_HEDLEY_UNLIKELY(reference_string[0] != '/'))
+        {
+            JSON_THROW(detail::parse_error::create(107, 1, detail::concat("JSON pointer must be empty or begin with '/' - was: '", reference_string, "'"), nullptr));
+        }
+
+        // extract the reference tokens:
+        // - slash: position of the last read slash (or end of string)
+        // - start: position after the previous slash
+        for (
+            // search for the first slash after the first character
+            std::size_t slash = reference_string.find_first_of('/', 1),
+            // set the beginning of the first reference token
+            start = 1;
+            // we can stop if start == 0 (if slash == string_t::npos)
+            start != 0;
+            // set the beginning of the next reference token
+            // (will eventually be 0 if slash == string_t::npos)
+            start = (slash == string_t::npos) ? 0 : slash + 1,
+            // find next slash
+            slash = reference_string.find_first_of('/', start))
+        {
+            // use the text between the beginning of the reference token
+            // (start) and the last slash (slash).
+            auto reference_token = reference_string.substr(start, slash - start);
+
+            // check reference tokens are properly escaped
+            for (std::size_t pos = reference_token.find_first_of('~');
+                    pos != string_t::npos;
+                    pos = reference_token.find_first_of('~', pos + 1))
+            {
+                JSON_ASSERT(reference_token[pos] == '~');
+
+                // ~ must be followed by 0 or 1
+                if (JSON_HEDLEY_UNLIKELY(pos == reference_token.size() - 1 ||
+                                         (reference_token[pos + 1] != '0' &&
+                                          reference_token[pos + 1] != '1')))
+                {
+                    JSON_THROW(detail::parse_error::create(108, 0, "escape character '~' must be followed with '0' or '1'", nullptr));
+                }
+            }
+
+            // finally, store the reference token
+            detail::unescape(reference_token);
+            result.push_back(reference_token);
+        }
+
+        return result;
+    }
+
+  private:
+    /*!
+    @param[in] reference_string  the reference string to the current value
+    @param[in] value             the value to consider
+    @param[in,out] result        the result object to insert values to
+
+    @note Empty objects or arrays are flattened to `null`.
+    */
+    template<typename BasicJsonType>
+    static void flatten(const string_t& reference_string,
+                        const BasicJsonType& value,
+                        BasicJsonType& result)
+    {
+        switch (value.type())
+        {
+            case detail::value_t::array:
+            {
+                if (value.m_value.array->empty())
+                {
+                    // flatten empty array as null
+                    result[reference_string] = nullptr;
+                }
+                else
+                {
+                    // iterate array and use index as reference string
+                    for (std::size_t i = 0; i < value.m_value.array->size(); ++i)
+                    {
+                        flatten(detail::concat(reference_string, '/', std::to_string(i)),
+                                value.m_value.array->operator[](i), result);
+                    }
+                }
+                break;
+            }
+
+            case detail::value_t::object:
+            {
+                if (value.m_value.object->empty())
+                {
+                    // flatten empty object as null
+                    result[reference_string] = nullptr;
+                }
+                else
+                {
+                    // iterate object and use keys as reference string
+                    for (const auto& element : *value.m_value.object)
+                    {
+                        flatten(detail::concat(reference_string, '/', detail::escape(element.first)), element.second, result);
+                    }
+                }
+                break;
+            }
+
+            case detail::value_t::null:
+            case detail::value_t::string:
+            case detail::value_t::boolean:
+            case detail::value_t::number_integer:
+            case detail::value_t::number_unsigned:
+            case detail::value_t::number_float:
+            case detail::value_t::binary:
+            case detail::value_t::discarded:
+            default:
+            {
+                // add primitive value with its reference string
+                result[reference_string] = value;
+                break;
+            }
+        }
+    }
+
+    /*!
+    @param[in] value  flattened JSON
+
+    @return unflattened JSON
+
+    @throw parse_error.109 if array index is not a number
+    @throw type_error.314  if value is not an object
+    @throw type_error.315  if object values are not primitive
+    @throw type_error.313  if value cannot be unflattened
+    */
+    template<typename BasicJsonType>
+    static BasicJsonType
+    unflatten(const BasicJsonType& value)
+    {
+        if (JSON_HEDLEY_UNLIKELY(!value.is_object()))
+        {
+            JSON_THROW(detail::type_error::create(314, "only objects can be unflattened", &value));
+        }
+
+        BasicJsonType result;
+
+        // iterate the JSON object values
+        for (const auto& element : *value.m_value.object)
+        {
+            if (JSON_HEDLEY_UNLIKELY(!element.second.is_primitive()))
+            {
+                JSON_THROW(detail::type_error::create(315, "values in object must be primitive", &element.second));
+            }
+
+            // assign value to reference pointed to by JSON pointer; Note that if
+            // the JSON pointer is "" (i.e., points to the whole value), function
+            // get_and_create returns a reference to result itself. An assignment
+            // will then create a primitive value.
+            json_pointer(element.first).get_and_create(result) = element.second;
+        }
+
+        return result;
+    }
+
+    // can't use conversion operator because of ambiguity
+    json_pointer<string_t> convert() const&
+    {
+        json_pointer<string_t> result;
+        result.reference_tokens = reference_tokens;
+        return result;
+    }
+
+    json_pointer<string_t> convert()&&
+    {
+        json_pointer<string_t> result;
+        result.reference_tokens = std::move(reference_tokens);
+        return result;
+    }
+
+  public:
+#if JSON_HAS_THREE_WAY_COMPARISON
+    /// @brief compares two JSON pointers for equality
+    /// @sa https://json.nlohmann.me/api/json_pointer/operator_eq/
+    template<typename RefStringTypeRhs>
+    bool operator==(const json_pointer<RefStringTypeRhs>& rhs) const noexcept
+    {
+        return reference_tokens == rhs.reference_tokens;
+    }
+
+    /// @brief compares JSON pointer and string for equality
+    /// @sa https://json.nlohmann.me/api/json_pointer/operator_eq/
+    JSON_HEDLEY_DEPRECATED_FOR(3.11.2, operator==(json_pointer))
+    bool operator==(const string_t& rhs) const
+    {
+        return *this == json_pointer(rhs);
+    }
+
+    /// @brief 3-way compares two JSON pointers
+    template<typename RefStringTypeRhs>
+    std::strong_ordering operator<=>(const json_pointer<RefStringTypeRhs>& rhs) const noexcept // *NOPAD*
+    {
+        return  reference_tokens <=> rhs.reference_tokens; // *NOPAD*
+    }
+#else
+    /// @brief compares two JSON pointers for equality
+    /// @sa https://json.nlohmann.me/api/json_pointer/operator_eq/
+    template<typename RefStringTypeLhs, typename RefStringTypeRhs>
+    // NOLINTNEXTLINE(readability-redundant-declaration)
+    friend bool operator==(const json_pointer<RefStringTypeLhs>& lhs,
+                           const json_pointer<RefStringTypeRhs>& rhs) noexcept;
+
+    /// @brief compares JSON pointer and string for equality
+    /// @sa https://json.nlohmann.me/api/json_pointer/operator_eq/
+    template<typename RefStringTypeLhs, typename StringType>
+    // NOLINTNEXTLINE(readability-redundant-declaration)
+    friend bool operator==(const json_pointer<RefStringTypeLhs>& lhs,
+                           const StringType& rhs);
+
+    /// @brief compares string and JSON pointer for equality
+    /// @sa https://json.nlohmann.me/api/json_pointer/operator_eq/
+    template<typename RefStringTypeRhs, typename StringType>
+    // NOLINTNEXTLINE(readability-redundant-declaration)
+    friend bool operator==(const StringType& lhs,
+                           const json_pointer<RefStringTypeRhs>& rhs);
+
+    /// @brief compares two JSON pointers for inequality
+    /// @sa https://json.nlohmann.me/api/json_pointer/operator_ne/
+    template<typename RefStringTypeLhs, typename RefStringTypeRhs>
+    // NOLINTNEXTLINE(readability-redundant-declaration)
+    friend bool operator!=(const json_pointer<RefStringTypeLhs>& lhs,
+                           const json_pointer<RefStringTypeRhs>& rhs) noexcept;
+
+    /// @brief compares JSON pointer and string for inequality
+    /// @sa https://json.nlohmann.me/api/json_pointer/operator_ne/
+    template<typename RefStringTypeLhs, typename StringType>
+    // NOLINTNEXTLINE(readability-redundant-declaration)
+    friend bool operator!=(const json_pointer<RefStringTypeLhs>& lhs,
+                           const StringType& rhs);
+
+    /// @brief compares string and JSON pointer for inequality
+    /// @sa https://json.nlohmann.me/api/json_pointer/operator_ne/
+    template<typename RefStringTypeRhs, typename StringType>
+    // NOLINTNEXTLINE(readability-redundant-declaration)
+    friend bool operator!=(const StringType& lhs,
+                           const json_pointer<RefStringTypeRhs>& rhs);
+
+    /// @brief compares two JSON pointer for less-than
+    template<typename RefStringTypeLhs, typename RefStringTypeRhs>
+    // NOLINTNEXTLINE(readability-redundant-declaration)
+    friend bool operator<(const json_pointer<RefStringTypeLhs>& lhs,
+                          const json_pointer<RefStringTypeRhs>& rhs) noexcept;
+#endif
+
+  private:
+    /// the reference tokens
+    std::vector<string_t> reference_tokens;
+};
+
+#if !JSON_HAS_THREE_WAY_COMPARISON
+// functions cannot be defined inside class due to ODR violations
+template<typename RefStringTypeLhs, typename RefStringTypeRhs>
+inline bool operator==(const json_pointer<RefStringTypeLhs>& lhs,
+                       const json_pointer<RefStringTypeRhs>& rhs) noexcept
+{
+    return lhs.reference_tokens == rhs.reference_tokens;
+}
+
+template<typename RefStringTypeLhs,
+         typename StringType = typename json_pointer<RefStringTypeLhs>::string_t>
+JSON_HEDLEY_DEPRECATED_FOR(3.11.2, operator==(json_pointer, json_pointer))
+inline bool operator==(const json_pointer<RefStringTypeLhs>& lhs,
+                       const StringType& rhs)
+{
+    return lhs == json_pointer<RefStringTypeLhs>(rhs);
+}
+
+template<typename RefStringTypeRhs,
+         typename StringType = typename json_pointer<RefStringTypeRhs>::string_t>
+JSON_HEDLEY_DEPRECATED_FOR(3.11.2, operator==(json_pointer, json_pointer))
+inline bool operator==(const StringType& lhs,
+                       const json_pointer<RefStringTypeRhs>& rhs)
+{
+    return json_pointer<RefStringTypeRhs>(lhs) == rhs;
+}
+
+template<typename RefStringTypeLhs, typename RefStringTypeRhs>
+inline bool operator!=(const json_pointer<RefStringTypeLhs>& lhs,
+                       const json_pointer<RefStringTypeRhs>& rhs) noexcept
+{
+    return !(lhs == rhs);
+}
+
+template<typename RefStringTypeLhs,
+         typename StringType = typename json_pointer<RefStringTypeLhs>::string_t>
+JSON_HEDLEY_DEPRECATED_FOR(3.11.2, operator!=(json_pointer, json_pointer))
+inline bool operator!=(const json_pointer<RefStringTypeLhs>& lhs,
+                       const StringType& rhs)
+{
+    return !(lhs == rhs);
+}
+
+template<typename RefStringTypeRhs,
+         typename StringType = typename json_pointer<RefStringTypeRhs>::string_t>
+JSON_HEDLEY_DEPRECATED_FOR(3.11.2, operator!=(json_pointer, json_pointer))
+inline bool operator!=(const StringType& lhs,
+                       const json_pointer<RefStringTypeRhs>& rhs)
+{
+    return !(lhs == rhs);
+}
+
+template<typename RefStringTypeLhs, typename RefStringTypeRhs>
+inline bool operator<(const json_pointer<RefStringTypeLhs>& lhs,
+                      const json_pointer<RefStringTypeRhs>& rhs) noexcept
+{
+    return lhs.reference_tokens < rhs.reference_tokens;
+}
+#endif
+
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/json_ref.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <initializer_list>
+#include <utility>
+
+// #include <nlohmann/detail/abi_macros.hpp>
+
+// #include <nlohmann/detail/meta/type_traits.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+
+template<typename BasicJsonType>
+class json_ref
+{
+  public:
+    using value_type = BasicJsonType;
+
+    json_ref(value_type&& value)
+        : owned_value(std::move(value))
+    {}
+
+    json_ref(const value_type& value)
+        : value_ref(&value)
+    {}
+
+    json_ref(std::initializer_list<json_ref> init)
+        : owned_value(init)
+    {}
+
+    template <
+        class... Args,
+        enable_if_t<std::is_constructible<value_type, Args...>::value, int> = 0 >
+    json_ref(Args && ... args)
+        : owned_value(std::forward<Args>(args)...)
+    {}
+
+    // class should be movable only
+    json_ref(json_ref&&) noexcept = default;
+    json_ref(const json_ref&) = delete;
+    json_ref& operator=(const json_ref&) = delete;
+    json_ref& operator=(json_ref&&) = delete;
+    ~json_ref() = default;
+
+    value_type moved_or_copied() const
+    {
+        if (value_ref == nullptr)
+        {
+            return std::move(owned_value);
+        }
+        return *value_ref;
+    }
+
+    value_type const& operator*() const
+    {
+        return value_ref ? *value_ref : owned_value;
+    }
+
+    value_type const* operator->() const
+    {
+        return &** this;
+    }
+
+  private:
+    mutable value_type owned_value = nullptr;
+    value_type const* value_ref = nullptr;
+};
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/macro_scope.hpp>
+
+// #include <nlohmann/detail/string_concat.hpp>
+
+// #include <nlohmann/detail/string_escape.hpp>
+
+// #include <nlohmann/detail/meta/cpp_future.hpp>
+
+// #include <nlohmann/detail/meta/type_traits.hpp>
+
+// #include <nlohmann/detail/output/binary_writer.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <algorithm> // reverse
+#include <array> // array
+#include <map> // map
+#include <cmath> // isnan, isinf
+#include <cstdint> // uint8_t, uint16_t, uint32_t, uint64_t
+#include <cstring> // memcpy
+#include <limits> // numeric_limits
+#include <string> // string
+#include <utility> // move
+#include <vector> // vector
+
+// #include <nlohmann/detail/input/binary_reader.hpp>
+
+// #include <nlohmann/detail/macro_scope.hpp>
+
+// #include <nlohmann/detail/output/output_adapters.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <algorithm> // copy
+#include <cstddef> // size_t
+#include <iterator> // back_inserter
+#include <memory> // shared_ptr, make_shared
+#include <string> // basic_string
+#include <vector> // vector
+
+#ifndef JSON_NO_IO
+    #include <ios>      // streamsize
+    #include <ostream>  // basic_ostream
+#endif  // JSON_NO_IO
+
+// #include <nlohmann/detail/macro_scope.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+
+/// abstract output adapter interface
+template<typename CharType> struct output_adapter_protocol
+{
+    virtual void write_character(CharType c) = 0;
+    virtual void write_characters(const CharType* s, std::size_t length) = 0;
+    virtual ~output_adapter_protocol() = default;
+
+    output_adapter_protocol() = default;
+    output_adapter_protocol(const output_adapter_protocol&) = default;
+    output_adapter_protocol(output_adapter_protocol&&) noexcept = default;
+    output_adapter_protocol& operator=(const output_adapter_protocol&) = default;
+    output_adapter_protocol& operator=(output_adapter_protocol&&) noexcept = default;
+};
+
+/// a type to simplify interfaces
+template<typename CharType>
+using output_adapter_t = std::shared_ptr<output_adapter_protocol<CharType>>;
+
+/// output adapter for byte vectors
+template<typename CharType, typename AllocatorType = std::allocator<CharType>>
+class output_vector_adapter : public output_adapter_protocol<CharType>
+{
+  public:
+    explicit output_vector_adapter(std::vector<CharType, AllocatorType>& vec) noexcept
+        : v(vec)
+    {}
+
+    void write_character(CharType c) override
+    {
+        v.push_back(c);
+    }
+
+    JSON_HEDLEY_NON_NULL(2)
+    void write_characters(const CharType* s, std::size_t length) override
+    {
+        v.insert(v.end(), s, s + length);
+    }
+
+  private:
+    std::vector<CharType, AllocatorType>& v;
+};
+
+#ifndef JSON_NO_IO
+/// output adapter for output streams
+template<typename CharType>
+class output_stream_adapter : public output_adapter_protocol<CharType>
+{
+  public:
+    explicit output_stream_adapter(std::basic_ostream<CharType>& s) noexcept
+        : stream(s)
+    {}
+
+    void write_character(CharType c) override
+    {
+        stream.put(c);
+    }
+
+    JSON_HEDLEY_NON_NULL(2)
+    void write_characters(const CharType* s, std::size_t length) override
+    {
+        stream.write(s, static_cast<std::streamsize>(length));
+    }
+
+  private:
+    std::basic_ostream<CharType>& stream;
+};
+#endif  // JSON_NO_IO
+
+/// output adapter for basic_string
+template<typename CharType, typename StringType = std::basic_string<CharType>>
+class output_string_adapter : public output_adapter_protocol<CharType>
+{
+  public:
+    explicit output_string_adapter(StringType& s) noexcept
+        : str(s)
+    {}
+
+    void write_character(CharType c) override
+    {
+        str.push_back(c);
+    }
+
+    JSON_HEDLEY_NON_NULL(2)
+    void write_characters(const CharType* s, std::size_t length) override
+    {
+        str.append(s, length);
+    }
+
+  private:
+    StringType& str;
+};
+
+template<typename CharType, typename StringType = std::basic_string<CharType>>
+class output_adapter
+{
+  public:
+    template<typename AllocatorType = std::allocator<CharType>>
+    output_adapter(std::vector<CharType, AllocatorType>& vec)
+        : oa(std::make_shared<output_vector_adapter<CharType, AllocatorType>>(vec)) {}
+
+#ifndef JSON_NO_IO
+    output_adapter(std::basic_ostream<CharType>& s)
+        : oa(std::make_shared<output_stream_adapter<CharType>>(s)) {}
+#endif  // JSON_NO_IO
+
+    output_adapter(StringType& s)
+        : oa(std::make_shared<output_string_adapter<CharType, StringType>>(s)) {}
+
+    operator output_adapter_t<CharType>()
+    {
+        return oa;
+    }
+
+  private:
+    output_adapter_t<CharType> oa = nullptr;
+};
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/string_concat.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+
+///////////////////
+// binary writer //
+///////////////////
+
+/*!
+@brief serialization to CBOR and MessagePack values
+*/
+template<typename BasicJsonType, typename CharType>
+class binary_writer
+{
+    using string_t = typename BasicJsonType::string_t;
+    using binary_t = typename BasicJsonType::binary_t;
+    using number_float_t = typename BasicJsonType::number_float_t;
+
+  public:
+    /*!
+    @brief create a binary writer
+
+    @param[in] adapter  output adapter to write to
+    */
+    explicit binary_writer(output_adapter_t<CharType> adapter) : oa(std::move(adapter))
+    {
+        JSON_ASSERT(oa);
+    }
+
+    /*!
+    @param[in] j  JSON value to serialize
+    @pre       j.type() == value_t::object
+    */
+    void write_bson(const BasicJsonType& j)
+    {
+        switch (j.type())
+        {
+            case value_t::object:
+            {
+                write_bson_object(*j.m_value.object);
+                break;
+            }
+
+            case value_t::null:
+            case value_t::array:
+            case value_t::string:
+            case value_t::boolean:
+            case value_t::number_integer:
+            case value_t::number_unsigned:
+            case value_t::number_float:
+            case value_t::binary:
+            case value_t::discarded:
+            default:
+            {
+                JSON_THROW(type_error::create(317, concat("to serialize to BSON, top-level type must be object, but is ", j.type_name()), &j));
+            }
+        }
+    }
+
+    /*!
+    @param[in] j  JSON value to serialize
+    */
+    void write_cbor(const BasicJsonType& j)
+    {
+        switch (j.type())
+        {
+            case value_t::null:
+            {
+                oa->write_character(to_char_type(0xF6));
+                break;
+            }
+
+            case value_t::boolean:
+            {
+                oa->write_character(j.m_value.boolean
+                                    ? to_char_type(0xF5)
+                                    : to_char_type(0xF4));
+                break;
+            }
+
+            case value_t::number_integer:
+            {
+                if (j.m_value.number_integer >= 0)
+                {
+                    // CBOR does not differentiate between positive signed
+                    // integers and unsigned integers. Therefore, we used the
+                    // code from the value_t::number_unsigned case here.
+                    if (j.m_value.number_integer <= 0x17)
+                    {
+                        write_number(static_cast<std::uint8_t>(j.m_value.number_integer));
+                    }
+                    else if (j.m_value.number_integer <= (std::numeric_limits<std::uint8_t>::max)())
+                    {
+                        oa->write_character(to_char_type(0x18));
+                        write_number(static_cast<std::uint8_t>(j.m_value.number_integer));
+                    }
+                    else if (j.m_value.number_integer <= (std::numeric_limits<std::uint16_t>::max)())
+                    {
+                        oa->write_character(to_char_type(0x19));
+                        write_number(static_cast<std::uint16_t>(j.m_value.number_integer));
+                    }
+                    else if (j.m_value.number_integer <= (std::numeric_limits<std::uint32_t>::max)())
+                    {
+                        oa->write_character(to_char_type(0x1A));
+                        write_number(static_cast<std::uint32_t>(j.m_value.number_integer));
+                    }
+                    else
+                    {
+                        oa->write_character(to_char_type(0x1B));
+                        write_number(static_cast<std::uint64_t>(j.m_value.number_integer));
+                    }
+                }
+                else
+                {
+                    // The conversions below encode the sign in the first
+                    // byte, and the value is converted to a positive number.
+                    const auto positive_number = -1 - j.m_value.number_integer;
+                    if (j.m_value.number_integer >= -24)
+                    {
+                        write_number(static_cast<std::uint8_t>(0x20 + positive_number));
+                    }
+                    else if (positive_number <= (std::numeric_limits<std::uint8_t>::max)())
+                    {
+                        oa->write_character(to_char_type(0x38));
+                        write_number(static_cast<std::uint8_t>(positive_number));
+                    }
+                    else if (positive_number <= (std::numeric_limits<std::uint16_t>::max)())
+                    {
+                        oa->write_character(to_char_type(0x39));
+                        write_number(static_cast<std::uint16_t>(positive_number));
+                    }
+                    else if (positive_number <= (std::numeric_limits<std::uint32_t>::max)())
+                    {
+                        oa->write_character(to_char_type(0x3A));
+                        write_number(static_cast<std::uint32_t>(positive_number));
+                    }
+                    else
+                    {
+                        oa->write_character(to_char_type(0x3B));
+                        write_number(static_cast<std::uint64_t>(positive_number));
+                    }
+                }
+                break;
+            }
+
+            case value_t::number_unsigned:
+            {
+                if (j.m_value.number_unsigned <= 0x17)
+                {
+                    write_number(static_cast<std::uint8_t>(j.m_value.number_unsigned));
+                }
+                else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint8_t>::max)())
+                {
+                    oa->write_character(to_char_type(0x18));
+                    write_number(static_cast<std::uint8_t>(j.m_value.number_unsigned));
+                }
+                else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint16_t>::max)())
+                {
+                    oa->write_character(to_char_type(0x19));
+                    write_number(static_cast<std::uint16_t>(j.m_value.number_unsigned));
+                }
+                else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint32_t>::max)())
+                {
+                    oa->write_character(to_char_type(0x1A));
+                    write_number(static_cast<std::uint32_t>(j.m_value.number_unsigned));
+                }
+                else
+                {
+                    oa->write_character(to_char_type(0x1B));
+                    write_number(static_cast<std::uint64_t>(j.m_value.number_unsigned));
+                }
+                break;
+            }
+
+            case value_t::number_float:
+            {
+                if (std::isnan(j.m_value.number_float))
+                {
+                    // NaN is 0xf97e00 in CBOR
+                    oa->write_character(to_char_type(0xF9));
+                    oa->write_character(to_char_type(0x7E));
+                    oa->write_character(to_char_type(0x00));
+                }
+                else if (std::isinf(j.m_value.number_float))
+                {
+                    // Infinity is 0xf97c00, -Infinity is 0xf9fc00
+                    oa->write_character(to_char_type(0xf9));
+                    oa->write_character(j.m_value.number_float > 0 ? to_char_type(0x7C) : to_char_type(0xFC));
+                    oa->write_character(to_char_type(0x00));
+                }
+                else
+                {
+                    write_compact_float(j.m_value.number_float, detail::input_format_t::cbor);
+                }
+                break;
+            }
+
+            case value_t::string:
+            {
+                // step 1: write control byte and the string length
+                const auto N = j.m_value.string->size();
+                if (N <= 0x17)
+                {
+                    write_number(static_cast<std::uint8_t>(0x60 + N));
+                }
+                else if (N <= (std::numeric_limits<std::uint8_t>::max)())
+                {
+                    oa->write_character(to_char_type(0x78));
+                    write_number(static_cast<std::uint8_t>(N));
+                }
+                else if (N <= (std::numeric_limits<std::uint16_t>::max)())
+                {
+                    oa->write_character(to_char_type(0x79));
+                    write_number(static_cast<std::uint16_t>(N));
+                }
+                else if (N <= (std::numeric_limits<std::uint32_t>::max)())
+                {
+                    oa->write_character(to_char_type(0x7A));
+                    write_number(static_cast<std::uint32_t>(N));
+                }
+                // LCOV_EXCL_START
+                else if (N <= (std::numeric_limits<std::uint64_t>::max)())
+                {
+                    oa->write_character(to_char_type(0x7B));
+                    write_number(static_cast<std::uint64_t>(N));
+                }
+                // LCOV_EXCL_STOP
+
+                // step 2: write the string
+                oa->write_characters(
+                    reinterpret_cast<const CharType*>(j.m_value.string->c_str()),
+                    j.m_value.string->size());
+                break;
+            }
+
+            case value_t::array:
+            {
+                // step 1: write control byte and the array size
+                const auto N = j.m_value.array->size();
+                if (N <= 0x17)
+                {
+                    write_number(static_cast<std::uint8_t>(0x80 + N));
+                }
+                else if (N <= (std::numeric_limits<std::uint8_t>::max)())
+                {
+                    oa->write_character(to_char_type(0x98));
+                    write_number(static_cast<std::uint8_t>(N));
+                }
+                else if (N <= (std::numeric_limits<std::uint16_t>::max)())
+                {
+                    oa->write_character(to_char_type(0x99));
+                    write_number(static_cast<std::uint16_t>(N));
+                }
+                else if (N <= (std::numeric_limits<std::uint32_t>::max)())
+                {
+                    oa->write_character(to_char_type(0x9A));
+                    write_number(static_cast<std::uint32_t>(N));
+                }
+                // LCOV_EXCL_START
+                else if (N <= (std::numeric_limits<std::uint64_t>::max)())
+                {
+                    oa->write_character(to_char_type(0x9B));
+                    write_number(static_cast<std::uint64_t>(N));
+                }
+                // LCOV_EXCL_STOP
+
+                // step 2: write each element
+                for (const auto& el : *j.m_value.array)
+                {
+                    write_cbor(el);
+                }
+                break;
+            }
+
+            case value_t::binary:
+            {
+                if (j.m_value.binary->has_subtype())
+                {
+                    if (j.m_value.binary->subtype() <= (std::numeric_limits<std::uint8_t>::max)())
+                    {
+                        write_number(static_cast<std::uint8_t>(0xd8));
+                        write_number(static_cast<std::uint8_t>(j.m_value.binary->subtype()));
+                    }
+                    else if (j.m_value.binary->subtype() <= (std::numeric_limits<std::uint16_t>::max)())
+                    {
+                        write_number(static_cast<std::uint8_t>(0xd9));
+                        write_number(static_cast<std::uint16_t>(j.m_value.binary->subtype()));
+                    }
+                    else if (j.m_value.binary->subtype() <= (std::numeric_limits<std::uint32_t>::max)())
+                    {
+                        write_number(static_cast<std::uint8_t>(0xda));
+                        write_number(static_cast<std::uint32_t>(j.m_value.binary->subtype()));
+                    }
+                    else if (j.m_value.binary->subtype() <= (std::numeric_limits<std::uint64_t>::max)())
+                    {
+                        write_number(static_cast<std::uint8_t>(0xdb));
+                        write_number(static_cast<std::uint64_t>(j.m_value.binary->subtype()));
+                    }
+                }
+
+                // step 1: write control byte and the binary array size
+                const auto N = j.m_value.binary->size();
+                if (N <= 0x17)
+                {
+                    write_number(static_cast<std::uint8_t>(0x40 + N));
+                }
+                else if (N <= (std::numeric_limits<std::uint8_t>::max)())
+                {
+                    oa->write_character(to_char_type(0x58));
+                    write_number(static_cast<std::uint8_t>(N));
+                }
+                else if (N <= (std::numeric_limits<std::uint16_t>::max)())
+                {
+                    oa->write_character(to_char_type(0x59));
+                    write_number(static_cast<std::uint16_t>(N));
+                }
+                else if (N <= (std::numeric_limits<std::uint32_t>::max)())
+                {
+                    oa->write_character(to_char_type(0x5A));
+                    write_number(static_cast<std::uint32_t>(N));
+                }
+                // LCOV_EXCL_START
+                else if (N <= (std::numeric_limits<std::uint64_t>::max)())
+                {
+                    oa->write_character(to_char_type(0x5B));
+                    write_number(static_cast<std::uint64_t>(N));
+                }
+                // LCOV_EXCL_STOP
+
+                // step 2: write each element
+                oa->write_characters(
+                    reinterpret_cast<const CharType*>(j.m_value.binary->data()),
+                    N);
+
+                break;
+            }
+
+            case value_t::object:
+            {
+                // step 1: write control byte and the object size
+                const auto N = j.m_value.object->size();
+                if (N <= 0x17)
+                {
+                    write_number(static_cast<std::uint8_t>(0xA0 + N));
+                }
+                else if (N <= (std::numeric_limits<std::uint8_t>::max)())
+                {
+                    oa->write_character(to_char_type(0xB8));
+                    write_number(static_cast<std::uint8_t>(N));
+                }
+                else if (N <= (std::numeric_limits<std::uint16_t>::max)())
+                {
+                    oa->write_character(to_char_type(0xB9));
+                    write_number(static_cast<std::uint16_t>(N));
+                }
+                else if (N <= (std::numeric_limits<std::uint32_t>::max)())
+                {
+                    oa->write_character(to_char_type(0xBA));
+                    write_number(static_cast<std::uint32_t>(N));
+                }
+                // LCOV_EXCL_START
+                else if (N <= (std::numeric_limits<std::uint64_t>::max)())
+                {
+                    oa->write_character(to_char_type(0xBB));
+                    write_number(static_cast<std::uint64_t>(N));
+                }
+                // LCOV_EXCL_STOP
+
+                // step 2: write each element
+                for (const auto& el : *j.m_value.object)
+                {
+                    write_cbor(el.first);
+                    write_cbor(el.second);
+                }
+                break;
+            }
+
+            case value_t::discarded:
+            default:
+                break;
+        }
+    }
+
+    /*!
+    @param[in] j  JSON value to serialize
+    */
+    void write_msgpack(const BasicJsonType& j)
+    {
+        switch (j.type())
+        {
+            case value_t::null: // nil
+            {
+                oa->write_character(to_char_type(0xC0));
+                break;
+            }
+
+            case value_t::boolean: // true and false
+            {
+                oa->write_character(j.m_value.boolean
+                                    ? to_char_type(0xC3)
+                                    : to_char_type(0xC2));
+                break;
+            }
+
+            case value_t::number_integer:
+            {
+                if (j.m_value.number_integer >= 0)
+                {
+                    // MessagePack does not differentiate between positive
+                    // signed integers and unsigned integers. Therefore, we used
+                    // the code from the value_t::number_unsigned case here.
+                    if (j.m_value.number_unsigned < 128)
+                    {
+                        // positive fixnum
+                        write_number(static_cast<std::uint8_t>(j.m_value.number_integer));
+                    }
+                    else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint8_t>::max)())
+                    {
+                        // uint 8
+                        oa->write_character(to_char_type(0xCC));
+                        write_number(static_cast<std::uint8_t>(j.m_value.number_integer));
+                    }
+                    else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint16_t>::max)())
+                    {
+                        // uint 16
+                        oa->write_character(to_char_type(0xCD));
+                        write_number(static_cast<std::uint16_t>(j.m_value.number_integer));
+                    }
+                    else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint32_t>::max)())
+                    {
+                        // uint 32
+                        oa->write_character(to_char_type(0xCE));
+                        write_number(static_cast<std::uint32_t>(j.m_value.number_integer));
+                    }
+                    else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint64_t>::max)())
+                    {
+                        // uint 64
+                        oa->write_character(to_char_type(0xCF));
+                        write_number(static_cast<std::uint64_t>(j.m_value.number_integer));
+                    }
+                }
+                else
+                {
+                    if (j.m_value.number_integer >= -32)
+                    {
+                        // negative fixnum
+                        write_number(static_cast<std::int8_t>(j.m_value.number_integer));
+                    }
+                    else if (j.m_value.number_integer >= (std::numeric_limits<std::int8_t>::min)() &&
+                             j.m_value.number_integer <= (std::numeric_limits<std::int8_t>::max)())
+                    {
+                        // int 8
+                        oa->write_character(to_char_type(0xD0));
+                        write_number(static_cast<std::int8_t>(j.m_value.number_integer));
+                    }
+                    else if (j.m_value.number_integer >= (std::numeric_limits<std::int16_t>::min)() &&
+                             j.m_value.number_integer <= (std::numeric_limits<std::int16_t>::max)())
+                    {
+                        // int 16
+                        oa->write_character(to_char_type(0xD1));
+                        write_number(static_cast<std::int16_t>(j.m_value.number_integer));
+                    }
+                    else if (j.m_value.number_integer >= (std::numeric_limits<std::int32_t>::min)() &&
+                             j.m_value.number_integer <= (std::numeric_limits<std::int32_t>::max)())
+                    {
+                        // int 32
+                        oa->write_character(to_char_type(0xD2));
+                        write_number(static_cast<std::int32_t>(j.m_value.number_integer));
+                    }
+                    else if (j.m_value.number_integer >= (std::numeric_limits<std::int64_t>::min)() &&
+                             j.m_value.number_integer <= (std::numeric_limits<std::int64_t>::max)())
+                    {
+                        // int 64
+                        oa->write_character(to_char_type(0xD3));
+                        write_number(static_cast<std::int64_t>(j.m_value.number_integer));
+                    }
+                }
+                break;
+            }
+
+            case value_t::number_unsigned:
+            {
+                if (j.m_value.number_unsigned < 128)
+                {
+                    // positive fixnum
+                    write_number(static_cast<std::uint8_t>(j.m_value.number_integer));
+                }
+                else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint8_t>::max)())
+                {
+                    // uint 8
+                    oa->write_character(to_char_type(0xCC));
+                    write_number(static_cast<std::uint8_t>(j.m_value.number_integer));
+                }
+                else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint16_t>::max)())
+                {
+                    // uint 16
+                    oa->write_character(to_char_type(0xCD));
+                    write_number(static_cast<std::uint16_t>(j.m_value.number_integer));
+                }
+                else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint32_t>::max)())
+                {
+                    // uint 32
+                    oa->write_character(to_char_type(0xCE));
+                    write_number(static_cast<std::uint32_t>(j.m_value.number_integer));
+                }
+                else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint64_t>::max)())
+                {
+                    // uint 64
+                    oa->write_character(to_char_type(0xCF));
+                    write_number(static_cast<std::uint64_t>(j.m_value.number_integer));
+                }
+                break;
+            }
+
+            case value_t::number_float:
+            {
+                write_compact_float(j.m_value.number_float, detail::input_format_t::msgpack);
+                break;
+            }
+
+            case value_t::string:
+            {
+                // step 1: write control byte and the string length
+                const auto N = j.m_value.string->size();
+                if (N <= 31)
+                {
+                    // fixstr
+                    write_number(static_cast<std::uint8_t>(0xA0 | N));
+                }
+                else if (N <= (std::numeric_limits<std::uint8_t>::max)())
+                {
+                    // str 8
+                    oa->write_character(to_char_type(0xD9));
+                    write_number(static_cast<std::uint8_t>(N));
+                }
+                else if (N <= (std::numeric_limits<std::uint16_t>::max)())
+                {
+                    // str 16
+                    oa->write_character(to_char_type(0xDA));
+                    write_number(static_cast<std::uint16_t>(N));
+                }
+                else if (N <= (std::numeric_limits<std::uint32_t>::max)())
+                {
+                    // str 32
+                    oa->write_character(to_char_type(0xDB));
+                    write_number(static_cast<std::uint32_t>(N));
+                }
+
+                // step 2: write the string
+                oa->write_characters(
+                    reinterpret_cast<const CharType*>(j.m_value.string->c_str()),
+                    j.m_value.string->size());
+                break;
+            }
+
+            case value_t::array:
+            {
+                // step 1: write control byte and the array size
+                const auto N = j.m_value.array->size();
+                if (N <= 15)
+                {
+                    // fixarray
+                    write_number(static_cast<std::uint8_t>(0x90 | N));
+                }
+                else if (N <= (std::numeric_limits<std::uint16_t>::max)())
+                {
+                    // array 16
+                    oa->write_character(to_char_type(0xDC));
+                    write_number(static_cast<std::uint16_t>(N));
+                }
+                else if (N <= (std::numeric_limits<std::uint32_t>::max)())
+                {
+                    // array 32
+                    oa->write_character(to_char_type(0xDD));
+                    write_number(static_cast<std::uint32_t>(N));
+                }
+
+                // step 2: write each element
+                for (const auto& el : *j.m_value.array)
+                {
+                    write_msgpack(el);
+                }
+                break;
+            }
+
+            case value_t::binary:
+            {
+                // step 0: determine if the binary type has a set subtype to
+                // determine whether or not to use the ext or fixext types
+                const bool use_ext = j.m_value.binary->has_subtype();
+
+                // step 1: write control byte and the byte string length
+                const auto N = j.m_value.binary->size();
+                if (N <= (std::numeric_limits<std::uint8_t>::max)())
+                {
+                    std::uint8_t output_type{};
+                    bool fixed = true;
+                    if (use_ext)
+                    {
+                        switch (N)
+                        {
+                            case 1:
+                                output_type = 0xD4; // fixext 1
+                                break;
+                            case 2:
+                                output_type = 0xD5; // fixext 2
+                                break;
+                            case 4:
+                                output_type = 0xD6; // fixext 4
+                                break;
+                            case 8:
+                                output_type = 0xD7; // fixext 8
+                                break;
+                            case 16:
+                                output_type = 0xD8; // fixext 16
+                                break;
+                            default:
+                                output_type = 0xC7; // ext 8
+                                fixed = false;
+                                break;
+                        }
+
+                    }
+                    else
+                    {
+                        output_type = 0xC4; // bin 8
+                        fixed = false;
+                    }
+
+                    oa->write_character(to_char_type(output_type));
+                    if (!fixed)
+                    {
+                        write_number(static_cast<std::uint8_t>(N));
+                    }
+                }
+                else if (N <= (std::numeric_limits<std::uint16_t>::max)())
+                {
+                    const std::uint8_t output_type = use_ext
+                                                     ? 0xC8 // ext 16
+                                                     : 0xC5; // bin 16
+
+                    oa->write_character(to_char_type(output_type));
+                    write_number(static_cast<std::uint16_t>(N));
+                }
+                else if (N <= (std::numeric_limits<std::uint32_t>::max)())
+                {
+                    const std::uint8_t output_type = use_ext
+                                                     ? 0xC9 // ext 32
+                                                     : 0xC6; // bin 32
+
+                    oa->write_character(to_char_type(output_type));
+                    write_number(static_cast<std::uint32_t>(N));
+                }
+
+                // step 1.5: if this is an ext type, write the subtype
+                if (use_ext)
+                {
+                    write_number(static_cast<std::int8_t>(j.m_value.binary->subtype()));
+                }
+
+                // step 2: write the byte string
+                oa->write_characters(
+                    reinterpret_cast<const CharType*>(j.m_value.binary->data()),
+                    N);
+
+                break;
+            }
+
+            case value_t::object:
+            {
+                // step 1: write control byte and the object size
+                const auto N = j.m_value.object->size();
+                if (N <= 15)
+                {
+                    // fixmap
+                    write_number(static_cast<std::uint8_t>(0x80 | (N & 0xF)));
+                }
+                else if (N <= (std::numeric_limits<std::uint16_t>::max)())
+                {
+                    // map 16
+                    oa->write_character(to_char_type(0xDE));
+                    write_number(static_cast<std::uint16_t>(N));
+                }
+                else if (N <= (std::numeric_limits<std::uint32_t>::max)())
+                {
+                    // map 32
+                    oa->write_character(to_char_type(0xDF));
+                    write_number(static_cast<std::uint32_t>(N));
+                }
+
+                // step 2: write each element
+                for (const auto& el : *j.m_value.object)
+                {
+                    write_msgpack(el.first);
+                    write_msgpack(el.second);
+                }
+                break;
+            }
+
+            case value_t::discarded:
+            default:
+                break;
+        }
+    }
+
+    /*!
+    @param[in] j  JSON value to serialize
+    @param[in] use_count   whether to use '#' prefixes (optimized format)
+    @param[in] use_type    whether to use '$' prefixes (optimized format)
+    @param[in] add_prefix  whether prefixes need to be used for this value
+    @param[in] use_bjdata  whether write in BJData format, default is false
+    */
+    void write_ubjson(const BasicJsonType& j, const bool use_count,
+                      const bool use_type, const bool add_prefix = true,
+                      const bool use_bjdata = false)
+    {
+        switch (j.type())
+        {
+            case value_t::null:
+            {
+                if (add_prefix)
+                {
+                    oa->write_character(to_char_type('Z'));
+                }
+                break;
+            }
+
+            case value_t::boolean:
+            {
+                if (add_prefix)
+                {
+                    oa->write_character(j.m_value.boolean
+                                        ? to_char_type('T')
+                                        : to_char_type('F'));
+                }
+                break;
+            }
+
+            case value_t::number_integer:
+            {
+                write_number_with_ubjson_prefix(j.m_value.number_integer, add_prefix, use_bjdata);
+                break;
+            }
+
+            case value_t::number_unsigned:
+            {
+                write_number_with_ubjson_prefix(j.m_value.number_unsigned, add_prefix, use_bjdata);
+                break;
+            }
+
+            case value_t::number_float:
+            {
+                write_number_with_ubjson_prefix(j.m_value.number_float, add_prefix, use_bjdata);
+                break;
+            }
+
+            case value_t::string:
+            {
+                if (add_prefix)
+                {
+                    oa->write_character(to_char_type('S'));
+                }
+                write_number_with_ubjson_prefix(j.m_value.string->size(), true, use_bjdata);
+                oa->write_characters(
+                    reinterpret_cast<const CharType*>(j.m_value.string->c_str()),
+                    j.m_value.string->size());
+                break;
+            }
+
+            case value_t::array:
+            {
+                if (add_prefix)
+                {
+                    oa->write_character(to_char_type('['));
+                }
+
+                bool prefix_required = true;
+                if (use_type && !j.m_value.array->empty())
+                {
+                    JSON_ASSERT(use_count);
+                    const CharType first_prefix = ubjson_prefix(j.front(), use_bjdata);
+                    const bool same_prefix = std::all_of(j.begin() + 1, j.end(),
+                                                         [this, first_prefix, use_bjdata](const BasicJsonType & v)
+                    {
+                        return ubjson_prefix(v, use_bjdata) == first_prefix;
+                    });
+
+                    std::vector<CharType> bjdx = {'[', '{', 'S', 'H', 'T', 'F', 'N', 'Z'}; // excluded markers in bjdata optimized type
+
+                    if (same_prefix && !(use_bjdata && std::find(bjdx.begin(), bjdx.end(), first_prefix) != bjdx.end()))
+                    {
+                        prefix_required = false;
+                        oa->write_character(to_char_type('$'));
+                        oa->write_character(first_prefix);
+                    }
+                }
+
+                if (use_count)
+                {
+                    oa->write_character(to_char_type('#'));
+                    write_number_with_ubjson_prefix(j.m_value.array->size(), true, use_bjdata);
+                }
+
+                for (const auto& el : *j.m_value.array)
+                {
+                    write_ubjson(el, use_count, use_type, prefix_required, use_bjdata);
+                }
+
+                if (!use_count)
+                {
+                    oa->write_character(to_char_type(']'));
+                }
+
+                break;
+            }
+
+            case value_t::binary:
+            {
+                if (add_prefix)
+                {
+                    oa->write_character(to_char_type('['));
+                }
+
+                if (use_type && !j.m_value.binary->empty())
+                {
+                    JSON_ASSERT(use_count);
+                    oa->write_character(to_char_type('$'));
+                    oa->write_character('U');
+                }
+
+                if (use_count)
+                {
+                    oa->write_character(to_char_type('#'));
+                    write_number_with_ubjson_prefix(j.m_value.binary->size(), true, use_bjdata);
+                }
+
+                if (use_type)
+                {
+                    oa->write_characters(
+                        reinterpret_cast<const CharType*>(j.m_value.binary->data()),
+                        j.m_value.binary->size());
+                }
+                else
+                {
+                    for (size_t i = 0; i < j.m_value.binary->size(); ++i)
+                    {
+                        oa->write_character(to_char_type('U'));
+                        oa->write_character(j.m_value.binary->data()[i]);
+                    }
+                }
+
+                if (!use_count)
+                {
+                    oa->write_character(to_char_type(']'));
+                }
+
+                break;
+            }
+
+            case value_t::object:
+            {
+                if (use_bjdata && j.m_value.object->size() == 3 && j.m_value.object->find("_ArrayType_") != j.m_value.object->end() && j.m_value.object->find("_ArraySize_") != j.m_value.object->end() && j.m_value.object->find("_ArrayData_") != j.m_value.object->end())
+                {
+                    if (!write_bjdata_ndarray(*j.m_value.object, use_count, use_type))  // decode bjdata ndarray in the JData format (https://github.com/NeuroJSON/jdata)
+                    {
+                        break;
+                    }
+                }
+
+                if (add_prefix)
+                {
+                    oa->write_character(to_char_type('{'));
+                }
+
+                bool prefix_required = true;
+                if (use_type && !j.m_value.object->empty())
+                {
+                    JSON_ASSERT(use_count);
+                    const CharType first_prefix = ubjson_prefix(j.front(), use_bjdata);
+                    const bool same_prefix = std::all_of(j.begin(), j.end(),
+                                                         [this, first_prefix, use_bjdata](const BasicJsonType & v)
+                    {
+                        return ubjson_prefix(v, use_bjdata) == first_prefix;
+                    });
+
+                    std::vector<CharType> bjdx = {'[', '{', 'S', 'H', 'T', 'F', 'N', 'Z'}; // excluded markers in bjdata optimized type
+
+                    if (same_prefix && !(use_bjdata && std::find(bjdx.begin(), bjdx.end(), first_prefix) != bjdx.end()))
+                    {
+                        prefix_required = false;
+                        oa->write_character(to_char_type('$'));
+                        oa->write_character(first_prefix);
+                    }
+                }
+
+                if (use_count)
+                {
+                    oa->write_character(to_char_type('#'));
+                    write_number_with_ubjson_prefix(j.m_value.object->size(), true, use_bjdata);
+                }
+
+                for (const auto& el : *j.m_value.object)
+                {
+                    write_number_with_ubjson_prefix(el.first.size(), true, use_bjdata);
+                    oa->write_characters(
+                        reinterpret_cast<const CharType*>(el.first.c_str()),
+                        el.first.size());
+                    write_ubjson(el.second, use_count, use_type, prefix_required, use_bjdata);
+                }
+
+                if (!use_count)
+                {
+                    oa->write_character(to_char_type('}'));
+                }
+
+                break;
+            }
+
+            case value_t::discarded:
+            default:
+                break;
+        }
+    }
+
+  private:
+    //////////
+    // BSON //
+    //////////
+
+    /*!
+    @return The size of a BSON document entry header, including the id marker
+            and the entry name size (and its null-terminator).
+    */
+    static std::size_t calc_bson_entry_header_size(const string_t& name, const BasicJsonType& j)
+    {
+        const auto it = name.find(static_cast<typename string_t::value_type>(0));
+        if (JSON_HEDLEY_UNLIKELY(it != BasicJsonType::string_t::npos))
+        {
+            JSON_THROW(out_of_range::create(409, concat("BSON key cannot contain code point U+0000 (at byte ", std::to_string(it), ")"), &j));
+            static_cast<void>(j);
+        }
+
+        return /*id*/ 1ul + name.size() + /*zero-terminator*/1u;
+    }
+
+    /*!
+    @brief Writes the given @a element_type and @a name to the output adapter
+    */
+    void write_bson_entry_header(const string_t& name,
+                                 const std::uint8_t element_type)
+    {
+        oa->write_character(to_char_type(element_type)); // boolean
+        oa->write_characters(
+            reinterpret_cast<const CharType*>(name.c_str()),
+            name.size() + 1u);
+    }
+
+    /*!
+    @brief Writes a BSON element with key @a name and boolean value @a value
+    */
+    void write_bson_boolean(const string_t& name,
+                            const bool value)
+    {
+        write_bson_entry_header(name, 0x08);
+        oa->write_character(value ? to_char_type(0x01) : to_char_type(0x00));
+    }
+
+    /*!
+    @brief Writes a BSON element with key @a name and double value @a value
+    */
+    void write_bson_double(const string_t& name,
+                           const double value)
+    {
+        write_bson_entry_header(name, 0x01);
+        write_number<double>(value, true);
+    }
+
+    /*!
+    @return The size of the BSON-encoded string in @a value
+    */
+    static std::size_t calc_bson_string_size(const string_t& value)
+    {
+        return sizeof(std::int32_t) + value.size() + 1ul;
+    }
+
+    /*!
+    @brief Writes a BSON element with key @a name and string value @a value
+    */
+    void write_bson_string(const string_t& name,
+                           const string_t& value)
+    {
+        write_bson_entry_header(name, 0x02);
+
+        write_number<std::int32_t>(static_cast<std::int32_t>(value.size() + 1ul), true);
+        oa->write_characters(
+            reinterpret_cast<const CharType*>(value.c_str()),
+            value.size() + 1);
+    }
+
+    /*!
+    @brief Writes a BSON element with key @a name and null value
+    */
+    void write_bson_null(const string_t& name)
+    {
+        write_bson_entry_header(name, 0x0A);
+    }
+
+    /*!
+    @return The size of the BSON-encoded integer @a value
+    */
+    static std::size_t calc_bson_integer_size(const std::int64_t value)
+    {
+        return (std::numeric_limits<std::int32_t>::min)() <= value && value <= (std::numeric_limits<std::int32_t>::max)()
+               ? sizeof(std::int32_t)
+               : sizeof(std::int64_t);
+    }
+
+    /*!
+    @brief Writes a BSON element with key @a name and integer @a value
+    */
+    void write_bson_integer(const string_t& name,
+                            const std::int64_t value)
+    {
+        if ((std::numeric_limits<std::int32_t>::min)() <= value && value <= (std::numeric_limits<std::int32_t>::max)())
+        {
+            write_bson_entry_header(name, 0x10); // int32
+            write_number<std::int32_t>(static_cast<std::int32_t>(value), true);
+        }
+        else
+        {
+            write_bson_entry_header(name, 0x12); // int64
+            write_number<std::int64_t>(static_cast<std::int64_t>(value), true);
+        }
+    }
+
+    /*!
+    @return The size of the BSON-encoded unsigned integer in @a j
+    */
+    static constexpr std::size_t calc_bson_unsigned_size(const std::uint64_t value) noexcept
+    {
+        return (value <= static_cast<std::uint64_t>((std::numeric_limits<std::int32_t>::max)()))
+               ? sizeof(std::int32_t)
+               : sizeof(std::int64_t);
+    }
+
+    /*!
+    @brief Writes a BSON element with key @a name and unsigned @a value
+    */
+    void write_bson_unsigned(const string_t& name,
+                             const BasicJsonType& j)
+    {
+        if (j.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::int32_t>::max)()))
+        {
+            write_bson_entry_header(name, 0x10 /* int32 */);
+            write_number<std::int32_t>(static_cast<std::int32_t>(j.m_value.number_unsigned), true);
+        }
+        else if (j.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::int64_t>::max)()))
+        {
+            write_bson_entry_header(name, 0x12 /* int64 */);
+            write_number<std::int64_t>(static_cast<std::int64_t>(j.m_value.number_unsigned), true);
+        }
+        else
+        {
+            JSON_THROW(out_of_range::create(407, concat("integer number ", std::to_string(j.m_value.number_unsigned), " cannot be represented by BSON as it does not fit int64"), &j));
+        }
+    }
+
+    /*!
+    @brief Writes a BSON element with key @a name and object @a value
+    */
+    void write_bson_object_entry(const string_t& name,
+                                 const typename BasicJsonType::object_t& value)
+    {
+        write_bson_entry_header(name, 0x03); // object
+        write_bson_object(value);
+    }
+
+    /*!
+    @return The size of the BSON-encoded array @a value
+    */
+    static std::size_t calc_bson_array_size(const typename BasicJsonType::array_t& value)
+    {
+        std::size_t array_index = 0ul;
+
+        const std::size_t embedded_document_size = std::accumulate(std::begin(value), std::end(value), static_cast<std::size_t>(0), [&array_index](std::size_t result, const typename BasicJsonType::array_t::value_type & el)
+        {
+            return result + calc_bson_element_size(std::to_string(array_index++), el);
+        });
+
+        return sizeof(std::int32_t) + embedded_document_size + 1ul;
+    }
+
+    /*!
+    @return The size of the BSON-encoded binary array @a value
+    */
+    static std::size_t calc_bson_binary_size(const typename BasicJsonType::binary_t& value)
+    {
+        return sizeof(std::int32_t) + value.size() + 1ul;
+    }
+
+    /*!
+    @brief Writes a BSON element with key @a name and array @a value
+    */
+    void write_bson_array(const string_t& name,
+                          const typename BasicJsonType::array_t& value)
+    {
+        write_bson_entry_header(name, 0x04); // array
+        write_number<std::int32_t>(static_cast<std::int32_t>(calc_bson_array_size(value)), true);
+
+        std::size_t array_index = 0ul;
+
+        for (const auto& el : value)
+        {
+            write_bson_element(std::to_string(array_index++), el);
+        }
+
+        oa->write_character(to_char_type(0x00));
+    }
+
+    /*!
+    @brief Writes a BSON element with key @a name and binary value @a value
+    */
+    void write_bson_binary(const string_t& name,
+                           const binary_t& value)
+    {
+        write_bson_entry_header(name, 0x05);
+
+        write_number<std::int32_t>(static_cast<std::int32_t>(value.size()), true);
+        write_number(value.has_subtype() ? static_cast<std::uint8_t>(value.subtype()) : static_cast<std::uint8_t>(0x00));
+
+        oa->write_characters(reinterpret_cast<const CharType*>(value.data()), value.size());
+    }
+
+    /*!
+    @brief Calculates the size necessary to serialize the JSON value @a j with its @a name
+    @return The calculated size for the BSON document entry for @a j with the given @a name.
+    */
+    static std::size_t calc_bson_element_size(const string_t& name,
+            const BasicJsonType& j)
+    {
+        const auto header_size = calc_bson_entry_header_size(name, j);
+        switch (j.type())
+        {
+            case value_t::object:
+                return header_size + calc_bson_object_size(*j.m_value.object);
+
+            case value_t::array:
+                return header_size + calc_bson_array_size(*j.m_value.array);
+
+            case value_t::binary:
+                return header_size + calc_bson_binary_size(*j.m_value.binary);
+
+            case value_t::boolean:
+                return header_size + 1ul;
+
+            case value_t::number_float:
+                return header_size + 8ul;
+
+            case value_t::number_integer:
+                return header_size + calc_bson_integer_size(j.m_value.number_integer);
+
+            case value_t::number_unsigned:
+                return header_size + calc_bson_unsigned_size(j.m_value.number_unsigned);
+
+            case value_t::string:
+                return header_size + calc_bson_string_size(*j.m_value.string);
+
+            case value_t::null:
+                return header_size + 0ul;
+
+            // LCOV_EXCL_START
+            case value_t::discarded:
+            default:
+                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)
+                return 0ul;
+                // LCOV_EXCL_STOP
+        }
+    }
+
+    /*!
+    @brief Serializes the JSON value @a j to BSON and associates it with the
+           key @a name.
+    @param name The name to associate with the JSON entity @a j within the
+                current BSON document
+    */
+    void write_bson_element(const string_t& name,
+                            const BasicJsonType& j)
+    {
+        switch (j.type())
+        {
+            case value_t::object:
+                return write_bson_object_entry(name, *j.m_value.object);
+
+            case value_t::array:
+                return write_bson_array(name, *j.m_value.array);
+
+            case value_t::binary:
+                return write_bson_binary(name, *j.m_value.binary);
+
+            case value_t::boolean:
+                return write_bson_boolean(name, j.m_value.boolean);
+
+            case value_t::number_float:
+                return write_bson_double(name, j.m_value.number_float);
+
+            case value_t::number_integer:
+                return write_bson_integer(name, j.m_value.number_integer);
+
+            case value_t::number_unsigned:
+                return write_bson_unsigned(name, j);
+
+            case value_t::string:
+                return write_bson_string(name, *j.m_value.string);
+
+            case value_t::null:
+                return write_bson_null(name);
+
+            // LCOV_EXCL_START
+            case value_t::discarded:
+            default:
+                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)
+                return;
+                // LCOV_EXCL_STOP
+        }
+    }
+
+    /*!
+    @brief Calculates the size of the BSON serialization of the given
+           JSON-object @a j.
+    @param[in] value  JSON value to serialize
+    @pre       value.type() == value_t::object
+    */
+    static std::size_t calc_bson_object_size(const typename BasicJsonType::object_t& value)
+    {
+        const std::size_t document_size = std::accumulate(value.begin(), value.end(), static_cast<std::size_t>(0),
+                                          [](size_t result, const typename BasicJsonType::object_t::value_type & el)
+        {
+            return result += calc_bson_element_size(el.first, el.second);
+        });
+
+        return sizeof(std::int32_t) + document_size + 1ul;
+    }
+
+    /*!
+    @param[in] value  JSON value to serialize
+    @pre       value.type() == value_t::object
+    */
+    void write_bson_object(const typename BasicJsonType::object_t& value)
+    {
+        write_number<std::int32_t>(static_cast<std::int32_t>(calc_bson_object_size(value)), true);
+
+        for (const auto& el : value)
+        {
+            write_bson_element(el.first, el.second);
+        }
+
+        oa->write_character(to_char_type(0x00));
+    }
+
+    //////////
+    // CBOR //
+    //////////
+
+    static constexpr CharType get_cbor_float_prefix(float /*unused*/)
+    {
+        return to_char_type(0xFA);  // Single-Precision Float
+    }
+
+    static constexpr CharType get_cbor_float_prefix(double /*unused*/)
+    {
+        return to_char_type(0xFB);  // Double-Precision Float
+    }
+
+    /////////////
+    // MsgPack //
+    /////////////
+
+    static constexpr CharType get_msgpack_float_prefix(float /*unused*/)
+    {
+        return to_char_type(0xCA);  // float 32
+    }
+
+    static constexpr CharType get_msgpack_float_prefix(double /*unused*/)
+    {
+        return to_char_type(0xCB);  // float 64
+    }
+
+    ////////////
+    // UBJSON //
+    ////////////
+
+    // UBJSON: write number (floating point)
+    template<typename NumberType, typename std::enable_if<
+                 std::is_floating_point<NumberType>::value, int>::type = 0>
+    void write_number_with_ubjson_prefix(const NumberType n,
+                                         const bool add_prefix,
+                                         const bool use_bjdata)
+    {
+        if (add_prefix)
+        {
+            oa->write_character(get_ubjson_float_prefix(n));
+        }
+        write_number(n, use_bjdata);
+    }
+
+    // UBJSON: write number (unsigned integer)
+    template<typename NumberType, typename std::enable_if<
+                 std::is_unsigned<NumberType>::value, int>::type = 0>
+    void write_number_with_ubjson_prefix(const NumberType n,
+                                         const bool add_prefix,
+                                         const bool use_bjdata)
+    {
+        if (n <= static_cast<std::uint64_t>((std::numeric_limits<std::int8_t>::max)()))
+        {
+            if (add_prefix)
+            {
+                oa->write_character(to_char_type('i'));  // int8
+            }
+            write_number(static_cast<std::uint8_t>(n), use_bjdata);
+        }
+        else if (n <= (std::numeric_limits<std::uint8_t>::max)())
+        {
+            if (add_prefix)
+            {
+                oa->write_character(to_char_type('U'));  // uint8
+            }
+            write_number(static_cast<std::uint8_t>(n), use_bjdata);
+        }
+        else if (n <= static_cast<std::uint64_t>((std::numeric_limits<std::int16_t>::max)()))
+        {
+            if (add_prefix)
+            {
+                oa->write_character(to_char_type('I'));  // int16
+            }
+            write_number(static_cast<std::int16_t>(n), use_bjdata);
+        }
+        else if (use_bjdata && n <= static_cast<uint64_t>((std::numeric_limits<uint16_t>::max)()))
+        {
+            if (add_prefix)
+            {
+                oa->write_character(to_char_type('u'));  // uint16 - bjdata only
+            }
+            write_number(static_cast<std::uint16_t>(n), use_bjdata);
+        }
+        else if (n <= static_cast<std::uint64_t>((std::numeric_limits<std::int32_t>::max)()))
+        {
+            if (add_prefix)
+            {
+                oa->write_character(to_char_type('l'));  // int32
+            }
+            write_number(static_cast<std::int32_t>(n), use_bjdata);
+        }
+        else if (use_bjdata && n <= static_cast<uint64_t>((std::numeric_limits<uint32_t>::max)()))
+        {
+            if (add_prefix)
+            {
+                oa->write_character(to_char_type('m'));  // uint32 - bjdata only
+            }
+            write_number(static_cast<std::uint32_t>(n), use_bjdata);
+        }
+        else if (n <= static_cast<std::uint64_t>((std::numeric_limits<std::int64_t>::max)()))
+        {
+            if (add_prefix)
+            {
+                oa->write_character(to_char_type('L'));  // int64
+            }
+            write_number(static_cast<std::int64_t>(n), use_bjdata);
+        }
+        else if (use_bjdata && n <= (std::numeric_limits<uint64_t>::max)())
+        {
+            if (add_prefix)
+            {
+                oa->write_character(to_char_type('M'));  // uint64 - bjdata only
+            }
+            write_number(static_cast<std::uint64_t>(n), use_bjdata);
+        }
+        else
+        {
+            if (add_prefix)
+            {
+                oa->write_character(to_char_type('H'));  // high-precision number
+            }
+
+            const auto number = BasicJsonType(n).dump();
+            write_number_with_ubjson_prefix(number.size(), true, use_bjdata);
+            for (std::size_t i = 0; i < number.size(); ++i)
+            {
+                oa->write_character(to_char_type(static_cast<std::uint8_t>(number[i])));
+            }
+        }
+    }
+
+    // UBJSON: write number (signed integer)
+    template < typename NumberType, typename std::enable_if <
+                   std::is_signed<NumberType>::value&&
+                   !std::is_floating_point<NumberType>::value, int >::type = 0 >
+    void write_number_with_ubjson_prefix(const NumberType n,
+                                         const bool add_prefix,
+                                         const bool use_bjdata)
+    {
+        if ((std::numeric_limits<std::int8_t>::min)() <= n && n <= (std::numeric_limits<std::int8_t>::max)())
+        {
+            if (add_prefix)
+            {
+                oa->write_character(to_char_type('i'));  // int8
+            }
+            write_number(static_cast<std::int8_t>(n), use_bjdata);
+        }
+        else if (static_cast<std::int64_t>((std::numeric_limits<std::uint8_t>::min)()) <= n && n <= static_cast<std::int64_t>((std::numeric_limits<std::uint8_t>::max)()))
+        {
+            if (add_prefix)
+            {
+                oa->write_character(to_char_type('U'));  // uint8
+            }
+            write_number(static_cast<std::uint8_t>(n), use_bjdata);
+        }
+        else if ((std::numeric_limits<std::int16_t>::min)() <= n && n <= (std::numeric_limits<std::int16_t>::max)())
+        {
+            if (add_prefix)
+            {
+                oa->write_character(to_char_type('I'));  // int16
+            }
+            write_number(static_cast<std::int16_t>(n), use_bjdata);
+        }
+        else if (use_bjdata && (static_cast<std::int64_t>((std::numeric_limits<std::uint16_t>::min)()) <= n && n <= static_cast<std::int64_t>((std::numeric_limits<std::uint16_t>::max)())))
+        {
+            if (add_prefix)
+            {
+                oa->write_character(to_char_type('u'));  // uint16 - bjdata only
+            }
+            write_number(static_cast<uint16_t>(n), use_bjdata);
+        }
+        else if ((std::numeric_limits<std::int32_t>::min)() <= n && n <= (std::numeric_limits<std::int32_t>::max)())
+        {
+            if (add_prefix)
+            {
+                oa->write_character(to_char_type('l'));  // int32
+            }
+            write_number(static_cast<std::int32_t>(n), use_bjdata);
+        }
+        else if (use_bjdata && (static_cast<std::int64_t>((std::numeric_limits<std::uint32_t>::min)()) <= n && n <= static_cast<std::int64_t>((std::numeric_limits<std::uint32_t>::max)())))
+        {
+            if (add_prefix)
+            {
+                oa->write_character(to_char_type('m'));  // uint32 - bjdata only
+            }
+            write_number(static_cast<uint32_t>(n), use_bjdata);
+        }
+        else if ((std::numeric_limits<std::int64_t>::min)() <= n && n <= (std::numeric_limits<std::int64_t>::max)())
+        {
+            if (add_prefix)
+            {
+                oa->write_character(to_char_type('L'));  // int64
+            }
+            write_number(static_cast<std::int64_t>(n), use_bjdata);
+        }
+        // LCOV_EXCL_START
+        else
+        {
+            if (add_prefix)
+            {
+                oa->write_character(to_char_type('H'));  // high-precision number
+            }
+
+            const auto number = BasicJsonType(n).dump();
+            write_number_with_ubjson_prefix(number.size(), true, use_bjdata);
+            for (std::size_t i = 0; i < number.size(); ++i)
+            {
+                oa->write_character(to_char_type(static_cast<std::uint8_t>(number[i])));
+            }
+        }
+        // LCOV_EXCL_STOP
+    }
+
+    /*!
+    @brief determine the type prefix of container values
+    */
+    CharType ubjson_prefix(const BasicJsonType& j, const bool use_bjdata) const noexcept
+    {
+        switch (j.type())
+        {
+            case value_t::null:
+                return 'Z';
+
+            case value_t::boolean:
+                return j.m_value.boolean ? 'T' : 'F';
+
+            case value_t::number_integer:
+            {
+                if ((std::numeric_limits<std::int8_t>::min)() <= j.m_value.number_integer && j.m_value.number_integer <= (std::numeric_limits<std::int8_t>::max)())
+                {
+                    return 'i';
+                }
+                if ((std::numeric_limits<std::uint8_t>::min)() <= j.m_value.number_integer && j.m_value.number_integer <= (std::numeric_limits<std::uint8_t>::max)())
+                {
+                    return 'U';
+                }
+                if ((std::numeric_limits<std::int16_t>::min)() <= j.m_value.number_integer && j.m_value.number_integer <= (std::numeric_limits<std::int16_t>::max)())
+                {
+                    return 'I';
+                }
+                if (use_bjdata && ((std::numeric_limits<std::uint16_t>::min)() <= j.m_value.number_integer && j.m_value.number_integer <= (std::numeric_limits<std::uint16_t>::max)()))
+                {
+                    return 'u';
+                }
+                if ((std::numeric_limits<std::int32_t>::min)() <= j.m_value.number_integer && j.m_value.number_integer <= (std::numeric_limits<std::int32_t>::max)())
+                {
+                    return 'l';
+                }
+                if (use_bjdata && ((std::numeric_limits<std::uint32_t>::min)() <= j.m_value.number_integer && j.m_value.number_integer <= (std::numeric_limits<std::uint32_t>::max)()))
+                {
+                    return 'm';
+                }
+                if ((std::numeric_limits<std::int64_t>::min)() <= j.m_value.number_integer && j.m_value.number_integer <= (std::numeric_limits<std::int64_t>::max)())
+                {
+                    return 'L';
+                }
+                // anything else is treated as high-precision number
+                return 'H'; // LCOV_EXCL_LINE
+            }
+
+            case value_t::number_unsigned:
+            {
+                if (j.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::int8_t>::max)()))
+                {
+                    return 'i';
+                }
+                if (j.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::uint8_t>::max)()))
+                {
+                    return 'U';
+                }
+                if (j.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::int16_t>::max)()))
+                {
+                    return 'I';
+                }
+                if (use_bjdata && j.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::uint16_t>::max)()))
+                {
+                    return 'u';
+                }
+                if (j.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::int32_t>::max)()))
+                {
+                    return 'l';
+                }
+                if (use_bjdata && j.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::uint32_t>::max)()))
+                {
+                    return 'm';
+                }
+                if (j.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::int64_t>::max)()))
+                {
+                    return 'L';
+                }
+                if (use_bjdata && j.m_value.number_unsigned <= (std::numeric_limits<std::uint64_t>::max)())
+                {
+                    return 'M';
+                }
+                // anything else is treated as high-precision number
+                return 'H'; // LCOV_EXCL_LINE
+            }
+
+            case value_t::number_float:
+                return get_ubjson_float_prefix(j.m_value.number_float);
+
+            case value_t::string:
+                return 'S';
+
+            case value_t::array: // fallthrough
+            case value_t::binary:
+                return '[';
+
+            case value_t::object:
+                return '{';
+
+            case value_t::discarded:
+            default:  // discarded values
+                return 'N';
+        }
+    }
+
+    static constexpr CharType get_ubjson_float_prefix(float /*unused*/)
+    {
+        return 'd';  // float 32
+    }
+
+    static constexpr CharType get_ubjson_float_prefix(double /*unused*/)
+    {
+        return 'D';  // float 64
+    }
+
+    /*!
+    @return false if the object is successfully converted to a bjdata ndarray, true if the type or size is invalid
+    */
+    bool write_bjdata_ndarray(const typename BasicJsonType::object_t& value, const bool use_count, const bool use_type)
+    {
+        std::map<string_t, CharType> bjdtype = {{"uint8", 'U'},  {"int8", 'i'},  {"uint16", 'u'}, {"int16", 'I'},
+            {"uint32", 'm'}, {"int32", 'l'}, {"uint64", 'M'}, {"int64", 'L'}, {"single", 'd'}, {"double", 'D'}, {"char", 'C'}
+        };
+
+        string_t key = "_ArrayType_";
+        auto it = bjdtype.find(static_cast<string_t>(value.at(key)));
+        if (it == bjdtype.end())
+        {
+            return true;
+        }
+        CharType dtype = it->second;
+
+        key = "_ArraySize_";
+        std::size_t len = (value.at(key).empty() ? 0 : 1);
+        for (const auto& el : value.at(key))
+        {
+            len *= static_cast<std::size_t>(el.m_value.number_unsigned);
+        }
+
+        key = "_ArrayData_";
+        if (value.at(key).size() != len)
+        {
+            return true;
+        }
+
+        oa->write_character('[');
+        oa->write_character('$');
+        oa->write_character(dtype);
+        oa->write_character('#');
+
+        key = "_ArraySize_";
+        write_ubjson(value.at(key), use_count, use_type, true,  true);
+
+        key = "_ArrayData_";
+        if (dtype == 'U' || dtype == 'C')
+        {
+            for (const auto& el : value.at(key))
+            {
+                write_number(static_cast<std::uint8_t>(el.m_value.number_unsigned), true);
+            }
+        }
+        else if (dtype == 'i')
+        {
+            for (const auto& el : value.at(key))
+            {
+                write_number(static_cast<std::int8_t>(el.m_value.number_integer), true);
+            }
+        }
+        else if (dtype == 'u')
+        {
+            for (const auto& el : value.at(key))
+            {
+                write_number(static_cast<std::uint16_t>(el.m_value.number_unsigned), true);
+            }
+        }
+        else if (dtype == 'I')
+        {
+            for (const auto& el : value.at(key))
+            {
+                write_number(static_cast<std::int16_t>(el.m_value.number_integer), true);
+            }
+        }
+        else if (dtype == 'm')
+        {
+            for (const auto& el : value.at(key))
+            {
+                write_number(static_cast<std::uint32_t>(el.m_value.number_unsigned), true);
+            }
+        }
+        else if (dtype == 'l')
+        {
+            for (const auto& el : value.at(key))
+            {
+                write_number(static_cast<std::int32_t>(el.m_value.number_integer), true);
+            }
+        }
+        else if (dtype == 'M')
+        {
+            for (const auto& el : value.at(key))
+            {
+                write_number(static_cast<std::uint64_t>(el.m_value.number_unsigned), true);
+            }
+        }
+        else if (dtype == 'L')
+        {
+            for (const auto& el : value.at(key))
+            {
+                write_number(static_cast<std::int64_t>(el.m_value.number_integer), true);
+            }
+        }
+        else if (dtype == 'd')
+        {
+            for (const auto& el : value.at(key))
+            {
+                write_number(static_cast<float>(el.m_value.number_float), true);
+            }
+        }
+        else if (dtype == 'D')
+        {
+            for (const auto& el : value.at(key))
+            {
+                write_number(static_cast<double>(el.m_value.number_float), true);
+            }
+        }
+        return false;
+    }
+
+    ///////////////////////
+    // Utility functions //
+    ///////////////////////
+
+    /*
+    @brief write a number to output input
+    @param[in] n number of type @a NumberType
+    @param[in] OutputIsLittleEndian Set to true if output data is
+                                 required to be little endian
+    @tparam NumberType the type of the number
+
+    @note This function needs to respect the system's endianness, because bytes
+          in CBOR, MessagePack, and UBJSON are stored in network order (big
+          endian) and therefore need reordering on little endian systems.
+          On the other hand, BSON and BJData use little endian and should reorder
+          on big endian systems.
+    */
+    template<typename NumberType>
+    void write_number(const NumberType n, const bool OutputIsLittleEndian = false)
+    {
+        // step 1: write number to array of length NumberType
+        std::array<CharType, sizeof(NumberType)> vec{};
+        std::memcpy(vec.data(), &n, sizeof(NumberType));
+
+        // step 2: write array to output (with possible reordering)
+        if (is_little_endian != OutputIsLittleEndian)
+        {
+            // reverse byte order prior to conversion if necessary
+            std::reverse(vec.begin(), vec.end());
+        }
+
+        oa->write_characters(vec.data(), sizeof(NumberType));
+    }
+
+    void write_compact_float(const number_float_t n, detail::input_format_t format)
+    {
+#ifdef __GNUC__
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wfloat-equal"
+#endif
+        if (static_cast<double>(n) >= static_cast<double>(std::numeric_limits<float>::lowest()) &&
+                static_cast<double>(n) <= static_cast<double>((std::numeric_limits<float>::max)()) &&
+                static_cast<double>(static_cast<float>(n)) == static_cast<double>(n))
+        {
+            oa->write_character(format == detail::input_format_t::cbor
+                                ? get_cbor_float_prefix(static_cast<float>(n))
+                                : get_msgpack_float_prefix(static_cast<float>(n)));
+            write_number(static_cast<float>(n));
+        }
+        else
+        {
+            oa->write_character(format == detail::input_format_t::cbor
+                                ? get_cbor_float_prefix(n)
+                                : get_msgpack_float_prefix(n));
+            write_number(n);
+        }
+#ifdef __GNUC__
+#pragma GCC diagnostic pop
+#endif
+    }
+
+  public:
+    // The following to_char_type functions are implement the conversion
+    // between uint8_t and CharType. In case CharType is not unsigned,
+    // such a conversion is required to allow values greater than 128.
+    // See <https://github.com/nlohmann/json/issues/1286> for a discussion.
+    template < typename C = CharType,
+               enable_if_t < std::is_signed<C>::value && std::is_signed<char>::value > * = nullptr >
+    static constexpr CharType to_char_type(std::uint8_t x) noexcept
+    {
+        return *reinterpret_cast<char*>(&x);
+    }
+
+    template < typename C = CharType,
+               enable_if_t < std::is_signed<C>::value && std::is_unsigned<char>::value > * = nullptr >
+    static CharType to_char_type(std::uint8_t x) noexcept
+    {
+        static_assert(sizeof(std::uint8_t) == sizeof(CharType), "size of CharType must be equal to std::uint8_t");
+        static_assert(std::is_trivial<CharType>::value, "CharType must be trivial");
+        CharType result;
+        std::memcpy(&result, &x, sizeof(x));
+        return result;
+    }
+
+    template<typename C = CharType,
+             enable_if_t<std::is_unsigned<C>::value>* = nullptr>
+    static constexpr CharType to_char_type(std::uint8_t x) noexcept
+    {
+        return x;
+    }
+
+    template < typename InputCharType, typename C = CharType,
+               enable_if_t <
+                   std::is_signed<C>::value &&
+                   std::is_signed<char>::value &&
+                   std::is_same<char, typename std::remove_cv<InputCharType>::type>::value
+                   > * = nullptr >
+    static constexpr CharType to_char_type(InputCharType x) noexcept
+    {
+        return x;
+    }
+
+  private:
+    /// whether we can assume little endianness
+    const bool is_little_endian = little_endianness();
+
+    /// the output
+    output_adapter_t<CharType> oa = nullptr;
+};
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/output/output_adapters.hpp>
+
+// #include <nlohmann/detail/output/serializer.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2008-2009 Björn Hoehrmann <bjoern@hoehrmann.de>
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <algorithm> // reverse, remove, fill, find, none_of
+#include <array> // array
+#include <clocale> // localeconv, lconv
+#include <cmath> // labs, isfinite, isnan, signbit
+#include <cstddef> // size_t, ptrdiff_t
+#include <cstdint> // uint8_t
+#include <cstdio> // snprintf
+#include <limits> // numeric_limits
+#include <string> // string, char_traits
+#include <iomanip> // setfill, setw
+#include <type_traits> // is_same
+#include <utility> // move
+
+// #include <nlohmann/detail/conversions/to_chars.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2009 Florian Loitsch <https://florian.loitsch.com/>
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <array> // array
+#include <cmath>   // signbit, isfinite
+#include <cstdint> // intN_t, uintN_t
+#include <cstring> // memcpy, memmove
+#include <limits> // numeric_limits
+#include <type_traits> // conditional
+
+// #include <nlohmann/detail/macro_scope.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+
+/*!
+@brief implements the Grisu2 algorithm for binary to decimal floating-point
+conversion.
+
+This implementation is a slightly modified version of the reference
+implementation which may be obtained from
+http://florian.loitsch.com/publications (bench.tar.gz).
+
+The code is distributed under the MIT license, Copyright (c) 2009 Florian Loitsch.
+
+For a detailed description of the algorithm see:
+
+[1] Loitsch, "Printing Floating-Point Numbers Quickly and Accurately with
+    Integers", Proceedings of the ACM SIGPLAN 2010 Conference on Programming
+    Language Design and Implementation, PLDI 2010
+[2] Burger, Dybvig, "Printing Floating-Point Numbers Quickly and Accurately",
+    Proceedings of the ACM SIGPLAN 1996 Conference on Programming Language
+    Design and Implementation, PLDI 1996
+*/
+namespace dtoa_impl
+{
+
+template<typename Target, typename Source>
+Target reinterpret_bits(const Source source)
+{
+    static_assert(sizeof(Target) == sizeof(Source), "size mismatch");
+
+    Target target;
+    std::memcpy(&target, &source, sizeof(Source));
+    return target;
+}
+
+struct diyfp // f * 2^e
+{
+    static constexpr int kPrecision = 64; // = q
+
+    std::uint64_t f = 0;
+    int e = 0;
+
+    constexpr diyfp(std::uint64_t f_, int e_) noexcept : f(f_), e(e_) {}
+
+    /*!
+    @brief returns x - y
+    @pre x.e == y.e and x.f >= y.f
+    */
+    static diyfp sub(const diyfp& x, const diyfp& y) noexcept
+    {
+        JSON_ASSERT(x.e == y.e);
+        JSON_ASSERT(x.f >= y.f);
+
+        return {x.f - y.f, x.e};
+    }
+
+    /*!
+    @brief returns x * y
+    @note The result is rounded. (Only the upper q bits are returned.)
+    */
+    static diyfp mul(const diyfp& x, const diyfp& y) noexcept
+    {
+        static_assert(kPrecision == 64, "internal error");
+
+        // Computes:
+        //  f = round((x.f * y.f) / 2^q)
+        //  e = x.e + y.e + q
+
+        // Emulate the 64-bit * 64-bit multiplication:
+        //
+        // p = u * v
+        //   = (u_lo + 2^32 u_hi) (v_lo + 2^32 v_hi)
+        //   = (u_lo v_lo         ) + 2^32 ((u_lo v_hi         ) + (u_hi v_lo         )) + 2^64 (u_hi v_hi         )
+        //   = (p0                ) + 2^32 ((p1                ) + (p2                )) + 2^64 (p3                )
+        //   = (p0_lo + 2^32 p0_hi) + 2^32 ((p1_lo + 2^32 p1_hi) + (p2_lo + 2^32 p2_hi)) + 2^64 (p3                )
+        //   = (p0_lo             ) + 2^32 (p0_hi + p1_lo + p2_lo                      ) + 2^64 (p1_hi + p2_hi + p3)
+        //   = (p0_lo             ) + 2^32 (Q                                          ) + 2^64 (H                 )
+        //   = (p0_lo             ) + 2^32 (Q_lo + 2^32 Q_hi                           ) + 2^64 (H                 )
+        //
+        // (Since Q might be larger than 2^32 - 1)
+        //
+        //   = (p0_lo + 2^32 Q_lo) + 2^64 (Q_hi + H)
+        //
+        // (Q_hi + H does not overflow a 64-bit int)
+        //
+        //   = p_lo + 2^64 p_hi
+
+        const std::uint64_t u_lo = x.f & 0xFFFFFFFFu;
+        const std::uint64_t u_hi = x.f >> 32u;
+        const std::uint64_t v_lo = y.f & 0xFFFFFFFFu;
+        const std::uint64_t v_hi = y.f >> 32u;
+
+        const std::uint64_t p0 = u_lo * v_lo;
+        const std::uint64_t p1 = u_lo * v_hi;
+        const std::uint64_t p2 = u_hi * v_lo;
+        const std::uint64_t p3 = u_hi * v_hi;
+
+        const std::uint64_t p0_hi = p0 >> 32u;
+        const std::uint64_t p1_lo = p1 & 0xFFFFFFFFu;
+        const std::uint64_t p1_hi = p1 >> 32u;
+        const std::uint64_t p2_lo = p2 & 0xFFFFFFFFu;
+        const std::uint64_t p2_hi = p2 >> 32u;
+
+        std::uint64_t Q = p0_hi + p1_lo + p2_lo;
+
+        // The full product might now be computed as
+        //
+        // p_hi = p3 + p2_hi + p1_hi + (Q >> 32)
+        // p_lo = p0_lo + (Q << 32)
+        //
+        // But in this particular case here, the full p_lo is not required.
+        // Effectively we only need to add the highest bit in p_lo to p_hi (and
+        // Q_hi + 1 does not overflow).
+
+        Q += std::uint64_t{1} << (64u - 32u - 1u); // round, ties up
+
+        const std::uint64_t h = p3 + p2_hi + p1_hi + (Q >> 32u);
+
+        return {h, x.e + y.e + 64};
+    }
+
+    /*!
+    @brief normalize x such that the significand is >= 2^(q-1)
+    @pre x.f != 0
+    */
+    static diyfp normalize(diyfp x) noexcept
+    {
+        JSON_ASSERT(x.f != 0);
+
+        while ((x.f >> 63u) == 0)
+        {
+            x.f <<= 1u;
+            x.e--;
+        }
+
+        return x;
+    }
+
+    /*!
+    @brief normalize x such that the result has the exponent E
+    @pre e >= x.e and the upper e - x.e bits of x.f must be zero.
+    */
+    static diyfp normalize_to(const diyfp& x, const int target_exponent) noexcept
+    {
+        const int delta = x.e - target_exponent;
+
+        JSON_ASSERT(delta >= 0);
+        JSON_ASSERT(((x.f << delta) >> delta) == x.f);
+
+        return {x.f << delta, target_exponent};
+    }
+};
+
+struct boundaries
+{
+    diyfp w;
+    diyfp minus;
+    diyfp plus;
+};
+
+/*!
+Compute the (normalized) diyfp representing the input number 'value' and its
+boundaries.
+
+@pre value must be finite and positive
+*/
+template<typename FloatType>
+boundaries compute_boundaries(FloatType value)
+{
+    JSON_ASSERT(std::isfinite(value));
+    JSON_ASSERT(value > 0);
+
+    // Convert the IEEE representation into a diyfp.
+    //
+    // If v is denormal:
+    //      value = 0.F * 2^(1 - bias) = (          F) * 2^(1 - bias - (p-1))
+    // If v is normalized:
+    //      value = 1.F * 2^(E - bias) = (2^(p-1) + F) * 2^(E - bias - (p-1))
+
+    static_assert(std::numeric_limits<FloatType>::is_iec559,
+                  "internal error: dtoa_short requires an IEEE-754 floating-point implementation");
+
+    constexpr int      kPrecision = std::numeric_limits<FloatType>::digits; // = p (includes the hidden bit)
+    constexpr int      kBias      = std::numeric_limits<FloatType>::max_exponent - 1 + (kPrecision - 1);
+    constexpr int      kMinExp    = 1 - kBias;
+    constexpr std::uint64_t kHiddenBit = std::uint64_t{1} << (kPrecision - 1); // = 2^(p-1)
+
+    using bits_type = typename std::conditional<kPrecision == 24, std::uint32_t, std::uint64_t >::type;
+
+    const auto bits = static_cast<std::uint64_t>(reinterpret_bits<bits_type>(value));
+    const std::uint64_t E = bits >> (kPrecision - 1);
+    const std::uint64_t F = bits & (kHiddenBit - 1);
+
+    const bool is_denormal = E == 0;
+    const diyfp v = is_denormal
+                    ? diyfp(F, kMinExp)
+                    : diyfp(F + kHiddenBit, static_cast<int>(E) - kBias);
+
+    // Compute the boundaries m- and m+ of the floating-point value
+    // v = f * 2^e.
+    //
+    // Determine v- and v+, the floating-point predecessor and successor if v,
+    // respectively.
+    //
+    //      v- = v - 2^e        if f != 2^(p-1) or e == e_min                (A)
+    //         = v - 2^(e-1)    if f == 2^(p-1) and e > e_min                (B)
+    //
+    //      v+ = v + 2^e
+    //
+    // Let m- = (v- + v) / 2 and m+ = (v + v+) / 2. All real numbers _strictly_
+    // between m- and m+ round to v, regardless of how the input rounding
+    // algorithm breaks ties.
+    //
+    //      ---+-------------+-------------+-------------+-------------+---  (A)
+    //         v-            m-            v             m+            v+
+    //
+    //      -----------------+------+------+-------------+-------------+---  (B)
+    //                       v-     m-     v             m+            v+
+
+    const bool lower_boundary_is_closer = F == 0 && E > 1;
+    const diyfp m_plus = diyfp(2 * v.f + 1, v.e - 1);
+    const diyfp m_minus = lower_boundary_is_closer
+                          ? diyfp(4 * v.f - 1, v.e - 2)  // (B)
+                          : diyfp(2 * v.f - 1, v.e - 1); // (A)
+
+    // Determine the normalized w+ = m+.
+    const diyfp w_plus = diyfp::normalize(m_plus);
+
+    // Determine w- = m- such that e_(w-) = e_(w+).
+    const diyfp w_minus = diyfp::normalize_to(m_minus, w_plus.e);
+
+    return {diyfp::normalize(v), w_minus, w_plus};
+}
+
+// Given normalized diyfp w, Grisu needs to find a (normalized) cached
+// power-of-ten c, such that the exponent of the product c * w = f * 2^e lies
+// within a certain range [alpha, gamma] (Definition 3.2 from [1])
+//
+//      alpha <= e = e_c + e_w + q <= gamma
+//
+// or
+//
+//      f_c * f_w * 2^alpha <= f_c 2^(e_c) * f_w 2^(e_w) * 2^q
+//                          <= f_c * f_w * 2^gamma
+//
+// Since c and w are normalized, i.e. 2^(q-1) <= f < 2^q, this implies
+//
+//      2^(q-1) * 2^(q-1) * 2^alpha <= c * w * 2^q < 2^q * 2^q * 2^gamma
+//
+// or
+//
+//      2^(q - 2 + alpha) <= c * w < 2^(q + gamma)
+//
+// The choice of (alpha,gamma) determines the size of the table and the form of
+// the digit generation procedure. Using (alpha,gamma)=(-60,-32) works out well
+// in practice:
+//
+// The idea is to cut the number c * w = f * 2^e into two parts, which can be
+// processed independently: An integral part p1, and a fractional part p2:
+//
+//      f * 2^e = ( (f div 2^-e) * 2^-e + (f mod 2^-e) ) * 2^e
+//              = (f div 2^-e) + (f mod 2^-e) * 2^e
+//              = p1 + p2 * 2^e
+//
+// The conversion of p1 into decimal form requires a series of divisions and
+// modulos by (a power of) 10. These operations are faster for 32-bit than for
+// 64-bit integers, so p1 should ideally fit into a 32-bit integer. This can be
+// achieved by choosing
+//
+//      -e >= 32   or   e <= -32 := gamma
+//
+// In order to convert the fractional part
+//
+//      p2 * 2^e = p2 / 2^-e = d[-1] / 10^1 + d[-2] / 10^2 + ...
+//
+// into decimal form, the fraction is repeatedly multiplied by 10 and the digits
+// d[-i] are extracted in order:
+//
+//      (10 * p2) div 2^-e = d[-1]
+//      (10 * p2) mod 2^-e = d[-2] / 10^1 + ...
+//
+// The multiplication by 10 must not overflow. It is sufficient to choose
+//
+//      10 * p2 < 16 * p2 = 2^4 * p2 <= 2^64.
+//
+// Since p2 = f mod 2^-e < 2^-e,
+//
+//      -e <= 60   or   e >= -60 := alpha
+
+constexpr int kAlpha = -60;
+constexpr int kGamma = -32;
+
+struct cached_power // c = f * 2^e ~= 10^k
+{
+    std::uint64_t f;
+    int e;
+    int k;
+};
+
+/*!
+For a normalized diyfp w = f * 2^e, this function returns a (normalized) cached
+power-of-ten c = f_c * 2^e_c, such that the exponent of the product w * c
+satisfies (Definition 3.2 from [1])
+
+     alpha <= e_c + e + q <= gamma.
+*/
+inline cached_power get_cached_power_for_binary_exponent(int e)
+{
+    // Now
+    //
+    //      alpha <= e_c + e + q <= gamma                                    (1)
+    //      ==> f_c * 2^alpha <= c * 2^e * 2^q
+    //
+    // and since the c's are normalized, 2^(q-1) <= f_c,
+    //
+    //      ==> 2^(q - 1 + alpha) <= c * 2^(e + q)
+    //      ==> 2^(alpha - e - 1) <= c
+    //
+    // If c were an exact power of ten, i.e. c = 10^k, one may determine k as
+    //
+    //      k = ceil( log_10( 2^(alpha - e - 1) ) )
+    //        = ceil( (alpha - e - 1) * log_10(2) )
+    //
+    // From the paper:
+    // "In theory the result of the procedure could be wrong since c is rounded,
+    //  and the computation itself is approximated [...]. In practice, however,
+    //  this simple function is sufficient."
+    //
+    // For IEEE double precision floating-point numbers converted into
+    // normalized diyfp's w = f * 2^e, with q = 64,
+    //
+    //      e >= -1022      (min IEEE exponent)
+    //           -52        (p - 1)
+    //           -52        (p - 1, possibly normalize denormal IEEE numbers)
+    //           -11        (normalize the diyfp)
+    //         = -1137
+    //
+    // and
+    //
+    //      e <= +1023      (max IEEE exponent)
+    //           -52        (p - 1)
+    //           -11        (normalize the diyfp)
+    //         = 960
+    //
+    // This binary exponent range [-1137,960] results in a decimal exponent
+    // range [-307,324]. One does not need to store a cached power for each
+    // k in this range. For each such k it suffices to find a cached power
+    // such that the exponent of the product lies in [alpha,gamma].
+    // This implies that the difference of the decimal exponents of adjacent
+    // table entries must be less than or equal to
+    //
+    //      floor( (gamma - alpha) * log_10(2) ) = 8.
+    //
+    // (A smaller distance gamma-alpha would require a larger table.)
+
+    // NB:
+    // Actually this function returns c, such that -60 <= e_c + e + 64 <= -34.
+
+    constexpr int kCachedPowersMinDecExp = -300;
+    constexpr int kCachedPowersDecStep = 8;
+
+    static constexpr std::array<cached_power, 79> kCachedPowers =
+    {
+        {
+            { 0xAB70FE17C79AC6CA, -1060, -300 },
+            { 0xFF77B1FCBEBCDC4F, -1034, -292 },
+            { 0xBE5691EF416BD60C, -1007, -284 },
+            { 0x8DD01FAD907FFC3C,  -980, -276 },
+            { 0xD3515C2831559A83,  -954, -268 },
+            { 0x9D71AC8FADA6C9B5,  -927, -260 },
+            { 0xEA9C227723EE8BCB,  -901, -252 },
+            { 0xAECC49914078536D,  -874, -244 },
+            { 0x823C12795DB6CE57,  -847, -236 },
+            { 0xC21094364DFB5637,  -821, -228 },
+            { 0x9096EA6F3848984F,  -794, -220 },
+            { 0xD77485CB25823AC7,  -768, -212 },
+            { 0xA086CFCD97BF97F4,  -741, -204 },
+            { 0xEF340A98172AACE5,  -715, -196 },
+            { 0xB23867FB2A35B28E,  -688, -188 },
+            { 0x84C8D4DFD2C63F3B,  -661, -180 },
+            { 0xC5DD44271AD3CDBA,  -635, -172 },
+            { 0x936B9FCEBB25C996,  -608, -164 },
+            { 0xDBAC6C247D62A584,  -582, -156 },
+            { 0xA3AB66580D5FDAF6,  -555, -148 },
+            { 0xF3E2F893DEC3F126,  -529, -140 },
+            { 0xB5B5ADA8AAFF80B8,  -502, -132 },
+            { 0x87625F056C7C4A8B,  -475, -124 },
+            { 0xC9BCFF6034C13053,  -449, -116 },
+            { 0x964E858C91BA2655,  -422, -108 },
+            { 0xDFF9772470297EBD,  -396, -100 },
+            { 0xA6DFBD9FB8E5B88F,  -369,  -92 },
+            { 0xF8A95FCF88747D94,  -343,  -84 },
+            { 0xB94470938FA89BCF,  -316,  -76 },
+            { 0x8A08F0F8BF0F156B,  -289,  -68 },
+            { 0xCDB02555653131B6,  -263,  -60 },
+            { 0x993FE2C6D07B7FAC,  -236,  -52 },
+            { 0xE45C10C42A2B3B06,  -210,  -44 },
+            { 0xAA242499697392D3,  -183,  -36 },
+            { 0xFD87B5F28300CA0E,  -157,  -28 },
+            { 0xBCE5086492111AEB,  -130,  -20 },
+            { 0x8CBCCC096F5088CC,  -103,  -12 },
+            { 0xD1B71758E219652C,   -77,   -4 },
+            { 0x9C40000000000000,   -50,    4 },
+            { 0xE8D4A51000000000,   -24,   12 },
+            { 0xAD78EBC5AC620000,     3,   20 },
+            { 0x813F3978F8940984,    30,   28 },
+            { 0xC097CE7BC90715B3,    56,   36 },
+            { 0x8F7E32CE7BEA5C70,    83,   44 },
+            { 0xD5D238A4ABE98068,   109,   52 },
+            { 0x9F4F2726179A2245,   136,   60 },
+            { 0xED63A231D4C4FB27,   162,   68 },
+            { 0xB0DE65388CC8ADA8,   189,   76 },
+            { 0x83C7088E1AAB65DB,   216,   84 },
+            { 0xC45D1DF942711D9A,   242,   92 },
+            { 0x924D692CA61BE758,   269,  100 },
+            { 0xDA01EE641A708DEA,   295,  108 },
+            { 0xA26DA3999AEF774A,   322,  116 },
+            { 0xF209787BB47D6B85,   348,  124 },
+            { 0xB454E4A179DD1877,   375,  132 },
+            { 0x865B86925B9BC5C2,   402,  140 },
+            { 0xC83553C5C8965D3D,   428,  148 },
+            { 0x952AB45CFA97A0B3,   455,  156 },
+            { 0xDE469FBD99A05FE3,   481,  164 },
+            { 0xA59BC234DB398C25,   508,  172 },
+            { 0xF6C69A72A3989F5C,   534,  180 },
+            { 0xB7DCBF5354E9BECE,   561,  188 },
+            { 0x88FCF317F22241E2,   588,  196 },
+            { 0xCC20CE9BD35C78A5,   614,  204 },
+            { 0x98165AF37B2153DF,   641,  212 },
+            { 0xE2A0B5DC971F303A,   667,  220 },
+            { 0xA8D9D1535CE3B396,   694,  228 },
+            { 0xFB9B7CD9A4A7443C,   720,  236 },
+            { 0xBB764C4CA7A44410,   747,  244 },
+            { 0x8BAB8EEFB6409C1A,   774,  252 },
+            { 0xD01FEF10A657842C,   800,  260 },
+            { 0x9B10A4E5E9913129,   827,  268 },
+            { 0xE7109BFBA19C0C9D,   853,  276 },
+            { 0xAC2820D9623BF429,   880,  284 },
+            { 0x80444B5E7AA7CF85,   907,  292 },
+            { 0xBF21E44003ACDD2D,   933,  300 },
+            { 0x8E679C2F5E44FF8F,   960,  308 },
+            { 0xD433179D9C8CB841,   986,  316 },
+            { 0x9E19DB92B4E31BA9,  1013,  324 },
+        }
+    };
+
+    // This computation gives exactly the same results for k as
+    //      k = ceil((kAlpha - e - 1) * 0.30102999566398114)
+    // for |e| <= 1500, but doesn't require floating-point operations.
+    // NB: log_10(2) ~= 78913 / 2^18
+    JSON_ASSERT(e >= -1500);
+    JSON_ASSERT(e <=  1500);
+    const int f = kAlpha - e - 1;
+    const int k = (f * 78913) / (1 << 18) + static_cast<int>(f > 0);
+
+    const int index = (-kCachedPowersMinDecExp + k + (kCachedPowersDecStep - 1)) / kCachedPowersDecStep;
+    JSON_ASSERT(index >= 0);
+    JSON_ASSERT(static_cast<std::size_t>(index) < kCachedPowers.size());
+
+    const cached_power cached = kCachedPowers[static_cast<std::size_t>(index)];
+    JSON_ASSERT(kAlpha <= cached.e + e + 64);
+    JSON_ASSERT(kGamma >= cached.e + e + 64);
+
+    return cached;
+}
+
+/*!
+For n != 0, returns k, such that pow10 := 10^(k-1) <= n < 10^k.
+For n == 0, returns 1 and sets pow10 := 1.
+*/
+inline int find_largest_pow10(const std::uint32_t n, std::uint32_t& pow10)
+{
+    // LCOV_EXCL_START
+    if (n >= 1000000000)
+    {
+        pow10 = 1000000000;
+        return 10;
+    }
+    // LCOV_EXCL_STOP
+    if (n >= 100000000)
+    {
+        pow10 = 100000000;
+        return  9;
+    }
+    if (n >= 10000000)
+    {
+        pow10 = 10000000;
+        return  8;
+    }
+    if (n >= 1000000)
+    {
+        pow10 = 1000000;
+        return  7;
+    }
+    if (n >= 100000)
+    {
+        pow10 = 100000;
+        return  6;
+    }
+    if (n >= 10000)
+    {
+        pow10 = 10000;
+        return  5;
+    }
+    if (n >= 1000)
+    {
+        pow10 = 1000;
+        return  4;
+    }
+    if (n >= 100)
+    {
+        pow10 = 100;
+        return  3;
+    }
+    if (n >= 10)
+    {
+        pow10 = 10;
+        return  2;
+    }
+
+    pow10 = 1;
+    return 1;
+}
+
+inline void grisu2_round(char* buf, int len, std::uint64_t dist, std::uint64_t delta,
+                         std::uint64_t rest, std::uint64_t ten_k)
+{
+    JSON_ASSERT(len >= 1);
+    JSON_ASSERT(dist <= delta);
+    JSON_ASSERT(rest <= delta);
+    JSON_ASSERT(ten_k > 0);
+
+    //               <--------------------------- delta ---->
+    //                                  <---- dist --------->
+    // --------------[------------------+-------------------]--------------
+    //               M-                 w                   M+
+    //
+    //                                  ten_k
+    //                                <------>
+    //                                       <---- rest ---->
+    // --------------[------------------+----+--------------]--------------
+    //                                  w    V
+    //                                       = buf * 10^k
+    //
+    // ten_k represents a unit-in-the-last-place in the decimal representation
+    // stored in buf.
+    // Decrement buf by ten_k while this takes buf closer to w.
+
+    // The tests are written in this order to avoid overflow in unsigned
+    // integer arithmetic.
+
+    while (rest < dist
+            && delta - rest >= ten_k
+            && (rest + ten_k < dist || dist - rest > rest + ten_k - dist))
+    {
+        JSON_ASSERT(buf[len - 1] != '0');
+        buf[len - 1]--;
+        rest += ten_k;
+    }
+}
+
+/*!
+Generates V = buffer * 10^decimal_exponent, such that M- <= V <= M+.
+M- and M+ must be normalized and share the same exponent -60 <= e <= -32.
+*/
+inline void grisu2_digit_gen(char* buffer, int& length, int& decimal_exponent,
+                             diyfp M_minus, diyfp w, diyfp M_plus)
+{
+    static_assert(kAlpha >= -60, "internal error");
+    static_assert(kGamma <= -32, "internal error");
+
+    // Generates the digits (and the exponent) of a decimal floating-point
+    // number V = buffer * 10^decimal_exponent in the range [M-, M+]. The diyfp's
+    // w, M- and M+ share the same exponent e, which satisfies alpha <= e <= gamma.
+    //
+    //               <--------------------------- delta ---->
+    //                                  <---- dist --------->
+    // --------------[------------------+-------------------]--------------
+    //               M-                 w                   M+
+    //
+    // Grisu2 generates the digits of M+ from left to right and stops as soon as
+    // V is in [M-,M+].
+
+    JSON_ASSERT(M_plus.e >= kAlpha);
+    JSON_ASSERT(M_plus.e <= kGamma);
+
+    std::uint64_t delta = diyfp::sub(M_plus, M_minus).f; // (significand of (M+ - M-), implicit exponent is e)
+    std::uint64_t dist  = diyfp::sub(M_plus, w      ).f; // (significand of (M+ - w ), implicit exponent is e)
+
+    // Split M+ = f * 2^e into two parts p1 and p2 (note: e < 0):
+    //
+    //      M+ = f * 2^e
+    //         = ((f div 2^-e) * 2^-e + (f mod 2^-e)) * 2^e
+    //         = ((p1        ) * 2^-e + (p2        )) * 2^e
+    //         = p1 + p2 * 2^e
+
+    const diyfp one(std::uint64_t{1} << -M_plus.e, M_plus.e);
+
+    auto p1 = static_cast<std::uint32_t>(M_plus.f >> -one.e); // p1 = f div 2^-e (Since -e >= 32, p1 fits into a 32-bit int.)
+    std::uint64_t p2 = M_plus.f & (one.f - 1);                    // p2 = f mod 2^-e
+
+    // 1)
+    //
+    // Generate the digits of the integral part p1 = d[n-1]...d[1]d[0]
+
+    JSON_ASSERT(p1 > 0);
+
+    std::uint32_t pow10{};
+    const int k = find_largest_pow10(p1, pow10);
+
+    //      10^(k-1) <= p1 < 10^k, pow10 = 10^(k-1)
+    //
+    //      p1 = (p1 div 10^(k-1)) * 10^(k-1) + (p1 mod 10^(k-1))
+    //         = (d[k-1]         ) * 10^(k-1) + (p1 mod 10^(k-1))
+    //
+    //      M+ = p1                                             + p2 * 2^e
+    //         = d[k-1] * 10^(k-1) + (p1 mod 10^(k-1))          + p2 * 2^e
+    //         = d[k-1] * 10^(k-1) + ((p1 mod 10^(k-1)) * 2^-e + p2) * 2^e
+    //         = d[k-1] * 10^(k-1) + (                         rest) * 2^e
+    //
+    // Now generate the digits d[n] of p1 from left to right (n = k-1,...,0)
+    //
+    //      p1 = d[k-1]...d[n] * 10^n + d[n-1]...d[0]
+    //
+    // but stop as soon as
+    //
+    //      rest * 2^e = (d[n-1]...d[0] * 2^-e + p2) * 2^e <= delta * 2^e
+
+    int n = k;
+    while (n > 0)
+    {
+        // Invariants:
+        //      M+ = buffer * 10^n + (p1 + p2 * 2^e)    (buffer = 0 for n = k)
+        //      pow10 = 10^(n-1) <= p1 < 10^n
+        //
+        const std::uint32_t d = p1 / pow10;  // d = p1 div 10^(n-1)
+        const std::uint32_t r = p1 % pow10;  // r = p1 mod 10^(n-1)
+        //
+        //      M+ = buffer * 10^n + (d * 10^(n-1) + r) + p2 * 2^e
+        //         = (buffer * 10 + d) * 10^(n-1) + (r + p2 * 2^e)
+        //
+        JSON_ASSERT(d <= 9);
+        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d
+        //
+        //      M+ = buffer * 10^(n-1) + (r + p2 * 2^e)
+        //
+        p1 = r;
+        n--;
+        //
+        //      M+ = buffer * 10^n + (p1 + p2 * 2^e)
+        //      pow10 = 10^n
+        //
+
+        // Now check if enough digits have been generated.
+        // Compute
+        //
+        //      p1 + p2 * 2^e = (p1 * 2^-e + p2) * 2^e = rest * 2^e
+        //
+        // Note:
+        // Since rest and delta share the same exponent e, it suffices to
+        // compare the significands.
+        const std::uint64_t rest = (std::uint64_t{p1} << -one.e) + p2;
+        if (rest <= delta)
+        {
+            // V = buffer * 10^n, with M- <= V <= M+.
+
+            decimal_exponent += n;
+
+            // We may now just stop. But instead look if the buffer could be
+            // decremented to bring V closer to w.
+            //
+            // pow10 = 10^n is now 1 ulp in the decimal representation V.
+            // The rounding procedure works with diyfp's with an implicit
+            // exponent of e.
+            //
+            //      10^n = (10^n * 2^-e) * 2^e = ulp * 2^e
+            //
+            const std::uint64_t ten_n = std::uint64_t{pow10} << -one.e;
+            grisu2_round(buffer, length, dist, delta, rest, ten_n);
+
+            return;
+        }
+
+        pow10 /= 10;
+        //
+        //      pow10 = 10^(n-1) <= p1 < 10^n
+        // Invariants restored.
+    }
+
+    // 2)
+    //
+    // The digits of the integral part have been generated:
+    //
+    //      M+ = d[k-1]...d[1]d[0] + p2 * 2^e
+    //         = buffer            + p2 * 2^e
+    //
+    // Now generate the digits of the fractional part p2 * 2^e.
+    //
+    // Note:
+    // No decimal point is generated: the exponent is adjusted instead.
+    //
+    // p2 actually represents the fraction
+    //
+    //      p2 * 2^e
+    //          = p2 / 2^-e
+    //          = d[-1] / 10^1 + d[-2] / 10^2 + ...
+    //
+    // Now generate the digits d[-m] of p1 from left to right (m = 1,2,...)
+    //
+    //      p2 * 2^e = d[-1]d[-2]...d[-m] * 10^-m
+    //                      + 10^-m * (d[-m-1] / 10^1 + d[-m-2] / 10^2 + ...)
+    //
+    // using
+    //
+    //      10^m * p2 = ((10^m * p2) div 2^-e) * 2^-e + ((10^m * p2) mod 2^-e)
+    //                = (                   d) * 2^-e + (                   r)
+    //
+    // or
+    //      10^m * p2 * 2^e = d + r * 2^e
+    //
+    // i.e.
+    //
+    //      M+ = buffer + p2 * 2^e
+    //         = buffer + 10^-m * (d + r * 2^e)
+    //         = (buffer * 10^m + d) * 10^-m + 10^-m * r * 2^e
+    //
+    // and stop as soon as 10^-m * r * 2^e <= delta * 2^e
+
+    JSON_ASSERT(p2 > delta);
+
+    int m = 0;
+    for (;;)
+    {
+        // Invariant:
+        //      M+ = buffer * 10^-m + 10^-m * (d[-m-1] / 10 + d[-m-2] / 10^2 + ...) * 2^e
+        //         = buffer * 10^-m + 10^-m * (p2                                 ) * 2^e
+        //         = buffer * 10^-m + 10^-m * (1/10 * (10 * p2)                   ) * 2^e
+        //         = buffer * 10^-m + 10^-m * (1/10 * ((10*p2 div 2^-e) * 2^-e + (10*p2 mod 2^-e)) * 2^e
+        //
+        JSON_ASSERT(p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10);
+        p2 *= 10;
+        const std::uint64_t d = p2 >> -one.e;     // d = (10 * p2) div 2^-e
+        const std::uint64_t r = p2 & (one.f - 1); // r = (10 * p2) mod 2^-e
+        //
+        //      M+ = buffer * 10^-m + 10^-m * (1/10 * (d * 2^-e + r) * 2^e
+        //         = buffer * 10^-m + 10^-m * (1/10 * (d + r * 2^e))
+        //         = (buffer * 10 + d) * 10^(-m-1) + 10^(-m-1) * r * 2^e
+        //
+        JSON_ASSERT(d <= 9);
+        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d
+        //
+        //      M+ = buffer * 10^(-m-1) + 10^(-m-1) * r * 2^e
+        //
+        p2 = r;
+        m++;
+        //
+        //      M+ = buffer * 10^-m + 10^-m * p2 * 2^e
+        // Invariant restored.
+
+        // Check if enough digits have been generated.
+        //
+        //      10^-m * p2 * 2^e <= delta * 2^e
+        //              p2 * 2^e <= 10^m * delta * 2^e
+        //                    p2 <= 10^m * delta
+        delta *= 10;
+        dist  *= 10;
+        if (p2 <= delta)
+        {
+            break;
+        }
+    }
+
+    // V = buffer * 10^-m, with M- <= V <= M+.
+
+    decimal_exponent -= m;
+
+    // 1 ulp in the decimal representation is now 10^-m.
+    // Since delta and dist are now scaled by 10^m, we need to do the
+    // same with ulp in order to keep the units in sync.
+    //
+    //      10^m * 10^-m = 1 = 2^-e * 2^e = ten_m * 2^e
+    //
+    const std::uint64_t ten_m = one.f;
+    grisu2_round(buffer, length, dist, delta, p2, ten_m);
+
+    // By construction this algorithm generates the shortest possible decimal
+    // number (Loitsch, Theorem 6.2) which rounds back to w.
+    // For an input number of precision p, at least
+    //
+    //      N = 1 + ceil(p * log_10(2))
+    //
+    // decimal digits are sufficient to identify all binary floating-point
+    // numbers (Matula, "In-and-Out conversions").
+    // This implies that the algorithm does not produce more than N decimal
+    // digits.
+    //
+    //      N = 17 for p = 53 (IEEE double precision)
+    //      N = 9  for p = 24 (IEEE single precision)
+}
+
+/*!
+v = buf * 10^decimal_exponent
+len is the length of the buffer (number of decimal digits)
+The buffer must be large enough, i.e. >= max_digits10.
+*/
+JSON_HEDLEY_NON_NULL(1)
+inline void grisu2(char* buf, int& len, int& decimal_exponent,
+                   diyfp m_minus, diyfp v, diyfp m_plus)
+{
+    JSON_ASSERT(m_plus.e == m_minus.e);
+    JSON_ASSERT(m_plus.e == v.e);
+
+    //  --------(-----------------------+-----------------------)--------    (A)
+    //          m-                      v                       m+
+    //
+    //  --------------------(-----------+-----------------------)--------    (B)
+    //                      m-          v                       m+
+    //
+    // First scale v (and m- and m+) such that the exponent is in the range
+    // [alpha, gamma].
+
+    const cached_power cached = get_cached_power_for_binary_exponent(m_plus.e);
+
+    const diyfp c_minus_k(cached.f, cached.e); // = c ~= 10^-k
+
+    // The exponent of the products is = v.e + c_minus_k.e + q and is in the range [alpha,gamma]
+    const diyfp w       = diyfp::mul(v,       c_minus_k);
+    const diyfp w_minus = diyfp::mul(m_minus, c_minus_k);
+    const diyfp w_plus  = diyfp::mul(m_plus,  c_minus_k);
+
+    //  ----(---+---)---------------(---+---)---------------(---+---)----
+    //          w-                      w                       w+
+    //          = c*m-                  = c*v                   = c*m+
+    //
+    // diyfp::mul rounds its result and c_minus_k is approximated too. w, w- and
+    // w+ are now off by a small amount.
+    // In fact:
+    //
+    //      w - v * 10^k < 1 ulp
+    //
+    // To account for this inaccuracy, add resp. subtract 1 ulp.
+    //
+    //  --------+---[---------------(---+---)---------------]---+--------
+    //          w-  M-                  w                   M+  w+
+    //
+    // Now any number in [M-, M+] (bounds included) will round to w when input,
+    // regardless of how the input rounding algorithm breaks ties.
+    //
+    // And digit_gen generates the shortest possible such number in [M-, M+].
+    // Note that this does not mean that Grisu2 always generates the shortest
+    // possible number in the interval (m-, m+).
+    const diyfp M_minus(w_minus.f + 1, w_minus.e);
+    const diyfp M_plus (w_plus.f  - 1, w_plus.e );
+
+    decimal_exponent = -cached.k; // = -(-k) = k
+
+    grisu2_digit_gen(buf, len, decimal_exponent, M_minus, w, M_plus);
+}
+
+/*!
+v = buf * 10^decimal_exponent
+len is the length of the buffer (number of decimal digits)
+The buffer must be large enough, i.e. >= max_digits10.
+*/
+template<typename FloatType>
+JSON_HEDLEY_NON_NULL(1)
+void grisu2(char* buf, int& len, int& decimal_exponent, FloatType value)
+{
+    static_assert(diyfp::kPrecision >= std::numeric_limits<FloatType>::digits + 3,
+                  "internal error: not enough precision");
+
+    JSON_ASSERT(std::isfinite(value));
+    JSON_ASSERT(value > 0);
+
+    // If the neighbors (and boundaries) of 'value' are always computed for double-precision
+    // numbers, all float's can be recovered using strtod (and strtof). However, the resulting
+    // decimal representations are not exactly "short".
+    //
+    // The documentation for 'std::to_chars' (https://en.cppreference.com/w/cpp/utility/to_chars)
+    // says "value is converted to a string as if by std::sprintf in the default ("C") locale"
+    // and since sprintf promotes floats to doubles, I think this is exactly what 'std::to_chars'
+    // does.
+    // On the other hand, the documentation for 'std::to_chars' requires that "parsing the
+    // representation using the corresponding std::from_chars function recovers value exactly". That
+    // indicates that single precision floating-point numbers should be recovered using
+    // 'std::strtof'.
+    //
+    // NB: If the neighbors are computed for single-precision numbers, there is a single float
+    //     (7.0385307e-26f) which can't be recovered using strtod. The resulting double precision
+    //     value is off by 1 ulp.
+#if 0
+    const boundaries w = compute_boundaries(static_cast<double>(value));
+#else
+    const boundaries w = compute_boundaries(value);
+#endif
+
+    grisu2(buf, len, decimal_exponent, w.minus, w.w, w.plus);
+}
+
+/*!
+@brief appends a decimal representation of e to buf
+@return a pointer to the element following the exponent.
+@pre -1000 < e < 1000
+*/
+JSON_HEDLEY_NON_NULL(1)
+JSON_HEDLEY_RETURNS_NON_NULL
+inline char* append_exponent(char* buf, int e)
+{
+    JSON_ASSERT(e > -1000);
+    JSON_ASSERT(e <  1000);
+
+    if (e < 0)
+    {
+        e = -e;
+        *buf++ = '-';
+    }
+    else
+    {
+        *buf++ = '+';
+    }
+
+    auto k = static_cast<std::uint32_t>(e);
+    if (k < 10)
+    {
+        // Always print at least two digits in the exponent.
+        // This is for compatibility with printf("%g").
+        *buf++ = '0';
+        *buf++ = static_cast<char>('0' + k);
+    }
+    else if (k < 100)
+    {
+        *buf++ = static_cast<char>('0' + k / 10);
+        k %= 10;
+        *buf++ = static_cast<char>('0' + k);
+    }
+    else
+    {
+        *buf++ = static_cast<char>('0' + k / 100);
+        k %= 100;
+        *buf++ = static_cast<char>('0' + k / 10);
+        k %= 10;
+        *buf++ = static_cast<char>('0' + k);
+    }
+
+    return buf;
+}
+
+/*!
+@brief prettify v = buf * 10^decimal_exponent
+
+If v is in the range [10^min_exp, 10^max_exp) it will be printed in fixed-point
+notation. Otherwise it will be printed in exponential notation.
+
+@pre min_exp < 0
+@pre max_exp > 0
+*/
+JSON_HEDLEY_NON_NULL(1)
+JSON_HEDLEY_RETURNS_NON_NULL
+inline char* format_buffer(char* buf, int len, int decimal_exponent,
+                           int min_exp, int max_exp)
+{
+    JSON_ASSERT(min_exp < 0);
+    JSON_ASSERT(max_exp > 0);
+
+    const int k = len;
+    const int n = len + decimal_exponent;
+
+    // v = buf * 10^(n-k)
+    // k is the length of the buffer (number of decimal digits)
+    // n is the position of the decimal point relative to the start of the buffer.
+
+    if (k <= n && n <= max_exp)
+    {
+        // digits[000]
+        // len <= max_exp + 2
+
+        std::memset(buf + k, '0', static_cast<size_t>(n) - static_cast<size_t>(k));
+        // Make it look like a floating-point number (#362, #378)
+        buf[n + 0] = '.';
+        buf[n + 1] = '0';
+        return buf + (static_cast<size_t>(n) + 2);
+    }
+
+    if (0 < n && n <= max_exp)
+    {
+        // dig.its
+        // len <= max_digits10 + 1
+
+        JSON_ASSERT(k > n);
+
+        std::memmove(buf + (static_cast<size_t>(n) + 1), buf + n, static_cast<size_t>(k) - static_cast<size_t>(n));
+        buf[n] = '.';
+        return buf + (static_cast<size_t>(k) + 1U);
+    }
+
+    if (min_exp < n && n <= 0)
+    {
+        // 0.[000]digits
+        // len <= 2 + (-min_exp - 1) + max_digits10
+
+        std::memmove(buf + (2 + static_cast<size_t>(-n)), buf, static_cast<size_t>(k));
+        buf[0] = '0';
+        buf[1] = '.';
+        std::memset(buf + 2, '0', static_cast<size_t>(-n));
+        return buf + (2U + static_cast<size_t>(-n) + static_cast<size_t>(k));
+    }
+
+    if (k == 1)
+    {
+        // dE+123
+        // len <= 1 + 5
+
+        buf += 1;
+    }
+    else
+    {
+        // d.igitsE+123
+        // len <= max_digits10 + 1 + 5
+
+        std::memmove(buf + 2, buf + 1, static_cast<size_t>(k) - 1);
+        buf[1] = '.';
+        buf += 1 + static_cast<size_t>(k);
+    }
+
+    *buf++ = 'e';
+    return append_exponent(buf, n - 1);
+}
+
+}  // namespace dtoa_impl
+
+/*!
+@brief generates a decimal representation of the floating-point number value in [first, last).
+
+The format of the resulting decimal representation is similar to printf's %g
+format. Returns an iterator pointing past-the-end of the decimal representation.
+
+@note The input number must be finite, i.e. NaN's and Inf's are not supported.
+@note The buffer must be large enough.
+@note The result is NOT null-terminated.
+*/
+template<typename FloatType>
+JSON_HEDLEY_NON_NULL(1, 2)
+JSON_HEDLEY_RETURNS_NON_NULL
+char* to_chars(char* first, const char* last, FloatType value)
+{
+    static_cast<void>(last); // maybe unused - fix warning
+    JSON_ASSERT(std::isfinite(value));
+
+    // Use signbit(value) instead of (value < 0) since signbit works for -0.
+    if (std::signbit(value))
+    {
+        value = -value;
+        *first++ = '-';
+    }
+
+#ifdef __GNUC__
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wfloat-equal"
+#endif
+    if (value == 0) // +-0
+    {
+        *first++ = '0';
+        // Make it look like a floating-point number (#362, #378)
+        *first++ = '.';
+        *first++ = '0';
+        return first;
+    }
+#ifdef __GNUC__
+#pragma GCC diagnostic pop
+#endif
+
+    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10);
+
+    // Compute v = buffer * 10^decimal_exponent.
+    // The decimal digits are stored in the buffer, which needs to be interpreted
+    // as an unsigned decimal integer.
+    // len is the length of the buffer, i.e. the number of decimal digits.
+    int len = 0;
+    int decimal_exponent = 0;
+    dtoa_impl::grisu2(first, len, decimal_exponent, value);
+
+    JSON_ASSERT(len <= std::numeric_limits<FloatType>::max_digits10);
+
+    // Format the buffer like printf("%.*g", prec, value)
+    constexpr int kMinExp = -4;
+    // Use digits10 here to increase compatibility with version 2.
+    constexpr int kMaxExp = std::numeric_limits<FloatType>::digits10;
+
+    JSON_ASSERT(last - first >= kMaxExp + 2);
+    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);
+    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10 + 6);
+
+    return dtoa_impl::format_buffer(first, len, decimal_exponent, kMinExp, kMaxExp);
+}
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/exceptions.hpp>
+
+// #include <nlohmann/detail/macro_scope.hpp>
+
+// #include <nlohmann/detail/meta/cpp_future.hpp>
+
+// #include <nlohmann/detail/output/binary_writer.hpp>
+
+// #include <nlohmann/detail/output/output_adapters.hpp>
+
+// #include <nlohmann/detail/string_concat.hpp>
+
+// #include <nlohmann/detail/value_t.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+namespace detail
+{
+
+///////////////////
+// serialization //
+///////////////////
+
+/// how to treat decoding errors
+enum class error_handler_t
+{
+    strict,  ///< throw a type_error exception in case of invalid UTF-8
+    replace, ///< replace invalid UTF-8 sequences with U+FFFD
+    ignore   ///< ignore invalid UTF-8 sequences
+};
+
+template<typename BasicJsonType>
+class serializer
+{
+    using string_t = typename BasicJsonType::string_t;
+    using number_float_t = typename BasicJsonType::number_float_t;
+    using number_integer_t = typename BasicJsonType::number_integer_t;
+    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
+    using binary_char_t = typename BasicJsonType::binary_t::value_type;
+    static constexpr std::uint8_t UTF8_ACCEPT = 0;
+    static constexpr std::uint8_t UTF8_REJECT = 1;
+
+  public:
+    /*!
+    @param[in] s  output stream to serialize to
+    @param[in] ichar  indentation character to use
+    @param[in] error_handler_  how to react on decoding errors
+    */
+    serializer(output_adapter_t<char> s, const char ichar,
+               error_handler_t error_handler_ = error_handler_t::strict)
+        : o(std::move(s))
+        , loc(std::localeconv())
+        , thousands_sep(loc->thousands_sep == nullptr ? '\0' : std::char_traits<char>::to_char_type(* (loc->thousands_sep)))
+        , decimal_point(loc->decimal_point == nullptr ? '\0' : std::char_traits<char>::to_char_type(* (loc->decimal_point)))
+        , indent_char(ichar)
+        , indent_string(512, indent_char)
+        , error_handler(error_handler_)
+    {}
+
+    // delete because of pointer members
+    serializer(const serializer&) = delete;
+    serializer& operator=(const serializer&) = delete;
+    serializer(serializer&&) = delete;
+    serializer& operator=(serializer&&) = delete;
+    ~serializer() = default;
+
+    /*!
+    @brief internal implementation of the serialization function
+
+    This function is called by the public member function dump and organizes
+    the serialization internally. The indentation level is propagated as
+    additional parameter. In case of arrays and objects, the function is
+    called recursively.
+
+    - strings and object keys are escaped using `escape_string()`
+    - integer numbers are converted implicitly via `operator<<`
+    - floating-point numbers are converted to a string using `"%g"` format
+    - binary values are serialized as objects containing the subtype and the
+      byte array
+
+    @param[in] val               value to serialize
+    @param[in] pretty_print      whether the output shall be pretty-printed
+    @param[in] ensure_ascii If @a ensure_ascii is true, all non-ASCII characters
+    in the output are escaped with `\uXXXX` sequences, and the result consists
+    of ASCII characters only.
+    @param[in] indent_step       the indent level
+    @param[in] current_indent    the current indent level (only used internally)
+    */
+    void dump(const BasicJsonType& val,
+              const bool pretty_print,
+              const bool ensure_ascii,
+              const unsigned int indent_step,
+              const unsigned int current_indent = 0)
+    {
+        switch (val.m_type)
+        {
+            case value_t::object:
+            {
+                if (val.m_value.object->empty())
+                {
+                    o->write_characters("{}", 2);
+                    return;
+                }
+
+                if (pretty_print)
+                {
+                    o->write_characters("{\n", 2);
+
+                    // variable to hold indentation for recursive calls
+                    const auto new_indent = current_indent + indent_step;
+                    if (JSON_HEDLEY_UNLIKELY(indent_string.size() < new_indent))
+                    {
+                        indent_string.resize(indent_string.size() * 2, ' ');
+                    }
+
+                    // first n-1 elements
+                    auto i = val.m_value.object->cbegin();
+                    for (std::size_t cnt = 0; cnt < val.m_value.object->size() - 1; ++cnt, ++i)
+                    {
+                        o->write_characters(indent_string.c_str(), new_indent);
+                        o->write_character('\"');
+                        dump_escaped(i->first, ensure_ascii);
+                        o->write_characters("\": ", 3);
+                        dump(i->second, true, ensure_ascii, indent_step, new_indent);
+                        o->write_characters(",\n", 2);
+                    }
+
+                    // last element
+                    JSON_ASSERT(i != val.m_value.object->cend());
+                    JSON_ASSERT(std::next(i) == val.m_value.object->cend());
+                    o->write_characters(indent_string.c_str(), new_indent);
+                    o->write_character('\"');
+                    dump_escaped(i->first, ensure_ascii);
+                    o->write_characters("\": ", 3);
+                    dump(i->second, true, ensure_ascii, indent_step, new_indent);
+
+                    o->write_character('\n');
+                    o->write_characters(indent_string.c_str(), current_indent);
+                    o->write_character('}');
+                }
+                else
+                {
+                    o->write_character('{');
+
+                    // first n-1 elements
+                    auto i = val.m_value.object->cbegin();
+                    for (std::size_t cnt = 0; cnt < val.m_value.object->size() - 1; ++cnt, ++i)
+                    {
+                        o->write_character('\"');
+                        dump_escaped(i->first, ensure_ascii);
+                        o->write_characters("\":", 2);
+                        dump(i->second, false, ensure_ascii, indent_step, current_indent);
+                        o->write_character(',');
+                    }
+
+                    // last element
+                    JSON_ASSERT(i != val.m_value.object->cend());
+                    JSON_ASSERT(std::next(i) == val.m_value.object->cend());
+                    o->write_character('\"');
+                    dump_escaped(i->first, ensure_ascii);
+                    o->write_characters("\":", 2);
+                    dump(i->second, false, ensure_ascii, indent_step, current_indent);
+
+                    o->write_character('}');
+                }
+
+                return;
+            }
+
+            case value_t::array:
+            {
+                if (val.m_value.array->empty())
+                {
+                    o->write_characters("[]", 2);
+                    return;
+                }
+
+                if (pretty_print)
+                {
+                    o->write_characters("[\n", 2);
+
+                    // variable to hold indentation for recursive calls
+                    const auto new_indent = current_indent + indent_step;
+                    if (JSON_HEDLEY_UNLIKELY(indent_string.size() < new_indent))
+                    {
+                        indent_string.resize(indent_string.size() * 2, ' ');
+                    }
+
+                    // first n-1 elements
+                    for (auto i = val.m_value.array->cbegin();
+                            i != val.m_value.array->cend() - 1; ++i)
+                    {
+                        o->write_characters(indent_string.c_str(), new_indent);
+                        dump(*i, true, ensure_ascii, indent_step, new_indent);
+                        o->write_characters(",\n", 2);
+                    }
+
+                    // last element
+                    JSON_ASSERT(!val.m_value.array->empty());
+                    o->write_characters(indent_string.c_str(), new_indent);
+                    dump(val.m_value.array->back(), true, ensure_ascii, indent_step, new_indent);
+
+                    o->write_character('\n');
+                    o->write_characters(indent_string.c_str(), current_indent);
+                    o->write_character(']');
+                }
+                else
+                {
+                    o->write_character('[');
+
+                    // first n-1 elements
+                    for (auto i = val.m_value.array->cbegin();
+                            i != val.m_value.array->cend() - 1; ++i)
+                    {
+                        dump(*i, false, ensure_ascii, indent_step, current_indent);
+                        o->write_character(',');
+                    }
+
+                    // last element
+                    JSON_ASSERT(!val.m_value.array->empty());
+                    dump(val.m_value.array->back(), false, ensure_ascii, indent_step, current_indent);
+
+                    o->write_character(']');
+                }
+
+                return;
+            }
+
+            case value_t::string:
+            {
+                o->write_character('\"');
+                dump_escaped(*val.m_value.string, ensure_ascii);
+                o->write_character('\"');
+                return;
+            }
+
+            case value_t::binary:
+            {
+                if (pretty_print)
+                {
+                    o->write_characters("{\n", 2);
+
+                    // variable to hold indentation for recursive calls
+                    const auto new_indent = current_indent + indent_step;
+                    if (JSON_HEDLEY_UNLIKELY(indent_string.size() < new_indent))
+                    {
+                        indent_string.resize(indent_string.size() * 2, ' ');
+                    }
+
+                    o->write_characters(indent_string.c_str(), new_indent);
+
+                    o->write_characters("\"bytes\": [", 10);
+
+                    if (!val.m_value.binary->empty())
+                    {
+                        for (auto i = val.m_value.binary->cbegin();
+                                i != val.m_value.binary->cend() - 1; ++i)
+                        {
+                            dump_integer(*i);
+                            o->write_characters(", ", 2);
+                        }
+                        dump_integer(val.m_value.binary->back());
+                    }
+
+                    o->write_characters("],\n", 3);
+                    o->write_characters(indent_string.c_str(), new_indent);
+
+                    o->write_characters("\"subtype\": ", 11);
+                    if (val.m_value.binary->has_subtype())
+                    {
+                        dump_integer(val.m_value.binary->subtype());
+                    }
+                    else
+                    {
+                        o->write_characters("null", 4);
+                    }
+                    o->write_character('\n');
+                    o->write_characters(indent_string.c_str(), current_indent);
+                    o->write_character('}');
+                }
+                else
+                {
+                    o->write_characters("{\"bytes\":[", 10);
+
+                    if (!val.m_value.binary->empty())
+                    {
+                        for (auto i = val.m_value.binary->cbegin();
+                                i != val.m_value.binary->cend() - 1; ++i)
+                        {
+                            dump_integer(*i);
+                            o->write_character(',');
+                        }
+                        dump_integer(val.m_value.binary->back());
+                    }
+
+                    o->write_characters("],\"subtype\":", 12);
+                    if (val.m_value.binary->has_subtype())
+                    {
+                        dump_integer(val.m_value.binary->subtype());
+                        o->write_character('}');
+                    }
+                    else
+                    {
+                        o->write_characters("null}", 5);
+                    }
+                }
+                return;
+            }
+
+            case value_t::boolean:
+            {
+                if (val.m_value.boolean)
+                {
+                    o->write_characters("true", 4);
+                }
+                else
+                {
+                    o->write_characters("false", 5);
+                }
+                return;
+            }
+
+            case value_t::number_integer:
+            {
+                dump_integer(val.m_value.number_integer);
+                return;
+            }
+
+            case value_t::number_unsigned:
+            {
+                dump_integer(val.m_value.number_unsigned);
+                return;
+            }
+
+            case value_t::number_float:
+            {
+                dump_float(val.m_value.number_float);
+                return;
+            }
+
+            case value_t::discarded:
+            {
+                o->write_characters("<discarded>", 11);
+                return;
+            }
+
+            case value_t::null:
+            {
+                o->write_characters("null", 4);
+                return;
+            }
+
+            default:            // LCOV_EXCL_LINE
+                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE
+        }
+    }
+
+  JSON_PRIVATE_UNLESS_TESTED:
+    /*!
+    @brief dump escaped string
+
+    Escape a string by replacing certain special characters by a sequence of an
+    escape character (backslash) and another character and other control
+    characters by a sequence of "\u" followed by a four-digit hex
+    representation. The escaped string is written to output stream @a o.
+
+    @param[in] s  the string to escape
+    @param[in] ensure_ascii  whether to escape non-ASCII characters with
+                             \uXXXX sequences
+
+    @complexity Linear in the length of string @a s.
+    */
+    void dump_escaped(const string_t& s, const bool ensure_ascii)
+    {
+        std::uint32_t codepoint{};
+        std::uint8_t state = UTF8_ACCEPT;
+        std::size_t bytes = 0;  // number of bytes written to string_buffer
+
+        // number of bytes written at the point of the last valid byte
+        std::size_t bytes_after_last_accept = 0;
+        std::size_t undumped_chars = 0;
+
+        for (std::size_t i = 0; i < s.size(); ++i)
+        {
+            const auto byte = static_cast<std::uint8_t>(s[i]);
+
+            switch (decode(state, codepoint, byte))
+            {
+                case UTF8_ACCEPT:  // decode found a new code point
+                {
+                    switch (codepoint)
+                    {
+                        case 0x08: // backspace
+                        {
+                            string_buffer[bytes++] = '\\';
+                            string_buffer[bytes++] = 'b';
+                            break;
+                        }
+
+                        case 0x09: // horizontal tab
+                        {
+                            string_buffer[bytes++] = '\\';
+                            string_buffer[bytes++] = 't';
+                            break;
+                        }
+
+                        case 0x0A: // newline
+                        {
+                            string_buffer[bytes++] = '\\';
+                            string_buffer[bytes++] = 'n';
+                            break;
+                        }
+
+                        case 0x0C: // formfeed
+                        {
+                            string_buffer[bytes++] = '\\';
+                            string_buffer[bytes++] = 'f';
+                            break;
+                        }
+
+                        case 0x0D: // carriage return
+                        {
+                            string_buffer[bytes++] = '\\';
+                            string_buffer[bytes++] = 'r';
+                            break;
+                        }
+
+                        case 0x22: // quotation mark
+                        {
+                            string_buffer[bytes++] = '\\';
+                            string_buffer[bytes++] = '\"';
+                            break;
+                        }
+
+                        case 0x5C: // reverse solidus
+                        {
+                            string_buffer[bytes++] = '\\';
+                            string_buffer[bytes++] = '\\';
+                            break;
+                        }
+
+                        default:
+                        {
+                            // escape control characters (0x00..0x1F) or, if
+                            // ensure_ascii parameter is used, non-ASCII characters
+                            if ((codepoint <= 0x1F) || (ensure_ascii && (codepoint >= 0x7F)))
+                            {
+                                if (codepoint <= 0xFFFF)
+                                {
+                                    // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)
+                                    static_cast<void>((std::snprintf)(string_buffer.data() + bytes, 7, "\\u%04x",
+                                                                      static_cast<std::uint16_t>(codepoint)));
+                                    bytes += 6;
+                                }
+                                else
+                                {
+                                    // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)
+                                    static_cast<void>((std::snprintf)(string_buffer.data() + bytes, 13, "\\u%04x\\u%04x",
+                                                                      static_cast<std::uint16_t>(0xD7C0u + (codepoint >> 10u)),
+                                                                      static_cast<std::uint16_t>(0xDC00u + (codepoint & 0x3FFu))));
+                                    bytes += 12;
+                                }
+                            }
+                            else
+                            {
+                                // copy byte to buffer (all previous bytes
+                                // been copied have in default case above)
+                                string_buffer[bytes++] = s[i];
+                            }
+                            break;
+                        }
+                    }
+
+                    // write buffer and reset index; there must be 13 bytes
+                    // left, as this is the maximal number of bytes to be
+                    // written ("\uxxxx\uxxxx\0") for one code point
+                    if (string_buffer.size() - bytes < 13)
+                    {
+                        o->write_characters(string_buffer.data(), bytes);
+                        bytes = 0;
+                    }
+
+                    // remember the byte position of this accept
+                    bytes_after_last_accept = bytes;
+                    undumped_chars = 0;
+                    break;
+                }
+
+                case UTF8_REJECT:  // decode found invalid UTF-8 byte
+                {
+                    switch (error_handler)
+                    {
+                        case error_handler_t::strict:
+                        {
+                            JSON_THROW(type_error::create(316, concat("invalid UTF-8 byte at index ", std::to_string(i), ": 0x", hex_bytes(byte | 0)), nullptr));
+                        }
+
+                        case error_handler_t::ignore:
+                        case error_handler_t::replace:
+                        {
+                            // in case we saw this character the first time, we
+                            // would like to read it again, because the byte
+                            // may be OK for itself, but just not OK for the
+                            // previous sequence
+                            if (undumped_chars > 0)
+                            {
+                                --i;
+                            }
+
+                            // reset length buffer to the last accepted index;
+                            // thus removing/ignoring the invalid characters
+                            bytes = bytes_after_last_accept;
+
+                            if (error_handler == error_handler_t::replace)
+                            {
+                                // add a replacement character
+                                if (ensure_ascii)
+                                {
+                                    string_buffer[bytes++] = '\\';
+                                    string_buffer[bytes++] = 'u';
+                                    string_buffer[bytes++] = 'f';
+                                    string_buffer[bytes++] = 'f';
+                                    string_buffer[bytes++] = 'f';
+                                    string_buffer[bytes++] = 'd';
+                                }
+                                else
+                                {
+                                    string_buffer[bytes++] = detail::binary_writer<BasicJsonType, char>::to_char_type('\xEF');
+                                    string_buffer[bytes++] = detail::binary_writer<BasicJsonType, char>::to_char_type('\xBF');
+                                    string_buffer[bytes++] = detail::binary_writer<BasicJsonType, char>::to_char_type('\xBD');
+                                }
+
+                                // write buffer and reset index; there must be 13 bytes
+                                // left, as this is the maximal number of bytes to be
+                                // written ("\uxxxx\uxxxx\0") for one code point
+                                if (string_buffer.size() - bytes < 13)
+                                {
+                                    o->write_characters(string_buffer.data(), bytes);
+                                    bytes = 0;
+                                }
+
+                                bytes_after_last_accept = bytes;
+                            }
+
+                            undumped_chars = 0;
+
+                            // continue processing the string
+                            state = UTF8_ACCEPT;
+                            break;
+                        }
+
+                        default:            // LCOV_EXCL_LINE
+                            JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE
+                    }
+                    break;
+                }
+
+                default:  // decode found yet incomplete multi-byte code point
+                {
+                    if (!ensure_ascii)
+                    {
+                        // code point will not be escaped - copy byte to buffer
+                        string_buffer[bytes++] = s[i];
+                    }
+                    ++undumped_chars;
+                    break;
+                }
+            }
+        }
+
+        // we finished processing the string
+        if (JSON_HEDLEY_LIKELY(state == UTF8_ACCEPT))
+        {
+            // write buffer
+            if (bytes > 0)
+            {
+                o->write_characters(string_buffer.data(), bytes);
+            }
+        }
+        else
+        {
+            // we finish reading, but do not accept: string was incomplete
+            switch (error_handler)
+            {
+                case error_handler_t::strict:
+                {
+                    JSON_THROW(type_error::create(316, concat("incomplete UTF-8 string; last byte: 0x", hex_bytes(static_cast<std::uint8_t>(s.back() | 0))), nullptr));
+                }
+
+                case error_handler_t::ignore:
+                {
+                    // write all accepted bytes
+                    o->write_characters(string_buffer.data(), bytes_after_last_accept);
+                    break;
+                }
+
+                case error_handler_t::replace:
+                {
+                    // write all accepted bytes
+                    o->write_characters(string_buffer.data(), bytes_after_last_accept);
+                    // add a replacement character
+                    if (ensure_ascii)
+                    {
+                        o->write_characters("\\ufffd", 6);
+                    }
+                    else
+                    {
+                        o->write_characters("\xEF\xBF\xBD", 3);
+                    }
+                    break;
+                }
+
+                default:            // LCOV_EXCL_LINE
+                    JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE
+            }
+        }
+    }
+
+  private:
+    /*!
+    @brief count digits
+
+    Count the number of decimal (base 10) digits for an input unsigned integer.
+
+    @param[in] x  unsigned integer number to count its digits
+    @return    number of decimal digits
+    */
+    inline unsigned int count_digits(number_unsigned_t x) noexcept
+    {
+        unsigned int n_digits = 1;
+        for (;;)
+        {
+            if (x < 10)
+            {
+                return n_digits;
+            }
+            if (x < 100)
+            {
+                return n_digits + 1;
+            }
+            if (x < 1000)
+            {
+                return n_digits + 2;
+            }
+            if (x < 10000)
+            {
+                return n_digits + 3;
+            }
+            x = x / 10000u;
+            n_digits += 4;
+        }
+    }
+
+    /*!
+     * @brief convert a byte to a uppercase hex representation
+     * @param[in] byte byte to represent
+     * @return representation ("00".."FF")
+     */
+    static std::string hex_bytes(std::uint8_t byte)
+    {
+        std::string result = "FF";
+        constexpr const char* nibble_to_hex = "0123456789ABCDEF";
+        result[0] = nibble_to_hex[byte / 16];
+        result[1] = nibble_to_hex[byte % 16];
+        return result;
+    }
+
+    // templates to avoid warnings about useless casts
+    template <typename NumberType, enable_if_t<std::is_signed<NumberType>::value, int> = 0>
+    bool is_negative_number(NumberType x)
+    {
+        return x < 0;
+    }
+
+    template < typename NumberType, enable_if_t <std::is_unsigned<NumberType>::value, int > = 0 >
+    bool is_negative_number(NumberType /*unused*/)
+    {
+        return false;
+    }
+
+    /*!
+    @brief dump an integer
+
+    Dump a given integer to output stream @a o. Works internally with
+    @a number_buffer.
+
+    @param[in] x  integer number (signed or unsigned) to dump
+    @tparam NumberType either @a number_integer_t or @a number_unsigned_t
+    */
+    template < typename NumberType, detail::enable_if_t <
+                   std::is_integral<NumberType>::value ||
+                   std::is_same<NumberType, number_unsigned_t>::value ||
+                   std::is_same<NumberType, number_integer_t>::value ||
+                   std::is_same<NumberType, binary_char_t>::value,
+                   int > = 0 >
+    void dump_integer(NumberType x)
+    {
+        static constexpr std::array<std::array<char, 2>, 100> digits_to_99
+        {
+            {
+                {{'0', '0'}}, {{'0', '1'}}, {{'0', '2'}}, {{'0', '3'}}, {{'0', '4'}}, {{'0', '5'}}, {{'0', '6'}}, {{'0', '7'}}, {{'0', '8'}}, {{'0', '9'}},
+                {{'1', '0'}}, {{'1', '1'}}, {{'1', '2'}}, {{'1', '3'}}, {{'1', '4'}}, {{'1', '5'}}, {{'1', '6'}}, {{'1', '7'}}, {{'1', '8'}}, {{'1', '9'}},
+                {{'2', '0'}}, {{'2', '1'}}, {{'2', '2'}}, {{'2', '3'}}, {{'2', '4'}}, {{'2', '5'}}, {{'2', '6'}}, {{'2', '7'}}, {{'2', '8'}}, {{'2', '9'}},
+                {{'3', '0'}}, {{'3', '1'}}, {{'3', '2'}}, {{'3', '3'}}, {{'3', '4'}}, {{'3', '5'}}, {{'3', '6'}}, {{'3', '7'}}, {{'3', '8'}}, {{'3', '9'}},
+                {{'4', '0'}}, {{'4', '1'}}, {{'4', '2'}}, {{'4', '3'}}, {{'4', '4'}}, {{'4', '5'}}, {{'4', '6'}}, {{'4', '7'}}, {{'4', '8'}}, {{'4', '9'}},
+                {{'5', '0'}}, {{'5', '1'}}, {{'5', '2'}}, {{'5', '3'}}, {{'5', '4'}}, {{'5', '5'}}, {{'5', '6'}}, {{'5', '7'}}, {{'5', '8'}}, {{'5', '9'}},
+                {{'6', '0'}}, {{'6', '1'}}, {{'6', '2'}}, {{'6', '3'}}, {{'6', '4'}}, {{'6', '5'}}, {{'6', '6'}}, {{'6', '7'}}, {{'6', '8'}}, {{'6', '9'}},
+                {{'7', '0'}}, {{'7', '1'}}, {{'7', '2'}}, {{'7', '3'}}, {{'7', '4'}}, {{'7', '5'}}, {{'7', '6'}}, {{'7', '7'}}, {{'7', '8'}}, {{'7', '9'}},
+                {{'8', '0'}}, {{'8', '1'}}, {{'8', '2'}}, {{'8', '3'}}, {{'8', '4'}}, {{'8', '5'}}, {{'8', '6'}}, {{'8', '7'}}, {{'8', '8'}}, {{'8', '9'}},
+                {{'9', '0'}}, {{'9', '1'}}, {{'9', '2'}}, {{'9', '3'}}, {{'9', '4'}}, {{'9', '5'}}, {{'9', '6'}}, {{'9', '7'}}, {{'9', '8'}}, {{'9', '9'}},
+            }
+        };
+
+        // special case for "0"
+        if (x == 0)
+        {
+            o->write_character('0');
+            return;
+        }
+
+        // use a pointer to fill the buffer
+        auto buffer_ptr = number_buffer.begin(); // NOLINT(llvm-qualified-auto,readability-qualified-auto,cppcoreguidelines-pro-type-vararg,hicpp-vararg)
+
+        number_unsigned_t abs_value;
+
+        unsigned int n_chars{};
+
+        if (is_negative_number(x))
+        {
+            *buffer_ptr = '-';
+            abs_value = remove_sign(static_cast<number_integer_t>(x));
+
+            // account one more byte for the minus sign
+            n_chars = 1 + count_digits(abs_value);
+        }
+        else
+        {
+            abs_value = static_cast<number_unsigned_t>(x);
+            n_chars = count_digits(abs_value);
+        }
+
+        // spare 1 byte for '\0'
+        JSON_ASSERT(n_chars < number_buffer.size() - 1);
+
+        // jump to the end to generate the string from backward,
+        // so we later avoid reversing the result
+        buffer_ptr += n_chars;
+
+        // Fast int2ascii implementation inspired by "Fastware" talk by Andrei Alexandrescu
+        // See: https://www.youtube.com/watch?v=o4-CwDo2zpg
+        while (abs_value >= 100)
+        {
+            const auto digits_index = static_cast<unsigned>((abs_value % 100));
+            abs_value /= 100;
+            *(--buffer_ptr) = digits_to_99[digits_index][1];
+            *(--buffer_ptr) = digits_to_99[digits_index][0];
+        }
+
+        if (abs_value >= 10)
+        {
+            const auto digits_index = static_cast<unsigned>(abs_value);
+            *(--buffer_ptr) = digits_to_99[digits_index][1];
+            *(--buffer_ptr) = digits_to_99[digits_index][0];
+        }
+        else
+        {
+            *(--buffer_ptr) = static_cast<char>('0' + abs_value);
+        }
+
+        o->write_characters(number_buffer.data(), n_chars);
+    }
+
+    /*!
+    @brief dump a floating-point number
+
+    Dump a given floating-point number to output stream @a o. Works internally
+    with @a number_buffer.
+
+    @param[in] x  floating-point number to dump
+    */
+    void dump_float(number_float_t x)
+    {
+        // NaN / inf
+        if (!std::isfinite(x))
+        {
+            o->write_characters("null", 4);
+            return;
+        }
+
+        // If number_float_t is an IEEE-754 single or double precision number,
+        // use the Grisu2 algorithm to produce short numbers which are
+        // guaranteed to round-trip, using strtof and strtod, resp.
+        //
+        // NB: The test below works if <long double> == <double>.
+        static constexpr bool is_ieee_single_or_double
+            = (std::numeric_limits<number_float_t>::is_iec559 && std::numeric_limits<number_float_t>::digits == 24 && std::numeric_limits<number_float_t>::max_exponent == 128) ||
+              (std::numeric_limits<number_float_t>::is_iec559 && std::numeric_limits<number_float_t>::digits == 53 && std::numeric_limits<number_float_t>::max_exponent == 1024);
+
+        dump_float(x, std::integral_constant<bool, is_ieee_single_or_double>());
+    }
+
+    void dump_float(number_float_t x, std::true_type /*is_ieee_single_or_double*/)
+    {
+        auto* begin = number_buffer.data();
+        auto* end = ::nlohmann::detail::to_chars(begin, begin + number_buffer.size(), x);
+
+        o->write_characters(begin, static_cast<size_t>(end - begin));
+    }
+
+    void dump_float(number_float_t x, std::false_type /*is_ieee_single_or_double*/)
+    {
+        // get number of digits for a float -> text -> float round-trip
+        static constexpr auto d = std::numeric_limits<number_float_t>::max_digits10;
+
+        // the actual conversion
+        // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)
+        std::ptrdiff_t len = (std::snprintf)(number_buffer.data(), number_buffer.size(), "%.*g", d, x);
+
+        // negative value indicates an error
+        JSON_ASSERT(len > 0);
+        // check if buffer was large enough
+        JSON_ASSERT(static_cast<std::size_t>(len) < number_buffer.size());
+
+        // erase thousands separator
+        if (thousands_sep != '\0')
+        {
+            // NOLINTNEXTLINE(readability-qualified-auto,llvm-qualified-auto): std::remove returns an iterator, see https://github.com/nlohmann/json/issues/3081
+            const auto end = std::remove(number_buffer.begin(), number_buffer.begin() + len, thousands_sep);
+            std::fill(end, number_buffer.end(), '\0');
+            JSON_ASSERT((end - number_buffer.begin()) <= len);
+            len = (end - number_buffer.begin());
+        }
+
+        // convert decimal point to '.'
+        if (decimal_point != '\0' && decimal_point != '.')
+        {
+            // NOLINTNEXTLINE(readability-qualified-auto,llvm-qualified-auto): std::find returns an iterator, see https://github.com/nlohmann/json/issues/3081
+            const auto dec_pos = std::find(number_buffer.begin(), number_buffer.end(), decimal_point);
+            if (dec_pos != number_buffer.end())
+            {
+                *dec_pos = '.';
+            }
+        }
+
+        o->write_characters(number_buffer.data(), static_cast<std::size_t>(len));
+
+        // determine if we need to append ".0"
+        const bool value_is_int_like =
+            std::none_of(number_buffer.begin(), number_buffer.begin() + len + 1,
+                         [](char c)
+        {
+            return c == '.' || c == 'e';
+        });
+
+        if (value_is_int_like)
+        {
+            o->write_characters(".0", 2);
+        }
+    }
+
+    /*!
+    @brief check whether a string is UTF-8 encoded
+
+    The function checks each byte of a string whether it is UTF-8 encoded. The
+    result of the check is stored in the @a state parameter. The function must
+    be called initially with state 0 (accept). State 1 means the string must
+    be rejected, because the current byte is not allowed. If the string is
+    completely processed, but the state is non-zero, the string ended
+    prematurely; that is, the last byte indicated more bytes should have
+    followed.
+
+    @param[in,out] state  the state of the decoding
+    @param[in,out] codep  codepoint (valid only if resulting state is UTF8_ACCEPT)
+    @param[in] byte       next byte to decode
+    @return               new state
+
+    @note The function has been edited: a std::array is used.
+
+    @copyright Copyright (c) 2008-2009 Bjoern Hoehrmann <bjoern@hoehrmann.de>
+    @sa http://bjoern.hoehrmann.de/utf-8/decoder/dfa/
+    */
+    static std::uint8_t decode(std::uint8_t& state, std::uint32_t& codep, const std::uint8_t byte) noexcept
+    {
+        static const std::array<std::uint8_t, 400> utf8d =
+        {
+            {
+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 00..1F
+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 20..3F
+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 40..5F
+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 60..7F
+                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, // 80..9F
+                7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, // A0..BF
+                8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, // C0..DF
+                0xA, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x4, 0x3, 0x3, // E0..EF
+                0xB, 0x6, 0x6, 0x6, 0x5, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, // F0..FF
+                0x0, 0x1, 0x2, 0x3, 0x5, 0x8, 0x7, 0x1, 0x1, 0x1, 0x4, 0x6, 0x1, 0x1, 0x1, 0x1, // s0..s0
+                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, // s1..s2
+                1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, // s3..s4
+                1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, // s5..s6
+                1, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 // s7..s8
+            }
+        };
+
+        JSON_ASSERT(byte < utf8d.size());
+        const std::uint8_t type = utf8d[byte];
+
+        codep = (state != UTF8_ACCEPT)
+                ? (byte & 0x3fu) | (codep << 6u)
+                : (0xFFu >> type) & (byte);
+
+        const std::size_t index = 256u + static_cast<size_t>(state) * 16u + static_cast<size_t>(type);
+        JSON_ASSERT(index < utf8d.size());
+        state = utf8d[index];
+        return state;
+    }
+
+    /*
+     * Overload to make the compiler happy while it is instantiating
+     * dump_integer for number_unsigned_t.
+     * Must never be called.
+     */
+    number_unsigned_t remove_sign(number_unsigned_t x)
+    {
+        JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE
+        return x; // LCOV_EXCL_LINE
+    }
+
+    /*
+     * Helper function for dump_integer
+     *
+     * This function takes a negative signed integer and returns its absolute
+     * value as unsigned integer. The plus/minus shuffling is necessary as we can
+     * not directly remove the sign of an arbitrary signed integer as the
+     * absolute values of INT_MIN and INT_MAX are usually not the same. See
+     * #1708 for details.
+     */
+    inline number_unsigned_t remove_sign(number_integer_t x) noexcept
+    {
+        JSON_ASSERT(x < 0 && x < (std::numeric_limits<number_integer_t>::max)()); // NOLINT(misc-redundant-expression)
+        return static_cast<number_unsigned_t>(-(x + 1)) + 1;
+    }
+
+  private:
+    /// the output of the serializer
+    output_adapter_t<char> o = nullptr;
+
+    /// a (hopefully) large enough character buffer
+    std::array<char, 64> number_buffer{{}};
+
+    /// the locale
+    const std::lconv* loc = nullptr;
+    /// the locale's thousand separator character
+    const char thousands_sep = '\0';
+    /// the locale's decimal point character
+    const char decimal_point = '\0';
+
+    /// string buffer
+    std::array<char, 512> string_buffer{{}};
+
+    /// the indentation character
+    const char indent_char;
+    /// the indentation string
+    string_t indent_string;
+
+    /// error_handler how to react on decoding errors
+    const error_handler_t error_handler;
+};
+
+}  // namespace detail
+NLOHMANN_JSON_NAMESPACE_END
+
+// #include <nlohmann/detail/value_t.hpp>
+
+// #include <nlohmann/json_fwd.hpp>
+
+// #include <nlohmann/ordered_map.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#include <functional> // equal_to, less
+#include <initializer_list> // initializer_list
+#include <iterator> // input_iterator_tag, iterator_traits
+#include <memory> // allocator
+#include <stdexcept> // for out_of_range
+#include <type_traits> // enable_if, is_convertible
+#include <utility> // pair
+#include <vector> // vector
+
+// #include <nlohmann/detail/macro_scope.hpp>
+
+// #include <nlohmann/detail/meta/type_traits.hpp>
+
+
+NLOHMANN_JSON_NAMESPACE_BEGIN
+
+/// ordered_map: a minimal map-like container that preserves insertion order
+/// for use within nlohmann::basic_json<ordered_map>
+template <class Key, class T, class IgnoredLess = std::less<Key>,
+          class Allocator = std::allocator<std::pair<const Key, T>>>
+                  struct ordered_map : std::vector<std::pair<const Key, T>, Allocator>
+{
+    using key_type = Key;
+    using mapped_type = T;
+    using Container = std::vector<std::pair<const Key, T>, Allocator>;
+    using iterator = typename Container::iterator;
+    using const_iterator = typename Container::const_iterator;
+    using size_type = typename Container::size_type;
+    using value_type = typename Container::value_type;
+#ifdef JSON_HAS_CPP_14
+    using key_compare = std::equal_to<>;
+#else
+    using key_compare = std::equal_to<Key>;
+#endif
+
+    // Explicit constructors instead of `using Container::Container`
+    // otherwise older compilers choke on it (GCC <= 5.5, xcode <= 9.4)
+    ordered_map() noexcept(noexcept(Container())) : Container{} {}
+    explicit ordered_map(const Allocator& alloc) noexcept(noexcept(Container(alloc))) : Container{alloc} {}
+    template <class It>
+    ordered_map(It first, It last, const Allocator& alloc = Allocator())
+        : Container{first, last, alloc} {}
+    ordered_map(std::initializer_list<value_type> init, const Allocator& alloc = Allocator() )
+        : Container{init, alloc} {}
+
+    std::pair<iterator, bool> emplace(const key_type& key, T&& t)
+    {
+        for (auto it = this->begin(); it != this->end(); ++it)
+        {
+            if (m_compare(it->first, key))
+            {
+                return {it, false};
+            }
+        }
+        Container::emplace_back(key, std::forward<T>(t));
+        return {std::prev(this->end()), true};
+    }
+
+    template<class KeyType, detail::enable_if_t<
+                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>
+    std::pair<iterator, bool> emplace(KeyType && key, T && t)
+    {
+        for (auto it = this->begin(); it != this->end(); ++it)
+        {
+            if (m_compare(it->first, key))
+            {
+                return {it, false};
+            }
+        }
+        Container::emplace_back(std::forward<KeyType>(key), std::forward<T>(t));
+        return {std::prev(this->end()), true};
+    }
+
+    T& operator[](const key_type& key)
+    {
+        return emplace(key, T{}).first->second;
+    }
+
+    template<class KeyType, detail::enable_if_t<
+                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>
+    T & operator[](KeyType && key)
+    {
+        return emplace(std::forward<KeyType>(key), T{}).first->second;
+    }
+
+    const T& operator[](const key_type& key) const
+    {
+        return at(key);
+    }
+
+    template<class KeyType, detail::enable_if_t<
+                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>
+    const T & operator[](KeyType && key) const
+    {
+        return at(std::forward<KeyType>(key));
+    }
+
+    T& at(const key_type& key)
+    {
+        for (auto it = this->begin(); it != this->end(); ++it)
+        {
+            if (m_compare(it->first, key))
+            {
+                return it->second;
+            }
+        }
+
+        JSON_THROW(std::out_of_range("key not found"));
+    }
+
+    template<class KeyType, detail::enable_if_t<
+                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>
+    T & at(KeyType && key)
+    {
+        for (auto it = this->begin(); it != this->end(); ++it)
+        {
+            if (m_compare(it->first, key))
+            {
+                return it->second;
+            }
+        }
+
+        JSON_THROW(std::out_of_range("key not found"));
+    }
+
+    const T& at(const key_type& key) const
+    {
+        for (auto it = this->begin(); it != this->end(); ++it)
+        {
+            if (m_compare(it->first, key))
+            {
+                return it->second;
+            }
+        }
+
+        JSON_THROW(std::out_of_range("key not found"));
+    }
+
+    template<class KeyType, detail::enable_if_t<
+                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>
+    const T & at(KeyType && key) const
+    {
+        for (auto it = this->begin(); it != this->end(); ++it)
+        {
+            if (m_compare(it->first, key))
+            {
+                return it->second;
+            }
+        }
+
+        JSON_THROW(std::out_of_range("key not found"));
+    }
+
+    size_type erase(const key_type& key)
+    {
+        for (auto it = this->begin(); it != this->end(); ++it)
+        {
+            if (m_compare(it->first, key))
+            {
+                // Since we cannot move const Keys, re-construct them in place
+                for (auto next = it; ++next != this->end(); ++it)
+                {
+                    it->~value_type(); // Destroy but keep allocation
+                    new (&*it) value_type{std::move(*next)};
+                }
+                Container::pop_back();
+                return 1;
+            }
+        }
+        return 0;
+    }
+
+    template<class KeyType, detail::enable_if_t<
+                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>
+    size_type erase(KeyType && key)
+    {
+        for (auto it = this->begin(); it != this->end(); ++it)
+        {
+            if (m_compare(it->first, key))
+            {
+                // Since we cannot move const Keys, re-construct them in place
+                for (auto next = it; ++next != this->end(); ++it)
+                {
+                    it->~value_type(); // Destroy but keep allocation
+                    new (&*it) value_type{std::move(*next)};
+                }
+                Container::pop_back();
+                return 1;
+            }
+        }
+        return 0;
+    }
+
+    iterator erase(iterator pos)
+    {
+        return erase(pos, std::next(pos));
+    }
+
+    iterator erase(iterator first, iterator last)
+    {
+        if (first == last)
+        {
+            return first;
+        }
+
+        const auto elements_affected = std::distance(first, last);
+        const auto offset = std::distance(Container::begin(), first);
+
+        // This is the start situation. We need to delete elements_affected
+        // elements (3 in this example: e, f, g), and need to return an
+        // iterator past the last deleted element (h in this example).
+        // Note that offset is the distance from the start of the vector
+        // to first. We will need this later.
+
+        // [ a, b, c, d, e, f, g, h, i, j ]
+        //               ^        ^
+        //             first    last
+
+        // Since we cannot move const Keys, we re-construct them in place.
+        // We start at first and re-construct (viz. copy) the elements from
+        // the back of the vector. Example for first iteration:
+
+        //               ,--------.
+        //               v        |   destroy e and re-construct with h
+        // [ a, b, c, d, e, f, g, h, i, j ]
+        //               ^        ^
+        //               it       it + elements_affected
+
+        for (auto it = first; std::next(it, elements_affected) != Container::end(); ++it)
+        {
+            it->~value_type(); // destroy but keep allocation
+            new (&*it) value_type{std::move(*std::next(it, elements_affected))}; // "move" next element to it
+        }
+
+        // [ a, b, c, d, h, i, j, h, i, j ]
+        //               ^        ^
+        //             first    last
+
+        // remove the unneeded elements at the end of the vector
+        Container::resize(this->size() - static_cast<size_type>(elements_affected));
+
+        // [ a, b, c, d, h, i, j ]
+        //               ^        ^
+        //             first    last
+
+        // first is now pointing past the last deleted element, but we cannot
+        // use this iterator, because it may have been invalidated by the
+        // resize call. Instead, we can return begin() + offset.
+        return Container::begin() + offset;
+    }
+
+    size_type count(const key_type& key) const
+    {
+        for (auto it = this->begin(); it != this->end(); ++it)
+        {
+            if (m_compare(it->first, key))
+            {
+                return 1;
+            }
+        }
+        return 0;
+    }
+
+    template<class KeyType, detail::enable_if_t<
+                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>
+    size_type count(KeyType && key) const
+    {
+        for (auto it = this->begin(); it != this->end(); ++it)
+        {
+            if (m_compare(it->first, key))
+            {
+                return 1;
+            }
+        }
+        return 0;
+    }
+
+    iterator find(const key_type& key)
+    {
+        for (auto it = this->begin(); it != this->end(); ++it)
+        {
+            if (m_compare(it->first, key))
+            {
+                return it;
+            }
+        }
+        return Container::end();
+    }
+
+    template<class KeyType, detail::enable_if_t<
+                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>
+    iterator find(KeyType && key)
+    {
+        for (auto it = this->begin(); it != this->end(); ++it)
+        {
+            if (m_compare(it->first, key))
+            {
+                return it;
+            }
+        }
+        return Container::end();
+    }
+
+    const_iterator find(const key_type& key) const
+    {
+        for (auto it = this->begin(); it != this->end(); ++it)
+        {
+            if (m_compare(it->first, key))
+            {
+                return it;
+            }
+        }
+        return Container::end();
+    }
+
+    std::pair<iterator, bool> insert( value_type&& value )
+    {
+        return emplace(value.first, std::move(value.second));
+    }
+
+    std::pair<iterator, bool> insert( const value_type& value )
+    {
+        for (auto it = this->begin(); it != this->end(); ++it)
+        {
+            if (m_compare(it->first, value.first))
+            {
+                return {it, false};
+            }
+        }
+        Container::push_back(value);
+        return {--this->end(), true};
+    }
+
+    template<typename InputIt>
+    using require_input_iter = typename std::enable_if<std::is_convertible<typename std::iterator_traits<InputIt>::iterator_category,
+            std::input_iterator_tag>::value>::type;
+
+    template<typename InputIt, typename = require_input_iter<InputIt>>
+    void insert(InputIt first, InputIt last)
+    {
+        for (auto it = first; it != last; ++it)
+        {
+            insert(*it);
+        }
+    }
+
+private:
+    JSON_NO_UNIQUE_ADDRESS key_compare m_compare = key_compare();
+};
+
+NLOHMANN_JSON_NAMESPACE_END
+
+
+#if defined(JSON_HAS_CPP_17)
+    #include <any>
+    #include <string_view>
+#endif
+
+/*!
+@brief namespace for Niels Lohmann
+@see https://github.com/nlohmann
+@since version 1.0.0
+*/
+NLOHMANN_JSON_NAMESPACE_BEGIN
+
+/*!
+@brief a class to store JSON values
+
+@internal
+@invariant The member variables @a m_value and @a m_type have the following
+relationship:
+- If `m_type == value_t::object`, then `m_value.object != nullptr`.
+- If `m_type == value_t::array`, then `m_value.array != nullptr`.
+- If `m_type == value_t::string`, then `m_value.string != nullptr`.
+The invariants are checked by member function assert_invariant().
+
+@note ObjectType trick from https://stackoverflow.com/a/9860911
+@endinternal
+
+@since version 1.0.0
+
+@nosubgrouping
+*/
+NLOHMANN_BASIC_JSON_TPL_DECLARATION
+class basic_json // NOLINT(cppcoreguidelines-special-member-functions,hicpp-special-member-functions)
+    : public ::nlohmann::detail::json_base_class<CustomBaseClass>
+{
+  private:
+    template<detail::value_t> friend struct detail::external_constructor;
+
+    template<typename>
+    friend class ::nlohmann::json_pointer;
+    // can be restored when json_pointer backwards compatibility is removed
+    // friend ::nlohmann::json_pointer<StringType>;
+
+    template<typename BasicJsonType, typename InputType>
+    friend class ::nlohmann::detail::parser;
+    friend ::nlohmann::detail::serializer<basic_json>;
+    template<typename BasicJsonType>
+    friend class ::nlohmann::detail::iter_impl;
+    template<typename BasicJsonType, typename CharType>
+    friend class ::nlohmann::detail::binary_writer;
+    template<typename BasicJsonType, typename InputType, typename SAX>
+    friend class ::nlohmann::detail::binary_reader;
+    template<typename BasicJsonType>
+    friend class ::nlohmann::detail::json_sax_dom_parser;
+    template<typename BasicJsonType>
+    friend class ::nlohmann::detail::json_sax_dom_callback_parser;
+    friend class ::nlohmann::detail::exception;
+
+    /// workaround type for MSVC
+    using basic_json_t = NLOHMANN_BASIC_JSON_TPL;
+    using json_base_class_t = ::nlohmann::detail::json_base_class<CustomBaseClass>;
+
+  JSON_PRIVATE_UNLESS_TESTED:
+    // convenience aliases for types residing in namespace detail;
+    using lexer = ::nlohmann::detail::lexer_base<basic_json>;
+
+    template<typename InputAdapterType>
+    static ::nlohmann::detail::parser<basic_json, InputAdapterType> parser(
+        InputAdapterType adapter,
+        detail::parser_callback_t<basic_json>cb = nullptr,
+        const bool allow_exceptions = true,
+        const bool ignore_comments = false
+                                 )
+    {
+        return ::nlohmann::detail::parser<basic_json, InputAdapterType>(std::move(adapter),
+                std::move(cb), allow_exceptions, ignore_comments);
+    }
+
+  private:
+    using primitive_iterator_t = ::nlohmann::detail::primitive_iterator_t;
+    template<typename BasicJsonType>
+    using internal_iterator = ::nlohmann::detail::internal_iterator<BasicJsonType>;
+    template<typename BasicJsonType>
+    using iter_impl = ::nlohmann::detail::iter_impl<BasicJsonType>;
+    template<typename Iterator>
+    using iteration_proxy = ::nlohmann::detail::iteration_proxy<Iterator>;
+    template<typename Base> using json_reverse_iterator = ::nlohmann::detail::json_reverse_iterator<Base>;
+
+    template<typename CharType>
+    using output_adapter_t = ::nlohmann::detail::output_adapter_t<CharType>;
+
+    template<typename InputType>
+    using binary_reader = ::nlohmann::detail::binary_reader<basic_json, InputType>;
+    template<typename CharType> using binary_writer = ::nlohmann::detail::binary_writer<basic_json, CharType>;
+
+  JSON_PRIVATE_UNLESS_TESTED:
+    using serializer = ::nlohmann::detail::serializer<basic_json>;
+
+  public:
+    using value_t = detail::value_t;
+    /// JSON Pointer, see @ref nlohmann::json_pointer
+    using json_pointer = ::nlohmann::json_pointer<StringType>;
+    template<typename T, typename SFINAE>
+    using json_serializer = JSONSerializer<T, SFINAE>;
+    /// how to treat decoding errors
+    using error_handler_t = detail::error_handler_t;
+    /// how to treat CBOR tags
+    using cbor_tag_handler_t = detail::cbor_tag_handler_t;
+    /// helper type for initializer lists of basic_json values
+    using initializer_list_t = std::initializer_list<detail::json_ref<basic_json>>;
+
+    using input_format_t = detail::input_format_t;
+    /// SAX interface type, see @ref nlohmann::json_sax
+    using json_sax_t = json_sax<basic_json>;
+
+    ////////////////
+    // exceptions //
+    ////////////////
+
+    /// @name exceptions
+    /// Classes to implement user-defined exceptions.
+    /// @{
+
+    using exception = detail::exception;
+    using parse_error = detail::parse_error;
+    using invalid_iterator = detail::invalid_iterator;
+    using type_error = detail::type_error;
+    using out_of_range = detail::out_of_range;
+    using other_error = detail::other_error;
+
+    /// @}
+
+
+    /////////////////////
+    // container types //
+    /////////////////////
+
+    /// @name container types
+    /// The canonic container types to use @ref basic_json like any other STL
+    /// container.
+    /// @{
+
+    /// the type of elements in a basic_json container
+    using value_type = basic_json;
+
+    /// the type of an element reference
+    using reference = value_type&;
+    /// the type of an element const reference
+    using const_reference = const value_type&;
+
+    /// a type to represent differences between iterators
+    using difference_type = std::ptrdiff_t;
+    /// a type to represent container sizes
+    using size_type = std::size_t;
+
+    /// the allocator type
+    using allocator_type = AllocatorType<basic_json>;
+
+    /// the type of an element pointer
+    using pointer = typename std::allocator_traits<allocator_type>::pointer;
+    /// the type of an element const pointer
+    using const_pointer = typename std::allocator_traits<allocator_type>::const_pointer;
+
+    /// an iterator for a basic_json container
+    using iterator = iter_impl<basic_json>;
+    /// a const iterator for a basic_json container
+    using const_iterator = iter_impl<const basic_json>;
+    /// a reverse iterator for a basic_json container
+    using reverse_iterator = json_reverse_iterator<typename basic_json::iterator>;
+    /// a const reverse iterator for a basic_json container
+    using const_reverse_iterator = json_reverse_iterator<typename basic_json::const_iterator>;
+
+    /// @}
+
+
+    /// @brief returns the allocator associated with the container
+    /// @sa https://json.nlohmann.me/api/basic_json/get_allocator/
+    static allocator_type get_allocator()
+    {
+        return allocator_type();
+    }
+
+    /// @brief returns version information on the library
+    /// @sa https://json.nlohmann.me/api/basic_json/meta/
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    static basic_json meta()
+    {
+        basic_json result;
+
+        result["copyright"] = "(C) 2013-2022 Niels Lohmann";
+        result["name"] = "JSON for Modern C++";
+        result["url"] = "https://github.com/nlohmann/json";
+        result["version"]["string"] =
+            detail::concat(std::to_string(NLOHMANN_JSON_VERSION_MAJOR), '.',
+                           std::to_string(NLOHMANN_JSON_VERSION_MINOR), '.',
+                           std::to_string(NLOHMANN_JSON_VERSION_PATCH));
+        result["version"]["major"] = NLOHMANN_JSON_VERSION_MAJOR;
+        result["version"]["minor"] = NLOHMANN_JSON_VERSION_MINOR;
+        result["version"]["patch"] = NLOHMANN_JSON_VERSION_PATCH;
+
+#ifdef _WIN32
+        result["platform"] = "win32";
+#elif defined __linux__
+        result["platform"] = "linux";
+#elif defined __APPLE__
+        result["platform"] = "apple";
+#elif defined __unix__
+        result["platform"] = "unix";
+#else
+        result["platform"] = "unknown";
+#endif
+
+#if defined(__ICC) || defined(__INTEL_COMPILER)
+        result["compiler"] = {{"family", "icc"}, {"version", __INTEL_COMPILER}};
+#elif defined(__clang__)
+        result["compiler"] = {{"family", "clang"}, {"version", __clang_version__}};
+#elif defined(__GNUC__) || defined(__GNUG__)
+        result["compiler"] = {{"family", "gcc"}, {"version", detail::concat(
+                    std::to_string(__GNUC__), '.',
+                    std::to_string(__GNUC_MINOR__), '.',
+                    std::to_string(__GNUC_PATCHLEVEL__))
+            }
+        };
+#elif defined(__HP_cc) || defined(__HP_aCC)
+        result["compiler"] = "hp"
+#elif defined(__IBMCPP__)
+        result["compiler"] = {{"family", "ilecpp"}, {"version", __IBMCPP__}};
+#elif defined(_MSC_VER)
+        result["compiler"] = {{"family", "msvc"}, {"version", _MSC_VER}};
+#elif defined(__PGI)
+        result["compiler"] = {{"family", "pgcpp"}, {"version", __PGI}};
+#elif defined(__SUNPRO_CC)
+        result["compiler"] = {{"family", "sunpro"}, {"version", __SUNPRO_CC}};
+#else
+        result["compiler"] = {{"family", "unknown"}, {"version", "unknown"}};
+#endif
+
+
+#if defined(_MSVC_LANG)
+        result["compiler"]["c++"] = std::to_string(_MSVC_LANG);
+#elif defined(__cplusplus)
+        result["compiler"]["c++"] = std::to_string(__cplusplus);
+#else
+        result["compiler"]["c++"] = "unknown";
+#endif
+        return result;
+    }
+
+
+    ///////////////////////////
+    // JSON value data types //
+    ///////////////////////////
+
+    /// @name JSON value data types
+    /// The data types to store a JSON value. These types are derived from
+    /// the template arguments passed to class @ref basic_json.
+    /// @{
+
+    /// @brief default object key comparator type
+    /// The actual object key comparator type (@ref object_comparator_t) may be
+    /// different.
+    /// @sa https://json.nlohmann.me/api/basic_json/default_object_comparator_t/
+#if defined(JSON_HAS_CPP_14)
+    // use of transparent comparator avoids unnecessary repeated construction of temporaries
+    // in functions involving lookup by key with types other than object_t::key_type (aka. StringType)
+    using default_object_comparator_t = std::less<>;
+#else
+    using default_object_comparator_t = std::less<StringType>;
+#endif
+
+    /// @brief a type for an object
+    /// @sa https://json.nlohmann.me/api/basic_json/object_t/
+    using object_t = ObjectType<StringType,
+          basic_json,
+          default_object_comparator_t,
+          AllocatorType<std::pair<const StringType,
+          basic_json>>>;
+
+    /// @brief a type for an array
+    /// @sa https://json.nlohmann.me/api/basic_json/array_t/
+    using array_t = ArrayType<basic_json, AllocatorType<basic_json>>;
+
+    /// @brief a type for a string
+    /// @sa https://json.nlohmann.me/api/basic_json/string_t/
+    using string_t = StringType;
+
+    /// @brief a type for a boolean
+    /// @sa https://json.nlohmann.me/api/basic_json/boolean_t/
+    using boolean_t = BooleanType;
+
+    /// @brief a type for a number (integer)
+    /// @sa https://json.nlohmann.me/api/basic_json/number_integer_t/
+    using number_integer_t = NumberIntegerType;
+
+    /// @brief a type for a number (unsigned)
+    /// @sa https://json.nlohmann.me/api/basic_json/number_unsigned_t/
+    using number_unsigned_t = NumberUnsignedType;
+
+    /// @brief a type for a number (floating-point)
+    /// @sa https://json.nlohmann.me/api/basic_json/number_float_t/
+    using number_float_t = NumberFloatType;
+
+    /// @brief a type for a packed binary type
+    /// @sa https://json.nlohmann.me/api/basic_json/binary_t/
+    using binary_t = nlohmann::byte_container_with_subtype<BinaryType>;
+
+    /// @brief object key comparator type
+    /// @sa https://json.nlohmann.me/api/basic_json/object_comparator_t/
+    using object_comparator_t = detail::actual_object_comparator_t<basic_json>;
+
+    /// @}
+
+  private:
+
+    /// helper for exception-safe object creation
+    template<typename T, typename... Args>
+    JSON_HEDLEY_RETURNS_NON_NULL
+    static T* create(Args&& ... args)
+    {
+        AllocatorType<T> alloc;
+        using AllocatorTraits = std::allocator_traits<AllocatorType<T>>;
+
+        auto deleter = [&](T * obj)
+        {
+            AllocatorTraits::deallocate(alloc, obj, 1);
+        };
+        std::unique_ptr<T, decltype(deleter)> obj(AllocatorTraits::allocate(alloc, 1), deleter);
+        AllocatorTraits::construct(alloc, obj.get(), std::forward<Args>(args)...);
+        JSON_ASSERT(obj != nullptr);
+        return obj.release();
+    }
+
+    ////////////////////////
+    // JSON value storage //
+    ////////////////////////
+
+  JSON_PRIVATE_UNLESS_TESTED:
+    /*!
+    @brief a JSON value
+
+    The actual storage for a JSON value of the @ref basic_json class. This
+    union combines the different storage types for the JSON value types
+    defined in @ref value_t.
+
+    JSON type | value_t type    | used type
+    --------- | --------------- | ------------------------
+    object    | object          | pointer to @ref object_t
+    array     | array           | pointer to @ref array_t
+    string    | string          | pointer to @ref string_t
+    boolean   | boolean         | @ref boolean_t
+    number    | number_integer  | @ref number_integer_t
+    number    | number_unsigned | @ref number_unsigned_t
+    number    | number_float    | @ref number_float_t
+    binary    | binary          | pointer to @ref binary_t
+    null      | null            | *no value is stored*
+
+    @note Variable-length types (objects, arrays, and strings) are stored as
+    pointers. The size of the union should not exceed 64 bits if the default
+    value types are used.
+
+    @since version 1.0.0
+    */
+    union json_value
+    {
+        /// object (stored with pointer to save storage)
+        object_t* object;
+        /// array (stored with pointer to save storage)
+        array_t* array;
+        /// string (stored with pointer to save storage)
+        string_t* string;
+        /// binary (stored with pointer to save storage)
+        binary_t* binary;
+        /// boolean
+        boolean_t boolean;
+        /// number (integer)
+        number_integer_t number_integer;
+        /// number (unsigned integer)
+        number_unsigned_t number_unsigned;
+        /// number (floating-point)
+        number_float_t number_float;
+
+        /// default constructor (for null values)
+        json_value() = default;
+        /// constructor for booleans
+        json_value(boolean_t v) noexcept : boolean(v) {}
+        /// constructor for numbers (integer)
+        json_value(number_integer_t v) noexcept : number_integer(v) {}
+        /// constructor for numbers (unsigned)
+        json_value(number_unsigned_t v) noexcept : number_unsigned(v) {}
+        /// constructor for numbers (floating-point)
+        json_value(number_float_t v) noexcept : number_float(v) {}
+        /// constructor for empty values of a given type
+        json_value(value_t t)
+        {
+            switch (t)
+            {
+                case value_t::object:
+                {
+                    object = create<object_t>();
+                    break;
+                }
+
+                case value_t::array:
+                {
+                    array = create<array_t>();
+                    break;
+                }
+
+                case value_t::string:
+                {
+                    string = create<string_t>("");
+                    break;
+                }
+
+                case value_t::binary:
+                {
+                    binary = create<binary_t>();
+                    break;
+                }
+
+                case value_t::boolean:
+                {
+                    boolean = static_cast<boolean_t>(false);
+                    break;
+                }
+
+                case value_t::number_integer:
+                {
+                    number_integer = static_cast<number_integer_t>(0);
+                    break;
+                }
+
+                case value_t::number_unsigned:
+                {
+                    number_unsigned = static_cast<number_unsigned_t>(0);
+                    break;
+                }
+
+                case value_t::number_float:
+                {
+                    number_float = static_cast<number_float_t>(0.0);
+                    break;
+                }
+
+                case value_t::null:
+                {
+                    object = nullptr;  // silence warning, see #821
+                    break;
+                }
+
+                case value_t::discarded:
+                default:
+                {
+                    object = nullptr;  // silence warning, see #821
+                    if (JSON_HEDLEY_UNLIKELY(t == value_t::null))
+                    {
+                        JSON_THROW(other_error::create(500, "961c151d2e87f2686a955a9be24d316f1362bf21 3.11.2", nullptr)); // LCOV_EXCL_LINE
+                    }
+                    break;
+                }
+            }
+        }
+
+        /// constructor for strings
+        json_value(const string_t& value) : string(create<string_t>(value)) {}
+
+        /// constructor for rvalue strings
+        json_value(string_t&& value) : string(create<string_t>(std::move(value))) {}
+
+        /// constructor for objects
+        json_value(const object_t& value) : object(create<object_t>(value)) {}
+
+        /// constructor for rvalue objects
+        json_value(object_t&& value) : object(create<object_t>(std::move(value))) {}
+
+        /// constructor for arrays
+        json_value(const array_t& value) : array(create<array_t>(value)) {}
+
+        /// constructor for rvalue arrays
+        json_value(array_t&& value) : array(create<array_t>(std::move(value))) {}
+
+        /// constructor for binary arrays
+        json_value(const typename binary_t::container_type& value) : binary(create<binary_t>(value)) {}
+
+        /// constructor for rvalue binary arrays
+        json_value(typename binary_t::container_type&& value) : binary(create<binary_t>(std::move(value))) {}
+
+        /// constructor for binary arrays (internal type)
+        json_value(const binary_t& value) : binary(create<binary_t>(value)) {}
+
+        /// constructor for rvalue binary arrays (internal type)
+        json_value(binary_t&& value) : binary(create<binary_t>(std::move(value))) {}
+
+        void destroy(value_t t)
+        {
+            if (t == value_t::array || t == value_t::object)
+            {
+                // flatten the current json_value to a heap-allocated stack
+                std::vector<basic_json> stack;
+
+                // move the top-level items to stack
+                if (t == value_t::array)
+                {
+                    stack.reserve(array->size());
+                    std::move(array->begin(), array->end(), std::back_inserter(stack));
+                }
+                else
+                {
+                    stack.reserve(object->size());
+                    for (auto&& it : *object)
+                    {
+                        stack.push_back(std::move(it.second));
+                    }
+                }
+
+                while (!stack.empty())
+                {
+                    // move the last item to local variable to be processed
+                    basic_json current_item(std::move(stack.back()));
+                    stack.pop_back();
+
+                    // if current_item is array/object, move
+                    // its children to the stack to be processed later
+                    if (current_item.is_array())
+                    {
+                        std::move(current_item.m_value.array->begin(), current_item.m_value.array->end(), std::back_inserter(stack));
+
+                        current_item.m_value.array->clear();
+                    }
+                    else if (current_item.is_object())
+                    {
+                        for (auto&& it : *current_item.m_value.object)
+                        {
+                            stack.push_back(std::move(it.second));
+                        }
+
+                        current_item.m_value.object->clear();
+                    }
+
+                    // it's now safe that current_item get destructed
+                    // since it doesn't have any children
+                }
+            }
+
+            switch (t)
+            {
+                case value_t::object:
+                {
+                    AllocatorType<object_t> alloc;
+                    std::allocator_traits<decltype(alloc)>::destroy(alloc, object);
+                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, object, 1);
+                    break;
+                }
+
+                case value_t::array:
+                {
+                    AllocatorType<array_t> alloc;
+                    std::allocator_traits<decltype(alloc)>::destroy(alloc, array);
+                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, array, 1);
+                    break;
+                }
+
+                case value_t::string:
+                {
+                    AllocatorType<string_t> alloc;
+                    std::allocator_traits<decltype(alloc)>::destroy(alloc, string);
+                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, string, 1);
+                    break;
+                }
+
+                case value_t::binary:
+                {
+                    AllocatorType<binary_t> alloc;
+                    std::allocator_traits<decltype(alloc)>::destroy(alloc, binary);
+                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, binary, 1);
+                    break;
+                }
+
+                case value_t::null:
+                case value_t::boolean:
+                case value_t::number_integer:
+                case value_t::number_unsigned:
+                case value_t::number_float:
+                case value_t::discarded:
+                default:
+                {
+                    break;
+                }
+            }
+        }
+    };
+
+  private:
+    /*!
+    @brief checks the class invariants
+
+    This function asserts the class invariants. It needs to be called at the
+    end of every constructor to make sure that created objects respect the
+    invariant. Furthermore, it has to be called each time the type of a JSON
+    value is changed, because the invariant expresses a relationship between
+    @a m_type and @a m_value.
+
+    Furthermore, the parent relation is checked for arrays and objects: If
+    @a check_parents true and the value is an array or object, then the
+    container's elements must have the current value as parent.
+
+    @param[in] check_parents  whether the parent relation should be checked.
+               The value is true by default and should only be set to false
+               during destruction of objects when the invariant does not
+               need to hold.
+    */
+    void assert_invariant(bool check_parents = true) const noexcept
+    {
+        JSON_ASSERT(m_type != value_t::object || m_value.object != nullptr);
+        JSON_ASSERT(m_type != value_t::array || m_value.array != nullptr);
+        JSON_ASSERT(m_type != value_t::string || m_value.string != nullptr);
+        JSON_ASSERT(m_type != value_t::binary || m_value.binary != nullptr);
+
+#if JSON_DIAGNOSTICS
+        JSON_TRY
+        {
+            // cppcheck-suppress assertWithSideEffect
+            JSON_ASSERT(!check_parents || !is_structured() || std::all_of(begin(), end(), [this](const basic_json & j)
+            {
+                return j.m_parent == this;
+            }));
+        }
+        JSON_CATCH(...) {} // LCOV_EXCL_LINE
+#endif
+        static_cast<void>(check_parents);
+    }
+
+    void set_parents()
+    {
+#if JSON_DIAGNOSTICS
+        switch (m_type)
+        {
+            case value_t::array:
+            {
+                for (auto& element : *m_value.array)
+                {
+                    element.m_parent = this;
+                }
+                break;
+            }
+
+            case value_t::object:
+            {
+                for (auto& element : *m_value.object)
+                {
+                    element.second.m_parent = this;
+                }
+                break;
+            }
+
+            case value_t::null:
+            case value_t::string:
+            case value_t::boolean:
+            case value_t::number_integer:
+            case value_t::number_unsigned:
+            case value_t::number_float:
+            case value_t::binary:
+            case value_t::discarded:
+            default:
+                break;
+        }
+#endif
+    }
+
+    iterator set_parents(iterator it, typename iterator::difference_type count_set_parents)
+    {
+#if JSON_DIAGNOSTICS
+        for (typename iterator::difference_type i = 0; i < count_set_parents; ++i)
+        {
+            (it + i)->m_parent = this;
+        }
+#else
+        static_cast<void>(count_set_parents);
+#endif
+        return it;
+    }
+
+    reference set_parent(reference j, std::size_t old_capacity = static_cast<std::size_t>(-1))
+    {
+#if JSON_DIAGNOSTICS
+        if (old_capacity != static_cast<std::size_t>(-1))
+        {
+            // see https://github.com/nlohmann/json/issues/2838
+            JSON_ASSERT(type() == value_t::array);
+            if (JSON_HEDLEY_UNLIKELY(m_value.array->capacity() != old_capacity))
+            {
+                // capacity has changed: update all parents
+                set_parents();
+                return j;
+            }
+        }
+
+        // ordered_json uses a vector internally, so pointers could have
+        // been invalidated; see https://github.com/nlohmann/json/issues/2962
+#ifdef JSON_HEDLEY_MSVC_VERSION
+#pragma warning(push )
+#pragma warning(disable : 4127) // ignore warning to replace if with if constexpr
+#endif
+        if (detail::is_ordered_map<object_t>::value)
+        {
+            set_parents();
+            return j;
+        }
+#ifdef JSON_HEDLEY_MSVC_VERSION
+#pragma warning( pop )
+#endif
+
+        j.m_parent = this;
+#else
+        static_cast<void>(j);
+        static_cast<void>(old_capacity);
+#endif
+        return j;
+    }
+
+  public:
+    //////////////////////////
+    // JSON parser callback //
+    //////////////////////////
+
+    /// @brief parser event types
+    /// @sa https://json.nlohmann.me/api/basic_json/parse_event_t/
+    using parse_event_t = detail::parse_event_t;
+
+    /// @brief per-element parser callback type
+    /// @sa https://json.nlohmann.me/api/basic_json/parser_callback_t/
+    using parser_callback_t = detail::parser_callback_t<basic_json>;
+
+    //////////////////
+    // constructors //
+    //////////////////
+
+    /// @name constructors and destructors
+    /// Constructors of class @ref basic_json, copy/move constructor, copy
+    /// assignment, static functions creating objects, and the destructor.
+    /// @{
+
+    /// @brief create an empty value with a given type
+    /// @sa https://json.nlohmann.me/api/basic_json/basic_json/
+    basic_json(const value_t v)
+        : m_type(v), m_value(v)
+    {
+        assert_invariant();
+    }
+
+    /// @brief create a null object
+    /// @sa https://json.nlohmann.me/api/basic_json/basic_json/
+    basic_json(std::nullptr_t = nullptr) noexcept // NOLINT(bugprone-exception-escape)
+        : basic_json(value_t::null)
+    {
+        assert_invariant();
+    }
+
+    /// @brief create a JSON value from compatible types
+    /// @sa https://json.nlohmann.me/api/basic_json/basic_json/
+    template < typename CompatibleType,
+               typename U = detail::uncvref_t<CompatibleType>,
+               detail::enable_if_t <
+                   !detail::is_basic_json<U>::value && detail::is_compatible_type<basic_json_t, U>::value, int > = 0 >
+    basic_json(CompatibleType && val) noexcept(noexcept( // NOLINT(bugprone-forwarding-reference-overload,bugprone-exception-escape)
+                JSONSerializer<U>::to_json(std::declval<basic_json_t&>(),
+                                           std::forward<CompatibleType>(val))))
+    {
+        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
+        set_parents();
+        assert_invariant();
+    }
+
+    /// @brief create a JSON value from an existing one
+    /// @sa https://json.nlohmann.me/api/basic_json/basic_json/
+    template < typename BasicJsonType,
+               detail::enable_if_t <
+                   detail::is_basic_json<BasicJsonType>::value&& !std::is_same<basic_json, BasicJsonType>::value, int > = 0 >
+    basic_json(const BasicJsonType& val)
+    {
+        using other_boolean_t = typename BasicJsonType::boolean_t;
+        using other_number_float_t = typename BasicJsonType::number_float_t;
+        using other_number_integer_t = typename BasicJsonType::number_integer_t;
+        using other_number_unsigned_t = typename BasicJsonType::number_unsigned_t;
+        using other_string_t = typename BasicJsonType::string_t;
+        using other_object_t = typename BasicJsonType::object_t;
+        using other_array_t = typename BasicJsonType::array_t;
+        using other_binary_t = typename BasicJsonType::binary_t;
+
+        switch (val.type())
+        {
+            case value_t::boolean:
+                JSONSerializer<other_boolean_t>::to_json(*this, val.template get<other_boolean_t>());
+                break;
+            case value_t::number_float:
+                JSONSerializer<other_number_float_t>::to_json(*this, val.template get<other_number_float_t>());
+                break;
+            case value_t::number_integer:
+                JSONSerializer<other_number_integer_t>::to_json(*this, val.template get<other_number_integer_t>());
+                break;
+            case value_t::number_unsigned:
+                JSONSerializer<other_number_unsigned_t>::to_json(*this, val.template get<other_number_unsigned_t>());
+                break;
+            case value_t::string:
+                JSONSerializer<other_string_t>::to_json(*this, val.template get_ref<const other_string_t&>());
+                break;
+            case value_t::object:
+                JSONSerializer<other_object_t>::to_json(*this, val.template get_ref<const other_object_t&>());
+                break;
+            case value_t::array:
+                JSONSerializer<other_array_t>::to_json(*this, val.template get_ref<const other_array_t&>());
+                break;
+            case value_t::binary:
+                JSONSerializer<other_binary_t>::to_json(*this, val.template get_ref<const other_binary_t&>());
+                break;
+            case value_t::null:
+                *this = nullptr;
+                break;
+            case value_t::discarded:
+                m_type = value_t::discarded;
+                break;
+            default:            // LCOV_EXCL_LINE
+                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE
+        }
+        JSON_ASSERT(m_type == val.type());
+        set_parents();
+        assert_invariant();
+    }
+
+    /// @brief create a container (array or object) from an initializer list
+    /// @sa https://json.nlohmann.me/api/basic_json/basic_json/
+    basic_json(initializer_list_t init,
+               bool type_deduction = true,
+               value_t manual_type = value_t::array)
+    {
+        // check if each element is an array with two elements whose first
+        // element is a string
+        bool is_an_object = std::all_of(init.begin(), init.end(),
+                                        [](const detail::json_ref<basic_json>& element_ref)
+        {
+            return element_ref->is_array() && element_ref->size() == 2 && (*element_ref)[0].is_string();
+        });
+
+        // adjust type if type deduction is not wanted
+        if (!type_deduction)
+        {
+            // if array is wanted, do not create an object though possible
+            if (manual_type == value_t::array)
+            {
+                is_an_object = false;
+            }
+
+            // if object is wanted but impossible, throw an exception
+            if (JSON_HEDLEY_UNLIKELY(manual_type == value_t::object && !is_an_object))
+            {
+                JSON_THROW(type_error::create(301, "cannot create object from initializer list", nullptr));
+            }
+        }
+
+        if (is_an_object)
+        {
+            // the initializer list is a list of pairs -> create object
+            m_type = value_t::object;
+            m_value = value_t::object;
+
+            for (auto& element_ref : init)
+            {
+                auto element = element_ref.moved_or_copied();
+                m_value.object->emplace(
+                    std::move(*((*element.m_value.array)[0].m_value.string)),
+                    std::move((*element.m_value.array)[1]));
+            }
+        }
+        else
+        {
+            // the initializer list describes an array -> create array
+            m_type = value_t::array;
+            m_value.array = create<array_t>(init.begin(), init.end());
+        }
+
+        set_parents();
+        assert_invariant();
+    }
+
+    /// @brief explicitly create a binary array (without subtype)
+    /// @sa https://json.nlohmann.me/api/basic_json/binary/
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    static basic_json binary(const typename binary_t::container_type& init)
+    {
+        auto res = basic_json();
+        res.m_type = value_t::binary;
+        res.m_value = init;
+        return res;
+    }
+
+    /// @brief explicitly create a binary array (with subtype)
+    /// @sa https://json.nlohmann.me/api/basic_json/binary/
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    static basic_json binary(const typename binary_t::container_type& init, typename binary_t::subtype_type subtype)
+    {
+        auto res = basic_json();
+        res.m_type = value_t::binary;
+        res.m_value = binary_t(init, subtype);
+        return res;
+    }
+
+    /// @brief explicitly create a binary array
+    /// @sa https://json.nlohmann.me/api/basic_json/binary/
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    static basic_json binary(typename binary_t::container_type&& init)
+    {
+        auto res = basic_json();
+        res.m_type = value_t::binary;
+        res.m_value = std::move(init);
+        return res;
+    }
+
+    /// @brief explicitly create a binary array (with subtype)
+    /// @sa https://json.nlohmann.me/api/basic_json/binary/
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    static basic_json binary(typename binary_t::container_type&& init, typename binary_t::subtype_type subtype)
+    {
+        auto res = basic_json();
+        res.m_type = value_t::binary;
+        res.m_value = binary_t(std::move(init), subtype);
+        return res;
+    }
+
+    /// @brief explicitly create an array from an initializer list
+    /// @sa https://json.nlohmann.me/api/basic_json/array/
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    static basic_json array(initializer_list_t init = {})
+    {
+        return basic_json(init, false, value_t::array);
+    }
+
+    /// @brief explicitly create an object from an initializer list
+    /// @sa https://json.nlohmann.me/api/basic_json/object/
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    static basic_json object(initializer_list_t init = {})
+    {
+        return basic_json(init, false, value_t::object);
+    }
+
+    /// @brief construct an array with count copies of given value
+    /// @sa https://json.nlohmann.me/api/basic_json/basic_json/
+    basic_json(size_type cnt, const basic_json& val)
+        : m_type(value_t::array)
+    {
+        m_value.array = create<array_t>(cnt, val);
+        set_parents();
+        assert_invariant();
+    }
+
+    /// @brief construct a JSON container given an iterator range
+    /// @sa https://json.nlohmann.me/api/basic_json/basic_json/
+    template < class InputIT, typename std::enable_if <
+                   std::is_same<InputIT, typename basic_json_t::iterator>::value ||
+                   std::is_same<InputIT, typename basic_json_t::const_iterator>::value, int >::type = 0 >
+    basic_json(InputIT first, InputIT last)
+    {
+        JSON_ASSERT(first.m_object != nullptr);
+        JSON_ASSERT(last.m_object != nullptr);
+
+        // make sure iterator fits the current value
+        if (JSON_HEDLEY_UNLIKELY(first.m_object != last.m_object))
+        {
+            JSON_THROW(invalid_iterator::create(201, "iterators are not compatible", nullptr));
+        }
+
+        // copy type from first iterator
+        m_type = first.m_object->m_type;
+
+        // check if iterator range is complete for primitive values
+        switch (m_type)
+        {
+            case value_t::boolean:
+            case value_t::number_float:
+            case value_t::number_integer:
+            case value_t::number_unsigned:
+            case value_t::string:
+            {
+                if (JSON_HEDLEY_UNLIKELY(!first.m_it.primitive_iterator.is_begin()
+                                         || !last.m_it.primitive_iterator.is_end()))
+                {
+                    JSON_THROW(invalid_iterator::create(204, "iterators out of range", first.m_object));
+                }
+                break;
+            }
+
+            case value_t::null:
+            case value_t::object:
+            case value_t::array:
+            case value_t::binary:
+            case value_t::discarded:
+            default:
+                break;
+        }
+
+        switch (m_type)
+        {
+            case value_t::number_integer:
+            {
+                m_value.number_integer = first.m_object->m_value.number_integer;
+                break;
+            }
+
+            case value_t::number_unsigned:
+            {
+                m_value.number_unsigned = first.m_object->m_value.number_unsigned;
+                break;
+            }
+
+            case value_t::number_float:
+            {
+                m_value.number_float = first.m_object->m_value.number_float;
+                break;
+            }
+
+            case value_t::boolean:
+            {
+                m_value.boolean = first.m_object->m_value.boolean;
+                break;
+            }
+
+            case value_t::string:
+            {
+                m_value = *first.m_object->m_value.string;
+                break;
+            }
+
+            case value_t::object:
+            {
+                m_value.object = create<object_t>(first.m_it.object_iterator,
+                                                  last.m_it.object_iterator);
+                break;
+            }
+
+            case value_t::array:
+            {
+                m_value.array = create<array_t>(first.m_it.array_iterator,
+                                                last.m_it.array_iterator);
+                break;
+            }
+
+            case value_t::binary:
+            {
+                m_value = *first.m_object->m_value.binary;
+                break;
+            }
+
+            case value_t::null:
+            case value_t::discarded:
+            default:
+                JSON_THROW(invalid_iterator::create(206, detail::concat("cannot construct with iterators from ", first.m_object->type_name()), first.m_object));
+        }
+
+        set_parents();
+        assert_invariant();
+    }
+
+
+    ///////////////////////////////////////
+    // other constructors and destructor //
+    ///////////////////////////////////////
+
+    template<typename JsonRef,
+             detail::enable_if_t<detail::conjunction<detail::is_json_ref<JsonRef>,
+                                 std::is_same<typename JsonRef::value_type, basic_json>>::value, int> = 0 >
+    basic_json(const JsonRef& ref) : basic_json(ref.moved_or_copied()) {}
+
+    /// @brief copy constructor
+    /// @sa https://json.nlohmann.me/api/basic_json/basic_json/
+    basic_json(const basic_json& other)
+        : json_base_class_t(other),
+          m_type(other.m_type)
+    {
+        // check of passed value is valid
+        other.assert_invariant();
+
+        switch (m_type)
+        {
+            case value_t::object:
+            {
+                m_value = *other.m_value.object;
+                break;
+            }
+
+            case value_t::array:
+            {
+                m_value = *other.m_value.array;
+                break;
+            }
+
+            case value_t::string:
+            {
+                m_value = *other.m_value.string;
+                break;
+            }
+
+            case value_t::boolean:
+            {
+                m_value = other.m_value.boolean;
+                break;
+            }
+
+            case value_t::number_integer:
+            {
+                m_value = other.m_value.number_integer;
+                break;
+            }
+
+            case value_t::number_unsigned:
+            {
+                m_value = other.m_value.number_unsigned;
+                break;
+            }
+
+            case value_t::number_float:
+            {
+                m_value = other.m_value.number_float;
+                break;
+            }
+
+            case value_t::binary:
+            {
+                m_value = *other.m_value.binary;
+                break;
+            }
+
+            case value_t::null:
+            case value_t::discarded:
+            default:
+                break;
+        }
+
+        set_parents();
+        assert_invariant();
+    }
+
+    /// @brief move constructor
+    /// @sa https://json.nlohmann.me/api/basic_json/basic_json/
+    basic_json(basic_json&& other) noexcept
+        : json_base_class_t(std::move(other)),
+          m_type(std::move(other.m_type)),
+          m_value(std::move(other.m_value))
+    {
+        // check that passed value is valid
+        other.assert_invariant(false); // NOLINT(bugprone-use-after-move,hicpp-invalid-access-moved)
+
+        // invalidate payload
+        other.m_type = value_t::null;
+        other.m_value = {};
+
+        set_parents();
+        assert_invariant();
+    }
+
+    /// @brief copy assignment
+    /// @sa https://json.nlohmann.me/api/basic_json/operator=/
+    basic_json& operator=(basic_json other) noexcept (
+        std::is_nothrow_move_constructible<value_t>::value&&
+        std::is_nothrow_move_assignable<value_t>::value&&
+        std::is_nothrow_move_constructible<json_value>::value&&
+        std::is_nothrow_move_assignable<json_value>::value&&
+        std::is_nothrow_move_assignable<json_base_class_t>::value
+    )
+    {
+        // check that passed value is valid
+        other.assert_invariant();
+
+        using std::swap;
+        swap(m_type, other.m_type);
+        swap(m_value, other.m_value);
+        json_base_class_t::operator=(std::move(other));
+
+        set_parents();
+        assert_invariant();
+        return *this;
+    }
+
+    /// @brief destructor
+    /// @sa https://json.nlohmann.me/api/basic_json/~basic_json/
+    ~basic_json() noexcept
+    {
+        assert_invariant(false);
+        m_value.destroy(m_type);
+    }
+
+    /// @}
+
+  public:
+    ///////////////////////
+    // object inspection //
+    ///////////////////////
+
+    /// @name object inspection
+    /// Functions to inspect the type of a JSON value.
+    /// @{
+
+    /// @brief serialization
+    /// @sa https://json.nlohmann.me/api/basic_json/dump/
+    string_t dump(const int indent = -1,
+                  const char indent_char = ' ',
+                  const bool ensure_ascii = false,
+                  const error_handler_t error_handler = error_handler_t::strict) const
+    {
+        string_t result;
+        serializer s(detail::output_adapter<char, string_t>(result), indent_char, error_handler);
+
+        if (indent >= 0)
+        {
+            s.dump(*this, true, ensure_ascii, static_cast<unsigned int>(indent));
+        }
+        else
+        {
+            s.dump(*this, false, ensure_ascii, 0);
+        }
+
+        return result;
+    }
+
+    /// @brief return the type of the JSON value (explicit)
+    /// @sa https://json.nlohmann.me/api/basic_json/type/
+    constexpr value_t type() const noexcept
+    {
+        return m_type;
+    }
+
+    /// @brief return whether type is primitive
+    /// @sa https://json.nlohmann.me/api/basic_json/is_primitive/
+    constexpr bool is_primitive() const noexcept
+    {
+        return is_null() || is_string() || is_boolean() || is_number() || is_binary();
+    }
+
+    /// @brief return whether type is structured
+    /// @sa https://json.nlohmann.me/api/basic_json/is_structured/
+    constexpr bool is_structured() const noexcept
+    {
+        return is_array() || is_object();
+    }
+
+    /// @brief return whether value is null
+    /// @sa https://json.nlohmann.me/api/basic_json/is_null/
+    constexpr bool is_null() const noexcept
+    {
+        return m_type == value_t::null;
+    }
+
+    /// @brief return whether value is a boolean
+    /// @sa https://json.nlohmann.me/api/basic_json/is_boolean/
+    constexpr bool is_boolean() const noexcept
+    {
+        return m_type == value_t::boolean;
+    }
+
+    /// @brief return whether value is a number
+    /// @sa https://json.nlohmann.me/api/basic_json/is_number/
+    constexpr bool is_number() const noexcept
+    {
+        return is_number_integer() || is_number_float();
+    }
+
+    /// @brief return whether value is an integer number
+    /// @sa https://json.nlohmann.me/api/basic_json/is_number_integer/
+    constexpr bool is_number_integer() const noexcept
+    {
+        return m_type == value_t::number_integer || m_type == value_t::number_unsigned;
+    }
+
+    /// @brief return whether value is an unsigned integer number
+    /// @sa https://json.nlohmann.me/api/basic_json/is_number_unsigned/
+    constexpr bool is_number_unsigned() const noexcept
+    {
+        return m_type == value_t::number_unsigned;
+    }
+
+    /// @brief return whether value is a floating-point number
+    /// @sa https://json.nlohmann.me/api/basic_json/is_number_float/
+    constexpr bool is_number_float() const noexcept
+    {
+        return m_type == value_t::number_float;
+    }
+
+    /// @brief return whether value is an object
+    /// @sa https://json.nlohmann.me/api/basic_json/is_object/
+    constexpr bool is_object() const noexcept
+    {
+        return m_type == value_t::object;
+    }
+
+    /// @brief return whether value is an array
+    /// @sa https://json.nlohmann.me/api/basic_json/is_array/
+    constexpr bool is_array() const noexcept
+    {
+        return m_type == value_t::array;
+    }
+
+    /// @brief return whether value is a string
+    /// @sa https://json.nlohmann.me/api/basic_json/is_string/
+    constexpr bool is_string() const noexcept
+    {
+        return m_type == value_t::string;
+    }
+
+    /// @brief return whether value is a binary array
+    /// @sa https://json.nlohmann.me/api/basic_json/is_binary/
+    constexpr bool is_binary() const noexcept
+    {
+        return m_type == value_t::binary;
+    }
+
+    /// @brief return whether value is discarded
+    /// @sa https://json.nlohmann.me/api/basic_json/is_discarded/
+    constexpr bool is_discarded() const noexcept
+    {
+        return m_type == value_t::discarded;
+    }
+
+    /// @brief return the type of the JSON value (implicit)
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_value_t/
+    constexpr operator value_t() const noexcept
+    {
+        return m_type;
+    }
+
+    /// @}
+
+  private:
+    //////////////////
+    // value access //
+    //////////////////
+
+    /// get a boolean (explicit)
+    boolean_t get_impl(boolean_t* /*unused*/) const
+    {
+        if (JSON_HEDLEY_LIKELY(is_boolean()))
+        {
+            return m_value.boolean;
+        }
+
+        JSON_THROW(type_error::create(302, detail::concat("type must be boolean, but is ", type_name()), this));
+    }
+
+    /// get a pointer to the value (object)
+    object_t* get_impl_ptr(object_t* /*unused*/) noexcept
+    {
+        return is_object() ? m_value.object : nullptr;
+    }
+
+    /// get a pointer to the value (object)
+    constexpr const object_t* get_impl_ptr(const object_t* /*unused*/) const noexcept
+    {
+        return is_object() ? m_value.object : nullptr;
+    }
+
+    /// get a pointer to the value (array)
+    array_t* get_impl_ptr(array_t* /*unused*/) noexcept
+    {
+        return is_array() ? m_value.array : nullptr;
+    }
+
+    /// get a pointer to the value (array)
+    constexpr const array_t* get_impl_ptr(const array_t* /*unused*/) const noexcept
+    {
+        return is_array() ? m_value.array : nullptr;
+    }
+
+    /// get a pointer to the value (string)
+    string_t* get_impl_ptr(string_t* /*unused*/) noexcept
+    {
+        return is_string() ? m_value.string : nullptr;
+    }
+
+    /// get a pointer to the value (string)
+    constexpr const string_t* get_impl_ptr(const string_t* /*unused*/) const noexcept
+    {
+        return is_string() ? m_value.string : nullptr;
+    }
+
+    /// get a pointer to the value (boolean)
+    boolean_t* get_impl_ptr(boolean_t* /*unused*/) noexcept
+    {
+        return is_boolean() ? &m_value.boolean : nullptr;
+    }
+
+    /// get a pointer to the value (boolean)
+    constexpr const boolean_t* get_impl_ptr(const boolean_t* /*unused*/) const noexcept
+    {
+        return is_boolean() ? &m_value.boolean : nullptr;
+    }
+
+    /// get a pointer to the value (integer number)
+    number_integer_t* get_impl_ptr(number_integer_t* /*unused*/) noexcept
+    {
+        return is_number_integer() ? &m_value.number_integer : nullptr;
+    }
+
+    /// get a pointer to the value (integer number)
+    constexpr const number_integer_t* get_impl_ptr(const number_integer_t* /*unused*/) const noexcept
+    {
+        return is_number_integer() ? &m_value.number_integer : nullptr;
+    }
+
+    /// get a pointer to the value (unsigned number)
+    number_unsigned_t* get_impl_ptr(number_unsigned_t* /*unused*/) noexcept
+    {
+        return is_number_unsigned() ? &m_value.number_unsigned : nullptr;
+    }
+
+    /// get a pointer to the value (unsigned number)
+    constexpr const number_unsigned_t* get_impl_ptr(const number_unsigned_t* /*unused*/) const noexcept
+    {
+        return is_number_unsigned() ? &m_value.number_unsigned : nullptr;
+    }
+
+    /// get a pointer to the value (floating-point number)
+    number_float_t* get_impl_ptr(number_float_t* /*unused*/) noexcept
+    {
+        return is_number_float() ? &m_value.number_float : nullptr;
+    }
+
+    /// get a pointer to the value (floating-point number)
+    constexpr const number_float_t* get_impl_ptr(const number_float_t* /*unused*/) const noexcept
+    {
+        return is_number_float() ? &m_value.number_float : nullptr;
+    }
+
+    /// get a pointer to the value (binary)
+    binary_t* get_impl_ptr(binary_t* /*unused*/) noexcept
+    {
+        return is_binary() ? m_value.binary : nullptr;
+    }
+
+    /// get a pointer to the value (binary)
+    constexpr const binary_t* get_impl_ptr(const binary_t* /*unused*/) const noexcept
+    {
+        return is_binary() ? m_value.binary : nullptr;
+    }
+
+    /*!
+    @brief helper function to implement get_ref()
+
+    This function helps to implement get_ref() without code duplication for
+    const and non-const overloads
+
+    @tparam ThisType will be deduced as `basic_json` or `const basic_json`
+
+    @throw type_error.303 if ReferenceType does not match underlying value
+    type of the current JSON
+    */
+    template<typename ReferenceType, typename ThisType>
+    static ReferenceType get_ref_impl(ThisType& obj)
+    {
+        // delegate the call to get_ptr<>()
+        auto* ptr = obj.template get_ptr<typename std::add_pointer<ReferenceType>::type>();
+
+        if (JSON_HEDLEY_LIKELY(ptr != nullptr))
+        {
+            return *ptr;
+        }
+
+        JSON_THROW(type_error::create(303, detail::concat("incompatible ReferenceType for get_ref, actual type is ", obj.type_name()), &obj));
+    }
+
+  public:
+    /// @name value access
+    /// Direct access to the stored value of a JSON value.
+    /// @{
+
+    /// @brief get a pointer value (implicit)
+    /// @sa https://json.nlohmann.me/api/basic_json/get_ptr/
+    template<typename PointerType, typename std::enable_if<
+                 std::is_pointer<PointerType>::value, int>::type = 0>
+    auto get_ptr() noexcept -> decltype(std::declval<basic_json_t&>().get_impl_ptr(std::declval<PointerType>()))
+    {
+        // delegate the call to get_impl_ptr<>()
+        return get_impl_ptr(static_cast<PointerType>(nullptr));
+    }
+
+    /// @brief get a pointer value (implicit)
+    /// @sa https://json.nlohmann.me/api/basic_json/get_ptr/
+    template < typename PointerType, typename std::enable_if <
+                   std::is_pointer<PointerType>::value&&
+                   std::is_const<typename std::remove_pointer<PointerType>::type>::value, int >::type = 0 >
+    constexpr auto get_ptr() const noexcept -> decltype(std::declval<const basic_json_t&>().get_impl_ptr(std::declval<PointerType>()))
+    {
+        // delegate the call to get_impl_ptr<>() const
+        return get_impl_ptr(static_cast<PointerType>(nullptr));
+    }
+
+  private:
+    /*!
+    @brief get a value (explicit)
+
+    Explicit type conversion between the JSON value and a compatible value
+    which is [CopyConstructible](https://en.cppreference.com/w/cpp/named_req/CopyConstructible)
+    and [DefaultConstructible](https://en.cppreference.com/w/cpp/named_req/DefaultConstructible).
+    The value is converted by calling the @ref json_serializer<ValueType>
+    `from_json()` method.
+
+    The function is equivalent to executing
+    @code {.cpp}
+    ValueType ret;
+    JSONSerializer<ValueType>::from_json(*this, ret);
+    return ret;
+    @endcode
+
+    This overloads is chosen if:
+    - @a ValueType is not @ref basic_json,
+    - @ref json_serializer<ValueType> has a `from_json()` method of the form
+      `void from_json(const basic_json&, ValueType&)`, and
+    - @ref json_serializer<ValueType> does not have a `from_json()` method of
+      the form `ValueType from_json(const basic_json&)`
+
+    @tparam ValueType the returned value type
+
+    @return copy of the JSON value, converted to @a ValueType
+
+    @throw what @ref json_serializer<ValueType> `from_json()` method throws
+
+    @liveexample{The example below shows several conversions from JSON values
+    to other types. There a few things to note: (1) Floating-point numbers can
+    be converted to integers\, (2) A JSON array can be converted to a standard
+    `std::vector<short>`\, (3) A JSON object can be converted to C++
+    associative containers such as `std::unordered_map<std::string\,
+    json>`.,get__ValueType_const}
+
+    @since version 2.1.0
+    */
+    template < typename ValueType,
+               detail::enable_if_t <
+                   detail::is_default_constructible<ValueType>::value&&
+                   detail::has_from_json<basic_json_t, ValueType>::value,
+                   int > = 0 >
+    ValueType get_impl(detail::priority_tag<0> /*unused*/) const noexcept(noexcept(
+                JSONSerializer<ValueType>::from_json(std::declval<const basic_json_t&>(), std::declval<ValueType&>())))
+    {
+        auto ret = ValueType();
+        JSONSerializer<ValueType>::from_json(*this, ret);
+        return ret;
+    }
+
+    /*!
+    @brief get a value (explicit); special case
+
+    Explicit type conversion between the JSON value and a compatible value
+    which is **not** [CopyConstructible](https://en.cppreference.com/w/cpp/named_req/CopyConstructible)
+    and **not** [DefaultConstructible](https://en.cppreference.com/w/cpp/named_req/DefaultConstructible).
+    The value is converted by calling the @ref json_serializer<ValueType>
+    `from_json()` method.
+
+    The function is equivalent to executing
+    @code {.cpp}
+    return JSONSerializer<ValueType>::from_json(*this);
+    @endcode
+
+    This overloads is chosen if:
+    - @a ValueType is not @ref basic_json and
+    - @ref json_serializer<ValueType> has a `from_json()` method of the form
+      `ValueType from_json(const basic_json&)`
+
+    @note If @ref json_serializer<ValueType> has both overloads of
+    `from_json()`, this one is chosen.
+
+    @tparam ValueType the returned value type
+
+    @return copy of the JSON value, converted to @a ValueType
+
+    @throw what @ref json_serializer<ValueType> `from_json()` method throws
+
+    @since version 2.1.0
+    */
+    template < typename ValueType,
+               detail::enable_if_t <
+                   detail::has_non_default_from_json<basic_json_t, ValueType>::value,
+                   int > = 0 >
+    ValueType get_impl(detail::priority_tag<1> /*unused*/) const noexcept(noexcept(
+                JSONSerializer<ValueType>::from_json(std::declval<const basic_json_t&>())))
+    {
+        return JSONSerializer<ValueType>::from_json(*this);
+    }
+
+    /*!
+    @brief get special-case overload
+
+    This overloads converts the current @ref basic_json in a different
+    @ref basic_json type
+
+    @tparam BasicJsonType == @ref basic_json
+
+    @return a copy of *this, converted into @a BasicJsonType
+
+    @complexity Depending on the implementation of the called `from_json()`
+                method.
+
+    @since version 3.2.0
+    */
+    template < typename BasicJsonType,
+               detail::enable_if_t <
+                   detail::is_basic_json<BasicJsonType>::value,
+                   int > = 0 >
+    BasicJsonType get_impl(detail::priority_tag<2> /*unused*/) const
+    {
+        return *this;
+    }
+
+    /*!
+    @brief get special-case overload
+
+    This overloads avoids a lot of template boilerplate, it can be seen as the
+    identity method
+
+    @tparam BasicJsonType == @ref basic_json
+
+    @return a copy of *this
+
+    @complexity Constant.
+
+    @since version 2.1.0
+    */
+    template<typename BasicJsonType,
+             detail::enable_if_t<
+                 std::is_same<BasicJsonType, basic_json_t>::value,
+                 int> = 0>
+    basic_json get_impl(detail::priority_tag<3> /*unused*/) const
+    {
+        return *this;
+    }
+
+    /*!
+    @brief get a pointer value (explicit)
+    @copydoc get()
+    */
+    template<typename PointerType,
+             detail::enable_if_t<
+                 std::is_pointer<PointerType>::value,
+                 int> = 0>
+    constexpr auto get_impl(detail::priority_tag<4> /*unused*/) const noexcept
+    -> decltype(std::declval<const basic_json_t&>().template get_ptr<PointerType>())
+    {
+        // delegate the call to get_ptr
+        return get_ptr<PointerType>();
+    }
+
+  public:
+    /*!
+    @brief get a (pointer) value (explicit)
+
+    Performs explicit type conversion between the JSON value and a compatible value if required.
+
+    - If the requested type is a pointer to the internally stored JSON value that pointer is returned.
+    No copies are made.
+
+    - If the requested type is the current @ref basic_json, or a different @ref basic_json convertible
+    from the current @ref basic_json.
+
+    - Otherwise the value is converted by calling the @ref json_serializer<ValueType> `from_json()`
+    method.
+
+    @tparam ValueTypeCV the provided value type
+    @tparam ValueType the returned value type
+
+    @return copy of the JSON value, converted to @tparam ValueType if necessary
+
+    @throw what @ref json_serializer<ValueType> `from_json()` method throws if conversion is required
+
+    @since version 2.1.0
+    */
+    template < typename ValueTypeCV, typename ValueType = detail::uncvref_t<ValueTypeCV>>
+#if defined(JSON_HAS_CPP_14)
+    constexpr
+#endif
+    auto get() const noexcept(
+    noexcept(std::declval<const basic_json_t&>().template get_impl<ValueType>(detail::priority_tag<4> {})))
+    -> decltype(std::declval<const basic_json_t&>().template get_impl<ValueType>(detail::priority_tag<4> {}))
+    {
+        // we cannot static_assert on ValueTypeCV being non-const, because
+        // there is support for get<const basic_json_t>(), which is why we
+        // still need the uncvref
+        static_assert(!std::is_reference<ValueTypeCV>::value,
+                      "get() cannot be used with reference types, you might want to use get_ref()");
+        return get_impl<ValueType>(detail::priority_tag<4> {});
+    }
+
+    /*!
+    @brief get a pointer value (explicit)
+
+    Explicit pointer access to the internally stored JSON value. No copies are
+    made.
+
+    @warning The pointer becomes invalid if the underlying JSON object
+    changes.
+
+    @tparam PointerType pointer type; must be a pointer to @ref array_t, @ref
+    object_t, @ref string_t, @ref boolean_t, @ref number_integer_t,
+    @ref number_unsigned_t, or @ref number_float_t.
+
+    @return pointer to the internally stored JSON value if the requested
+    pointer type @a PointerType fits to the JSON value; `nullptr` otherwise
+
+    @complexity Constant.
+
+    @liveexample{The example below shows how pointers to internal values of a
+    JSON value can be requested. Note that no type conversions are made and a
+    `nullptr` is returned if the value and the requested pointer type does not
+    match.,get__PointerType}
+
+    @sa see @ref get_ptr() for explicit pointer-member access
+
+    @since version 1.0.0
+    */
+    template<typename PointerType, typename std::enable_if<
+                 std::is_pointer<PointerType>::value, int>::type = 0>
+    auto get() noexcept -> decltype(std::declval<basic_json_t&>().template get_ptr<PointerType>())
+    {
+        // delegate the call to get_ptr
+        return get_ptr<PointerType>();
+    }
+
+    /// @brief get a value (explicit)
+    /// @sa https://json.nlohmann.me/api/basic_json/get_to/
+    template < typename ValueType,
+               detail::enable_if_t <
+                   !detail::is_basic_json<ValueType>::value&&
+                   detail::has_from_json<basic_json_t, ValueType>::value,
+                   int > = 0 >
+    ValueType & get_to(ValueType& v) const noexcept(noexcept(
+                JSONSerializer<ValueType>::from_json(std::declval<const basic_json_t&>(), v)))
+    {
+        JSONSerializer<ValueType>::from_json(*this, v);
+        return v;
+    }
+
+    // specialization to allow calling get_to with a basic_json value
+    // see https://github.com/nlohmann/json/issues/2175
+    template<typename ValueType,
+             detail::enable_if_t <
+                 detail::is_basic_json<ValueType>::value,
+                 int> = 0>
+    ValueType & get_to(ValueType& v) const
+    {
+        v = *this;
+        return v;
+    }
+
+    template <
+        typename T, std::size_t N,
+        typename Array = T (&)[N], // NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)
+        detail::enable_if_t <
+            detail::has_from_json<basic_json_t, Array>::value, int > = 0 >
+    Array get_to(T (&v)[N]) const // NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)
+    noexcept(noexcept(JSONSerializer<Array>::from_json(
+                          std::declval<const basic_json_t&>(), v)))
+    {
+        JSONSerializer<Array>::from_json(*this, v);
+        return v;
+    }
+
+    /// @brief get a reference value (implicit)
+    /// @sa https://json.nlohmann.me/api/basic_json/get_ref/
+    template<typename ReferenceType, typename std::enable_if<
+                 std::is_reference<ReferenceType>::value, int>::type = 0>
+    ReferenceType get_ref()
+    {
+        // delegate call to get_ref_impl
+        return get_ref_impl<ReferenceType>(*this);
+    }
+
+    /// @brief get a reference value (implicit)
+    /// @sa https://json.nlohmann.me/api/basic_json/get_ref/
+    template < typename ReferenceType, typename std::enable_if <
+                   std::is_reference<ReferenceType>::value&&
+                   std::is_const<typename std::remove_reference<ReferenceType>::type>::value, int >::type = 0 >
+    ReferenceType get_ref() const
+    {
+        // delegate call to get_ref_impl
+        return get_ref_impl<ReferenceType>(*this);
+    }
+
+    /*!
+    @brief get a value (implicit)
+
+    Implicit type conversion between the JSON value and a compatible value.
+    The call is realized by calling @ref get() const.
+
+    @tparam ValueType non-pointer type compatible to the JSON value, for
+    instance `int` for JSON integer numbers, `bool` for JSON booleans, or
+    `std::vector` types for JSON arrays. The character type of @ref string_t
+    as well as an initializer list of this type is excluded to avoid
+    ambiguities as these types implicitly convert to `std::string`.
+
+    @return copy of the JSON value, converted to type @a ValueType
+
+    @throw type_error.302 in case passed type @a ValueType is incompatible
+    to the JSON value type (e.g., the JSON value is of type boolean, but a
+    string is requested); see example below
+
+    @complexity Linear in the size of the JSON value.
+
+    @liveexample{The example below shows several conversions from JSON values
+    to other types. There a few things to note: (1) Floating-point numbers can
+    be converted to integers\, (2) A JSON array can be converted to a standard
+    `std::vector<short>`\, (3) A JSON object can be converted to C++
+    associative containers such as `std::unordered_map<std::string\,
+    json>`.,operator__ValueType}
+
+    @since version 1.0.0
+    */
+    template < typename ValueType, typename std::enable_if <
+                   detail::conjunction <
+                       detail::negation<std::is_pointer<ValueType>>,
+                       detail::negation<std::is_same<ValueType, std::nullptr_t>>,
+                       detail::negation<std::is_same<ValueType, detail::json_ref<basic_json>>>,
+                                        detail::negation<std::is_same<ValueType, typename string_t::value_type>>,
+                                        detail::negation<detail::is_basic_json<ValueType>>,
+                                        detail::negation<std::is_same<ValueType, std::initializer_list<typename string_t::value_type>>>,
+#if defined(JSON_HAS_CPP_17) && (defined(__GNUC__) || (defined(_MSC_VER) && _MSC_VER >= 1910 && _MSC_VER <= 1914))
+                                                detail::negation<std::is_same<ValueType, std::string_view>>,
+#endif
+#if defined(JSON_HAS_CPP_17)
+                                                detail::negation<std::is_same<ValueType, std::any>>,
+#endif
+                                                detail::is_detected_lazy<detail::get_template_function, const basic_json_t&, ValueType>
+                                                >::value, int >::type = 0 >
+                                        JSON_EXPLICIT operator ValueType() const
+    {
+        // delegate the call to get<>() const
+        return get<ValueType>();
+    }
+
+    /// @brief get a binary value
+    /// @sa https://json.nlohmann.me/api/basic_json/get_binary/
+    binary_t& get_binary()
+    {
+        if (!is_binary())
+        {
+            JSON_THROW(type_error::create(302, detail::concat("type must be binary, but is ", type_name()), this));
+        }
+
+        return *get_ptr<binary_t*>();
+    }
+
+    /// @brief get a binary value
+    /// @sa https://json.nlohmann.me/api/basic_json/get_binary/
+    const binary_t& get_binary() const
+    {
+        if (!is_binary())
+        {
+            JSON_THROW(type_error::create(302, detail::concat("type must be binary, but is ", type_name()), this));
+        }
+
+        return *get_ptr<const binary_t*>();
+    }
+
+    /// @}
+
+
+    ////////////////////
+    // element access //
+    ////////////////////
+
+    /// @name element access
+    /// Access to the JSON value.
+    /// @{
+
+    /// @brief access specified array element with bounds checking
+    /// @sa https://json.nlohmann.me/api/basic_json/at/
+    reference at(size_type idx)
+    {
+        // at only works for arrays
+        if (JSON_HEDLEY_LIKELY(is_array()))
+        {
+            JSON_TRY
+            {
+                return set_parent(m_value.array->at(idx));
+            }
+            JSON_CATCH (std::out_of_range&)
+            {
+                // create better exception explanation
+                JSON_THROW(out_of_range::create(401, detail::concat("array index ", std::to_string(idx), " is out of range"), this));
+            }
+        }
+        else
+        {
+            JSON_THROW(type_error::create(304, detail::concat("cannot use at() with ", type_name()), this));
+        }
+    }
+
+    /// @brief access specified array element with bounds checking
+    /// @sa https://json.nlohmann.me/api/basic_json/at/
+    const_reference at(size_type idx) const
+    {
+        // at only works for arrays
+        if (JSON_HEDLEY_LIKELY(is_array()))
+        {
+            JSON_TRY
+            {
+                return m_value.array->at(idx);
+            }
+            JSON_CATCH (std::out_of_range&)
+            {
+                // create better exception explanation
+                JSON_THROW(out_of_range::create(401, detail::concat("array index ", std::to_string(idx), " is out of range"), this));
+            }
+        }
+        else
+        {
+            JSON_THROW(type_error::create(304, detail::concat("cannot use at() with ", type_name()), this));
+        }
+    }
+
+    /// @brief access specified object element with bounds checking
+    /// @sa https://json.nlohmann.me/api/basic_json/at/
+    reference at(const typename object_t::key_type& key)
+    {
+        // at only works for objects
+        if (JSON_HEDLEY_UNLIKELY(!is_object()))
+        {
+            JSON_THROW(type_error::create(304, detail::concat("cannot use at() with ", type_name()), this));
+        }
+
+        auto it = m_value.object->find(key);
+        if (it == m_value.object->end())
+        {
+            JSON_THROW(out_of_range::create(403, detail::concat("key '", key, "' not found"), this));
+        }
+        return set_parent(it->second);
+    }
+
+    /// @brief access specified object element with bounds checking
+    /// @sa https://json.nlohmann.me/api/basic_json/at/
+    template<class KeyType, detail::enable_if_t<
+                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int> = 0>
+    reference at(KeyType && key)
+    {
+        // at only works for objects
+        if (JSON_HEDLEY_UNLIKELY(!is_object()))
+        {
+            JSON_THROW(type_error::create(304, detail::concat("cannot use at() with ", type_name()), this));
+        }
+
+        auto it = m_value.object->find(std::forward<KeyType>(key));
+        if (it == m_value.object->end())
+        {
+            JSON_THROW(out_of_range::create(403, detail::concat("key '", string_t(std::forward<KeyType>(key)), "' not found"), this));
+        }
+        return set_parent(it->second);
+    }
+
+    /// @brief access specified object element with bounds checking
+    /// @sa https://json.nlohmann.me/api/basic_json/at/
+    const_reference at(const typename object_t::key_type& key) const
+    {
+        // at only works for objects
+        if (JSON_HEDLEY_UNLIKELY(!is_object()))
+        {
+            JSON_THROW(type_error::create(304, detail::concat("cannot use at() with ", type_name()), this));
+        }
+
+        auto it = m_value.object->find(key);
+        if (it == m_value.object->end())
+        {
+            JSON_THROW(out_of_range::create(403, detail::concat("key '", key, "' not found"), this));
+        }
+        return it->second;
+    }
+
+    /// @brief access specified object element with bounds checking
+    /// @sa https://json.nlohmann.me/api/basic_json/at/
+    template<class KeyType, detail::enable_if_t<
+                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int> = 0>
+    const_reference at(KeyType && key) const
+    {
+        // at only works for objects
+        if (JSON_HEDLEY_UNLIKELY(!is_object()))
+        {
+            JSON_THROW(type_error::create(304, detail::concat("cannot use at() with ", type_name()), this));
+        }
+
+        auto it = m_value.object->find(std::forward<KeyType>(key));
+        if (it == m_value.object->end())
+        {
+            JSON_THROW(out_of_range::create(403, detail::concat("key '", string_t(std::forward<KeyType>(key)), "' not found"), this));
+        }
+        return it->second;
+    }
+
+    /// @brief access specified array element
+    /// @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/
+    reference operator[](size_type idx)
+    {
+        // implicitly convert null value to an empty array
+        if (is_null())
+        {
+            m_type = value_t::array;
+            m_value.array = create<array_t>();
+            assert_invariant();
+        }
+
+        // operator[] only works for arrays
+        if (JSON_HEDLEY_LIKELY(is_array()))
+        {
+            // fill up array with null values if given idx is outside range
+            if (idx >= m_value.array->size())
+            {
+#if JSON_DIAGNOSTICS
+                // remember array size & capacity before resizing
+                const auto old_size = m_value.array->size();
+                const auto old_capacity = m_value.array->capacity();
+#endif
+                m_value.array->resize(idx + 1);
+
+#if JSON_DIAGNOSTICS
+                if (JSON_HEDLEY_UNLIKELY(m_value.array->capacity() != old_capacity))
+                {
+                    // capacity has changed: update all parents
+                    set_parents();
+                }
+                else
+                {
+                    // set parent for values added above
+                    set_parents(begin() + static_cast<typename iterator::difference_type>(old_size), static_cast<typename iterator::difference_type>(idx + 1 - old_size));
+                }
+#endif
+                assert_invariant();
+            }
+
+            return m_value.array->operator[](idx);
+        }
+
+        JSON_THROW(type_error::create(305, detail::concat("cannot use operator[] with a numeric argument with ", type_name()), this));
+    }
+
+    /// @brief access specified array element
+    /// @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/
+    const_reference operator[](size_type idx) const
+    {
+        // const operator[] only works for arrays
+        if (JSON_HEDLEY_LIKELY(is_array()))
+        {
+            return m_value.array->operator[](idx);
+        }
+
+        JSON_THROW(type_error::create(305, detail::concat("cannot use operator[] with a numeric argument with ", type_name()), this));
+    }
+
+    /// @brief access specified object element
+    /// @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/
+    reference operator[](typename object_t::key_type key)
+    {
+        // implicitly convert null value to an empty object
+        if (is_null())
+        {
+            m_type = value_t::object;
+            m_value.object = create<object_t>();
+            assert_invariant();
+        }
+
+        // operator[] only works for objects
+        if (JSON_HEDLEY_LIKELY(is_object()))
+        {
+            auto result = m_value.object->emplace(std::move(key), nullptr);
+            return set_parent(result.first->second);
+        }
+
+        JSON_THROW(type_error::create(305, detail::concat("cannot use operator[] with a string argument with ", type_name()), this));
+    }
+
+    /// @brief access specified object element
+    /// @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/
+    const_reference operator[](const typename object_t::key_type& key) const
+    {
+        // const operator[] only works for objects
+        if (JSON_HEDLEY_LIKELY(is_object()))
+        {
+            auto it = m_value.object->find(key);
+            JSON_ASSERT(it != m_value.object->end());
+            return it->second;
+        }
+
+        JSON_THROW(type_error::create(305, detail::concat("cannot use operator[] with a string argument with ", type_name()), this));
+    }
+
+    // these two functions resolve a (const) char * ambiguity affecting Clang and MSVC
+    // (they seemingly cannot be constrained to resolve the ambiguity)
+    template<typename T>
+    reference operator[](T* key)
+    {
+        return operator[](typename object_t::key_type(key));
+    }
+
+    template<typename T>
+    const_reference operator[](T* key) const
+    {
+        return operator[](typename object_t::key_type(key));
+    }
+
+    /// @brief access specified object element
+    /// @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/
+    template<class KeyType, detail::enable_if_t<
+                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int > = 0 >
+    reference operator[](KeyType && key)
+    {
+        // implicitly convert null value to an empty object
+        if (is_null())
+        {
+            m_type = value_t::object;
+            m_value.object = create<object_t>();
+            assert_invariant();
+        }
+
+        // operator[] only works for objects
+        if (JSON_HEDLEY_LIKELY(is_object()))
+        {
+            auto result = m_value.object->emplace(std::forward<KeyType>(key), nullptr);
+            return set_parent(result.first->second);
+        }
+
+        JSON_THROW(type_error::create(305, detail::concat("cannot use operator[] with a string argument with ", type_name()), this));
+    }
+
+    /// @brief access specified object element
+    /// @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/
+    template<class KeyType, detail::enable_if_t<
+                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int > = 0 >
+    const_reference operator[](KeyType && key) const
+    {
+        // const operator[] only works for objects
+        if (JSON_HEDLEY_LIKELY(is_object()))
+        {
+            auto it = m_value.object->find(std::forward<KeyType>(key));
+            JSON_ASSERT(it != m_value.object->end());
+            return it->second;
+        }
+
+        JSON_THROW(type_error::create(305, detail::concat("cannot use operator[] with a string argument with ", type_name()), this));
+    }
+
+  private:
+    template<typename KeyType>
+    using is_comparable_with_object_key = detail::is_comparable <
+        object_comparator_t, const typename object_t::key_type&, KeyType >;
+
+    template<typename ValueType>
+    using value_return_type = std::conditional <
+        detail::is_c_string_uncvref<ValueType>::value,
+        string_t, typename std::decay<ValueType>::type >;
+
+  public:
+    /// @brief access specified object element with default value
+    /// @sa https://json.nlohmann.me/api/basic_json/value/
+    template < class ValueType, detail::enable_if_t <
+                   !detail::is_transparent<object_comparator_t>::value
+                   && detail::is_getable<basic_json_t, ValueType>::value
+                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >
+    ValueType value(const typename object_t::key_type& key, const ValueType& default_value) const
+    {
+        // value only works for objects
+        if (JSON_HEDLEY_LIKELY(is_object()))
+        {
+            // if key is found, return value and given default value otherwise
+            const auto it = find(key);
+            if (it != end())
+            {
+                return it->template get<ValueType>();
+            }
+
+            return default_value;
+        }
+
+        JSON_THROW(type_error::create(306, detail::concat("cannot use value() with ", type_name()), this));
+    }
+
+    /// @brief access specified object element with default value
+    /// @sa https://json.nlohmann.me/api/basic_json/value/
+    template < class ValueType, class ReturnType = typename value_return_type<ValueType>::type,
+               detail::enable_if_t <
+                   !detail::is_transparent<object_comparator_t>::value
+                   && detail::is_getable<basic_json_t, ReturnType>::value
+                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >
+    ReturnType value(const typename object_t::key_type& key, ValueType && default_value) const
+    {
+        // value only works for objects
+        if (JSON_HEDLEY_LIKELY(is_object()))
+        {
+            // if key is found, return value and given default value otherwise
+            const auto it = find(key);
+            if (it != end())
+            {
+                return it->template get<ReturnType>();
+            }
+
+            return std::forward<ValueType>(default_value);
+        }
+
+        JSON_THROW(type_error::create(306, detail::concat("cannot use value() with ", type_name()), this));
+    }
+
+    /// @brief access specified object element with default value
+    /// @sa https://json.nlohmann.me/api/basic_json/value/
+    template < class ValueType, class KeyType, detail::enable_if_t <
+                   detail::is_transparent<object_comparator_t>::value
+                   && !detail::is_json_pointer<KeyType>::value
+                   && is_comparable_with_object_key<KeyType>::value
+                   && detail::is_getable<basic_json_t, ValueType>::value
+                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >
+    ValueType value(KeyType && key, const ValueType& default_value) const
+    {
+        // value only works for objects
+        if (JSON_HEDLEY_LIKELY(is_object()))
+        {
+            // if key is found, return value and given default value otherwise
+            const auto it = find(std::forward<KeyType>(key));
+            if (it != end())
+            {
+                return it->template get<ValueType>();
+            }
+
+            return default_value;
+        }
+
+        JSON_THROW(type_error::create(306, detail::concat("cannot use value() with ", type_name()), this));
+    }
+
+    /// @brief access specified object element via JSON Pointer with default value
+    /// @sa https://json.nlohmann.me/api/basic_json/value/
+    template < class ValueType, class KeyType, class ReturnType = typename value_return_type<ValueType>::type,
+               detail::enable_if_t <
+                   detail::is_transparent<object_comparator_t>::value
+                   && !detail::is_json_pointer<KeyType>::value
+                   && is_comparable_with_object_key<KeyType>::value
+                   && detail::is_getable<basic_json_t, ReturnType>::value
+                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >
+    ReturnType value(KeyType && key, ValueType && default_value) const
+    {
+        // value only works for objects
+        if (JSON_HEDLEY_LIKELY(is_object()))
+        {
+            // if key is found, return value and given default value otherwise
+            const auto it = find(std::forward<KeyType>(key));
+            if (it != end())
+            {
+                return it->template get<ReturnType>();
+            }
+
+            return std::forward<ValueType>(default_value);
+        }
+
+        JSON_THROW(type_error::create(306, detail::concat("cannot use value() with ", type_name()), this));
+    }
+
+    /// @brief access specified object element via JSON Pointer with default value
+    /// @sa https://json.nlohmann.me/api/basic_json/value/
+    template < class ValueType, detail::enable_if_t <
+                   detail::is_getable<basic_json_t, ValueType>::value
+                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >
+    ValueType value(const json_pointer& ptr, const ValueType& default_value) const
+    {
+        // value only works for objects
+        if (JSON_HEDLEY_LIKELY(is_object()))
+        {
+            // if pointer resolves a value, return it or use default value
+            JSON_TRY
+            {
+                return ptr.get_checked(this).template get<ValueType>();
+            }
+            JSON_INTERNAL_CATCH (out_of_range&)
+            {
+                return default_value;
+            }
+        }
+
+        JSON_THROW(type_error::create(306, detail::concat("cannot use value() with ", type_name()), this));
+    }
+
+    /// @brief access specified object element via JSON Pointer with default value
+    /// @sa https://json.nlohmann.me/api/basic_json/value/
+    template < class ValueType, class ReturnType = typename value_return_type<ValueType>::type,
+               detail::enable_if_t <
+                   detail::is_getable<basic_json_t, ReturnType>::value
+                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >
+    ReturnType value(const json_pointer& ptr, ValueType && default_value) const
+    {
+        // value only works for objects
+        if (JSON_HEDLEY_LIKELY(is_object()))
+        {
+            // if pointer resolves a value, return it or use default value
+            JSON_TRY
+            {
+                return ptr.get_checked(this).template get<ReturnType>();
+            }
+            JSON_INTERNAL_CATCH (out_of_range&)
+            {
+                return std::forward<ValueType>(default_value);
+            }
+        }
+
+        JSON_THROW(type_error::create(306, detail::concat("cannot use value() with ", type_name()), this));
+    }
+
+    template < class ValueType, class BasicJsonType, detail::enable_if_t <
+                   detail::is_basic_json<BasicJsonType>::value
+                   && detail::is_getable<basic_json_t, ValueType>::value
+                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >
+    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, basic_json::json_pointer or nlohmann::json_pointer<basic_json::string_t>) // NOLINT(readability/alt_tokens)
+    ValueType value(const ::nlohmann::json_pointer<BasicJsonType>& ptr, const ValueType& default_value) const
+    {
+        return value(ptr.convert(), default_value);
+    }
+
+    template < class ValueType, class BasicJsonType, class ReturnType = typename value_return_type<ValueType>::type,
+               detail::enable_if_t <
+                   detail::is_basic_json<BasicJsonType>::value
+                   && detail::is_getable<basic_json_t, ReturnType>::value
+                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >
+    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, basic_json::json_pointer or nlohmann::json_pointer<basic_json::string_t>) // NOLINT(readability/alt_tokens)
+    ReturnType value(const ::nlohmann::json_pointer<BasicJsonType>& ptr, ValueType && default_value) const
+    {
+        return value(ptr.convert(), std::forward<ValueType>(default_value));
+    }
+
+    /// @brief access the first element
+    /// @sa https://json.nlohmann.me/api/basic_json/front/
+    reference front()
+    {
+        return *begin();
+    }
+
+    /// @brief access the first element
+    /// @sa https://json.nlohmann.me/api/basic_json/front/
+    const_reference front() const
+    {
+        return *cbegin();
+    }
+
+    /// @brief access the last element
+    /// @sa https://json.nlohmann.me/api/basic_json/back/
+    reference back()
+    {
+        auto tmp = end();
+        --tmp;
+        return *tmp;
+    }
+
+    /// @brief access the last element
+    /// @sa https://json.nlohmann.me/api/basic_json/back/
+    const_reference back() const
+    {
+        auto tmp = cend();
+        --tmp;
+        return *tmp;
+    }
+
+    /// @brief remove element given an iterator
+    /// @sa https://json.nlohmann.me/api/basic_json/erase/
+    template < class IteratorType, detail::enable_if_t <
+                   std::is_same<IteratorType, typename basic_json_t::iterator>::value ||
+                   std::is_same<IteratorType, typename basic_json_t::const_iterator>::value, int > = 0 >
+    IteratorType erase(IteratorType pos)
+    {
+        // make sure iterator fits the current value
+        if (JSON_HEDLEY_UNLIKELY(this != pos.m_object))
+        {
+            JSON_THROW(invalid_iterator::create(202, "iterator does not fit current value", this));
+        }
+
+        IteratorType result = end();
+
+        switch (m_type)
+        {
+            case value_t::boolean:
+            case value_t::number_float:
+            case value_t::number_integer:
+            case value_t::number_unsigned:
+            case value_t::string:
+            case value_t::binary:
+            {
+                if (JSON_HEDLEY_UNLIKELY(!pos.m_it.primitive_iterator.is_begin()))
+                {
+                    JSON_THROW(invalid_iterator::create(205, "iterator out of range", this));
+                }
+
+                if (is_string())
+                {
+                    AllocatorType<string_t> alloc;
+                    std::allocator_traits<decltype(alloc)>::destroy(alloc, m_value.string);
+                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, m_value.string, 1);
+                    m_value.string = nullptr;
+                }
+                else if (is_binary())
+                {
+                    AllocatorType<binary_t> alloc;
+                    std::allocator_traits<decltype(alloc)>::destroy(alloc, m_value.binary);
+                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, m_value.binary, 1);
+                    m_value.binary = nullptr;
+                }
+
+                m_type = value_t::null;
+                assert_invariant();
+                break;
+            }
+
+            case value_t::object:
+            {
+                result.m_it.object_iterator = m_value.object->erase(pos.m_it.object_iterator);
+                break;
+            }
+
+            case value_t::array:
+            {
+                result.m_it.array_iterator = m_value.array->erase(pos.m_it.array_iterator);
+                break;
+            }
+
+            case value_t::null:
+            case value_t::discarded:
+            default:
+                JSON_THROW(type_error::create(307, detail::concat("cannot use erase() with ", type_name()), this));
+        }
+
+        return result;
+    }
+
+    /// @brief remove elements given an iterator range
+    /// @sa https://json.nlohmann.me/api/basic_json/erase/
+    template < class IteratorType, detail::enable_if_t <
+                   std::is_same<IteratorType, typename basic_json_t::iterator>::value ||
+                   std::is_same<IteratorType, typename basic_json_t::const_iterator>::value, int > = 0 >
+    IteratorType erase(IteratorType first, IteratorType last)
+    {
+        // make sure iterator fits the current value
+        if (JSON_HEDLEY_UNLIKELY(this != first.m_object || this != last.m_object))
+        {
+            JSON_THROW(invalid_iterator::create(203, "iterators do not fit current value", this));
+        }
+
+        IteratorType result = end();
+
+        switch (m_type)
+        {
+            case value_t::boolean:
+            case value_t::number_float:
+            case value_t::number_integer:
+            case value_t::number_unsigned:
+            case value_t::string:
+            case value_t::binary:
+            {
+                if (JSON_HEDLEY_LIKELY(!first.m_it.primitive_iterator.is_begin()
+                                       || !last.m_it.primitive_iterator.is_end()))
+                {
+                    JSON_THROW(invalid_iterator::create(204, "iterators out of range", this));
+                }
+
+                if (is_string())
+                {
+                    AllocatorType<string_t> alloc;
+                    std::allocator_traits<decltype(alloc)>::destroy(alloc, m_value.string);
+                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, m_value.string, 1);
+                    m_value.string = nullptr;
+                }
+                else if (is_binary())
+                {
+                    AllocatorType<binary_t> alloc;
+                    std::allocator_traits<decltype(alloc)>::destroy(alloc, m_value.binary);
+                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, m_value.binary, 1);
+                    m_value.binary = nullptr;
+                }
+
+                m_type = value_t::null;
+                assert_invariant();
+                break;
+            }
+
+            case value_t::object:
+            {
+                result.m_it.object_iterator = m_value.object->erase(first.m_it.object_iterator,
+                                              last.m_it.object_iterator);
+                break;
+            }
+
+            case value_t::array:
+            {
+                result.m_it.array_iterator = m_value.array->erase(first.m_it.array_iterator,
+                                             last.m_it.array_iterator);
+                break;
+            }
+
+            case value_t::null:
+            case value_t::discarded:
+            default:
+                JSON_THROW(type_error::create(307, detail::concat("cannot use erase() with ", type_name()), this));
+        }
+
+        return result;
+    }
+
+  private:
+    template < typename KeyType, detail::enable_if_t <
+                   detail::has_erase_with_key_type<basic_json_t, KeyType>::value, int > = 0 >
+    size_type erase_internal(KeyType && key)
+    {
+        // this erase only works for objects
+        if (JSON_HEDLEY_UNLIKELY(!is_object()))
+        {
+            JSON_THROW(type_error::create(307, detail::concat("cannot use erase() with ", type_name()), this));
+        }
+
+        return m_value.object->erase(std::forward<KeyType>(key));
+    }
+
+    template < typename KeyType, detail::enable_if_t <
+                   !detail::has_erase_with_key_type<basic_json_t, KeyType>::value, int > = 0 >
+    size_type erase_internal(KeyType && key)
+    {
+        // this erase only works for objects
+        if (JSON_HEDLEY_UNLIKELY(!is_object()))
+        {
+            JSON_THROW(type_error::create(307, detail::concat("cannot use erase() with ", type_name()), this));
+        }
+
+        const auto it = m_value.object->find(std::forward<KeyType>(key));
+        if (it != m_value.object->end())
+        {
+            m_value.object->erase(it);
+            return 1;
+        }
+        return 0;
+    }
+
+  public:
+
+    /// @brief remove element from a JSON object given a key
+    /// @sa https://json.nlohmann.me/api/basic_json/erase/
+    size_type erase(const typename object_t::key_type& key)
+    {
+        // the indirection via erase_internal() is added to avoid making this
+        // function a template and thus de-rank it during overload resolution
+        return erase_internal(key);
+    }
+
+    /// @brief remove element from a JSON object given a key
+    /// @sa https://json.nlohmann.me/api/basic_json/erase/
+    template<class KeyType, detail::enable_if_t<
+                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int> = 0>
+    size_type erase(KeyType && key)
+    {
+        return erase_internal(std::forward<KeyType>(key));
+    }
+
+    /// @brief remove element from a JSON array given an index
+    /// @sa https://json.nlohmann.me/api/basic_json/erase/
+    void erase(const size_type idx)
+    {
+        // this erase only works for arrays
+        if (JSON_HEDLEY_LIKELY(is_array()))
+        {
+            if (JSON_HEDLEY_UNLIKELY(idx >= size()))
+            {
+                JSON_THROW(out_of_range::create(401, detail::concat("array index ", std::to_string(idx), " is out of range"), this));
+            }
+
+            m_value.array->erase(m_value.array->begin() + static_cast<difference_type>(idx));
+        }
+        else
+        {
+            JSON_THROW(type_error::create(307, detail::concat("cannot use erase() with ", type_name()), this));
+        }
+    }
+
+    /// @}
+
+
+    ////////////
+    // lookup //
+    ////////////
+
+    /// @name lookup
+    /// @{
+
+    /// @brief find an element in a JSON object
+    /// @sa https://json.nlohmann.me/api/basic_json/find/
+    iterator find(const typename object_t::key_type& key)
+    {
+        auto result = end();
+
+        if (is_object())
+        {
+            result.m_it.object_iterator = m_value.object->find(key);
+        }
+
+        return result;
+    }
+
+    /// @brief find an element in a JSON object
+    /// @sa https://json.nlohmann.me/api/basic_json/find/
+    const_iterator find(const typename object_t::key_type& key) const
+    {
+        auto result = cend();
+
+        if (is_object())
+        {
+            result.m_it.object_iterator = m_value.object->find(key);
+        }
+
+        return result;
+    }
+
+    /// @brief find an element in a JSON object
+    /// @sa https://json.nlohmann.me/api/basic_json/find/
+    template<class KeyType, detail::enable_if_t<
+                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int> = 0>
+    iterator find(KeyType && key)
+    {
+        auto result = end();
+
+        if (is_object())
+        {
+            result.m_it.object_iterator = m_value.object->find(std::forward<KeyType>(key));
+        }
+
+        return result;
+    }
+
+    /// @brief find an element in a JSON object
+    /// @sa https://json.nlohmann.me/api/basic_json/find/
+    template<class KeyType, detail::enable_if_t<
+                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int> = 0>
+    const_iterator find(KeyType && key) const
+    {
+        auto result = cend();
+
+        if (is_object())
+        {
+            result.m_it.object_iterator = m_value.object->find(std::forward<KeyType>(key));
+        }
+
+        return result;
+    }
+
+    /// @brief returns the number of occurrences of a key in a JSON object
+    /// @sa https://json.nlohmann.me/api/basic_json/count/
+    size_type count(const typename object_t::key_type& key) const
+    {
+        // return 0 for all nonobject types
+        return is_object() ? m_value.object->count(key) : 0;
+    }
+
+    /// @brief returns the number of occurrences of a key in a JSON object
+    /// @sa https://json.nlohmann.me/api/basic_json/count/
+    template<class KeyType, detail::enable_if_t<
+                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int> = 0>
+    size_type count(KeyType && key) const
+    {
+        // return 0 for all nonobject types
+        return is_object() ? m_value.object->count(std::forward<KeyType>(key)) : 0;
+    }
+
+    /// @brief check the existence of an element in a JSON object
+    /// @sa https://json.nlohmann.me/api/basic_json/contains/
+    bool contains(const typename object_t::key_type& key) const
+    {
+        return is_object() && m_value.object->find(key) != m_value.object->end();
+    }
+
+    /// @brief check the existence of an element in a JSON object
+    /// @sa https://json.nlohmann.me/api/basic_json/contains/
+    template<class KeyType, detail::enable_if_t<
+                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int> = 0>
+    bool contains(KeyType && key) const
+    {
+        return is_object() && m_value.object->find(std::forward<KeyType>(key)) != m_value.object->end();
+    }
+
+    /// @brief check the existence of an element in a JSON object given a JSON pointer
+    /// @sa https://json.nlohmann.me/api/basic_json/contains/
+    bool contains(const json_pointer& ptr) const
+    {
+        return ptr.contains(this);
+    }
+
+    template<typename BasicJsonType, detail::enable_if_t<detail::is_basic_json<BasicJsonType>::value, int> = 0>
+    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, basic_json::json_pointer or nlohmann::json_pointer<basic_json::string_t>) // NOLINT(readability/alt_tokens)
+    bool contains(const typename ::nlohmann::json_pointer<BasicJsonType>& ptr) const
+    {
+        return ptr.contains(this);
+    }
+
+    /// @}
+
+
+    ///////////////
+    // iterators //
+    ///////////////
+
+    /// @name iterators
+    /// @{
+
+    /// @brief returns an iterator to the first element
+    /// @sa https://json.nlohmann.me/api/basic_json/begin/
+    iterator begin() noexcept
+    {
+        iterator result(this);
+        result.set_begin();
+        return result;
+    }
+
+    /// @brief returns an iterator to the first element
+    /// @sa https://json.nlohmann.me/api/basic_json/begin/
+    const_iterator begin() const noexcept
+    {
+        return cbegin();
+    }
+
+    /// @brief returns a const iterator to the first element
+    /// @sa https://json.nlohmann.me/api/basic_json/cbegin/
+    const_iterator cbegin() const noexcept
+    {
+        const_iterator result(this);
+        result.set_begin();
+        return result;
+    }
+
+    /// @brief returns an iterator to one past the last element
+    /// @sa https://json.nlohmann.me/api/basic_json/end/
+    iterator end() noexcept
+    {
+        iterator result(this);
+        result.set_end();
+        return result;
+    }
+
+    /// @brief returns an iterator to one past the last element
+    /// @sa https://json.nlohmann.me/api/basic_json/end/
+    const_iterator end() const noexcept
+    {
+        return cend();
+    }
+
+    /// @brief returns an iterator to one past the last element
+    /// @sa https://json.nlohmann.me/api/basic_json/cend/
+    const_iterator cend() const noexcept
+    {
+        const_iterator result(this);
+        result.set_end();
+        return result;
+    }
+
+    /// @brief returns an iterator to the reverse-beginning
+    /// @sa https://json.nlohmann.me/api/basic_json/rbegin/
+    reverse_iterator rbegin() noexcept
+    {
+        return reverse_iterator(end());
+    }
+
+    /// @brief returns an iterator to the reverse-beginning
+    /// @sa https://json.nlohmann.me/api/basic_json/rbegin/
+    const_reverse_iterator rbegin() const noexcept
+    {
+        return crbegin();
+    }
+
+    /// @brief returns an iterator to the reverse-end
+    /// @sa https://json.nlohmann.me/api/basic_json/rend/
+    reverse_iterator rend() noexcept
+    {
+        return reverse_iterator(begin());
+    }
+
+    /// @brief returns an iterator to the reverse-end
+    /// @sa https://json.nlohmann.me/api/basic_json/rend/
+    const_reverse_iterator rend() const noexcept
+    {
+        return crend();
+    }
+
+    /// @brief returns a const reverse iterator to the last element
+    /// @sa https://json.nlohmann.me/api/basic_json/crbegin/
+    const_reverse_iterator crbegin() const noexcept
+    {
+        return const_reverse_iterator(cend());
+    }
+
+    /// @brief returns a const reverse iterator to one before the first
+    /// @sa https://json.nlohmann.me/api/basic_json/crend/
+    const_reverse_iterator crend() const noexcept
+    {
+        return const_reverse_iterator(cbegin());
+    }
+
+  public:
+    /// @brief wrapper to access iterator member functions in range-based for
+    /// @sa https://json.nlohmann.me/api/basic_json/items/
+    /// @deprecated This function is deprecated since 3.1.0 and will be removed in
+    ///             version 4.0.0 of the library. Please use @ref items() instead;
+    ///             that is, replace `json::iterator_wrapper(j)` with `j.items()`.
+    JSON_HEDLEY_DEPRECATED_FOR(3.1.0, items())
+    static iteration_proxy<iterator> iterator_wrapper(reference ref) noexcept
+    {
+        return ref.items();
+    }
+
+    /// @brief wrapper to access iterator member functions in range-based for
+    /// @sa https://json.nlohmann.me/api/basic_json/items/
+    /// @deprecated This function is deprecated since 3.1.0 and will be removed in
+    ///         version 4.0.0 of the library. Please use @ref items() instead;
+    ///         that is, replace `json::iterator_wrapper(j)` with `j.items()`.
+    JSON_HEDLEY_DEPRECATED_FOR(3.1.0, items())
+    static iteration_proxy<const_iterator> iterator_wrapper(const_reference ref) noexcept
+    {
+        return ref.items();
+    }
+
+    /// @brief helper to access iterator member functions in range-based for
+    /// @sa https://json.nlohmann.me/api/basic_json/items/
+    iteration_proxy<iterator> items() noexcept
+    {
+        return iteration_proxy<iterator>(*this);
+    }
+
+    /// @brief helper to access iterator member functions in range-based for
+    /// @sa https://json.nlohmann.me/api/basic_json/items/
+    iteration_proxy<const_iterator> items() const noexcept
+    {
+        return iteration_proxy<const_iterator>(*this);
+    }
+
+    /// @}
+
+
+    //////////////
+    // capacity //
+    //////////////
+
+    /// @name capacity
+    /// @{
+
+    /// @brief checks whether the container is empty.
+    /// @sa https://json.nlohmann.me/api/basic_json/empty/
+    bool empty() const noexcept
+    {
+        switch (m_type)
+        {
+            case value_t::null:
+            {
+                // null values are empty
+                return true;
+            }
+
+            case value_t::array:
+            {
+                // delegate call to array_t::empty()
+                return m_value.array->empty();
+            }
+
+            case value_t::object:
+            {
+                // delegate call to object_t::empty()
+                return m_value.object->empty();
+            }
+
+            case value_t::string:
+            case value_t::boolean:
+            case value_t::number_integer:
+            case value_t::number_unsigned:
+            case value_t::number_float:
+            case value_t::binary:
+            case value_t::discarded:
+            default:
+            {
+                // all other types are nonempty
+                return false;
+            }
+        }
+    }
+
+    /// @brief returns the number of elements
+    /// @sa https://json.nlohmann.me/api/basic_json/size/
+    size_type size() const noexcept
+    {
+        switch (m_type)
+        {
+            case value_t::null:
+            {
+                // null values are empty
+                return 0;
+            }
+
+            case value_t::array:
+            {
+                // delegate call to array_t::size()
+                return m_value.array->size();
+            }
+
+            case value_t::object:
+            {
+                // delegate call to object_t::size()
+                return m_value.object->size();
+            }
+
+            case value_t::string:
+            case value_t::boolean:
+            case value_t::number_integer:
+            case value_t::number_unsigned:
+            case value_t::number_float:
+            case value_t::binary:
+            case value_t::discarded:
+            default:
+            {
+                // all other types have size 1
+                return 1;
+            }
+        }
+    }
+
+    /// @brief returns the maximum possible number of elements
+    /// @sa https://json.nlohmann.me/api/basic_json/max_size/
+    size_type max_size() const noexcept
+    {
+        switch (m_type)
+        {
+            case value_t::array:
+            {
+                // delegate call to array_t::max_size()
+                return m_value.array->max_size();
+            }
+
+            case value_t::object:
+            {
+                // delegate call to object_t::max_size()
+                return m_value.object->max_size();
+            }
+
+            case value_t::null:
+            case value_t::string:
+            case value_t::boolean:
+            case value_t::number_integer:
+            case value_t::number_unsigned:
+            case value_t::number_float:
+            case value_t::binary:
+            case value_t::discarded:
+            default:
+            {
+                // all other types have max_size() == size()
+                return size();
+            }
+        }
+    }
+
+    /// @}
+
+
+    ///////////////
+    // modifiers //
+    ///////////////
+
+    /// @name modifiers
+    /// @{
+
+    /// @brief clears the contents
+    /// @sa https://json.nlohmann.me/api/basic_json/clear/
+    void clear() noexcept
+    {
+        switch (m_type)
+        {
+            case value_t::number_integer:
+            {
+                m_value.number_integer = 0;
+                break;
+            }
+
+            case value_t::number_unsigned:
+            {
+                m_value.number_unsigned = 0;
+                break;
+            }
+
+            case value_t::number_float:
+            {
+                m_value.number_float = 0.0;
+                break;
+            }
+
+            case value_t::boolean:
+            {
+                m_value.boolean = false;
+                break;
+            }
+
+            case value_t::string:
+            {
+                m_value.string->clear();
+                break;
+            }
+
+            case value_t::binary:
+            {
+                m_value.binary->clear();
+                break;
+            }
+
+            case value_t::array:
+            {
+                m_value.array->clear();
+                break;
+            }
+
+            case value_t::object:
+            {
+                m_value.object->clear();
+                break;
+            }
+
+            case value_t::null:
+            case value_t::discarded:
+            default:
+                break;
+        }
+    }
+
+    /// @brief add an object to an array
+    /// @sa https://json.nlohmann.me/api/basic_json/push_back/
+    void push_back(basic_json&& val)
+    {
+        // push_back only works for null objects or arrays
+        if (JSON_HEDLEY_UNLIKELY(!(is_null() || is_array())))
+        {
+            JSON_THROW(type_error::create(308, detail::concat("cannot use push_back() with ", type_name()), this));
+        }
+
+        // transform null object into an array
+        if (is_null())
+        {
+            m_type = value_t::array;
+            m_value = value_t::array;
+            assert_invariant();
+        }
+
+        // add element to array (move semantics)
+        const auto old_capacity = m_value.array->capacity();
+        m_value.array->push_back(std::move(val));
+        set_parent(m_value.array->back(), old_capacity);
+        // if val is moved from, basic_json move constructor marks it null, so we do not call the destructor
+    }
+
+    /// @brief add an object to an array
+    /// @sa https://json.nlohmann.me/api/basic_json/operator+=/
+    reference operator+=(basic_json&& val)
+    {
+        push_back(std::move(val));
+        return *this;
+    }
+
+    /// @brief add an object to an array
+    /// @sa https://json.nlohmann.me/api/basic_json/push_back/
+    void push_back(const basic_json& val)
+    {
+        // push_back only works for null objects or arrays
+        if (JSON_HEDLEY_UNLIKELY(!(is_null() || is_array())))
+        {
+            JSON_THROW(type_error::create(308, detail::concat("cannot use push_back() with ", type_name()), this));
+        }
+
+        // transform null object into an array
+        if (is_null())
+        {
+            m_type = value_t::array;
+            m_value = value_t::array;
+            assert_invariant();
+        }
+
+        // add element to array
+        const auto old_capacity = m_value.array->capacity();
+        m_value.array->push_back(val);
+        set_parent(m_value.array->back(), old_capacity);
+    }
+
+    /// @brief add an object to an array
+    /// @sa https://json.nlohmann.me/api/basic_json/operator+=/
+    reference operator+=(const basic_json& val)
+    {
+        push_back(val);
+        return *this;
+    }
+
+    /// @brief add an object to an object
+    /// @sa https://json.nlohmann.me/api/basic_json/push_back/
+    void push_back(const typename object_t::value_type& val)
+    {
+        // push_back only works for null objects or objects
+        if (JSON_HEDLEY_UNLIKELY(!(is_null() || is_object())))
+        {
+            JSON_THROW(type_error::create(308, detail::concat("cannot use push_back() with ", type_name()), this));
+        }
+
+        // transform null object into an object
+        if (is_null())
+        {
+            m_type = value_t::object;
+            m_value = value_t::object;
+            assert_invariant();
+        }
+
+        // add element to object
+        auto res = m_value.object->insert(val);
+        set_parent(res.first->second);
+    }
+
+    /// @brief add an object to an object
+    /// @sa https://json.nlohmann.me/api/basic_json/operator+=/
+    reference operator+=(const typename object_t::value_type& val)
+    {
+        push_back(val);
+        return *this;
+    }
+
+    /// @brief add an object to an object
+    /// @sa https://json.nlohmann.me/api/basic_json/push_back/
+    void push_back(initializer_list_t init)
+    {
+        if (is_object() && init.size() == 2 && (*init.begin())->is_string())
+        {
+            basic_json&& key = init.begin()->moved_or_copied();
+            push_back(typename object_t::value_type(
+                          std::move(key.get_ref<string_t&>()), (init.begin() + 1)->moved_or_copied()));
+        }
+        else
+        {
+            push_back(basic_json(init));
+        }
+    }
+
+    /// @brief add an object to an object
+    /// @sa https://json.nlohmann.me/api/basic_json/operator+=/
+    reference operator+=(initializer_list_t init)
+    {
+        push_back(init);
+        return *this;
+    }
+
+    /// @brief add an object to an array
+    /// @sa https://json.nlohmann.me/api/basic_json/emplace_back/
+    template<class... Args>
+    reference emplace_back(Args&& ... args)
+    {
+        // emplace_back only works for null objects or arrays
+        if (JSON_HEDLEY_UNLIKELY(!(is_null() || is_array())))
+        {
+            JSON_THROW(type_error::create(311, detail::concat("cannot use emplace_back() with ", type_name()), this));
+        }
+
+        // transform null object into an array
+        if (is_null())
+        {
+            m_type = value_t::array;
+            m_value = value_t::array;
+            assert_invariant();
+        }
+
+        // add element to array (perfect forwarding)
+        const auto old_capacity = m_value.array->capacity();
+        m_value.array->emplace_back(std::forward<Args>(args)...);
+        return set_parent(m_value.array->back(), old_capacity);
+    }
+
+    /// @brief add an object to an object if key does not exist
+    /// @sa https://json.nlohmann.me/api/basic_json/emplace/
+    template<class... Args>
+    std::pair<iterator, bool> emplace(Args&& ... args)
+    {
+        // emplace only works for null objects or arrays
+        if (JSON_HEDLEY_UNLIKELY(!(is_null() || is_object())))
+        {
+            JSON_THROW(type_error::create(311, detail::concat("cannot use emplace() with ", type_name()), this));
+        }
+
+        // transform null object into an object
+        if (is_null())
+        {
+            m_type = value_t::object;
+            m_value = value_t::object;
+            assert_invariant();
+        }
+
+        // add element to array (perfect forwarding)
+        auto res = m_value.object->emplace(std::forward<Args>(args)...);
+        set_parent(res.first->second);
+
+        // create result iterator and set iterator to the result of emplace
+        auto it = begin();
+        it.m_it.object_iterator = res.first;
+
+        // return pair of iterator and boolean
+        return {it, res.second};
+    }
+
+    /// Helper for insertion of an iterator
+    /// @note: This uses std::distance to support GCC 4.8,
+    ///        see https://github.com/nlohmann/json/pull/1257
+    template<typename... Args>
+    iterator insert_iterator(const_iterator pos, Args&& ... args)
+    {
+        iterator result(this);
+        JSON_ASSERT(m_value.array != nullptr);
+
+        auto insert_pos = std::distance(m_value.array->begin(), pos.m_it.array_iterator);
+        m_value.array->insert(pos.m_it.array_iterator, std::forward<Args>(args)...);
+        result.m_it.array_iterator = m_value.array->begin() + insert_pos;
+
+        // This could have been written as:
+        // result.m_it.array_iterator = m_value.array->insert(pos.m_it.array_iterator, cnt, val);
+        // but the return value of insert is missing in GCC 4.8, so it is written this way instead.
+
+        set_parents();
+        return result;
+    }
+
+    /// @brief inserts element into array
+    /// @sa https://json.nlohmann.me/api/basic_json/insert/
+    iterator insert(const_iterator pos, const basic_json& val)
+    {
+        // insert only works for arrays
+        if (JSON_HEDLEY_LIKELY(is_array()))
+        {
+            // check if iterator pos fits to this JSON value
+            if (JSON_HEDLEY_UNLIKELY(pos.m_object != this))
+            {
+                JSON_THROW(invalid_iterator::create(202, "iterator does not fit current value", this));
+            }
+
+            // insert to array and return iterator
+            return insert_iterator(pos, val);
+        }
+
+        JSON_THROW(type_error::create(309, detail::concat("cannot use insert() with ", type_name()), this));
+    }
+
+    /// @brief inserts element into array
+    /// @sa https://json.nlohmann.me/api/basic_json/insert/
+    iterator insert(const_iterator pos, basic_json&& val)
+    {
+        return insert(pos, val);
+    }
+
+    /// @brief inserts copies of element into array
+    /// @sa https://json.nlohmann.me/api/basic_json/insert/
+    iterator insert(const_iterator pos, size_type cnt, const basic_json& val)
+    {
+        // insert only works for arrays
+        if (JSON_HEDLEY_LIKELY(is_array()))
+        {
+            // check if iterator pos fits to this JSON value
+            if (JSON_HEDLEY_UNLIKELY(pos.m_object != this))
+            {
+                JSON_THROW(invalid_iterator::create(202, "iterator does not fit current value", this));
+            }
+
+            // insert to array and return iterator
+            return insert_iterator(pos, cnt, val);
+        }
+
+        JSON_THROW(type_error::create(309, detail::concat("cannot use insert() with ", type_name()), this));
+    }
+
+    /// @brief inserts range of elements into array
+    /// @sa https://json.nlohmann.me/api/basic_json/insert/
+    iterator insert(const_iterator pos, const_iterator first, const_iterator last)
+    {
+        // insert only works for arrays
+        if (JSON_HEDLEY_UNLIKELY(!is_array()))
+        {
+            JSON_THROW(type_error::create(309, detail::concat("cannot use insert() with ", type_name()), this));
+        }
+
+        // check if iterator pos fits to this JSON value
+        if (JSON_HEDLEY_UNLIKELY(pos.m_object != this))
+        {
+            JSON_THROW(invalid_iterator::create(202, "iterator does not fit current value", this));
+        }
+
+        // check if range iterators belong to the same JSON object
+        if (JSON_HEDLEY_UNLIKELY(first.m_object != last.m_object))
+        {
+            JSON_THROW(invalid_iterator::create(210, "iterators do not fit", this));
+        }
+
+        if (JSON_HEDLEY_UNLIKELY(first.m_object == this))
+        {
+            JSON_THROW(invalid_iterator::create(211, "passed iterators may not belong to container", this));
+        }
+
+        // insert to array and return iterator
+        return insert_iterator(pos, first.m_it.array_iterator, last.m_it.array_iterator);
+    }
+
+    /// @brief inserts elements from initializer list into array
+    /// @sa https://json.nlohmann.me/api/basic_json/insert/
+    iterator insert(const_iterator pos, initializer_list_t ilist)
+    {
+        // insert only works for arrays
+        if (JSON_HEDLEY_UNLIKELY(!is_array()))
+        {
+            JSON_THROW(type_error::create(309, detail::concat("cannot use insert() with ", type_name()), this));
+        }
+
+        // check if iterator pos fits to this JSON value
+        if (JSON_HEDLEY_UNLIKELY(pos.m_object != this))
+        {
+            JSON_THROW(invalid_iterator::create(202, "iterator does not fit current value", this));
+        }
+
+        // insert to array and return iterator
+        return insert_iterator(pos, ilist.begin(), ilist.end());
+    }
+
+    /// @brief inserts range of elements into object
+    /// @sa https://json.nlohmann.me/api/basic_json/insert/
+    void insert(const_iterator first, const_iterator last)
+    {
+        // insert only works for objects
+        if (JSON_HEDLEY_UNLIKELY(!is_object()))
+        {
+            JSON_THROW(type_error::create(309, detail::concat("cannot use insert() with ", type_name()), this));
+        }
+
+        // check if range iterators belong to the same JSON object
+        if (JSON_HEDLEY_UNLIKELY(first.m_object != last.m_object))
+        {
+            JSON_THROW(invalid_iterator::create(210, "iterators do not fit", this));
+        }
+
+        // passed iterators must belong to objects
+        if (JSON_HEDLEY_UNLIKELY(!first.m_object->is_object()))
+        {
+            JSON_THROW(invalid_iterator::create(202, "iterators first and last must point to objects", this));
+        }
+
+        m_value.object->insert(first.m_it.object_iterator, last.m_it.object_iterator);
+    }
+
+    /// @brief updates a JSON object from another object, overwriting existing keys
+    /// @sa https://json.nlohmann.me/api/basic_json/update/
+    void update(const_reference j, bool merge_objects = false)
+    {
+        update(j.begin(), j.end(), merge_objects);
+    }
+
+    /// @brief updates a JSON object from another object, overwriting existing keys
+    /// @sa https://json.nlohmann.me/api/basic_json/update/
+    void update(const_iterator first, const_iterator last, bool merge_objects = false)
+    {
+        // implicitly convert null value to an empty object
+        if (is_null())
+        {
+            m_type = value_t::object;
+            m_value.object = create<object_t>();
+            assert_invariant();
+        }
+
+        if (JSON_HEDLEY_UNLIKELY(!is_object()))
+        {
+            JSON_THROW(type_error::create(312, detail::concat("cannot use update() with ", type_name()), this));
+        }
+
+        // check if range iterators belong to the same JSON object
+        if (JSON_HEDLEY_UNLIKELY(first.m_object != last.m_object))
+        {
+            JSON_THROW(invalid_iterator::create(210, "iterators do not fit", this));
+        }
+
+        // passed iterators must belong to objects
+        if (JSON_HEDLEY_UNLIKELY(!first.m_object->is_object()))
+        {
+            JSON_THROW(type_error::create(312, detail::concat("cannot use update() with ", first.m_object->type_name()), first.m_object));
+        }
+
+        for (auto it = first; it != last; ++it)
+        {
+            if (merge_objects && it.value().is_object())
+            {
+                auto it2 = m_value.object->find(it.key());
+                if (it2 != m_value.object->end())
+                {
+                    it2->second.update(it.value(), true);
+                    continue;
+                }
+            }
+            m_value.object->operator[](it.key()) = it.value();
+#if JSON_DIAGNOSTICS
+            m_value.object->operator[](it.key()).m_parent = this;
+#endif
+        }
+    }
+
+    /// @brief exchanges the values
+    /// @sa https://json.nlohmann.me/api/basic_json/swap/
+    void swap(reference other) noexcept (
+        std::is_nothrow_move_constructible<value_t>::value&&
+        std::is_nothrow_move_assignable<value_t>::value&&
+        std::is_nothrow_move_constructible<json_value>::value&&
+        std::is_nothrow_move_assignable<json_value>::value
+    )
+    {
+        std::swap(m_type, other.m_type);
+        std::swap(m_value, other.m_value);
+
+        set_parents();
+        other.set_parents();
+        assert_invariant();
+    }
+
+    /// @brief exchanges the values
+    /// @sa https://json.nlohmann.me/api/basic_json/swap/
+    friend void swap(reference left, reference right) noexcept (
+        std::is_nothrow_move_constructible<value_t>::value&&
+        std::is_nothrow_move_assignable<value_t>::value&&
+        std::is_nothrow_move_constructible<json_value>::value&&
+        std::is_nothrow_move_assignable<json_value>::value
+    )
+    {
+        left.swap(right);
+    }
+
+    /// @brief exchanges the values
+    /// @sa https://json.nlohmann.me/api/basic_json/swap/
+    void swap(array_t& other) // NOLINT(bugprone-exception-escape)
+    {
+        // swap only works for arrays
+        if (JSON_HEDLEY_LIKELY(is_array()))
+        {
+            using std::swap;
+            swap(*(m_value.array), other);
+        }
+        else
+        {
+            JSON_THROW(type_error::create(310, detail::concat("cannot use swap(array_t&) with ", type_name()), this));
+        }
+    }
+
+    /// @brief exchanges the values
+    /// @sa https://json.nlohmann.me/api/basic_json/swap/
+    void swap(object_t& other) // NOLINT(bugprone-exception-escape)
+    {
+        // swap only works for objects
+        if (JSON_HEDLEY_LIKELY(is_object()))
+        {
+            using std::swap;
+            swap(*(m_value.object), other);
+        }
+        else
+        {
+            JSON_THROW(type_error::create(310, detail::concat("cannot use swap(object_t&) with ", type_name()), this));
+        }
+    }
+
+    /// @brief exchanges the values
+    /// @sa https://json.nlohmann.me/api/basic_json/swap/
+    void swap(string_t& other) // NOLINT(bugprone-exception-escape)
+    {
+        // swap only works for strings
+        if (JSON_HEDLEY_LIKELY(is_string()))
+        {
+            using std::swap;
+            swap(*(m_value.string), other);
+        }
+        else
+        {
+            JSON_THROW(type_error::create(310, detail::concat("cannot use swap(string_t&) with ", type_name()), this));
+        }
+    }
+
+    /// @brief exchanges the values
+    /// @sa https://json.nlohmann.me/api/basic_json/swap/
+    void swap(binary_t& other) // NOLINT(bugprone-exception-escape)
+    {
+        // swap only works for strings
+        if (JSON_HEDLEY_LIKELY(is_binary()))
+        {
+            using std::swap;
+            swap(*(m_value.binary), other);
+        }
+        else
+        {
+            JSON_THROW(type_error::create(310, detail::concat("cannot use swap(binary_t&) with ", type_name()), this));
+        }
+    }
+
+    /// @brief exchanges the values
+    /// @sa https://json.nlohmann.me/api/basic_json/swap/
+    void swap(typename binary_t::container_type& other) // NOLINT(bugprone-exception-escape)
+    {
+        // swap only works for strings
+        if (JSON_HEDLEY_LIKELY(is_binary()))
+        {
+            using std::swap;
+            swap(*(m_value.binary), other);
+        }
+        else
+        {
+            JSON_THROW(type_error::create(310, detail::concat("cannot use swap(binary_t::container_type&) with ", type_name()), this));
+        }
+    }
+
+    /// @}
+
+    //////////////////////////////////////////
+    // lexicographical comparison operators //
+    //////////////////////////////////////////
+
+    /// @name lexicographical comparison operators
+    /// @{
+
+    // note parentheses around operands are necessary; see
+    // https://github.com/nlohmann/json/issues/1530
+#define JSON_IMPLEMENT_OPERATOR(op, null_result, unordered_result, default_result)                       \
+    const auto lhs_type = lhs.type();                                                                    \
+    const auto rhs_type = rhs.type();                                                                    \
+    \
+    if (lhs_type == rhs_type) /* NOLINT(readability/braces) */                                           \
+    {                                                                                                    \
+        switch (lhs_type)                                                                                \
+        {                                                                                                \
+            case value_t::array:                                                                         \
+                return (*lhs.m_value.array) op (*rhs.m_value.array);                                     \
+                \
+            case value_t::object:                                                                        \
+                return (*lhs.m_value.object) op (*rhs.m_value.object);                                   \
+                \
+            case value_t::null:                                                                          \
+                return (null_result);                                                                    \
+                \
+            case value_t::string:                                                                        \
+                return (*lhs.m_value.string) op (*rhs.m_value.string);                                   \
+                \
+            case value_t::boolean:                                                                       \
+                return (lhs.m_value.boolean) op (rhs.m_value.boolean);                                   \
+                \
+            case value_t::number_integer:                                                                \
+                return (lhs.m_value.number_integer) op (rhs.m_value.number_integer);                     \
+                \
+            case value_t::number_unsigned:                                                               \
+                return (lhs.m_value.number_unsigned) op (rhs.m_value.number_unsigned);                   \
+                \
+            case value_t::number_float:                                                                  \
+                return (lhs.m_value.number_float) op (rhs.m_value.number_float);                         \
+                \
+            case value_t::binary:                                                                        \
+                return (*lhs.m_value.binary) op (*rhs.m_value.binary);                                   \
+                \
+            case value_t::discarded:                                                                     \
+            default:                                                                                     \
+                return (unordered_result);                                                               \
+        }                                                                                                \
+    }                                                                                                    \
+    else if (lhs_type == value_t::number_integer && rhs_type == value_t::number_float)                   \
+    {                                                                                                    \
+        return static_cast<number_float_t>(lhs.m_value.number_integer) op rhs.m_value.number_float;      \
+    }                                                                                                    \
+    else if (lhs_type == value_t::number_float && rhs_type == value_t::number_integer)                   \
+    {                                                                                                    \
+        return lhs.m_value.number_float op static_cast<number_float_t>(rhs.m_value.number_integer);      \
+    }                                                                                                    \
+    else if (lhs_type == value_t::number_unsigned && rhs_type == value_t::number_float)                  \
+    {                                                                                                    \
+        return static_cast<number_float_t>(lhs.m_value.number_unsigned) op rhs.m_value.number_float;     \
+    }                                                                                                    \
+    else if (lhs_type == value_t::number_float && rhs_type == value_t::number_unsigned)                  \
+    {                                                                                                    \
+        return lhs.m_value.number_float op static_cast<number_float_t>(rhs.m_value.number_unsigned);     \
+    }                                                                                                    \
+    else if (lhs_type == value_t::number_unsigned && rhs_type == value_t::number_integer)                \
+    {                                                                                                    \
+        return static_cast<number_integer_t>(lhs.m_value.number_unsigned) op rhs.m_value.number_integer; \
+    }                                                                                                    \
+    else if (lhs_type == value_t::number_integer && rhs_type == value_t::number_unsigned)                \
+    {                                                                                                    \
+        return lhs.m_value.number_integer op static_cast<number_integer_t>(rhs.m_value.number_unsigned); \
+    }                                                                                                    \
+    else if(compares_unordered(lhs, rhs))\
+    {\
+        return (unordered_result);\
+    }\
+    \
+    return (default_result);
+
+  JSON_PRIVATE_UNLESS_TESTED:
+    // returns true if:
+    // - any operand is NaN and the other operand is of number type
+    // - any operand is discarded
+    // in legacy mode, discarded values are considered ordered if
+    // an operation is computed as an odd number of inverses of others
+    static bool compares_unordered(const_reference lhs, const_reference rhs, bool inverse = false) noexcept
+    {
+        if ((lhs.is_number_float() && std::isnan(lhs.m_value.number_float) && rhs.is_number())
+                || (rhs.is_number_float() && std::isnan(rhs.m_value.number_float) && lhs.is_number()))
+        {
+            return true;
+        }
+#if JSON_USE_LEGACY_DISCARDED_VALUE_COMPARISON
+        return (lhs.is_discarded() || rhs.is_discarded()) && !inverse;
+#else
+        static_cast<void>(inverse);
+        return lhs.is_discarded() || rhs.is_discarded();
+#endif
+    }
+
+  private:
+    bool compares_unordered(const_reference rhs, bool inverse = false) const noexcept
+    {
+        return compares_unordered(*this, rhs, inverse);
+    }
+
+  public:
+#if JSON_HAS_THREE_WAY_COMPARISON
+    /// @brief comparison: equal
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_eq/
+    bool operator==(const_reference rhs) const noexcept
+    {
+#ifdef __GNUC__
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wfloat-equal"
+#endif
+        const_reference lhs = *this;
+        JSON_IMPLEMENT_OPERATOR( ==, true, false, false)
+#ifdef __GNUC__
+#pragma GCC diagnostic pop
+#endif
+    }
+
+    /// @brief comparison: equal
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_eq/
+    template<typename ScalarType>
+    requires std::is_scalar_v<ScalarType>
+    bool operator==(ScalarType rhs) const noexcept
+    {
+        return *this == basic_json(rhs);
+    }
+
+    /// @brief comparison: not equal
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_ne/
+    bool operator!=(const_reference rhs) const noexcept
+    {
+        if (compares_unordered(rhs, true))
+        {
+            return false;
+        }
+        return !operator==(rhs);
+    }
+
+    /// @brief comparison: 3-way
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_spaceship/
+    std::partial_ordering operator<=>(const_reference rhs) const noexcept // *NOPAD*
+    {
+        const_reference lhs = *this;
+        // default_result is used if we cannot compare values. In that case,
+        // we compare types.
+        JSON_IMPLEMENT_OPERATOR(<=>, // *NOPAD*
+                                std::partial_ordering::equivalent,
+                                std::partial_ordering::unordered,
+                                lhs_type <=> rhs_type) // *NOPAD*
+    }
+
+    /// @brief comparison: 3-way
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_spaceship/
+    template<typename ScalarType>
+    requires std::is_scalar_v<ScalarType>
+    std::partial_ordering operator<=>(ScalarType rhs) const noexcept // *NOPAD*
+    {
+        return *this <=> basic_json(rhs); // *NOPAD*
+    }
+
+#if JSON_USE_LEGACY_DISCARDED_VALUE_COMPARISON
+    // all operators that are computed as an odd number of inverses of others
+    // need to be overloaded to emulate the legacy comparison behavior
+
+    /// @brief comparison: less than or equal
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_le/
+    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, undef JSON_USE_LEGACY_DISCARDED_VALUE_COMPARISON)
+    bool operator<=(const_reference rhs) const noexcept
+    {
+        if (compares_unordered(rhs, true))
+        {
+            return false;
+        }
+        return !(rhs < *this);
+    }
+
+    /// @brief comparison: less than or equal
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_le/
+    template<typename ScalarType>
+    requires std::is_scalar_v<ScalarType>
+    bool operator<=(ScalarType rhs) const noexcept
+    {
+        return *this <= basic_json(rhs);
+    }
+
+    /// @brief comparison: greater than or equal
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_ge/
+    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, undef JSON_USE_LEGACY_DISCARDED_VALUE_COMPARISON)
+    bool operator>=(const_reference rhs) const noexcept
+    {
+        if (compares_unordered(rhs, true))
+        {
+            return false;
+        }
+        return !(*this < rhs);
+    }
+
+    /// @brief comparison: greater than or equal
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_ge/
+    template<typename ScalarType>
+    requires std::is_scalar_v<ScalarType>
+    bool operator>=(ScalarType rhs) const noexcept
+    {
+        return *this >= basic_json(rhs);
+    }
+#endif
+#else
+    /// @brief comparison: equal
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_eq/
+    friend bool operator==(const_reference lhs, const_reference rhs) noexcept
+    {
+#ifdef __GNUC__
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wfloat-equal"
+#endif
+        JSON_IMPLEMENT_OPERATOR( ==, true, false, false)
+#ifdef __GNUC__
+#pragma GCC diagnostic pop
+#endif
+    }
+
+    /// @brief comparison: equal
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_eq/
+    template<typename ScalarType, typename std::enable_if<
+                 std::is_scalar<ScalarType>::value, int>::type = 0>
+    friend bool operator==(const_reference lhs, ScalarType rhs) noexcept
+    {
+        return lhs == basic_json(rhs);
+    }
+
+    /// @brief comparison: equal
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_eq/
+    template<typename ScalarType, typename std::enable_if<
+                 std::is_scalar<ScalarType>::value, int>::type = 0>
+    friend bool operator==(ScalarType lhs, const_reference rhs) noexcept
+    {
+        return basic_json(lhs) == rhs;
+    }
+
+    /// @brief comparison: not equal
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_ne/
+    friend bool operator!=(const_reference lhs, const_reference rhs) noexcept
+    {
+        if (compares_unordered(lhs, rhs, true))
+        {
+            return false;
+        }
+        return !(lhs == rhs);
+    }
+
+    /// @brief comparison: not equal
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_ne/
+    template<typename ScalarType, typename std::enable_if<
+                 std::is_scalar<ScalarType>::value, int>::type = 0>
+    friend bool operator!=(const_reference lhs, ScalarType rhs) noexcept
+    {
+        return lhs != basic_json(rhs);
+    }
+
+    /// @brief comparison: not equal
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_ne/
+    template<typename ScalarType, typename std::enable_if<
+                 std::is_scalar<ScalarType>::value, int>::type = 0>
+    friend bool operator!=(ScalarType lhs, const_reference rhs) noexcept
+    {
+        return basic_json(lhs) != rhs;
+    }
+
+    /// @brief comparison: less than
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_lt/
+    friend bool operator<(const_reference lhs, const_reference rhs) noexcept
+    {
+        // default_result is used if we cannot compare values. In that case,
+        // we compare types. Note we have to call the operator explicitly,
+        // because MSVC has problems otherwise.
+        JSON_IMPLEMENT_OPERATOR( <, false, false, operator<(lhs_type, rhs_type))
+    }
+
+    /// @brief comparison: less than
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_lt/
+    template<typename ScalarType, typename std::enable_if<
+                 std::is_scalar<ScalarType>::value, int>::type = 0>
+    friend bool operator<(const_reference lhs, ScalarType rhs) noexcept
+    {
+        return lhs < basic_json(rhs);
+    }
+
+    /// @brief comparison: less than
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_lt/
+    template<typename ScalarType, typename std::enable_if<
+                 std::is_scalar<ScalarType>::value, int>::type = 0>
+    friend bool operator<(ScalarType lhs, const_reference rhs) noexcept
+    {
+        return basic_json(lhs) < rhs;
+    }
+
+    /// @brief comparison: less than or equal
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_le/
+    friend bool operator<=(const_reference lhs, const_reference rhs) noexcept
+    {
+        if (compares_unordered(lhs, rhs, true))
+        {
+            return false;
+        }
+        return !(rhs < lhs);
+    }
+
+    /// @brief comparison: less than or equal
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_le/
+    template<typename ScalarType, typename std::enable_if<
+                 std::is_scalar<ScalarType>::value, int>::type = 0>
+    friend bool operator<=(const_reference lhs, ScalarType rhs) noexcept
+    {
+        return lhs <= basic_json(rhs);
+    }
+
+    /// @brief comparison: less than or equal
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_le/
+    template<typename ScalarType, typename std::enable_if<
+                 std::is_scalar<ScalarType>::value, int>::type = 0>
+    friend bool operator<=(ScalarType lhs, const_reference rhs) noexcept
+    {
+        return basic_json(lhs) <= rhs;
+    }
+
+    /// @brief comparison: greater than
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_gt/
+    friend bool operator>(const_reference lhs, const_reference rhs) noexcept
+    {
+        // double inverse
+        if (compares_unordered(lhs, rhs))
+        {
+            return false;
+        }
+        return !(lhs <= rhs);
+    }
+
+    /// @brief comparison: greater than
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_gt/
+    template<typename ScalarType, typename std::enable_if<
+                 std::is_scalar<ScalarType>::value, int>::type = 0>
+    friend bool operator>(const_reference lhs, ScalarType rhs) noexcept
+    {
+        return lhs > basic_json(rhs);
+    }
+
+    /// @brief comparison: greater than
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_gt/
+    template<typename ScalarType, typename std::enable_if<
+                 std::is_scalar<ScalarType>::value, int>::type = 0>
+    friend bool operator>(ScalarType lhs, const_reference rhs) noexcept
+    {
+        return basic_json(lhs) > rhs;
+    }
+
+    /// @brief comparison: greater than or equal
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_ge/
+    friend bool operator>=(const_reference lhs, const_reference rhs) noexcept
+    {
+        if (compares_unordered(lhs, rhs, true))
+        {
+            return false;
+        }
+        return !(lhs < rhs);
+    }
+
+    /// @brief comparison: greater than or equal
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_ge/
+    template<typename ScalarType, typename std::enable_if<
+                 std::is_scalar<ScalarType>::value, int>::type = 0>
+    friend bool operator>=(const_reference lhs, ScalarType rhs) noexcept
+    {
+        return lhs >= basic_json(rhs);
+    }
+
+    /// @brief comparison: greater than or equal
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_ge/
+    template<typename ScalarType, typename std::enable_if<
+                 std::is_scalar<ScalarType>::value, int>::type = 0>
+    friend bool operator>=(ScalarType lhs, const_reference rhs) noexcept
+    {
+        return basic_json(lhs) >= rhs;
+    }
+#endif
+
+#undef JSON_IMPLEMENT_OPERATOR
+
+    /// @}
+
+    ///////////////////
+    // serialization //
+    ///////////////////
+
+    /// @name serialization
+    /// @{
+#ifndef JSON_NO_IO
+    /// @brief serialize to stream
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_ltlt/
+    friend std::ostream& operator<<(std::ostream& o, const basic_json& j)
+    {
+        // read width member and use it as indentation parameter if nonzero
+        const bool pretty_print = o.width() > 0;
+        const auto indentation = pretty_print ? o.width() : 0;
+
+        // reset width to 0 for subsequent calls to this stream
+        o.width(0);
+
+        // do the actual serialization
+        serializer s(detail::output_adapter<char>(o), o.fill());
+        s.dump(j, pretty_print, false, static_cast<unsigned int>(indentation));
+        return o;
+    }
+
+    /// @brief serialize to stream
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_ltlt/
+    /// @deprecated This function is deprecated since 3.0.0 and will be removed in
+    ///             version 4.0.0 of the library. Please use
+    ///             operator<<(std::ostream&, const basic_json&) instead; that is,
+    ///             replace calls like `j >> o;` with `o << j;`.
+    JSON_HEDLEY_DEPRECATED_FOR(3.0.0, operator<<(std::ostream&, const basic_json&))
+    friend std::ostream& operator>>(const basic_json& j, std::ostream& o)
+    {
+        return o << j;
+    }
+#endif  // JSON_NO_IO
+    /// @}
+
+
+    /////////////////////
+    // deserialization //
+    /////////////////////
+
+    /// @name deserialization
+    /// @{
+
+    /// @brief deserialize from a compatible input
+    /// @sa https://json.nlohmann.me/api/basic_json/parse/
+    template<typename InputType>
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    static basic_json parse(InputType&& i,
+                            const parser_callback_t cb = nullptr,
+                            const bool allow_exceptions = true,
+                            const bool ignore_comments = false)
+    {
+        basic_json result;
+        parser(detail::input_adapter(std::forward<InputType>(i)), cb, allow_exceptions, ignore_comments).parse(true, result);
+        return result;
+    }
+
+    /// @brief deserialize from a pair of character iterators
+    /// @sa https://json.nlohmann.me/api/basic_json/parse/
+    template<typename IteratorType>
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    static basic_json parse(IteratorType first,
+                            IteratorType last,
+                            const parser_callback_t cb = nullptr,
+                            const bool allow_exceptions = true,
+                            const bool ignore_comments = false)
+    {
+        basic_json result;
+        parser(detail::input_adapter(std::move(first), std::move(last)), cb, allow_exceptions, ignore_comments).parse(true, result);
+        return result;
+    }
+
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, parse(ptr, ptr + len))
+    static basic_json parse(detail::span_input_adapter&& i,
+                            const parser_callback_t cb = nullptr,
+                            const bool allow_exceptions = true,
+                            const bool ignore_comments = false)
+    {
+        basic_json result;
+        parser(i.get(), cb, allow_exceptions, ignore_comments).parse(true, result);
+        return result;
+    }
+
+    /// @brief check if the input is valid JSON
+    /// @sa https://json.nlohmann.me/api/basic_json/accept/
+    template<typename InputType>
+    static bool accept(InputType&& i,
+                       const bool ignore_comments = false)
+    {
+        return parser(detail::input_adapter(std::forward<InputType>(i)), nullptr, false, ignore_comments).accept(true);
+    }
+
+    /// @brief check if the input is valid JSON
+    /// @sa https://json.nlohmann.me/api/basic_json/accept/
+    template<typename IteratorType>
+    static bool accept(IteratorType first, IteratorType last,
+                       const bool ignore_comments = false)
+    {
+        return parser(detail::input_adapter(std::move(first), std::move(last)), nullptr, false, ignore_comments).accept(true);
+    }
+
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, accept(ptr, ptr + len))
+    static bool accept(detail::span_input_adapter&& i,
+                       const bool ignore_comments = false)
+    {
+        return parser(i.get(), nullptr, false, ignore_comments).accept(true);
+    }
+
+    /// @brief generate SAX events
+    /// @sa https://json.nlohmann.me/api/basic_json/sax_parse/
+    template <typename InputType, typename SAX>
+    JSON_HEDLEY_NON_NULL(2)
+    static bool sax_parse(InputType&& i, SAX* sax,
+                          input_format_t format = input_format_t::json,
+                          const bool strict = true,
+                          const bool ignore_comments = false)
+    {
+        auto ia = detail::input_adapter(std::forward<InputType>(i));
+        return format == input_format_t::json
+               ? parser(std::move(ia), nullptr, true, ignore_comments).sax_parse(sax, strict)
+               : detail::binary_reader<basic_json, decltype(ia), SAX>(std::move(ia), format).sax_parse(format, sax, strict);
+    }
+
+    /// @brief generate SAX events
+    /// @sa https://json.nlohmann.me/api/basic_json/sax_parse/
+    template<class IteratorType, class SAX>
+    JSON_HEDLEY_NON_NULL(3)
+    static bool sax_parse(IteratorType first, IteratorType last, SAX* sax,
+                          input_format_t format = input_format_t::json,
+                          const bool strict = true,
+                          const bool ignore_comments = false)
+    {
+        auto ia = detail::input_adapter(std::move(first), std::move(last));
+        return format == input_format_t::json
+               ? parser(std::move(ia), nullptr, true, ignore_comments).sax_parse(sax, strict)
+               : detail::binary_reader<basic_json, decltype(ia), SAX>(std::move(ia), format).sax_parse(format, sax, strict);
+    }
+
+    /// @brief generate SAX events
+    /// @sa https://json.nlohmann.me/api/basic_json/sax_parse/
+    /// @deprecated This function is deprecated since 3.8.0 and will be removed in
+    ///             version 4.0.0 of the library. Please use
+    ///             sax_parse(ptr, ptr + len) instead.
+    template <typename SAX>
+    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, sax_parse(ptr, ptr + len, ...))
+    JSON_HEDLEY_NON_NULL(2)
+    static bool sax_parse(detail::span_input_adapter&& i, SAX* sax,
+                          input_format_t format = input_format_t::json,
+                          const bool strict = true,
+                          const bool ignore_comments = false)
+    {
+        auto ia = i.get();
+        return format == input_format_t::json
+               // NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)
+               ? parser(std::move(ia), nullptr, true, ignore_comments).sax_parse(sax, strict)
+               // NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)
+               : detail::binary_reader<basic_json, decltype(ia), SAX>(std::move(ia), format).sax_parse(format, sax, strict);
+    }
+#ifndef JSON_NO_IO
+    /// @brief deserialize from stream
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_gtgt/
+    /// @deprecated This stream operator is deprecated since 3.0.0 and will be removed in
+    ///             version 4.0.0 of the library. Please use
+    ///             operator>>(std::istream&, basic_json&) instead; that is,
+    ///             replace calls like `j << i;` with `i >> j;`.
+    JSON_HEDLEY_DEPRECATED_FOR(3.0.0, operator>>(std::istream&, basic_json&))
+    friend std::istream& operator<<(basic_json& j, std::istream& i)
+    {
+        return operator>>(i, j);
+    }
+
+    /// @brief deserialize from stream
+    /// @sa https://json.nlohmann.me/api/basic_json/operator_gtgt/
+    friend std::istream& operator>>(std::istream& i, basic_json& j)
+    {
+        parser(detail::input_adapter(i)).parse(false, j);
+        return i;
+    }
+#endif  // JSON_NO_IO
+    /// @}
+
+    ///////////////////////////
+    // convenience functions //
+    ///////////////////////////
+
+    /// @brief return the type as string
+    /// @sa https://json.nlohmann.me/api/basic_json/type_name/
+    JSON_HEDLEY_RETURNS_NON_NULL
+    const char* type_name() const noexcept
+    {
+        switch (m_type)
+        {
+            case value_t::null:
+                return "null";
+            case value_t::object:
+                return "object";
+            case value_t::array:
+                return "array";
+            case value_t::string:
+                return "string";
+            case value_t::boolean:
+                return "boolean";
+            case value_t::binary:
+                return "binary";
+            case value_t::discarded:
+                return "discarded";
+            case value_t::number_integer:
+            case value_t::number_unsigned:
+            case value_t::number_float:
+            default:
+                return "number";
+        }
+    }
+
+
+  JSON_PRIVATE_UNLESS_TESTED:
+    //////////////////////
+    // member variables //
+    //////////////////////
+
+    /// the type of the current element
+    value_t m_type = value_t::null;
+
+    /// the value of the current element
+    json_value m_value = {};
+
+#if JSON_DIAGNOSTICS
+    /// a pointer to a parent value (for debugging purposes)
+    basic_json* m_parent = nullptr;
+#endif
+
+    //////////////////////////////////////////
+    // binary serialization/deserialization //
+    //////////////////////////////////////////
+
+    /// @name binary serialization/deserialization support
+    /// @{
+
+  public:
+    /// @brief create a CBOR serialization of a given JSON value
+    /// @sa https://json.nlohmann.me/api/basic_json/to_cbor/
+    static std::vector<std::uint8_t> to_cbor(const basic_json& j)
+    {
+        std::vector<std::uint8_t> result;
+        to_cbor(j, result);
+        return result;
+    }
+
+    /// @brief create a CBOR serialization of a given JSON value
+    /// @sa https://json.nlohmann.me/api/basic_json/to_cbor/
+    static void to_cbor(const basic_json& j, detail::output_adapter<std::uint8_t> o)
+    {
+        binary_writer<std::uint8_t>(o).write_cbor(j);
+    }
+
+    /// @brief create a CBOR serialization of a given JSON value
+    /// @sa https://json.nlohmann.me/api/basic_json/to_cbor/
+    static void to_cbor(const basic_json& j, detail::output_adapter<char> o)
+    {
+        binary_writer<char>(o).write_cbor(j);
+    }
+
+    /// @brief create a MessagePack serialization of a given JSON value
+    /// @sa https://json.nlohmann.me/api/basic_json/to_msgpack/
+    static std::vector<std::uint8_t> to_msgpack(const basic_json& j)
+    {
+        std::vector<std::uint8_t> result;
+        to_msgpack(j, result);
+        return result;
+    }
+
+    /// @brief create a MessagePack serialization of a given JSON value
+    /// @sa https://json.nlohmann.me/api/basic_json/to_msgpack/
+    static void to_msgpack(const basic_json& j, detail::output_adapter<std::uint8_t> o)
+    {
+        binary_writer<std::uint8_t>(o).write_msgpack(j);
+    }
+
+    /// @brief create a MessagePack serialization of a given JSON value
+    /// @sa https://json.nlohmann.me/api/basic_json/to_msgpack/
+    static void to_msgpack(const basic_json& j, detail::output_adapter<char> o)
+    {
+        binary_writer<char>(o).write_msgpack(j);
+    }
+
+    /// @brief create a UBJSON serialization of a given JSON value
+    /// @sa https://json.nlohmann.me/api/basic_json/to_ubjson/
+    static std::vector<std::uint8_t> to_ubjson(const basic_json& j,
+            const bool use_size = false,
+            const bool use_type = false)
+    {
+        std::vector<std::uint8_t> result;
+        to_ubjson(j, result, use_size, use_type);
+        return result;
+    }
+
+    /// @brief create a UBJSON serialization of a given JSON value
+    /// @sa https://json.nlohmann.me/api/basic_json/to_ubjson/
+    static void to_ubjson(const basic_json& j, detail::output_adapter<std::uint8_t> o,
+                          const bool use_size = false, const bool use_type = false)
+    {
+        binary_writer<std::uint8_t>(o).write_ubjson(j, use_size, use_type);
+    }
+
+    /// @brief create a UBJSON serialization of a given JSON value
+    /// @sa https://json.nlohmann.me/api/basic_json/to_ubjson/
+    static void to_ubjson(const basic_json& j, detail::output_adapter<char> o,
+                          const bool use_size = false, const bool use_type = false)
+    {
+        binary_writer<char>(o).write_ubjson(j, use_size, use_type);
+    }
+
+    /// @brief create a BJData serialization of a given JSON value
+    /// @sa https://json.nlohmann.me/api/basic_json/to_bjdata/
+    static std::vector<std::uint8_t> to_bjdata(const basic_json& j,
+            const bool use_size = false,
+            const bool use_type = false)
+    {
+        std::vector<std::uint8_t> result;
+        to_bjdata(j, result, use_size, use_type);
+        return result;
+    }
+
+    /// @brief create a BJData serialization of a given JSON value
+    /// @sa https://json.nlohmann.me/api/basic_json/to_bjdata/
+    static void to_bjdata(const basic_json& j, detail::output_adapter<std::uint8_t> o,
+                          const bool use_size = false, const bool use_type = false)
+    {
+        binary_writer<std::uint8_t>(o).write_ubjson(j, use_size, use_type, true, true);
+    }
+
+    /// @brief create a BJData serialization of a given JSON value
+    /// @sa https://json.nlohmann.me/api/basic_json/to_bjdata/
+    static void to_bjdata(const basic_json& j, detail::output_adapter<char> o,
+                          const bool use_size = false, const bool use_type = false)
+    {
+        binary_writer<char>(o).write_ubjson(j, use_size, use_type, true, true);
+    }
+
+    /// @brief create a BSON serialization of a given JSON value
+    /// @sa https://json.nlohmann.me/api/basic_json/to_bson/
+    static std::vector<std::uint8_t> to_bson(const basic_json& j)
+    {
+        std::vector<std::uint8_t> result;
+        to_bson(j, result);
+        return result;
+    }
+
+    /// @brief create a BSON serialization of a given JSON value
+    /// @sa https://json.nlohmann.me/api/basic_json/to_bson/
+    static void to_bson(const basic_json& j, detail::output_adapter<std::uint8_t> o)
+    {
+        binary_writer<std::uint8_t>(o).write_bson(j);
+    }
+
+    /// @brief create a BSON serialization of a given JSON value
+    /// @sa https://json.nlohmann.me/api/basic_json/to_bson/
+    static void to_bson(const basic_json& j, detail::output_adapter<char> o)
+    {
+        binary_writer<char>(o).write_bson(j);
+    }
+
+    /// @brief create a JSON value from an input in CBOR format
+    /// @sa https://json.nlohmann.me/api/basic_json/from_cbor/
+    template<typename InputType>
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    static basic_json from_cbor(InputType&& i,
+                                const bool strict = true,
+                                const bool allow_exceptions = true,
+                                const cbor_tag_handler_t tag_handler = cbor_tag_handler_t::error)
+    {
+        basic_json result;
+        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
+        auto ia = detail::input_adapter(std::forward<InputType>(i));
+        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::cbor).sax_parse(input_format_t::cbor, &sdp, strict, tag_handler);
+        return res ? result : basic_json(value_t::discarded);
+    }
+
+    /// @brief create a JSON value from an input in CBOR format
+    /// @sa https://json.nlohmann.me/api/basic_json/from_cbor/
+    template<typename IteratorType>
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    static basic_json from_cbor(IteratorType first, IteratorType last,
+                                const bool strict = true,
+                                const bool allow_exceptions = true,
+                                const cbor_tag_handler_t tag_handler = cbor_tag_handler_t::error)
+    {
+        basic_json result;
+        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
+        auto ia = detail::input_adapter(std::move(first), std::move(last));
+        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::cbor).sax_parse(input_format_t::cbor, &sdp, strict, tag_handler);
+        return res ? result : basic_json(value_t::discarded);
+    }
+
+    template<typename T>
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, from_cbor(ptr, ptr + len))
+    static basic_json from_cbor(const T* ptr, std::size_t len,
+                                const bool strict = true,
+                                const bool allow_exceptions = true,
+                                const cbor_tag_handler_t tag_handler = cbor_tag_handler_t::error)
+    {
+        return from_cbor(ptr, ptr + len, strict, allow_exceptions, tag_handler);
+    }
+
+
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, from_cbor(ptr, ptr + len))
+    static basic_json from_cbor(detail::span_input_adapter&& i,
+                                const bool strict = true,
+                                const bool allow_exceptions = true,
+                                const cbor_tag_handler_t tag_handler = cbor_tag_handler_t::error)
+    {
+        basic_json result;
+        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
+        auto ia = i.get();
+        // NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)
+        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::cbor).sax_parse(input_format_t::cbor, &sdp, strict, tag_handler);
+        return res ? result : basic_json(value_t::discarded);
+    }
+
+    /// @brief create a JSON value from an input in MessagePack format
+    /// @sa https://json.nlohmann.me/api/basic_json/from_msgpack/
+    template<typename InputType>
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    static basic_json from_msgpack(InputType&& i,
+                                   const bool strict = true,
+                                   const bool allow_exceptions = true)
+    {
+        basic_json result;
+        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
+        auto ia = detail::input_adapter(std::forward<InputType>(i));
+        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::msgpack).sax_parse(input_format_t::msgpack, &sdp, strict);
+        return res ? result : basic_json(value_t::discarded);
+    }
+
+    /// @brief create a JSON value from an input in MessagePack format
+    /// @sa https://json.nlohmann.me/api/basic_json/from_msgpack/
+    template<typename IteratorType>
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    static basic_json from_msgpack(IteratorType first, IteratorType last,
+                                   const bool strict = true,
+                                   const bool allow_exceptions = true)
+    {
+        basic_json result;
+        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
+        auto ia = detail::input_adapter(std::move(first), std::move(last));
+        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::msgpack).sax_parse(input_format_t::msgpack, &sdp, strict);
+        return res ? result : basic_json(value_t::discarded);
+    }
+
+    template<typename T>
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, from_msgpack(ptr, ptr + len))
+    static basic_json from_msgpack(const T* ptr, std::size_t len,
+                                   const bool strict = true,
+                                   const bool allow_exceptions = true)
+    {
+        return from_msgpack(ptr, ptr + len, strict, allow_exceptions);
+    }
+
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, from_msgpack(ptr, ptr + len))
+    static basic_json from_msgpack(detail::span_input_adapter&& i,
+                                   const bool strict = true,
+                                   const bool allow_exceptions = true)
+    {
+        basic_json result;
+        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
+        auto ia = i.get();
+        // NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)
+        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::msgpack).sax_parse(input_format_t::msgpack, &sdp, strict);
+        return res ? result : basic_json(value_t::discarded);
+    }
+
+    /// @brief create a JSON value from an input in UBJSON format
+    /// @sa https://json.nlohmann.me/api/basic_json/from_ubjson/
+    template<typename InputType>
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    static basic_json from_ubjson(InputType&& i,
+                                  const bool strict = true,
+                                  const bool allow_exceptions = true)
+    {
+        basic_json result;
+        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
+        auto ia = detail::input_adapter(std::forward<InputType>(i));
+        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::ubjson).sax_parse(input_format_t::ubjson, &sdp, strict);
+        return res ? result : basic_json(value_t::discarded);
+    }
+
+    /// @brief create a JSON value from an input in UBJSON format
+    /// @sa https://json.nlohmann.me/api/basic_json/from_ubjson/
+    template<typename IteratorType>
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    static basic_json from_ubjson(IteratorType first, IteratorType last,
+                                  const bool strict = true,
+                                  const bool allow_exceptions = true)
+    {
+        basic_json result;
+        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
+        auto ia = detail::input_adapter(std::move(first), std::move(last));
+        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::ubjson).sax_parse(input_format_t::ubjson, &sdp, strict);
+        return res ? result : basic_json(value_t::discarded);
+    }
+
+    template<typename T>
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, from_ubjson(ptr, ptr + len))
+    static basic_json from_ubjson(const T* ptr, std::size_t len,
+                                  const bool strict = true,
+                                  const bool allow_exceptions = true)
+    {
+        return from_ubjson(ptr, ptr + len, strict, allow_exceptions);
+    }
+
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, from_ubjson(ptr, ptr + len))
+    static basic_json from_ubjson(detail::span_input_adapter&& i,
+                                  const bool strict = true,
+                                  const bool allow_exceptions = true)
+    {
+        basic_json result;
+        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
+        auto ia = i.get();
+        // NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)
+        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::ubjson).sax_parse(input_format_t::ubjson, &sdp, strict);
+        return res ? result : basic_json(value_t::discarded);
+    }
+
+
+    /// @brief create a JSON value from an input in BJData format
+    /// @sa https://json.nlohmann.me/api/basic_json/from_bjdata/
+    template<typename InputType>
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    static basic_json from_bjdata(InputType&& i,
+                                  const bool strict = true,
+                                  const bool allow_exceptions = true)
+    {
+        basic_json result;
+        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
+        auto ia = detail::input_adapter(std::forward<InputType>(i));
+        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::bjdata).sax_parse(input_format_t::bjdata, &sdp, strict);
+        return res ? result : basic_json(value_t::discarded);
+    }
+
+    /// @brief create a JSON value from an input in BJData format
+    /// @sa https://json.nlohmann.me/api/basic_json/from_bjdata/
+    template<typename IteratorType>
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    static basic_json from_bjdata(IteratorType first, IteratorType last,
+                                  const bool strict = true,
+                                  const bool allow_exceptions = true)
+    {
+        basic_json result;
+        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
+        auto ia = detail::input_adapter(std::move(first), std::move(last));
+        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::bjdata).sax_parse(input_format_t::bjdata, &sdp, strict);
+        return res ? result : basic_json(value_t::discarded);
+    }
+
+    /// @brief create a JSON value from an input in BSON format
+    /// @sa https://json.nlohmann.me/api/basic_json/from_bson/
+    template<typename InputType>
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    static basic_json from_bson(InputType&& i,
+                                const bool strict = true,
+                                const bool allow_exceptions = true)
+    {
+        basic_json result;
+        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
+        auto ia = detail::input_adapter(std::forward<InputType>(i));
+        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::bson).sax_parse(input_format_t::bson, &sdp, strict);
+        return res ? result : basic_json(value_t::discarded);
+    }
+
+    /// @brief create a JSON value from an input in BSON format
+    /// @sa https://json.nlohmann.me/api/basic_json/from_bson/
+    template<typename IteratorType>
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    static basic_json from_bson(IteratorType first, IteratorType last,
+                                const bool strict = true,
+                                const bool allow_exceptions = true)
+    {
+        basic_json result;
+        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
+        auto ia = detail::input_adapter(std::move(first), std::move(last));
+        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::bson).sax_parse(input_format_t::bson, &sdp, strict);
+        return res ? result : basic_json(value_t::discarded);
+    }
+
+    template<typename T>
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, from_bson(ptr, ptr + len))
+    static basic_json from_bson(const T* ptr, std::size_t len,
+                                const bool strict = true,
+                                const bool allow_exceptions = true)
+    {
+        return from_bson(ptr, ptr + len, strict, allow_exceptions);
+    }
+
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, from_bson(ptr, ptr + len))
+    static basic_json from_bson(detail::span_input_adapter&& i,
+                                const bool strict = true,
+                                const bool allow_exceptions = true)
+    {
+        basic_json result;
+        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
+        auto ia = i.get();
+        // NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)
+        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::bson).sax_parse(input_format_t::bson, &sdp, strict);
+        return res ? result : basic_json(value_t::discarded);
+    }
+    /// @}
+
+    //////////////////////////
+    // JSON Pointer support //
+    //////////////////////////
+
+    /// @name JSON Pointer functions
+    /// @{
+
+    /// @brief access specified element via JSON Pointer
+    /// @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/
+    reference operator[](const json_pointer& ptr)
+    {
+        return ptr.get_unchecked(this);
+    }
+
+    template<typename BasicJsonType, detail::enable_if_t<detail::is_basic_json<BasicJsonType>::value, int> = 0>
+    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, basic_json::json_pointer or nlohmann::json_pointer<basic_json::string_t>) // NOLINT(readability/alt_tokens)
+    reference operator[](const ::nlohmann::json_pointer<BasicJsonType>& ptr)
+    {
+        return ptr.get_unchecked(this);
+    }
+
+    /// @brief access specified element via JSON Pointer
+    /// @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/
+    const_reference operator[](const json_pointer& ptr) const
+    {
+        return ptr.get_unchecked(this);
+    }
+
+    template<typename BasicJsonType, detail::enable_if_t<detail::is_basic_json<BasicJsonType>::value, int> = 0>
+    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, basic_json::json_pointer or nlohmann::json_pointer<basic_json::string_t>) // NOLINT(readability/alt_tokens)
+    const_reference operator[](const ::nlohmann::json_pointer<BasicJsonType>& ptr) const
+    {
+        return ptr.get_unchecked(this);
+    }
+
+    /// @brief access specified element via JSON Pointer
+    /// @sa https://json.nlohmann.me/api/basic_json/at/
+    reference at(const json_pointer& ptr)
+    {
+        return ptr.get_checked(this);
+    }
+
+    template<typename BasicJsonType, detail::enable_if_t<detail::is_basic_json<BasicJsonType>::value, int> = 0>
+    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, basic_json::json_pointer or nlohmann::json_pointer<basic_json::string_t>) // NOLINT(readability/alt_tokens)
+    reference at(const ::nlohmann::json_pointer<BasicJsonType>& ptr)
+    {
+        return ptr.get_checked(this);
+    }
+
+    /// @brief access specified element via JSON Pointer
+    /// @sa https://json.nlohmann.me/api/basic_json/at/
+    const_reference at(const json_pointer& ptr) const
+    {
+        return ptr.get_checked(this);
+    }
+
+    template<typename BasicJsonType, detail::enable_if_t<detail::is_basic_json<BasicJsonType>::value, int> = 0>
+    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, basic_json::json_pointer or nlohmann::json_pointer<basic_json::string_t>) // NOLINT(readability/alt_tokens)
+    const_reference at(const ::nlohmann::json_pointer<BasicJsonType>& ptr) const
+    {
+        return ptr.get_checked(this);
+    }
+
+    /// @brief return flattened JSON value
+    /// @sa https://json.nlohmann.me/api/basic_json/flatten/
+    basic_json flatten() const
+    {
+        basic_json result(value_t::object);
+        json_pointer::flatten("", *this, result);
+        return result;
+    }
+
+    /// @brief unflatten a previously flattened JSON value
+    /// @sa https://json.nlohmann.me/api/basic_json/unflatten/
+    basic_json unflatten() const
+    {
+        return json_pointer::unflatten(*this);
+    }
+
+    /// @}
+
+    //////////////////////////
+    // JSON Patch functions //
+    //////////////////////////
+
+    /// @name JSON Patch functions
+    /// @{
+
+    /// @brief applies a JSON patch in-place without copying the object
+    /// @sa https://json.nlohmann.me/api/basic_json/patch/
+    void patch_inplace(const basic_json& json_patch)
+    {
+        basic_json& result = *this;
+        // the valid JSON Patch operations
+        enum class patch_operations {add, remove, replace, move, copy, test, invalid};
+
+        const auto get_op = [](const std::string & op)
+        {
+            if (op == "add")
+            {
+                return patch_operations::add;
+            }
+            if (op == "remove")
+            {
+                return patch_operations::remove;
+            }
+            if (op == "replace")
+            {
+                return patch_operations::replace;
+            }
+            if (op == "move")
+            {
+                return patch_operations::move;
+            }
+            if (op == "copy")
+            {
+                return patch_operations::copy;
+            }
+            if (op == "test")
+            {
+                return patch_operations::test;
+            }
+
+            return patch_operations::invalid;
+        };
+
+        // wrapper for "add" operation; add value at ptr
+        const auto operation_add = [&result](json_pointer & ptr, basic_json val)
+        {
+            // adding to the root of the target document means replacing it
+            if (ptr.empty())
+            {
+                result = val;
+                return;
+            }
+
+            // make sure the top element of the pointer exists
+            json_pointer const top_pointer = ptr.top();
+            if (top_pointer != ptr)
+            {
+                result.at(top_pointer);
+            }
+
+            // get reference to parent of JSON pointer ptr
+            const auto last_path = ptr.back();
+            ptr.pop_back();
+            // parent must exist when performing patch add per RFC6902 specs
+            basic_json& parent = result.at(ptr);
+
+            switch (parent.m_type)
+            {
+                case value_t::null:
+                case value_t::object:
+                {
+                    // use operator[] to add value
+                    parent[last_path] = val;
+                    break;
+                }
+
+                case value_t::array:
+                {
+                    if (last_path == "-")
+                    {
+                        // special case: append to back
+                        parent.push_back(val);
+                    }
+                    else
+                    {
+                        const auto idx = json_pointer::template array_index<basic_json_t>(last_path);
+                        if (JSON_HEDLEY_UNLIKELY(idx > parent.size()))
+                        {
+                            // avoid undefined behavior
+                            JSON_THROW(out_of_range::create(401, detail::concat("array index ", std::to_string(idx), " is out of range"), &parent));
+                        }
+
+                        // default case: insert add offset
+                        parent.insert(parent.begin() + static_cast<difference_type>(idx), val);
+                    }
+                    break;
+                }
+
+                // if there exists a parent it cannot be primitive
+                case value_t::string: // LCOV_EXCL_LINE
+                case value_t::boolean: // LCOV_EXCL_LINE
+                case value_t::number_integer: // LCOV_EXCL_LINE
+                case value_t::number_unsigned: // LCOV_EXCL_LINE
+                case value_t::number_float: // LCOV_EXCL_LINE
+                case value_t::binary: // LCOV_EXCL_LINE
+                case value_t::discarded: // LCOV_EXCL_LINE
+                default:            // LCOV_EXCL_LINE
+                    JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE
+            }
+        };
+
+        // wrapper for "remove" operation; remove value at ptr
+        const auto operation_remove = [this, &result](json_pointer & ptr)
+        {
+            // get reference to parent of JSON pointer ptr
+            const auto last_path = ptr.back();
+            ptr.pop_back();
+            basic_json& parent = result.at(ptr);
+
+            // remove child
+            if (parent.is_object())
+            {
+                // perform range check
+                auto it = parent.find(last_path);
+                if (JSON_HEDLEY_LIKELY(it != parent.end()))
+                {
+                    parent.erase(it);
+                }
+                else
+                {
+                    JSON_THROW(out_of_range::create(403, detail::concat("key '", last_path, "' not found"), this));
+                }
+            }
+            else if (parent.is_array())
+            {
+                // note erase performs range check
+                parent.erase(json_pointer::template array_index<basic_json_t>(last_path));
+            }
+        };
+
+        // type check: top level value must be an array
+        if (JSON_HEDLEY_UNLIKELY(!json_patch.is_array()))
+        {
+            JSON_THROW(parse_error::create(104, 0, "JSON patch must be an array of objects", &json_patch));
+        }
+
+        // iterate and apply the operations
+        for (const auto& val : json_patch)
+        {
+            // wrapper to get a value for an operation
+            const auto get_value = [&val](const std::string & op,
+                                          const std::string & member,
+                                          bool string_type) -> basic_json &
+            {
+                // find value
+                auto it = val.m_value.object->find(member);
+
+                // context-sensitive error message
+                const auto error_msg = (op == "op") ? "operation" : detail::concat("operation '", op, '\'');
+
+                // check if desired value is present
+                if (JSON_HEDLEY_UNLIKELY(it == val.m_value.object->end()))
+                {
+                    // NOLINTNEXTLINE(performance-inefficient-string-concatenation)
+                    JSON_THROW(parse_error::create(105, 0, detail::concat(error_msg, " must have member '", member, "'"), &val));
+                }
+
+                // check if result is of type string
+                if (JSON_HEDLEY_UNLIKELY(string_type && !it->second.is_string()))
+                {
+                    // NOLINTNEXTLINE(performance-inefficient-string-concatenation)
+                    JSON_THROW(parse_error::create(105, 0, detail::concat(error_msg, " must have string member '", member, "'"), &val));
+                }
+
+                // no error: return value
+                return it->second;
+            };
+
+            // type check: every element of the array must be an object
+            if (JSON_HEDLEY_UNLIKELY(!val.is_object()))
+            {
+                JSON_THROW(parse_error::create(104, 0, "JSON patch must be an array of objects", &val));
+            }
+
+            // collect mandatory members
+            const auto op = get_value("op", "op", true).template get<std::string>();
+            const auto path = get_value(op, "path", true).template get<std::string>();
+            json_pointer ptr(path);
+
+            switch (get_op(op))
+            {
+                case patch_operations::add:
+                {
+                    operation_add(ptr, get_value("add", "value", false));
+                    break;
+                }
+
+                case patch_operations::remove:
+                {
+                    operation_remove(ptr);
+                    break;
+                }
+
+                case patch_operations::replace:
+                {
+                    // the "path" location must exist - use at()
+                    result.at(ptr) = get_value("replace", "value", false);
+                    break;
+                }
+
+                case patch_operations::move:
+                {
+                    const auto from_path = get_value("move", "from", true).template get<std::string>();
+                    json_pointer from_ptr(from_path);
+
+                    // the "from" location must exist - use at()
+                    basic_json const v = result.at(from_ptr);
+
+                    // The move operation is functionally identical to a
+                    // "remove" operation on the "from" location, followed
+                    // immediately by an "add" operation at the target
+                    // location with the value that was just removed.
+                    operation_remove(from_ptr);
+                    operation_add(ptr, v);
+                    break;
+                }
+
+                case patch_operations::copy:
+                {
+                    const auto from_path = get_value("copy", "from", true).template get<std::string>();
+                    const json_pointer from_ptr(from_path);
+
+                    // the "from" location must exist - use at()
+                    basic_json const v = result.at(from_ptr);
+
+                    // The copy is functionally identical to an "add"
+                    // operation at the target location using the value
+                    // specified in the "from" member.
+                    operation_add(ptr, v);
+                    break;
+                }
+
+                case patch_operations::test:
+                {
+                    bool success = false;
+                    JSON_TRY
+                    {
+                        // check if "value" matches the one at "path"
+                        // the "path" location must exist - use at()
+                        success = (result.at(ptr) == get_value("test", "value", false));
+                    }
+                    JSON_INTERNAL_CATCH (out_of_range&)
+                    {
+                        // ignore out of range errors: success remains false
+                    }
+
+                    // throw an exception if test fails
+                    if (JSON_HEDLEY_UNLIKELY(!success))
+                    {
+                        JSON_THROW(other_error::create(501, detail::concat("unsuccessful: ", val.dump()), &val));
+                    }
+
+                    break;
+                }
+
+                case patch_operations::invalid:
+                default:
+                {
+                    // op must be "add", "remove", "replace", "move", "copy", or
+                    // "test"
+                    JSON_THROW(parse_error::create(105, 0, detail::concat("operation value '", op, "' is invalid"), &val));
+                }
+            }
+        }
+    }
+
+    /// @brief applies a JSON patch to a copy of the current object
+    /// @sa https://json.nlohmann.me/api/basic_json/patch/
+    basic_json patch(const basic_json& json_patch) const
+    {
+        basic_json result = *this;
+        result.patch_inplace(json_patch);
+        return result;
+    }
+
+    /// @brief creates a diff as a JSON patch
+    /// @sa https://json.nlohmann.me/api/basic_json/diff/
+    JSON_HEDLEY_WARN_UNUSED_RESULT
+    static basic_json diff(const basic_json& source, const basic_json& target,
+                           const std::string& path = "")
+    {
+        // the patch
+        basic_json result(value_t::array);
+
+        // if the values are the same, return empty patch
+        if (source == target)
+        {
+            return result;
+        }
+
+        if (source.type() != target.type())
+        {
+            // different types: replace value
+            result.push_back(
+            {
+                {"op", "replace"}, {"path", path}, {"value", target}
+            });
+            return result;
+        }
+
+        switch (source.type())
+        {
+            case value_t::array:
+            {
+                // first pass: traverse common elements
+                std::size_t i = 0;
+                while (i < source.size() && i < target.size())
+                {
+                    // recursive call to compare array values at index i
+                    auto temp_diff = diff(source[i], target[i], detail::concat(path, '/', std::to_string(i)));
+                    result.insert(result.end(), temp_diff.begin(), temp_diff.end());
+                    ++i;
+                }
+
+                // We now reached the end of at least one array
+                // in a second pass, traverse the remaining elements
+
+                // remove my remaining elements
+                const auto end_index = static_cast<difference_type>(result.size());
+                while (i < source.size())
+                {
+                    // add operations in reverse order to avoid invalid
+                    // indices
+                    result.insert(result.begin() + end_index, object(
+                    {
+                        {"op", "remove"},
+                        {"path", detail::concat(path, '/', std::to_string(i))}
+                    }));
+                    ++i;
+                }
+
+                // add other remaining elements
+                while (i < target.size())
+                {
+                    result.push_back(
+                    {
+                        {"op", "add"},
+                        {"path", detail::concat(path, "/-")},
+                        {"value", target[i]}
+                    });
+                    ++i;
+                }
+
+                break;
+            }
+
+            case value_t::object:
+            {
+                // first pass: traverse this object's elements
+                for (auto it = source.cbegin(); it != source.cend(); ++it)
+                {
+                    // escape the key name to be used in a JSON patch
+                    const auto path_key = detail::concat(path, '/', detail::escape(it.key()));
+
+                    if (target.find(it.key()) != target.end())
+                    {
+                        // recursive call to compare object values at key it
+                        auto temp_diff = diff(it.value(), target[it.key()], path_key);
+                        result.insert(result.end(), temp_diff.begin(), temp_diff.end());
+                    }
+                    else
+                    {
+                        // found a key that is not in o -> remove it
+                        result.push_back(object(
+                        {
+                            {"op", "remove"}, {"path", path_key}
+                        }));
+                    }
+                }
+
+                // second pass: traverse other object's elements
+                for (auto it = target.cbegin(); it != target.cend(); ++it)
+                {
+                    if (source.find(it.key()) == source.end())
+                    {
+                        // found a key that is not in this -> add it
+                        const auto path_key = detail::concat(path, '/', detail::escape(it.key()));
+                        result.push_back(
+                        {
+                            {"op", "add"}, {"path", path_key},
+                            {"value", it.value()}
+                        });
+                    }
+                }
+
+                break;
+            }
+
+            case value_t::null:
+            case value_t::string:
+            case value_t::boolean:
+            case value_t::number_integer:
+            case value_t::number_unsigned:
+            case value_t::number_float:
+            case value_t::binary:
+            case value_t::discarded:
+            default:
+            {
+                // both primitive type: replace value
+                result.push_back(
+                {
+                    {"op", "replace"}, {"path", path}, {"value", target}
+                });
+                break;
+            }
+        }
+
+        return result;
+    }
+    /// @}
+
+    ////////////////////////////////
+    // JSON Merge Patch functions //
+    ////////////////////////////////
+
+    /// @name JSON Merge Patch functions
+    /// @{
+
+    /// @brief applies a JSON Merge Patch
+    /// @sa https://json.nlohmann.me/api/basic_json/merge_patch/
+    void merge_patch(const basic_json& apply_patch)
+    {
+        if (apply_patch.is_object())
+        {
+            if (!is_object())
+            {
+                *this = object();
+            }
+            for (auto it = apply_patch.begin(); it != apply_patch.end(); ++it)
+            {
+                if (it.value().is_null())
+                {
+                    erase(it.key());
+                }
+                else
+                {
+                    operator[](it.key()).merge_patch(it.value());
+                }
+            }
+        }
+        else
+        {
+            *this = apply_patch;
+        }
+    }
+
+    /// @}
+};
+
+/// @brief user-defined to_string function for JSON values
+/// @sa https://json.nlohmann.me/api/basic_json/to_string/
+NLOHMANN_BASIC_JSON_TPL_DECLARATION
+std::string to_string(const NLOHMANN_BASIC_JSON_TPL& j)
+{
+    return j.dump();
+}
+
+inline namespace literals
+{
+inline namespace json_literals
+{
+
+/// @brief user-defined string literal for JSON values
+/// @sa https://json.nlohmann.me/api/basic_json/operator_literal_json/
+JSON_HEDLEY_NON_NULL(1)
+inline nlohmann::json operator "" _json(const char* s, std::size_t n)
+{
+    return nlohmann::json::parse(s, s + n);
+}
+
+/// @brief user-defined string literal for JSON pointer
+/// @sa https://json.nlohmann.me/api/basic_json/operator_literal_json_pointer/
+JSON_HEDLEY_NON_NULL(1)
+inline nlohmann::json::json_pointer operator "" _json_pointer(const char* s, std::size_t n)
+{
+    return nlohmann::json::json_pointer(std::string(s, n));
+}
+
+}  // namespace json_literals
+}  // namespace literals
+NLOHMANN_JSON_NAMESPACE_END
+
+///////////////////////
+// nonmember support //
+///////////////////////
+
+namespace std // NOLINT(cert-dcl58-cpp)
+{
+
+/// @brief hash value for JSON objects
+/// @sa https://json.nlohmann.me/api/basic_json/std_hash/
+NLOHMANN_BASIC_JSON_TPL_DECLARATION
+struct hash<nlohmann::NLOHMANN_BASIC_JSON_TPL> // NOLINT(cert-dcl58-cpp)
+{
+    std::size_t operator()(const nlohmann::NLOHMANN_BASIC_JSON_TPL& j) const
+    {
+        return nlohmann::detail::hash(j);
+    }
+};
+
+// specialization for std::less<value_t>
+template<>
+struct less< ::nlohmann::detail::value_t> // do not remove the space after '<', see https://github.com/nlohmann/json/pull/679
+{
+    /*!
+    @brief compare two value_t enum values
+    @since version 3.0.0
+    */
+    bool operator()(::nlohmann::detail::value_t lhs,
+                    ::nlohmann::detail::value_t rhs) const noexcept
+    {
+#if JSON_HAS_THREE_WAY_COMPARISON
+        return std::is_lt(lhs <=> rhs); // *NOPAD*
+#else
+        return ::nlohmann::detail::operator<(lhs, rhs);
+#endif
+    }
+};
+
+// C++20 prohibit function specialization in the std namespace.
+#ifndef JSON_HAS_CPP_20
+
+/// @brief exchanges the values of two JSON objects
+/// @sa https://json.nlohmann.me/api/basic_json/std_swap/
+NLOHMANN_BASIC_JSON_TPL_DECLARATION
+inline void swap(nlohmann::NLOHMANN_BASIC_JSON_TPL& j1, nlohmann::NLOHMANN_BASIC_JSON_TPL& j2) noexcept(  // NOLINT(readability-inconsistent-declaration-parameter-name, cert-dcl58-cpp)
+    is_nothrow_move_constructible<nlohmann::NLOHMANN_BASIC_JSON_TPL>::value&&                          // NOLINT(misc-redundant-expression)
+    is_nothrow_move_assignable<nlohmann::NLOHMANN_BASIC_JSON_TPL>::value)
+{
+    j1.swap(j2);
+}
+
+#endif
+
+}  // namespace std
+
+#if JSON_USE_GLOBAL_UDLS
+    using nlohmann::literals::json_literals::operator "" _json; // NOLINT(misc-unused-using-decls,google-global-names-in-headers)
+    using nlohmann::literals::json_literals::operator "" _json_pointer; //NOLINT(misc-unused-using-decls,google-global-names-in-headers)
+#endif
+
+// #include <nlohmann/detail/macro_unscope.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+// restore clang diagnostic settings
+#if defined(__clang__)
+    #pragma clang diagnostic pop
+#endif
+
+// clean up
+#undef JSON_ASSERT
+#undef JSON_INTERNAL_CATCH
+#undef JSON_THROW
+#undef JSON_PRIVATE_UNLESS_TESTED
+#undef NLOHMANN_BASIC_JSON_TPL_DECLARATION
+#undef NLOHMANN_BASIC_JSON_TPL
+#undef JSON_EXPLICIT
+#undef NLOHMANN_CAN_CALL_STD_FUNC_IMPL
+#undef JSON_INLINE_VARIABLE
+#undef JSON_NO_UNIQUE_ADDRESS
+#undef JSON_DISABLE_ENUM_SERIALIZATION
+#undef JSON_USE_GLOBAL_UDLS
+
+#ifndef JSON_TEST_KEEP_MACROS
+    #undef JSON_CATCH
+    #undef JSON_TRY
+    #undef JSON_HAS_CPP_11
+    #undef JSON_HAS_CPP_14
+    #undef JSON_HAS_CPP_17
+    #undef JSON_HAS_CPP_20
+    #undef JSON_HAS_FILESYSTEM
+    #undef JSON_HAS_EXPERIMENTAL_FILESYSTEM
+    #undef JSON_HAS_THREE_WAY_COMPARISON
+    #undef JSON_HAS_RANGES
+    #undef JSON_USE_LEGACY_DISCARDED_VALUE_COMPARISON
+#endif
+
+// #include <nlohmann/thirdparty/hedley/hedley_undef.hpp>
+//     __ _____ _____ _____
+//  __|  |   __|     |   | |  JSON for Modern C++
+// |  |  |__   |  |  | | | |  version 3.11.2
+// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
+//
+// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
+// SPDX-License-Identifier: MIT
+
+
+
+#undef JSON_HEDLEY_ALWAYS_INLINE
+#undef JSON_HEDLEY_ARM_VERSION
+#undef JSON_HEDLEY_ARM_VERSION_CHECK
+#undef JSON_HEDLEY_ARRAY_PARAM
+#undef JSON_HEDLEY_ASSUME
+#undef JSON_HEDLEY_BEGIN_C_DECLS
+#undef JSON_HEDLEY_CLANG_HAS_ATTRIBUTE
+#undef JSON_HEDLEY_CLANG_HAS_BUILTIN
+#undef JSON_HEDLEY_CLANG_HAS_CPP_ATTRIBUTE
+#undef JSON_HEDLEY_CLANG_HAS_DECLSPEC_DECLSPEC_ATTRIBUTE
+#undef JSON_HEDLEY_CLANG_HAS_EXTENSION
+#undef JSON_HEDLEY_CLANG_HAS_FEATURE
+#undef JSON_HEDLEY_CLANG_HAS_WARNING
+#undef JSON_HEDLEY_COMPCERT_VERSION
+#undef JSON_HEDLEY_COMPCERT_VERSION_CHECK
+#undef JSON_HEDLEY_CONCAT
+#undef JSON_HEDLEY_CONCAT3
+#undef JSON_HEDLEY_CONCAT3_EX
+#undef JSON_HEDLEY_CONCAT_EX
+#undef JSON_HEDLEY_CONST
+#undef JSON_HEDLEY_CONSTEXPR
+#undef JSON_HEDLEY_CONST_CAST
+#undef JSON_HEDLEY_CPP_CAST
+#undef JSON_HEDLEY_CRAY_VERSION
+#undef JSON_HEDLEY_CRAY_VERSION_CHECK
+#undef JSON_HEDLEY_C_DECL
+#undef JSON_HEDLEY_DEPRECATED
+#undef JSON_HEDLEY_DEPRECATED_FOR
+#undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL
+#undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_
+#undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED
+#undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES
+#undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS
+#undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION
+#undef JSON_HEDLEY_DIAGNOSTIC_POP
+#undef JSON_HEDLEY_DIAGNOSTIC_PUSH
+#undef JSON_HEDLEY_DMC_VERSION
+#undef JSON_HEDLEY_DMC_VERSION_CHECK
+#undef JSON_HEDLEY_EMPTY_BASES
+#undef JSON_HEDLEY_EMSCRIPTEN_VERSION
+#undef JSON_HEDLEY_EMSCRIPTEN_VERSION_CHECK
+#undef JSON_HEDLEY_END_C_DECLS
+#undef JSON_HEDLEY_FLAGS
+#undef JSON_HEDLEY_FLAGS_CAST
+#undef JSON_HEDLEY_GCC_HAS_ATTRIBUTE
+#undef JSON_HEDLEY_GCC_HAS_BUILTIN
+#undef JSON_HEDLEY_GCC_HAS_CPP_ATTRIBUTE
+#undef JSON_HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE
+#undef JSON_HEDLEY_GCC_HAS_EXTENSION
+#undef JSON_HEDLEY_GCC_HAS_FEATURE
+#undef JSON_HEDLEY_GCC_HAS_WARNING
+#undef JSON_HEDLEY_GCC_NOT_CLANG_VERSION_CHECK
+#undef JSON_HEDLEY_GCC_VERSION
+#undef JSON_HEDLEY_GCC_VERSION_CHECK
+#undef JSON_HEDLEY_GNUC_HAS_ATTRIBUTE
+#undef JSON_HEDLEY_GNUC_HAS_BUILTIN
+#undef JSON_HEDLEY_GNUC_HAS_CPP_ATTRIBUTE
+#undef JSON_HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE
+#undef JSON_HEDLEY_GNUC_HAS_EXTENSION
+#undef JSON_HEDLEY_GNUC_HAS_FEATURE
+#undef JSON_HEDLEY_GNUC_HAS_WARNING
+#undef JSON_HEDLEY_GNUC_VERSION
+#undef JSON_HEDLEY_GNUC_VERSION_CHECK
+#undef JSON_HEDLEY_HAS_ATTRIBUTE
+#undef JSON_HEDLEY_HAS_BUILTIN
+#undef JSON_HEDLEY_HAS_CPP_ATTRIBUTE
+#undef JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS
+#undef JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE
+#undef JSON_HEDLEY_HAS_EXTENSION
+#undef JSON_HEDLEY_HAS_FEATURE
+#undef JSON_HEDLEY_HAS_WARNING
+#undef JSON_HEDLEY_IAR_VERSION
+#undef JSON_HEDLEY_IAR_VERSION_CHECK
+#undef JSON_HEDLEY_IBM_VERSION
+#undef JSON_HEDLEY_IBM_VERSION_CHECK
+#undef JSON_HEDLEY_IMPORT
+#undef JSON_HEDLEY_INLINE
+#undef JSON_HEDLEY_INTEL_CL_VERSION
+#undef JSON_HEDLEY_INTEL_CL_VERSION_CHECK
+#undef JSON_HEDLEY_INTEL_VERSION
+#undef JSON_HEDLEY_INTEL_VERSION_CHECK
+#undef JSON_HEDLEY_IS_CONSTANT
+#undef JSON_HEDLEY_IS_CONSTEXPR_
+#undef JSON_HEDLEY_LIKELY
+#undef JSON_HEDLEY_MALLOC
+#undef JSON_HEDLEY_MCST_LCC_VERSION
+#undef JSON_HEDLEY_MCST_LCC_VERSION_CHECK
+#undef JSON_HEDLEY_MESSAGE
+#undef JSON_HEDLEY_MSVC_VERSION
+#undef JSON_HEDLEY_MSVC_VERSION_CHECK
+#undef JSON_HEDLEY_NEVER_INLINE
+#undef JSON_HEDLEY_NON_NULL
+#undef JSON_HEDLEY_NO_ESCAPE
+#undef JSON_HEDLEY_NO_RETURN
+#undef JSON_HEDLEY_NO_THROW
+#undef JSON_HEDLEY_NULL
+#undef JSON_HEDLEY_PELLES_VERSION
+#undef JSON_HEDLEY_PELLES_VERSION_CHECK
+#undef JSON_HEDLEY_PGI_VERSION
+#undef JSON_HEDLEY_PGI_VERSION_CHECK
+#undef JSON_HEDLEY_PREDICT
+#undef JSON_HEDLEY_PRINTF_FORMAT
+#undef JSON_HEDLEY_PRIVATE
+#undef JSON_HEDLEY_PUBLIC
+#undef JSON_HEDLEY_PURE
+#undef JSON_HEDLEY_REINTERPRET_CAST
+#undef JSON_HEDLEY_REQUIRE
+#undef JSON_HEDLEY_REQUIRE_CONSTEXPR
+#undef JSON_HEDLEY_REQUIRE_MSG
+#undef JSON_HEDLEY_RESTRICT
+#undef JSON_HEDLEY_RETURNS_NON_NULL
+#undef JSON_HEDLEY_SENTINEL
+#undef JSON_HEDLEY_STATIC_ASSERT
+#undef JSON_HEDLEY_STATIC_CAST
+#undef JSON_HEDLEY_STRINGIFY
+#undef JSON_HEDLEY_STRINGIFY_EX
+#undef JSON_HEDLEY_SUNPRO_VERSION
+#undef JSON_HEDLEY_SUNPRO_VERSION_CHECK
+#undef JSON_HEDLEY_TINYC_VERSION
+#undef JSON_HEDLEY_TINYC_VERSION_CHECK
+#undef JSON_HEDLEY_TI_ARMCL_VERSION
+#undef JSON_HEDLEY_TI_ARMCL_VERSION_CHECK
+#undef JSON_HEDLEY_TI_CL2000_VERSION
+#undef JSON_HEDLEY_TI_CL2000_VERSION_CHECK
+#undef JSON_HEDLEY_TI_CL430_VERSION
+#undef JSON_HEDLEY_TI_CL430_VERSION_CHECK
+#undef JSON_HEDLEY_TI_CL6X_VERSION
+#undef JSON_HEDLEY_TI_CL6X_VERSION_CHECK
+#undef JSON_HEDLEY_TI_CL7X_VERSION
+#undef JSON_HEDLEY_TI_CL7X_VERSION_CHECK
+#undef JSON_HEDLEY_TI_CLPRU_VERSION
+#undef JSON_HEDLEY_TI_CLPRU_VERSION_CHECK
+#undef JSON_HEDLEY_TI_VERSION
+#undef JSON_HEDLEY_TI_VERSION_CHECK
+#undef JSON_HEDLEY_UNAVAILABLE
+#undef JSON_HEDLEY_UNLIKELY
+#undef JSON_HEDLEY_UNPREDICTABLE
+#undef JSON_HEDLEY_UNREACHABLE
+#undef JSON_HEDLEY_UNREACHABLE_RETURN
+#undef JSON_HEDLEY_VERSION
+#undef JSON_HEDLEY_VERSION_DECODE_MAJOR
+#undef JSON_HEDLEY_VERSION_DECODE_MINOR
+#undef JSON_HEDLEY_VERSION_DECODE_REVISION
+#undef JSON_HEDLEY_VERSION_ENCODE
+#undef JSON_HEDLEY_WARNING
+#undef JSON_HEDLEY_WARN_UNUSED_RESULT
+#undef JSON_HEDLEY_WARN_UNUSED_RESULT_MSG
+#undef JSON_HEDLEY_FALL_THROUGH
+
+
+
+#endif  // INCLUDE_NLOHMANN_JSON_HPP_
diff --git a/src/efm-qlog/model/qlog-types.cc b/src/efm-qlog/model/qlog-types.cc
new file mode 100644
index 000000000..290efc597
--- /dev/null
+++ b/src/efm-qlog/model/qlog-types.cc
@@ -0,0 +1,189 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+
+#include "qlog-types.h"
+
+#include <iostream>
+
+namespace ns3 {
+
+namespace qlog {
+
+std::string
+TimeFormatToString (TimeFormat timeFormat)
+{
+  switch (timeFormat)
+    {
+    case ABSOLUTE:
+      return "absolute";
+    case DELTA:
+      return "delta";
+    case RELATIVE:
+      return "relative";
+    default:
+      return "error";
+    }
+}
+
+std::string
+VantagePointTypeToString (VantagePointType vantagePointType)
+{
+  switch (vantagePointType)
+    {
+    case CLIENT:
+      return "client";
+    case SERVER:
+      return "server";
+    case NETWORK:
+      return "network";
+    case UNKNOWN:
+    default:
+      return "unknown";
+    }
+}
+
+json
+QlogFile::ToJson () const
+{
+  json j = json::object ();
+  j["qlog_version"] = qlog_version;
+  if (qlog_format)
+    j["qlog_format"] = *qlog_format;
+  if (title)
+    j["title"] = *title;
+  if (description)
+    j["description"] = *description;
+  if (summary)
+    j["summary"] = summary->ToJson ();
+
+  if (traces)
+    {
+      j["traces"] = json::array ();
+      for (std::vector<std::shared_ptr<Trace>>::const_iterator iter = traces->begin ();
+           iter != traces->end (); iter++)
+        {
+          j["traces"].push_back ((*iter)->ToJson ());
+        }
+    }
+  return j;
+}
+
+json
+Trace::ToJson () const
+{
+  json j = json::object ();
+  if (title)
+    j["title"] = *title;
+  if (description)
+    j["description"] = *description;
+  if (configuration)
+    j["configuration"] = configuration->ToJson ();
+  if (common_fields)
+    j["common_fields"] = common_fields->ToJson ();
+  if (vantage_point)
+    j["vantage_point"] = vantage_point->ToJson ();
+
+  j["events"] = json::array ();
+  for (std::vector<std::unique_ptr<Event>>::const_iterator iter = events.begin ();
+       iter != events.end (); iter++)
+    {
+      j["events"].push_back ((*iter)->ToJson ());
+    }
+  return j;
+}
+
+bool
+Trace::empty () const
+{
+  return events.empty ();
+}
+
+json
+Summary::ToJson () const
+{
+  json j = json::object ();
+  return j;
+}
+
+json
+GroupID::ToJson () const
+{
+  json j = json::object ();
+  return j;
+}
+
+json
+EventData::ToJson () const
+{
+  json j = json::object ();
+  return j;
+}
+
+json
+Event::ToJson () const
+{
+  json j = json::object ();
+  j["name"] = name;
+  j["time"] = time;
+  if (data)
+    j["data"] = data->ToJson ();
+  if (time_format)
+    j["time_format"] = TimeFormatToString (*time_format);
+  if (protocol_type)
+    {
+      j["protocol_type"] = json::array ();
+      for (std::vector<std::string>::const_iterator iter = protocol_type->begin ();
+           iter != protocol_type->end (); iter++)
+        {
+          j["protocol_type"].push_back (*iter);
+        }
+    }
+  if (group_id)
+    j["group_id"] = group_id->ToJson ();
+  return j;
+}
+
+json
+VantagePoint::ToJson () const
+{
+  json j = json::object ();
+  if (name)
+    j["name"] = *name;
+  j["type"] = VantagePointTypeToString (type);
+  if (flow)
+    j["flow"] = VantagePointTypeToString (*flow);
+  return j;
+}
+
+json
+CommonFields::ToJson () const
+{
+  json j = json::object ();
+  if (time_format)
+    j["time_format"] = TimeFormatToString (*time_format);
+  if (reference_time)
+    j["reference_time"] = *reference_time;
+  if (group_id)
+    j["group_id"] = group_id->ToJson ();
+
+  if (protocol_type)
+    {
+      j["protocol_type"] = json::array ();
+      for (std::vector<std::string>::const_iterator iter = protocol_type->begin ();
+           iter != protocol_type->end (); iter++)
+        {
+          j["protocol_type"].push_back (*iter);
+        }
+    }
+  return j;
+}
+
+json
+Configuration::ToJson () const
+{
+  json j = json::object ();
+  return j;
+}
+
+} //namespace qlog
+
+} //namespace ns3
diff --git a/src/efm-qlog/model/qlog-types.h b/src/efm-qlog/model/qlog-types.h
new file mode 100644
index 000000000..4fc20efdb
--- /dev/null
+++ b/src/efm-qlog/model/qlog-types.h
@@ -0,0 +1,146 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+
+//Based on https://datatracker.ietf.org/doc/html/draft-ietf-quic-qlog-main-schema
+
+#ifndef QLOG_TYPES_H
+#define QLOG_TYPES_H
+
+#include <stdint.h>
+#include <string>
+#include <vector>
+#include <optional>
+#include <memory>
+
+#include "ns3/json.h"
+using json = nlohmann::json;
+
+namespace ns3 {
+
+struct JsonConvertable
+{
+  virtual ~JsonConvertable () = default;
+  virtual json ToJson () const = 0;
+};
+
+namespace qlog {
+
+enum TimeFormat { ABSOLUTE, DELTA, RELATIVE };
+
+std::string TimeFormatToString (TimeFormat timeFormat);
+
+struct GroupID : JsonConvertable
+{
+  virtual ~GroupID () = default;
+  virtual json ToJson () const;
+};
+
+struct EventData : JsonConvertable
+{
+  virtual ~EventData () = default;
+  virtual json ToJson () const;
+};
+
+struct Event : JsonConvertable
+{
+  Event (double time, std::string name, std::unique_ptr<EventData> data)
+      : time (time), name (name), data (std::move (data))
+  {
+  }
+  Event (double time, std::string name, std::unique_ptr<EventData> data,
+         std::unique_ptr<GroupID> group_id)
+      : time (time), name (name), data (std::move (data)), group_id (std::move (group_id))
+  {
+  }
+  virtual ~Event () = default;
+  double time;
+  std::string name;
+  std::unique_ptr<EventData> data;
+  std::optional<TimeFormat> time_format;
+  std::optional<std::vector<std::string>> protocol_type;
+  std::unique_ptr<GroupID> group_id;
+
+  virtual json ToJson () const;
+};
+
+enum VantagePointType { CLIENT, SERVER, NETWORK, UNKNOWN };
+
+std::string VantagePointTypeToString (VantagePointType vantagePointType);
+
+struct VantagePoint
+{
+  VantagePoint (VantagePointType type) : type (type)
+  {
+  }
+  std::optional<std::string> name;
+  VantagePointType type;
+  std::optional<VantagePointType> flow;
+
+  virtual json ToJson () const;
+};
+
+struct CommonFields : JsonConvertable
+{
+  CommonFields () = default;
+  std::optional<TimeFormat> time_format;
+  std::optional<double> reference_time;
+  std::optional<std::vector<std::string>> protocol_type;
+  std::unique_ptr<GroupID> group_id;
+
+  virtual json ToJson () const;
+};
+
+struct Configuration : JsonConvertable
+{
+  virtual json ToJson () const;
+};
+
+struct Trace : JsonConvertable
+{
+  Trace () = default;
+  std::optional<std::string> title;
+  std::optional<std::string> description;
+  std::unique_ptr<Configuration> configuration;
+  std::unique_ptr<CommonFields> common_fields;
+  std::unique_ptr<VantagePoint> vantage_point;
+  std::vector<std::unique_ptr<Event>> events;
+
+  virtual json ToJson () const;
+
+  bool empty () const;
+  uint32_t
+  GetEventCount () const
+  {
+    return events.size ();
+  }
+
+  void
+  Clear ()
+  {
+    events.clear ();
+  }
+};
+
+struct Summary : JsonConvertable
+{
+  virtual json ToJson () const;
+};
+
+struct QlogFile : JsonConvertable
+{
+  QlogFile (std::string qlog_version = "0.3") : qlog_version (qlog_version)
+  {
+  }
+  std::string qlog_version;
+  std::optional<std::string> qlog_format;
+  std::optional<std::string> title;
+  std::optional<std::string> description;
+  std::shared_ptr<Summary> summary;
+  std::optional<std::vector<std::shared_ptr<Trace>>> traces;
+  virtual json ToJson () const;
+};
+
+}; // namespace qlog
+
+} // namespace ns3
+
+#endif /* QLOG_TYPES_H */
diff --git a/src/efm-qlog/test/efm-qlog-test-suite.cc b/src/efm-qlog/test/efm-qlog-test-suite.cc
new file mode 100644
index 000000000..03f101820
--- /dev/null
+++ b/src/efm-qlog/test/efm-qlog-test-suite.cc
@@ -0,0 +1,68 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+
+// Include a header file from your module to test.
+#include "ns3/efm-qlog.h"
+
+// An essential include is test.h
+#include "ns3/test.h"
+
+// Do not put your test classes in namespace ns3.  You may find it useful
+// to use the using directive to access the ns3 namespace directly
+using namespace ns3;
+
+// This is an example TestCase.
+class EfmQlogTestCase1 : public TestCase
+{
+public:
+  EfmQlogTestCase1 ();
+  virtual ~EfmQlogTestCase1 ();
+
+private:
+  virtual void DoRun (void);
+};
+
+// Add some help text to this case to describe what it is intended to test
+EfmQlogTestCase1::EfmQlogTestCase1 ()
+  : TestCase ("EfmQlog test case (does nothing)")
+{
+}
+
+// This destructor does nothing but we include it as a reminder that
+// the test case should clean up after itself
+EfmQlogTestCase1::~EfmQlogTestCase1 ()
+{
+}
+
+//
+// This method is the pure virtual method from class TestCase that every
+// TestCase must implement
+//
+void
+EfmQlogTestCase1::DoRun (void)
+{
+  // A wide variety of test macros are available in src/core/test.h
+  NS_TEST_ASSERT_MSG_EQ (true, true, "true doesn't equal true for some reason");
+  // Use this one for floating point comparisons
+  NS_TEST_ASSERT_MSG_EQ_TOL (0.01, 0.01, 0.001, "Numbers are not equal within tolerance");
+}
+
+// The TestSuite class names the TestSuite, identifies what type of TestSuite,
+// and enables the TestCases to be run.  Typically, only the constructor for
+// this class must be defined
+//
+class EfmQlogTestSuite : public TestSuite
+{
+public:
+  EfmQlogTestSuite ();
+};
+
+EfmQlogTestSuite::EfmQlogTestSuite ()
+  : TestSuite ("efm-qlog", UNIT)
+{
+  // TestDuration for TestCase can be QUICK, EXTENSIVE or TAKES_FOREVER
+  AddTestCase (new EfmQlogTestCase1, TestCase::QUICK);
+}
+
+// Do not forget to allocate an instance of this TestSuite
+static EfmQlogTestSuite sefmQlogTestSuite;
+
diff --git a/src/internet/model/tcp-socket-base.cc b/src/internet/model/tcp-socket-base.cc
index 9edcb1686..9e0da430a 100644
--- a/src/internet/model/tcp-socket-base.cc
+++ b/src/internet/model/tcp-socket-base.cc
@@ -63,6 +63,7 @@
 #include <math.h>
 #include <algorithm>
 
+
 namespace ns3 {
 
 NS_LOG_COMPONENT_DEFINE ("TcpSocketBase");
@@ -237,6 +238,10 @@ TcpSocketBase::GetTypeId (void)
                      "Sequence of last received CWR",
                      MakeTraceSourceAccessor (&TcpSocketBase::m_ecnCWRSeq),
                      "ns3::SequenceNumber32TracedValueCallback")
+    .AddTraceSource ("PacketsLost",
+                     "Classify packets as lost",
+                     MakeTraceSourceAccessor (&TcpSocketBase::m_pxLstTrace),
+                     "ns3::TcpSocketBase::TcpPxLstTracedCallback")
   ;
   return tid;
 }
@@ -353,6 +358,7 @@ TcpSocketBase::TcpSocketBase (const TcpSocketBase& sock)
     m_isFirstPartialAck (sock.m_isFirstPartialAck),
     m_txTrace (sock.m_txTrace),
     m_rxTrace (sock.m_rxTrace),
+    m_pxLstTrace (sock.m_pxLstTrace),
     m_pacingTimer (Timer::CANCEL_ON_DESTROY),
     m_ecnEchoSeq (sock.m_ecnEchoSeq),
     m_ecnCESeq (sock.m_ecnCESeq),
@@ -1865,6 +1871,13 @@ TcpSocketBase::ReceivedAck (Ptr<Packet> packet, const TcpHeader& tcpHeader)
       auto rateConn = m_rateOps->GetConnectionRate ();
       m_congestionControl->CongControl(m_tcb, rateConn, rateSample);
     }
+  
+  //Trigger loss trace
+  int32_t recLostSegs = m_txBuffer->GetAndResetRecLostSegs();
+  if (recLostSegs != 0){
+    NS_LOG_DEBUG("TCP loss update: " << recLostSegs);
+    m_pxLstTrace(recLostSegs, this);
+  }
 
   // If there is any data piggybacked, store it into m_rxBuffer
   if (packet->GetSize () > 0)
@@ -2764,7 +2777,6 @@ TcpSocketBase::SendEmptyPacket (uint8_t flags)
         }
       NS_LOG_INFO ("Sending a pure ACK, acking seq " << m_tcb->m_rxBuffer->NextRxSequence ());
     }
-
   m_txTrace (p, header, this);
 
   if (m_endPoint != nullptr)
@@ -3128,7 +3140,7 @@ TcpSocketBase::SendDataPacket (SequenceNumber32 seq, uint32_t maxSize, bool with
                     (Simulator::Now () + m_rto.Get ()).GetSeconds () );
       m_retxEvent = Simulator::Schedule (m_rto, &TcpSocketBase::ReTxTimeout, this);
     }
-
+  
   m_txTrace (p, header, this);
 
   if (m_endPoint)
@@ -3209,7 +3221,6 @@ TcpSocketBase::SendPendingData (bool withAck)
 
   uint32_t nPacketsSent = 0;
   uint32_t availableWindow = AvailableWindow ();
-
   // RFC 6675, Section (C)
   // If cwnd - pipe >= 1 SMSS, the sender SHOULD transmit one or more
   // segments as follows:
@@ -3419,8 +3430,10 @@ TcpSocketBase::AdvertisedWindowSize (bool scale) const
     }
   if (w > m_maxWinSize)
     {
+      //This is supposed to happen if scaling is disabled and the receive buffer size is greater than 65535
+      //It usually happens at the start of a connection, since SYN segments are not allowed to use scaling per RFC7323
       w = m_maxWinSize;
-      NS_LOG_WARN ("Adv window size truncated to " << m_maxWinSize << "; possibly to avoid overflow of the 16-bit integer");
+      NS_LOG_DEBUG ("Adv window size truncated to " << m_maxWinSize << "; possibly to avoid overflow of the 16-bit integer");
     }
   NS_LOG_LOGIC ("Returning AdvertisedWindowSize of " << static_cast<uint16_t> (w));
   return static_cast<uint16_t> (w);
diff --git a/src/internet/model/tcp-socket-base.h b/src/internet/model/tcp-socket-base.h
index 5dd2c9d03..b8d3b1cc3 100644
--- a/src/internet/model/tcp-socket-base.h
+++ b/src/internet/model/tcp-socket-base.h
@@ -604,6 +604,15 @@ public:
   typedef void (* TcpTxRxTracedCallback)(const Ptr<const Packet> packet, const TcpHeader& header,
                                          const Ptr<const TcpSocketBase> socket);
 
+  /**
+   * \brief TracedCallback signature for TCP packet loss event detection.
+   *
+   * \param [in] packetsLost The number of packets newly considered lost
+   * \param [in] socket This socket
+   * 
+   */
+  typedef void (*TcpPxLstTracedCallback)(int32_t packetsLost, const Ptr<const TcpSocketBase> socket);
+
 protected:
   // Implementing ns3::TcpSocket -- Attribute get/set
   // inherited, no need to doc
@@ -1340,6 +1349,8 @@ protected:
   TracedCallback<Ptr<const Packet>, const TcpHeader&,
                  Ptr<const TcpSocketBase> > m_rxTrace; //!< Trace of received packets
 
+  TracedCallback<int32_t, Ptr<const TcpSocketBase>> m_pxLstTrace; //!< Trace of lost packets
+
   // Pacing related variable
   Timer m_pacingTimer {Timer::CANCEL_ON_DESTROY}; //!< Pacing Event
 
diff --git a/src/internet/model/tcp-tx-buffer.cc b/src/internet/model/tcp-tx-buffer.cc
index 0041b4ae5..34ce80c5e 100644
--- a/src/internet/model/tcp-tx-buffer.cc
+++ b/src/internet/model/tcp-tx-buffer.cc
@@ -825,6 +825,7 @@ TcpTxBuffer::Update (const TcpOptionSack::SackList &list,
                     {
                       (*item_it)->m_lost = false;
                       m_lostOut -= (*item_it)->m_packet->GetSize ();
+                      m_recLostSegs--;
                     }
 
                   (*item_it)->m_sacked = true;
@@ -880,6 +881,7 @@ void
 TcpTxBuffer::UpdateLostCount ()
 {
   NS_LOG_FUNCTION (this);
+  
   uint32_t sacked = 0;
   SequenceNumber32 beginOfCurrentPacket = m_highestSack.second;
   if (m_highestSack.first == m_sentList.end ())
@@ -907,6 +909,7 @@ TcpTxBuffer::UpdateLostCount ()
             {
               item->m_lost = true;
               m_lostOut += item->m_packet->GetSize ();
+              m_recLostSegs++;
             }
         }
       beginOfCurrentPacket -= item->m_packet->GetSize ();
@@ -919,10 +922,12 @@ TcpTxBuffer::UpdateLostCount ()
         {
           item->m_lost = true;
           m_lostOut += item->m_packet->GetSize ();
+          m_recLostSegs++;
         }
     }
   NS_LOG_INFO ("Status after the update: " << *this);
   ConsistencyCheck ();
+
 }
 
 bool
@@ -1280,7 +1285,6 @@ TcpTxBuffer::SetSentListLost (bool resetSack)
 {
   NS_LOG_FUNCTION (this);
   m_retrans = 0;
-
   if (resetSack)
     {
       m_sackedOut = 0;
@@ -1296,6 +1300,8 @@ TcpTxBuffer::SetSentListLost (bool resetSack)
     {
       if (resetSack)
         {
+          if (! (*it)->m_lost)
+            m_recLostSegs++;
           (*it)->m_sacked = false;
           (*it)->m_lost = true;
         }
@@ -1311,6 +1317,7 @@ TcpTxBuffer::SetSentListLost (bool resetSack)
               // Packet is not marked lost, nor is sacked. Then it becomes lost.
               (*it)->m_lost = true;
               m_lostOut += (*it)->m_packet->GetSize ();
+              m_recLostSegs++;
             }
         }
 
@@ -1377,6 +1384,7 @@ TcpTxBuffer::MarkHeadAsLost ()
         {
           m_sentList.front()->m_lost = true;
           m_lostOut += m_sentList.front ()->m_packet->GetSize ();
+          m_recLostSegs++;
         }
     }
   ConsistencyCheck ();
@@ -1462,6 +1470,14 @@ TcpTxBuffer::ConsistencyCheck () const
                  " stored retrans: " << m_retrans);
 }
 
+int32_t
+TcpTxBuffer::GetAndResetRecLostSegs ()
+{
+  int32_t tmp = m_recLostSegs;
+  m_recLostSegs = 0;
+  return tmp;
+}
+
 std::ostream &
 operator<< (std::ostream & os, TcpTxItem const & item)
 {
@@ -1506,4 +1522,7 @@ operator<< (std::ostream & os, TcpTxBuffer const & tcpTxBuf)
   return os;
 }
 
+
+
+
 } // namespace ns3
diff --git a/src/internet/model/tcp-tx-buffer.h b/src/internet/model/tcp-tx-buffer.h
index 18f580cf6..df5e314e0 100644
--- a/src/internet/model/tcp-tx-buffer.h
+++ b/src/internet/model/tcp-tx-buffer.h
@@ -407,6 +407,9 @@ public:
    */
   void SetRWndCallback (Callback<uint32_t> rWndCallback);
 
+
+  int32_t GetAndResetRecLostSegs ();
+
 private:
   friend std::ostream & operator<< (std::ostream & os, TcpTxBuffer const & tcpTxBuf);
 
@@ -619,6 +622,8 @@ private:
   bool     m_renoSack {false}; //!< Indicates if AddRenoSack was called
   bool     m_sackEnabled {true}; //!< Indicates if SACK is enabled on this connection
 
+  int32_t m_recLostSegs {0}; //!< Number of recently lost segments, used for TCP socket pxLstTrace
+
   static Callback<void, TcpTxItem *> m_nullCb; //!< Null callback for an item
 };
 
diff --git a/src/network/model/application.cc b/src/network/model/application.cc
index 415fac04f..fb3a52c2d 100644
--- a/src/network/model/application.cc
+++ b/src/network/model/application.cc
@@ -49,6 +49,9 @@ Application::GetTypeId (void)
                    TimeValue (TimeStep (0)),
                    MakeTimeAccessor (&Application::m_stopTime),
                    MakeTimeChecker ())
+    .AddTraceSource ("SocketCreation", "New socket created",
+                     MakeTraceSourceAccessor(&Application::m_scktCrtTrace),
+                     "ns3::Application::SocketCreationCallback")
   ;
   return tid;
 }
@@ -126,6 +129,11 @@ void Application::StopApplication ()
   NS_LOG_FUNCTION (this);
 }
 
+void Application::NotifySocketCreation (const Ptr<Socket> socket)
+{
+  m_scktCrtTrace(socket);
+}
+
 } // namespace ns3
 
 
diff --git a/src/network/model/application.h b/src/network/model/application.h
index 33d314dc5..0acfdc57d 100644
--- a/src/network/model/application.h
+++ b/src/network/model/application.h
@@ -26,6 +26,8 @@
 #include "ns3/object.h"
 #include "ns3/ptr.h"
 #include "ns3/node.h"
+#include "ns3/socket.h"
+#include "ns3/traced-callback.h"
 
 namespace ns3 {
 
@@ -123,6 +125,13 @@ public:
   typedef void (*StateTransitionCallback)(const std::string &oldState,
                                           const std::string &newState);
 
+  /**
+   * \brief TracedCallback signature for socket creation events.
+   *
+   * \param socket The newly created socket
+   */
+  typedef void (*SocketCreationCallback)(const Ptr<Socket> socket);
+
 private:
   /**
    * \brief Application specific startup code
@@ -145,6 +154,12 @@ protected:
   virtual void DoDispose (void);
   virtual void DoInitialize (void);
 
+  /// \brief Called by applications when creating a new socket
+  /// \param socket The newly created socket
+  virtual void NotifySocketCreation(const Ptr<Socket> socket);
+
+  TracedCallback<Ptr<Socket>> m_scktCrtTrace; //!< Trace of socket creation
+
   Ptr<Node>       m_node;   //!< The node that this application is installed on
   Time m_startTime;         //!< The simulation time that the application will start
   Time m_stopTime;          //!< The simulation time that the application will end
diff --git a/src/network/utils/bit-deserializer.h b/src/network/utils/bit-deserializer.h
index bed63994d..4ec0621b9 100644
--- a/src/network/utils/bit-deserializer.h
+++ b/src/network/utils/bit-deserializer.h
@@ -21,8 +21,9 @@
 #ifndef BITDESERIALIZER_H_
 #define BITDESERIALIZER_H_
 
-#include <vector>
+#include <cstdint>
 #include <deque>
+#include <vector>
 
 namespace ns3 {
 
diff --git a/src/network/utils/bit-serializer.h b/src/network/utils/bit-serializer.h
index acaf1feaf..c41fe1dea 100644
--- a/src/network/utils/bit-serializer.h
+++ b/src/network/utils/bit-serializer.h
@@ -21,6 +21,7 @@
 #ifndef BITSERIALIZER_H_
 #define BITSERIALIZER_H_
 
+#include <cstdint>
 #include <vector>
 
 namespace ns3 {
diff --git a/src/quic/.github/workflows/main.yml b/src/quic/.github/workflows/main.yml
new file mode 100644
index 000000000..123e7a1fc
--- /dev/null
+++ b/src/quic/.github/workflows/main.yml
@@ -0,0 +1,42 @@
+# This is a basic workflow to help you get started with Actions
+
+name: CI
+
+# Controls when the action will run. Triggers the workflow on push or pull request
+# events but only for the master branch
+on:
+  push:
+    branches: [ master ]
+  pull_request:
+    branches: [ master ]
+
+# A workflow run is made up of one or more jobs that can run sequentially or in parallel
+jobs:
+  # This workflow contains a single job called "build"
+  build:
+    # The type of runner that the job will run on
+    runs-on: self-hosted
+
+    # Steps represent a sequence of tasks that will be executed as part of the job
+    steps:
+    - uses: actions/checkout@v2
+      with:
+        repository: 'nsnam/ns-3-dev-git'
+        ref: 'master'
+
+    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
+    - uses: actions/checkout@v2
+      with:
+       path: 'src/quic' 
+    
+    - name: check that quic is correctly installed
+      run: ls src/ | grep quic
+
+    - name: enable only quic
+      run: printf "#! /usr/bin/env python \n modules_enabled = ['quic', 'applications']" > .ns3rc
+      
+    - name: build and run the tests
+      run: ./waf configure --enable-examples --enable-tests && ./waf build && ./test.py
+      
+    - name: build and run the tests with optimized build
+      run: ./waf configure --enable-examples --enable-tests --build-profile=optimized && ./waf build && ./test.py
diff --git a/src/quic/CMakeLists.txt b/src/quic/CMakeLists.txt
new file mode 100644
index 000000000..d6505b8b5
--- /dev/null
+++ b/src/quic/CMakeLists.txt
@@ -0,0 +1,71 @@
+check_include_file_cxx(stdint.h HAVE_STDINT_H)
+if(HAVE_STDINT_H)
+    add_definitions(-DHAVE_STDINT_H)
+endif()
+
+set(examples_as_tests_sources)
+if(${ENABLE_EXAMPLES})
+    set(examples_as_tests_sources
+        #test/quic-test-examples-test-suite.cc
+        )
+endif()
+
+set(source_files
+    model/quic-congestion-ops.cc
+    model/quic-socket.cc
+    model/quic-socket-base.cc
+    model/quic-socket-factory.cc
+    model/quic-l4-protocol.cc
+    model/quic-socket-rx-buffer.cc
+    model/quic-socket-tx-buffer.cc
+    model/quic-socket-tx-scheduler.cc
+    model/quic-socket-tx-pfifo-scheduler.cc
+    model/quic-socket-tx-edf-scheduler.cc
+    model/quic-stream.cc
+    model/quic-stream-base.cc
+    model/quic-l5-protocol.cc
+    model/quic-stream-tx-buffer.cc
+    model/quic-stream-rx-buffer.cc
+    model/quic-header.cc
+    model/quic-subheader.cc
+    model/quic-transport-parameters.cc
+    model/quic-bbr.cc
+    helper/quic-helper.cc
+)
+
+set(header_files
+    model/quic-congestion-ops.h
+    model/quic-socket.h
+    model/quic-socket-base.h
+    model/quic-socket-factory.h
+    model/quic-l4-protocol.h
+    model/quic-socket-rx-buffer.h
+    model/quic-socket-tx-buffer.h
+    model/quic-socket-tx-scheduler.h
+    model/quic-socket-tx-pfifo-scheduler.h
+    model/quic-socket-tx-edf-scheduler.h
+    model/quic-stream.h
+    model/quic-stream-base.h
+    model/quic-l5-protocol.h
+    model/quic-stream-tx-buffer.h
+    model/quic-stream-rx-buffer.h
+    model/quic-header.h
+    model/quic-subheader.h
+    model/quic-transport-parameters.h
+    model/quic-bbr.h
+    helper/quic-helper.h
+    model/windowed-filter.h
+)
+
+build_lib(
+  LIBNAME quic
+  SOURCE_FILES ${source_files}
+  HEADER_FILES ${header_files}
+  LIBRARIES_TO_LINK ${libinternet}
+                    ${libapplications}
+  TEST_SOURCES
+    test/quic-rx-buffer-test.cc
+    test/quic-tx-buffer-test.cc
+    test/quic-header-test.cc
+)
+
diff --git a/src/quic/README.md b/src/quic/README.md
new file mode 100644
index 000000000..5ef597e45
--- /dev/null
+++ b/src/quic/README.md
@@ -0,0 +1,79 @@
+QUIC implementation for ns-3
+================================
+
+## QUIC code base
+This repository contains in the code for a native IETF QUIC implementation in ns-3.
+
+The implementation is described in [this paper](https://arxiv.org/abs/1902.06121).
+
+Please use this [issue tracker](https://github.com/signetlabdei/quic-ns-3/issues) for bugs/questions.
+
+## Install
+
+### Prerequisites ###
+
+To run simulations using this module, you will need to install ns-3, clone
+this repository inside the `src` directory, copy the QUIC applications from the quic-applications folder, and patch the `wscript` file of the applications module. 
+Required dependencies include git and a build environment.
+
+#### Installing dependencies ####
+
+Please refer to [the ns-3 wiki](https://www.nsnam.org/wiki/Installation) for instructions on how to set up your system to install ns-3.
+
+#### Downloading #####
+
+First, clone the main ns-3 repository:
+
+```bash
+git clone https://gitlab.com/nsnam/ns-3-dev ns-3-dev
+cd ns-3-dev/src
+```
+
+Then, clone the quic module:
+
+```bash
+git clone https://github.com/signetlabdei/quic quic
+```
+
+Thirdly, copy the QUIC applications and helpers to the applications module
+
+```bash
+cp src/quic/quic-applications/model/* src/applications/model/
+cp src/quic/quic-applications/helper/* src/applications/helper/
+```
+
+Finally, edit the `wscript` file of the applications module and add
+
+```python
+        'model/quic-echo-client.h',
+        'model/quic-echo-server.h',
+        'model/quic-client.h',
+        'model/quic-server.h',
+        'helper/quic-echo-helper.h',
+        'helper/quic-client-server-helper.h'
+```
+to the `headers.source` list and
+
+```python
+        'model/quic-echo-client.cc',
+        'model/quic-echo-server.cc',
+        'model/quic-client.cc',
+        'model/quic-server.cc',
+        'helper/quic-echo-helper.cc',
+        'helper/quic-client-server-helper.cc'
+```
+to the `module.source` list
+### Compilation ###
+
+Configure and build ns-3 from the `ns-3-dev` folder:
+
+```bash
+./waf configure --enable-tests --enable-examples
+./waf build
+```
+
+If you are not interested in using the Python bindings, use
+```bash
+./waf configure --enable-tests --enable-examples --disable-python
+./waf build
+```
diff --git a/src/quic/bindings/modulegen__gcc_ILP32.py b/src/quic/bindings/modulegen__gcc_ILP32.py
new file mode 100644
index 000000000..8e70815f2
--- /dev/null
+++ b/src/quic/bindings/modulegen__gcc_ILP32.py
@@ -0,0 +1,727 @@
+from pybindgen import Module, FileCodeSink, param, retval, cppclass, typehandlers
+
+
+import pybindgen.settings
+import warnings
+
+class ErrorHandler(pybindgen.settings.ErrorHandler):
+    def handle_error(self, wrapper, exception, traceback_):
+        warnings.warn("exception %r in wrapper %s" % (exception, wrapper))
+        return True
+pybindgen.settings.error_handler = ErrorHandler()
+
+
+import sys
+
+def module_init():
+    root_module = Module('ns.quic', cpp_namespace='::ns3')
+    return root_module
+
+def register_types(module):
+    root_module = module.get_root()
+    
+    ## address.h (module 'network'): ns3::Address [class]
+    module.add_class('Address', import_from_module='ns.network')
+    ## address.h (module 'network'): ns3::Address::MaxSize_e [enumeration]
+    module.add_enum('MaxSize_e', ['MAX_SIZE'], outer_class=root_module['ns3::Address'], import_from_module='ns.network')
+    ## trace-helper.h (module 'network'): ns3::AsciiTraceHelper [class]
+    module.add_class('AsciiTraceHelper', import_from_module='ns.network')
+    ## trace-helper.h (module 'network'): ns3::AsciiTraceHelperForDevice [class]
+    module.add_class('AsciiTraceHelperForDevice', allow_subclassing=True, import_from_module='ns.network')
+    ## internet-trace-helper.h (module 'internet'): ns3::AsciiTraceHelperForIpv4 [class]
+    module.add_class('AsciiTraceHelperForIpv4', allow_subclassing=True, import_from_module='ns.internet')
+    ## internet-trace-helper.h (module 'internet'): ns3::AsciiTraceHelperForIpv6 [class]
+    module.add_class('AsciiTraceHelperForIpv6', allow_subclassing=True, import_from_module='ns.internet')
+    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList [class]
+    module.add_class('AttributeConstructionList', import_from_module='ns.core')
+    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item [struct]
+    module.add_class('Item', import_from_module='ns.core', outer_class=root_module['ns3::AttributeConstructionList'])
+    typehandlers.add_type_alias(u'std::list< ns3::AttributeConstructionList::Item > const_iterator', u'ns3::AttributeConstructionList::CIterator')
+    typehandlers.add_type_alias(u'std::list< ns3::AttributeConstructionList::Item > const_iterator*', u'ns3::AttributeConstructionList::CIterator*')
+    typehandlers.add_type_alias(u'std::list< ns3::AttributeConstructionList::Item > const_iterator&', u'ns3::AttributeConstructionList::CIterator&')
+    ## buffer.h (module 'network'): ns3::Buffer [class]
+    module.add_class('Buffer', import_from_module='ns.network')
+    ## buffer.h (module 'network'): ns3::Buffer::Iterator [class]
+    module.add_class('Iterator', import_from_module='ns.network', outer_class=root_module['ns3::Buffer'])
+    ## packet.h (module 'network'): ns3::ByteTagIterator [class]
+    module.add_class('ByteTagIterator', import_from_module='ns.network')
+    ## packet.h (module 'network'): ns3::ByteTagIterator::Item [class]
+    module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::ByteTagIterator'])
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList [class]
+    module.add_class('ByteTagList', import_from_module='ns.network')
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator [class]
+    module.add_class('Iterator', import_from_module='ns.network', outer_class=root_module['ns3::ByteTagList'])
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item [struct]
+    module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::ByteTagList::Iterator'])
+    ## callback.h (module 'core'): ns3::CallbackBase [class]
+    module.add_class('CallbackBase', import_from_module='ns.core')
+    ## data-rate.h (module 'network'): ns3::DataRate [class]
+    module.add_class('DataRate', import_from_module='ns.network')
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeAccessor> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeAccessor'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeChecker> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeChecker'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeValue> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeValue'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::CallbackImplBase> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::CallbackImplBase'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::EventImpl> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::EventImpl'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Hash::Implementation> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::Hash::Implementation'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Ipv4Route> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::Ipv4Route'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::NixVector> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::NixVector'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::OutputStreamWrapper> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::OutputStreamWrapper'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Packet> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::Packet'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::TraceSourceAccessor> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::TraceSourceAccessor'])
+    ## event-id.h (module 'core'): ns3::EventId [class]
+    module.add_class('EventId', import_from_module='ns.core')
+    ## hash.h (module 'core'): ns3::Hasher [class]
+    module.add_class('Hasher', import_from_module='ns.core')
+    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress [class]
+    module.add_class('Inet6SocketAddress', import_from_module='ns.network')
+    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress [class]
+    root_module['ns3::Inet6SocketAddress'].implicitly_converts_to(root_module['ns3::Address'])
+    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress [class]
+    module.add_class('InetSocketAddress', import_from_module='ns.network')
+    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress [class]
+    root_module['ns3::InetSocketAddress'].implicitly_converts_to(root_module['ns3::Address'])
+    ## int-to-type.h (module 'core'): ns3::IntToType<0> [struct]
+    module.add_class('IntToType', import_from_module='ns.core', template_parameters=['0'])
+    ## int-to-type.h (module 'core'): ns3::IntToType<0>::v_e [enumeration]
+    module.add_enum('v_e', ['value'], outer_class=root_module['ns3::IntToType< 0 >'], import_from_module='ns.core')
+    ## int-to-type.h (module 'core'): ns3::IntToType<1> [struct]
+    module.add_class('IntToType', import_from_module='ns.core', template_parameters=['1'])
+    ## int-to-type.h (module 'core'): ns3::IntToType<1>::v_e [enumeration]
+    module.add_enum('v_e', ['value'], outer_class=root_module['ns3::IntToType< 1 >'], import_from_module='ns.core')
+    ## int-to-type.h (module 'core'): ns3::IntToType<2> [struct]
+    module.add_class('IntToType', import_from_module='ns.core', template_parameters=['2'])
+    ## int-to-type.h (module 'core'): ns3::IntToType<2>::v_e [enumeration]
+    module.add_enum('v_e', ['value'], outer_class=root_module['ns3::IntToType< 2 >'], import_from_module='ns.core')
+    ## int-to-type.h (module 'core'): ns3::IntToType<3> [struct]
+    module.add_class('IntToType', import_from_module='ns.core', template_parameters=['3'])
+    ## int-to-type.h (module 'core'): ns3::IntToType<3>::v_e [enumeration]
+    module.add_enum('v_e', ['value'], outer_class=root_module['ns3::IntToType< 3 >'], import_from_module='ns.core')
+    ## int-to-type.h (module 'core'): ns3::IntToType<4> [struct]
+    module.add_class('IntToType', import_from_module='ns.core', template_parameters=['4'])
+    ## int-to-type.h (module 'core'): ns3::IntToType<4>::v_e [enumeration]
+    module.add_enum('v_e', ['value'], outer_class=root_module['ns3::IntToType< 4 >'], import_from_module='ns.core')
+    ## int-to-type.h (module 'core'): ns3::IntToType<5> [struct]
+    module.add_class('IntToType', import_from_module='ns.core', template_parameters=['5'])
+    ## int-to-type.h (module 'core'): ns3::IntToType<5>::v_e [enumeration]
+    module.add_enum('v_e', ['value'], outer_class=root_module['ns3::IntToType< 5 >'], import_from_module='ns.core')
+    ## int-to-type.h (module 'core'): ns3::IntToType<6> [struct]
+    module.add_class('IntToType', import_from_module='ns.core', template_parameters=['6'])
+    ## int-to-type.h (module 'core'): ns3::IntToType<6>::v_e [enumeration]
+    module.add_enum('v_e', ['value'], outer_class=root_module['ns3::IntToType< 6 >'], import_from_module='ns.core')
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Address [class]
+    module.add_class('Ipv4Address', import_from_module='ns.network')
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Address [class]
+    root_module['ns3::Ipv4Address'].implicitly_converts_to(root_module['ns3::Address'])
+    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4InterfaceAddress [class]
+    module.add_class('Ipv4InterfaceAddress', import_from_module='ns.internet')
+    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e [enumeration]
+    module.add_enum('InterfaceAddressScope_e', ['HOST', 'LINK', 'GLOBAL'], outer_class=root_module['ns3::Ipv4InterfaceAddress'], import_from_module='ns.internet')
+    ## ipv4-interface-container.h (module 'internet'): ns3::Ipv4InterfaceContainer [class]
+    module.add_class('Ipv4InterfaceContainer', import_from_module='ns.internet')
+    typehandlers.add_type_alias(u'std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > const_iterator', u'ns3::Ipv4InterfaceContainer::Iterator')
+    typehandlers.add_type_alias(u'std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > const_iterator*', u'ns3::Ipv4InterfaceContainer::Iterator*')
+    typehandlers.add_type_alias(u'std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > const_iterator&', u'ns3::Ipv4InterfaceContainer::Iterator&')
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask [class]
+    module.add_class('Ipv4Mask', import_from_module='ns.network')
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Address [class]
+    module.add_class('Ipv6Address', import_from_module='ns.network')
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Address [class]
+    root_module['ns3::Ipv6Address'].implicitly_converts_to(root_module['ns3::Address'])
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress [class]
+    module.add_class('Ipv6InterfaceAddress', import_from_module='ns.internet')
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress::State_e [enumeration]
+    module.add_enum('State_e', ['TENTATIVE', 'DEPRECATED', 'PREFERRED', 'PERMANENT', 'HOMEADDRESS', 'TENTATIVE_OPTIMISTIC', 'INVALID'], outer_class=root_module['ns3::Ipv6InterfaceAddress'], import_from_module='ns.internet')
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress::Scope_e [enumeration]
+    module.add_enum('Scope_e', ['HOST', 'LINKLOCAL', 'GLOBAL'], outer_class=root_module['ns3::Ipv6InterfaceAddress'], import_from_module='ns.internet')
+    ## ipv6-interface-container.h (module 'internet'): ns3::Ipv6InterfaceContainer [class]
+    module.add_class('Ipv6InterfaceContainer', import_from_module='ns.internet')
+    typehandlers.add_type_alias(u'std::vector< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > > const_iterator', u'ns3::Ipv6InterfaceContainer::Iterator')
+    typehandlers.add_type_alias(u'std::vector< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > > const_iterator*', u'ns3::Ipv6InterfaceContainer::Iterator*')
+    typehandlers.add_type_alias(u'std::vector< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > > const_iterator&', u'ns3::Ipv6InterfaceContainer::Iterator&')
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix [class]
+    module.add_class('Ipv6Prefix', import_from_module='ns.network')
+    ## mac48-address.h (module 'network'): ns3::Mac48Address [class]
+    module.add_class('Mac48Address', import_from_module='ns.network')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Mac48Address )', u'ns3::Mac48Address::TracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Mac48Address )*', u'ns3::Mac48Address::TracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Mac48Address )&', u'ns3::Mac48Address::TracedCallback&')
+    ## mac48-address.h (module 'network'): ns3::Mac48Address [class]
+    root_module['ns3::Mac48Address'].implicitly_converts_to(root_module['ns3::Address'])
+    ## mac8-address.h (module 'network'): ns3::Mac8Address [class]
+    module.add_class('Mac8Address', import_from_module='ns.network')
+    ## mac8-address.h (module 'network'): ns3::Mac8Address [class]
+    root_module['ns3::Mac8Address'].implicitly_converts_to(root_module['ns3::Address'])
+    ## net-device-container.h (module 'network'): ns3::NetDeviceContainer [class]
+    module.add_class('NetDeviceContainer', import_from_module='ns.network')
+    typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator', u'ns3::NetDeviceContainer::Iterator')
+    typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator*', u'ns3::NetDeviceContainer::Iterator*')
+    typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator&', u'ns3::NetDeviceContainer::Iterator&')
+    ## node-container.h (module 'network'): ns3::NodeContainer [class]
+    module.add_class('NodeContainer', import_from_module='ns.network')
+    typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Node > > const_iterator', u'ns3::NodeContainer::Iterator')
+    typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Node > > const_iterator*', u'ns3::NodeContainer::Iterator*')
+    typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Node > > const_iterator&', u'ns3::NodeContainer::Iterator&')
+    ## object-base.h (module 'core'): ns3::ObjectBase [class]
+    module.add_class('ObjectBase', allow_subclassing=True, import_from_module='ns.core')
+    ## object.h (module 'core'): ns3::ObjectDeleter [struct]
+    module.add_class('ObjectDeleter', import_from_module='ns.core')
+    ## object-factory.h (module 'core'): ns3::ObjectFactory [class]
+    module.add_class('ObjectFactory', import_from_module='ns.core')
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata [class]
+    module.add_class('PacketMetadata', import_from_module='ns.network')
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item [struct]
+    module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::PacketMetadata'])
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::ItemType [enumeration]
+    module.add_enum('ItemType', ['PAYLOAD', 'HEADER', 'TRAILER'], outer_class=root_module['ns3::PacketMetadata::Item'], import_from_module='ns.network')
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator [class]
+    module.add_class('ItemIterator', import_from_module='ns.network', outer_class=root_module['ns3::PacketMetadata'])
+    ## packet.h (module 'network'): ns3::PacketTagIterator [class]
+    module.add_class('PacketTagIterator', import_from_module='ns.network')
+    ## packet.h (module 'network'): ns3::PacketTagIterator::Item [class]
+    module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::PacketTagIterator'])
+    ## packet-tag-list.h (module 'network'): ns3::PacketTagList [class]
+    module.add_class('PacketTagList', import_from_module='ns.network')
+    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData [struct]
+    module.add_class('TagData', import_from_module='ns.network', outer_class=root_module['ns3::PacketTagList'])
+    ## pcap-file.h (module 'network'): ns3::PcapFile [class]
+    module.add_class('PcapFile', import_from_module='ns.network')
+    ## trace-helper.h (module 'network'): ns3::PcapHelper [class]
+    module.add_class('PcapHelper', import_from_module='ns.network')
+    ## trace-helper.h (module 'network'): ns3::PcapHelper::DataLinkType [enumeration]
+    module.add_enum('DataLinkType', ['DLT_NULL', 'DLT_EN10MB', 'DLT_PPP', 'DLT_RAW', 'DLT_IEEE802_11', 'DLT_LINUX_SLL', 'DLT_PRISM_HEADER', 'DLT_IEEE802_11_RADIO', 'DLT_IEEE802_15_4', 'DLT_NETLINK'], outer_class=root_module['ns3::PcapHelper'], import_from_module='ns.network')
+    ## trace-helper.h (module 'network'): ns3::PcapHelperForDevice [class]
+    module.add_class('PcapHelperForDevice', allow_subclassing=True, import_from_module='ns.network')
+    ## internet-trace-helper.h (module 'internet'): ns3::PcapHelperForIpv4 [class]
+    module.add_class('PcapHelperForIpv4', allow_subclassing=True, import_from_module='ns.internet')
+    ## internet-trace-helper.h (module 'internet'): ns3::PcapHelperForIpv6 [class]
+    module.add_class('PcapHelperForIpv6', allow_subclassing=True, import_from_module='ns.internet')
+    ## quic-socket-rx-buffer.h (module 'quic'): ns3::QuicSocketRxItem [class]
+    module.add_class('QuicSocketRxItem')
+    ## quic-socket-tx-buffer.h (module 'quic'): ns3::QuicSocketTxItem [class]
+    module.add_class('QuicSocketTxItem')
+    ## quic-stream-rx-buffer.h (module 'quic'): ns3::QuicStreamRxItem [class]
+    module.add_class('QuicStreamRxItem')
+    ## quic-stream-tx-buffer.h (module 'quic'): ns3::QuicStreamTxItem [class]
+    module.add_class('QuicStreamTxItem')
+    ## tcp-socket-base.h (module 'internet'): ns3::RttHistory [class]
+    module.add_class('RttHistory', import_from_module='ns.internet')
+    ## sequence-number.h (module 'network'): ns3::SequenceNumber<unsigned int, int> [class]
+    module.add_class('SequenceNumber32', import_from_module='ns.network')
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Object', 'ns3::ObjectBase', 'ns3::ObjectDeleter'], parent=root_module['ns3::ObjectBase'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
+    ## simulator.h (module 'core'): ns3::Simulator [class]
+    module.add_class('Simulator', destructor_visibility='private', import_from_module='ns.core')
+    ## simulator.h (module 'core'): ns3::Simulator [enumeration]
+    module.add_enum('', ['NO_CONTEXT'], outer_class=root_module['ns3::Simulator'], import_from_module='ns.core')
+    ## tag.h (module 'network'): ns3::Tag [class]
+    module.add_class('Tag', import_from_module='ns.network', parent=root_module['ns3::ObjectBase'])
+    ## tag-buffer.h (module 'network'): ns3::TagBuffer [class]
+    module.add_class('TagBuffer', import_from_module='ns.network')
+    ## nstime.h (module 'core'): ns3::TimeWithUnit [class]
+    module.add_class('TimeWithUnit', import_from_module='ns.core')
+    ## timer.h (module 'core'): ns3::Timer [class]
+    module.add_class('Timer', import_from_module='ns.core')
+    ## timer.h (module 'core'): ns3::Timer::DestroyPolicy [enumeration]
+    module.add_enum('DestroyPolicy', ['CANCEL_ON_DESTROY', 'REMOVE_ON_DESTROY', 'CHECK_ON_DESTROY'], outer_class=root_module['ns3::Timer'], import_from_module='ns.core')
+    ## timer.h (module 'core'): ns3::Timer::State [enumeration]
+    module.add_enum('State', ['RUNNING', 'EXPIRED', 'SUSPENDED'], outer_class=root_module['ns3::Timer'], import_from_module='ns.core')
+    ## timer-impl.h (module 'core'): ns3::TimerImpl [class]
+    module.add_class('TimerImpl', allow_subclassing=True, import_from_module='ns.core')
+    ## traced-value.h (module 'core'): ns3::TracedValue<ns3::QuicSocket::QuicStates_t> [class]
+    module.add_class('TracedValue', import_from_module='ns.core', template_parameters=['ns3::QuicSocket::QuicStates_t'])
+    ## traced-value.h (module 'core'): ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> > [class]
+    module.add_class('TracedValue', import_from_module='ns.core', template_parameters=['ns3::SequenceNumber<unsigned int, int>'])
+    ## traced-value.h (module 'core'): ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> > [class]
+    root_module['ns3::TracedValue< ns3::SequenceNumber<unsigned int, int> >'].implicitly_converts_to(root_module['ns3::SequenceNumber32'])
+    ## traced-value.h (module 'core'): ns3::TracedValue<ns3::TcpSocket::TcpStates_t> [class]
+    module.add_class('TracedValue', import_from_module='ns.core', template_parameters=['ns3::TcpSocket::TcpStates_t'])
+    ## traced-value.h (module 'core'): ns3::TracedValue<ns3::TcpSocketState::EcnState_t> [class]
+    module.add_class('TracedValue', import_from_module='ns.core', template_parameters=['ns3::TcpSocketState::EcnState_t'])
+    ## traced-value.h (module 'core'): ns3::TracedValue<ns3::TcpSocketState::TcpCongState_t> [class]
+    module.add_class('TracedValue', import_from_module='ns.core', template_parameters=['ns3::TcpSocketState::TcpCongState_t'])
+    ## traced-value.h (module 'core'): ns3::TracedValue<unsigned int> [class]
+    module.add_class('TracedValue', import_from_module='ns.core', template_parameters=['unsigned int'])
+    ## type-id.h (module 'core'): ns3::TypeId [class]
+    module.add_class('TypeId', import_from_module='ns.core')
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeFlag [enumeration]
+    module.add_enum('AttributeFlag', ['ATTR_GET', 'ATTR_SET', 'ATTR_CONSTRUCT', 'ATTR_SGC'], outer_class=root_module['ns3::TypeId'], import_from_module='ns.core')
+    ## type-id.h (module 'core'): ns3::TypeId::SupportLevel [enumeration]
+    module.add_enum('SupportLevel', ['SUPPORTED', 'DEPRECATED', 'OBSOLETE'], outer_class=root_module['ns3::TypeId'], import_from_module='ns.core')
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation [struct]
+    module.add_class('AttributeInformation', import_from_module='ns.core', outer_class=root_module['ns3::TypeId'])
+    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation [struct]
+    module.add_class('TraceSourceInformation', import_from_module='ns.core', outer_class=root_module['ns3::TypeId'])
+    typehandlers.add_type_alias(u'uint32_t', u'ns3::TypeId::hash_t')
+    typehandlers.add_type_alias(u'uint32_t*', u'ns3::TypeId::hash_t*')
+    typehandlers.add_type_alias(u'uint32_t&', u'ns3::TypeId::hash_t&')
+    ## empty.h (module 'core'): ns3::empty [class]
+    module.add_class('empty', import_from_module='ns.core')
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t [class]
+    module.add_class('int64x64_t', import_from_module='ns.core')
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::impl_type [enumeration]
+    module.add_enum('impl_type', ['int128_impl', 'cairo_impl', 'ld_impl'], outer_class=root_module['ns3::int64x64_t'], import_from_module='ns.core')
+    ## chunk.h (module 'network'): ns3::Chunk [class]
+    module.add_class('Chunk', import_from_module='ns.network', parent=root_module['ns3::ObjectBase'])
+    ## header.h (module 'network'): ns3::Header [class]
+    module.add_class('Header', import_from_module='ns.network', parent=root_module['ns3::Chunk'])
+    ## internet-stack-helper.h (module 'internet'): ns3::InternetStackHelper [class]
+    module.add_class('InternetStackHelper', import_from_module='ns.internet', parent=[root_module['ns3::PcapHelperForIpv4'], root_module['ns3::PcapHelperForIpv6'], root_module['ns3::AsciiTraceHelperForIpv4'], root_module['ns3::AsciiTraceHelperForIpv6']])
+    ## ipv4-header.h (module 'internet'): ns3::Ipv4Header [class]
+    module.add_class('Ipv4Header', import_from_module='ns.internet', parent=root_module['ns3::Header'])
+    ## ipv4-header.h (module 'internet'): ns3::Ipv4Header::DscpType [enumeration]
+    module.add_enum('DscpType', ['DscpDefault', 'DSCP_CS1', 'DSCP_AF11', 'DSCP_AF12', 'DSCP_AF13', 'DSCP_CS2', 'DSCP_AF21', 'DSCP_AF22', 'DSCP_AF23', 'DSCP_CS3', 'DSCP_AF31', 'DSCP_AF32', 'DSCP_AF33', 'DSCP_CS4', 'DSCP_AF41', 'DSCP_AF42', 'DSCP_AF43', 'DSCP_CS5', 'DSCP_EF', 'DSCP_CS6', 'DSCP_CS7'], outer_class=root_module['ns3::Ipv4Header'], import_from_module='ns.internet')
+    ## ipv4-header.h (module 'internet'): ns3::Ipv4Header::EcnType [enumeration]
+    module.add_enum('EcnType', ['ECN_NotECT', 'ECN_ECT1', 'ECN_ECT0', 'ECN_CE'], outer_class=root_module['ns3::Ipv4Header'], import_from_module='ns.internet')
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Header [class]
+    module.add_class('Ipv6Header', import_from_module='ns.internet', parent=root_module['ns3::Header'])
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Header::DscpType [enumeration]
+    module.add_enum('DscpType', ['DscpDefault', 'DSCP_CS1', 'DSCP_AF11', 'DSCP_AF12', 'DSCP_AF13', 'DSCP_CS2', 'DSCP_AF21', 'DSCP_AF22', 'DSCP_AF23', 'DSCP_CS3', 'DSCP_AF31', 'DSCP_AF32', 'DSCP_AF33', 'DSCP_CS4', 'DSCP_AF41', 'DSCP_AF42', 'DSCP_AF43', 'DSCP_CS5', 'DSCP_EF', 'DSCP_CS6', 'DSCP_CS7'], outer_class=root_module['ns3::Ipv6Header'], import_from_module='ns.internet')
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Header::NextHeader_e [enumeration]
+    module.add_enum('NextHeader_e', ['IPV6_EXT_HOP_BY_HOP', 'IPV6_IPV4', 'IPV6_TCP', 'IPV6_UDP', 'IPV6_IPV6', 'IPV6_EXT_ROUTING', 'IPV6_EXT_FRAGMENTATION', 'IPV6_EXT_CONFIDENTIALITY', 'IPV6_EXT_AUTHENTIFICATION', 'IPV6_ICMPV6', 'IPV6_EXT_END', 'IPV6_EXT_DESTINATION', 'IPV6_SCTP', 'IPV6_EXT_MOBILITY', 'IPV6_UDP_LITE'], outer_class=root_module['ns3::Ipv6Header'], import_from_module='ns.internet')
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Header::EcnType [enumeration]
+    module.add_enum('EcnType', ['ECN_NotECT', 'ECN_ECT1', 'ECN_ECT0', 'ECN_CE'], outer_class=root_module['ns3::Ipv6Header'], import_from_module='ns.internet')
+    ## object.h (module 'core'): ns3::Object [class]
+    module.add_class('Object', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter >'])
+    ## object.h (module 'core'): ns3::Object::AggregateIterator [class]
+    module.add_class('AggregateIterator', import_from_module='ns.core', outer_class=root_module['ns3::Object'])
+    ## pcap-file-wrapper.h (module 'network'): ns3::PcapFileWrapper [class]
+    module.add_class('PcapFileWrapper', import_from_module='ns.network', parent=root_module['ns3::Object'])
+    ## quic-header.h (module 'quic'): ns3::QuicHeader [class]
+    module.add_class('QuicHeader', parent=root_module['ns3::Header'])
+    ## quic-header.h (module 'quic'): ns3::QuicHeader::TypeFormat_t [enumeration]
+    module.add_enum('TypeFormat_t', ['SHORT', 'LONG'], outer_class=root_module['ns3::QuicHeader'])
+    ## quic-header.h (module 'quic'): ns3::QuicHeader::TypeLong_t [enumeration]
+    module.add_enum('TypeLong_t', ['VERSION_NEGOTIATION', 'INITIAL', 'RETRY', 'HANDSHAKE', 'ZRTT_PROTECTED', 'NONE'], outer_class=root_module['ns3::QuicHeader'])
+    ## quic-header.h (module 'quic'): ns3::QuicHeader::KeyPhase_t [enumeration]
+    module.add_enum('KeyPhase_t', ['PHASE_ZERO', 'PHASE_ONE'], outer_class=root_module['ns3::QuicHeader'])
+    ## quic-header.h (module 'quic'): ns3::QuicHeader::TypeShort_t [enumeration]
+    module.add_enum('TypeShort_t', ['ONE_OCTECT', 'TWO_OCTECTS', 'FOUR_OCTECTS'], outer_class=root_module['ns3::QuicHeader'])
+    typehandlers.add_type_alias(u'ns3::QuicHeader::TypeFormat_t', u'ns3::QuicHeader::TypeFormat_t')
+    typehandlers.add_type_alias(u'ns3::QuicHeader::TypeFormat_t*', u'ns3::QuicHeader::TypeFormat_t*')
+    typehandlers.add_type_alias(u'ns3::QuicHeader::TypeFormat_t&', u'ns3::QuicHeader::TypeFormat_t&')
+    typehandlers.add_type_alias(u'ns3::QuicHeader::TypeLong_t', u'ns3::QuicHeader::TypeLong_t')
+    typehandlers.add_type_alias(u'ns3::QuicHeader::TypeLong_t*', u'ns3::QuicHeader::TypeLong_t*')
+    typehandlers.add_type_alias(u'ns3::QuicHeader::TypeLong_t&', u'ns3::QuicHeader::TypeLong_t&')
+    typehandlers.add_type_alias(u'ns3::QuicHeader::KeyPhase_t', u'ns3::QuicHeader::KeyPhase_t')
+    typehandlers.add_type_alias(u'ns3::QuicHeader::KeyPhase_t*', u'ns3::QuicHeader::KeyPhase_t*')
+    typehandlers.add_type_alias(u'ns3::QuicHeader::KeyPhase_t&', u'ns3::QuicHeader::KeyPhase_t&')
+    typehandlers.add_type_alias(u'ns3::QuicHeader::TypeShort_t', u'ns3::QuicHeader::TypeShort_t')
+    typehandlers.add_type_alias(u'ns3::QuicHeader::TypeShort_t*', u'ns3::QuicHeader::TypeShort_t*')
+    typehandlers.add_type_alias(u'ns3::QuicHeader::TypeShort_t&', u'ns3::QuicHeader::TypeShort_t&')
+    ## quic-helper.h (module 'quic'): ns3::QuicHelper [class]
+    module.add_class('QuicHelper', parent=root_module['ns3::InternetStackHelper'])
+    ## quic-l5-protocol.h (module 'quic'): ns3::QuicL5Protocol [class]
+    module.add_class('QuicL5Protocol', parent=root_module['ns3::Object'])
+    ## quic-socket-rx-buffer.h (module 'quic'): ns3::QuicSocketRxBuffer [class]
+    module.add_class('QuicSocketRxBuffer', parent=root_module['ns3::Object'])
+    ## quic-socket-tx-buffer.h (module 'quic'): ns3::QuicSocketTxBuffer [class]
+    module.add_class('QuicSocketTxBuffer', parent=root_module['ns3::Object'])
+    ## quic-stream.h (module 'quic'): ns3::QuicStream [class]
+    module.add_class('QuicStream', parent=root_module['ns3::Object'])
+    ## quic-stream.h (module 'quic'): ns3::QuicStream::QuicStreamTypes_t [enumeration]
+    module.add_enum('QuicStreamTypes_t', ['CLIENT_INITIATED_BIDIRECTIONAL', 'SERVER_INITIATED_BIDIRECTIONAL', 'CLIENT_INITIATED_UNIDIRECTIONAL', 'SERVER_INITIATED_UNIDIRECTIONAL', 'NONE'], outer_class=root_module['ns3::QuicStream'])
+    ## quic-stream.h (module 'quic'): ns3::QuicStream::QuicStreamDirectionTypes_t [enumeration]
+    module.add_enum('QuicStreamDirectionTypes_t', ['SENDER', 'RECEIVER', 'BIDIRECTIONAL', 'UNKNOWN'], outer_class=root_module['ns3::QuicStream'])
+    ## quic-stream.h (module 'quic'): ns3::QuicStream::QuicStreamStates_t [enumeration]
+    module.add_enum('QuicStreamStates_t', ['IDLE', 'OPEN', 'SEND', 'RECV', 'SIZE_KNOWN', 'DATA_SENT', 'DATA_RECVD', 'DATA_READ', 'RESET_SENT', 'RESET_RECVD', 'RESET_READ', 'LAST_STATE'], outer_class=root_module['ns3::QuicStream'])
+    typehandlers.add_type_alias(u'ns3::QuicStream::QuicStreamTypes_t', u'ns3::QuicStream::QuicStreamTypes_t')
+    typehandlers.add_type_alias(u'ns3::QuicStream::QuicStreamTypes_t*', u'ns3::QuicStream::QuicStreamTypes_t*')
+    typehandlers.add_type_alias(u'ns3::QuicStream::QuicStreamTypes_t&', u'ns3::QuicStream::QuicStreamTypes_t&')
+    typehandlers.add_type_alias(u'ns3::QuicStream::QuicStreamDirectionTypes_t', u'ns3::QuicStream::QuicStreamDirectionTypes_t')
+    typehandlers.add_type_alias(u'ns3::QuicStream::QuicStreamDirectionTypes_t*', u'ns3::QuicStream::QuicStreamDirectionTypes_t*')
+    typehandlers.add_type_alias(u'ns3::QuicStream::QuicStreamDirectionTypes_t&', u'ns3::QuicStream::QuicStreamDirectionTypes_t&')
+    typehandlers.add_type_alias(u'ns3::QuicStream::QuicStreamStates_t', u'ns3::QuicStream::QuicStreamStates_t')
+    typehandlers.add_type_alias(u'ns3::QuicStream::QuicStreamStates_t*', u'ns3::QuicStream::QuicStreamStates_t*')
+    typehandlers.add_type_alias(u'ns3::QuicStream::QuicStreamStates_t&', u'ns3::QuicStream::QuicStreamStates_t&')
+    ## quic-stream-base.h (module 'quic'): ns3::QuicStreamBase [class]
+    module.add_class('QuicStreamBase', parent=root_module['ns3::QuicStream'])
+    ## quic-stream-rx-buffer.h (module 'quic'): ns3::QuicStreamRxBuffer [class]
+    module.add_class('QuicStreamRxBuffer', parent=root_module['ns3::Object'])
+    ## quic-stream-tx-buffer.h (module 'quic'): ns3::QuicStreamTxBuffer [class]
+    module.add_class('QuicStreamTxBuffer', parent=root_module['ns3::Object'])
+    ## quic-subheader.h (module 'quic'): ns3::QuicSubheader [class]
+    module.add_class('QuicSubheader', parent=root_module['ns3::Header'])
+    ## quic-subheader.h (module 'quic'): ns3::QuicSubheader::TypeFrame_t [enumeration]
+    module.add_enum('TypeFrame_t', ['PADDING', 'RST_STREAM', 'CONNECTION_CLOSE', 'APPLICATION_CLOSE', 'MAX_DATA', 'MAX_STREAM_DATA', 'MAX_STREAM_ID', 'PING', 'BLOCKED', 'STREAM_BLOCKED', 'STREAM_ID_BLOCKED', 'NEW_CONNECTION_ID', 'STOP_SENDING', 'ACK', 'PATH_CHALLENGE', 'PATH_RESPONSE', 'STREAM000', 'STREAM001', 'STREAM010', 'STREAM011', 'STREAM100', 'STREAM101', 'STREAM110', 'STREAM111'], outer_class=root_module['ns3::QuicSubheader'])
+    ## quic-subheader.h (module 'quic'): ns3::QuicSubheader::TransportErrorCodes_t [enumeration]
+    module.add_enum('TransportErrorCodes_t', ['NO_ERROR', 'INTERNAL_ERROR', 'SERVER_BUSY', 'FLOW_CONTROL_ERROR', 'STREAM_ID_ERROR', 'STREAM_STATE_ERROR', 'FINAL_OFFSET_ERROR', 'FRAME_FORMAT_ERROR', 'TRANSPORT_PARAMETER_ERROR', 'VERSION_NEGOTIATION_ERROR', 'PROTOCOL_VIOLATION', 'UNSOLICITED_PATH_ERROR', 'FRAME_ERROR'], outer_class=root_module['ns3::QuicSubheader'])
+    typehandlers.add_type_alias(u'ns3::QuicSubheader::TypeFrame_t', u'ns3::QuicSubheader::TypeFrame_t')
+    typehandlers.add_type_alias(u'ns3::QuicSubheader::TypeFrame_t*', u'ns3::QuicSubheader::TypeFrame_t*')
+    typehandlers.add_type_alias(u'ns3::QuicSubheader::TypeFrame_t&', u'ns3::QuicSubheader::TypeFrame_t&')
+    typehandlers.add_type_alias(u'ns3::QuicSubheader::TransportErrorCodes_t', u'ns3::QuicSubheader::TransportErrorCodes_t')
+    typehandlers.add_type_alias(u'ns3::QuicSubheader::TransportErrorCodes_t*', u'ns3::QuicSubheader::TransportErrorCodes_t*')
+    typehandlers.add_type_alias(u'ns3::QuicSubheader::TransportErrorCodes_t&', u'ns3::QuicSubheader::TransportErrorCodes_t&')
+    ## quic-transport-parameters.h (module 'quic'): ns3::QuicTransportParameters [class]
+    module.add_class('QuicTransportParameters', parent=root_module['ns3::Header'])
+    ## quic-l4-protocol.h (module 'quic'): ns3::QuicUdpBinding [class]
+    module.add_class('QuicUdpBinding', parent=root_module['ns3::Object'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> > [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> > [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeChecker', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeChecker>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> > [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeValue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeValue>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> > [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::CallbackImplBase', 'ns3::empty', 'ns3::DefaultDeleter<ns3::CallbackImplBase>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> > [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::EventImpl', 'ns3::empty', 'ns3::DefaultDeleter<ns3::EventImpl>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> > [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Hash::Implementation', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Hash::Implementation>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> > [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Ipv4MulticastRoute', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv4MulticastRoute>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> > [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Ipv4Route', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv4Route>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> > [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::NixVector', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NixVector>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> > [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::OutputStreamWrapper', 'ns3::empty', 'ns3::DefaultDeleter<ns3::OutputStreamWrapper>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> > [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Packet', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Packet>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> > [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::TraceSourceAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::TraceSourceAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
+    ## socket.h (module 'network'): ns3::Socket [class]
+    module.add_class('Socket', import_from_module='ns.network', parent=root_module['ns3::Object'])
+    ## socket.h (module 'network'): ns3::Socket::SocketErrno [enumeration]
+    module.add_enum('SocketErrno', ['ERROR_NOTERROR', 'ERROR_ISCONN', 'ERROR_NOTCONN', 'ERROR_MSGSIZE', 'ERROR_AGAIN', 'ERROR_SHUTDOWN', 'ERROR_OPNOTSUPP', 'ERROR_AFNOSUPPORT', 'ERROR_INVAL', 'ERROR_BADF', 'ERROR_NOROUTETOHOST', 'ERROR_NODEV', 'ERROR_ADDRNOTAVAIL', 'ERROR_ADDRINUSE', 'SOCKET_ERRNO_LAST'], outer_class=root_module['ns3::Socket'], import_from_module='ns.network')
+    ## socket.h (module 'network'): ns3::Socket::SocketType [enumeration]
+    module.add_enum('SocketType', ['NS3_SOCK_STREAM', 'NS3_SOCK_SEQPACKET', 'NS3_SOCK_DGRAM', 'NS3_SOCK_RAW'], outer_class=root_module['ns3::Socket'], import_from_module='ns.network')
+    ## socket.h (module 'network'): ns3::Socket::SocketPriority [enumeration]
+    module.add_enum('SocketPriority', ['NS3_PRIO_BESTEFFORT', 'NS3_PRIO_FILLER', 'NS3_PRIO_BULK', 'NS3_PRIO_INTERACTIVE_BULK', 'NS3_PRIO_INTERACTIVE', 'NS3_PRIO_CONTROL'], outer_class=root_module['ns3::Socket'], import_from_module='ns.network')
+    ## socket.h (module 'network'): ns3::Socket::Ipv6MulticastFilterMode [enumeration]
+    module.add_enum('Ipv6MulticastFilterMode', ['INCLUDE', 'EXCLUDE'], outer_class=root_module['ns3::Socket'], import_from_module='ns.network')
+    ## socket-factory.h (module 'network'): ns3::SocketFactory [class]
+    module.add_class('SocketFactory', import_from_module='ns.network', parent=root_module['ns3::Object'])
+    ## socket.h (module 'network'): ns3::SocketIpTosTag [class]
+    module.add_class('SocketIpTosTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
+    ## socket.h (module 'network'): ns3::SocketIpTtlTag [class]
+    module.add_class('SocketIpTtlTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
+    ## socket.h (module 'network'): ns3::SocketIpv6HopLimitTag [class]
+    module.add_class('SocketIpv6HopLimitTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
+    ## socket.h (module 'network'): ns3::SocketIpv6TclassTag [class]
+    module.add_class('SocketIpv6TclassTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
+    ## socket.h (module 'network'): ns3::SocketPriorityTag [class]
+    module.add_class('SocketPriorityTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
+    ## socket.h (module 'network'): ns3::SocketSetDontFragmentTag [class]
+    module.add_class('SocketSetDontFragmentTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
+    ## tcp-congestion-ops.h (module 'internet'): ns3::TcpCongestionOps [class]
+    module.add_class('TcpCongestionOps', import_from_module='ns.internet', parent=root_module['ns3::Object'])
+    ## tcp-congestion-ops.h (module 'internet'): ns3::TcpNewReno [class]
+    module.add_class('TcpNewReno', import_from_module='ns.internet', parent=root_module['ns3::TcpCongestionOps'])
+    ## tcp-socket.h (module 'internet'): ns3::TcpSocket [class]
+    module.add_class('TcpSocket', import_from_module='ns.internet', parent=root_module['ns3::Socket'])
+    ## tcp-socket.h (module 'internet'): ns3::TcpSocket::TcpStates_t [enumeration]
+    module.add_enum('TcpStates_t', ['CLOSED', 'LISTEN', 'SYN_SENT', 'SYN_RCVD', 'ESTABLISHED', 'CLOSE_WAIT', 'LAST_ACK', 'FIN_WAIT_1', 'FIN_WAIT_2', 'CLOSING', 'TIME_WAIT', 'LAST_STATE'], outer_class=root_module['ns3::TcpSocket'], import_from_module='ns.internet')
+    typehandlers.add_type_alias(u'ns3::TcpSocket::TcpStates_t', u'ns3::TcpSocket::TcpStates_t')
+    typehandlers.add_type_alias(u'ns3::TcpSocket::TcpStates_t*', u'ns3::TcpSocket::TcpStates_t*')
+    typehandlers.add_type_alias(u'ns3::TcpSocket::TcpStates_t&', u'ns3::TcpSocket::TcpStates_t&')
+    ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketBase [class]
+    module.add_class('TcpSocketBase', import_from_module='ns.internet', parent=root_module['ns3::TcpSocket'])
+    ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketBase::EcnMode_t [enumeration]
+    module.add_enum('EcnMode_t', ['NoEcn', 'ClassicEcn'], outer_class=root_module['ns3::TcpSocketBase'], import_from_module='ns.internet')
+    typehandlers.add_type_alias(u'ns3::TcpSocketBase::EcnMode_t', u'ns3::TcpSocketBase::EcnMode_t')
+    typehandlers.add_type_alias(u'ns3::TcpSocketBase::EcnMode_t*', u'ns3::TcpSocketBase::EcnMode_t*')
+    typehandlers.add_type_alias(u'ns3::TcpSocketBase::EcnMode_t&', u'ns3::TcpSocketBase::EcnMode_t&')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::TcpHeader const &, ns3::Ptr< ns3::TcpSocketBase const > const )', u'ns3::TcpSocketBase::TcpTxRxTracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::TcpHeader const &, ns3::Ptr< ns3::TcpSocketBase const > const )*', u'ns3::TcpSocketBase::TcpTxRxTracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::TcpHeader const &, ns3::Ptr< ns3::TcpSocketBase const > const )&', u'ns3::TcpSocketBase::TcpTxRxTracedCallback&')
+    ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState [class]
+    module.add_class('TcpSocketState', import_from_module='ns.internet', parent=root_module['ns3::Object'])
+    ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::TcpCongState_t [enumeration]
+    module.add_enum('TcpCongState_t', ['CA_OPEN', 'CA_DISORDER', 'CA_CWR', 'CA_RECOVERY', 'CA_LOSS', 'CA_LAST_STATE'], outer_class=root_module['ns3::TcpSocketState'], import_from_module='ns.internet')
+    ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::TcpCAEvent_t [enumeration]
+    module.add_enum('TcpCAEvent_t', ['CA_EVENT_TX_START', 'CA_EVENT_CWND_RESTART', 'CA_EVENT_COMPLETE_CWR', 'CA_EVENT_LOSS', 'CA_EVENT_ECN_NO_CE', 'CA_EVENT_ECN_IS_CE', 'CA_EVENT_DELAYED_ACK', 'CA_EVENT_NON_DELAYED_ACK'], outer_class=root_module['ns3::TcpSocketState'], import_from_module='ns.internet')
+    ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::EcnState_t [enumeration]
+    module.add_enum('EcnState_t', ['ECN_DISABLED', 'ECN_IDLE', 'ECN_CE_RCVD', 'ECN_SENDING_ECE', 'ECN_ECE_RCVD', 'ECN_CWR_SENT'], outer_class=root_module['ns3::TcpSocketState'], import_from_module='ns.internet')
+    typehandlers.add_type_alias(u'ns3::TcpSocketState::TcpCongState_t', u'ns3::TcpSocketState::TcpCongState_t')
+    typehandlers.add_type_alias(u'ns3::TcpSocketState::TcpCongState_t*', u'ns3::TcpSocketState::TcpCongState_t*')
+    typehandlers.add_type_alias(u'ns3::TcpSocketState::TcpCongState_t&', u'ns3::TcpSocketState::TcpCongState_t&')
+    typehandlers.add_type_alias(u'ns3::TcpSocketState::TcpCAEvent_t', u'ns3::TcpSocketState::TcpCAEvent_t')
+    typehandlers.add_type_alias(u'ns3::TcpSocketState::TcpCAEvent_t*', u'ns3::TcpSocketState::TcpCAEvent_t*')
+    typehandlers.add_type_alias(u'ns3::TcpSocketState::TcpCAEvent_t&', u'ns3::TcpSocketState::TcpCAEvent_t&')
+    typehandlers.add_type_alias(u'ns3::TcpSocketState::EcnState_t', u'ns3::TcpSocketState::EcnState_t')
+    typehandlers.add_type_alias(u'ns3::TcpSocketState::EcnState_t*', u'ns3::TcpSocketState::EcnState_t*')
+    typehandlers.add_type_alias(u'ns3::TcpSocketState::EcnState_t&', u'ns3::TcpSocketState::EcnState_t&')
+    ## nstime.h (module 'core'): ns3::Time [class]
+    module.add_class('Time', import_from_module='ns.core')
+    ## nstime.h (module 'core'): ns3::Time::Unit [enumeration]
+    module.add_enum('Unit', ['Y', 'D', 'H', 'MIN', 'S', 'MS', 'US', 'NS', 'PS', 'FS', 'LAST'], outer_class=root_module['ns3::Time'], import_from_module='ns.core')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Time )', u'ns3::Time::TracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Time )*', u'ns3::Time::TracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Time )&', u'ns3::Time::TracedCallback&')
+    ## nstime.h (module 'core'): ns3::Time [class]
+    root_module['ns3::Time'].implicitly_converts_to(root_module['ns3::int64x64_t'])
+    ## trace-source-accessor.h (module 'core'): ns3::TraceSourceAccessor [class]
+    module.add_class('TraceSourceAccessor', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >'])
+    ## traced-value.h (module 'core'): ns3::TracedValue<ns3::Time> [class]
+    module.add_class('TracedValue', import_from_module='ns.core', template_parameters=['ns3::Time'])
+    ## traced-value.h (module 'core'): ns3::TracedValue<ns3::Time> [class]
+    root_module['ns3::TracedValue< ns3::Time >'].implicitly_converts_to(root_module['ns3::Time'])
+    ## trailer.h (module 'network'): ns3::Trailer [class]
+    module.add_class('Trailer', import_from_module='ns.network', parent=root_module['ns3::Chunk'])
+    ## attribute.h (module 'core'): ns3::AttributeAccessor [class]
+    module.add_class('AttributeAccessor', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >'])
+    ## attribute.h (module 'core'): ns3::AttributeChecker [class]
+    module.add_class('AttributeChecker', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >'])
+    ## attribute.h (module 'core'): ns3::AttributeValue [class]
+    module.add_class('AttributeValue', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >'])
+    ## boolean.h (module 'core'): ns3::BooleanChecker [class]
+    module.add_class('BooleanChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
+    ## boolean.h (module 'core'): ns3::BooleanValue [class]
+    module.add_class('BooleanValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## callback.h (module 'core'): ns3::CallbackChecker [class]
+    module.add_class('CallbackChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
+    ## callback.h (module 'core'): ns3::CallbackImplBase [class]
+    module.add_class('CallbackImplBase', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >'])
+    ## callback.h (module 'core'): ns3::CallbackValue [class]
+    module.add_class('CallbackValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## data-rate.h (module 'network'): ns3::DataRateChecker [class]
+    module.add_class('DataRateChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
+    ## data-rate.h (module 'network'): ns3::DataRateValue [class]
+    module.add_class('DataRateValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
+    ## double.h (module 'core'): ns3::DoubleValue [class]
+    module.add_class('DoubleValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## attribute.h (module 'core'): ns3::EmptyAttributeAccessor [class]
+    module.add_class('EmptyAttributeAccessor', import_from_module='ns.core', parent=root_module['ns3::AttributeAccessor'])
+    ## attribute.h (module 'core'): ns3::EmptyAttributeChecker [class]
+    module.add_class('EmptyAttributeChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
+    ## attribute.h (module 'core'): ns3::EmptyAttributeValue [class]
+    module.add_class('EmptyAttributeValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## enum.h (module 'core'): ns3::EnumChecker [class]
+    module.add_class('EnumChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
+    ## enum.h (module 'core'): ns3::EnumValue [class]
+    module.add_class('EnumValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## event-impl.h (module 'core'): ns3::EventImpl [class]
+    module.add_class('EventImpl', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >'])
+    ## integer.h (module 'core'): ns3::IntegerValue [class]
+    module.add_class('IntegerValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## ip-l4-protocol.h (module 'internet'): ns3::IpL4Protocol [class]
+    module.add_class('IpL4Protocol', import_from_module='ns.internet', parent=root_module['ns3::Object'])
+    ## ip-l4-protocol.h (module 'internet'): ns3::IpL4Protocol::RxStatus [enumeration]
+    module.add_enum('RxStatus', ['RX_OK', 'RX_CSUM_FAILED', 'RX_ENDPOINT_CLOSED', 'RX_ENDPOINT_UNREACH'], outer_class=root_module['ns3::IpL4Protocol'], import_from_module='ns.internet')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::IpL4Protocol::DownTargetCallback')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::IpL4Protocol::DownTargetCallback*')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::IpL4Protocol::DownTargetCallback&')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::IpL4Protocol::DownTargetCallback6')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::IpL4Protocol::DownTargetCallback6*')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::IpL4Protocol::DownTargetCallback6&')
+    ## ipv4.h (module 'internet'): ns3::Ipv4 [class]
+    module.add_class('Ipv4', import_from_module='ns.internet', parent=root_module['ns3::Object'])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressChecker [class]
+    module.add_class('Ipv4AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue [class]
+    module.add_class('Ipv4AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ipv4L3Protocol [class]
+    module.add_class('Ipv4L3Protocol', import_from_module='ns.internet', parent=root_module['ns3::Ipv4'])
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ipv4L3Protocol::DropReason [enumeration]
+    module.add_enum('DropReason', ['DROP_TTL_EXPIRED', 'DROP_NO_ROUTE', 'DROP_BAD_CHECKSUM', 'DROP_INTERFACE_DOWN', 'DROP_ROUTE_ERROR', 'DROP_FRAGMENT_TIMEOUT'], outer_class=root_module['ns3::Ipv4L3Protocol'], import_from_module='ns.internet')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )', u'ns3::Ipv4L3Protocol::SentTracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )*', u'ns3::Ipv4L3Protocol::SentTracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )&', u'ns3::Ipv4L3Protocol::SentTracedCallback&')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )', u'ns3::Ipv4L3Protocol::TxRxTracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )*', u'ns3::Ipv4L3Protocol::TxRxTracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )&', u'ns3::Ipv4L3Protocol::TxRxTracedCallback&')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )', u'ns3::Ipv4L3Protocol::DropTracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )*', u'ns3::Ipv4L3Protocol::DropTracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )&', u'ns3::Ipv4L3Protocol::DropTracedCallback&')
+    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskChecker [class]
+    module.add_class('Ipv4MaskChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue [class]
+    module.add_class('Ipv4MaskValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4MulticastRoute [class]
+    module.add_class('Ipv4MulticastRoute', import_from_module='ns.internet', parent=root_module['ns3::SimpleRefCount< ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> >'])
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4Route [class]
+    module.add_class('Ipv4Route', import_from_module='ns.internet', parent=root_module['ns3::SimpleRefCount< ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> >'])
+    ## ipv4-routing-protocol.h (module 'internet'): ns3::Ipv4RoutingProtocol [class]
+    module.add_class('Ipv4RoutingProtocol', import_from_module='ns.internet', parent=root_module['ns3::Object'])
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Ipv4RoutingProtocol::UnicastForwardCallback')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Ipv4RoutingProtocol::UnicastForwardCallback*')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Ipv4RoutingProtocol::UnicastForwardCallback&')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Ipv4RoutingProtocol::MulticastForwardCallback')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Ipv4RoutingProtocol::MulticastForwardCallback*')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Ipv4RoutingProtocol::MulticastForwardCallback&')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Ipv4RoutingProtocol::LocalDeliverCallback')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Ipv4RoutingProtocol::LocalDeliverCallback*')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Ipv4RoutingProtocol::LocalDeliverCallback&')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Ipv4RoutingProtocol::ErrorCallback')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Ipv4RoutingProtocol::ErrorCallback*')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Ipv4RoutingProtocol::ErrorCallback&')
+    ## ipv6.h (module 'internet'): ns3::Ipv6 [class]
+    module.add_class('Ipv6', import_from_module='ns.internet', parent=root_module['ns3::Object'])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressChecker [class]
+    module.add_class('Ipv6AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue [class]
+    module.add_class('Ipv6AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ipv6L3Protocol [class]
+    module.add_class('Ipv6L3Protocol', import_from_module='ns.internet', parent=root_module['ns3::Ipv6'])
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ipv6L3Protocol::DropReason [enumeration]
+    module.add_enum('DropReason', ['DROP_TTL_EXPIRED', 'DROP_NO_ROUTE', 'DROP_INTERFACE_DOWN', 'DROP_ROUTE_ERROR', 'DROP_UNKNOWN_PROTOCOL', 'DROP_UNKNOWN_OPTION', 'DROP_MALFORMED_HEADER', 'DROP_FRAGMENT_TIMEOUT'], outer_class=root_module['ns3::Ipv6L3Protocol'], import_from_module='ns.internet')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )', u'ns3::Ipv6L3Protocol::SentTracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )*', u'ns3::Ipv6L3Protocol::SentTracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )&', u'ns3::Ipv6L3Protocol::SentTracedCallback&')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )', u'ns3::Ipv6L3Protocol::TxRxTracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )*', u'ns3::Ipv6L3Protocol::TxRxTracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )&', u'ns3::Ipv6L3Protocol::TxRxTracedCallback&')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )', u'ns3::Ipv6L3Protocol::DropTracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )*', u'ns3::Ipv6L3Protocol::DropTracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )&', u'ns3::Ipv6L3Protocol::DropTracedCallback&')
+    ## ipv6-pmtu-cache.h (module 'internet'): ns3::Ipv6PmtuCache [class]
+    module.add_class('Ipv6PmtuCache', import_from_module='ns.internet', parent=root_module['ns3::Object'])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixChecker [class]
+    module.add_class('Ipv6PrefixChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue [class]
+    module.add_class('Ipv6PrefixValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
+    ## mac48-address.h (module 'network'): ns3::Mac48AddressChecker [class]
+    module.add_class('Mac48AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
+    ## mac48-address.h (module 'network'): ns3::Mac48AddressValue [class]
+    module.add_class('Mac48AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
+    ## net-device.h (module 'network'): ns3::NetDevice [class]
+    module.add_class('NetDevice', import_from_module='ns.network', parent=root_module['ns3::Object'])
+    ## net-device.h (module 'network'): ns3::NetDevice::PacketType [enumeration]
+    module.add_enum('PacketType', ['PACKET_HOST', 'NS3_PACKET_HOST', 'PACKET_BROADCAST', 'NS3_PACKET_BROADCAST', 'PACKET_MULTICAST', 'NS3_PACKET_MULTICAST', 'PACKET_OTHERHOST', 'NS3_PACKET_OTHERHOST'], outer_class=root_module['ns3::NetDevice'], import_from_module='ns.network')
+    typehandlers.add_type_alias(u'void ( * ) (  )', u'ns3::NetDevice::LinkChangeTracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) (  )*', u'ns3::NetDevice::LinkChangeTracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) (  )&', u'ns3::NetDevice::LinkChangeTracedCallback&')
+    typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::NetDevice::ReceiveCallback')
+    typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::NetDevice::ReceiveCallback*')
+    typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::NetDevice::ReceiveCallback&')
+    typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', u'ns3::NetDevice::PromiscReceiveCallback')
+    typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::NetDevice::PromiscReceiveCallback*')
+    typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::NetDevice::PromiscReceiveCallback&')
+    ## nix-vector.h (module 'network'): ns3::NixVector [class]
+    module.add_class('NixVector', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >'])
+    ## node.h (module 'network'): ns3::Node [class]
+    module.add_class('Node', import_from_module='ns.network', parent=root_module['ns3::Object'])
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Node::ProtocolHandler')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Node::ProtocolHandler*')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Node::ProtocolHandler&')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Node::DeviceAdditionListener')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Node::DeviceAdditionListener*')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Node::DeviceAdditionListener&')
+    ## object-factory.h (module 'core'): ns3::ObjectFactoryChecker [class]
+    module.add_class('ObjectFactoryChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
+    ## object-factory.h (module 'core'): ns3::ObjectFactoryValue [class]
+    module.add_class('ObjectFactoryValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## output-stream-wrapper.h (module 'network'): ns3::OutputStreamWrapper [class]
+    module.add_class('OutputStreamWrapper', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> >'])
+    ## packet.h (module 'network'): ns3::Packet [class]
+    module.add_class('Packet', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >'])
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > )', u'ns3::Packet::TracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > )*', u'ns3::Packet::TracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > )&', u'ns3::Packet::TracedCallback&')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )', u'ns3::Packet::AddressTracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )*', u'ns3::Packet::AddressTracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )&', u'ns3::Packet::AddressTracedCallback&')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )', u'ns3::Packet::TwoAddressTracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )*', u'ns3::Packet::TwoAddressTracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )&', u'ns3::Packet::TwoAddressTracedCallback&')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )', u'ns3::Packet::Mac48AddressTracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )*', u'ns3::Packet::Mac48AddressTracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )&', u'ns3::Packet::Mac48AddressTracedCallback&')
+    typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t )', u'ns3::Packet::SizeTracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t )*', u'ns3::Packet::SizeTracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t )&', u'ns3::Packet::SizeTracedCallback&')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, double )', u'ns3::Packet::SinrTracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, double )*', u'ns3::Packet::SinrTracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, double )&', u'ns3::Packet::SinrTracedCallback&')
+    ## quic-congestion-ops.h (module 'quic'): ns3::QuicCongestionOps [class]
+    module.add_class('QuicCongestionOps', parent=root_module['ns3::TcpNewReno'])
+    ## quic-l4-protocol.h (module 'quic'): ns3::QuicL4Protocol [class]
+    module.add_class('QuicL4Protocol', parent=root_module['ns3::IpL4Protocol'])
+    ## quic-socket.h (module 'quic'): ns3::QuicSocket [class]
+    module.add_class('QuicSocket', parent=root_module['ns3::Socket'])
+    ## quic-socket.h (module 'quic'): ns3::QuicSocket::QuicSocketTypes_t [enumeration]
+    module.add_enum('QuicSocketTypes_t', ['CLIENT', 'SERVER', 'NONE'], outer_class=root_module['ns3::QuicSocket'])
+    ## quic-socket.h (module 'quic'): ns3::QuicSocket::QuicStates_t [enumeration]
+    module.add_enum('QuicStates_t', ['IDLE', 'LISTENING', 'CONNECTING_SVR', 'CONNECTING_CLT', 'OPEN', 'CLOSING', 'LAST_STATE'], outer_class=root_module['ns3::QuicSocket'])
+    typehandlers.add_type_alias(u'ns3::QuicSocket::QuicSocketTypes_t', u'ns3::QuicSocket::QuicSocketTypes_t')
+    typehandlers.add_type_alias(u'ns3::QuicSocket::QuicSocketTypes_t*', u'ns3::QuicSocket::QuicSocketTypes_t*')
+    typehandlers.add_type_alias(u'ns3::QuicSocket::QuicSocketTypes_t&', u'ns3::QuicSocket::QuicSocketTypes_t&')
+    typehandlers.add_type_alias(u'ns3::QuicSocket::QuicStates_t', u'ns3::QuicSocket::QuicStates_t')
+    typehandlers.add_type_alias(u'ns3::QuicSocket::QuicStates_t*', u'ns3::QuicSocket::QuicStates_t*')
+    typehandlers.add_type_alias(u'ns3::QuicSocket::QuicStates_t&', u'ns3::QuicSocket::QuicStates_t&')
+    ## quic-socket-base.h (module 'quic'): ns3::QuicSocketBase [class]
+    module.add_class('QuicSocketBase', parent=root_module['ns3::QuicSocket'])
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::QuicHeader const &, ns3::Ptr< ns3::QuicSocketBase const > const )', u'ns3::QuicSocketBase::QuicTxRxTracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::QuicHeader const &, ns3::Ptr< ns3::QuicSocketBase const > const )*', u'ns3::QuicSocketBase::QuicTxRxTracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::QuicHeader const &, ns3::Ptr< ns3::QuicSocketBase const > const )&', u'ns3::QuicSocketBase::QuicTxRxTracedCallback&')
+    ## quic-socket-factory.h (module 'quic'): ns3::QuicSocketFactory [class]
+    module.add_class('QuicSocketFactory', parent=root_module['ns3::SocketFactory'])
+    ## quic-socket-base.h (module 'quic'): ns3::QuicSocketState [class]
+    module.add_class('QuicSocketState', parent=root_module['ns3::TcpSocketState'])
+    ## nstime.h (module 'core'): ns3::TimeValue [class]
+    module.add_class('TimeValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## type-id.h (module 'core'): ns3::TypeIdChecker [class]
+    module.add_class('TypeIdChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
+    ## type-id.h (module 'core'): ns3::TypeIdValue [class]
+    module.add_class('TypeIdValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## uinteger.h (module 'core'): ns3::UintegerValue [class]
+    module.add_class('UintegerValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## address.h (module 'network'): ns3::AddressChecker [class]
+    module.add_class('AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
+    ## address.h (module 'network'): ns3::AddressValue [class]
+    module.add_class('AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['bool', 'ns3::Ptr<ns3::Socket>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['ns3::ObjectBase *', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'const ns3::Ipv4Header &', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ipv4L3Protocol::DropReason', 'ns3::Ptr<ns3::Ipv4>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'const ns3::Ipv4Header &', 'ns3::Ptr<const ns3::Packet>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'const ns3::Ipv6Header &', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ipv6L3Protocol::DropReason', 'ns3::Ptr<ns3::Ipv6>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'const ns3::Ipv6Header &', 'ns3::Ptr<const ns3::Packet>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::QuicHeader &, ns3::Ptr<const ns3::QuicSocketBase>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'const ns3::QuicHeader &', 'ns3::Ptr<const ns3::QuicSocketBase>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::TcpHeader &, ns3::Ptr<const ns3::TcpSocketBase>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'const ns3::TcpHeader &', 'ns3::Ptr<const ns3::TcpSocketBase>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ptr<ns3::Ipv4>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ptr<ns3::Ipv6>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'const ns3::Address &', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::QuicHeader &, ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'const ns3::QuicHeader &', 'ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv4Address', 'ns3::Ipv4Address', 'unsigned char', 'ns3::Ptr<ns3::Ipv4Route>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv6Address', 'ns3::Ipv6Address', 'unsigned char', 'ns3::Ptr<ns3::Ipv6Route>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::QuicSocket::QuicStates_t, ns3::QuicSocket::QuicStates_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::QuicSocket::QuicStates_t', 'ns3::QuicSocket::QuicStates_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::SequenceNumber<unsigned int, int>, ns3::SequenceNumber<unsigned int, int>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::SequenceNumber<unsigned int, int>', 'ns3::SequenceNumber<unsigned int, int>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::TcpSocket::TcpStates_t, ns3::TcpSocket::TcpStates_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::TcpSocket::TcpStates_t', 'ns3::TcpSocket::TcpStates_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::TcpSocketState::EcnState_t, ns3::TcpSocketState::EcnState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::TcpSocketState::EcnState_t', 'ns3::TcpSocketState::EcnState_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::TcpSocketState::TcpCongState_t, ns3::TcpSocketState::TcpCongState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::TcpSocketState::TcpCongState_t', 'ns3::TcpSocketState::TcpCongState_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Time', 'ns3::Time', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'unsigned int', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    module.add_container('std::vector< unsigned int >', 'unsigned int', container_type=u'vector')
+    module.add_container('std::vector< ns3::Ptr< ns3::Packet > >', 'ns3::Ptr< ns3::Packet >', container_type=u'vector')
+    module.add_container('std::vector< std::pair< ns3::Ptr< ns3::Packet >, ns3::QuicSubheader > >', 'std::pair< ns3::Ptr< ns3::Packet >, ns3::QuicSubheader >', container_type=u'vector')
+    module.add_container('std::vector< ns3::QuicSocketTxItem * >', 'ns3::QuicSocketTxItem *', container_type=u'vector')
diff --git a/src/quic/bindings/modulegen__gcc_LP64.py b/src/quic/bindings/modulegen__gcc_LP64.py
new file mode 100644
index 000000000..8e70815f2
--- /dev/null
+++ b/src/quic/bindings/modulegen__gcc_LP64.py
@@ -0,0 +1,727 @@
+from pybindgen import Module, FileCodeSink, param, retval, cppclass, typehandlers
+
+
+import pybindgen.settings
+import warnings
+
+class ErrorHandler(pybindgen.settings.ErrorHandler):
+    def handle_error(self, wrapper, exception, traceback_):
+        warnings.warn("exception %r in wrapper %s" % (exception, wrapper))
+        return True
+pybindgen.settings.error_handler = ErrorHandler()
+
+
+import sys
+
+def module_init():
+    root_module = Module('ns.quic', cpp_namespace='::ns3')
+    return root_module
+
+def register_types(module):
+    root_module = module.get_root()
+    
+    ## address.h (module 'network'): ns3::Address [class]
+    module.add_class('Address', import_from_module='ns.network')
+    ## address.h (module 'network'): ns3::Address::MaxSize_e [enumeration]
+    module.add_enum('MaxSize_e', ['MAX_SIZE'], outer_class=root_module['ns3::Address'], import_from_module='ns.network')
+    ## trace-helper.h (module 'network'): ns3::AsciiTraceHelper [class]
+    module.add_class('AsciiTraceHelper', import_from_module='ns.network')
+    ## trace-helper.h (module 'network'): ns3::AsciiTraceHelperForDevice [class]
+    module.add_class('AsciiTraceHelperForDevice', allow_subclassing=True, import_from_module='ns.network')
+    ## internet-trace-helper.h (module 'internet'): ns3::AsciiTraceHelperForIpv4 [class]
+    module.add_class('AsciiTraceHelperForIpv4', allow_subclassing=True, import_from_module='ns.internet')
+    ## internet-trace-helper.h (module 'internet'): ns3::AsciiTraceHelperForIpv6 [class]
+    module.add_class('AsciiTraceHelperForIpv6', allow_subclassing=True, import_from_module='ns.internet')
+    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList [class]
+    module.add_class('AttributeConstructionList', import_from_module='ns.core')
+    ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item [struct]
+    module.add_class('Item', import_from_module='ns.core', outer_class=root_module['ns3::AttributeConstructionList'])
+    typehandlers.add_type_alias(u'std::list< ns3::AttributeConstructionList::Item > const_iterator', u'ns3::AttributeConstructionList::CIterator')
+    typehandlers.add_type_alias(u'std::list< ns3::AttributeConstructionList::Item > const_iterator*', u'ns3::AttributeConstructionList::CIterator*')
+    typehandlers.add_type_alias(u'std::list< ns3::AttributeConstructionList::Item > const_iterator&', u'ns3::AttributeConstructionList::CIterator&')
+    ## buffer.h (module 'network'): ns3::Buffer [class]
+    module.add_class('Buffer', import_from_module='ns.network')
+    ## buffer.h (module 'network'): ns3::Buffer::Iterator [class]
+    module.add_class('Iterator', import_from_module='ns.network', outer_class=root_module['ns3::Buffer'])
+    ## packet.h (module 'network'): ns3::ByteTagIterator [class]
+    module.add_class('ByteTagIterator', import_from_module='ns.network')
+    ## packet.h (module 'network'): ns3::ByteTagIterator::Item [class]
+    module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::ByteTagIterator'])
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList [class]
+    module.add_class('ByteTagList', import_from_module='ns.network')
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator [class]
+    module.add_class('Iterator', import_from_module='ns.network', outer_class=root_module['ns3::ByteTagList'])
+    ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item [struct]
+    module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::ByteTagList::Iterator'])
+    ## callback.h (module 'core'): ns3::CallbackBase [class]
+    module.add_class('CallbackBase', import_from_module='ns.core')
+    ## data-rate.h (module 'network'): ns3::DataRate [class]
+    module.add_class('DataRate', import_from_module='ns.network')
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeAccessor> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeAccessor'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeChecker> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeChecker'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeValue> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeValue'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::CallbackImplBase> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::CallbackImplBase'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::EventImpl> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::EventImpl'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Hash::Implementation> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::Hash::Implementation'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Ipv4Route> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::Ipv4Route'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::NixVector> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::NixVector'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::OutputStreamWrapper> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::OutputStreamWrapper'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Packet> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::Packet'])
+    ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::TraceSourceAccessor> [struct]
+    module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::TraceSourceAccessor'])
+    ## event-id.h (module 'core'): ns3::EventId [class]
+    module.add_class('EventId', import_from_module='ns.core')
+    ## hash.h (module 'core'): ns3::Hasher [class]
+    module.add_class('Hasher', import_from_module='ns.core')
+    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress [class]
+    module.add_class('Inet6SocketAddress', import_from_module='ns.network')
+    ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress [class]
+    root_module['ns3::Inet6SocketAddress'].implicitly_converts_to(root_module['ns3::Address'])
+    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress [class]
+    module.add_class('InetSocketAddress', import_from_module='ns.network')
+    ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress [class]
+    root_module['ns3::InetSocketAddress'].implicitly_converts_to(root_module['ns3::Address'])
+    ## int-to-type.h (module 'core'): ns3::IntToType<0> [struct]
+    module.add_class('IntToType', import_from_module='ns.core', template_parameters=['0'])
+    ## int-to-type.h (module 'core'): ns3::IntToType<0>::v_e [enumeration]
+    module.add_enum('v_e', ['value'], outer_class=root_module['ns3::IntToType< 0 >'], import_from_module='ns.core')
+    ## int-to-type.h (module 'core'): ns3::IntToType<1> [struct]
+    module.add_class('IntToType', import_from_module='ns.core', template_parameters=['1'])
+    ## int-to-type.h (module 'core'): ns3::IntToType<1>::v_e [enumeration]
+    module.add_enum('v_e', ['value'], outer_class=root_module['ns3::IntToType< 1 >'], import_from_module='ns.core')
+    ## int-to-type.h (module 'core'): ns3::IntToType<2> [struct]
+    module.add_class('IntToType', import_from_module='ns.core', template_parameters=['2'])
+    ## int-to-type.h (module 'core'): ns3::IntToType<2>::v_e [enumeration]
+    module.add_enum('v_e', ['value'], outer_class=root_module['ns3::IntToType< 2 >'], import_from_module='ns.core')
+    ## int-to-type.h (module 'core'): ns3::IntToType<3> [struct]
+    module.add_class('IntToType', import_from_module='ns.core', template_parameters=['3'])
+    ## int-to-type.h (module 'core'): ns3::IntToType<3>::v_e [enumeration]
+    module.add_enum('v_e', ['value'], outer_class=root_module['ns3::IntToType< 3 >'], import_from_module='ns.core')
+    ## int-to-type.h (module 'core'): ns3::IntToType<4> [struct]
+    module.add_class('IntToType', import_from_module='ns.core', template_parameters=['4'])
+    ## int-to-type.h (module 'core'): ns3::IntToType<4>::v_e [enumeration]
+    module.add_enum('v_e', ['value'], outer_class=root_module['ns3::IntToType< 4 >'], import_from_module='ns.core')
+    ## int-to-type.h (module 'core'): ns3::IntToType<5> [struct]
+    module.add_class('IntToType', import_from_module='ns.core', template_parameters=['5'])
+    ## int-to-type.h (module 'core'): ns3::IntToType<5>::v_e [enumeration]
+    module.add_enum('v_e', ['value'], outer_class=root_module['ns3::IntToType< 5 >'], import_from_module='ns.core')
+    ## int-to-type.h (module 'core'): ns3::IntToType<6> [struct]
+    module.add_class('IntToType', import_from_module='ns.core', template_parameters=['6'])
+    ## int-to-type.h (module 'core'): ns3::IntToType<6>::v_e [enumeration]
+    module.add_enum('v_e', ['value'], outer_class=root_module['ns3::IntToType< 6 >'], import_from_module='ns.core')
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Address [class]
+    module.add_class('Ipv4Address', import_from_module='ns.network')
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Address [class]
+    root_module['ns3::Ipv4Address'].implicitly_converts_to(root_module['ns3::Address'])
+    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4InterfaceAddress [class]
+    module.add_class('Ipv4InterfaceAddress', import_from_module='ns.internet')
+    ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e [enumeration]
+    module.add_enum('InterfaceAddressScope_e', ['HOST', 'LINK', 'GLOBAL'], outer_class=root_module['ns3::Ipv4InterfaceAddress'], import_from_module='ns.internet')
+    ## ipv4-interface-container.h (module 'internet'): ns3::Ipv4InterfaceContainer [class]
+    module.add_class('Ipv4InterfaceContainer', import_from_module='ns.internet')
+    typehandlers.add_type_alias(u'std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > const_iterator', u'ns3::Ipv4InterfaceContainer::Iterator')
+    typehandlers.add_type_alias(u'std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > const_iterator*', u'ns3::Ipv4InterfaceContainer::Iterator*')
+    typehandlers.add_type_alias(u'std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > const_iterator&', u'ns3::Ipv4InterfaceContainer::Iterator&')
+    ## ipv4-address.h (module 'network'): ns3::Ipv4Mask [class]
+    module.add_class('Ipv4Mask', import_from_module='ns.network')
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Address [class]
+    module.add_class('Ipv6Address', import_from_module='ns.network')
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Address [class]
+    root_module['ns3::Ipv6Address'].implicitly_converts_to(root_module['ns3::Address'])
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress [class]
+    module.add_class('Ipv6InterfaceAddress', import_from_module='ns.internet')
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress::State_e [enumeration]
+    module.add_enum('State_e', ['TENTATIVE', 'DEPRECATED', 'PREFERRED', 'PERMANENT', 'HOMEADDRESS', 'TENTATIVE_OPTIMISTIC', 'INVALID'], outer_class=root_module['ns3::Ipv6InterfaceAddress'], import_from_module='ns.internet')
+    ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress::Scope_e [enumeration]
+    module.add_enum('Scope_e', ['HOST', 'LINKLOCAL', 'GLOBAL'], outer_class=root_module['ns3::Ipv6InterfaceAddress'], import_from_module='ns.internet')
+    ## ipv6-interface-container.h (module 'internet'): ns3::Ipv6InterfaceContainer [class]
+    module.add_class('Ipv6InterfaceContainer', import_from_module='ns.internet')
+    typehandlers.add_type_alias(u'std::vector< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > > const_iterator', u'ns3::Ipv6InterfaceContainer::Iterator')
+    typehandlers.add_type_alias(u'std::vector< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > > const_iterator*', u'ns3::Ipv6InterfaceContainer::Iterator*')
+    typehandlers.add_type_alias(u'std::vector< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > > const_iterator&', u'ns3::Ipv6InterfaceContainer::Iterator&')
+    ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix [class]
+    module.add_class('Ipv6Prefix', import_from_module='ns.network')
+    ## mac48-address.h (module 'network'): ns3::Mac48Address [class]
+    module.add_class('Mac48Address', import_from_module='ns.network')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Mac48Address )', u'ns3::Mac48Address::TracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Mac48Address )*', u'ns3::Mac48Address::TracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Mac48Address )&', u'ns3::Mac48Address::TracedCallback&')
+    ## mac48-address.h (module 'network'): ns3::Mac48Address [class]
+    root_module['ns3::Mac48Address'].implicitly_converts_to(root_module['ns3::Address'])
+    ## mac8-address.h (module 'network'): ns3::Mac8Address [class]
+    module.add_class('Mac8Address', import_from_module='ns.network')
+    ## mac8-address.h (module 'network'): ns3::Mac8Address [class]
+    root_module['ns3::Mac8Address'].implicitly_converts_to(root_module['ns3::Address'])
+    ## net-device-container.h (module 'network'): ns3::NetDeviceContainer [class]
+    module.add_class('NetDeviceContainer', import_from_module='ns.network')
+    typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator', u'ns3::NetDeviceContainer::Iterator')
+    typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator*', u'ns3::NetDeviceContainer::Iterator*')
+    typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator&', u'ns3::NetDeviceContainer::Iterator&')
+    ## node-container.h (module 'network'): ns3::NodeContainer [class]
+    module.add_class('NodeContainer', import_from_module='ns.network')
+    typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Node > > const_iterator', u'ns3::NodeContainer::Iterator')
+    typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Node > > const_iterator*', u'ns3::NodeContainer::Iterator*')
+    typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Node > > const_iterator&', u'ns3::NodeContainer::Iterator&')
+    ## object-base.h (module 'core'): ns3::ObjectBase [class]
+    module.add_class('ObjectBase', allow_subclassing=True, import_from_module='ns.core')
+    ## object.h (module 'core'): ns3::ObjectDeleter [struct]
+    module.add_class('ObjectDeleter', import_from_module='ns.core')
+    ## object-factory.h (module 'core'): ns3::ObjectFactory [class]
+    module.add_class('ObjectFactory', import_from_module='ns.core')
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata [class]
+    module.add_class('PacketMetadata', import_from_module='ns.network')
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item [struct]
+    module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::PacketMetadata'])
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::ItemType [enumeration]
+    module.add_enum('ItemType', ['PAYLOAD', 'HEADER', 'TRAILER'], outer_class=root_module['ns3::PacketMetadata::Item'], import_from_module='ns.network')
+    ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator [class]
+    module.add_class('ItemIterator', import_from_module='ns.network', outer_class=root_module['ns3::PacketMetadata'])
+    ## packet.h (module 'network'): ns3::PacketTagIterator [class]
+    module.add_class('PacketTagIterator', import_from_module='ns.network')
+    ## packet.h (module 'network'): ns3::PacketTagIterator::Item [class]
+    module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::PacketTagIterator'])
+    ## packet-tag-list.h (module 'network'): ns3::PacketTagList [class]
+    module.add_class('PacketTagList', import_from_module='ns.network')
+    ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData [struct]
+    module.add_class('TagData', import_from_module='ns.network', outer_class=root_module['ns3::PacketTagList'])
+    ## pcap-file.h (module 'network'): ns3::PcapFile [class]
+    module.add_class('PcapFile', import_from_module='ns.network')
+    ## trace-helper.h (module 'network'): ns3::PcapHelper [class]
+    module.add_class('PcapHelper', import_from_module='ns.network')
+    ## trace-helper.h (module 'network'): ns3::PcapHelper::DataLinkType [enumeration]
+    module.add_enum('DataLinkType', ['DLT_NULL', 'DLT_EN10MB', 'DLT_PPP', 'DLT_RAW', 'DLT_IEEE802_11', 'DLT_LINUX_SLL', 'DLT_PRISM_HEADER', 'DLT_IEEE802_11_RADIO', 'DLT_IEEE802_15_4', 'DLT_NETLINK'], outer_class=root_module['ns3::PcapHelper'], import_from_module='ns.network')
+    ## trace-helper.h (module 'network'): ns3::PcapHelperForDevice [class]
+    module.add_class('PcapHelperForDevice', allow_subclassing=True, import_from_module='ns.network')
+    ## internet-trace-helper.h (module 'internet'): ns3::PcapHelperForIpv4 [class]
+    module.add_class('PcapHelperForIpv4', allow_subclassing=True, import_from_module='ns.internet')
+    ## internet-trace-helper.h (module 'internet'): ns3::PcapHelperForIpv6 [class]
+    module.add_class('PcapHelperForIpv6', allow_subclassing=True, import_from_module='ns.internet')
+    ## quic-socket-rx-buffer.h (module 'quic'): ns3::QuicSocketRxItem [class]
+    module.add_class('QuicSocketRxItem')
+    ## quic-socket-tx-buffer.h (module 'quic'): ns3::QuicSocketTxItem [class]
+    module.add_class('QuicSocketTxItem')
+    ## quic-stream-rx-buffer.h (module 'quic'): ns3::QuicStreamRxItem [class]
+    module.add_class('QuicStreamRxItem')
+    ## quic-stream-tx-buffer.h (module 'quic'): ns3::QuicStreamTxItem [class]
+    module.add_class('QuicStreamTxItem')
+    ## tcp-socket-base.h (module 'internet'): ns3::RttHistory [class]
+    module.add_class('RttHistory', import_from_module='ns.internet')
+    ## sequence-number.h (module 'network'): ns3::SequenceNumber<unsigned int, int> [class]
+    module.add_class('SequenceNumber32', import_from_module='ns.network')
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter> [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Object', 'ns3::ObjectBase', 'ns3::ObjectDeleter'], parent=root_module['ns3::ObjectBase'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
+    ## simulator.h (module 'core'): ns3::Simulator [class]
+    module.add_class('Simulator', destructor_visibility='private', import_from_module='ns.core')
+    ## simulator.h (module 'core'): ns3::Simulator [enumeration]
+    module.add_enum('', ['NO_CONTEXT'], outer_class=root_module['ns3::Simulator'], import_from_module='ns.core')
+    ## tag.h (module 'network'): ns3::Tag [class]
+    module.add_class('Tag', import_from_module='ns.network', parent=root_module['ns3::ObjectBase'])
+    ## tag-buffer.h (module 'network'): ns3::TagBuffer [class]
+    module.add_class('TagBuffer', import_from_module='ns.network')
+    ## nstime.h (module 'core'): ns3::TimeWithUnit [class]
+    module.add_class('TimeWithUnit', import_from_module='ns.core')
+    ## timer.h (module 'core'): ns3::Timer [class]
+    module.add_class('Timer', import_from_module='ns.core')
+    ## timer.h (module 'core'): ns3::Timer::DestroyPolicy [enumeration]
+    module.add_enum('DestroyPolicy', ['CANCEL_ON_DESTROY', 'REMOVE_ON_DESTROY', 'CHECK_ON_DESTROY'], outer_class=root_module['ns3::Timer'], import_from_module='ns.core')
+    ## timer.h (module 'core'): ns3::Timer::State [enumeration]
+    module.add_enum('State', ['RUNNING', 'EXPIRED', 'SUSPENDED'], outer_class=root_module['ns3::Timer'], import_from_module='ns.core')
+    ## timer-impl.h (module 'core'): ns3::TimerImpl [class]
+    module.add_class('TimerImpl', allow_subclassing=True, import_from_module='ns.core')
+    ## traced-value.h (module 'core'): ns3::TracedValue<ns3::QuicSocket::QuicStates_t> [class]
+    module.add_class('TracedValue', import_from_module='ns.core', template_parameters=['ns3::QuicSocket::QuicStates_t'])
+    ## traced-value.h (module 'core'): ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> > [class]
+    module.add_class('TracedValue', import_from_module='ns.core', template_parameters=['ns3::SequenceNumber<unsigned int, int>'])
+    ## traced-value.h (module 'core'): ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> > [class]
+    root_module['ns3::TracedValue< ns3::SequenceNumber<unsigned int, int> >'].implicitly_converts_to(root_module['ns3::SequenceNumber32'])
+    ## traced-value.h (module 'core'): ns3::TracedValue<ns3::TcpSocket::TcpStates_t> [class]
+    module.add_class('TracedValue', import_from_module='ns.core', template_parameters=['ns3::TcpSocket::TcpStates_t'])
+    ## traced-value.h (module 'core'): ns3::TracedValue<ns3::TcpSocketState::EcnState_t> [class]
+    module.add_class('TracedValue', import_from_module='ns.core', template_parameters=['ns3::TcpSocketState::EcnState_t'])
+    ## traced-value.h (module 'core'): ns3::TracedValue<ns3::TcpSocketState::TcpCongState_t> [class]
+    module.add_class('TracedValue', import_from_module='ns.core', template_parameters=['ns3::TcpSocketState::TcpCongState_t'])
+    ## traced-value.h (module 'core'): ns3::TracedValue<unsigned int> [class]
+    module.add_class('TracedValue', import_from_module='ns.core', template_parameters=['unsigned int'])
+    ## type-id.h (module 'core'): ns3::TypeId [class]
+    module.add_class('TypeId', import_from_module='ns.core')
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeFlag [enumeration]
+    module.add_enum('AttributeFlag', ['ATTR_GET', 'ATTR_SET', 'ATTR_CONSTRUCT', 'ATTR_SGC'], outer_class=root_module['ns3::TypeId'], import_from_module='ns.core')
+    ## type-id.h (module 'core'): ns3::TypeId::SupportLevel [enumeration]
+    module.add_enum('SupportLevel', ['SUPPORTED', 'DEPRECATED', 'OBSOLETE'], outer_class=root_module['ns3::TypeId'], import_from_module='ns.core')
+    ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation [struct]
+    module.add_class('AttributeInformation', import_from_module='ns.core', outer_class=root_module['ns3::TypeId'])
+    ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation [struct]
+    module.add_class('TraceSourceInformation', import_from_module='ns.core', outer_class=root_module['ns3::TypeId'])
+    typehandlers.add_type_alias(u'uint32_t', u'ns3::TypeId::hash_t')
+    typehandlers.add_type_alias(u'uint32_t*', u'ns3::TypeId::hash_t*')
+    typehandlers.add_type_alias(u'uint32_t&', u'ns3::TypeId::hash_t&')
+    ## empty.h (module 'core'): ns3::empty [class]
+    module.add_class('empty', import_from_module='ns.core')
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t [class]
+    module.add_class('int64x64_t', import_from_module='ns.core')
+    ## int64x64-128.h (module 'core'): ns3::int64x64_t::impl_type [enumeration]
+    module.add_enum('impl_type', ['int128_impl', 'cairo_impl', 'ld_impl'], outer_class=root_module['ns3::int64x64_t'], import_from_module='ns.core')
+    ## chunk.h (module 'network'): ns3::Chunk [class]
+    module.add_class('Chunk', import_from_module='ns.network', parent=root_module['ns3::ObjectBase'])
+    ## header.h (module 'network'): ns3::Header [class]
+    module.add_class('Header', import_from_module='ns.network', parent=root_module['ns3::Chunk'])
+    ## internet-stack-helper.h (module 'internet'): ns3::InternetStackHelper [class]
+    module.add_class('InternetStackHelper', import_from_module='ns.internet', parent=[root_module['ns3::PcapHelperForIpv4'], root_module['ns3::PcapHelperForIpv6'], root_module['ns3::AsciiTraceHelperForIpv4'], root_module['ns3::AsciiTraceHelperForIpv6']])
+    ## ipv4-header.h (module 'internet'): ns3::Ipv4Header [class]
+    module.add_class('Ipv4Header', import_from_module='ns.internet', parent=root_module['ns3::Header'])
+    ## ipv4-header.h (module 'internet'): ns3::Ipv4Header::DscpType [enumeration]
+    module.add_enum('DscpType', ['DscpDefault', 'DSCP_CS1', 'DSCP_AF11', 'DSCP_AF12', 'DSCP_AF13', 'DSCP_CS2', 'DSCP_AF21', 'DSCP_AF22', 'DSCP_AF23', 'DSCP_CS3', 'DSCP_AF31', 'DSCP_AF32', 'DSCP_AF33', 'DSCP_CS4', 'DSCP_AF41', 'DSCP_AF42', 'DSCP_AF43', 'DSCP_CS5', 'DSCP_EF', 'DSCP_CS6', 'DSCP_CS7'], outer_class=root_module['ns3::Ipv4Header'], import_from_module='ns.internet')
+    ## ipv4-header.h (module 'internet'): ns3::Ipv4Header::EcnType [enumeration]
+    module.add_enum('EcnType', ['ECN_NotECT', 'ECN_ECT1', 'ECN_ECT0', 'ECN_CE'], outer_class=root_module['ns3::Ipv4Header'], import_from_module='ns.internet')
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Header [class]
+    module.add_class('Ipv6Header', import_from_module='ns.internet', parent=root_module['ns3::Header'])
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Header::DscpType [enumeration]
+    module.add_enum('DscpType', ['DscpDefault', 'DSCP_CS1', 'DSCP_AF11', 'DSCP_AF12', 'DSCP_AF13', 'DSCP_CS2', 'DSCP_AF21', 'DSCP_AF22', 'DSCP_AF23', 'DSCP_CS3', 'DSCP_AF31', 'DSCP_AF32', 'DSCP_AF33', 'DSCP_CS4', 'DSCP_AF41', 'DSCP_AF42', 'DSCP_AF43', 'DSCP_CS5', 'DSCP_EF', 'DSCP_CS6', 'DSCP_CS7'], outer_class=root_module['ns3::Ipv6Header'], import_from_module='ns.internet')
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Header::NextHeader_e [enumeration]
+    module.add_enum('NextHeader_e', ['IPV6_EXT_HOP_BY_HOP', 'IPV6_IPV4', 'IPV6_TCP', 'IPV6_UDP', 'IPV6_IPV6', 'IPV6_EXT_ROUTING', 'IPV6_EXT_FRAGMENTATION', 'IPV6_EXT_CONFIDENTIALITY', 'IPV6_EXT_AUTHENTIFICATION', 'IPV6_ICMPV6', 'IPV6_EXT_END', 'IPV6_EXT_DESTINATION', 'IPV6_SCTP', 'IPV6_EXT_MOBILITY', 'IPV6_UDP_LITE'], outer_class=root_module['ns3::Ipv6Header'], import_from_module='ns.internet')
+    ## ipv6-header.h (module 'internet'): ns3::Ipv6Header::EcnType [enumeration]
+    module.add_enum('EcnType', ['ECN_NotECT', 'ECN_ECT1', 'ECN_ECT0', 'ECN_CE'], outer_class=root_module['ns3::Ipv6Header'], import_from_module='ns.internet')
+    ## object.h (module 'core'): ns3::Object [class]
+    module.add_class('Object', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter >'])
+    ## object.h (module 'core'): ns3::Object::AggregateIterator [class]
+    module.add_class('AggregateIterator', import_from_module='ns.core', outer_class=root_module['ns3::Object'])
+    ## pcap-file-wrapper.h (module 'network'): ns3::PcapFileWrapper [class]
+    module.add_class('PcapFileWrapper', import_from_module='ns.network', parent=root_module['ns3::Object'])
+    ## quic-header.h (module 'quic'): ns3::QuicHeader [class]
+    module.add_class('QuicHeader', parent=root_module['ns3::Header'])
+    ## quic-header.h (module 'quic'): ns3::QuicHeader::TypeFormat_t [enumeration]
+    module.add_enum('TypeFormat_t', ['SHORT', 'LONG'], outer_class=root_module['ns3::QuicHeader'])
+    ## quic-header.h (module 'quic'): ns3::QuicHeader::TypeLong_t [enumeration]
+    module.add_enum('TypeLong_t', ['VERSION_NEGOTIATION', 'INITIAL', 'RETRY', 'HANDSHAKE', 'ZRTT_PROTECTED', 'NONE'], outer_class=root_module['ns3::QuicHeader'])
+    ## quic-header.h (module 'quic'): ns3::QuicHeader::KeyPhase_t [enumeration]
+    module.add_enum('KeyPhase_t', ['PHASE_ZERO', 'PHASE_ONE'], outer_class=root_module['ns3::QuicHeader'])
+    ## quic-header.h (module 'quic'): ns3::QuicHeader::TypeShort_t [enumeration]
+    module.add_enum('TypeShort_t', ['ONE_OCTECT', 'TWO_OCTECTS', 'FOUR_OCTECTS'], outer_class=root_module['ns3::QuicHeader'])
+    typehandlers.add_type_alias(u'ns3::QuicHeader::TypeFormat_t', u'ns3::QuicHeader::TypeFormat_t')
+    typehandlers.add_type_alias(u'ns3::QuicHeader::TypeFormat_t*', u'ns3::QuicHeader::TypeFormat_t*')
+    typehandlers.add_type_alias(u'ns3::QuicHeader::TypeFormat_t&', u'ns3::QuicHeader::TypeFormat_t&')
+    typehandlers.add_type_alias(u'ns3::QuicHeader::TypeLong_t', u'ns3::QuicHeader::TypeLong_t')
+    typehandlers.add_type_alias(u'ns3::QuicHeader::TypeLong_t*', u'ns3::QuicHeader::TypeLong_t*')
+    typehandlers.add_type_alias(u'ns3::QuicHeader::TypeLong_t&', u'ns3::QuicHeader::TypeLong_t&')
+    typehandlers.add_type_alias(u'ns3::QuicHeader::KeyPhase_t', u'ns3::QuicHeader::KeyPhase_t')
+    typehandlers.add_type_alias(u'ns3::QuicHeader::KeyPhase_t*', u'ns3::QuicHeader::KeyPhase_t*')
+    typehandlers.add_type_alias(u'ns3::QuicHeader::KeyPhase_t&', u'ns3::QuicHeader::KeyPhase_t&')
+    typehandlers.add_type_alias(u'ns3::QuicHeader::TypeShort_t', u'ns3::QuicHeader::TypeShort_t')
+    typehandlers.add_type_alias(u'ns3::QuicHeader::TypeShort_t*', u'ns3::QuicHeader::TypeShort_t*')
+    typehandlers.add_type_alias(u'ns3::QuicHeader::TypeShort_t&', u'ns3::QuicHeader::TypeShort_t&')
+    ## quic-helper.h (module 'quic'): ns3::QuicHelper [class]
+    module.add_class('QuicHelper', parent=root_module['ns3::InternetStackHelper'])
+    ## quic-l5-protocol.h (module 'quic'): ns3::QuicL5Protocol [class]
+    module.add_class('QuicL5Protocol', parent=root_module['ns3::Object'])
+    ## quic-socket-rx-buffer.h (module 'quic'): ns3::QuicSocketRxBuffer [class]
+    module.add_class('QuicSocketRxBuffer', parent=root_module['ns3::Object'])
+    ## quic-socket-tx-buffer.h (module 'quic'): ns3::QuicSocketTxBuffer [class]
+    module.add_class('QuicSocketTxBuffer', parent=root_module['ns3::Object'])
+    ## quic-stream.h (module 'quic'): ns3::QuicStream [class]
+    module.add_class('QuicStream', parent=root_module['ns3::Object'])
+    ## quic-stream.h (module 'quic'): ns3::QuicStream::QuicStreamTypes_t [enumeration]
+    module.add_enum('QuicStreamTypes_t', ['CLIENT_INITIATED_BIDIRECTIONAL', 'SERVER_INITIATED_BIDIRECTIONAL', 'CLIENT_INITIATED_UNIDIRECTIONAL', 'SERVER_INITIATED_UNIDIRECTIONAL', 'NONE'], outer_class=root_module['ns3::QuicStream'])
+    ## quic-stream.h (module 'quic'): ns3::QuicStream::QuicStreamDirectionTypes_t [enumeration]
+    module.add_enum('QuicStreamDirectionTypes_t', ['SENDER', 'RECEIVER', 'BIDIRECTIONAL', 'UNKNOWN'], outer_class=root_module['ns3::QuicStream'])
+    ## quic-stream.h (module 'quic'): ns3::QuicStream::QuicStreamStates_t [enumeration]
+    module.add_enum('QuicStreamStates_t', ['IDLE', 'OPEN', 'SEND', 'RECV', 'SIZE_KNOWN', 'DATA_SENT', 'DATA_RECVD', 'DATA_READ', 'RESET_SENT', 'RESET_RECVD', 'RESET_READ', 'LAST_STATE'], outer_class=root_module['ns3::QuicStream'])
+    typehandlers.add_type_alias(u'ns3::QuicStream::QuicStreamTypes_t', u'ns3::QuicStream::QuicStreamTypes_t')
+    typehandlers.add_type_alias(u'ns3::QuicStream::QuicStreamTypes_t*', u'ns3::QuicStream::QuicStreamTypes_t*')
+    typehandlers.add_type_alias(u'ns3::QuicStream::QuicStreamTypes_t&', u'ns3::QuicStream::QuicStreamTypes_t&')
+    typehandlers.add_type_alias(u'ns3::QuicStream::QuicStreamDirectionTypes_t', u'ns3::QuicStream::QuicStreamDirectionTypes_t')
+    typehandlers.add_type_alias(u'ns3::QuicStream::QuicStreamDirectionTypes_t*', u'ns3::QuicStream::QuicStreamDirectionTypes_t*')
+    typehandlers.add_type_alias(u'ns3::QuicStream::QuicStreamDirectionTypes_t&', u'ns3::QuicStream::QuicStreamDirectionTypes_t&')
+    typehandlers.add_type_alias(u'ns3::QuicStream::QuicStreamStates_t', u'ns3::QuicStream::QuicStreamStates_t')
+    typehandlers.add_type_alias(u'ns3::QuicStream::QuicStreamStates_t*', u'ns3::QuicStream::QuicStreamStates_t*')
+    typehandlers.add_type_alias(u'ns3::QuicStream::QuicStreamStates_t&', u'ns3::QuicStream::QuicStreamStates_t&')
+    ## quic-stream-base.h (module 'quic'): ns3::QuicStreamBase [class]
+    module.add_class('QuicStreamBase', parent=root_module['ns3::QuicStream'])
+    ## quic-stream-rx-buffer.h (module 'quic'): ns3::QuicStreamRxBuffer [class]
+    module.add_class('QuicStreamRxBuffer', parent=root_module['ns3::Object'])
+    ## quic-stream-tx-buffer.h (module 'quic'): ns3::QuicStreamTxBuffer [class]
+    module.add_class('QuicStreamTxBuffer', parent=root_module['ns3::Object'])
+    ## quic-subheader.h (module 'quic'): ns3::QuicSubheader [class]
+    module.add_class('QuicSubheader', parent=root_module['ns3::Header'])
+    ## quic-subheader.h (module 'quic'): ns3::QuicSubheader::TypeFrame_t [enumeration]
+    module.add_enum('TypeFrame_t', ['PADDING', 'RST_STREAM', 'CONNECTION_CLOSE', 'APPLICATION_CLOSE', 'MAX_DATA', 'MAX_STREAM_DATA', 'MAX_STREAM_ID', 'PING', 'BLOCKED', 'STREAM_BLOCKED', 'STREAM_ID_BLOCKED', 'NEW_CONNECTION_ID', 'STOP_SENDING', 'ACK', 'PATH_CHALLENGE', 'PATH_RESPONSE', 'STREAM000', 'STREAM001', 'STREAM010', 'STREAM011', 'STREAM100', 'STREAM101', 'STREAM110', 'STREAM111'], outer_class=root_module['ns3::QuicSubheader'])
+    ## quic-subheader.h (module 'quic'): ns3::QuicSubheader::TransportErrorCodes_t [enumeration]
+    module.add_enum('TransportErrorCodes_t', ['NO_ERROR', 'INTERNAL_ERROR', 'SERVER_BUSY', 'FLOW_CONTROL_ERROR', 'STREAM_ID_ERROR', 'STREAM_STATE_ERROR', 'FINAL_OFFSET_ERROR', 'FRAME_FORMAT_ERROR', 'TRANSPORT_PARAMETER_ERROR', 'VERSION_NEGOTIATION_ERROR', 'PROTOCOL_VIOLATION', 'UNSOLICITED_PATH_ERROR', 'FRAME_ERROR'], outer_class=root_module['ns3::QuicSubheader'])
+    typehandlers.add_type_alias(u'ns3::QuicSubheader::TypeFrame_t', u'ns3::QuicSubheader::TypeFrame_t')
+    typehandlers.add_type_alias(u'ns3::QuicSubheader::TypeFrame_t*', u'ns3::QuicSubheader::TypeFrame_t*')
+    typehandlers.add_type_alias(u'ns3::QuicSubheader::TypeFrame_t&', u'ns3::QuicSubheader::TypeFrame_t&')
+    typehandlers.add_type_alias(u'ns3::QuicSubheader::TransportErrorCodes_t', u'ns3::QuicSubheader::TransportErrorCodes_t')
+    typehandlers.add_type_alias(u'ns3::QuicSubheader::TransportErrorCodes_t*', u'ns3::QuicSubheader::TransportErrorCodes_t*')
+    typehandlers.add_type_alias(u'ns3::QuicSubheader::TransportErrorCodes_t&', u'ns3::QuicSubheader::TransportErrorCodes_t&')
+    ## quic-transport-parameters.h (module 'quic'): ns3::QuicTransportParameters [class]
+    module.add_class('QuicTransportParameters', parent=root_module['ns3::Header'])
+    ## quic-l4-protocol.h (module 'quic'): ns3::QuicUdpBinding [class]
+    module.add_class('QuicUdpBinding', parent=root_module['ns3::Object'])
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> > [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> > [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeChecker', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeChecker>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> > [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeValue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeValue>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> > [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::CallbackImplBase', 'ns3::empty', 'ns3::DefaultDeleter<ns3::CallbackImplBase>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> > [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::EventImpl', 'ns3::empty', 'ns3::DefaultDeleter<ns3::EventImpl>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> > [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Hash::Implementation', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Hash::Implementation>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> > [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Ipv4MulticastRoute', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv4MulticastRoute>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> > [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Ipv4Route', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv4Route>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> > [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::NixVector', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NixVector>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> > [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::OutputStreamWrapper', 'ns3::empty', 'ns3::DefaultDeleter<ns3::OutputStreamWrapper>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> > [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Packet', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Packet>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
+    ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> > [class]
+    module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::TraceSourceAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::TraceSourceAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
+    ## socket.h (module 'network'): ns3::Socket [class]
+    module.add_class('Socket', import_from_module='ns.network', parent=root_module['ns3::Object'])
+    ## socket.h (module 'network'): ns3::Socket::SocketErrno [enumeration]
+    module.add_enum('SocketErrno', ['ERROR_NOTERROR', 'ERROR_ISCONN', 'ERROR_NOTCONN', 'ERROR_MSGSIZE', 'ERROR_AGAIN', 'ERROR_SHUTDOWN', 'ERROR_OPNOTSUPP', 'ERROR_AFNOSUPPORT', 'ERROR_INVAL', 'ERROR_BADF', 'ERROR_NOROUTETOHOST', 'ERROR_NODEV', 'ERROR_ADDRNOTAVAIL', 'ERROR_ADDRINUSE', 'SOCKET_ERRNO_LAST'], outer_class=root_module['ns3::Socket'], import_from_module='ns.network')
+    ## socket.h (module 'network'): ns3::Socket::SocketType [enumeration]
+    module.add_enum('SocketType', ['NS3_SOCK_STREAM', 'NS3_SOCK_SEQPACKET', 'NS3_SOCK_DGRAM', 'NS3_SOCK_RAW'], outer_class=root_module['ns3::Socket'], import_from_module='ns.network')
+    ## socket.h (module 'network'): ns3::Socket::SocketPriority [enumeration]
+    module.add_enum('SocketPriority', ['NS3_PRIO_BESTEFFORT', 'NS3_PRIO_FILLER', 'NS3_PRIO_BULK', 'NS3_PRIO_INTERACTIVE_BULK', 'NS3_PRIO_INTERACTIVE', 'NS3_PRIO_CONTROL'], outer_class=root_module['ns3::Socket'], import_from_module='ns.network')
+    ## socket.h (module 'network'): ns3::Socket::Ipv6MulticastFilterMode [enumeration]
+    module.add_enum('Ipv6MulticastFilterMode', ['INCLUDE', 'EXCLUDE'], outer_class=root_module['ns3::Socket'], import_from_module='ns.network')
+    ## socket-factory.h (module 'network'): ns3::SocketFactory [class]
+    module.add_class('SocketFactory', import_from_module='ns.network', parent=root_module['ns3::Object'])
+    ## socket.h (module 'network'): ns3::SocketIpTosTag [class]
+    module.add_class('SocketIpTosTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
+    ## socket.h (module 'network'): ns3::SocketIpTtlTag [class]
+    module.add_class('SocketIpTtlTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
+    ## socket.h (module 'network'): ns3::SocketIpv6HopLimitTag [class]
+    module.add_class('SocketIpv6HopLimitTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
+    ## socket.h (module 'network'): ns3::SocketIpv6TclassTag [class]
+    module.add_class('SocketIpv6TclassTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
+    ## socket.h (module 'network'): ns3::SocketPriorityTag [class]
+    module.add_class('SocketPriorityTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
+    ## socket.h (module 'network'): ns3::SocketSetDontFragmentTag [class]
+    module.add_class('SocketSetDontFragmentTag', import_from_module='ns.network', parent=root_module['ns3::Tag'])
+    ## tcp-congestion-ops.h (module 'internet'): ns3::TcpCongestionOps [class]
+    module.add_class('TcpCongestionOps', import_from_module='ns.internet', parent=root_module['ns3::Object'])
+    ## tcp-congestion-ops.h (module 'internet'): ns3::TcpNewReno [class]
+    module.add_class('TcpNewReno', import_from_module='ns.internet', parent=root_module['ns3::TcpCongestionOps'])
+    ## tcp-socket.h (module 'internet'): ns3::TcpSocket [class]
+    module.add_class('TcpSocket', import_from_module='ns.internet', parent=root_module['ns3::Socket'])
+    ## tcp-socket.h (module 'internet'): ns3::TcpSocket::TcpStates_t [enumeration]
+    module.add_enum('TcpStates_t', ['CLOSED', 'LISTEN', 'SYN_SENT', 'SYN_RCVD', 'ESTABLISHED', 'CLOSE_WAIT', 'LAST_ACK', 'FIN_WAIT_1', 'FIN_WAIT_2', 'CLOSING', 'TIME_WAIT', 'LAST_STATE'], outer_class=root_module['ns3::TcpSocket'], import_from_module='ns.internet')
+    typehandlers.add_type_alias(u'ns3::TcpSocket::TcpStates_t', u'ns3::TcpSocket::TcpStates_t')
+    typehandlers.add_type_alias(u'ns3::TcpSocket::TcpStates_t*', u'ns3::TcpSocket::TcpStates_t*')
+    typehandlers.add_type_alias(u'ns3::TcpSocket::TcpStates_t&', u'ns3::TcpSocket::TcpStates_t&')
+    ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketBase [class]
+    module.add_class('TcpSocketBase', import_from_module='ns.internet', parent=root_module['ns3::TcpSocket'])
+    ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketBase::EcnMode_t [enumeration]
+    module.add_enum('EcnMode_t', ['NoEcn', 'ClassicEcn'], outer_class=root_module['ns3::TcpSocketBase'], import_from_module='ns.internet')
+    typehandlers.add_type_alias(u'ns3::TcpSocketBase::EcnMode_t', u'ns3::TcpSocketBase::EcnMode_t')
+    typehandlers.add_type_alias(u'ns3::TcpSocketBase::EcnMode_t*', u'ns3::TcpSocketBase::EcnMode_t*')
+    typehandlers.add_type_alias(u'ns3::TcpSocketBase::EcnMode_t&', u'ns3::TcpSocketBase::EcnMode_t&')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::TcpHeader const &, ns3::Ptr< ns3::TcpSocketBase const > const )', u'ns3::TcpSocketBase::TcpTxRxTracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::TcpHeader const &, ns3::Ptr< ns3::TcpSocketBase const > const )*', u'ns3::TcpSocketBase::TcpTxRxTracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::TcpHeader const &, ns3::Ptr< ns3::TcpSocketBase const > const )&', u'ns3::TcpSocketBase::TcpTxRxTracedCallback&')
+    ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState [class]
+    module.add_class('TcpSocketState', import_from_module='ns.internet', parent=root_module['ns3::Object'])
+    ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::TcpCongState_t [enumeration]
+    module.add_enum('TcpCongState_t', ['CA_OPEN', 'CA_DISORDER', 'CA_CWR', 'CA_RECOVERY', 'CA_LOSS', 'CA_LAST_STATE'], outer_class=root_module['ns3::TcpSocketState'], import_from_module='ns.internet')
+    ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::TcpCAEvent_t [enumeration]
+    module.add_enum('TcpCAEvent_t', ['CA_EVENT_TX_START', 'CA_EVENT_CWND_RESTART', 'CA_EVENT_COMPLETE_CWR', 'CA_EVENT_LOSS', 'CA_EVENT_ECN_NO_CE', 'CA_EVENT_ECN_IS_CE', 'CA_EVENT_DELAYED_ACK', 'CA_EVENT_NON_DELAYED_ACK'], outer_class=root_module['ns3::TcpSocketState'], import_from_module='ns.internet')
+    ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::EcnState_t [enumeration]
+    module.add_enum('EcnState_t', ['ECN_DISABLED', 'ECN_IDLE', 'ECN_CE_RCVD', 'ECN_SENDING_ECE', 'ECN_ECE_RCVD', 'ECN_CWR_SENT'], outer_class=root_module['ns3::TcpSocketState'], import_from_module='ns.internet')
+    typehandlers.add_type_alias(u'ns3::TcpSocketState::TcpCongState_t', u'ns3::TcpSocketState::TcpCongState_t')
+    typehandlers.add_type_alias(u'ns3::TcpSocketState::TcpCongState_t*', u'ns3::TcpSocketState::TcpCongState_t*')
+    typehandlers.add_type_alias(u'ns3::TcpSocketState::TcpCongState_t&', u'ns3::TcpSocketState::TcpCongState_t&')
+    typehandlers.add_type_alias(u'ns3::TcpSocketState::TcpCAEvent_t', u'ns3::TcpSocketState::TcpCAEvent_t')
+    typehandlers.add_type_alias(u'ns3::TcpSocketState::TcpCAEvent_t*', u'ns3::TcpSocketState::TcpCAEvent_t*')
+    typehandlers.add_type_alias(u'ns3::TcpSocketState::TcpCAEvent_t&', u'ns3::TcpSocketState::TcpCAEvent_t&')
+    typehandlers.add_type_alias(u'ns3::TcpSocketState::EcnState_t', u'ns3::TcpSocketState::EcnState_t')
+    typehandlers.add_type_alias(u'ns3::TcpSocketState::EcnState_t*', u'ns3::TcpSocketState::EcnState_t*')
+    typehandlers.add_type_alias(u'ns3::TcpSocketState::EcnState_t&', u'ns3::TcpSocketState::EcnState_t&')
+    ## nstime.h (module 'core'): ns3::Time [class]
+    module.add_class('Time', import_from_module='ns.core')
+    ## nstime.h (module 'core'): ns3::Time::Unit [enumeration]
+    module.add_enum('Unit', ['Y', 'D', 'H', 'MIN', 'S', 'MS', 'US', 'NS', 'PS', 'FS', 'LAST'], outer_class=root_module['ns3::Time'], import_from_module='ns.core')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Time )', u'ns3::Time::TracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Time )*', u'ns3::Time::TracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Time )&', u'ns3::Time::TracedCallback&')
+    ## nstime.h (module 'core'): ns3::Time [class]
+    root_module['ns3::Time'].implicitly_converts_to(root_module['ns3::int64x64_t'])
+    ## trace-source-accessor.h (module 'core'): ns3::TraceSourceAccessor [class]
+    module.add_class('TraceSourceAccessor', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >'])
+    ## traced-value.h (module 'core'): ns3::TracedValue<ns3::Time> [class]
+    module.add_class('TracedValue', import_from_module='ns.core', template_parameters=['ns3::Time'])
+    ## traced-value.h (module 'core'): ns3::TracedValue<ns3::Time> [class]
+    root_module['ns3::TracedValue< ns3::Time >'].implicitly_converts_to(root_module['ns3::Time'])
+    ## trailer.h (module 'network'): ns3::Trailer [class]
+    module.add_class('Trailer', import_from_module='ns.network', parent=root_module['ns3::Chunk'])
+    ## attribute.h (module 'core'): ns3::AttributeAccessor [class]
+    module.add_class('AttributeAccessor', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >'])
+    ## attribute.h (module 'core'): ns3::AttributeChecker [class]
+    module.add_class('AttributeChecker', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >'])
+    ## attribute.h (module 'core'): ns3::AttributeValue [class]
+    module.add_class('AttributeValue', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >'])
+    ## boolean.h (module 'core'): ns3::BooleanChecker [class]
+    module.add_class('BooleanChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
+    ## boolean.h (module 'core'): ns3::BooleanValue [class]
+    module.add_class('BooleanValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## callback.h (module 'core'): ns3::CallbackChecker [class]
+    module.add_class('CallbackChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
+    ## callback.h (module 'core'): ns3::CallbackImplBase [class]
+    module.add_class('CallbackImplBase', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >'])
+    ## callback.h (module 'core'): ns3::CallbackValue [class]
+    module.add_class('CallbackValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## data-rate.h (module 'network'): ns3::DataRateChecker [class]
+    module.add_class('DataRateChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
+    ## data-rate.h (module 'network'): ns3::DataRateValue [class]
+    module.add_class('DataRateValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
+    ## double.h (module 'core'): ns3::DoubleValue [class]
+    module.add_class('DoubleValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## attribute.h (module 'core'): ns3::EmptyAttributeAccessor [class]
+    module.add_class('EmptyAttributeAccessor', import_from_module='ns.core', parent=root_module['ns3::AttributeAccessor'])
+    ## attribute.h (module 'core'): ns3::EmptyAttributeChecker [class]
+    module.add_class('EmptyAttributeChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
+    ## attribute.h (module 'core'): ns3::EmptyAttributeValue [class]
+    module.add_class('EmptyAttributeValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## enum.h (module 'core'): ns3::EnumChecker [class]
+    module.add_class('EnumChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
+    ## enum.h (module 'core'): ns3::EnumValue [class]
+    module.add_class('EnumValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## event-impl.h (module 'core'): ns3::EventImpl [class]
+    module.add_class('EventImpl', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >'])
+    ## integer.h (module 'core'): ns3::IntegerValue [class]
+    module.add_class('IntegerValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## ip-l4-protocol.h (module 'internet'): ns3::IpL4Protocol [class]
+    module.add_class('IpL4Protocol', import_from_module='ns.internet', parent=root_module['ns3::Object'])
+    ## ip-l4-protocol.h (module 'internet'): ns3::IpL4Protocol::RxStatus [enumeration]
+    module.add_enum('RxStatus', ['RX_OK', 'RX_CSUM_FAILED', 'RX_ENDPOINT_CLOSED', 'RX_ENDPOINT_UNREACH'], outer_class=root_module['ns3::IpL4Protocol'], import_from_module='ns.internet')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::IpL4Protocol::DownTargetCallback')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::IpL4Protocol::DownTargetCallback*')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::IpL4Protocol::DownTargetCallback&')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::IpL4Protocol::DownTargetCallback6')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::IpL4Protocol::DownTargetCallback6*')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::IpL4Protocol::DownTargetCallback6&')
+    ## ipv4.h (module 'internet'): ns3::Ipv4 [class]
+    module.add_class('Ipv4', import_from_module='ns.internet', parent=root_module['ns3::Object'])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressChecker [class]
+    module.add_class('Ipv4AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue [class]
+    module.add_class('Ipv4AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ipv4L3Protocol [class]
+    module.add_class('Ipv4L3Protocol', import_from_module='ns.internet', parent=root_module['ns3::Ipv4'])
+    ## ipv4-l3-protocol.h (module 'internet'): ns3::Ipv4L3Protocol::DropReason [enumeration]
+    module.add_enum('DropReason', ['DROP_TTL_EXPIRED', 'DROP_NO_ROUTE', 'DROP_BAD_CHECKSUM', 'DROP_INTERFACE_DOWN', 'DROP_ROUTE_ERROR', 'DROP_FRAGMENT_TIMEOUT'], outer_class=root_module['ns3::Ipv4L3Protocol'], import_from_module='ns.internet')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )', u'ns3::Ipv4L3Protocol::SentTracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )*', u'ns3::Ipv4L3Protocol::SentTracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )&', u'ns3::Ipv4L3Protocol::SentTracedCallback&')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )', u'ns3::Ipv4L3Protocol::TxRxTracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )*', u'ns3::Ipv4L3Protocol::TxRxTracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )&', u'ns3::Ipv4L3Protocol::TxRxTracedCallback&')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )', u'ns3::Ipv4L3Protocol::DropTracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )*', u'ns3::Ipv4L3Protocol::DropTracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )&', u'ns3::Ipv4L3Protocol::DropTracedCallback&')
+    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskChecker [class]
+    module.add_class('Ipv4MaskChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
+    ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue [class]
+    module.add_class('Ipv4MaskValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4MulticastRoute [class]
+    module.add_class('Ipv4MulticastRoute', import_from_module='ns.internet', parent=root_module['ns3::SimpleRefCount< ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> >'])
+    ## ipv4-route.h (module 'internet'): ns3::Ipv4Route [class]
+    module.add_class('Ipv4Route', import_from_module='ns.internet', parent=root_module['ns3::SimpleRefCount< ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> >'])
+    ## ipv4-routing-protocol.h (module 'internet'): ns3::Ipv4RoutingProtocol [class]
+    module.add_class('Ipv4RoutingProtocol', import_from_module='ns.internet', parent=root_module['ns3::Object'])
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Ipv4RoutingProtocol::UnicastForwardCallback')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Ipv4RoutingProtocol::UnicastForwardCallback*')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Ipv4RoutingProtocol::UnicastForwardCallback&')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Ipv4RoutingProtocol::MulticastForwardCallback')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Ipv4RoutingProtocol::MulticastForwardCallback*')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Ipv4RoutingProtocol::MulticastForwardCallback&')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Ipv4RoutingProtocol::LocalDeliverCallback')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Ipv4RoutingProtocol::LocalDeliverCallback*')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Ipv4RoutingProtocol::LocalDeliverCallback&')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Ipv4RoutingProtocol::ErrorCallback')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Ipv4RoutingProtocol::ErrorCallback*')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Ipv4RoutingProtocol::ErrorCallback&')
+    ## ipv6.h (module 'internet'): ns3::Ipv6 [class]
+    module.add_class('Ipv6', import_from_module='ns.internet', parent=root_module['ns3::Object'])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressChecker [class]
+    module.add_class('Ipv6AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue [class]
+    module.add_class('Ipv6AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ipv6L3Protocol [class]
+    module.add_class('Ipv6L3Protocol', import_from_module='ns.internet', parent=root_module['ns3::Ipv6'])
+    ## ipv6-l3-protocol.h (module 'internet'): ns3::Ipv6L3Protocol::DropReason [enumeration]
+    module.add_enum('DropReason', ['DROP_TTL_EXPIRED', 'DROP_NO_ROUTE', 'DROP_INTERFACE_DOWN', 'DROP_ROUTE_ERROR', 'DROP_UNKNOWN_PROTOCOL', 'DROP_UNKNOWN_OPTION', 'DROP_MALFORMED_HEADER', 'DROP_FRAGMENT_TIMEOUT'], outer_class=root_module['ns3::Ipv6L3Protocol'], import_from_module='ns.internet')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )', u'ns3::Ipv6L3Protocol::SentTracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )*', u'ns3::Ipv6L3Protocol::SentTracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )&', u'ns3::Ipv6L3Protocol::SentTracedCallback&')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )', u'ns3::Ipv6L3Protocol::TxRxTracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )*', u'ns3::Ipv6L3Protocol::TxRxTracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )&', u'ns3::Ipv6L3Protocol::TxRxTracedCallback&')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )', u'ns3::Ipv6L3Protocol::DropTracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )*', u'ns3::Ipv6L3Protocol::DropTracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )&', u'ns3::Ipv6L3Protocol::DropTracedCallback&')
+    ## ipv6-pmtu-cache.h (module 'internet'): ns3::Ipv6PmtuCache [class]
+    module.add_class('Ipv6PmtuCache', import_from_module='ns.internet', parent=root_module['ns3::Object'])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixChecker [class]
+    module.add_class('Ipv6PrefixChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
+    ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue [class]
+    module.add_class('Ipv6PrefixValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
+    ## mac48-address.h (module 'network'): ns3::Mac48AddressChecker [class]
+    module.add_class('Mac48AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
+    ## mac48-address.h (module 'network'): ns3::Mac48AddressValue [class]
+    module.add_class('Mac48AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
+    ## net-device.h (module 'network'): ns3::NetDevice [class]
+    module.add_class('NetDevice', import_from_module='ns.network', parent=root_module['ns3::Object'])
+    ## net-device.h (module 'network'): ns3::NetDevice::PacketType [enumeration]
+    module.add_enum('PacketType', ['PACKET_HOST', 'NS3_PACKET_HOST', 'PACKET_BROADCAST', 'NS3_PACKET_BROADCAST', 'PACKET_MULTICAST', 'NS3_PACKET_MULTICAST', 'PACKET_OTHERHOST', 'NS3_PACKET_OTHERHOST'], outer_class=root_module['ns3::NetDevice'], import_from_module='ns.network')
+    typehandlers.add_type_alias(u'void ( * ) (  )', u'ns3::NetDevice::LinkChangeTracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) (  )*', u'ns3::NetDevice::LinkChangeTracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) (  )&', u'ns3::NetDevice::LinkChangeTracedCallback&')
+    typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::NetDevice::ReceiveCallback')
+    typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::NetDevice::ReceiveCallback*')
+    typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::NetDevice::ReceiveCallback&')
+    typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', u'ns3::NetDevice::PromiscReceiveCallback')
+    typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::NetDevice::PromiscReceiveCallback*')
+    typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::NetDevice::PromiscReceiveCallback&')
+    ## nix-vector.h (module 'network'): ns3::NixVector [class]
+    module.add_class('NixVector', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >'])
+    ## node.h (module 'network'): ns3::Node [class]
+    module.add_class('Node', import_from_module='ns.network', parent=root_module['ns3::Object'])
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Node::ProtocolHandler')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Node::ProtocolHandler*')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Node::ProtocolHandler&')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Node::DeviceAdditionListener')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Node::DeviceAdditionListener*')
+    typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Node::DeviceAdditionListener&')
+    ## object-factory.h (module 'core'): ns3::ObjectFactoryChecker [class]
+    module.add_class('ObjectFactoryChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
+    ## object-factory.h (module 'core'): ns3::ObjectFactoryValue [class]
+    module.add_class('ObjectFactoryValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## output-stream-wrapper.h (module 'network'): ns3::OutputStreamWrapper [class]
+    module.add_class('OutputStreamWrapper', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> >'])
+    ## packet.h (module 'network'): ns3::Packet [class]
+    module.add_class('Packet', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >'])
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > )', u'ns3::Packet::TracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > )*', u'ns3::Packet::TracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > )&', u'ns3::Packet::TracedCallback&')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )', u'ns3::Packet::AddressTracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )*', u'ns3::Packet::AddressTracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )&', u'ns3::Packet::AddressTracedCallback&')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )', u'ns3::Packet::TwoAddressTracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )*', u'ns3::Packet::TwoAddressTracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )&', u'ns3::Packet::TwoAddressTracedCallback&')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )', u'ns3::Packet::Mac48AddressTracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )*', u'ns3::Packet::Mac48AddressTracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )&', u'ns3::Packet::Mac48AddressTracedCallback&')
+    typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t )', u'ns3::Packet::SizeTracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t )*', u'ns3::Packet::SizeTracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t )&', u'ns3::Packet::SizeTracedCallback&')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, double )', u'ns3::Packet::SinrTracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, double )*', u'ns3::Packet::SinrTracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, double )&', u'ns3::Packet::SinrTracedCallback&')
+    ## quic-congestion-ops.h (module 'quic'): ns3::QuicCongestionOps [class]
+    module.add_class('QuicCongestionOps', parent=root_module['ns3::TcpNewReno'])
+    ## quic-l4-protocol.h (module 'quic'): ns3::QuicL4Protocol [class]
+    module.add_class('QuicL4Protocol', parent=root_module['ns3::IpL4Protocol'])
+    ## quic-socket.h (module 'quic'): ns3::QuicSocket [class]
+    module.add_class('QuicSocket', parent=root_module['ns3::Socket'])
+    ## quic-socket.h (module 'quic'): ns3::QuicSocket::QuicSocketTypes_t [enumeration]
+    module.add_enum('QuicSocketTypes_t', ['CLIENT', 'SERVER', 'NONE'], outer_class=root_module['ns3::QuicSocket'])
+    ## quic-socket.h (module 'quic'): ns3::QuicSocket::QuicStates_t [enumeration]
+    module.add_enum('QuicStates_t', ['IDLE', 'LISTENING', 'CONNECTING_SVR', 'CONNECTING_CLT', 'OPEN', 'CLOSING', 'LAST_STATE'], outer_class=root_module['ns3::QuicSocket'])
+    typehandlers.add_type_alias(u'ns3::QuicSocket::QuicSocketTypes_t', u'ns3::QuicSocket::QuicSocketTypes_t')
+    typehandlers.add_type_alias(u'ns3::QuicSocket::QuicSocketTypes_t*', u'ns3::QuicSocket::QuicSocketTypes_t*')
+    typehandlers.add_type_alias(u'ns3::QuicSocket::QuicSocketTypes_t&', u'ns3::QuicSocket::QuicSocketTypes_t&')
+    typehandlers.add_type_alias(u'ns3::QuicSocket::QuicStates_t', u'ns3::QuicSocket::QuicStates_t')
+    typehandlers.add_type_alias(u'ns3::QuicSocket::QuicStates_t*', u'ns3::QuicSocket::QuicStates_t*')
+    typehandlers.add_type_alias(u'ns3::QuicSocket::QuicStates_t&', u'ns3::QuicSocket::QuicStates_t&')
+    ## quic-socket-base.h (module 'quic'): ns3::QuicSocketBase [class]
+    module.add_class('QuicSocketBase', parent=root_module['ns3::QuicSocket'])
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::QuicHeader const &, ns3::Ptr< ns3::QuicSocketBase const > const )', u'ns3::QuicSocketBase::QuicTxRxTracedCallback')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::QuicHeader const &, ns3::Ptr< ns3::QuicSocketBase const > const )*', u'ns3::QuicSocketBase::QuicTxRxTracedCallback*')
+    typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::QuicHeader const &, ns3::Ptr< ns3::QuicSocketBase const > const )&', u'ns3::QuicSocketBase::QuicTxRxTracedCallback&')
+    ## quic-socket-factory.h (module 'quic'): ns3::QuicSocketFactory [class]
+    module.add_class('QuicSocketFactory', parent=root_module['ns3::SocketFactory'])
+    ## quic-socket-base.h (module 'quic'): ns3::QuicSocketState [class]
+    module.add_class('QuicSocketState', parent=root_module['ns3::TcpSocketState'])
+    ## nstime.h (module 'core'): ns3::TimeValue [class]
+    module.add_class('TimeValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## type-id.h (module 'core'): ns3::TypeIdChecker [class]
+    module.add_class('TypeIdChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])
+    ## type-id.h (module 'core'): ns3::TypeIdValue [class]
+    module.add_class('TypeIdValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## uinteger.h (module 'core'): ns3::UintegerValue [class]
+    module.add_class('UintegerValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])
+    ## address.h (module 'network'): ns3::AddressChecker [class]
+    module.add_class('AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
+    ## address.h (module 'network'): ns3::AddressValue [class]
+    module.add_class('AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['bool', 'ns3::Ptr<ns3::Socket>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['ns3::ObjectBase *', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'const ns3::Ipv4Header &', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ipv4L3Protocol::DropReason', 'ns3::Ptr<ns3::Ipv4>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'const ns3::Ipv4Header &', 'ns3::Ptr<const ns3::Packet>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'const ns3::Ipv6Header &', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ipv6L3Protocol::DropReason', 'ns3::Ptr<ns3::Ipv6>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'const ns3::Ipv6Header &', 'ns3::Ptr<const ns3::Packet>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::QuicHeader &, ns3::Ptr<const ns3::QuicSocketBase>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'const ns3::QuicHeader &', 'ns3::Ptr<const ns3::QuicSocketBase>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::TcpHeader &, ns3::Ptr<const ns3::TcpSocketBase>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'const ns3::TcpHeader &', 'ns3::Ptr<const ns3::TcpSocketBase>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ptr<ns3::Ipv4>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ptr<ns3::Ipv6>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'const ns3::Address &', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, const ns3::QuicHeader &, ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'const ns3::QuicHeader &', 'ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv4Address', 'ns3::Ipv4Address', 'unsigned char', 'ns3::Ptr<ns3::Ipv4Route>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv6Address', 'ns3::Ipv6Address', 'unsigned char', 'ns3::Ptr<ns3::Ipv6Route>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::QuicSocket::QuicStates_t, ns3::QuicSocket::QuicStates_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::QuicSocket::QuicStates_t', 'ns3::QuicSocket::QuicStates_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::SequenceNumber<unsigned int, int>, ns3::SequenceNumber<unsigned int, int>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::SequenceNumber<unsigned int, int>', 'ns3::SequenceNumber<unsigned int, int>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::TcpSocket::TcpStates_t, ns3::TcpSocket::TcpStates_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::TcpSocket::TcpStates_t', 'ns3::TcpSocket::TcpStates_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::TcpSocketState::EcnState_t, ns3::TcpSocketState::EcnState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::TcpSocketState::EcnState_t', 'ns3::TcpSocketState::EcnState_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::TcpSocketState::TcpCongState_t, ns3::TcpSocketState::TcpCongState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::TcpSocketState::TcpCongState_t', 'ns3::TcpSocketState::TcpCongState_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Time', 'ns3::Time', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
+    module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'unsigned int', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
+    module.add_container('std::vector< unsigned int >', 'unsigned int', container_type=u'vector')
+    module.add_container('std::vector< ns3::Ptr< ns3::Packet > >', 'ns3::Ptr< ns3::Packet >', container_type=u'vector')
+    module.add_container('std::vector< std::pair< ns3::Ptr< ns3::Packet >, ns3::QuicSubheader > >', 'std::pair< ns3::Ptr< ns3::Packet >, ns3::QuicSubheader >', container_type=u'vector')
+    module.add_container('std::vector< ns3::QuicSocketTxItem * >', 'ns3::QuicSocketTxItem *', container_type=u'vector')
diff --git a/src/quic/doc/quic.rst b/src/quic/doc/quic.rst
new file mode 100644
index 000000000..90c4c0ac2
--- /dev/null
+++ b/src/quic/doc/quic.rst
@@ -0,0 +1,98 @@
+Example Module Documentation
+----------------------------
+
+.. include:: replace.txt
+.. highlight:: cpp
+
+.. heading hierarchy:
+   ------------- Chapter
+   ************* Section (#.#)
+   ============= Subsection (#.#.#)
+   ############# Paragraph (no number)
+
+This is a suggested outline for adding new module documentation to |ns3|.
+See ``src/click/doc/click.rst`` for an example.
+
+The introductory paragraph is for describing what this code is trying to
+model.
+
+For consistency (italicized formatting), please use |ns3| to refer to
+ns-3 in the documentation (and likewise, |ns2| for ns-2).  These macros
+are defined in the file ``replace.txt``.
+
+Model Description
+*****************
+
+The source code for the new module lives in the directory ``src/quic``.
+
+Add here a basic description of what is being modeled.
+
+Design
+======
+
+Briefly describe the software design of the model and how it fits into 
+the existing ns-3 architecture. 
+
+Scope and Limitations
+=====================
+
+What can the model do?  What can it not do?  Please use this section to
+describe the scope and limitations of the model.
+
+References
+==========
+
+Add academic citations here, such as if you published a paper on this
+model, or if readers should read a particular specification or other work.
+
+Usage
+*****
+
+This section is principally concerned with the usage of your model, using
+the public API.  Focus first on most common usage patterns, then go
+into more advanced topics.
+
+Building New Module
+===================
+
+Include this subsection only if there are special build instructions or
+platform limitations.
+
+Helpers
+=======
+
+What helper API will users typically use?  Describe it here.
+
+Attributes
+==========
+
+What classes hold attributes, and what are the key ones worth mentioning?
+
+Output
+======
+
+What kind of data does the model generate?  What are the key trace
+sources?   What kind of logging output can be enabled?
+
+Advanced Usage
+==============
+
+Go into further details (such as using the API outside of the helpers)
+in additional sections, as needed.
+
+Examples
+========
+
+What examples using this new code are available?  Describe them here.
+
+Troubleshooting
+===============
+
+Add any tips for avoiding pitfalls, etc.
+
+Validation
+**********
+
+Describe how the model has been tested/validated.  What tests run in the
+test suite?  How much API and code is covered by the tests?  Again, 
+references to outside published work may help here.
diff --git a/src/quic/examples/quic-pacing.cc b/src/quic/examples/quic-pacing.cc
new file mode 100644
index 000000000..91d73d59c
--- /dev/null
+++ b/src/quic/examples/quic-pacing.cc
@@ -0,0 +1,153 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+// Network topology
+//
+//       n0 ----------- n1
+//            40 Gbps
+//            0.01 ms
+
+// This programs illustrates how QUIC pacing can be used and how user can set
+// pacing rate. The program gives information about each flow like transmitted
+// and received bytes (packets) and throughput of that flow. Currently, it is 
+// using QUIC NewReno-like but in future after having congestion control algorithms 
+// which can change pacing rate can be used.
+
+#include <string>
+#include <fstream>
+#include "ns3/core-module.h"
+#include "ns3/point-to-point-module.h"
+#include "ns3/internet-module.h"
+#include "ns3/quic-module.h"
+#include "ns3/applications-module.h"
+#include "ns3/network-module.h"
+#include "ns3/packet-sink.h"
+#include "ns3/flow-monitor-module.h"
+
+using namespace ns3;
+
+NS_LOG_COMPONENT_DEFINE ("QuicPacingExample");
+
+int
+main (int argc, char *argv[])
+{
+
+  bool tracing = false;
+  uint32_t maxBytes = 0;
+  uint32_t QUICFlows = 1;
+  bool isPacingEnabled = true;
+  std::string pacingRate = "4Gbps";
+  uint32_t maxPackets = 0;
+
+  CommandLine cmd;
+  cmd.AddValue ("tracing", "Flag to enable/disable tracing", tracing);
+  cmd.AddValue ("maxBytes",
+                "Total number of bytes for application to send", maxBytes);
+  cmd.AddValue ("maxPackets",
+                "Total number of bytes for application to send", maxPackets);
+  cmd.AddValue ("QUICFlows", "Number of application flows between sender and receiver", QUICFlows);
+  cmd.AddValue ("Pacing", "Flag to enable/disable pacing in QUIC", isPacingEnabled);
+  cmd.AddValue ("PacingRate", "Max Pacing Rate in bps", pacingRate);
+  cmd.Parse (argc, argv);
+
+  if (maxPackets != 0 )
+    {
+      maxBytes = 500 * maxPackets;
+    }
+
+  Config::SetDefault ("ns3::TcpSocketState::MaxPacingRate", StringValue (pacingRate));
+  Config::SetDefault ("ns3::TcpSocketState::EnablePacing", BooleanValue (isPacingEnabled));
+
+  NS_LOG_INFO ("Create nodes.");
+  NodeContainer nodes;
+  nodes.Create (2);
+
+  NS_LOG_INFO ("Create channels.");
+  PointToPointHelper pointToPoint;
+  pointToPoint.SetDeviceAttribute ("DataRate", StringValue ("40Gbps"));
+  pointToPoint.SetChannelAttribute ("Delay", StringValue ("0.01ms"));
+
+  NetDeviceContainer devices;
+  devices = pointToPoint.Install (nodes);
+
+  QuicHelper stack;
+  stack.InstallQuic (nodes);
+
+  NS_LOG_INFO ("Assign IP Addresses.");
+  Ipv4AddressHelper ipv4;
+  ipv4.SetBase ("10.1.1.0", "255.255.255.0");
+  Ipv4InterfaceContainer i = ipv4.Assign (devices);
+
+  NS_LOG_INFO ("Create Applications.");
+
+  ApplicationContainer sourceApps;
+  ApplicationContainer sinkApps;
+  for (uint32_t iterator = 0; iterator < QUICFlows; iterator++)
+    {
+      uint16_t port = 10000 + iterator;
+
+      BulkSendHelper source  ("ns3::QuicSocketFactory",
+                              InetSocketAddress (i.GetAddress (1), port));
+      // Set the amount of data to send in bytes.  Zero is unlimited.
+      source.SetAttribute ("MaxBytes", UintegerValue (maxBytes));
+      sourceApps.Add (source.Install (nodes.Get (0)));
+
+    PacketSinkHelper sink ("ns3::QuicSocketFactory",
+                             InetSocketAddress (Ipv4Address::GetAny (), port));
+      sinkApps.Add (sink.Install (nodes.Get (1)));
+    }
+
+  sinkApps.Start (Seconds (0.0));
+  sinkApps.Stop (Seconds (5));
+  sourceApps.Start (Seconds (1));
+  sourceApps.Stop (Seconds (5));
+
+  if (tracing)
+    {
+      AsciiTraceHelper ascii;
+      pointToPoint.EnableAsciiAll (ascii.CreateFileStream ("quic-pacing.tr"));
+      pointToPoint.EnablePcapAll ("quic-pacing", false);
+    }
+
+  FlowMonitorHelper flowmon;
+  Ptr<FlowMonitor> monitor = flowmon.InstallAll ();
+
+  NS_LOG_INFO ("Run Simulation.");
+  Simulator::Stop (Seconds (5));
+  Simulator::Run ();
+
+  monitor->CheckForLostPackets ();
+  Ptr<Ipv4FlowClassifier> classifier = DynamicCast<Ipv4FlowClassifier> (flowmon.GetClassifier ());
+  FlowMonitor::FlowStatsContainer stats = monitor->GetFlowStats ();
+  for (std::map<FlowId, FlowMonitor::FlowStats>::const_iterator i = stats.begin (); i != stats.end (); ++i)
+    {
+      Ipv4FlowClassifier::FiveTuple t = classifier->FindFlow (i->first);
+      if (t.sourceAddress == "10.1.1.2")
+        {
+          continue;
+        }
+      std::cout << "Flow " << i->first  << " (" << t.sourceAddress << " -> " << t.destinationAddress << ")\n";
+      std::cout << "  Tx Packets: " << i->second.txPackets << "\n";
+      std::cout << "  Tx Bytes:   " << i->second.txBytes << "\n";
+      std::cout << "  TxOffered:  " << i->second.txBytes * 8.0 / 9.0 / 1000 / 1000  << " Mbps\n";
+      std::cout << "  Rx Packets: " << i->second.rxPackets << "\n";
+      std::cout << "  Rx Bytes:   " << i->second.rxBytes << "\n";
+      std::cout << "  Throughput: " << i->second.rxBytes * 8.0 / 9.0 / 1000 / 1000  << " Mbps\n";
+    }
+
+  Simulator::Destroy ();
+  NS_LOG_INFO ("Done.");
+}
diff --git a/src/quic/examples/quic-tester-streams.cc b/src/quic/examples/quic-tester-streams.cc
new file mode 100644
index 000000000..99557f8ef
--- /dev/null
+++ b/src/quic/examples/quic-tester-streams.cc
@@ -0,0 +1,205 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <whatever@blbl.it>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *          
+ */
+
+#include "ns3/core-module.h"
+#include "ns3/network-module.h"
+#include "ns3/internet-module.h"
+#include "ns3/quic-module.h"
+#include "ns3/point-to-point-module.h"
+#include "ns3/applications-module.h"
+#include "ns3/config-store-module.h"
+#include <iostream>
+
+using namespace ns3;
+
+NS_LOG_COMPONENT_DEFINE("QuicTesterStreams");
+
+// connect to a number of traces
+static void
+CwndChange (Ptr<OutputStreamWrapper> stream, uint32_t oldCwnd, uint32_t newCwnd)
+{
+  *stream->GetStream () << Simulator::Now ().GetSeconds () << "\t" << oldCwnd << "\t" << newCwnd << std::endl;
+}
+
+static void
+RttChange (Ptr<OutputStreamWrapper> stream, Time oldRtt, Time newRtt)
+{
+  *stream->GetStream () << Simulator::Now ().GetSeconds () << "\t" << oldRtt.GetSeconds () << "\t" << newRtt.GetSeconds () << std::endl;
+}
+
+static void
+Rx (Ptr<OutputStreamWrapper> stream, Ptr<const Packet> p, const QuicHeader& q, Ptr<const QuicSocketBase> qsb)
+{
+  *stream->GetStream () << Simulator::Now ().GetSeconds () << "\t" << p->GetSize() << std::endl;
+}
+
+static void
+Traces(uint32_t serverId, std::string pathVersion, std::string finalPart)
+{
+  AsciiTraceHelper asciiTraceHelper;
+
+  std::ostringstream pathCW;
+  pathCW << "/NodeList/" << serverId << "/$ns3::QuicL4Protocol/SocketList/0/QuicSocketBase/CongestionWindow";
+  NS_LOG_INFO("Matches cw " << Config::LookupMatches(pathCW.str().c_str()).GetN());
+
+  std::ostringstream fileCW;
+  fileCW << pathVersion << "QUIC-cwnd-change"  << serverId << "" << finalPart;
+
+  std::ostringstream pathRTT;
+  pathRTT << "/NodeList/" << serverId << "/$ns3::QuicL4Protocol/SocketList/0/QuicSocketBase/RTT";
+
+  std::ostringstream fileRTT;
+  fileRTT << pathVersion << "QUIC-rtt"  << serverId << "" << finalPart;
+
+  std::ostringstream pathRCWnd;
+  pathRCWnd<< "/NodeList/" << serverId << "/$ns3::QuicL4Protocol/SocketList/0/QuicSocketBase/RWND";
+
+  std::ostringstream fileRCWnd;
+  fileRCWnd<<pathVersion << "QUIC-rwnd-change"  << serverId << "" << finalPart;
+
+  std::ostringstream fileName;
+  fileName << pathVersion << "QUIC-rx-data" << serverId << "" << finalPart;
+  std::ostringstream pathRx;
+  pathRx << "/NodeList/" << serverId << "/$ns3::QuicL4Protocol/SocketList/*/QuicSocketBase/Rx";
+  NS_LOG_INFO("Matches rx " << Config::LookupMatches(pathRx.str().c_str()).GetN());
+
+  Ptr<OutputStreamWrapper> stream = asciiTraceHelper.CreateFileStream (fileName.str ().c_str ());
+  Config::ConnectWithoutContext (pathRx.str ().c_str (), MakeBoundCallback (&Rx, stream));
+
+  Ptr<OutputStreamWrapper> stream1 = asciiTraceHelper.CreateFileStream (fileCW.str ().c_str ());
+  Config::ConnectWithoutContext (pathCW.str ().c_str (), MakeBoundCallback(&CwndChange, stream1));
+
+  Ptr<OutputStreamWrapper> stream2 = asciiTraceHelper.CreateFileStream (fileRTT.str ().c_str ());
+  Config::ConnectWithoutContext (pathRTT.str ().c_str (), MakeBoundCallback(&RttChange, stream2));
+
+  Ptr<OutputStreamWrapper> stream4 = asciiTraceHelper.CreateFileStream (fileRCWnd.str ().c_str ());
+  Config::ConnectWithoutContextFailSafe (pathRCWnd.str ().c_str (), MakeBoundCallback(&CwndChange, stream4));
+}
+
+int
+main (int argc, char *argv[])
+{
+  CommandLine cmd;
+  cmd.Parse (argc, argv);
+
+  Config::SetDefault ("ns3::QuicSocketBase::SocketSndBufSize", UintegerValue(40000000));
+  Config::SetDefault ("ns3::QuicSocketBase::SocketRcvBufSize", UintegerValue(40000000));
+  Config::SetDefault ("ns3::QuicStreamBase::StreamSndBufSize", UintegerValue(40000000));
+  Config::SetDefault ("ns3::QuicStreamBase::StreamRcvBufSize", UintegerValue(40000000));
+  Config::SetDefault ("ns3::QuicSocketBase::SchedulingPolicy", TypeIdValue(QuicSocketTxEdfScheduler::GetTypeId ()));
+  
+  std::cout
+      << "\n\n#################### SIMULATION SET-UP ####################\n\n\n";
+
+  LogLevel log_precision = LOG_LEVEL_INFO;
+  Time::SetResolution (Time::NS);
+  LogComponentEnableAll (LOG_PREFIX_TIME);
+  LogComponentEnableAll (LOG_PREFIX_FUNC);
+  LogComponentEnableAll (LOG_PREFIX_NODE);
+  LogComponentEnable ("QuicEchoClientApplication", log_precision);
+  LogComponentEnable ("QuicEchoServerApplication", log_precision);
+  //LogComponentEnable ("QuicSocketBase", log_precision);
+  LogComponentEnable ("QuicStreamBase", log_precision);
+  LogComponentEnable("QuicStreamRxBuffer", log_precision);
+  LogComponentEnable("QuicStreamTxBuffer", log_precision);
+  LogComponentEnable("QuicSocketTxScheduler", log_precision);
+  LogComponentEnable("QuicSocketTxEdfScheduler", log_precision);
+  //LogComponentEnable ("Socket", log_precision);
+  // LogComponentEnable ("Application", log_precision);
+  // LogComponentEnable ("Node", log_precision);
+  //LogComponentEnable ("InternetStackHelper", log_precision);
+  //LogComponentEnable ("QuicSocketFactory", log_precision);
+  //LogComponentEnable ("ObjectFactory", log_precision);
+  //LogComponentEnable ("TypeId", log_precision);
+  //LogComponentEnable ("QuicL4Protocol", log_precision);
+  LogComponentEnable ("QuicL5Protocol", log_precision);
+  //LogComponentEnable ("ObjectBase", log_precision);
+
+  //LogComponentEnable ("QuicEchoHelper", log_precision);
+  //LogComponentEnable ("UdpSocketImpl", log_precision);
+  //LogComponentEnable ("QuicHeader", log_precision);
+  //LogComponentEnable ("QuicSubheader", log_precision);
+  //LogComponentEnable ("Header", log_precision);
+  //LogComponentEnable ("PacketMetadata", log_precision);
+  LogComponentEnable ("QuicSocketTxBuffer", log_precision);
+
+
+  NodeContainer nodes;
+  nodes.Create (2);
+  auto n1 = nodes.Get (0);
+  auto n2 = nodes.Get (1);
+
+  PointToPointHelper pointToPoint;
+  pointToPoint.SetDeviceAttribute ("DataRate", StringValue ("8Mbps"));
+  pointToPoint.SetChannelAttribute ("Delay", StringValue ("20ms"));
+
+  NetDeviceContainer devices;
+  devices = pointToPoint.Install (nodes);
+
+  QuicHelper stack;
+  stack.InstallQuic (nodes);
+  
+  Ipv4AddressHelper address;
+  address.SetBase ("10.1.1.0", "255.255.255.0");
+
+  Ipv4InterfaceContainer interfaces = address.Assign (devices);
+
+  ApplicationContainer clientApps;
+  ApplicationContainer serverApps;
+
+  // QUIC client and server
+  uint32_t dlPort = 1025;
+  QuicServerHelper dlPacketSinkHelper (dlPort);
+  serverApps.Add (dlPacketSinkHelper.Install (n2));
+
+  double interPacketInterval = 1000;
+  QuicClientHelper dlClient (interfaces.GetAddress (1), dlPort);
+  dlClient.SetAttribute ("Interval", TimeValue (MicroSeconds(interPacketInterval)));
+  dlClient.SetAttribute ("PacketSize", UintegerValue(1000));
+  dlClient.SetAttribute ("MaxPackets", UintegerValue(10000000));
+  clientApps.Add (dlClient.Install (n1));
+
+  serverApps.Start (Seconds (0.99));
+  clientApps.Stop (Seconds (5.0));
+  clientApps.Start (Seconds (1.0));
+
+  Simulator::Schedule (Seconds (2.0000001), &Traces, n2->GetId(),
+        "./server", ".txt");
+  Simulator::Schedule (Seconds (2.0000001), &Traces, n1->GetId(),
+        "./client", ".txt");
+
+  Packet::EnablePrinting ();
+  Packet::EnableChecking ();
+
+  std::cout << "\n\n#################### STARTING RUN ####################\n\n";
+  Simulator::Stop (Seconds (3000));
+  Simulator::Run ();
+  std::cout
+      << "\n\n#################### RUN FINISHED ####################\n\n\n";
+  Simulator::Destroy ();
+
+  std::cout
+      << "\n\n#################### SIMULATION END ####################\n\n\n";
+  return 0;
+}
diff --git a/src/quic/examples/quic-tester.cc b/src/quic/examples/quic-tester.cc
new file mode 100644
index 000000000..955828786
--- /dev/null
+++ b/src/quic/examples/quic-tester.cc
@@ -0,0 +1,125 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <whatever@blbl.it>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *          
+ */
+
+#include "ns3/core-module.h"
+#include "ns3/network-module.h"
+#include "ns3/internet-module.h"
+#include "ns3/quic-module.h"
+#include "ns3/point-to-point-module.h"
+#include "ns3/applications-module.h"
+#include "ns3/config-store-module.h"
+#include <iostream>
+
+using namespace ns3;
+
+NS_LOG_COMPONENT_DEFINE("quic-tester");
+
+int
+main (int argc, char *argv[])
+{
+  CommandLine cmd;
+  cmd.Parse (argc, argv);
+
+  std::cout
+      << "\n\n#################### SIMULATION SET-UP ####################\n\n\n";
+
+  LogLevel log_precision = LOG_LEVEL_LOGIC;
+  Time::SetResolution (Time::NS);
+  LogComponentEnableAll (LOG_PREFIX_TIME);
+  LogComponentEnableAll (LOG_PREFIX_FUNC);
+  LogComponentEnableAll (LOG_PREFIX_NODE);
+  LogComponentEnable ("QuicEchoClientApplication", log_precision);
+  LogComponentEnable ("QuicEchoServerApplication", log_precision);
+//  LogComponentEnable ("QuicHeader", log_precision);
+  //LogComponentEnable ("QuicSocketBase", log_precision);
+//  LogComponentEnable ("QuicStreamBase", LOG_LEVEL_LOGIC);
+//  LogComponentEnable ("Socket", log_precision);
+//  LogComponentEnable ("Application", log_precision);
+//  LogComponentEnable ("Node", log_precision);
+//  LogComponentEnable ("InternetStackHelper", log_precision);
+//  LogComponentEnable ("QuicSocketFactory", log_precision);
+//  LogComponentEnable ("ObjectFactory", log_precision);
+//  //LogComponentEnable ("TypeId", log_precision);
+//  LogComponentEnable ("QuicL4Protocol", log_precision);
+//  LogComponentEnable ("QuicL5Protocol", log_precision);
+//  //LogComponentEnable ("ObjectBase", log_precision);
+//
+//  LogComponentEnable ("QuicEchoHelper", log_precision);
+    LogComponentEnable ("QuicSocketTxScheduler", log_precision);
+//  LogComponentEnable ("QuicSocketRxBuffer", log_precision);
+//  LogComponentEnable ("QuicHeader", log_precision);
+//  LogComponentEnable ("QuicSubheader", log_precision);
+//  LogComponentEnable ("Header", log_precision);
+//  LogComponentEnable ("PacketMetadata", log_precision);
+
+
+  NodeContainer nodes;
+  nodes.Create (2);
+  auto n1 = nodes.Get (0);
+  auto n2 = nodes.Get (1);
+
+  PointToPointHelper pointToPoint;
+  pointToPoint.SetDeviceAttribute ("DataRate", StringValue ("5Mbps"));
+  pointToPoint.SetChannelAttribute ("Delay", StringValue ("2ms"));
+
+  NetDeviceContainer devices;
+  devices = pointToPoint.Install (nodes);
+
+  QuicHelper stack;
+  stack.InstallQuic (nodes);
+
+  Ipv4AddressHelper address;
+  address.SetBase ("10.1.1.0", "255.255.255.0");
+
+  Ipv4InterfaceContainer interfaces = address.Assign (devices);
+
+  QuicEchoServerHelper echoServer (9);
+
+  ApplicationContainer serverApps = echoServer.Install (nodes.Get (1));
+  serverApps.Start (Seconds (1.0));
+  serverApps.Stop (Seconds (1200.0));
+
+  QuicEchoClientHelper echoClient (interfaces.GetAddress (1), 9);
+  echoClient.SetAttribute ("MaxPackets", UintegerValue (1));
+  echoClient.SetAttribute ("Interval", TimeValue (Seconds (1.0)));
+  //echoClient.SetAttribute ("MaxStreamData", UintegerValue (1024));
+
+  ApplicationContainer clientApps = echoClient.Install (nodes.Get (0));
+  echoClient.SetFill (clientApps.Get (0), "Hello World");
+  clientApps.Start (Seconds (2.0));
+  clientApps.Stop (Seconds (5.0));
+
+  Packet::EnablePrinting ();
+  Packet::EnableChecking ();
+
+  std::cout << "\n\n#################### STARTING RUN ####################\n\n";
+  Simulator::Run ();
+  std::cout
+      << "\n\n#################### RUN FINISHED ####################\n\n\n";
+  Simulator::Destroy ();
+
+  std::cout
+      << "\n\n#################### SIMULATION END ####################\n\n\n";
+  return 0;
+}
diff --git a/src/quic/examples/quic-variants-comparison-bulksend.cc b/src/quic/examples/quic-variants-comparison-bulksend.cc
new file mode 100644
index 000000000..9b79f12c6
--- /dev/null
+++ b/src/quic/examples/quic-variants-comparison-bulksend.cc
@@ -0,0 +1,376 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2013 ResiliNets, ITTC, University of Kansas
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors of the original TCP example: 
+ * Justin P. Rohrer, Truc Anh N. Nguyen <annguyen@ittc.ku.edu>, Siddharth Gangadhar <siddharth@ittc.ku.edu>
+ * James P.G. Sterbenz <jpgs@ittc.ku.edu>, director
+ * ResiliNets Research Group  http://wiki.ittc.ku.edu/resilinets
+ * Information and Telecommunication Technology Center (ITTC)
+ * and Department of Electrical Engineering and Computer Science
+ * The University of Kansas Lawrence, KS USA.
+ *
+ * Work supported in part by NSF FIND (Future Internet Design) Program
+ * under grant CNS-0626918 (Postmodern Internet Architecture),
+ * NSF grant CNS-1050226 (Multilayer Network Resilience Analysis and Experimentation on GENI),
+ * US Department of Defense (DoD), and ITTC at The University of Kansas.
+ *
+ * “TCP Westwood(+) Protocol Implementation in ns-3”
+ * Siddharth Gangadhar, Trúc Anh Ngọc Nguyễn , Greeshma Umapathi, and James P.G. Sterbenz,
+ * ICST SIMUTools Workshop on ns-3 (WNS3), Cannes, France, March 2013
+ *
+ * Adapted to QUIC by:
+ *          Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *
+ */
+
+#include <iostream>
+#include <fstream>
+#include <string>
+
+#include "ns3/core-module.h"
+#include "ns3/network-module.h"
+#include "ns3/internet-module.h"
+#include "ns3/quic-module.h"
+#include "ns3/point-to-point-module.h"
+#include "ns3/applications-module.h"
+#include "ns3/error-model.h"
+#include "ns3/tcp-header.h"
+#include "ns3/udp-header.h"
+#include "ns3/enum.h"
+#include "ns3/event-id.h"
+#include "ns3/flow-monitor-helper.h"
+#include "ns3/ipv4-global-routing-helper.h"
+#include "ns3/traffic-control-module.h"
+
+using namespace ns3;
+
+NS_LOG_COMPONENT_DEFINE ("QuicVariantsComparisonBulkSend");
+
+// connect to a number of traces
+static void
+CwndChange (Ptr<OutputStreamWrapper> stream, uint32_t oldCwnd, uint32_t newCwnd)
+{
+  *stream->GetStream () << Simulator::Now ().GetSeconds () << "\t" << oldCwnd << "\t" << newCwnd << std::endl;
+}
+
+static void
+RttChange (Ptr<OutputStreamWrapper> stream, Time oldRtt, Time newRtt)
+{
+  *stream->GetStream () << Simulator::Now ().GetSeconds () << "\t" << oldRtt.GetSeconds () << "\t" << newRtt.GetSeconds () << std::endl;
+}
+
+static void
+Rx (Ptr<OutputStreamWrapper> stream, Ptr<const Packet> p, const QuicHeader& q, Ptr<const QuicSocketBase> qsb)
+{
+  *stream->GetStream () << Simulator::Now ().GetSeconds () << "\t" << p->GetSize() << std::endl;
+}
+
+static void
+Traces(uint32_t serverId, std::string pathVersion, std::string finalPart)
+{
+  AsciiTraceHelper asciiTraceHelper;
+
+  std::ostringstream pathCW;
+  pathCW << "/NodeList/" << serverId << "/$ns3::QuicL4Protocol/SocketList/0/QuicSocketBase/CongestionWindow";
+  NS_LOG_INFO("Matches cw " << Config::LookupMatches(pathCW.str().c_str()).GetN());
+
+  std::ostringstream fileCW;
+  fileCW << pathVersion << "QUIC-cwnd-change"  << serverId << "" << finalPart;
+
+  std::ostringstream pathRTT;
+  pathRTT << "/NodeList/" << serverId << "/$ns3::QuicL4Protocol/SocketList/0/QuicSocketBase/RTT";
+
+  std::ostringstream fileRTT;
+  fileRTT << pathVersion << "QUIC-rtt"  << serverId << "" << finalPart;
+
+  std::ostringstream pathRCWnd;
+  pathRCWnd<< "/NodeList/" << serverId << "/$ns3::QuicL4Protocol/SocketList/0/QuicSocketBase/RWND";
+
+  std::ostringstream fileRCWnd;
+  fileRCWnd<<pathVersion << "QUIC-rwnd-change"  << serverId << "" << finalPart;
+
+  std::ostringstream fileName;
+  fileName << pathVersion << "QUIC-rx-data" << serverId << "" << finalPart;
+  std::ostringstream pathRx;
+  pathRx << "/NodeList/" << serverId << "/$ns3::QuicL4Protocol/SocketList/*/QuicSocketBase/Rx";
+  NS_LOG_INFO("Matches rx " << Config::LookupMatches(pathRx.str().c_str()).GetN());
+
+  Ptr<OutputStreamWrapper> stream = asciiTraceHelper.CreateFileStream (fileName.str ().c_str ());
+  Config::ConnectWithoutContext (pathRx.str ().c_str (), MakeBoundCallback (&Rx, stream));
+
+  Ptr<OutputStreamWrapper> stream1 = asciiTraceHelper.CreateFileStream (fileCW.str ().c_str ());
+  Config::ConnectWithoutContext (pathCW.str ().c_str (), MakeBoundCallback(&CwndChange, stream1));
+
+  Ptr<OutputStreamWrapper> stream2 = asciiTraceHelper.CreateFileStream (fileRTT.str ().c_str ());
+  Config::ConnectWithoutContext (pathRTT.str ().c_str (), MakeBoundCallback(&RttChange, stream2));
+
+  Ptr<OutputStreamWrapper> stream4 = asciiTraceHelper.CreateFileStream (fileRCWnd.str ().c_str ());
+  Config::ConnectWithoutContextFailSafe (pathRCWnd.str ().c_str (), MakeBoundCallback(&CwndChange, stream4));
+}
+
+int main (int argc, char *argv[])
+{
+  std::string transport_prot = "QuicBbr";
+  double error_p = 0.0;
+  std::string bandwidth = "2Mbps";
+  std::string delay = "0.01ms";
+  std::string access_bandwidth = "12Mbps";
+  std::string access_delay = "25ms";
+  bool tracing = false;
+  std::string prefix_file_name = "QuicVariantsComparison";
+  double data_mbytes = 0;
+  uint32_t mtu_bytes = 1400;
+  uint16_t num_flows = 1;
+  float duration = 100;
+  uint32_t run = 0;
+  bool flow_monitor = false;
+  bool pcap = false;
+  std::string queue_disc_type = "ns3::PfifoFastQueueDisc";
+
+  // LogComponentEnable ("Config", LOG_LEVEL_ALL);
+  CommandLine cmd;
+  cmd.AddValue ("transport_prot", "Transport protocol to use: TcpNewReno, "
+                "TcpHybla, TcpHighSpeed, TcpHtcp, TcpVegas, TcpScalable, TcpVeno, "
+                "TcpBic, TcpYeah, TcpIllinois, TcpWestwood, TcpWestwoodPlus, TcpLedbat ", transport_prot);
+  cmd.AddValue ("error_p", "Packet error rate", error_p);
+  cmd.AddValue ("bandwidth", "Bottleneck bandwidth", bandwidth);
+  cmd.AddValue ("delay", "Bottleneck delay", delay);
+  cmd.AddValue ("access_bandwidth", "Access link bandwidth", access_bandwidth);
+  cmd.AddValue ("access_delay", "Access link delay", access_delay);
+  cmd.AddValue ("tracing", "Flag to enable/disable tracing", tracing);
+  cmd.AddValue ("prefix_name", "Prefix of output trace file", prefix_file_name);
+  cmd.AddValue ("data", "Number of Megabytes of data to transmit", data_mbytes);
+  cmd.AddValue ("mtu", "Size of IP packets to send in bytes", mtu_bytes);
+  cmd.AddValue ("num_flows", "Number of flows", num_flows);
+  cmd.AddValue ("duration", "Time to allow flows to run in seconds", duration);
+  cmd.AddValue ("run", "Run index (for setting repeatable seeds)", run);
+  cmd.AddValue ("flow_monitor", "Enable flow monitor", flow_monitor);
+  cmd.AddValue ("pcap_tracing", "Enable or disable PCAP tracing", pcap);
+  cmd.AddValue ("queue_disc_type", "Queue disc type for gateway (e.g. ns3::CoDelQueueDisc)", queue_disc_type);
+  cmd.Parse (argc, argv);
+
+  transport_prot = std::string ("ns3::") + transport_prot;
+
+  SeedManager::SetSeed (1);
+  SeedManager::SetRun (run);
+
+  // User may find it convenient to enable logging
+  Time::SetResolution (Time::NS);
+  LogComponentEnableAll (LOG_PREFIX_TIME);
+  LogComponentEnableAll (LOG_PREFIX_FUNC);
+  LogComponentEnableAll (LOG_PREFIX_NODE);
+  // LogComponentEnable("QuicVariantsComparison", LOG_LEVEL_ALL);
+  // LogComponentEnable("BulkSendApplication", LOG_LEVEL_INFO);
+  // LogComponentEnable("PfifoFastQueueDisc", LOG_LEVEL_ALL);
+  // LogComponentEnable ("QuicSocketBase", LOG_LEVEL_ALL);
+  LogComponentEnable("TcpVegas", LOG_LEVEL_ALL);
+  LogComponentEnable("QuicBbr", LOG_LEVEL_ALL);
+  // LogComponentEnable("QuicL5Protocol", LOG_LEVEL_ALL);
+
+  // Set the simulation start and stop time
+  float start_time = 0.1;
+  float stop_time = start_time + duration;
+
+  // 4 MB of TCP buffer
+  Config::SetDefault ("ns3::QuicSocketBase::SocketRcvBufSize", UintegerValue (1 << 21));
+  Config::SetDefault ("ns3::QuicSocketBase::SocketSndBufSize", UintegerValue (1 << 21));
+  Config::SetDefault ("ns3::QuicStreamBase::StreamSndBufSize", UintegerValue (1 << 21));
+  Config::SetDefault ("ns3::QuicStreamBase::StreamRcvBufSize", UintegerValue (1 << 21));
+ 
+  // Select congestion control variant
+  if (transport_prot.compare ("ns3::TcpWestwoodPlus") == 0)
+    { 
+      // TcpWestwoodPlus is not an actual TypeId name; we need TcpWestwood here
+      Config::SetDefault ("ns3::QuicL4Protocol::SocketType", TypeIdValue (TcpWestwood::GetTypeId ()));
+      // the default protocol type in ns3::TcpWestwood is WESTWOOD
+      Config::SetDefault ("ns3::TcpWestwood::ProtocolType", EnumValue (TcpWestwood::WESTWOODPLUS));
+    }
+  else
+    {
+      TypeId tcpTid;
+      NS_ABORT_MSG_UNLESS (TypeId::LookupByNameFailSafe (transport_prot, &tcpTid), "TypeId " << transport_prot << " not found");
+      Config::SetDefault ("ns3::QuicL4Protocol::SocketType", TypeIdValue (TypeId::LookupByName (transport_prot)));
+    }
+
+  // Create gateways, sources, and sinks
+  NodeContainer gateways;
+  gateways.Create (2);
+  NodeContainer sources;
+  sources.Create (num_flows);
+  NodeContainer sinks;
+  sinks.Create (num_flows);
+
+  // Configure the error model
+  // Here we use RateErrorModel with packet error rate
+  Ptr<UniformRandomVariable> uv = CreateObject<UniformRandomVariable> ();
+  uv->SetStream (50);
+  RateErrorModel error_model;
+  error_model.SetRandomVariable (uv);
+  error_model.SetUnit (RateErrorModel::ERROR_UNIT_PACKET);
+  error_model.SetRate (error_p);
+
+  PointToPointHelper BottleneckLink;
+  BottleneckLink.SetDeviceAttribute ("DataRate", StringValue (bandwidth));
+  BottleneckLink.SetChannelAttribute ("Delay", StringValue (delay));
+  BottleneckLink.SetDeviceAttribute ("ReceiveErrorModel", PointerValue (&error_model));
+  
+  PointToPointHelper AccessLink;
+  AccessLink.SetDeviceAttribute ("DataRate", StringValue (access_bandwidth));
+  AccessLink.SetChannelAttribute ("Delay", StringValue (access_delay));
+
+  QuicHelper stack;
+  stack.InstallQuic (sources);
+  stack.InstallQuic (sinks);
+  stack.InstallQuic (gateways);
+
+  TrafficControlHelper tchPfifo;
+  tchPfifo.SetRootQueueDisc ("ns3::PfifoFastQueueDisc");
+
+  TrafficControlHelper tchCoDel;
+  tchCoDel.SetRootQueueDisc ("ns3::CoDelQueueDisc");
+
+  Ipv4AddressHelper address;
+  address.SetBase ("10.0.0.0", "255.255.255.0");
+
+  // Configure the sources and sinks net devices
+  // and the channels between the sources/sinks and the gateways
+  PointToPointHelper LocalLink;
+  LocalLink.SetDeviceAttribute ("DataRate", StringValue (access_bandwidth));
+  LocalLink.SetChannelAttribute ("Delay", StringValue (access_delay));
+
+  Ipv4InterfaceContainer sink_interfaces;
+
+  DataRate access_b (access_bandwidth);
+  DataRate bottle_b (bandwidth);
+  Time access_d (access_delay);
+  Time bottle_d (delay);
+
+  uint32_t size = (std::min (access_b, bottle_b).GetBitRate () / 8) *
+    ((access_d + bottle_d) * 2).GetSeconds ();
+
+  Config::SetDefault ("ns3::PfifoFastQueueDisc::MaxSize",
+                      QueueSizeValue (QueueSize (QueueSizeUnit::PACKETS, size / mtu_bytes)));
+  Config::SetDefault ("ns3::CoDelQueueDisc::MaxSize",
+                      QueueSizeValue (QueueSize (QueueSizeUnit::BYTES, size)));
+
+  for (int i = 0; i < num_flows; i++)
+    {
+      NetDeviceContainer devices;
+      devices = AccessLink.Install (sources.Get (i), gateways.Get (0));
+      tchPfifo.Install (devices);
+      address.NewNetwork ();
+      Ipv4InterfaceContainer interfaces = address.Assign (devices);
+
+      devices = LocalLink.Install (gateways.Get (1), sinks.Get (i));
+      if (queue_disc_type.compare ("ns3::PfifoFastQueueDisc") == 0)
+        {
+          tchPfifo.Install (devices);
+        }
+      else if (queue_disc_type.compare ("ns3::CoDelQueueDisc") == 0)
+        {
+          tchCoDel.Install (devices);
+        }
+      else
+        {
+          NS_FATAL_ERROR ("Queue not recognized. Allowed values are ns3::CoDelQueueDisc or ns3::PfifoFastQueueDisc");
+        }
+      address.NewNetwork ();
+      interfaces = address.Assign (devices);
+      sink_interfaces.Add (interfaces.Get (1));
+      
+      devices = BottleneckLink.Install (gateways.Get (0), gateways.Get (1));
+      if (queue_disc_type.compare ("ns3::PfifoFastQueueDisc") == 0)
+        {
+          tchPfifo.Install (devices);
+        }
+      else if (queue_disc_type.compare ("ns3::CoDelQueueDisc") == 0)
+        {
+          tchCoDel.Install (devices);
+        }
+      else
+        {
+          NS_FATAL_ERROR ("Queue not recognized. Allowed values are ns3::CoDelQueueDisc or ns3::PfifoFastQueueDisc");
+        }
+      address.NewNetwork ();
+      interfaces = address.Assign (devices);
+    }
+
+  NS_LOG_INFO ("Initialize Global Routing.");
+  Ipv4GlobalRoutingHelper::PopulateRoutingTables ();
+
+  uint16_t port = 50000;
+  Address sinkLocalAddress (InetSocketAddress (Ipv4Address::GetAny (), port));
+  
+  ApplicationContainer clientApps;
+  ApplicationContainer serverApps;
+  // applications client and server
+  for (uint16_t i = 0; i < sources.GetN (); i++)
+    {
+      AddressValue remoteAddress (InetSocketAddress (sink_interfaces.GetAddress (i, 0), port));
+      BulkSendHelper ftp ("ns3::QuicSocketFactory", Address ());
+      ftp.SetAttribute ("Remote", remoteAddress);
+      ftp.SetAttribute ("SendSize", UintegerValue (1400));
+      clientApps.Add(ftp.Install (sources.Get (i)));
+      PacketSinkHelper sinkHelper ("ns3::QuicSocketFactory", sinkLocalAddress);
+      sinkHelper.SetAttribute ("Protocol", TypeIdValue (QuicSocketFactory::GetTypeId ()));
+      serverApps.Add(sinkHelper.Install (sinks.Get (i)));
+    }
+
+  serverApps.Start (Seconds (0.99));
+  clientApps.Stop (Seconds (20.0));
+  clientApps.Start (Seconds (2));
+
+  for (uint16_t i = 0; i < num_flows; i++)
+    {
+      auto n2 = sinks.Get (i);
+      auto n1 = sources.Get (i);
+      Time t = Seconds(2.100001);
+      Simulator::Schedule (t, &Traces, n2->GetId(), 
+            "./server", ".txt");
+      Simulator::Schedule (t, &Traces, n1->GetId(), 
+            "./client", ".txt");
+    }
+
+  if (pcap)
+    {
+      BottleneckLink.EnablePcapAll (prefix_file_name, true);
+      LocalLink.EnablePcapAll (prefix_file_name, true);
+      AccessLink.EnablePcapAll (prefix_file_name, true);
+    }
+
+  // Flow monitor
+  FlowMonitorHelper flowHelper;
+  if (flow_monitor)
+    {
+      flowHelper.InstallAll ();
+    }
+
+  Simulator::Stop (Seconds (stop_time));
+  Simulator::Run ();
+
+  if (flow_monitor)
+    {
+      flowHelper.SerializeToXmlFile (prefix_file_name + ".flowmonitor", true, true);
+    }
+
+  Simulator::Destroy ();
+  return 0;
+}
diff --git a/src/quic/examples/quic-variants-comparison.cc b/src/quic/examples/quic-variants-comparison.cc
new file mode 100644
index 000000000..ca185958e
--- /dev/null
+++ b/src/quic/examples/quic-variants-comparison.cc
@@ -0,0 +1,377 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2013 ResiliNets, ITTC, University of Kansas
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors of the original TCP example: 
+ * Justin P. Rohrer, Truc Anh N. Nguyen <annguyen@ittc.ku.edu>, Siddharth Gangadhar <siddharth@ittc.ku.edu>
+ * James P.G. Sterbenz <jpgs@ittc.ku.edu>, director
+ * ResiliNets Research Group  http://wiki.ittc.ku.edu/resilinets
+ * Information and Telecommunication Technology Center (ITTC)
+ * and Department of Electrical Engineering and Computer Science
+ * The University of Kansas Lawrence, KS USA.
+ *
+ * Work supported in part by NSF FIND (Future Internet Design) Program
+ * under grant CNS-0626918 (Postmodern Internet Architecture),
+ * NSF grant CNS-1050226 (Multilayer Network Resilience Analysis and Experimentation on GENI),
+ * US Department of Defense (DoD), and ITTC at The University of Kansas.
+ *
+ * “TCP Westwood(+) Protocol Implementation in ns-3”
+ * Siddharth Gangadhar, Trúc Anh Ngọc Nguyễn , Greeshma Umapathi, and James P.G. Sterbenz,
+ * ICST SIMUTools Workshop on ns-3 (WNS3), Cannes, France, March 2013
+ *
+ * Adapted to QUIC by:
+ *          Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *
+ */
+
+#include <iostream>
+#include <fstream>
+#include <string>
+
+#include <ns3/config-store.h>
+#include "ns3/core-module.h"
+#include "ns3/network-module.h"
+#include "ns3/internet-module.h"
+#include "ns3/quic-module.h"
+#include "ns3/point-to-point-module.h"
+#include "ns3/applications-module.h"
+#include "ns3/error-model.h"
+#include "ns3/tcp-header.h"
+#include "ns3/udp-header.h"
+#include "ns3/enum.h"
+#include "ns3/event-id.h"
+#include "ns3/flow-monitor-helper.h"
+#include "ns3/ipv4-global-routing-helper.h"
+#include "ns3/traffic-control-module.h"
+
+using namespace ns3;
+
+NS_LOG_COMPONENT_DEFINE ("QuicVariantsComparison");
+
+// connect to a number of traces
+static void
+CwndChange (Ptr<OutputStreamWrapper> stream, uint32_t oldCwnd, uint32_t newCwnd)
+{
+  *stream->GetStream () << Simulator::Now ().GetSeconds () << "\t" << oldCwnd << "\t" << newCwnd << std::endl;
+}
+
+static void
+RttChange (Ptr<OutputStreamWrapper> stream, Time oldRtt, Time newRtt)
+{
+  *stream->GetStream () << Simulator::Now ().GetSeconds () << "\t" << oldRtt.GetSeconds () << "\t" << newRtt.GetSeconds () << std::endl;
+}
+
+static void
+Rx (Ptr<OutputStreamWrapper> stream, Ptr<const Packet> p, const QuicHeader& q, Ptr<const QuicSocketBase> qsb)
+{
+  *stream->GetStream () << Simulator::Now ().GetSeconds () << "\t" << p->GetSize() << std::endl;
+}
+
+static void
+Traces(uint32_t serverId, std::string pathVersion, std::string finalPart)
+{
+  AsciiTraceHelper asciiTraceHelper;
+
+  std::ostringstream pathCW;
+  pathCW << "/NodeList/" << serverId << "/$ns3::QuicL4Protocol/SocketList/0/QuicSocketBase/CongestionWindow";
+  NS_LOG_INFO("Matches cw " << Config::LookupMatches(pathCW.str().c_str()).GetN());
+
+  std::ostringstream fileCW;
+  fileCW << pathVersion << "QUIC-cwnd-change"  << serverId << "" << finalPart;
+
+  std::ostringstream pathRTT;
+  pathRTT << "/NodeList/" << serverId << "/$ns3::QuicL4Protocol/SocketList/0/QuicSocketBase/RTT";
+
+  std::ostringstream fileRTT;
+  fileRTT << pathVersion << "QUIC-rtt"  << serverId << "" << finalPart;
+
+  std::ostringstream pathRCWnd;
+  pathRCWnd<< "/NodeList/" << serverId << "/$ns3::QuicL4Protocol/SocketList/0/QuicSocketBase/RWND";
+
+  std::ostringstream fileRCWnd;
+  fileRCWnd<<pathVersion << "QUIC-rwnd-change"  << serverId << "" << finalPart;
+
+  std::ostringstream fileName;
+  fileName << pathVersion << "QUIC-rx-data" << serverId << "" << finalPart;
+  std::ostringstream pathRx;
+  pathRx << "/NodeList/" << serverId << "/$ns3::QuicL4Protocol/SocketList/*/QuicSocketBase/Rx";
+  NS_LOG_INFO("Matches rx " << Config::LookupMatches(pathRx.str().c_str()).GetN());
+
+  Ptr<OutputStreamWrapper> stream = asciiTraceHelper.CreateFileStream (fileName.str ().c_str ());
+  Config::ConnectWithoutContext (pathRx.str ().c_str (), MakeBoundCallback (&Rx, stream));
+
+  Ptr<OutputStreamWrapper> stream1 = asciiTraceHelper.CreateFileStream (fileCW.str ().c_str ());
+  Config::ConnectWithoutContext (pathCW.str ().c_str (), MakeBoundCallback(&CwndChange, stream1));
+
+  Ptr<OutputStreamWrapper> stream2 = asciiTraceHelper.CreateFileStream (fileRTT.str ().c_str ());
+  Config::ConnectWithoutContext (pathRTT.str ().c_str (), MakeBoundCallback(&RttChange, stream2));
+
+  Ptr<OutputStreamWrapper> stream4 = asciiTraceHelper.CreateFileStream (fileRCWnd.str ().c_str ());
+  Config::ConnectWithoutContextFailSafe (pathRCWnd.str ().c_str (), MakeBoundCallback(&CwndChange, stream4));
+}
+
+int main (int argc, char *argv[])
+{
+  std::string transport_prot = "TcpVegas";
+  double error_p = 0.0;
+  std::string bandwidth = "2Mbps";
+  std::string delay = "0.01ms";
+  std::string access_bandwidth = "12Mbps";
+  std::string access_delay = "25ms";
+  bool tracing = false;
+  std::string prefix_file_name = "QuicVariantsComparison";
+  double data_mbytes = 0;
+  uint32_t mtu_bytes = 1400;
+  uint16_t num_flows = 1;
+  float duration = 100;
+  uint32_t run = 0;
+  bool flow_monitor = false;
+  bool pcap = false;
+  std::string queue_disc_type = "ns3::PfifoFastQueueDisc";
+
+  // LogComponentEnable ("Config", LOG_LEVEL_ALL);
+  CommandLine cmd;
+  cmd.AddValue ("transport_prot", "Transport protocol to use: TcpNewReno, "
+                "TcpHybla, TcpHighSpeed, TcpHtcp, TcpVegas, TcpScalable, TcpVeno, "
+                "TcpBic, TcpYeah, TcpIllinois, TcpWestwood, TcpWestwoodPlus, TcpLedbat ", transport_prot);
+  cmd.AddValue ("error_p", "Packet error rate", error_p);
+  cmd.AddValue ("bandwidth", "Bottleneck bandwidth", bandwidth);
+  cmd.AddValue ("delay", "Bottleneck delay", delay);
+  cmd.AddValue ("access_bandwidth", "Access link bandwidth", access_bandwidth);
+  cmd.AddValue ("access_delay", "Access link delay", access_delay);
+  cmd.AddValue ("tracing", "Flag to enable/disable tracing", tracing);
+  cmd.AddValue ("prefix_name", "Prefix of output trace file", prefix_file_name);
+  cmd.AddValue ("data", "Number of Megabytes of data to transmit", data_mbytes);
+  cmd.AddValue ("mtu", "Size of IP packets to send in bytes", mtu_bytes);
+  cmd.AddValue ("num_flows", "Number of flows", num_flows);
+  cmd.AddValue ("duration", "Time to allow flows to run in seconds", duration);
+  cmd.AddValue ("run", "Run index (for setting repeatable seeds)", run);
+  cmd.AddValue ("flow_monitor", "Enable flow monitor", flow_monitor);
+  cmd.AddValue ("pcap_tracing", "Enable or disable PCAP tracing", pcap);
+  cmd.AddValue ("queue_disc_type", "Queue disc type for gateway (e.g. ns3::CoDelQueueDisc)", queue_disc_type);
+  cmd.Parse (argc, argv);
+
+  transport_prot = std::string ("ns3::") + transport_prot;
+
+  SeedManager::SetSeed (1);
+  SeedManager::SetRun (run);
+
+  // User may find it convenient to enable logging
+  Time::SetResolution (Time::NS);
+  LogComponentEnableAll (LOG_PREFIX_TIME);
+  LogComponentEnableAll (LOG_PREFIX_FUNC);
+  LogComponentEnableAll (LOG_PREFIX_NODE);
+  // LogComponentEnable("QuicVariantsComparison", LOG_LEVEL_ALL);
+  // LogComponentEnable("BulkSendApplication", LOG_LEVEL_INFO);
+  // LogComponentEnable("PfifoFastQueueDisc", LOG_LEVEL_ALL);
+  // LogComponentEnable ("QuicSocketBase", LOG_LEVEL_ALL);
+  LogComponentEnable("TcpVegas", LOG_LEVEL_ALL);
+  // LogComponentEnable("QuicL5Protocol", LOG_LEVEL_ALL);
+
+  // Set the simulation start and stop time
+  float start_time = 0.1;
+  float stop_time = start_time + duration;
+
+  // 4 MB of buffer
+  Config::SetDefault ("ns3::QuicSocketBase::SocketRcvBufSize", UintegerValue (1 << 21));
+  Config::SetDefault ("ns3::QuicSocketBase::SocketSndBufSize", UintegerValue (1 << 21));
+  Config::SetDefault ("ns3::QuicStreamBase::StreamSndBufSize", UintegerValue (1 << 21));
+  Config::SetDefault ("ns3::QuicStreamBase::StreamRcvBufSize", UintegerValue (1 << 21));
+ 
+  // Select congestion control variant
+  if (transport_prot.compare ("ns3::TcpWestwoodPlus") == 0)
+    { 
+      // TcpWestwoodPlus is not an actual TypeId name; we need TcpWestwood here
+      Config::SetDefault ("ns3::QuicL4Protocol::SocketType", TypeIdValue (TcpWestwood::GetTypeId ()));
+      // the default protocol type in ns3::TcpWestwood is WESTWOOD
+      Config::SetDefault ("ns3::TcpWestwood::ProtocolType", EnumValue (TcpWestwood::WESTWOODPLUS));
+    }
+  else
+    {
+      TypeId tcpTid;
+      NS_ABORT_MSG_UNLESS (TypeId::LookupByNameFailSafe (transport_prot, &tcpTid), "TypeId " << transport_prot << " not found");
+      Config::SetDefault ("ns3::QuicL4Protocol::SocketType", TypeIdValue (TypeId::LookupByName (transport_prot)));
+    }
+
+
+  // Create gateways, sources, and sinks
+  NodeContainer gateways;
+  gateways.Create (2);
+  NodeContainer sources;
+  sources.Create (num_flows);
+  NodeContainer sinks;
+  sinks.Create (num_flows);
+
+  // Configure the error model
+  // Here we use RateErrorModel with packet error rate
+  Ptr<UniformRandomVariable> uv = CreateObject<UniformRandomVariable> ();
+  uv->SetStream (50);
+  RateErrorModel error_model;
+  error_model.SetRandomVariable (uv);
+  error_model.SetUnit (RateErrorModel::ERROR_UNIT_PACKET);
+  error_model.SetRate (error_p);
+
+  PointToPointHelper BottleneckLink;
+  BottleneckLink.SetDeviceAttribute ("DataRate", StringValue (bandwidth));
+  BottleneckLink.SetChannelAttribute ("Delay", StringValue (delay));
+  BottleneckLink.SetDeviceAttribute ("ReceiveErrorModel", PointerValue (&error_model));
+  
+  PointToPointHelper AccessLink;
+  AccessLink.SetDeviceAttribute ("DataRate", StringValue (access_bandwidth));
+  AccessLink.SetChannelAttribute ("Delay", StringValue (access_delay));
+
+  QuicHelper stack;
+  stack.InstallQuic (sources);
+  stack.InstallQuic (sinks);
+  stack.InstallQuic (gateways);
+
+  TrafficControlHelper tchPfifo;
+  tchPfifo.SetRootQueueDisc ("ns3::PfifoFastQueueDisc");
+
+  TrafficControlHelper tchCoDel;
+  tchCoDel.SetRootQueueDisc ("ns3::CoDelQueueDisc");
+
+  Ipv4AddressHelper address;
+  address.SetBase ("10.0.0.0", "255.255.255.0");
+
+  // Configure the sources and sinks net devices
+  // and the channels between the sources/sinks and the gateways
+  PointToPointHelper LocalLink;
+  LocalLink.SetDeviceAttribute ("DataRate", StringValue (access_bandwidth));
+  LocalLink.SetChannelAttribute ("Delay", StringValue (access_delay));
+
+  Ipv4InterfaceContainer sink_interfaces;
+
+  DataRate access_b (access_bandwidth);
+  DataRate bottle_b (bandwidth);
+  Time access_d (access_delay);
+  Time bottle_d (delay);
+
+  uint32_t size = (std::min (access_b, bottle_b).GetBitRate () / 8) *
+    ((access_d + bottle_d) * 2).GetSeconds ();
+
+  Config::SetDefault ("ns3::PfifoFastQueueDisc::MaxSize",
+                      QueueSizeValue (QueueSize (QueueSizeUnit::PACKETS, size / mtu_bytes)));
+  Config::SetDefault ("ns3::CoDelQueueDisc::MaxSize",
+                      QueueSizeValue (QueueSize (QueueSizeUnit::BYTES, size)));
+
+  for (int i = 0; i < num_flows; i++)
+    {
+      NetDeviceContainer devices;
+      devices = AccessLink.Install (sources.Get (i), gateways.Get (0));
+      tchPfifo.Install (devices);
+      address.NewNetwork ();
+      Ipv4InterfaceContainer interfaces = address.Assign (devices);
+
+      devices = LocalLink.Install (gateways.Get (1), sinks.Get (i));
+      if (queue_disc_type.compare ("ns3::PfifoFastQueueDisc") == 0)
+        {
+          tchPfifo.Install (devices);
+        }
+      else if (queue_disc_type.compare ("ns3::CoDelQueueDisc") == 0)
+        {
+          tchCoDel.Install (devices);
+        }
+      else
+        {
+          NS_FATAL_ERROR ("Queue not recognized. Allowed values are ns3::CoDelQueueDisc or ns3::PfifoFastQueueDisc");
+        }
+      address.NewNetwork ();
+      interfaces = address.Assign (devices);
+      sink_interfaces.Add (interfaces.Get (1));
+      
+      devices = BottleneckLink.Install (gateways.Get (0), gateways.Get (1));
+      if (queue_disc_type.compare ("ns3::PfifoFastQueueDisc") == 0)
+        {
+          tchPfifo.Install (devices);
+        }
+      else if (queue_disc_type.compare ("ns3::CoDelQueueDisc") == 0)
+        {
+          tchCoDel.Install (devices);
+        }
+      else
+        {
+          NS_FATAL_ERROR ("Queue not recognized. Allowed values are ns3::CoDelQueueDisc or ns3::PfifoFastQueueDisc");
+        }
+      address.NewNetwork ();
+      interfaces = address.Assign (devices);
+    }
+
+  NS_LOG_INFO ("Initialize Global Routing.");
+  Ipv4GlobalRoutingHelper::PopulateRoutingTables ();
+
+  uint16_t port = 50000;  
+  ApplicationContainer clientApps;
+  ApplicationContainer serverApps;
+  double interPacketInterval = 1000;
+
+  // QUIC client and server
+  for (uint16_t i = 0; i < sources.GetN (); i++)
+    {
+      QuicServerHelper dlPacketSinkHelper (port);
+      AddressValue remoteAddress (InetSocketAddress (sink_interfaces.GetAddress (i, 0), port));
+      serverApps.Add (dlPacketSinkHelper.Install (sinks.Get (i)));
+      QuicClientHelper dlClient (sink_interfaces.GetAddress (i, 0), port);
+      dlClient.SetAttribute ("Interval", TimeValue (MicroSeconds(interPacketInterval)));
+      dlClient.SetAttribute ("PacketSize", UintegerValue(1400));
+      dlClient.SetAttribute ("MaxPackets", UintegerValue(10000000));
+      clientApps.Add (dlClient.Install (sources.Get (i)));
+    }
+
+  serverApps.Start (Seconds (0.99));
+  clientApps.Stop (Seconds (20.0));
+  clientApps.Start (Seconds (2.0));
+  
+  for (uint16_t i = 0; i < num_flows; i++)
+    {
+      auto n2 = sinks.Get (i);
+      auto n1 = sources.Get (i);
+      Time t = Seconds(2.100001);
+      Simulator::Schedule (t, &Traces, n2->GetId(), 
+            "./server", ".txt");
+      Simulator::Schedule (t, &Traces, n1->GetId(), 
+            "./client", ".txt");
+    }
+
+  if (pcap)
+    {
+      BottleneckLink.EnablePcapAll (prefix_file_name, true);
+      LocalLink.EnablePcapAll (prefix_file_name, true);
+      AccessLink.EnablePcapAll (prefix_file_name, true);
+    }
+
+  // Flow monitor
+  FlowMonitorHelper flowHelper;
+  if (flow_monitor)
+    {
+      flowHelper.InstallAll ();
+    }
+
+  Simulator::Stop (Seconds (stop_time));
+  Simulator::Run ();
+
+  if (flow_monitor)
+    {
+      flowHelper.SerializeToXmlFile (prefix_file_name + ".flowmonitor", true, true);
+    }
+
+  Simulator::Destroy ();
+  return 0;
+}
diff --git a/src/quic/examples/wscript b/src/quic/examples/wscript
new file mode 100644
index 000000000..73f394342
--- /dev/null
+++ b/src/quic/examples/wscript
@@ -0,0 +1,12 @@
+# -*- Mode: python; py-indent-offset: 4; indent-tabs-mode: nil; coding: utf-8; -*-
+
+def build(bld):
+    # obj = bld.create_ns3_program('quic-tester-streams', ['quic'])
+    # obj.source = 'quic-tester-streams.cc'
+    # obj = bld.create_ns3_program('quic-tester', ['quic'])
+    # obj.source = 'quic-tester.cc'
+    # obj = bld.create_ns3_program('quic-variants-comparison', ['quic'])
+    # obj.source = 'quic-variants-comparison.cc'
+    obj = bld.create_ns3_program('quic-variants-comparison-bulksend', ['quic'])
+    obj.source = 'quic-variants-comparison-bulksend.cc'
+
diff --git a/src/quic/helper/quic-helper.cc b/src/quic/helper/quic-helper.cc
new file mode 100644
index 000000000..9b44a194e
--- /dev/null
+++ b/src/quic/helper/quic-helper.cc
@@ -0,0 +1,116 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2008 INRIA
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Mathieu Lacage <mathieu.lacage@sophia.inria.fr>
+ * Author: Faker Moatamri <faker.moatamri@sophia.inria.fr>
+ */
+
+#include "ns3/assert.h"
+#include "ns3/log.h"
+#include "ns3/object.h"
+#include "ns3/names.h"
+#include "ns3/ipv4.h"
+#include "ns3/ipv6.h"
+#include "ns3/packet-socket-factory.h"
+#include "ns3/config.h"
+#include "ns3/simulator.h"
+#include "ns3/string.h"
+#include "ns3/net-device.h"
+#include "ns3/callback.h"
+#include "ns3/node.h"
+#include "ns3/node-list.h"
+#include "ns3/core-config.h"
+#include "ns3/arp-l3-protocol.h"
+#include "ns3/internet-stack-helper.h"
+#include "quic-helper.h"
+#include "ns3/ipv4-global-routing.h"
+#include "ns3/ipv4-list-routing-helper.h"
+#include "ns3/ipv4-static-routing-helper.h"
+#include "ns3/ipv4-global-routing-helper.h"
+#include "ns3/ipv6-static-routing-helper.h"
+#include "ns3/ipv6-extension.h"
+#include "ns3/ipv6-extension-demux.h"
+#include "ns3/ipv6-extension-header.h"
+#include "ns3/icmpv6-l4-protocol.h"
+#include "ns3/global-router-interface.h"
+#include "ns3/traffic-control-layer.h"
+#include "ns3/quic-socket-factory.h"
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("QuicHelper");
+
+//
+// Historically, the only context written to ascii traces was the protocol.
+// Traces from the protocols include the interface, though.  It is not 
+// possible to really determine where an event originated without including
+// this.  If you want the additional context information, define 
+// INTERFACE_CONTEXT.  If you want compatibility with the old-style traces
+// comment it out.
+//
+#define INTERFACE_CONTEXT
+
+//
+// Things are going to work differently here with respect to trace file handling
+// than in most places because the Tx and Rx trace sources we are interested in
+// are going to multiplex receive and transmit callbacks for all Ipv4 and 
+// interface pairs through one callback.  We want packets to or from each 
+// distinct pair to go to an individual file, so we have got to demultiplex the
+// Ipv4 and interface pair into a corresponding Ptr<PcapFileWrapper> at the 
+// callback.
+//
+// A complication in this situation is that the trace sources are hooked on 
+// a protocol basis.  There is no trace source hooked by an Ipv4 and interface
+// pair.  This means that if we naively proceed to hook, say, a drop trace
+// for a given Ipv4 with interface 0, and then hook for Ipv4 with interface 1
+// we will hook the drop trace twice and get two callbacks per event.  What
+// we need to do is to hook the event once, and that will result in a single
+// callback per drop event, and the trace source will provide the interface
+// which we filter on in the trace sink.
+// 
+// This has got to continue to work properly after the helper has been 
+// destroyed; but must be cleaned up at the end of time to avoid leaks. 
+// Global maps of protocol/interface pairs to file objects seems to fit the 
+// bill.
+//
+
+void
+QuicHelper::InstallQuic (NodeContainer c) const
+{
+  NS_LOG_INFO("stack install");
+  for (NodeContainer::Iterator i = c.Begin (); i != c.End (); ++i)
+    {
+      Install (*i);
+      NS_LOG_INFO("ok " << *i);
+      CreateAndAggregateObjectFromTypeId (*i, "ns3::QuicL4Protocol");
+
+//      Ptr<QuicSocketFactory> factory = CreateObject<QuicSocketFactory> ();
+//      factory->SetNode(*i);
+//      (*i)->AggregateObject (factory);
+    }
+}
+
+void
+QuicHelper::CreateAndAggregateObjectFromTypeId (Ptr<Node> node, const std::string typeId)
+{
+  ObjectFactory factory;
+  factory.SetTypeId (typeId);
+  Ptr<Object> protocol = factory.Create <Object> ();
+  node->AggregateObject (protocol);
+}
+
+} // namespace ns3
diff --git a/src/quic/helper/quic-helper.h b/src/quic/helper/quic-helper.h
new file mode 100644
index 000000000..81e6b1000
--- /dev/null
+++ b/src/quic/helper/quic-helper.h
@@ -0,0 +1,107 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2008 INRIA
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Mathieu Lacage <mathieu.lacage@sophia.inria.fr>
+ */
+
+#ifndef QUIC_HELPER_H
+#define QUIC_HELPER_H
+
+#include "ns3/node-container.h"
+#include "ns3/net-device-container.h"
+#include "ns3/packet.h"
+#include "ns3/ptr.h"
+#include "ns3/object-factory.h"
+#include "ns3/ipv4-l3-protocol.h"
+#include "ns3/ipv6-l3-protocol.h"
+#include "ns3/internet-trace-helper.h"
+#include "ns3/internet-stack-helper.h"
+
+namespace ns3 {
+/**
+ * \defgroup internet Internet
+ *
+ * This section documents the API of the ns-3 internet module. For a generic functional description, please refer to the ns-3 manual.
+ */
+
+/**
+ * \ingroup internet
+ * \defgroup ipv4Helpers IPv4 Helper classes
+ */
+
+/**
+ * \ingroup internet
+ * \defgroup ipv6Helpers IPv6 Helper classes
+ */
+
+/**
+ * \ingroup internet
+ *
+ * \brief aggregate IP/TCP/UDP functionality to existing Nodes.
+ *
+ * This helper enables pcap and ascii tracing of events in the internet stack
+ * associated with a node.  This is substantially similar to the tracing
+ * that happens in device helpers, but the important difference is that, well,
+ * there is no device.  This means that the creation of output file names will
+ * change, and also the user-visible methods will not reference devices and
+ * therefore the number of trace enable methods is reduced.
+ *
+ * Normally we avoid multiple inheritance in ns-3, however, the classes 
+ * PcapUserHelperForIpv4 and AsciiTraceUserHelperForIpv4 are
+ * treated as "mixins".  A mixin is a self-contained class that
+ * encapsulates a general attribute or a set of functionality that
+ * may be of interest to many other classes.
+ *
+ * This class aggregates instances of these objects, by default, to each node:
+ *  - ns3::ArpL3Protocol
+ *  - ns3::Ipv4L3Protocol
+ *  - ns3::Icmpv4L4Protocol
+ *  - ns3::Ipv6L3Protocol
+ *  - ns3::Icmpv6L4Protocol
+ *  - ns3::UdpL4Protocol
+ *  - ns3::TrafficControlLayer
+ *  - a TCP based on the TCP factory provided
+ *  - a PacketSocketFactory
+ *  - Ipv4 routing (a list routing object, a global routing object, and a static routing object)
+ *  - Ipv6 routing (a static routing object)
+ */
+class QuicHelper : public InternetStackHelper
+{
+public:
+  /**
+   * For each node in the input container, aggregate implementations of the
+   * ns3::Ipv4, ns3::Ipv6, ns3::Udp, ns3::Quic, and ns3::Tcp classes.  The program will assert
+   * if this method is called on a container with a node that already has
+   * an Ipv4 object aggregated to it.
+   *
+   * \param c NodeContainer that holds the set of nodes on which to install the
+   * new stacks.
+   */
+  void InstallQuic (NodeContainer c) const;
+
+private:
+  /**
+   * \brief create an object from its TypeId and aggregates it to the node
+   * \param node the node
+   * \param typeId the object TypeId
+   */
+  static void CreateAndAggregateObjectFromTypeId (Ptr<Node> node, const std::string typeId);
+};
+
+} // namespace ns3
+
+#endif /* QUIC_HELPER_H */
diff --git a/src/quic/model/quic-bbr.cc b/src/quic/model/quic-bbr.cc
new file mode 100644
index 000000000..e410a7449
--- /dev/null
+++ b/src/quic/model/quic-bbr.cc
@@ -0,0 +1,820 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2018 NITK Surathkal, 
+ * Copyright (c) 2020 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Vivek Jain <jain.vivek.anand@gmail.com>
+ *          Viyom Mittal <viyommittal@gmail.com>
+ *          Mohit P. Tahiliani <tahiliani@nitk.edu.in>
+ *          Umberto Paro <umberto.paro@me.com>
+ */
+
+#include "quic-bbr.h"
+#include "ns3/log.h"
+#include "ns3/quic-socket-base.h"
+#include "ns3/quic-socket-tx-buffer.h"
+#include "ns3/simulator.h"
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("QuicBbr");
+NS_OBJECT_ENSURE_REGISTERED (QuicBbr);
+
+const double QuicBbr::PACING_GAIN_CYCLE [] = {5.0 / 4, 3.0 / 4, 1, 1, 1, 1, 1, 1};
+
+TypeId
+QuicBbr::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicBbr")
+    .SetParent<QuicCongestionOps> ()
+    .AddConstructor<QuicBbr> ()
+    .SetGroupName ("Internet")
+    .AddAttribute ("HighGain",
+                   "Value of high gain",
+                   DoubleValue (2.89),
+                   MakeDoubleAccessor (&QuicBbr::m_highGain),
+                   MakeDoubleChecker<double> ())
+    .AddAttribute ("BwWindowLength",
+                   "Length of bandwidth windowed filter",
+                   UintegerValue (10),
+                   MakeUintegerAccessor (&QuicBbr::m_bandwidthWindowLength),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddAttribute ("RttWindowLength",
+                   "Length of bandwidth windowed filter",
+                   TimeValue (Seconds (10)),
+                   MakeTimeAccessor (&QuicBbr::m_rtPropFilterLen),
+                   MakeTimeChecker ())
+    .AddAttribute ("ProbeRttDuration",
+                   "Length of bandwidth windowed filter",
+                   TimeValue (MilliSeconds (200)),
+                   MakeTimeAccessor (&QuicBbr::m_probeRttDuration),
+                   MakeTimeChecker ())
+    .AddTraceSource ("BbrState", "Current state of the BBR state machine",
+                     MakeTraceSourceAccessor (&QuicBbr::m_state),
+                     "ns3::QuicBbr::BbrStatesTracedValueCallback")
+  ;
+  return tid;
+}
+
+QuicBbr::QuicBbr ()
+  : QuicCongestionOps ()
+{
+  NS_LOG_FUNCTION (this);
+  m_uv = CreateObject<UniformRandomVariable> ();
+}
+
+QuicBbr::QuicBbr (const QuicBbr &sock)
+  : QuicCongestionOps (sock),
+    m_bandwidthWindowLength (sock.m_bandwidthWindowLength),
+    m_pacingGain (sock.m_pacingGain),
+    m_cWndGain (sock.m_cWndGain),
+    m_highGain (sock.m_highGain),
+    m_isPipeFilled (sock.m_isPipeFilled),
+    m_minPipeCwnd (sock.m_minPipeCwnd),
+    m_roundCount (sock.m_roundCount),
+    m_roundStart (sock.m_roundStart),
+    m_nextRoundDelivered (sock.m_nextRoundDelivered),
+    m_probeRttDuration (sock.m_probeRttDuration),
+    m_probeRtPropStamp (sock.m_probeRtPropStamp),
+    m_probeRttDoneStamp (sock.m_probeRttDoneStamp),
+    m_probeRttRoundDone (sock.m_probeRttRoundDone),
+    m_packetConservation (sock.m_packetConservation),
+    m_priorCwnd (sock.m_priorCwnd),
+    m_idleRestart (sock.m_idleRestart),
+    m_targetCWnd (sock.m_targetCWnd),
+    m_fullBandwidth (sock.m_fullBandwidth),
+    m_fullBandwidthCount (sock.m_fullBandwidthCount),
+    m_rtProp (Time::Max ()),
+    m_sendQuantum (sock.m_sendQuantum),
+    m_cycleStamp (sock.m_cycleStamp),
+    m_cycleIndex (sock.m_cycleIndex),
+    m_rtPropExpired (sock.m_rtPropExpired),
+    m_rtPropFilterLen (sock.m_rtPropFilterLen),
+    m_rtPropStamp (sock.m_rtPropStamp),
+    m_isInitialized (sock.m_isInitialized)
+{
+  NS_LOG_FUNCTION (this);
+  m_uv = CreateObject<UniformRandomVariable> ();
+}
+
+int64_t
+QuicBbr::AssignStreams (int64_t stream)
+{
+  NS_LOG_FUNCTION (this << stream);
+  m_uv->SetStream (stream);
+  return 1;
+}
+
+void
+QuicBbr::InitRoundCounting ()
+{
+  NS_LOG_FUNCTION (this);
+  m_nextRoundDelivered = 0;
+  m_roundStart = false;
+  m_roundCount = 0;
+}
+
+void
+QuicBbr::InitFullPipe ()
+{
+  NS_LOG_FUNCTION (this);
+  m_isPipeFilled = false;
+  m_fullBandwidth = 0;
+  m_fullBandwidthCount = 0;
+}
+
+void
+QuicBbr::InitPacingRate (Ptr<QuicSocketState> tcb)
+{
+  NS_LOG_FUNCTION (this << tcb);
+
+  if (!tcb->m_pacing)
+    {
+      NS_LOG_WARN ("BBR must use pacing");
+      tcb->m_pacing = true;
+    }
+  Time rtt = tcb->m_lastRtt != Time::Max () ? tcb->m_lastRtt.Get () : MilliSeconds (1);
+  if (rtt == Seconds (0))
+    {
+      NS_LOG_INFO ("No rtt estimate is available, using kDefaultInitialRtt=" << tcb->m_kDefaultInitialRtt);
+      rtt = tcb->m_kDefaultInitialRtt;
+    }
+  DataRate nominalBandwidth (tcb->m_initialCWnd * 8 / rtt.GetSeconds ());
+  tcb->m_pacingRate = DataRate (m_pacingGain * nominalBandwidth.GetBitRate ());
+
+}
+
+void
+QuicBbr::EnterStartup ()
+{
+  NS_LOG_FUNCTION (this);
+  SetBbrState (BbrMode_t::BBR_STARTUP);
+  m_pacingGain = m_highGain;
+  m_cWndGain = m_highGain;
+}
+
+void
+QuicBbr::HandleRestartFromIdle (Ptr<QuicSocketState> tcb, const RateSample * rs)
+{
+  NS_LOG_FUNCTION (this << tcb << rs);
+  if (tcb->m_bytesInFlight.Get () == 0U && rs->m_isAppLimited)
+    {
+      m_idleRestart = true;
+      if (m_state.Get () == BbrMode_t::BBR_PROBE_BW)
+        {
+          SetPacingRate (tcb, 1);
+        }
+    }
+}
+
+void
+QuicBbr::SetPacingRate (Ptr<QuicSocketState> tcb, double gain)
+{
+  NS_LOG_FUNCTION (this << tcb << gain);
+  DataRate rate (gain * m_maxBwFilter.GetBest ().GetBitRate ());
+  rate = std::min (rate, tcb->m_maxPacingRate);
+  if (m_isPipeFilled || rate > tcb->m_pacingRate)
+    {
+      tcb->m_pacingRate = rate;
+    }
+}
+
+uint32_t
+QuicBbr::InFlight (Ptr<QuicSocketState> tcb, double gain)
+{
+  NS_LOG_FUNCTION (this << tcb << gain);
+  if (m_rtProp == Time::Max ())
+    {
+      return tcb->m_initialCWnd;
+    }
+  double quanta = 3 * m_sendQuantum;
+  double estimatedBdp = m_maxBwFilter.GetBest () * m_rtProp / 8.0;
+  return gain * estimatedBdp + quanta;
+}
+
+void
+QuicBbr::AdvanceCyclePhase ()
+{
+  NS_LOG_FUNCTION (this);
+  m_cycleStamp = Simulator::Now ();
+  m_cycleIndex = (m_cycleIndex + 1) % GAIN_CYCLE_LENGTH;
+  m_pacingGain = PACING_GAIN_CYCLE [m_cycleIndex];
+}
+
+bool
+QuicBbr::IsNextCyclePhase (Ptr<QuicSocketState> tcb, const struct RateSample * rs)
+{
+  NS_LOG_FUNCTION (this << tcb << rs);
+  bool isFullLength = (Simulator::Now () - m_cycleStamp) > m_rtProp;
+  if (m_pacingGain == 1)
+    {
+      return isFullLength;
+    }
+  else if (m_pacingGain > 1)
+    {
+      return isFullLength && (rs->m_packetLoss > 0 || rs->m_priorInFlight >= InFlight (tcb, m_pacingGain));
+    }
+  else
+    {
+      return isFullLength || rs->m_priorInFlight <= InFlight (tcb, 1);
+    }
+}
+
+void
+QuicBbr::CheckCyclePhase (Ptr<QuicSocketState> tcb, const struct RateSample * rs)
+{
+  NS_LOG_FUNCTION (this << tcb << rs);
+  if (m_state.Get () == BbrMode_t::BBR_PROBE_BW && IsNextCyclePhase (tcb, rs))
+    {
+      AdvanceCyclePhase ();
+    }
+}
+
+void
+QuicBbr::CheckFullPipe (const struct RateSample * rs)
+{
+  NS_LOG_FUNCTION (this << rs);
+  if (m_isPipeFilled || !m_roundStart || rs->m_isAppLimited)
+    {
+      return;
+    }
+
+  /* Check if Bottleneck bandwidth is still growing*/
+  if (m_maxBwFilter.GetBest ().GetBitRate () >= m_fullBandwidth.GetBitRate () * 1.25)
+    {
+      m_fullBandwidth = m_maxBwFilter.GetBest ();
+      m_fullBandwidthCount = 0;
+      return;
+    }
+
+  m_fullBandwidthCount++;
+  if (m_fullBandwidthCount >= 3)
+    {
+      NS_LOG_DEBUG ("Pipe filled");
+      m_isPipeFilled = true;
+    }
+}
+
+void
+QuicBbr::EnterDrain ()
+{
+  NS_LOG_FUNCTION (this);
+  SetBbrState (BbrMode_t::BBR_DRAIN);
+  m_pacingGain = 1.0 / m_highGain;
+  m_cWndGain = m_highGain;
+}
+
+void
+QuicBbr::EnterProbeBW ()
+{
+  NS_LOG_FUNCTION (this);
+  SetBbrState (BbrMode_t::BBR_PROBE_BW);
+  m_pacingGain = 1;
+  m_cWndGain = 2;
+  m_cycleIndex = GAIN_CYCLE_LENGTH - 1 - (int) m_uv->GetValue (0, 8);
+  AdvanceCyclePhase ();
+}
+
+void
+QuicBbr::CheckDrain (Ptr<QuicSocketState> tcb)
+{
+  NS_LOG_FUNCTION (this << tcb);
+  if (m_state.Get () == BbrMode_t::BBR_STARTUP && m_isPipeFilled)
+    {
+      EnterDrain ();
+    }
+
+  if (m_state.Get () == BbrMode_t::BBR_DRAIN && tcb->m_bytesInFlight <= InFlight (tcb, 1))
+    {
+      EnterProbeBW ();
+    }
+}
+
+void
+QuicBbr::UpdateRTprop (Ptr<QuicSocketState> tcb)
+{
+  NS_LOG_FUNCTION (this << tcb);
+  m_rtPropExpired = Simulator::Now () > (m_rtPropStamp + m_rtPropFilterLen);
+  if (tcb->m_lastRtt >= Seconds (0) && (tcb->m_lastRtt <= m_rtProp || m_rtPropExpired))
+    {
+      m_rtProp = tcb->m_lastRtt;
+      m_rtPropStamp = Simulator::Now ();
+    }
+}
+
+void
+QuicBbr::EnterProbeRTT ()
+{
+  NS_LOG_FUNCTION (this);
+  SetBbrState (BbrMode_t::BBR_PROBE_RTT);
+  m_pacingGain = 1;
+  m_cWndGain = 1;
+}
+
+void
+QuicBbr::SaveCwnd (Ptr<const QuicSocketState> tcb)
+{
+  NS_LOG_FUNCTION (this << tcb);
+  if (tcb->m_congState != TcpSocketState::CA_RECOVERY && m_state.Get () != BbrMode_t::BBR_PROBE_RTT)
+    {
+      m_priorCwnd = tcb->m_cWnd;
+    }
+  else
+    {
+      m_priorCwnd = std::max (m_priorCwnd, tcb->m_cWnd.Get ());
+    }
+}
+
+void
+QuicBbr::RestoreCwnd (Ptr<QuicSocketState> tcb)
+{
+  NS_LOG_FUNCTION (this << tcb);
+  tcb->m_cWnd = std::max (m_priorCwnd, tcb->m_cWnd.Get ());
+}
+
+void
+QuicBbr::ExitProbeRTT ()
+{
+  NS_LOG_FUNCTION (this);
+  if (m_isPipeFilled)
+    {
+      EnterProbeBW ();
+    }
+  else
+    {
+      EnterStartup ();
+    }
+}
+
+void
+QuicBbr::HandleProbeRTT (Ptr<QuicSocketState> tcb)
+{
+  NS_LOG_FUNCTION (this << tcb);
+
+  tcb->m_appLimitedUntil = (tcb->m_delivered + tcb->m_bytesInFlight.Get ()) ?: 1;
+
+  if (m_probeRttDoneStamp == Seconds (0) && tcb->m_bytesInFlight <= m_minPipeCwnd)
+    {
+      m_probeRttDoneStamp = Simulator::Now () + m_probeRttDuration;
+      m_probeRttRoundDone = false;
+      m_nextRoundDelivered = tcb->m_delivered;
+    }
+  else if (m_probeRttDoneStamp != Seconds (0))
+    {
+      if (m_roundStart)
+        {
+          m_probeRttRoundDone = true;
+        }
+      if (m_probeRttRoundDone && Simulator::Now () > m_probeRttDoneStamp)
+        {
+          m_rtPropStamp = Simulator::Now ();
+          RestoreCwnd (tcb);
+          ExitProbeRTT ();
+        }
+    }
+}
+
+void
+QuicBbr::CheckProbeRTT (Ptr<QuicSocketState> tcb)
+{
+  NS_LOG_FUNCTION (this << tcb);
+  NS_LOG_DEBUG (Simulator::Now () << "WhichState " << WhichState (m_state.Get ())
+                                  << " m_rtPropExpired " << m_rtPropExpired << " !m_idleRestart "
+                                  << !m_idleRestart);
+  if (m_state.Get () != BbrMode_t::BBR_PROBE_RTT && m_rtPropExpired && !m_idleRestart)
+    {
+      EnterProbeRTT ();
+      SaveCwnd (tcb);
+      m_probeRttDoneStamp = Seconds (0);
+    }
+
+  if (m_state.Get () == BbrMode_t::BBR_PROBE_RTT)
+    {
+      HandleProbeRTT (tcb);
+    }
+
+  m_idleRestart = false;
+}
+
+void
+QuicBbr::SetSendQuantum (Ptr<QuicSocketState> tcb)
+{
+  NS_LOG_FUNCTION (this << tcb);
+  m_sendQuantum = 1 * tcb->m_segmentSize;
+/*TODO
+  Since TSO can't be implemented in ns-3
+  if (tcb->m_pacingRate < DataRate ("1.2Mbps"))
+    {
+      m_sendQuantum = 1 * tcb->m_segmentSize;
+    }
+  else if (tcb->m_pacingRate < DataRate ("24Mbps"))
+    {
+      m_sendQuantum  = 2 * tcb->m_segmentSize;
+    }
+  else
+    {
+      m_sendQuantum = std::min (tcb->m_pacingRate.GetBitRate () * MilliSeconds (1).GetMilliSeconds () / 8, (uint64_t) 64000);
+    }*/
+}
+
+void
+QuicBbr::UpdateTargetCwnd (Ptr<QuicSocketState> tcb)
+{
+  NS_LOG_FUNCTION (this << tcb);
+  m_targetCWnd = InFlight (tcb, m_cWndGain);
+}
+
+void
+QuicBbr::ModulateCwndForRecovery (Ptr<QuicSocketState> tcb, const struct RateSample * rs)
+{
+  NS_LOG_FUNCTION (this << tcb << rs);
+  if ( rs->m_packetLoss > 0)
+    {
+      tcb->m_cWnd = std::max ((int) tcb->m_cWnd.Get () - (int) rs->m_packetLoss, (int) tcb->m_segmentSize);
+    }
+
+  if (m_packetConservation)
+    {
+      tcb->m_cWnd = std::max (tcb->m_cWnd.Get (), tcb->m_bytesInFlight.Get () + tcb->m_lastAckedSackedBytes);
+    }
+}
+
+void
+QuicBbr::ModulateCwndForProbeRTT (Ptr<QuicSocketState> tcb)
+{
+  NS_LOG_FUNCTION (this << tcb);
+  if (m_state.Get () == BbrMode_t::BBR_PROBE_RTT)
+    {
+      tcb->m_cWnd = std::min (tcb->m_cWnd.Get (), m_minPipeCwnd);
+    }
+}
+
+void
+QuicBbr::SetCwnd (Ptr<QuicSocketState> tcb, const struct RateSample * rs)
+{
+  NS_LOG_FUNCTION (this << tcb << rs);
+  UpdateTargetCwnd (tcb);
+
+  if (tcb->m_congState == TcpSocketState::CA_RECOVERY)
+    {
+      ModulateCwndForRecovery (tcb, rs);
+    }
+
+  if (!m_packetConservation)
+    {
+      if (m_isPipeFilled)
+        {
+          tcb->m_cWnd = std::min (tcb->m_cWnd.Get () + (uint32_t) tcb->m_lastAckedSackedBytes, m_targetCWnd);
+        }
+      else if (tcb->m_cWnd < m_targetCWnd || tcb->m_delivered < tcb->m_initialCWnd)
+        {
+          tcb->m_cWnd = tcb->m_cWnd.Get () + tcb->m_lastAckedSackedBytes;
+        }
+      tcb->m_cWnd = std::max (tcb->m_cWnd.Get (), m_minPipeCwnd);
+    }
+  ModulateCwndForProbeRTT (tcb);
+  if (tcb->m_congState == TcpSocketState::CA_RECOVERY)
+    {
+      m_packetConservation = false;
+    }
+}
+
+void
+QuicBbr::UpdateRound (Ptr<QuicSocketState> tcb, const struct RateSample * rs)
+{
+  NS_LOG_FUNCTION (this << tcb << rs);
+  if (tcb->m_txItemDelivered >= m_nextRoundDelivered)
+    {
+      m_nextRoundDelivered = tcb->m_delivered;
+      m_roundCount++;
+      m_roundStart = true;
+    }
+  else
+    {
+      m_roundStart = false;
+    }
+}
+
+void
+QuicBbr::UpdateBtlBw (Ptr<QuicSocketState> tcb, const struct RateSample * rs)
+{
+  NS_LOG_FUNCTION (this << tcb << rs);
+  if (rs->m_deliveryRate == 0)
+    {
+      return;
+    }
+
+  UpdateRound (tcb, rs);
+
+  if (rs->m_deliveryRate >= m_maxBwFilter.GetBest () || !rs->m_isAppLimited)
+    {
+      m_maxBwFilter.Update (rs->m_deliveryRate, m_roundCount);
+    }
+}
+
+
+
+void
+QuicBbr::UpdateModelAndState (Ptr<QuicSocketState> tcb, const struct RateSample * rs)
+{
+  NS_LOG_FUNCTION (this << tcb << rs);
+  UpdateBtlBw (tcb, rs);
+  CheckCyclePhase (tcb, rs);
+  CheckFullPipe (rs);
+  CheckDrain (tcb);
+  UpdateRTprop (tcb);
+  CheckProbeRTT (tcb);
+}
+
+void
+QuicBbr::UpdateControlParameters (Ptr<QuicSocketState> tcb, const struct RateSample * rs)
+{
+  NS_LOG_FUNCTION (this << tcb << rs);
+  SetPacingRate (tcb, m_pacingGain);
+  SetSendQuantum (tcb);
+  SetCwnd (tcb, rs);
+}
+
+std::string
+QuicBbr::WhichState (BbrMode_t mode) const
+{
+  switch (mode)
+    {
+      case 0:
+        return "BBR_STARTUP";
+      case 1:
+        return "BBR_DRAIN";
+      case 2:
+        return "BBR_PROBE_BW";
+      case 3:
+        return "BBR_PROBE_RTT";
+      default:
+        NS_ABORT_MSG ("Invalid BBR state");
+        return "";
+    }
+}
+
+void
+QuicBbr::SetBbrState (BbrMode_t mode)
+{
+  NS_LOG_FUNCTION (this << mode);
+  NS_LOG_DEBUG (Simulator::Now () << " Changing from " << WhichState (m_state) << " to " << WhichState (mode));
+  m_state = mode;
+}
+
+uint32_t
+QuicBbr::GetBbrState ()
+{
+  NS_LOG_FUNCTION (this);
+  return m_state.Get ();
+}
+
+double
+QuicBbr::GetCwndGain ()
+{
+  NS_LOG_FUNCTION (this);
+  return m_cWndGain;
+}
+
+double
+QuicBbr::GetPacingGain ()
+{
+  NS_LOG_FUNCTION (this);
+  return m_pacingGain;
+}
+
+std::string
+QuicBbr::GetName () const
+{
+  return "QuicBbr";
+}
+
+void
+QuicBbr::CongControl (Ptr<QuicSocketState> tcb, const struct RateSample *rs)
+{
+  NS_LOG_FUNCTION (this << tcb << rs);
+  UpdateModelAndState (tcb, rs);
+  UpdateControlParameters (tcb, rs);
+}
+
+void
+QuicBbr::CongControl (Ptr<TcpSocketState> tcb,
+                      const TcpRateOps::TcpRateConnection &rc,
+                      const TcpRateOps::TcpRateSample &rs)
+{
+    NS_LOG_FUNCTION (this << tcb);
+}
+
+void
+QuicBbr::CongestionStateSet (Ptr<TcpSocketState> tcb,
+                             const TcpSocketState::TcpCongState_t newState)
+{
+  NS_LOG_FUNCTION (this << tcb << newState);
+  Ptr<QuicSocketState> tcbd = dynamic_cast<QuicSocketState *> (&(*tcb));
+  NS_ASSERT_MSG (tcbd != 0, "tcb is not a QuicSocketState");
+
+  if (newState == TcpSocketState::CA_OPEN && !m_isInitialized)
+    {
+      NS_LOG_DEBUG ("CongestionStateSet triggered to CA_OPEN :: " << newState);
+      m_rtProp = tcbd->m_lastRtt.Get () != Seconds (0) ? tcbd->m_lastRtt.Get () : Time::Max ();
+      m_rtPropStamp = Simulator::Now ();
+      m_priorCwnd = tcbd->m_initialCWnd;
+      m_targetCWnd = tcbd->m_initialCWnd;
+      m_minPipeCwnd = 4 * tcbd->m_segmentSize;
+      m_sendQuantum = 1 * tcbd->m_segmentSize;
+      m_maxBwFilter = MaxBandwidthFilter_t (m_bandwidthWindowLength,
+                                            DataRate (tcbd->m_initialCWnd * 8 / m_rtProp.GetSeconds ())
+                                            , 0);
+      InitRoundCounting ();
+      InitFullPipe ();
+      EnterStartup ();
+      InitPacingRate (tcbd);
+      m_isInitialized = true;
+    }
+  else if (newState == TcpSocketState::CA_LOSS)
+    {
+      NS_LOG_DEBUG ("CongestionStateSet triggered to CA_LOSS :: " << newState);
+      SaveCwnd (tcbd);
+      tcbd->m_cWnd = tcbd->m_segmentSize;
+      m_roundStart = true;
+    }
+  else if (newState == TcpSocketState::CA_RECOVERY)
+    {
+      NS_LOG_DEBUG ("CongestionStateSet triggered to CA_RECOVERY :: " << newState);
+      SaveCwnd (tcbd);
+      tcbd->m_cWnd = tcbd->m_bytesInFlight.Get () + std::max (tcbd->m_lastAckedSackedBytes, tcbd->m_segmentSize);
+      m_packetConservation = true;
+    }
+}
+
+void
+QuicBbr::CwndEvent (Ptr<TcpSocketState> tcb,
+                    const TcpSocketState::TcpCAEvent_t event)
+{
+  NS_LOG_FUNCTION (this << tcb << event);
+  Ptr<QuicSocketState> tcbd = dynamic_cast<QuicSocketState *> (&(*tcb));
+  NS_ASSERT_MSG (tcbd != 0, "tcb is not a QuicSocketState");
+
+  if (event == TcpSocketState::CA_EVENT_COMPLETE_CWR)
+    {
+      NS_LOG_DEBUG ("CwndEvent triggered to CA_EVENT_COMPLETE_CWR :: " << event);
+      m_packetConservation = false;
+      RestoreCwnd (tcbd);
+    }
+  else if (event == TcpSocketState::CA_EVENT_TX_START)
+    {
+      NS_LOG_DEBUG ("CwndEvent triggered to CA_EVENT_TX_START :: " << event);
+      if (tcbd->m_bytesInFlight.Get () == 0 && tcbd->m_appLimitedUntil > tcbd->m_delivered)
+        {
+          m_idleRestart = true;
+          if (m_state.Get () == BbrMode_t::BBR_PROBE_BW && tcbd->m_appLimitedUntil > tcbd->m_delivered)
+            {
+              SetPacingRate (tcbd, 1);
+            }
+        }
+    }
+}
+
+uint32_t
+QuicBbr::GetSsThresh (Ptr<const TcpSocketState> tcb, uint32_t bytesInFlight)
+{
+  NS_LOG_FUNCTION (this << tcb << bytesInFlight);
+  Ptr<const QuicSocketState> tcbd = dynamic_cast<const QuicSocketState *> (&(*tcb));
+  if (tcbd)
+    {
+      SaveCwnd (tcbd);
+    }
+  return tcb->m_initialSsThresh;
+}
+
+void
+QuicBbr::IncreaseWindow (Ptr<TcpSocketState> tcb, uint32_t segmentsAcked)
+{
+}
+
+void
+QuicBbr::OnPacketSent (Ptr<TcpSocketState> tcb, SequenceNumber32 packetNumber, bool isAckOnly)
+{
+  NS_LOG_FUNCTION (this << packetNumber << isAckOnly);
+  Ptr<QuicSocketState> tcbd = dynamic_cast<QuicSocketState *> (&(*tcb));
+  NS_ASSERT_MSG (tcbd != 0, "tcb is not a QuicSocketState");
+
+  tcbd->m_timeOfLastSentPacket = Now ();
+  tcbd->m_highTxMark = packetNumber;
+}
+
+void
+QuicBbr::OnAckReceived (Ptr<TcpSocketState> tcb, QuicSubheader &ack,
+                        std::vector<Ptr<QuicSocketTxItem> > newAcks,
+                        const struct RateSample *rs)
+{
+  NS_LOG_FUNCTION (this);
+
+  Ptr<QuicSocketState> tcbd = dynamic_cast<QuicSocketState *> (&(*tcb));
+  NS_ASSERT_MSG (tcbd != 0, "tcb is not a QuicSocketState");
+
+  tcbd->m_largestAckedPacket = SequenceNumber32 (ack.GetLargestAcknowledged ());
+
+  // newAcks are ordered from the highest packet number to the smalles
+  Ptr<QuicSocketTxItem> lastAcked = newAcks.at (0);
+
+  NS_LOG_LOGIC ("Updating RTT estimate");
+  // If the largest acked is newly acked, update the RTT.
+  if (lastAcked->m_packetNumber == tcbd->m_largestAckedPacket)
+    {
+      tcbd->m_lastRtt = Now () - lastAcked->m_lastSent;
+      UpdateRtt (tcbd, tcbd->m_lastRtt, MicroSeconds (ack.GetAckDelay ()));
+    }
+
+  // Precess end of recovery
+  if ((tcbd->m_congState == TcpSocketState::CA_RECOVERY or
+       tcbd->m_congState == TcpSocketState::CA_LOSS) and
+      tcbd->m_endOfRecovery <= tcbd->m_largestAckedPacket)
+    {
+      tcbd->m_congState = TcpSocketState::CA_OPEN;
+      CongestionStateSet (tcb, TcpSocketState::CA_OPEN);
+      CwndEvent (tcb, TcpSocketState::CA_EVENT_COMPLETE_CWR);
+    }
+
+  NS_LOG_LOGIC ("Processing acknowledged packets");
+  // Process each acked packet
+  for (auto it = newAcks.rbegin (); it != newAcks.rend (); ++it)
+    {
+      if ((*it)->m_acked)
+        {
+          OnPacketAcked (tcb, (*it));
+        }
+    }
+  CongControl (tcbd, rs);
+}
+
+void
+QuicBbr::OnPacketsLost (Ptr<TcpSocketState> tcb, std::vector<Ptr<QuicSocketTxItem> > lostPackets)
+{
+  NS_LOG_LOGIC (this);
+  Ptr<QuicSocketState> tcbd = dynamic_cast<QuicSocketState *> (&(*tcb));
+  NS_ASSERT_MSG (tcbd != 0, "tcb is not a QuicSocketState");
+
+  auto largestLostPacket = *(lostPackets.end () - 1);
+
+  NS_LOG_INFO ("Go in recovery mode");
+
+  // TCP early retransmit logic [RFC 5827]: enter recovery (RFC 6675, Sec. 5)
+  if (!InRecovery (tcb, largestLostPacket->m_packetNumber))
+    {
+      tcbd->m_endOfRecovery = tcbd->m_highTxMark;
+      tcbd->m_congState = TcpSocketState::CA_RECOVERY;
+      CongestionStateSet (tcbd, TcpSocketState::CA_RECOVERY);
+    }
+}
+
+void
+QuicBbr::OnPacketAcked (Ptr<TcpSocketState> tcb, Ptr<QuicSocketTxItem> ackedPacket)
+{
+  NS_LOG_FUNCTION (this);
+  Ptr<QuicSocketState> tcbd = dynamic_cast<QuicSocketState*> (&(*tcb));
+  NS_ASSERT_MSG (tcbd != 0, "tcb is not a QuicSocketState");
+
+  NS_LOG_LOGIC ("Handle possible RTO");
+  // If a packet sent prior to RTO was acked, then the RTO  was spurious. Otherwise, inform congestion control.
+  if (tcbd->m_rtoCount > 0
+      and ackedPacket->m_packetNumber > tcbd->m_largestSentBeforeRto)
+    {
+      OnRetransmissionTimeoutVerified (tcb);
+    }
+  tcbd->m_handshakeCount = 0;
+  tcbd->m_tlpCount = 0;
+  tcbd->m_rtoCount = 0;
+}
+
+void
+QuicBbr::OnRetransmissionTimeoutVerified (Ptr<TcpSocketState> tcb)
+{
+  NS_LOG_FUNCTION (this);
+  Ptr<QuicSocketState> tcbd = dynamic_cast<QuicSocketState*> (&(*tcb));
+  NS_ASSERT_MSG (tcbd != 0, "tcb is not a QuicSocketState");
+  NS_LOG_INFO ("Loss state");
+  tcbd->m_congState = TcpSocketState::CA_LOSS;
+  CongestionStateSet (tcbd, TcpSocketState::CA_LOSS);
+}
+
+Ptr<TcpCongestionOps>
+QuicBbr::Fork (void)
+{
+  return CopyObject<QuicBbr> (this);
+}
+
+} // namespace ns3
diff --git a/src/quic/model/quic-bbr.h b/src/quic/model/quic-bbr.h
new file mode 100644
index 000000000..e75550741
--- /dev/null
+++ b/src/quic/model/quic-bbr.h
@@ -0,0 +1,398 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2018 NITK Surathkal, 
+ * Copyright (c) 2020 SIGNET Lab, Department of Information Engineering, 
+ * University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Vivek Jain <jain.vivek.anand@gmail.com>
+ *          Viyom Mittal <viyommittal@gmail.com>
+ *          Mohit P. Tahiliani <tahiliani@nitk.edu.in>
+ *          Umberto Paro <umberto.paro@me.com>
+ */
+
+#pragma once
+
+#include "ns3/quic-congestion-ops.h"
+#include "ns3/traced-value.h"
+#include "ns3/data-rate.h"
+#include "ns3/random-variable-stream.h"
+#include "ns3/windowed-filter.h"
+
+class QuicBbrCheckGainValuesTest;
+
+namespace ns3 {
+
+class QuicBbr : public QuicCongestionOps
+{
+public:
+  /**
+   * \brief The number of phases in the BBR ProbeBW gain cycle.
+   */
+  static const uint8_t GAIN_CYCLE_LENGTH = 8;
+
+  /**
+   * \brief BBR uses an eight-phase cycle with the given pacing_gain value
+   * in the BBR ProbeBW gain cycle.
+   */
+  const static double PACING_GAIN_CYCLE [];
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+
+  /**
+   * \brief Constructor
+   */
+  QuicBbr ();
+
+  /**
+   * Copy constructor.
+   * \param sock The socket to copy from.
+   */
+  QuicBbr (const QuicBbr &sock);
+
+  /* BBR has the following modes for deciding how fast to send: */
+  typedef enum
+  {
+    BBR_STARTUP,        /* ramp up sending rate rapidly to fill pipe */
+    BBR_DRAIN,          /* drain any queue created during startup */
+    BBR_PROBE_BW,       /* discover, share bw: pace around estimated bw */
+    BBR_PROBE_RTT,      /* cut inflight to min to probe min_rtt */
+  } BbrMode_t;
+
+  typedef WindowedFilter<DataRate,
+                         MaxFilter<DataRate>,
+                         uint32_t,
+                         uint32_t>
+    MaxBandwidthFilter_t;
+
+  /**
+   * Assign a fixed random variable stream number to the random variables
+   * used by this model.  Return the number of streams (possibly zero) that
+   * have been assigned.
+   *
+   * \param stream first stream index to use
+   * \return the number of stream indices assigned by this model
+   */
+  virtual int64_t AssignStreams (int64_t stream);
+
+  virtual std::string GetName () const;
+  virtual void CongestionStateSet (Ptr<TcpSocketState> tcb,
+                                   const TcpSocketState::TcpCongState_t newState);
+
+  virtual void OnPacketSent (Ptr<TcpSocketState> tcb, SequenceNumber32 packetNumber, bool isAckOnly);
+  virtual void OnAckReceived (Ptr<TcpSocketState> tcb, QuicSubheader &ack,
+                              std::vector<Ptr<QuicSocketTxItem> > newAcks, const struct RateSample *rs);
+  virtual void OnPacketsLost (Ptr<TcpSocketState> tcb, std::vector<Ptr<QuicSocketTxItem> > lostPackets);
+
+  virtual void CwndEvent (Ptr<TcpSocketState> tcb,
+                          const TcpSocketState::TcpCAEvent_t event);
+  virtual uint32_t GetSsThresh (Ptr<const TcpSocketState> tcb,
+                                uint32_t bytesInFlight);
+  virtual void IncreaseWindow (Ptr<TcpSocketState> tcb,
+                               uint32_t segmentsAcked);
+  virtual Ptr<TcpCongestionOps> Fork ();
+  
+  /**
+   * \brief Unused function, added here to avoid overloading the one in TcpCongestionOps
+   */
+  virtual void CongControl (Ptr<TcpSocketState> tcb,
+                            const TcpRateOps::TcpRateConnection &rc,
+                            const TcpRateOps::TcpRateSample &rs);
+
+protected:
+  void OnPacketAcked (Ptr<TcpSocketState> tcb, Ptr<QuicSocketTxItem> ackedPacket);
+  virtual void OnRetransmissionTimeoutVerified (Ptr<TcpSocketState> tcb);
+
+
+  /**
+   * \brief Called when packets are delivered to update cwnd and pacing rate
+   *
+   * This function mimics the function cong_control in Linux. It is allowed to
+   * change directly cWnd and pacing rate.
+   *
+   * \param tcb internal congestion state
+   * \param rs count of segments acked
+   */
+  virtual void CongControl (Ptr<QuicSocketState> tcb, const struct RateSample *rs);
+
+  /**
+   * \brief QuicBbrCheckGainValuesTest friend class (for tests).
+   * \relates QuicBbrCheckGainValuesTest
+   */
+  friend class QuicBbrCheckGainValuesTest;
+
+  /**
+   * \brief Advances pacing gain using cycle gain algorithm, while in BBR_PROBE_BW state
+   */
+  void AdvanceCyclePhase ();
+
+  /**
+   * \brief Checks whether to advance pacing gain in BBR_PROBE_BW state,
+   *  and if allowed calls AdvanceCyclePhase ()
+   * \param tcb the socket state.
+   * \param rs  rate sample
+   */
+  void CheckCyclePhase (Ptr<QuicSocketState> tcb, const struct RateSample * rs);
+
+  /**
+   * \brief Checks whether its time to enter BBR_DRAIN or BBR_PROBE_BW state
+   * \param tcb the socket state.
+   */
+  void CheckDrain (Ptr<QuicSocketState> tcb);
+
+  /**
+   * \brief Identifies whether pipe or BDP is already full
+   * \param rs  rate sample
+   */
+  void CheckFullPipe (const struct RateSample * rs);
+
+  /**
+   * \brief This method handles the steps related to the ProbeRTT state
+   * \param tcb the socket state.
+   */
+  void CheckProbeRTT (Ptr<QuicSocketState> tcb);
+
+  /**
+   * \brief Updates variables specific to BBR_DRAIN state
+   */
+  void EnterDrain ();
+
+  /**
+   * \brief Updates variables specific to BBR_PROBE_BW state
+   */
+  void EnterProbeBW ();
+
+  /**
+   * \brief Updates variables specific to BBR_PROBE_RTT state
+   */
+  void EnterProbeRTT ();
+
+  /**
+   * \brief Updates variables specific to BBR_STARTUP state
+   */
+  void EnterStartup ();
+
+  /**
+   * \brief Called on exiting from BBR_PROBE_RTT state, it eithers invoke EnterProbeBW () or EnterStartup ()
+   */
+  void ExitProbeRTT ();
+
+  /**
+   * \brief Gets BBR state.
+   * \return returns BBR state.
+   */
+  uint32_t GetBbrState ();
+
+  /**
+   * \brief Gets current pacing gain.
+   * \return returns current pacing gain.
+   */
+  double GetPacingGain ();
+
+  /**
+   * \brief Gets current cwnd gain.
+   * \return returns current cwnd gain.
+   */
+  double GetCwndGain ();
+
+  /**
+   * \brief Handles the steps for BBR_PROBE_RTT state.
+   * \param tcb the socket state.
+   */
+  void HandleProbeRTT (Ptr<QuicSocketState> tcb);
+
+  /**
+   * \brief Updates pacing rate if socket is restarting from idle state.
+   * \param tcb the socket state.
+   * \param rs  rate sample
+   */
+  void HandleRestartFromIdle (Ptr<QuicSocketState> tcb, const struct RateSample * rs);
+
+  /**
+   * \brief Estimates the target value for congestion window
+   * \param tcb  the socket state.
+   * \param gain cwnd gain
+   */
+  uint32_t InFlight (Ptr<QuicSocketState> tcb, double gain);
+
+  /**
+   * \brief Intializes the full pipe estimator.
+   */
+  void InitFullPipe ();
+
+  /**
+   * \brief Intializes the pacing rate.
+   * \param tcb  the socket state.
+   */
+  void InitPacingRate (Ptr<QuicSocketState> tcb);
+
+  /**
+   * \brief Intializes the round counting related variables.
+   */
+  void InitRoundCounting ();
+
+  /**
+   * \brief Checks whether to move to next value of pacing gain while in BBR_PROBE_BW.
+   * \param tcb the socket state.
+   * \param rs  rate sample
+   * \returns true if want to move to next value otherwise false.
+   */
+  bool IsNextCyclePhase (Ptr<QuicSocketState> tcb, const struct RateSample * rs);
+
+  /**
+   * \brief Modulates congestion window in BBR_PROBE_RTT.
+   * \param tcb the socket state
+   */
+  void ModulateCwndForProbeRTT (Ptr<QuicSocketState> tcb);
+
+  /**
+   * \brief Modulates congestion window in CA_RECOVERY.
+   * \param tcb the socket state.
+   * \param rs  rate sample
+   */
+  void ModulateCwndForRecovery (Ptr<QuicSocketState> tcb, const struct RateSample * rs);
+
+  /**
+   * \brief Helper to restore the last-known good congestion window
+   * \param tcb the socket state.
+   */
+  void RestoreCwnd (Ptr<QuicSocketState> tcb);
+
+  /**
+   * \brief Helper to remember the last-known good congestion window or
+   *        the latest congestion window unmodulated by loss recovery or ProbeRTT.
+   * \param tcb the socket state.
+   */
+  void SaveCwnd (Ptr<const QuicSocketState> tcb);
+
+  /**
+   * \brief Updates congestion window based on the network model.
+   * \param tcb the socket state.
+   * \param rs  rate sample
+   */
+  void SetCwnd (Ptr<QuicSocketState> tcb, const struct RateSample * rs);
+
+  /**
+   * \brief Updates pacing rate based on network model.
+   * \param tcb the socket state.
+   * \param gain pacing gain
+   */
+  void SetPacingRate (Ptr<QuicSocketState> tcb, double gain);
+
+  /**
+   * \brief Updates send quantum based on the network model.
+   * \param tcb the socket state.
+   */
+  void SetSendQuantum (Ptr<QuicSocketState> tcb);
+
+  /**
+   * \brief Updates maximum bottleneck.
+   * \param tcb the socket state.
+   * \param rs rate sample
+   */
+  void UpdateBtlBw (Ptr<QuicSocketState> tcb, const struct RateSample * rs);
+
+  /**
+   * \brief Updates control parameters congestion windowm, pacing rate, send quantum.
+   * \param tcb the socket state.
+   * \param rs rate sample
+   */
+  void UpdateControlParameters (Ptr<QuicSocketState> tcb, const struct RateSample * rs);
+
+  /**
+   * \brief Updates BBR network model (Maximum bandwidth and minimum RTT).
+   * \param tcb the socket state.
+   * \param rs rate sample
+   */
+  void UpdateModelAndState (Ptr<QuicSocketState> tcb, const struct RateSample * rs);
+
+  /**
+   * \brief Updates round counting related variables.
+   * \param tcb the socket state.
+   * \param rs rate sample
+   */
+  void UpdateRound (Ptr<QuicSocketState> tcb, const struct RateSample * rs);
+
+  /**
+   * \brief Updates minimum RTT.
+   * \param tcb the socket state.
+   */
+  void UpdateRTprop (Ptr<QuicSocketState> tcb);
+
+  /**
+   * \brief Updates target congestion window.
+   * \param tcb the socket state.
+   */
+  void UpdateTargetCwnd (Ptr<QuicSocketState> tcb);
+
+  /**
+   * \brief Sets BBR state.
+   * \param state BBR state.
+   */
+  void SetBbrState (BbrMode_t state);
+
+  /**
+   * \brief Maps mode into string.
+   * \return string translation of mode value.
+   */
+  std::string WhichState (BbrMode_t state) const;
+
+private:
+  TracedValue<BbrMode_t>   m_state        {BbrMode_t::BBR_STARTUP};           //!< Current state of BBR state machine
+  MaxBandwidthFilter_t   m_maxBwFilter;                          //!< Maximum bandwidth filter
+  uint32_t    m_bandwidthWindowLength       {0};                 //!< A constant specifying the length of the BBR.BtlBw max filter window, default 10 packet-timed round trips.
+  double      m_pacingGain                  {0};                 //!< The dynamic pacing gain factor
+  double      m_cWndGain                    {0};                 //!< The dynamic congestion window gain factor
+  double      m_highGain                    {0};                 //!< A constant specifying highest gain factor, default is 2.89
+  bool        m_isPipeFilled                {false};             //!< A boolean that records whether BBR has filled the pipe
+  uint32_t    m_minPipeCwnd                 {0};                 //!< The minimal congestion window value BBR tries to target, default 4 Segment size
+  uint32_t    m_roundCount                  {0};                 //!< Count of packet-timed round trips
+  bool        m_roundStart                  {false};             //!< A boolean that BBR sets to true once per packet-timed round trip
+  uint32_t    m_nextRoundDelivered          {0};                 //!< Denotes the end of a packet-timed round trip
+  Time        m_probeRttDuration            {MilliSeconds (200)};//!< A constant specifying the minimum duration for which ProbeRTT state, default 200 millisecs
+  Time        m_probeRtPropStamp            {Seconds (0)};       //!< The wall clock time at which the current BBR.RTProp sample was obtained.
+  Time        m_probeRttDoneStamp           {Seconds (0)};       //!< Time to exit from BBR_PROBE_RTT state
+  bool        m_probeRttRoundDone           {false};             //!< True when it is time to exit BBR_PROBE_RTT
+  bool        m_packetConservation          {false};             //!<
+  uint32_t    m_priorCwnd                   {0};                 //!< The last-known good congestion window
+  bool        m_idleRestart                 {false};             //!< When restarting from idle, set it true
+  uint32_t    m_targetCWnd                  {0};                 //!< Target value for congestion window, adapted to the estimated BDP
+  DataRate    m_fullBandwidth               {0};                 //!< Value of full bandwidth recorded
+  uint32_t    m_fullBandwidthCount          {0};                 //!< Count of full bandwidth recorded consistently
+  Time        m_rtProp                      {Time::Max ()};      //!< Estimated two-way round-trip propagation delay of the path, estimated from the windowed minimum recent round-trip delay sample.
+  uint32_t    m_sendQuantum                 {0};                 //!< The maximum size of a data aggregate scheduled and transmitted together
+  Time        m_cycleStamp                  {Seconds (0)};       //!< Last time gain cycle updated
+  uint32_t    m_cycleIndex                  {0};                 //!< Current index of gain cycle
+  bool        m_rtPropExpired               {false};             //!< A boolean recording whether the BBR.RTprop has expired
+  Time        m_rtPropFilterLen             {Seconds (10)};      //!< A constant specifying the length of the RTProp min filter window, default 10 secs.
+  Time        m_rtPropStamp                 {Seconds (0)};       //!< The wall clock time at which the current BBR.RTProp sample was obtained
+  bool        m_isInitialized               {false};             //!< Set to true after first time initializtion variables
+  Ptr<UniformRandomVariable> m_uv           {nullptr};           //!< Uniform Random Variable
+};
+
+/**
+ * \ingroup quic
+ * TracedValue Callback signature for BBR state trace
+ *
+ * \param [in] oldValue original value of the traced variable
+ * \param [in] newValue new value of the traced variable
+ */
+typedef void (*BbrStatesTracedValueCallback) (const QuicBbr::BbrMode_t oldValue,
+                                              const QuicBbr::BbrMode_t newValue);
+
+} // namespace ns3
diff --git a/src/quic/model/quic-congestion-ops.cc b/src/quic/model/quic-congestion-ops.cc
new file mode 100644
index 000000000..0ae94a144
--- /dev/null
+++ b/src/quic/model/quic-congestion-ops.cc
@@ -0,0 +1,278 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2020 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *          Umberto Paro <umberto.paro@me.com>
+ *
+ */
+
+#define __STDC_LIMIT_MACROS
+
+#include "ns3/log.h"
+#include "ns3/uinteger.h"
+#include "ns3/double.h"
+#include "ns3/boolean.h"
+#include "ns3/trace-source-accessor.h"
+#include "ns3/nstime.h"
+#include "quic-socket.h"
+#include "quic-congestion-ops.h"
+#include "quic-socket-base.h"
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("QuicCongestionControl");
+
+NS_OBJECT_ENSURE_REGISTERED (QuicCongestionOps);
+
+TypeId
+QuicCongestionOps::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicCongestionControl")
+    .SetParent<TcpNewReno> ()
+    .SetGroupName ("Internet")
+    .AddConstructor<QuicCongestionOps> ()
+  ;
+  return tid;
+}
+
+QuicCongestionOps::QuicCongestionOps (void)
+  : TcpNewReno ()
+{
+  NS_LOG_FUNCTION (this);
+}
+
+QuicCongestionOps::QuicCongestionOps (
+  const QuicCongestionOps& sock)
+  : TcpNewReno (sock)
+{
+  NS_LOG_FUNCTION (this);
+}
+
+QuicCongestionOps::~QuicCongestionOps (void)
+{}
+
+std::string
+QuicCongestionOps::GetName () const
+{
+  return "QuicCongestionControl";
+}
+
+Ptr<TcpCongestionOps>
+QuicCongestionOps::Fork ()
+{
+  return CopyObject<QuicCongestionOps> (this);
+}
+
+// Quic DRAFT 10
+
+void
+QuicCongestionOps::OnPacketSent (Ptr<TcpSocketState> tcb,
+                                 SequenceNumber32 packetNumber,
+                                 bool isAckOnly)
+{
+  NS_LOG_FUNCTION (this << packetNumber << isAckOnly);
+  Ptr<QuicSocketState> tcbd = dynamic_cast<QuicSocketState*> (&(*tcb));
+  NS_ASSERT_MSG (tcbd != 0, "tcb is not a QuicSocketState");
+
+  tcbd->m_timeOfLastSentPacket = Now ();
+  tcbd->m_highTxMark = packetNumber;
+}
+
+void
+QuicCongestionOps::OnAckReceived (Ptr<TcpSocketState> tcb,
+                                  QuicSubheader &ack,
+                                  std::vector<Ptr<QuicSocketTxItem> > newAcks,
+                                  const struct RateSample *rs)
+{
+  NS_LOG_FUNCTION (this);
+
+  Ptr<QuicSocketState> tcbd = dynamic_cast<QuicSocketState*> (&(*tcb));
+  NS_ASSERT_MSG (tcbd != 0, "tcb is not a QuicSocketState");
+
+  tcbd->m_largestAckedPacket = SequenceNumber32 (
+    ack.GetLargestAcknowledged ());
+
+  // newAcks are ordered from the highest packet number to the smalles
+  Ptr<QuicSocketTxItem> lastAcked = newAcks.at (0);
+
+  NS_LOG_LOGIC ("Updating RTT estimate");
+  // If the largest acked is newly acked, update the RTT.
+  if (lastAcked->m_packetNumber == tcbd->m_largestAckedPacket)
+    {
+      tcbd->m_lastRtt = Now () - lastAcked->m_lastSent;
+      UpdateRtt (tcbd, tcbd->m_lastRtt, Time (ack.GetAckDelay ()));
+    }
+
+  NS_LOG_LOGIC ("Processing acknowledged packets");
+  // Process each acked packet
+  for (auto it = newAcks.rbegin (); it != newAcks.rend (); ++it)
+    {
+      if ((*it)->m_acked)
+        {
+          OnPacketAcked (tcb, (*it));
+        }
+    }
+}
+
+void
+QuicCongestionOps::UpdateRtt (Ptr<TcpSocketState> tcb, Time latestRtt,
+                              Time ackDelay)
+{
+  NS_LOG_FUNCTION (this);
+  Ptr<QuicSocketState> tcbd = dynamic_cast<QuicSocketState*> (&(*tcb));
+  NS_ASSERT_MSG (tcbd != 0, "tcb is not a QuicSocketState");
+
+  // m_minRtt ignores ack delay.
+  tcbd->m_minRtt = std::min (tcbd->m_minRtt, latestRtt);
+
+  NS_LOG_LOGIC ("Correct for ACK delay");
+  // Adjust for ack delay if it's plausible.
+  if (latestRtt - tcbd->m_minRtt > ackDelay)
+    {
+      latestRtt -= ackDelay;
+      // TODO check this condition
+      // Only save into max ack delay if it's used for rtt calculation and is not ack only
+//        if (!tcbd->m_sentPackets[tcbd->m_largestAckedPacket]->m_ackOnly)
+//          {
+//            tcbd->m_maxAckDelay = std::max (tcbd->m_maxAckDelay, ackDelay);
+//          }
+    }
+
+  NS_LOG_LOGIC ("Update smoothed RTT");
+  // Based on [RFC6298].
+  if (tcbd->m_smoothedRtt == Seconds (0))
+    {
+      tcbd->m_smoothedRtt = latestRtt;
+      tcbd->m_rttVar = latestRtt / 2;
+    }
+  else
+    {
+      Time rttVarSample = Time (
+        std::abs ((tcbd->m_smoothedRtt - latestRtt).GetDouble ()));
+      tcbd->m_rttVar = 3 / 4 * tcbd->m_rttVar + 1 / 4 * rttVarSample;
+      tcbd->m_smoothedRtt = 7 / 8 * tcbd->m_smoothedRtt + 1 / 8 * latestRtt;
+    }
+
+}
+
+void
+QuicCongestionOps::OnPacketAcked (Ptr<TcpSocketState> tcb,
+                                  Ptr<QuicSocketTxItem> ackedPacket)
+{
+  NS_LOG_FUNCTION (this);
+  Ptr<QuicSocketState> tcbd = dynamic_cast<QuicSocketState*> (&(*tcb));
+  NS_ASSERT_MSG (tcbd != 0, "tcb is not a QuicSocketState");
+
+  OnPacketAckedCC (tcbd, ackedPacket);
+
+  NS_LOG_LOGIC ("Handle possible RTO");
+  // If a packet sent prior to RTO was acked, then the RTO  was spurious. Otherwise, inform congestion control.
+  if (tcbd->m_rtoCount > 0
+      and ackedPacket->m_packetNumber > tcbd->m_largestSentBeforeRto)
+    {
+      OnRetransmissionTimeoutVerified (tcb);
+    }
+  tcbd->m_handshakeCount = 0;
+  tcbd->m_tlpCount = 0;
+  tcbd->m_rtoCount = 0;
+}
+
+bool
+QuicCongestionOps::InRecovery (Ptr<TcpSocketState> tcb,
+                               SequenceNumber32 packetNumber)
+{
+  NS_LOG_FUNCTION (this << packetNumber.GetValue ());
+  Ptr<QuicSocketState> tcbd = dynamic_cast<QuicSocketState*> (&(*tcb));
+  NS_ASSERT_MSG (tcbd != 0, "tcb is not a QuicSocketState");
+
+  return packetNumber <= tcbd->m_endOfRecovery;
+}
+
+void
+QuicCongestionOps::OnPacketAckedCC (Ptr<TcpSocketState> tcb,
+                                    Ptr<QuicSocketTxItem> ackedPacket)
+{
+  NS_LOG_FUNCTION (this);
+  Ptr<QuicSocketState> tcbd = dynamic_cast<QuicSocketState*> (&(*tcb));
+  NS_ASSERT_MSG (tcbd != 0, "tcb is not a QuicSocketState");
+
+  NS_LOG_INFO ("Updating congestion window");
+  if (InRecovery (tcb, ackedPacket->m_packetNumber))
+    {
+      NS_LOG_LOGIC ("In recovery");
+      // Do not increase congestion window in recovery period.
+      return;
+    }
+  if (tcbd->m_cWnd < tcbd->m_ssThresh)
+    {
+      NS_LOG_LOGIC ("In slow start");
+      // Slow start.
+      tcbd->m_cWnd += ackedPacket->m_packet->GetSize ();
+    }
+  else
+    {
+      NS_LOG_LOGIC ("In congestion avoidance");
+      // Congestion Avoidance.
+      if (tcbd->m_cWnd > (uint32_t) 0) {
+          tcbd->m_cWnd += tcbd->m_segmentSize * ackedPacket->m_packet->GetSize ()
+              / tcbd->m_cWnd;
+      } else {
+          tcbd->m_cWnd = tcbd->m_kMinimumWindow;
+      }
+    }
+}
+
+void
+QuicCongestionOps::OnPacketsLost (
+  Ptr<TcpSocketState> tcb, std::vector<Ptr<QuicSocketTxItem> > lostPackets)
+{
+  NS_LOG_LOGIC (this);
+  Ptr<QuicSocketState> tcbd = dynamic_cast<QuicSocketState*> (&(*tcb));
+  NS_ASSERT_MSG (tcbd != 0, "tcb is not a QuicSocketState");
+
+  auto largestLostPacket = *(lostPackets.end () - 1);
+
+  NS_LOG_INFO ("Go in recovery mode");
+  // Start a new recovery epoch if the lost packet is larger than the end of the previous recovery epoch.
+  if (!InRecovery (tcbd, largestLostPacket->m_packetNumber))
+    {
+      tcbd->m_endOfRecovery = tcbd->m_highTxMark;
+      tcbd->m_cWnd *= tcbd->m_kLossReductionFactor;
+      if (tcbd->m_cWnd < tcbd->m_kMinimumWindow)
+        {
+          tcbd->m_cWnd = tcbd->m_kMinimumWindow;
+        }
+      tcbd->m_ssThresh = tcbd->m_cWnd;
+    }
+}
+
+void
+QuicCongestionOps::OnRetransmissionTimeoutVerified (
+  Ptr<TcpSocketState> tcb)
+{
+  NS_LOG_FUNCTION (this);
+  Ptr<QuicSocketState> tcbd = dynamic_cast<QuicSocketState*> (&(*tcb));
+  NS_ASSERT_MSG (tcbd != 0, "tcb is not a QuicSocketState");
+  NS_LOG_INFO ("Loss state");
+  tcbd->m_cWnd = tcbd->m_kMinimumWindow;
+  tcbd->m_congState = TcpSocketState::CA_LOSS;
+}
+
+} // namespace ns3
diff --git a/src/quic/model/quic-congestion-ops.h b/src/quic/model/quic-congestion-ops.h
new file mode 100644
index 000000000..16c46e651
--- /dev/null
+++ b/src/quic/model/quic-congestion-ops.h
@@ -0,0 +1,168 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2020 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *          Umberto Paro <umberto.paro@me.com>
+ *
+ */
+
+#ifndef QUICCONGESTIONOPS_H
+#define QUICCONGESTIONOPS_H
+
+#include "ns3/timer.h"
+#include "ns3/object.h"
+#include "quic-subheader.h"
+#include "ns3/tcp-congestion-ops.h"
+#include "ns3/tcp-socket-base.h"
+#include "quic-socket-base.h"
+#include "quic-socket-tx-buffer.h"
+
+namespace ns3 {
+
+/**
+ * \ingroup quic
+ * \defgroup congestionOps Congestion Control Algorithms.
+ *
+ * The various congestion control algorithms.
+ */
+
+/**
+ * \ingroup congestionOps
+ *
+ * \brief Congestion control abstract class
+ *
+ * The congestion control is splitted from the main socket code, and it is a
+ * pluggable component. An interface has been defined; variables are maintained
+ * in the QuicSocketState class, while subclasses of QuicCongestionOps operate
+ * over an instance of that class.
+ *
+ * The design extends TcpNewReno to provide compatibility with the TCP congestion
+ * control implementations, as well as the possibility of extending it with new
+ * QUIC-related capabilities.
+ *
+ */
+class QuicCongestionOps : public TcpNewReno
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+
+  QuicCongestionOps ();
+  QuicCongestionOps (const QuicCongestionOps& sock);
+  ~QuicCongestionOps ();
+
+  /**
+   * \brief Get the name of the congestion control algorithm
+   *
+   * \return A string identifying the name
+   */
+  std::string GetName () const;
+
+  /**
+   * \brief Copy the congestion control algorithm across socket
+   *
+   * \return a pointer of the copied object
+   */
+  Ptr<TcpCongestionOps> Fork ();
+
+  // QuicCongestionControl Draft10
+
+  /**
+   * \brief Method called when a packet is sent. It updates the quantities in the tcb
+   *
+   * \param tcb a smart pointer to the SocketState (it accepts a QuicSocketState)
+   * \param packetNumber the packet number
+   * \param isAckOnly a flag to signal if the packet has only an ACK frame
+   */
+  virtual void OnPacketSent (Ptr<TcpSocketState> tcb, SequenceNumber32 packetNumber, bool isAckOnly);
+
+  /**
+   * \brief Method called when an ack is received. It process the received ack and updates
+   *   the quantities in the tcb.
+   *
+   * \param tcb a smart pointer to the SocketState (it accepts a QuicSocketState)
+   * \param ack the received ACK
+   * \param newAcks the newly acked packets
+   * \param rs the connection RateSample
+   */
+  virtual void OnAckReceived (Ptr<TcpSocketState> tcb, QuicSubheader &ack, std::vector<Ptr<QuicSocketTxItem> > newAcks,
+                              const struct RateSample *rs);
+
+  /**
+   * \brief Method called when a packet is lost. It process the lost packets and updates
+   *   the quantities in the tcb.
+   *
+   * \param tcb a smart pointer to the SocketState (it accepts a QuicSocketState)
+   * \param lostPackets the lost packets
+   */
+  virtual void OnPacketsLost (Ptr<TcpSocketState> tcb, std::vector<Ptr<QuicSocketTxItem> > lostPackets);
+
+protected:
+  // QuicCongestionControl Draft10
+
+  /**
+   * \brief Method called to update the Rtt. It updates the quantities in the tcb.
+   *
+   * \param tcb a smart pointer to the SocketState (it accepts a QuicSocketState)
+   * \param latestRtt the latest Rtt
+   * \param ackDelay the ack delay
+   */
+  void UpdateRtt (Ptr<TcpSocketState> tcb, Time latestRtt, Time ackDelay);
+
+  /**
+   * \brief Method called when a packet is acked. It process the acked packet and updates
+   *   the quantities in the tcb.
+   *
+   * \param tcb a smart pointer to the SocketState (it accepts a QuicSocketState)
+   * \param ackedPacked the acked packet
+   */
+  virtual void OnPacketAcked (Ptr<TcpSocketState> tcb, Ptr<QuicSocketTxItem> ackedPacket);
+
+  /**
+   * \brief Check if in recovery period
+   *
+   * \param tcb a smart pointer to the SocketState (it accepts a QuicSocketState)
+   * \param packetNumber to be checked
+   * \return true if in recovery, false otherwhise
+   */
+  bool InRecovery (Ptr<TcpSocketState> tcb, SequenceNumber32 packetNumber);
+
+  /**
+   * \brief Method called when a packet is acked. It updates the quantities in the tcb.
+   *
+   * \param tcb a smart pointer to the SocketState (it accepts a QuicSocketState)
+   * \param ackedPacked the acked packet
+   */
+  void OnPacketAckedCC (Ptr<TcpSocketState> tcb, Ptr<QuicSocketTxItem> ackedPacket);
+
+  /**
+   * \brief Method called when retransmission timeout fires. It updates the quantities in the tcb.
+   *
+   * \param tcb a smart pointer to the SocketState (it accepts a QuicSocketState)
+   */
+  virtual void OnRetransmissionTimeoutVerified (Ptr<TcpSocketState> tcb);
+
+};
+
+}
+#endif //QUIC_NS3_QUIC_CONGESTION_OPS_H_H
diff --git a/src/quic/model/quic-header.cc b/src/quic/model/quic-header.cc
new file mode 100644
index 000000000..42b7d97ac
--- /dev/null
+++ b/src/quic/model/quic-header.cc
@@ -0,0 +1,566 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *
+ */
+
+#include <stdint.h>
+#include <iostream>
+#include "quic-header.h"
+#include "ns3/buffer.h"
+#include "ns3/address-utils.h"
+#include "ns3/log.h"
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("QuicHeader");
+
+NS_OBJECT_ENSURE_REGISTERED (QuicHeader);
+
+QuicHeader::QuicHeader ()
+  : m_form (SHORT),
+  m_c (false),
+  m_k (PHASE_ZERO),
+  m_type (0),
+  m_connectionId (0),
+  m_packetNumber (0),
+  m_version (0)
+{
+}
+
+
+QuicHeader::~QuicHeader ()
+{
+}
+
+std::string
+QuicHeader::TypeToString () const
+{
+  static const char* longTypeNames[6] = {
+    "Version Negotiation",
+    "Initial",
+    "Retry",
+    "Handshake",
+    "0-RTT Protected",
+    "None"
+  };
+  static const char* shortTypeNames[4] = {
+    "1 Octet",
+    "2 Octets",
+    "4 Octets"
+  };
+
+  std::string typeDescription = "";
+
+  if (IsLong ())
+    {
+      typeDescription.append (longTypeNames[m_type]);
+    }
+  else
+    {
+      typeDescription.append (shortTypeNames[m_type]);
+    }
+  return typeDescription;
+}
+
+TypeId
+QuicHeader::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicHeader")
+    .SetParent<Header> ()
+    .SetGroupName ("Internet")
+    .AddConstructor<QuicHeader> ()
+  ;
+  return tid;
+}
+
+TypeId
+QuicHeader::GetInstanceTypeId (void) const
+{
+  return GetTypeId ();
+}
+
+uint32_t
+QuicHeader::GetSerializedSize (void) const
+{
+  NS_ASSERT (m_type != NONE or m_form == SHORT);
+
+  uint32_t serializesSize = CalculateHeaderLength ();
+  NS_LOG_INFO ("Serialized Size " << serializesSize);
+
+  return serializesSize;
+}
+
+uint32_t
+QuicHeader::CalculateHeaderLength () const
+{
+  uint32_t len;
+
+  if (IsLong ())
+    {
+      len = 8 + 64 + 32 + 32;
+    }
+  else
+    {
+      len = 8 + 64 * HasConnectionId () + GetPacketNumLen ();
+    }
+  return len / 8;
+}
+
+uint32_t
+QuicHeader::GetPacketNumLen () const
+{
+  if (IsLong ())
+    {
+      return 32;
+    }
+  else
+    {
+      switch (m_type)
+        {
+        case ONE_OCTECT:
+          {
+            return 8;
+            break;
+          }
+        case TWO_OCTECTS:
+          {
+            return 16;
+            break;
+          }
+        case FOUR_OCTECTS:
+          {
+            return 32;
+            break;
+          }
+        }
+    }
+  NS_FATAL_ERROR ("Invalid conditions");
+  return 0;
+}
+
+void
+QuicHeader::Serialize (Buffer::Iterator start) const
+{
+  NS_LOG_FUNCTION (this);
+  NS_ASSERT (m_type != NONE or m_form == SHORT);
+  NS_LOG_INFO ("Serialize::Serialized Size " << CalculateHeaderLength ());
+
+  Buffer::Iterator i = start;
+
+  uint8_t t = m_type + (m_form << 7);
+
+  if (m_form)
+    {
+      i.WriteU8 (t);
+      i.WriteHtonU64 (m_connectionId);
+      i.WriteHtonU32 (m_version);
+      if (!IsVersionNegotiation ())
+        {
+          i.WriteHtonU32 (m_packetNumber.GetValue ());
+        }
+    }
+  else
+    {
+      t += (m_c << 6) + (m_k << 5);
+      i.WriteU8 (t);
+
+      if (m_c)
+        {
+          i.WriteHtonU64 (m_connectionId);
+        }
+
+      switch (m_type)
+        {
+        case ONE_OCTECT:
+          i.WriteU8 ((uint8_t)m_packetNumber.GetValue ());
+          break;
+        case TWO_OCTECTS:
+          i.WriteHtonU16 ((uint16_t)m_packetNumber.GetValue ());
+          break;
+        case FOUR_OCTECTS:
+          i.WriteHtonU32 ((uint32_t)m_packetNumber.GetValue ());
+          break;
+        }
+    }
+}
+
+uint32_t
+QuicHeader::Deserialize (Buffer::Iterator start)
+{
+  NS_LOG_FUNCTION (this);
+
+  Buffer::Iterator i = start;
+
+  uint8_t t = i.ReadU8 ();
+
+  m_form = (t & 0x80) >> 7;
+
+  if (IsShort ())
+    {
+      m_c = (t & 0x40) >> 6;
+      m_k = (t & 0x20) >> 5;
+      SetTypeByte (t & 0x1F);
+    }
+  else
+    {
+      SetTypeByte (t & 0x7F);
+    }
+  NS_ASSERT (m_type != NONE or m_form == SHORT);
+
+  if (HasConnectionId ())
+    {
+      SetConnectionID (i.ReadNtohU64 ());
+    }
+
+  if (IsLong ())
+    {
+      SetVersion (i.ReadNtohU32 ());
+      if (!IsVersionNegotiation ())
+        {
+          SetPacketNumber (SequenceNumber32 (i.ReadNtohU32 ()));
+        }
+    }
+  else
+    {
+      switch (m_type)
+        {
+        case ONE_OCTECT:
+          SetPacketNumber (SequenceNumber32 (i.ReadU8 ()));
+          break;
+        case TWO_OCTECTS:
+          SetPacketNumber (SequenceNumber32 (i.ReadNtohU16 ()));
+          break;
+        case FOUR_OCTECTS:
+          SetPacketNumber (SequenceNumber32 (i.ReadNtohU32 ()));
+          break;
+        }
+    }
+
+  NS_LOG_INFO ("Deserialize::Serialized Size " << CalculateHeaderLength ());
+
+  return GetSerializedSize ();
+}
+
+void
+QuicHeader::Print (std::ostream &os) const
+{
+  NS_ASSERT (m_type != NONE or m_form == SHORT);
+
+  os << "|" << m_form << "|";
+
+  if (IsShort ())
+    {
+      os << m_c << "|" << m_k << "|" << "1|0|";
+    }
+
+  os << TypeToString () << "|\n|";
+
+  if (HasConnectionId ())
+    {
+      os << "ConnectionID " << m_connectionId << "|\n|";
+    }
+  if (IsShort ())
+    {
+      os << "PacketNumber " << m_packetNumber << "|\n";
+    }
+  else
+    {
+      os << "Version " << (uint64_t)m_version << "|\n";
+      os << "PacketNumber " << m_packetNumber << "|\n|";
+    }
+
+}
+
+QuicHeader
+QuicHeader::CreateInitial (uint64_t connectionId, uint32_t version, SequenceNumber32 packetNumber)
+{
+  NS_LOG_INFO ("Create Initial Helper called");
+
+  QuicHeader head;
+  head.SetFormat (QuicHeader::LONG);
+  head.SetTypeByte (QuicHeader::INITIAL);
+  head.SetConnectionID (connectionId);
+  head.SetVersion (version);
+  head.SetPacketNumber (packetNumber);
+
+  return head;
+}
+
+
+QuicHeader
+QuicHeader::CreateRetry (uint64_t connectionId, uint32_t version, SequenceNumber32 packetNumber)
+{
+  NS_LOG_INFO ("Create Retry Helper called");
+
+  QuicHeader head;
+  head.SetFormat (QuicHeader::LONG);
+  head.SetTypeByte (QuicHeader::RETRY);
+  head.SetConnectionID (connectionId);
+  head.SetVersion (version);
+  head.SetPacketNumber (packetNumber);
+
+  return head;
+}
+
+QuicHeader
+QuicHeader::CreateHandshake (uint64_t connectionId, uint32_t version, SequenceNumber32 packetNumber)
+{
+  NS_LOG_INFO ("Create Handshake Helper called ");
+
+  QuicHeader head;
+  head.SetFormat (QuicHeader::LONG);
+  head.SetTypeByte (QuicHeader::HANDSHAKE);
+  head.SetConnectionID (connectionId);
+  head.SetVersion (version);
+  head.SetPacketNumber (packetNumber);
+
+  return head;
+}
+
+QuicHeader
+QuicHeader::Create0RTT (uint64_t connectionId, uint32_t version, SequenceNumber32 packetNumber)
+{
+  NS_LOG_INFO ("Create 0RTT Helper called");
+
+  QuicHeader head;
+  head.SetFormat (QuicHeader::LONG);
+  head.SetTypeByte (QuicHeader::ZRTT_PROTECTED);
+  head.SetConnectionID (connectionId);
+  head.SetVersion (version);
+  head.SetPacketNumber (packetNumber);
+
+  return head;
+}
+
+QuicHeader
+QuicHeader::CreateShort (uint64_t connectionId, SequenceNumber32 packetNumber, bool connectionIdFlag, bool keyPhaseBit)
+{
+  NS_LOG_INFO ("Create Short Helper called");
+
+  QuicHeader head;
+  head.SetFormat (QuicHeader::SHORT);
+  head.SetKeyPhaseBit (keyPhaseBit);
+  head.SetPacketNumber (packetNumber);
+
+  if (connectionIdFlag)
+    {
+      head.SetConnectionID (connectionId);
+    }
+
+  return head;
+}
+
+QuicHeader
+QuicHeader::CreateVersionNegotiation (uint64_t connectionId, uint32_t version, std::vector<uint32_t>& supportedVersions)
+{
+  NS_LOG_INFO ("Create Version Negotiation Helper called");
+
+  QuicHeader head;
+  head.SetFormat (QuicHeader::LONG);
+  head.SetTypeByte (QuicHeader::VERSION_NEGOTIATION);
+  head.SetConnectionID (connectionId);
+  head.SetVersion (version);
+
+//	TODO: SetVersions(m)
+//	head.SetVersions(m_supportedVersions);
+//
+//   uint8_t *buffer = new uint8_t[4 * m_supportedVersions.size()];
+//
+//    for (uint8_t i = 0; i < (uint8_t) m_supportedVersions.size(); i++) {
+//
+//	    buffer[4*i] = (m_supportedVersions[i]) ;
+//	    buffer[4*i+1] = (m_supportedVersions[i] >> 8);
+//	    buffer[4*i+2] = (m_supportedVersions[i] >> 16);
+//	    buffer[4*i+3] = (m_supportedVersions[i] >> 24);
+//
+//    }
+//
+//    Ptr<Packet> payload = Create<Packet> (buffer, 4 * m_supportedVersions.size());
+
+  return head;
+}
+
+uint8_t
+QuicHeader::GetTypeByte () const
+{
+  return m_type;
+}
+
+void
+QuicHeader::SetTypeByte (uint8_t typeByte)
+{
+  m_type = typeByte;
+}
+
+uint8_t
+QuicHeader::GetFormat () const
+{
+  return m_form;
+}
+
+void
+QuicHeader::SetFormat (bool form)
+{
+  m_form = form;
+}
+
+uint64_t
+QuicHeader::GetConnectionId () const
+{
+  NS_ASSERT (HasConnectionId ());
+  return m_connectionId;
+}
+
+void
+QuicHeader::SetConnectionID (uint64_t connID)
+{
+  m_connectionId = connID;
+  if (IsShort ())
+    {
+      m_c = true;
+    }
+}
+
+SequenceNumber32
+QuicHeader::GetPacketNumber () const
+{
+  return m_packetNumber;
+}
+
+void
+QuicHeader::SetPacketNumber (SequenceNumber32 packNum)
+{
+  NS_LOG_INFO (packNum);
+  m_packetNumber = packNum;
+  if (IsShort ())
+    {
+      if (packNum.GetValue () < 256)
+        {
+          SetTypeByte (ONE_OCTECT);
+        }
+      else if (packNum.GetValue () < 65536)
+        {
+          SetTypeByte (TWO_OCTECTS);
+        }
+      else
+        {
+          SetTypeByte (FOUR_OCTECTS);
+        }
+    }
+}
+
+uint32_t
+QuicHeader::GetVersion () const
+{
+  NS_ASSERT (HasVersion ());
+  return m_version;
+}
+
+void
+QuicHeader::SetVersion (uint32_t version)
+{
+  NS_ASSERT (HasVersion ());
+  m_version = version;
+}
+
+bool
+QuicHeader::GetKeyPhaseBit () const
+{
+  NS_ASSERT (IsShort ());
+  return m_k;
+}
+
+void
+QuicHeader::SetKeyPhaseBit (bool keyPhaseBit)
+{
+  NS_ASSERT (IsShort ());
+  m_k = keyPhaseBit;
+}
+
+bool QuicHeader::IsShort () const
+{
+  return m_form == SHORT;
+}
+
+bool
+QuicHeader::IsVersionNegotiation () const
+{
+  return m_type == VERSION_NEGOTIATION;
+}
+
+bool
+QuicHeader::IsInitial () const
+{
+  return m_type == INITIAL;
+}
+
+bool
+QuicHeader::IsRetry () const
+{
+  return m_type == RETRY;
+}
+
+bool
+QuicHeader::IsHandshake () const
+{
+  return m_type == HANDSHAKE;
+}
+
+bool
+QuicHeader::IsORTT () const
+{
+  return m_type == ZRTT_PROTECTED;
+}
+
+bool QuicHeader::HasVersion () const
+{
+  return IsLong ();
+}
+
+bool QuicHeader::HasConnectionId () const
+{
+  return not (IsShort () and m_c == false);
+}
+
+bool
+operator== (const QuicHeader &lhs, const QuicHeader &rhs)
+{
+  return (
+    lhs.m_form == rhs.m_form
+    && lhs.m_c == rhs.m_c
+    && lhs.m_k  == rhs.m_k
+    && lhs.m_type == rhs.m_type
+    && lhs.m_connectionId == rhs.m_connectionId
+    && lhs.m_packetNumber == rhs.m_packetNumber
+    && lhs.m_version == rhs.m_version
+    );
+}
+
+std::ostream&
+operator<< (std::ostream& os, QuicHeader& tc)
+{
+  tc.Print (os);
+  return os;
+}
+
+} // namespace ns3
+
diff --git a/src/quic/model/quic-header.h b/src/quic/model/quic-header.h
new file mode 100644
index 000000000..e0a851d6d
--- /dev/null
+++ b/src/quic/model/quic-header.h
@@ -0,0 +1,348 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *
+ */
+
+#ifndef QUICHEADER_H
+#define QUICHEADER_H
+
+#include <stdint.h>
+#include "ns3/header.h"
+#include "ns3/buffer.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/ipv6-address.h"
+#include "ns3/sequence-number.h"
+
+namespace ns3 {
+
+/**
+ * \ingroup quic
+ * \brief Header for the QUIC Protocol
+ *
+ * This class has fields corresponding to those in a QUIC header
+ * (connection id, packet number, version, flags, etc) as well
+ * as methods for serialization to and deserialization from a buffer.
+ */
+class QuicHeader : public Header
+{
+public:
+  /**
+   * \brief Quic header form bit values
+   */
+  typedef enum
+  {
+    SHORT = 0,  //!< Short header
+    LONG  = 1   //!< Long header
+  } TypeFormat_t;
+
+  /**
+   * \brief Quic long header type byte values
+   */
+  typedef enum
+  {
+    VERSION_NEGOTIATION = 0,  //!< Version Negotiation
+    INITIAL  = 1,             //!< Initial
+    RETRY  = 2,               //!< Retry
+    HANDSHAKE  = 3,           //!< Handshake
+    ZRTT_PROTECTED  = 4,      //!< 0-Rtt Protected
+    NONE = 5                  //!< No type byte
+  } TypeLong_t;
+
+  /**
+   * \brief Quic header key phase bit values
+   */
+  typedef enum
+  {
+    PHASE_ZERO = 0,  //!< Phase 0
+    PHASE_ONE  = 1   //!< Phase 1
+  } KeyPhase_t;
+
+  /**
+   * \brief Quic packet number encodings for headers
+   */
+  typedef enum
+  {
+    ONE_OCTECT = 0x0,    //!< 1 Octet
+    TWO_OCTECTS  = 0x1,  //!< 2 Octets
+    FOUR_OCTECTS  = 0x2  //!< 4 Octects
+  } TypeShort_t;
+
+  QuicHeader ();
+  virtual ~QuicHeader ();
+
+  // Inherited from Header
+  static TypeId GetTypeId (void);
+  virtual TypeId GetInstanceTypeId (void) const;
+  virtual void Print (std::ostream &os) const;
+  virtual uint32_t GetSerializedSize (void) const;
+  virtual void Serialize (Buffer::Iterator start) const;
+  virtual uint32_t Deserialize (Buffer::Iterator start);
+
+  /**
+   * \brief Print a Quic header into an output stream
+   *
+   * \param os output stream
+   * \param tc Quic header to print
+   * \return The ostream passed as first argument
+   */
+  friend std::ostream& operator<< (std::ostream& os, QuicHeader & tc);
+
+  /**
+   * \brief Converts the short and long type bytes into a human readable string description
+   *
+   * \return the generated string
+   **/
+  std::string TypeToString () const;
+
+  /**
+   * Create the header for the Initial client->server packet
+   *
+   * \param connectionId the ID of the connection
+   * \param version the version of the connection
+   * \param packetNumber the packet number
+   * \return the generated QuicHeader
+   */
+  static QuicHeader CreateInitial (uint64_t connectionId, uint32_t version, SequenceNumber32 packetNumber);
+
+  /**
+   * Create a Retry header
+   *
+   * \param connectionId the ID of the connection
+   * \param version the version of the connection
+   * \param packetNumber the packet number
+   * \return the generated QuicHeader
+   */
+  static QuicHeader CreateRetry (uint64_t connectionId, uint32_t version, SequenceNumber32 packetNumber);
+
+  /**
+   * Create the header for the Handshake server->client packet
+   *
+   * \param connectionId the ID of the connection
+   * \param version the version of the connection
+   * \param packetNumber the packet number
+   * \return the generated QuicHeader
+   */
+  static QuicHeader CreateHandshake (uint64_t connectionId, uint32_t version, SequenceNumber32 packetNumber);
+
+  /**
+   * Create the header for a 0-Rtt Protected packet
+   *
+   * \param connectionId the ID of the connection
+   * \param version the version of the connection
+   * \param packetNumber the packet number
+   * \return the generated QuicHeader
+   */
+  static QuicHeader Create0RTT (uint64_t connectionId, uint32_t version, SequenceNumber32 packetNumber);
+
+  /**
+   * Create the header for a Version Negotiation packet, sends to the client a list of supported versions
+   *
+   * \param connectionId the ID of the connection
+   * \param version the version of the connection
+   * \param supportedVersions a vector of supported versions
+   * \return the generated QuicHeader
+   */
+  static QuicHeader CreateVersionNegotiation (uint64_t connectionId, uint32_t version, std::vector<uint32_t>& supportedVersions);
+
+  /**
+   * Create a Short header
+   *
+   * \param connectionId the ID of the connection
+   * \param packetNumber the packet number
+   * \param connectionIdFlag a flag, if true the packet will carry the connection ID
+   * \param keyPhaseBit the key phase, which allows a recipient of a packet to identify the packet protection keys that are used to protect the packet.
+   * \return the generated QuicHeader
+   */
+  static QuicHeader CreateShort (uint64_t connectionId, SequenceNumber32 packetNumber, bool connectionIdFlag = true, bool keyPhaseBit = QuicHeader::PHASE_ZERO);
+
+  // Getters, Setters and Controls
+
+  /**
+   * \brief Get the type byte
+   * \return The type byte for this QuicHeader
+   */
+  uint8_t GetTypeByte () const;
+
+  /**
+   * \brief Set the type byte
+   * \param typeByte the type byte for this QuicHeader
+   */
+  void SetTypeByte (uint8_t typeByte);
+
+  /**
+   * \brief Get the connection id
+   * \return The connection id for this QuicHeader
+   */
+  uint64_t GetConnectionId () const;
+
+  /**
+   * \brief Set the connection id
+   * \param connID the connection id for this QuicHeader
+   */
+  void SetConnectionID (uint64_t connID);
+
+  /**
+   * \brief Get the packet number
+   * \return The packet number for this QuicHeader
+   */
+  SequenceNumber32 GetPacketNumber () const;
+
+  /**
+   * \brief Calculates the packet number length (in bits)
+   *
+   * Given the standard size of the header, the method checks for options
+   * and calculates the real packet number length (in bits).
+   *
+   * \return packet number length in bits
+   */
+  uint32_t GetPacketNumLen ()  const;
+
+  /**
+   * \brief Set the packet number
+   * \param packNumber the packet number for this QuicHeader
+   */
+  void SetPacketNumber (SequenceNumber32 packNumber);
+
+  /**
+   * \brief Get the version
+   * \return The version for this QuicHeader
+   */
+  uint32_t GetVersion () const;
+
+  /**
+   * \brief Set the version
+   * \param version the version for this QuicHeader
+   */
+  void SetVersion (uint32_t version);
+
+  /**
+   * \brief Get the key phase bit
+   * \return The key phase bit for this QuicHeader
+   */
+  bool GetKeyPhaseBit () const;
+
+  /**
+   * \brief Set the key phase bit
+   * \param keyPhaseBit the key phase bit for this QuicHeader
+   */
+  void SetKeyPhaseBit (bool keyPhaseBit);
+
+  /**
+   * \brief Get the form bit
+   * \return The form bit for this QuicHeader
+   */
+  uint8_t GetFormat () const;
+
+  /**
+   * \brief Set the form bit
+   * \param form the form bit for this QuicHeader
+   */
+  void SetFormat (bool form);
+
+  /**
+   * \brief Check if the header is Short
+   * \return true if the header is Short, false otherwise
+   */
+  bool IsShort () const;
+
+  /**
+   * \brief Check if the header is Long
+   * \return true if the header is Long, false otherwise
+   */
+  bool IsLong ()  const
+  {
+    return !IsShort ();
+  }
+
+  /**
+   * \brief Check if the header is Version Negotiation
+   * \return true if the header is Version Negotiation, false otherwise
+   */
+  bool IsVersionNegotiation () const;
+
+  /**
+   * \brief Check if the header is Initial
+   * \return true if the header is Initial, false otherwise
+   */
+  bool IsInitial () const;
+
+  /**
+   * \brief Check if the header is Retry
+   * \return true if the header is Retry, false otherwise
+   */
+  bool IsRetry () const;
+
+  /**
+   * \brief Check if the header is Handshake
+   * \return true if the header is Handshake, false otherwise
+   */
+  bool IsHandshake () const;
+
+  /**
+   * \brief Check if the header is 0-Rtt Protected
+   * \return true if the header is 0-Rtt Protected, false otherwise
+   */
+  bool IsORTT () const;
+
+  /**
+   * \brief Check if the header has the connection id
+   * \return true if the header has the connection id, false otherwise
+   */
+  bool HasConnectionId ()  const;
+
+  /**
+   * \brief Check if the header has the version
+   * \return true if the header has the version, false otherwise
+   */
+  bool HasVersion () const;
+
+  /**
+   * Comparison operator
+   * \param lhs left operand
+   * \param rhs right operand
+   * \return true if the operands are equal
+   */
+  friend bool operator== (const QuicHeader &lhs, const QuicHeader &rhs);
+
+private:
+  /**
+   * \brief Calculates the header length (in words)
+   *
+   * Given the standard size of the header, the method checks for options
+   * and calculates the real length (in words).
+   *
+   * \return header length in 4-byte words
+   */
+  uint32_t CalculateHeaderLength () const;
+
+  bool m_form;                      //!< Form bit
+  bool m_c;                         //!< Connection id flag
+  bool m_k;                         //!< Key phase bit
+  uint8_t m_type;                   //!< Type byte
+  uint64_t m_connectionId;          //!< Connection Id
+  SequenceNumber32 m_packetNumber;  //!< Packet number
+  uint32_t m_version;               //!< Version
+};
+
+} // namespace ns3
+
+#endif /* QUIC_HEADER_H_ */
diff --git a/src/quic/model/quic-l4-protocol.cc b/src/quic/model/quic-l4-protocol.cc
new file mode 100644
index 000000000..5c6389ebf
--- /dev/null
+++ b/src/quic/model/quic-l4-protocol.cc
@@ -0,0 +1,980 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *
+ */
+
+#include "ns3/assert.h"
+#include "ns3/log.h"
+#include "ns3/nstime.h"
+#include "ns3/boolean.h"
+#include "ns3/object-vector.h"
+#include "ns3/pointer.h"
+
+#include "ns3/packet.h"
+#include "ns3/node.h"
+#include "ns3/simulator.h"
+#include "ns3/ipv4-route.h"
+#include "ns3/ipv6-route.h"
+
+#include "quic-l4-protocol.h"
+#include "quic-header.h"
+#include "ns3/ipv4-end-point-demux.h"
+#include "ns3/ipv6-end-point-demux.h"
+#include "ns3/ipv4-end-point.h"
+#include "ns3/ipv6-end-point.h"
+#include "ns3/ipv4-l3-protocol.h"
+#include "ns3/ipv6-l3-protocol.h"
+#include "ns3/ipv6-routing-protocol.h"
+#include "quic-socket-factory.h"
+#include "ns3/tcp-congestion-ops.h"
+#include "quic-congestion-ops.h"
+#include "ns3/rtt-estimator.h"
+#include "ns3/random-variable-stream.h"
+
+#include <vector>
+#include <sstream>
+#include <iomanip>
+#include <algorithm>
+#include <math.h>
+#include <iostream>
+
+namespace ns3 {
+
+NS_OBJECT_ENSURE_REGISTERED (QuicL4Protocol);
+NS_OBJECT_ENSURE_REGISTERED (QuicUdpBinding);
+NS_LOG_COMPONENT_DEFINE ("QuicL4Protocol");
+
+QuicUdpBinding::QuicUdpBinding ()
+  : m_budpSocket (0),
+  m_budpSocket6 (0),
+  m_quicSocket (nullptr),
+  m_listenerBinding (false)
+{
+  NS_LOG_FUNCTION (this);
+}
+
+QuicUdpBinding::~QuicUdpBinding ()
+{
+  NS_LOG_FUNCTION (this);
+
+  m_budpSocket = 0;
+  m_budpSocket6 = 0;
+  m_quicSocket = nullptr;
+  m_listenerBinding = false;
+}
+
+TypeId
+QuicUdpBinding::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicUdpBinding")
+    .SetParent<Object> ()
+    .SetGroupName ("Internet")
+    .AddConstructor<QuicUdpBinding> ()
+    .AddAttribute ("QuicSocketBase", "The QuicSocketBase pointer.",
+                   PointerValue (),
+                   MakePointerAccessor (&QuicUdpBinding::m_quicSocket),
+                   MakePointerChecker<QuicSocketBase> ())
+  ;
+  //NS_LOG_UNCOND("QuicUdpBinding");
+  return tid;
+}
+
+TypeId
+QuicUdpBinding::GetInstanceTypeId (void) const
+{
+  return GetTypeId ();
+}
+
+
+
+#undef NS_LOG_APPEND_CONTEXT
+#define NS_LOG_APPEND_CONTEXT                                   \
+  if (m_node) { std::clog << " [node " << m_node->GetId () << "] "; }
+
+/* see http://www.iana.org/assignments/protocol-numbers */
+const uint8_t QuicL4Protocol::PROT_NUMBER = 143;
+
+TypeId
+QuicL4Protocol::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicL4Protocol")
+    .SetParent<IpL4Protocol> ()
+    .SetGroupName ("Internet")
+    .AddConstructor<QuicL4Protocol> ()
+    .AddAttribute ("RttEstimatorType",
+                   "Type of RttEstimator objects.",
+                   TypeIdValue (RttMeanDeviation::GetTypeId ()),
+                   MakeTypeIdAccessor (&QuicL4Protocol::m_rttTypeId),
+                   MakeTypeIdChecker ())
+    .AddAttribute ("0RTT-Handshake", "0RTT-Handshake start",
+                   BooleanValue (false),
+                   MakeBooleanAccessor (&QuicL4Protocol::m_0RTTHandshakeStart),
+                   MakeBooleanChecker ())
+    .AddAttribute ("SocketType",
+                   "Socket type of QUIC objects.",
+                   TypeIdValue (QuicCongestionOps::GetTypeId ()),
+                   MakeTypeIdAccessor (&QuicL4Protocol::m_congestionTypeId),
+                   MakeTypeIdChecker ())
+    .AddAttribute ("SocketList", "The list of UDP and QUIC sockets associated to this protocol.",
+                   ObjectVectorValue (),
+                   MakeObjectVectorAccessor (&QuicL4Protocol::m_quicUdpBindingList),
+                   MakeObjectVectorChecker<QuicUdpBinding> ())
+    /*.AddAttribute ("AuthAddresses", "The list of Authenticated addresses associated to this protocol.",
+                                           ObjectVectorValue (),
+                                           MakeObjectVectorAccessor (&QuicL4Protocol::m_authAddresses),
+                                           MakeObjectVectorChecker<Address> ())*/
+  ;
+  return tid;
+}
+
+QuicL4Protocol::QuicL4Protocol ()
+  : m_node (0),
+  m_0RTTHandshakeStart (false),
+  m_isServer (false),
+  m_endPoints (new Ipv4EndPointDemux ()),
+  m_endPoints6 (new Ipv6EndPointDemux ())
+{
+  NS_LOG_FUNCTION_NOARGS ();
+  NS_LOG_LOGIC ("Created QuicL4Protocol object " << this);
+
+  m_quicUdpBindingList = QuicUdpBindingList ();
+}
+
+QuicL4Protocol::~QuicL4Protocol ()
+{
+  NS_LOG_FUNCTION (this);
+  m_quicUdpBindingList.clear ();
+}
+
+void
+QuicL4Protocol::SetNode (Ptr<Node> node)
+{
+  NS_LOG_FUNCTION (this);
+  NS_LOG_FUNCTION (this << node);
+
+  m_node = node;
+}
+
+int
+QuicL4Protocol::UdpBind (Ptr<QuicSocketBase> socket)
+{
+  NS_LOG_FUNCTION (this << socket);
+
+  int res = -1;
+  QuicUdpBindingList::iterator it;
+  for (it = m_quicUdpBindingList.begin (); it != m_quicUdpBindingList.end (); ++it)
+    {
+      Ptr<QuicUdpBinding> item = *it;
+      if (item->m_quicSocket == socket and item->m_budpSocket == nullptr)
+        {
+          Ptr<Socket> udpSocket = CreateUdpSocket ();
+          res = udpSocket->Bind ();
+          item->m_budpSocket = udpSocket;
+          break;
+        }
+    }
+
+  return res;
+}
+
+int
+QuicL4Protocol::UdpBind6 (Ptr<QuicSocketBase> socket)
+{
+  NS_LOG_FUNCTION (this << socket);
+
+  int res = -1;
+  QuicUdpBindingList::iterator it;
+  for (it = m_quicUdpBindingList.begin (); it != m_quicUdpBindingList.end (); ++it)
+    {
+      Ptr<QuicUdpBinding> item = *it;
+      if (item->m_quicSocket == socket and item->m_budpSocket6 == nullptr)
+        {
+          Ptr<Socket> udpSocket6 = CreateUdpSocket6 ();
+          res = udpSocket6->Bind ();
+          item->m_budpSocket6 = udpSocket6;
+          break;
+        }
+    }
+
+  return res;
+}
+
+int
+QuicL4Protocol::UdpBind (const Address &address, Ptr<QuicSocketBase> socket)
+{
+  NS_LOG_FUNCTION (this << address << socket);
+
+  int res = -1;
+  if (InetSocketAddress::IsMatchingType (address))
+    {
+      QuicUdpBindingList::iterator it;
+      for (it = m_quicUdpBindingList.begin (); it != m_quicUdpBindingList.end (); ++it)
+        {
+          Ptr<QuicUdpBinding> item = *it;
+          if (item->m_quicSocket == socket and item->m_budpSocket == nullptr)
+            {
+              Ptr<Socket> udpSocket = CreateUdpSocket ();
+              res = udpSocket->Bind (address);
+              item->m_budpSocket = udpSocket;
+              break;
+            }
+        }
+
+      return res;
+    }
+  else if (Inet6SocketAddress::IsMatchingType (address))
+    {
+      QuicUdpBindingList::iterator it;
+      for (it = m_quicUdpBindingList.begin (); it != m_quicUdpBindingList.end (); ++it)
+        {
+          Ptr<QuicUdpBinding> item = *it;
+          if (item->m_quicSocket == socket and item->m_budpSocket6 == nullptr)
+            {
+              Ptr<Socket> udpSocket6 = CreateUdpSocket ();
+              res = udpSocket6->Bind (address);
+              item->m_budpSocket6 = udpSocket6;
+              break;
+            }
+        }
+
+      return res;
+    }
+  return -1;
+}
+
+int
+QuicL4Protocol::UdpConnect (const Address & address, Ptr<QuicSocketBase> socket)
+{
+  NS_LOG_FUNCTION (this << address << socket);
+  if (InetSocketAddress::IsMatchingType (address) == true)
+    {
+      UdpBind (address, socket);
+
+      QuicUdpBindingList::iterator it;
+      for (it = m_quicUdpBindingList.begin (); it != m_quicUdpBindingList.end (); ++it)
+        {
+          Ptr<QuicUdpBinding> item = *it;
+          if (item->m_quicSocket == socket)
+            {
+              return item->m_budpSocket->Connect (address);
+            }
+        }
+
+      NS_LOG_INFO ("UDP Socket: Connecting");
+
+    }
+  else if (Inet6SocketAddress::IsMatchingType (address) == true)
+    {
+      UdpBind (address, socket);
+
+      QuicUdpBindingList::iterator it;
+      for (it = m_quicUdpBindingList.begin (); it != m_quicUdpBindingList.end (); ++it)
+        {
+          Ptr<QuicUdpBinding> item = *it;
+          if (item->m_quicSocket == socket)
+            {
+              return item->m_budpSocket6->Connect (address);
+            }
+        }
+      NS_LOG_INFO ("UDP Socket: Connecting");
+
+    }
+  NS_LOG_WARN ("UDP Connection Failed");
+  return -1;
+}
+
+int
+QuicL4Protocol::UdpSend (Ptr<Socket> udpSocket, Ptr<Packet> p, uint32_t flags) const
+{
+  NS_LOG_FUNCTION (this << udpSocket);
+
+  return udpSocket->Send (p, flags);
+}
+
+Ptr<Packet>
+QuicL4Protocol::UdpRecv (Ptr<Socket> udpSocket, uint32_t maxSize, uint32_t flags, Address &address)
+{
+  NS_LOG_FUNCTION (this);
+
+  return udpSocket->RecvFrom (maxSize, flags, address);
+}
+
+uint32_t
+QuicL4Protocol::GetTxAvailable (Ptr<QuicSocketBase> quicSocket) const
+{
+  NS_LOG_FUNCTION (this);
+
+  QuicUdpBindingList::const_iterator it;
+  for (it = m_quicUdpBindingList.begin (); it != m_quicUdpBindingList.end (); ++it)
+    {
+      Ptr<QuicUdpBinding> item = *it;
+      if (item->m_quicSocket == quicSocket)
+        {
+          return item->m_budpSocket->GetTxAvailable ();
+        }
+    }
+  return 0;
+}
+
+uint32_t
+QuicL4Protocol::GetRxAvailable (Ptr<QuicSocketBase> quicSocket) const
+{
+  NS_LOG_FUNCTION (this);
+
+  QuicUdpBindingList::const_iterator it;
+  for (it = m_quicUdpBindingList.begin (); it != m_quicUdpBindingList.end (); ++it)
+    {
+      Ptr<QuicUdpBinding> item = *it;
+      if (item->m_quicSocket == quicSocket)
+        {
+          return item->m_budpSocket->GetRxAvailable ();
+        }
+    }
+  return 0;
+}
+
+int
+QuicL4Protocol::GetSockName (const ns3::QuicSocketBase* quicSocket, Address &address) const
+{
+  NS_LOG_FUNCTION (this);
+
+  QuicUdpBindingList::const_iterator it;
+  for (it = m_quicUdpBindingList.begin (); it != m_quicUdpBindingList.end (); ++it)
+    {
+      Ptr<QuicUdpBinding> item = *it;
+      if (item->m_quicSocket == quicSocket)
+        {
+          return item->m_budpSocket->GetSockName (address);
+        }
+    }
+
+  return -1;
+}
+
+int
+QuicL4Protocol::GetPeerName (const ns3::QuicSocketBase* quicSocket, Address &address) const
+{
+  NS_LOG_FUNCTION (this);
+
+  QuicUdpBindingList::const_iterator it;
+  for (it = m_quicUdpBindingList.begin (); it != m_quicUdpBindingList.end (); ++it)
+    {
+      Ptr<QuicUdpBinding> item = *it;
+      if (item->m_quicSocket == quicSocket)
+        {
+          return item->m_budpSocket->GetPeerName (address);
+        }
+    }
+
+  return -1;
+}
+
+void
+QuicL4Protocol::BindToNetDevice (Ptr<QuicSocketBase> quicSocket, Ptr<NetDevice> netdevice)
+{
+  NS_LOG_FUNCTION (this);
+
+  QuicUdpBindingList::iterator it;
+  for (it = m_quicUdpBindingList.begin (); it != m_quicUdpBindingList.end (); ++it)
+    {
+      Ptr<QuicUdpBinding> item = *it;
+      if (item->m_quicSocket == quicSocket)
+        {
+          item->m_budpSocket->BindToNetDevice (netdevice);
+        }
+    }
+}
+
+bool
+QuicL4Protocol::SetListener (Ptr<QuicSocketBase> sock)
+{
+  NS_LOG_FUNCTION (this);
+
+  if (sock != nullptr and m_quicUdpBindingList.size () == 1)
+    {
+      m_isServer = true;
+      m_quicUdpBindingList.front ()->m_quicSocket = sock;
+      m_quicUdpBindingList.front ()->m_listenerBinding = true;
+      return true;
+    }
+
+  return false;
+}
+
+bool
+QuicL4Protocol::IsServer (void)  const
+{
+  return m_isServer;
+}
+
+const std::vector<Address>&
+QuicL4Protocol::GetAuthAddresses () const
+{
+  return m_authAddresses;
+}
+
+void
+QuicL4Protocol::ForwardUp (Ptr<Socket> sock)
+{
+  NS_LOG_FUNCTION (this);
+
+  Address from;
+  Ptr<Packet> packet;
+
+  while ((packet = sock->RecvFrom (from)))
+    {
+      NS_LOG_INFO ("Receiving packet on UDP socket");
+      //packet->Print (std::clog);
+      // NS_LOG_INFO ("");
+
+      QuicHeader header;
+      packet->RemoveHeader (header);
+
+      uint64_t connectionId;
+      if (header.HasConnectionId ())
+        {
+          connectionId = header.GetConnectionId ();
+        }
+      /*else if (m_sockets.size () <= 2) // Rivedere
+        {
+          if (m_sockets[0]->GetSocketState () != QuicSocket::LISTENING)
+            {
+              connectionId = m_sockets[0]->GetConnectionId ();
+            }
+          else if (m_sockets.size () == 2 && m_sockets[1]->GetSocketState () != QuicSocket::LISTENING)
+            {
+              connectionId = m_sockets[1]->GetConnectionId ();
+            }
+          else
+            {
+              NS_FATAL_ERROR ("The Connection ID can only be omitted by means of m_omit_connection_id transport parameter"
+                              " if source and destination IP address and port are sufficient to identify a connection");
+            }
+
+        }*/
+      else
+        {
+          NS_FATAL_ERROR ("The Connection ID can only be omitted by means of m_omit_connection_id transport parameter"
+                          " if source and destination IP address and port are sufficient to identify a connection");
+        }
+
+      QuicUdpBindingList::iterator it;
+      Ptr<QuicSocketBase> socket;
+      for (it = m_quicUdpBindingList.begin (); it != m_quicUdpBindingList.end (); ++it)
+        {
+          Ptr<QuicUdpBinding> item = *it;
+          if (item->m_quicSocket->GetConnectionId () == connectionId)
+            {
+              socket = item->m_quicSocket;
+              break;
+            }
+        }
+
+      NS_LOG_LOGIC ((socket == nullptr));
+      /*NS_LOG_INFO ("Initial " << header.IsInitial ());
+      NS_LOG_INFO ("Handshake " << header.IsHandshake ());
+      NS_LOG_INFO ("Short " << header.IsShort ());
+      NS_LOG_INFO ("Version Negotiation " << header.IsVersionNegotiation ());
+      NS_LOG_INFO ("Retry " << header.IsRetry ());
+      NS_LOG_INFO ("0Rtt " << header.IsORTT ());*/
+
+      if (header.IsInitial () and m_isServer and socket == nullptr)
+        {
+          NS_LOG_LOGIC (this << " Cloning listening socket " << m_quicUdpBindingList.front ()->m_quicSocket);
+          socket = CloneSocket (m_quicUdpBindingList.front ()->m_quicSocket);
+          socket->SetConnectionId (connectionId);
+          socket->Connect (from);
+          socket->SetupCallback ();
+
+        }
+      else if (header.IsHandshake () and m_isServer and socket != nullptr)
+        {
+          NS_LOG_LOGIC ("CONNECTION AUTHENTICATED - Server authenticated Client " << InetSocketAddress::ConvertFrom (from).GetIpv4 () << " port " <<
+                        InetSocketAddress::ConvertFrom (from).GetPort () << "");
+          m_authAddresses.push_back (InetSocketAddress::ConvertFrom (from).GetIpv4 ()); //add to the list of authenticated sockets
+        }
+      else if (header.IsHandshake () and !m_isServer and socket != nullptr)
+        {
+          NS_LOG_LOGIC ("CONNECTION AUTHENTICATED - Client authenticated Server " << InetSocketAddress::ConvertFrom (from).GetIpv4 () << " port " <<
+                        InetSocketAddress::ConvertFrom (from).GetPort () << "");
+          m_authAddresses.push_back (InetSocketAddress::ConvertFrom (from).GetIpv4 ()); //add to the list of authenticated sockets
+        }
+      else if (header.IsORTT () and m_isServer)
+        {
+          auto result = std::find (m_authAddresses.begin (), m_authAddresses.end (), InetSocketAddress::ConvertFrom (from).GetIpv4 ());
+          // check if a 0-RTT is allowed with this endpoint - or if the attribute m_0RTTHandshakeStart has been forced to be true
+          if (result == m_authAddresses.end () && m_0RTTHandshakeStart)
+            {
+              m_authAddresses.push_back (InetSocketAddress::ConvertFrom (from).GetIpv4 ()); //add to the list of authenticated sockets
+            }
+          else if (result == m_authAddresses.end () && !m_0RTTHandshakeStart)
+            {
+              NS_LOG_WARN ( this << " CONNECTION ABORTED: 0RTT Packet from unauthenticated address " << InetSocketAddress::ConvertFrom (from).GetIpv4 () << " port " <<
+                            InetSocketAddress::ConvertFrom (from).GetPort ());
+              continue;
+            }
+
+          NS_LOG_LOGIC ("CONNECTION AUTHENTICATED - Server authenticated Client " << InetSocketAddress::ConvertFrom (from).GetIpv4 () << " port " <<
+                        InetSocketAddress::ConvertFrom (from).GetPort () << "");
+          NS_LOG_LOGIC ( this << " Cloning listening socket " << m_quicUdpBindingList.front ()->m_quicSocket);
+          socket = CloneSocket (m_quicUdpBindingList.front ()->m_quicSocket);
+          socket->SetConnectionId (connectionId);
+          socket->Connect (from);
+          socket->SetupCallback ();
+
+        }
+      else if (header.IsShort ())
+        {
+          auto result = std::find (m_authAddresses.begin (), m_authAddresses.end (), InetSocketAddress::ConvertFrom (from).GetIpv4 ());
+
+          if (result == m_authAddresses.end () && m_0RTTHandshakeStart)
+            {
+              m_authAddresses.push_back (InetSocketAddress::ConvertFrom (from).GetIpv4 ()); //add to the list of authenticated sockets
+            }
+          else if (result == m_authAddresses.end () && !m_0RTTHandshakeStart)
+            {
+              NS_LOG_WARN ( this << " CONNECTION ABORTED: Short Packet from unauthenticated address " << InetSocketAddress::ConvertFrom (from).GetIpv4 () << " port " <<
+                            InetSocketAddress::ConvertFrom (from).GetPort ());
+              continue;
+            }
+        }
+
+      // Handle callback for the correct socket
+      if (!m_socketHandlers[socket].IsNull ())
+        {
+          NS_LOG_LOGIC (this << " waking up handler of socket " << socket);
+          m_socketHandlers[socket] (packet, header, from);
+        }
+      else
+        {
+          NS_FATAL_ERROR ( this << " no handler for socket " << socket);
+        }
+    }
+}
+
+void
+QuicL4Protocol::SetRecvCallback (Callback<void, Ptr<Packet>, const QuicHeader&,  Address& > handler, Ptr<Socket> sock)
+{
+  NS_LOG_FUNCTION (this);
+
+  m_socketHandlers.insert ( std::pair< Ptr<Socket>, Callback<void, Ptr<Packet>, const QuicHeader&, Address& > > (sock,handler));
+  QuicUdpBindingList::iterator it;
+  for (it = m_quicUdpBindingList.begin (); it != m_quicUdpBindingList.end (); ++it)
+    {
+      Ptr<QuicUdpBinding> item = *it;
+      if (item->m_quicSocket == sock && item->m_budpSocket != 0)
+        {
+          item->m_budpSocket->SetRecvCallback (MakeCallback (&QuicL4Protocol::ForwardUp, this));
+          break;
+        }
+      else if (item->m_quicSocket == sock && item->m_budpSocket6 != 0)
+        {
+          item->m_budpSocket6->SetRecvCallback (MakeCallback (&QuicL4Protocol::ForwardUp, this));
+          break;
+        }
+      else if (item->m_quicSocket == sock)
+        {
+          NS_FATAL_ERROR ("The UDP socket for this QuicUdpBinding item is not set");
+        }
+    }
+}
+
+void
+QuicL4Protocol::NotifyNewAggregate ()
+{
+  NS_LOG_FUNCTION (this);
+  Ptr<Node> node = this->GetObject<Node> ();
+
+  if (m_node == 0)
+    {
+      if ((node != 0))
+        {
+          this->SetNode (node);
+          Ptr<QuicSocketFactory> quicFactory = CreateObject<QuicSocketFactory> ();
+          quicFactory->SetQuicL4 (this);
+          node->AggregateObject (quicFactory);
+        }
+    }
+
+  IpL4Protocol::NotifyNewAggregate ();
+}
+
+int
+QuicL4Protocol::GetProtocolNumber (void) const
+{
+  return PROT_NUMBER;
+}
+
+void
+QuicL4Protocol::DoDispose (void)
+{
+  NS_LOG_FUNCTION (this);
+  m_quicUdpBindingList.clear ();
+
+  m_node = 0;
+//  m_downTarget.Nullify ();
+//  m_downTarget6.Nullify ();
+  IpL4Protocol::DoDispose ();
+}
+
+Ptr<QuicSocketBase>
+QuicL4Protocol::CloneSocket (Ptr<QuicSocketBase> oldsock)
+{
+  NS_LOG_FUNCTION (this);
+  Ptr<QuicSocketBase> newsock = CopyObject<QuicSocketBase> (oldsock);
+  NS_LOG_LOGIC (this << " cloned socket " << oldsock << " to socket " << newsock);
+  Ptr<QuicUdpBinding> udpBinding = CreateObject<QuicUdpBinding> ();
+  udpBinding->m_budpSocket = nullptr;
+  udpBinding->m_budpSocket6 = nullptr;
+  udpBinding->m_quicSocket = newsock;
+  m_quicUdpBindingList.insert (m_quicUdpBindingList.end (), udpBinding);
+
+  return newsock;
+}
+
+
+
+Ptr<Socket>
+QuicL4Protocol::CreateSocket ()
+{
+  return CreateSocket (m_congestionTypeId);
+}
+
+Ptr<Socket>
+QuicL4Protocol::CreateSocket (TypeId congestionTypeId)
+{
+  NS_LOG_FUNCTION (this);
+
+  ObjectFactory congestionAlgorithmFactory;
+  congestionAlgorithmFactory.SetTypeId (m_congestionTypeId);
+
+  // create the socket
+  Ptr<QuicSocketBase> socket = CreateObject<QuicSocketBase> ();
+  // create the congestion control algorithm
+  Ptr<TcpCongestionOps> algo = congestionAlgorithmFactory.Create<TcpCongestionOps> ();
+  socket->SetCongestionControlAlgorithm (algo);
+
+  // TODO consider if rttFactory is needed
+  // Ptr<RttEstimator> rtt = rttFactory.Create<RttEstimator> ();
+  // socket->SetRtt (rtt);
+
+  socket->SetNode (m_node);
+  socket->SetQuicL4 (this);
+
+  socket->InitializeScheduling ();
+
+  // generate a random connection ID and check that has not been assigned to other
+  // sockets associated to this L4 protocol
+  Ptr<UniformRandomVariable> rand = CreateObject<UniformRandomVariable> ();
+
+  bool found = false;
+  uint64_t connectionId;
+  while (not found)
+    {
+      connectionId = uint64_t (rand->GetValue (0, pow (2, 64) - 1));
+      found = true;
+      for (auto it = m_quicUdpBindingList.begin (); it != m_quicUdpBindingList.end (); ++it)
+        {
+          found = false;
+          if (connectionId == (*it)->m_quicSocket->GetConnectionId ())
+            {
+              break;
+            }
+          found = true;
+        }
+    }
+  socket->SetConnectionId (connectionId);
+  Ptr<QuicUdpBinding> udpBinding = Create<QuicUdpBinding> ();
+  udpBinding->m_budpSocket = nullptr;
+  udpBinding->m_budpSocket6 = nullptr;
+  udpBinding->m_quicSocket = socket;
+  m_quicUdpBindingList.insert (m_quicUdpBindingList.end (), udpBinding);
+
+  return socket;
+}
+
+Ptr<Socket>
+QuicL4Protocol::CreateUdpSocket ()
+{
+  NS_LOG_FUNCTION (this);
+  NS_ASSERT (m_node != 0);
+
+  TypeId tid = TypeId::LookupByName ("ns3::UdpSocketFactory");
+  Ptr<Socket> udpSocket = Socket::CreateSocket (m_node, tid);
+
+  return udpSocket;
+}
+
+Ptr<Socket>
+QuicL4Protocol::CreateUdpSocket6 ()
+{
+  NS_LOG_FUNCTION (this);
+  NS_ASSERT (m_node != 0);
+
+  TypeId tid = TypeId::LookupByName ("ns3::UdpSocketFactory");
+  Ptr<Socket> udpSocket6 = Socket::CreateSocket (m_node, tid);
+
+  return udpSocket6;
+}
+
+void
+QuicL4Protocol::ReceiveIcmp (Ipv4Address icmpSource, uint8_t icmpTtl,
+                             uint8_t icmpType, uint8_t icmpCode, uint32_t icmpInfo,
+                             Ipv4Address payloadSource,Ipv4Address payloadDestination,
+                             const uint8_t payload[8])
+{
+  NS_LOG_FUNCTION (this << icmpSource << (uint16_t) icmpTtl << (uint16_t) icmpType << (uint16_t) icmpCode << icmpInfo
+                        << payloadSource << payloadDestination);
+}
+
+void
+QuicL4Protocol::ReceiveIcmp (Ipv6Address icmpSource, uint8_t icmpTtl,
+                             uint8_t icmpType, uint8_t icmpCode, uint32_t icmpInfo,
+                             Ipv6Address payloadSource,Ipv6Address payloadDestination,
+                             const uint8_t payload[8])
+{
+  NS_LOG_FUNCTION (this << icmpSource << (uint16_t) icmpTtl << (uint16_t) icmpType << (uint16_t) icmpCode << icmpInfo
+                        << payloadSource << payloadDestination);
+
+}
+
+enum IpL4Protocol::RxStatus
+QuicL4Protocol::Receive (Ptr<Packet> packet,
+                         Ipv4Header const &incomingIpHeader,
+                         Ptr<Ipv4Interface> incomingInterface)
+{
+  NS_LOG_FUNCTION (this << packet << incomingIpHeader << incomingInterface);
+  NS_FATAL_ERROR ("This call should not be used: QUIC packets need to go through a UDP socket");
+  return IpL4Protocol::RX_OK;
+}
+
+enum IpL4Protocol::RxStatus
+QuicL4Protocol::Receive (Ptr<Packet> packet,
+                         Ipv6Header const &incomingIpHeader,
+                         Ptr<Ipv6Interface> interface)
+{
+  NS_LOG_FUNCTION (this << packet << incomingIpHeader.GetSource () <<
+                   incomingIpHeader.GetDestination ());
+  NS_FATAL_ERROR ("This call should not be used: QUIC packets need to go through a UDP socket");
+  return IpL4Protocol::RX_OK;
+}
+
+void
+QuicL4Protocol::SendPacket (Ptr<QuicSocketBase> socket, Ptr<Packet> pkt, const QuicHeader &outgoing) const
+{
+  NS_LOG_FUNCTION (this << socket);
+  NS_LOG_LOGIC (this
+                << " sending seq " << outgoing.GetPacketNumber ()
+                << " data size " << pkt->GetSize ());
+
+  NS_LOG_INFO ("Sending Packet Through UDP Socket");
+
+  // Given the presence of multiple subheaders in pkt,
+  // we create a new packet, add the new QUIC header and
+  // then add pkt as payload
+  Ptr<Packet> packetSent = Create<Packet> ();
+  packetSent->AddHeader (outgoing);
+  packetSent->AddAtEnd (pkt);
+  // NS_LOG_INFO ("" );
+  //packetSent->Print (std::clog);
+  // NS_LOG_INFO ("");
+
+  QuicUdpBindingList::const_iterator it;
+  for (it = m_quicUdpBindingList.begin (); it != m_quicUdpBindingList.end (); ++it)
+    {
+      Ptr<QuicUdpBinding> item = *it;
+      if (item->m_quicSocket == socket)
+        {
+          UdpSend (item->m_budpSocket, packetSent, 0);
+          break;
+        }
+    }
+}
+
+
+bool
+QuicL4Protocol::RemoveSocket (Ptr<QuicSocketBase> socket)
+{
+  NS_LOG_FUNCTION (this);
+
+  QuicUdpBindingList::iterator iter;
+  bool found = false;
+  bool closedListener = false;
+
+  for (iter = m_quicUdpBindingList.begin (); iter != m_quicUdpBindingList.end (); ++iter)
+    {
+      Ptr<QuicUdpBinding> item = *iter;
+      if (item->m_quicSocket == socket)
+        {
+          found = true;
+          if (item->m_listenerBinding)
+            {
+              closedListener = true;
+            }
+          m_quicUdpBindingList.erase (iter);
+
+          break;
+        }
+    }
+
+  //if closing the listener, close all the clone ones
+  if (closedListener)
+    {
+      NS_LOG_LOGIC (this << " Closing all the cloned sockets");
+      iter = m_quicUdpBindingList.begin ();
+      while (iter != m_quicUdpBindingList.end ())
+        {
+          (*iter)->m_quicSocket->Close ();
+          ++iter;
+        }
+    }
+
+  return found;
+}
+
+Ipv4EndPoint *
+QuicL4Protocol::Allocate (void)
+{
+  NS_LOG_FUNCTION (this);
+  return m_endPoints->Allocate ();
+}
+
+Ipv4EndPoint *
+QuicL4Protocol::Allocate (Ipv4Address address)
+{
+  NS_LOG_FUNCTION (this << address);
+  return m_endPoints->Allocate (address);
+}
+
+Ipv4EndPoint *
+QuicL4Protocol::Allocate (Ptr<NetDevice> boundNetDevice, uint16_t port)
+{
+  NS_LOG_FUNCTION (this << boundNetDevice << port);
+  return m_endPoints->Allocate (boundNetDevice, port);
+}
+
+Ipv4EndPoint *
+QuicL4Protocol::Allocate (Ptr<NetDevice> boundNetDevice, Ipv4Address address, uint16_t port)
+{
+  NS_LOG_FUNCTION (this << boundNetDevice << address << port);
+  return m_endPoints->Allocate (boundNetDevice, address, port);
+}
+
+Ipv4EndPoint *
+QuicL4Protocol::Allocate (Ptr<NetDevice> boundNetDevice,
+                          Ipv4Address localAddress, uint16_t localPort,
+                          Ipv4Address peerAddress, uint16_t peerPort)
+{
+  NS_LOG_FUNCTION (this << boundNetDevice << localAddress << localPort << peerAddress << peerPort);
+  return m_endPoints->Allocate (boundNetDevice,
+                                localAddress, localPort,
+                                peerAddress, peerPort);
+}
+
+Ipv6EndPoint *
+QuicL4Protocol::Allocate6 (void)
+{
+  NS_LOG_FUNCTION (this);
+  return m_endPoints6->Allocate ();
+}
+
+Ipv6EndPoint *
+QuicL4Protocol::Allocate6 (Ipv6Address address)
+{
+  NS_LOG_FUNCTION (this << address);
+  return m_endPoints6->Allocate (address);
+}
+
+Ipv6EndPoint *
+QuicL4Protocol::Allocate6 (Ptr<NetDevice> boundNetDevice, uint16_t port)
+{
+  NS_LOG_FUNCTION (this << boundNetDevice << port);
+  return m_endPoints6->Allocate (boundNetDevice, port);
+}
+
+Ipv6EndPoint *
+QuicL4Protocol::Allocate6 (Ptr<NetDevice> boundNetDevice, Ipv6Address address, uint16_t port)
+{
+  NS_LOG_FUNCTION (this << boundNetDevice << address << port);
+  return m_endPoints6->Allocate (boundNetDevice, address, port);
+}
+
+Ipv6EndPoint *
+QuicL4Protocol::Allocate6 (Ptr<NetDevice> boundNetDevice,
+                           Ipv6Address localAddress, uint16_t localPort,
+                           Ipv6Address peerAddress, uint16_t peerPort)
+{
+  NS_LOG_FUNCTION (this << boundNetDevice << localAddress << localPort << peerAddress << peerPort);
+  return m_endPoints6->Allocate (boundNetDevice,
+                                 localAddress, localPort,
+                                 peerAddress, peerPort);
+}
+
+void
+QuicL4Protocol::DeAllocate (Ipv4EndPoint *endPoint)
+{
+  NS_LOG_FUNCTION (this << endPoint);
+  m_endPoints->DeAllocate (endPoint);
+}
+
+void
+QuicL4Protocol::DeAllocate (Ipv6EndPoint *endPoint)
+{
+  NS_LOG_FUNCTION (this << endPoint);
+  m_endPoints6->DeAllocate (endPoint);
+}
+
+void
+QuicL4Protocol::SetDownTarget (IpL4Protocol::DownTargetCallback callback)
+{
+  NS_LOG_FUNCTION (this);
+  m_downTarget = callback;
+}
+
+IpL4Protocol::DownTargetCallback
+QuicL4Protocol::GetDownTarget (void) const
+{
+  NS_LOG_FUNCTION (this);
+  return m_downTarget;
+}
+
+void
+QuicL4Protocol::SetDownTarget6 (IpL4Protocol::DownTargetCallback6 callback)
+{
+  NS_LOG_FUNCTION (this);
+  m_downTarget6 = callback;
+}
+
+IpL4Protocol::DownTargetCallback6
+QuicL4Protocol::GetDownTarget6 (void) const
+{
+  return m_downTarget6;
+}
+
+bool
+QuicL4Protocol::Is0RTTHandshakeAllowed () const
+{
+  return m_0RTTHandshakeStart;
+}
+
+} // namespace ns3
+
diff --git a/src/quic/model/quic-l4-protocol.h b/src/quic/model/quic-l4-protocol.h
new file mode 100644
index 000000000..718b9bbd0
--- /dev/null
+++ b/src/quic/model/quic-l4-protocol.h
@@ -0,0 +1,454 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *
+ */
+
+#ifndef QUICL4PROTOCOL_H
+#define QUICL4PROTOCOL_H
+
+#include <stdint.h>
+#include <map>
+#include "ns3/node.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/ipv6-address.h"
+#include "ns3/sequence-number.h"
+#include "ns3/ip-l4-protocol.h"
+#include "quic-header.h"
+#include "ns3/socket.h"
+
+namespace ns3 {
+
+class QuicSocketBase;
+class Ipv4EndPointDemux;
+class Ipv6EndPointDemux;
+class Ipv4EndPoint;
+class Ipv6EndPoint;
+
+/**
+ * \ingroup quic
+ *
+ * \brief Container that encloses the Quic-Udp binding
+ */
+class QuicUdpBinding : public Object
+{
+public:
+  QuicUdpBinding ();
+  ~QuicUdpBinding ();
+
+  static TypeId GetTypeId (void);
+  TypeId GetInstanceTypeId (void) const;
+
+  Ptr<Socket> m_budpSocket;          //!< The UDP socket this binding is associated with
+  Ptr<Socket> m_budpSocket6;         //!< The IPv6 UDP this binding is associated with
+  Ptr<QuicSocketBase> m_quicSocket;  //!< The quic socket associated with this binding
+  bool m_listenerBinding;            //!< A flag that indicates if in this binding resides the listening socket
+};
+
+/**
+ * \ingroup quic
+ * \brief QUIC socket creation and multiplexing/demultiplexing
+ *
+ * This class is responsible for
+ * - the creation of a QUIC socket
+ * - the binding of the QUIC socket to a UDP socket
+ *
+ * The creation of QuicSocket are handled in the method CreateSocket, which is
+ * called by QuicSocketFactory. Upon creation, this class is responsible to
+ * the socket initialization and handle multiplexing/demultiplexing of data
+ * between node's QUIC sockets. Demultiplexing is done by receiving
+ * packets from UDP, and forwards them up to the right socket. Multiplexing
+ * is done through the SendPacket function, which sends the packet down the stack.
+ *
+ * Moreover, this class SHOULD manage the connection authentication among the
+ * peers by checking the packets it receives from the UDP layer going down
+ * the stack.
+ *
+ * \see CreateSocket
+ * \see NotifyNewAggregate
+ * \see SendPacket
+*/
+class QuicL4Protocol : public IpL4Protocol
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+  static const uint8_t PROT_NUMBER;
+
+  QuicL4Protocol ();
+  virtual ~QuicL4Protocol ();
+
+  /**
+   * \brief Set the node associated with this stack
+   *
+   * \param node the node to be associated with
+   */
+  void SetNode (Ptr<Node> node);
+
+  /**
+   * \brief Create a QUIC socket using the TypeId set by SocketType attribute
+   *
+   * \return A smart Socket pointer to a QuicSocket (e.g., QuicSocketBase)
+   * allocated by this instance of the QUIC L4 protocol
+   */
+  Ptr<Socket> CreateSocket (void);
+
+  /**
+   * \brief Create a QUIC socket using the specified congestion control algorithm TypeId
+   *
+   * \return A smart Socket pointer to a QuicSocket (e.g., QuicSocketBase)
+   * allocated by this instance of the QUIC L4 protocol
+   *
+   * \param congestionTypeId the congestion control algorithm TypeId
+   */
+  Ptr<Socket> CreateSocket (TypeId congestionTypeId);
+
+  /**
+   * \brief Create an UDP socket that will be used by QUIC
+   *
+   * \return a smart pointer to the UDP socket
+   */
+  Ptr<Socket> CreateUdpSocket (void);
+
+  /**
+   * \brief Create an IPv6 UDP socket that will be used by QUIC
+   *
+   * \return a smart pointer to the IPv6 UDP socket
+   */
+  Ptr<Socket> CreateUdpSocket6 (void);
+
+  /**
+   * \brief Bind the UDP socket (and create it if needed)
+   *
+   * \param socket the QuicSocketBase to be binded
+   * \return the result of the bind call on the UDP socket
+   */
+  int UdpBind (Ptr<QuicSocketBase> socket);
+
+  /**
+   * \brief Bind the IPv6 UDP socket (and create it if needed)
+   *
+   * \param socket the QuicSocketBase to be binded
+   * \return the result of the bind call on the IPv6 UDP socket
+   */
+  int UdpBind6 (Ptr<QuicSocketBase> socket);
+
+  /**
+   * \brief Bind the UDP socket (and create if needed) to a specific address
+   *
+   * \param address the address
+   * \param socket the QuicSocketBase to be binded
+   * \return the result of the bind call on the UDP socket
+   */
+  int UdpBind (const Address &address, Ptr<QuicSocketBase> socket);
+
+  /**
+   * \brief Connect the UDP socket
+   *
+   * \param address the address
+   * \param socket the QuicSocketBase to be connected
+   * \return the result of the connect call on the UDP socket
+   */
+  int UdpConnect (const Address & address, Ptr<QuicSocketBase> socket);
+
+  /**
+   * \brief Send a QUIC packet using the UDP socket
+   *
+   * \param udpSocket the UDP socket where the packet has to be sent
+   * \param p the smart pointer to the packet
+   * \param flags eventual flags for the UDP socket
+   * \return the result of the send call on the UDP socket
+   */
+  int UdpSend (Ptr<Socket> udpSocket, Ptr<Packet> p, uint32_t flags) const;
+
+  /**
+   * \brief Receive a packet from the underlying UDP socket
+   *
+   * \param udpSocket the UDP socket where the packet has to be received
+   * \param maxSize the smart pointer to the packet
+   * \param flags eventual flags for the UDP socket
+   * \param address the address
+   * \return the received UDP packet
+   */
+  Ptr<Packet> UdpRecv (Ptr<Socket> udpSocket, uint32_t maxSize, uint32_t flags, Address &address);
+
+  /**
+   * \brief Get the max number of bytes an UDP Socket can send
+   *
+   * \param socket the QuicSocketBase to be checked
+   * \return the max number of bytes an UDP Socket can send
+   */
+  uint32_t GetTxAvailable (Ptr<QuicSocketBase> socket) const;
+
+  /**
+   * \brief Get the max number of bytes an UDP Socket can read
+   *
+   * \param socket the QuicSocketBase to be checked
+   * \return the max number of bytes an UDP Socket can read
+   */
+  uint32_t GetRxAvailable (Ptr<QuicSocketBase> socket) const;
+
+  /**
+   * \brief Get UDP socket address.
+   *
+   * \param quicSocket the QuicSocketBase to be checked
+   * \param address the address name the UDP socket is associated with.
+   * \returns 0 if success, -1 otherwise
+   */
+  int GetSockName (const ns3::QuicSocketBase* quicSocket, Address &address) const;
+
+  /**
+   * \brief Get the peer address of a connected UDP socket.
+   *
+   * \param quicSocket the QuicSocketBase to be checked
+   * \param address the address the UDP socket is connected to.
+   * \returns 0 if success, -1 otherwise
+   */
+  int GetPeerName (const ns3::QuicSocketBase* quicSocket, Address &address) const;
+
+  /**
+   * \brief Bind the UDP socket to specific device.
+   *
+   * \param socket the QuicSocketBase to be binded
+   * \param netdevice Pointer to NetDevice of desired interface
+   * \returns nothing
+   */
+  void BindToNetDevice (Ptr<QuicSocketBase> socket, Ptr<NetDevice> netdevice);
+
+  /**
+   * \brief Get the authenticated addresses vector
+   *
+   * \return The authenticated addresses vector for this L4 Protocol
+   */
+  const std::vector<Address >& GetAuthAddresses () const;
+
+  /**
+   * \brief This method is called by the underlying UDP socket upon receiving a packet
+   *
+   * \param sock a smart pointer to the unerlying UDP socket
+   */
+  void ForwardUp (Ptr<Socket> sock);
+
+  /**
+   * \brief Set the receive callback for the underlyong UDP socket
+   *
+   * \param handler a callback
+   * \param sock the socket
+   */
+  void SetRecvCallback (Callback<void, Ptr<Packet>, const QuicHeader&, Address&> handler, Ptr<Socket> sock);
+
+  /**
+   * \brief Called by the socket implementation to send a packet
+   *
+   * \param socket the QuicSocketBase that would send the packet
+   * \param pck a smart pointer to a packet
+   * \param outgoing the QuicHeader of the packet
+   */
+  void SendPacket (Ptr<QuicSocketBase> socket, Ptr<Packet> pkt, const QuicHeader &outgoing) const;
+
+  /**
+   * \brief Remove a socket (and its clones if it is a listener)
+   *  If no sockets are left, close the UDP connection
+   *
+   * \param socket a smart pointer to the socket to be removed
+   * \return a boolean which is false if the socket was not found and closed
+   */
+  bool RemoveSocket (Ptr<QuicSocketBase> socket);
+
+  /**
+   * \brief Set the listener QuicSocketBase
+   *
+   * \param sock a smart pointer to the socket to be set as listener
+   * \return true if the settings succeeded, otherwhise false
+   */
+  bool SetListener (Ptr<QuicSocketBase> sock);
+
+  /**
+   * \brief Check if this L4 Protocol is Server
+   *
+   * \return true if this L4 Protocol is Server, otherwhise false
+   */
+  bool IsServer (void) const;
+
+  /**
+   * \brief Check if this L4 Protocol allows the 0-Rtt Handshake start
+   *
+   * \return true if this L4 Protocol allows the 0-Rtt Handshake start, otherwhise false
+   */
+  bool Is0RTTHandshakeAllowed () const;
+
+  /**
+   * \brief Allocate an IPv4 Endpoint
+   * \return the Endpoint
+   */
+  Ipv4EndPoint * Allocate (void);
+  /**
+   * \brief Allocate an IPv4 Endpoint
+   * \param address address to use
+   * \return the Endpoint
+   */
+  Ipv4EndPoint * Allocate (Ipv4Address address);
+  /**
+   * \brief Allocate an IPv4 Endpoint
+   * \param boundNetDevice Bound NetDevice (if any)
+   * \param port port to use
+   * \return the Endpoint
+   */
+  Ipv4EndPoint * Allocate (Ptr<NetDevice> boundNetDevice, uint16_t port);
+  /**
+   * \brief Allocate an IPv4 Endpoint
+   * \param boundNetDevice Bound NetDevice (if any)
+   * \param address address to use
+   * \param port port to use
+   * \return the Endpoint
+   */
+  Ipv4EndPoint * Allocate (Ptr<NetDevice> boundNetDevice, Ipv4Address address, uint16_t port);
+  /**
+   * \brief Allocate an IPv4 Endpoint
+   * \param boundNetDevice Bound NetDevice (if any)
+   * \param localAddress local address to use
+   * \param localPort local port to use
+   * \param peerAddress remote address to use
+   * \param peerPort remote port to use
+   * \return the Endpoint
+   */
+  Ipv4EndPoint * Allocate (Ptr<NetDevice> boundNetDevice,
+                           Ipv4Address localAddress, uint16_t localPort,
+                           Ipv4Address peerAddress, uint16_t peerPort);
+
+  /**
+   * \brief Allocate an IPv6 Endpoint
+   * \return the Endpoint
+   */
+  Ipv6EndPoint * Allocate6 (void);
+  /**
+   * \brief Allocate an IPv6 Endpoint
+   * \param address address to use
+   * \return the Endpoint
+   */
+  Ipv6EndPoint * Allocate6 (Ipv6Address address);
+  /**
+   * \brief Allocate an IPv6 Endpoint
+   * \param boundNetDevice Bound NetDevice (if any)
+   * \param port port to use
+   * \return the Endpoint
+   */
+  Ipv6EndPoint * Allocate6 (Ptr<NetDevice> boundNetDevice, uint16_t port);
+  /**
+   * \brief Allocate an IPv6 Endpoint
+   * \param boundNetDevice Bound NetDevice (if any)
+   * \param address address to use
+   * \param port port to use
+   * \return the Endpoint
+   */
+  Ipv6EndPoint * Allocate6 (Ptr<NetDevice> boundNetDevice, Ipv6Address address, uint16_t port);
+  /**
+   * \brief Allocate an IPv6 Endpoint
+   * \param boundNetDevice Bound NetDevice (if any)
+   * \param localAddress local address to use
+   * \param localPort local port to use
+   * \param peerAddress remote address to use
+   * \param peerPort remote port to use
+   * \return the Endpoint
+   */
+  Ipv6EndPoint * Allocate6 (Ptr<NetDevice> boundNetDevice,
+                            Ipv6Address localAddress, uint16_t localPort,
+                            Ipv6Address peerAddress, uint16_t peerPort);
+
+  /**
+   * \brief Remove an IPv4 Endpoint.
+   * \param endPoint the end point to remove
+   */
+  void DeAllocate (Ipv4EndPoint *endPoint);
+  /**
+   * \brief Remove an IPv6 Endpoint.
+   * \param endPoint the end point to remove
+   */
+  void DeAllocate (Ipv6EndPoint *endPoint);
+
+  // Inherited from IpL4Protocol, not used in this implementation
+  virtual enum IpL4Protocol::RxStatus Receive (Ptr<Packet> p,
+                                               Ipv4Header const &incomingIpHeader,
+                                               Ptr<Ipv4Interface> incomingInterface);
+  virtual enum IpL4Protocol::RxStatus Receive (Ptr<Packet> p,
+                                               Ipv6Header const &incomingIpHeader,
+                                               Ptr<Ipv6Interface> incomingInterface);
+  virtual void ReceiveIcmp (Ipv4Address icmpSource, uint8_t icmpTtl,
+                            uint8_t icmpType, uint8_t icmpCode, uint32_t icmpInfo,
+                            Ipv4Address payloadSource,Ipv4Address payloadDestination,
+                            const uint8_t payload[8]);
+  virtual void ReceiveIcmp (Ipv6Address icmpSource, uint8_t icmpTtl,
+                            uint8_t icmpType, uint8_t icmpCode, uint32_t icmpInfo,
+                            Ipv6Address payloadSource,Ipv6Address payloadDestination,
+                            const uint8_t payload[8]);
+  virtual void SetDownTarget (IpL4Protocol::DownTargetCallback cb);
+  virtual void SetDownTarget6 (IpL4Protocol::DownTargetCallback6 cb);
+  virtual int GetProtocolNumber (void) const;
+  virtual IpL4Protocol::DownTargetCallback GetDownTarget (void) const;
+  virtual IpL4Protocol::DownTargetCallback6 GetDownTarget6 (void) const;
+
+protected:
+  virtual void DoDispose (void);
+
+  /**
+   * \brief Setup socket factory and callbacks when aggregated to a node
+   *
+   * This function will notify other components connected to the node that a
+   * new stack member is now connected.
+   */
+  virtual void NotifyNewAggregate ();
+
+private:
+  typedef std::vector< Ptr<QuicUdpBinding> > QuicUdpBindingList;  //!< container for the QuicUdp bindings
+
+  /**
+   * \brief Clone a QuicSocket and add it to the list of sockets associated to this protocol
+   *
+   * \param sock a smart pointer to the socket to be cloned
+   * \return a smart pointer to the new cloned socket
+   */
+  Ptr<QuicSocketBase> CloneSocket (Ptr<QuicSocketBase> oldsock);
+
+  Ptr<Node> m_node;           //!< The node this stack is associated with
+  TypeId m_rttTypeId;         //!< The type of RttEstimator objects
+  TypeId m_congestionTypeId;  //!< The socket type of QUIC objects
+  bool m_0RTTHandshakeStart;  //!< A flag indicating if the L4 Protocol allows the 0-RTT Hansdhake start
+  std::map <Ptr<Socket>, Callback<void, Ptr<Packet>, const QuicHeader&, Address& > > m_socketHandlers;  //!< Callback handlers for sockets
+
+  std::vector<Address > m_authAddresses;    //!< Authenticated addresses for this L4 Protocol
+  QuicUdpBindingList m_quicUdpBindingList;  //!< List of QuicUdp bindings
+  bool m_isServer;                          //!< A flag indicating if the L4 Protocol is server
+
+  Ipv4EndPointDemux *m_endPoints;   //!< A list of IPv4 end points.
+  Ipv6EndPointDemux *m_endPoints6;  //!< A list of IPv6 end points.
+
+  // Inherited from IpL4Protocol, not used in this implementation
+  IpL4Protocol::DownTargetCallback m_downTarget;
+  IpL4Protocol::DownTargetCallback6 m_downTarget6;
+
+};
+
+} // namespace ns3
+
+#endif /* QUIC_L4_PROTOCOL_H */
diff --git a/src/quic/model/quic-l5-protocol.cc b/src/quic/model/quic-l5-protocol.cc
new file mode 100644
index 000000000..9cadb70e0
--- /dev/null
+++ b/src/quic/model/quic-l5-protocol.cc
@@ -0,0 +1,479 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *
+ */
+
+#include "ns3/assert.h"
+#include "ns3/log.h"
+#include "ns3/nstime.h"
+#include "ns3/boolean.h"
+#include "ns3/object-vector.h"
+
+#include "ns3/packet.h"
+#include "ns3/node.h"
+#include "ns3/simulator.h"
+// #include "ns3/ipv4-route.h"
+// #include "ns3/ipv6-route.h"
+
+#include "quic-l5-protocol.h"
+// #include "ns3/ipv4-end-point-demux.h"
+// #include "ns3/ipv6-end-point-demux.h"
+// #include "ns3/ipv4-end-point.h"
+// #include "ns3/ipv6-end-point.h"
+// #include "ns3/ipv4-l3-protocol.h"
+// #include "ns3/ipv6-l3-protocol.h"
+// #include "ns3/ipv6-routing-protocol.h"
+#include "quic-socket-factory.h"
+#include "quic-socket-base.h"
+#include "quic-stream-base.h"
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("QuicL5Protocol");
+
+NS_OBJECT_ENSURE_REGISTERED (QuicL5Protocol);
+
+// #undef NS_LOG_APPEND_CONTEXT
+// #define NS_LOG_APPEND_CONTEXT
+// if (m_node and m_connectionId) { std::clog << " [node " << m_node->GetId () << " socket " << m_connectionId << "] "; }
+
+TypeId
+QuicL5Protocol::GetTypeId (void)
+{
+  static TypeId tid =
+    TypeId ("ns3::QuicL5Protocol")
+      .SetParent<QuicSocketBase> ()
+      .SetGroupName ("Internet")
+      .AddConstructor<QuicL5Protocol> ()
+      .AddAttribute ("StreamList", "The list of streams associated to this protocol.",
+                     ObjectVectorValue (),
+                     MakeObjectVectorAccessor (&QuicL5Protocol::m_streams),
+                     MakeObjectVectorChecker<QuicStreamBase> ())
+  ;
+  return tid;
+}
+
+QuicL5Protocol::QuicL5Protocol ()
+  : m_socket (0),
+  m_node (0),
+  m_connectionId ()
+{
+  NS_LOG_FUNCTION_NOARGS ();
+  NS_LOG_LOGIC ("Made a QuicL5Protocol " << this);
+  m_socket = 0;
+  m_node = 0;
+  m_connectionId = 0;
+}
+
+QuicL5Protocol::~QuicL5Protocol ()
+{
+  NS_LOG_FUNCTION (this);
+}
+
+void
+QuicL5Protocol::CreateStream (
+  const QuicStreamBase::QuicStreamDirectionTypes_t streamDirectionType)
+{
+  NS_LOG_FUNCTION (this);
+  NS_LOG_INFO ("Create the stream with ID " << m_streams.size ());
+  Ptr<QuicStreamBase> stream = CreateObject<QuicStreamBase> ();
+
+  stream->SetQuicL5 (this);
+
+  stream->SetNode (m_node);
+
+  stream->SetConnectionId (m_connectionId);
+
+  stream->SetStreamId ((uint64_t) m_streams.size ());
+
+  uint64_t mask = 0x00000003;
+  if ((m_streams.size () & mask) == QuicStream::CLIENT_INITIATED_BIDIRECTIONAL
+      or (m_streams.size () & mask)
+      == QuicStream::SERVER_INITIATED_BIDIRECTIONAL)
+    {
+      stream->SetStreamDirectionType (QuicStream::BIDIRECTIONAL);
+
+    }
+  else
+    {
+      stream->SetStreamDirectionType (streamDirectionType);
+    }
+
+  if (stream->GetStreamId () > 0)
+    {
+      stream->SetMaxStreamData (m_socket->GetInitialMaxStreamData ());
+    }
+  else
+    {
+      stream->SetMaxStreamData (UINT32_MAX);
+    }
+
+  m_streams.push_back (stream);
+
+}
+
+void
+QuicL5Protocol::CreateStream (
+  const QuicStream::QuicStreamDirectionTypes_t streamDirectionType,
+  uint64_t streamNum)
+{
+
+  NS_LOG_FUNCTION (this << m_streams.size () << streamNum);
+
+
+  if (streamNum > m_socket->GetMaxStreamId ())   // TODO separate unidirectional and bidirectional
+    {
+      NS_LOG_INFO ("MaxStreamId " << m_socket->GetMaxStreamId ());
+      SignalAbortConnection (
+        QuicSubheader::TransportErrorCodes_t::STREAM_ID_ERROR,
+        "Initiating Stream with higher StreamID with respect to what already negotiated");
+      return;
+    }
+
+  // create streamNum streams
+  while (m_streams.size () <= streamNum)
+    {
+      NS_LOG_INFO ("Create stream " << m_streams.size ());
+      CreateStream (streamDirectionType);
+    }
+
+}
+
+void
+QuicL5Protocol::SetSocket (Ptr<QuicSocketBase> sock)
+{
+  NS_LOG_FUNCTION (this);
+  m_socket = sock;
+}
+
+int
+QuicL5Protocol::DispatchSend (Ptr<Packet> data)
+{
+  NS_LOG_FUNCTION (this);
+
+  int sentData = 0;
+
+  // if the streams are not created yet, open the streams
+  if (m_streams.size () != m_socket->GetMaxStreamId ())
+    {
+      NS_LOG_INFO ("Create the missing streams");
+      CreateStream (QuicStream::SENDER, m_socket->GetMaxStreamId ());   // TODO open up to max_stream_uni and max_stream_bidi
+    }
+
+  std::vector<Ptr<Packet> > disgregated = DisgregateSend (data);
+
+  std::vector<Ptr<QuicStreamBase> >::iterator jt = m_streams.begin () + 1;   // Avoid Send on stream <0>, which is used only for handshake
+
+  for (std::vector<Ptr<Packet> >::iterator it = disgregated.begin ();
+       it != disgregated.end (); ++jt)
+    {
+      if (jt == m_streams.end ())             // Sending Remaining Load
+        {
+          jt = m_streams.begin () + 1;
+        }
+      NS_LOG_LOGIC (
+        this << " " << (uint64_t)(*jt)->GetStreamDirectionType () << (uint64_t) QuicStream::SENDER << (uint64_t) QuicStream::BIDIRECTIONAL);
+
+      if ((*jt)->GetStreamDirectionType () == QuicStream::SENDER
+          or (*jt)->GetStreamDirectionType () == QuicStream::BIDIRECTIONAL)
+        {
+          NS_LOG_INFO (
+            "Sending data on stream " << (*jt)->GetStreamId ());
+          sentData = (*jt)->Send ((*it));
+          ++it;
+        }
+    }
+
+  return sentData;
+}
+
+int
+QuicL5Protocol::DispatchSend (Ptr<Packet> data, uint64_t streamId)
+{
+  NS_LOG_FUNCTION (this);
+
+  NS_LOG_INFO ("Send packet on (specified) stream " << streamId);
+
+  Ptr<QuicStreamBase> stream = SearchStream (streamId);
+
+  if (stream == nullptr)
+    {
+      CreateStream (QuicStream::SENDER, streamId);
+    }
+
+  stream = SearchStream (streamId);
+  int sentData = 0;
+
+  if (stream->GetStreamDirectionType () == QuicStream::SENDER
+      or stream->GetStreamDirectionType () == QuicStream::BIDIRECTIONAL)
+    {
+      sentData = stream->Send (data);
+    }
+
+  return sentData;
+}
+
+int
+QuicL5Protocol::DispatchRecv (Ptr<Packet> data, Address &address)
+{
+  NS_LOG_FUNCTION (this);
+  auto disgregated = DisgregateRecv (data);
+
+  if (m_socket->CheckIfPacketOverflowMaxDataLimit (disgregated))
+    {
+      NS_LOG_WARN ("Maximum data limit overflow");
+      // put here this check instead of in QuicSocketBase due to framework mismatch in packet->Copy()
+      SignalAbortConnection (
+        QuicSubheader::TransportErrorCodes_t::FLOW_CONTROL_ERROR,
+        "Received more data w.r.t. Max Data limit");
+      return -1;
+    }
+
+  bool onlyAckFrames = true;
+  uint64_t currStreamNum = m_streams.size () - 1;
+  for (auto &elem : disgregated)
+    {
+      QuicSubheader sub = elem.second;
+
+      // check if this is an ack frame
+      if (!sub.IsAck ())
+        {
+          onlyAckFrames = false;
+        }
+
+      if (sub.GetStreamId () > currStreamNum)
+        {
+          currStreamNum = sub.GetStreamId ();
+        }
+    }
+
+  CreateStream (QuicStream::RECEIVER, currStreamNum);
+
+  for (auto it = disgregated.begin (); it != disgregated.end (); ++it)
+    {
+      QuicSubheader sub = (*it).second;
+
+      if (sub.IsRstStream () or sub.IsMaxStreamData ()
+          or sub.IsStreamBlocked () or sub.IsStopSending ()
+          or sub.IsStream ())
+        {
+          Ptr<QuicStreamBase> stream = SearchStream (sub.GetStreamId ());
+
+          if (stream != nullptr
+              and (stream->GetStreamDirectionType () == QuicStream::RECEIVER
+                   or stream->GetStreamDirectionType ()
+                   == QuicStream::BIDIRECTIONAL))
+            {
+              NS_LOG_INFO (
+                "Receiving frame on stream " << stream->GetStreamId () <<
+                  " trigger stream");
+              stream->Recv ((*it).first, sub, address);
+            }
+        }
+      else
+        {
+          NS_LOG_INFO (
+            "Receiving frame on stream " << sub.GetStreamId () <<
+              " trigger socket");
+          m_socket->OnReceivedFrame (sub);
+        }
+    }
+
+  // trigger ACK TX if the received packet was not ACK-only
+  return !onlyAckFrames;
+}
+
+int
+QuicL5Protocol::Send (Ptr<Packet> frame)
+{
+  NS_LOG_FUNCTION (this);
+
+  return m_socket->AppendingTx (frame);
+}
+
+int
+QuicL5Protocol::Recv (Ptr<Packet> frame, Address &address)
+{
+  NS_LOG_FUNCTION (this);
+
+  m_socket->AppendingRx (frame, address);
+
+  return frame->GetSize ();
+}
+
+std::vector<Ptr<Packet> >
+QuicL5Protocol::DisgregateSend (Ptr<Packet> data)
+{
+  NS_LOG_FUNCTION (this);
+
+  uint32_t dataSizeByte = data->GetSize ();
+  std::vector< Ptr<Packet> > disgregated;
+  //data->Print(std::cout);
+
+  // Equally distribute load on all streams except on stream 0
+  uint32_t loadPerStream = dataSizeByte / (m_streams.size () - 1);
+  uint32_t remainingLoad = dataSizeByte - loadPerStream * (m_streams.size () - 1);
+  if (loadPerStream < 1)
+    {
+      loadPerStream = 1;
+    }
+
+  for (uint32_t start = 0; start < dataSizeByte; start += loadPerStream)
+    {
+      if (remainingLoad > 0 && start + remainingLoad == dataSizeByte)
+        {
+          Ptr<Packet> remainingfragment = data->CreateFragment (
+            start, remainingLoad);
+          disgregated.push_back (remainingfragment);
+        }
+      else
+        {
+          Ptr<Packet> fragment = data->CreateFragment (start, loadPerStream);
+          disgregated.push_back (fragment);
+        }
+
+    }
+
+  return disgregated;
+}
+
+std::vector< std::pair<Ptr<Packet>, QuicSubheader> >
+QuicL5Protocol::DisgregateRecv (Ptr<Packet> data)
+{
+  NS_LOG_FUNCTION (this);
+
+  uint32_t dataSizeByte = data->GetSize ();
+  std::vector< std::pair<Ptr<Packet>, QuicSubheader> > disgregated;
+  NS_LOG_INFO ("DisgregateRecv for a packet with size " << dataSizeByte);
+  //data->Print(std::cout);
+
+  // the packet could contain multiple frames
+  // each of them starts with a subheader
+  // cycle through the data packet and extract the frames
+  for (uint32_t start = 0; start < dataSizeByte; )
+    {
+      QuicSubheader sub;
+      data->RemoveHeader (sub);
+      NS_LOG_INFO ("subheader " << sub << " dataSizeByte " << dataSizeByte
+                                << " remaining " << data->GetSize () << " frame size " << sub.GetLength ());
+      Ptr<Packet> remainingfragment = data->CreateFragment (0, sub.GetLength ());
+      NS_LOG_INFO ("fragment size " << remainingfragment->GetSize ());
+
+      // remove the first portion of the packet
+      data->RemoveAtStart (sub.GetLength ());
+      start += sub.GetSerializedSize () + sub.GetLength ();
+      disgregated.push_back (std::make_pair (remainingfragment, sub));
+    }
+
+
+  return disgregated;
+}
+
+Ptr<QuicStreamBase>
+QuicL5Protocol::SearchStream (uint64_t streamId)
+{
+  NS_LOG_FUNCTION (this);
+  std::vector<Ptr<QuicStreamBase> >::iterator it = m_streams.begin ();
+  Ptr<QuicStreamBase> stream;
+  while (it != m_streams.end ())
+    {
+      if ((*it)->GetStreamId () == streamId)
+        {
+          stream = *it;
+          break;
+        }
+      ++it;
+    }
+  return stream;
+}
+
+void
+QuicL5Protocol::SetNode (Ptr<Node> node)
+{
+  NS_LOG_FUNCTION (this << node);
+  m_node = node;
+}
+
+void
+QuicL5Protocol::SetConnectionId (uint64_t connId)
+{
+  NS_LOG_FUNCTION (this << connId);
+  m_connectionId = connId;
+}
+
+uint16_t
+QuicL5Protocol::GetMaxPacketSize () const
+{
+  return m_socket->GetSegSize ();
+}
+
+bool
+QuicL5Protocol::ContainsTransportParameters ()
+{
+  return m_socket->CouldContainTransportParameters ();
+}
+
+void
+QuicL5Protocol::OnReceivedTransportParameters (
+  QuicTransportParameters transportParameters)
+{
+  m_socket->OnReceivedTransportParameters (transportParameters);
+}
+
+void
+QuicL5Protocol::SignalAbortConnection (uint16_t transportErrorCode,
+                                       const char* reasonPhrase)
+{
+  NS_LOG_FUNCTION (this);
+  m_socket->AbortConnection (transportErrorCode, reasonPhrase);
+}
+
+void
+QuicL5Protocol::UpdateInitialMaxStreamData (uint32_t newMaxStreamData)
+{
+  NS_LOG_FUNCTION (this << newMaxStreamData);
+
+  // TODO handle in a different way bidirectional and unidirectional streams
+  for (auto stream : m_streams)
+    {
+      if (stream->GetStreamId () > 0) // stream 0 is set to UINT32_MAX and not modified
+        {
+          stream->SetMaxStreamData (newMaxStreamData);
+        }
+    }
+}
+
+uint64_t
+QuicL5Protocol::GetMaxData ()
+{
+  NS_LOG_FUNCTION (this);
+
+  uint64_t maxData = 0;
+  for (auto stream : m_streams)
+    {
+      maxData += stream->SendMaxStreamData ();
+    }
+  return maxData;
+}
+
+} // namespace ns3
+
diff --git a/src/quic/model/quic-l5-protocol.h b/src/quic/model/quic-l5-protocol.h
new file mode 100644
index 000000000..9ee811a9a
--- /dev/null
+++ b/src/quic/model/quic-l5-protocol.h
@@ -0,0 +1,240 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *
+ */
+
+#ifndef QUICL5PROTOCOL_H
+#define QUICL5PROTOCOL_H
+
+#include "quic-transport-parameters.h"
+#include "quic-stream.h"
+#include "quic-subheader.h"
+
+
+namespace ns3 {
+
+class QuicSocketBase;
+class QuicStreamBase;
+
+/**
+ * This class handles the creation and management of QUIC streams
+ * and is associated to a QuicSocketBase object
+ */
+
+/**
+ * \ingroup quic
+ * \brief QUIC stream creation and multiplexing/demultiplexing
+ *
+ * This class is responsible for
+ * - the creation of QUIC streams
+ * - the binding of the QUIC socket to the QUIC streams
+ *
+ * The creation of QuicStreams are handled in the method CreateStream.
+ * Upon creation, this class is responsible to the stream initialization and
+ * handle multiplexing/demultiplexing of data. Demultiplexing is done by
+ * receiving packets from a QUIC Socket, and forwards them to its associated
+ * streams. Multiplexing is done through the DispatchSend function, which sends
+ * the frames down the stack.
+ *
+ * \see CreateStream
+ * \see DispatchSend
+*/
+class QuicL5Protocol : public Object
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+
+  QuicL5Protocol ();
+  virtual ~QuicL5Protocol ();
+
+  /**
+   * \brief Set the Quic Socket associated with this stack
+   *
+   * \param sock a smart pointer to the Quic Socket to be associated with
+   */
+  void SetSocket (Ptr<QuicSocketBase> sock);
+
+  /**
+   * \brief Set the node associated with this stack
+   *
+   * \param node the node to be associated with
+   */
+  void SetNode (Ptr<Node> node);
+
+  /**
+   * \brief Set the connection id associated with this stack
+   *
+   * \param connId the connection id to be associated with
+   */
+  void SetConnectionId (uint64_t connId);
+
+  /**
+   * \brief Send a packet to the streams associated to this L5 protocol
+   *
+   * The streams are created if not present. Stream 0 is not used (only for handshake)
+   *
+   * \param data a smart pointer to a packet
+   * \return always 0
+   */
+  int DispatchSend (Ptr<Packet> data);
+
+  /**
+   * \brief Send a packet to a specific stream
+   *
+   * The streams is created if not present.
+   *
+   * \param data a smart pointer to a packet
+   * \param streamId the stream ID for the packet
+   * \return always 0
+   */
+  int DispatchSend (Ptr<Packet> data, uint64_t streamId);
+
+  /**
+   * \brief Receive a packet from the QUIC socket implementation
+   *
+   * The packet is disgregated into multiple frames.
+   * If a frame needs to be processed by the socket, it is sent back to the socket,
+   * otherwise is forwarded to the correct stream
+   *
+   * \param data a smart pointer to a Packet
+   * \param address the sender address
+   * \return 0 if the received packet was ACK-only, -1 in case of errors, 1 if everything was OK;
+   */
+  int DispatchRecv (Ptr<Packet> data, Address &address);
+
+  //int DispatchRecv(Ptr<Packet> data, uint64_t streamId, Address &address);
+
+  /**
+   * \brief Method called by a stream implementation to return a proper stream frame
+   * with a subheader for the frame
+   *
+   * \param frame a smart pointer to a packet
+   * \return the size of the frame
+   */
+  int Send (Ptr<Packet> frame);
+
+  /**
+   * \brief Method called by a stream implementation to return a received frame (without header)
+   *
+   * \param frame a smart pointer to the frame
+   * \param address the address of the sender
+   * \return the frame size
+   */
+  int Recv (Ptr<Packet> frame, Address &address);
+
+  /**
+   * \brief Create a vector with fragments of packets to be sent in different streams
+   *
+   * \param data a smart pointer to a Packet
+   * \return a vector of packet fragmets
+   */
+  std::vector<Ptr<Packet> > DisgregateSend (Ptr<Packet> data);
+
+  /**
+   * \brief Create a vector of frames, corresponding to frames of different streams aggregated in a single QUIC packet
+   *
+   * \param data a smart pointer to the received packet
+   * \return a vector of pairs with frames as smart pointers to packets and subheaders
+   */
+  std::vector< std::pair<Ptr<Packet>, QuicSubheader> > DisgregateRecv (Ptr<Packet> data);
+
+  /**
+   * \brief get the stream associated to the ID
+   *
+   * \param streamId the ID of the stream
+   * \return a smart pointer to the stream object
+   */
+  Ptr<QuicStreamBase> SearchStream (uint64_t streamId);
+
+  /**
+   * \brief Create a stream with ID equal to the number of already created streams
+   *
+   * \param streamDirectionType the stream direction
+   */
+  void CreateStream (const QuicStream::QuicStreamDirectionTypes_t streamDirectionType);
+
+  /**
+   * \brief create streamNum streams to be associated to this L5 object
+   *
+   * \param streamDirectionType the QUIC stream direction type,
+   *   i.e., unidirectional or bidirectional
+   * \param the number of streams to be created
+   */
+  void CreateStream (const QuicStream::QuicStreamDirectionTypes_t streamDirectionType, uint64_t streamNum);
+
+  /**
+   * \brief Get the maximum packet size from the underlying socket
+   *
+   * \return the maximum packet size in bytes
+   */
+  uint16_t GetMaxPacketSize () const;
+
+  /**
+   * \brief Check with the QUIC socket if the packet that has just been received could contain transport parameters
+   *
+   * \return a boolean, true if the packet that has just been received contains transport params
+   */
+  bool ContainsTransportParameters ();
+
+  /**
+   * \brief Pass the transportParameters to the the QUIC socket
+   *
+   * \param transportParameters the QuicTransportParameters
+   */
+  void OnReceivedTransportParameters (QuicTransportParameters transportParameters);
+
+  /**
+   * \brief call AbortConnection in the QUIC socket implementation
+   *
+   * \param transportErrorCode the error code
+   * \param a sentence explaining the error
+   */
+  void SignalAbortConnection (uint16_t transportErrorCode, const char* reasonPhrase);
+
+  /**
+   * \brief Propagate the updated max stream data values to all the streams
+   *
+   * \param newMaxStreamData the updated value
+   */
+  void UpdateInitialMaxStreamData (uint32_t newMaxStreamData);
+
+  /**
+   * \brief Return MAX_DATA for flow control (i.e., the sum of MAX_STREAM_DATA for all streams)
+   *
+   * \returns the new max data value
+   */
+  uint64_t GetMaxData ();
+
+private:
+  Ptr<QuicSocketBase> m_socket;                 //!< The Quic socket this stack is associated with
+  Ptr<Node> m_node;                             //!< The node this stack is associated with
+  uint64_t m_connectionId;                      //!< The connection id this stack is associated with
+  std::vector<Ptr<QuicStreamBase> > m_streams;  //!< The streams this stack is associated with
+};
+
+} // namespace ns3
+
+#endif /* QUIC_L5_PROTOCOL_H */
diff --git a/src/quic/model/quic-socket-base.cc b/src/quic/model/quic-socket-base.cc
new file mode 100644
index 000000000..8b7d386cc
--- /dev/null
+++ b/src/quic/model/quic-socket-base.cc
@@ -0,0 +1,3143 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2020 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *          Umberto Paro <umberto.paro@me.com>
+ *
+ */
+/*
+ #define NS_LOG_APPEND_CONTEXT \
+  if (m_node and m_connectionId) { std::clog << " [node " << m_node->GetId () << " socket " << m_connectionId << "] "; }
+*/
+
+#include "ns3/abort.h"
+#include "ns3/node.h"
+#include "ns3/inet-socket-address.h"
+#include "ns3/inet6-socket-address.h"
+#include "ns3/log.h"
+#include "ns3/ipv4.h"
+#include "ns3/ipv6.h"
+#include "ns3/ipv4-interface-address.h"
+#include "ns3/ipv4-route.h"
+#include "ns3/ipv6-route.h"
+#include "ns3/ipv4-routing-protocol.h"
+#include "ns3/ipv6-routing-protocol.h"
+#include "ns3/simulation-singleton.h"
+#include "ns3/simulator.h"
+#include "ns3/packet.h"
+#include "ns3/random-variable-stream.h"
+#include "ns3/nstime.h"
+#include "ns3/uinteger.h"
+#include "ns3/double.h"
+#include "ns3/pointer.h"
+#include "ns3/trace-source-accessor.h"
+#include "quic-socket-base.h"
+#include "quic-congestion-ops.h"
+#include "ns3/tcp-congestion-ops.h"
+#include "quic-header.h"
+#include "quic-l4-protocol.h"
+#include "ns3/ipv4-end-point.h"
+#include "ns3/ipv6-end-point.h"
+#include "ns3/ipv6-l3-protocol.h"
+#include "ns3/tcp-header.h"
+#include "ns3/tcp-option-winscale.h"
+#include "ns3/tcp-option-ts.h"
+#include "ns3/tcp-option-sack-permitted.h"
+#include "ns3/tcp-option-sack.h"
+#include "ns3/rtt-estimator.h"
+#include "quic-socket-tx-edf-scheduler.h"
+#include <math.h>
+#include <algorithm>
+#include <vector>
+#include <sstream>
+#include <ns3/core-module.h>
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("QuicSocketBase");
+
+NS_OBJECT_ENSURE_REGISTERED (QuicSocketBase);
+NS_OBJECT_ENSURE_REGISTERED (QuicSocketState);
+
+const uint16_t QuicSocketBase::MIN_INITIAL_PACKET_SIZE = 1200;
+
+TypeId
+QuicSocketBase::GetInstanceTypeId () const
+{
+  return QuicSocketBase::GetTypeId ();
+}
+
+TypeId
+QuicSocketBase::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicSocketBase")
+    .SetParent<QuicSocket> ()
+    .SetGroupName ("Internet")
+    .AddConstructor<QuicSocketBase> ()
+    .AddAttribute ("InitialVersion",
+                   "Quic Version. The default value starts a version negotiation procedure",
+                   UintegerValue (QUIC_VERSION_NEGOTIATION),
+                   MakeUintegerAccessor (&QuicSocketBase::m_vers),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddAttribute ("IdleTimeout",
+                   "Idle timeout value after which the socket is closed",
+                   TimeValue (Seconds (300)),
+                   MakeTimeAccessor (&QuicSocketBase::m_idleTimeout),
+                   MakeTimeChecker ())
+    .AddAttribute ("MaxStreamData",
+                   "Stream Maximum Data",
+                   UintegerValue (4294967295),      // according to the QUIC RFC this value should default to 0, and be increased by the client/server
+                   MakeUintegerAccessor (&QuicSocketBase::m_initial_max_stream_data),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddAttribute ("MaxData",
+                   "Connection Maximum Data",
+                   UintegerValue (4294967295),      // according to the QUIC RFC this value should default to 0, and be increased by the client/server
+                   MakeUintegerAccessor (&QuicSocketBase::m_max_data),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddAttribute ("MaxStreamIdBidi",
+                   "Maximum StreamId for Bidirectional Streams",
+                   UintegerValue (2),                   // according to the QUIC RFC this value should default to 0, and be increased by the client/server
+                   MakeUintegerAccessor (&QuicSocketBase::m_initial_max_stream_id_bidi),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddAttribute ("MaxStreamIdUni", "Maximum StreamId for Unidirectional Streams",
+                   UintegerValue (2),                                  // according to the QUIC RFC this value should default to 0, and be increased by the client/server
+                   MakeUintegerAccessor (&QuicSocketBase::m_initial_max_stream_id_uni),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddAttribute ("MaxTrackedGaps", "Maximum number of gaps in an ACK",
+                   UintegerValue (20),
+                   MakeUintegerAccessor (&QuicSocketBase::m_maxTrackedGaps),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddAttribute ("OmitConnectionId", "Omit ConnectionId field in Short QuicHeader format",
+                   BooleanValue (false),
+                   MakeBooleanAccessor (&QuicSocketBase::m_omit_connection_id),
+                   MakeBooleanChecker ())
+    .AddAttribute ("MaxPacketSize", "Maximum Packet Size",
+                   UintegerValue (1460),
+                   MakeUintegerAccessor (&QuicSocketBase::GetSegSize,
+                                         &QuicSocketBase::SetSegSize),
+                   MakeUintegerChecker<uint16_t> ())
+    .AddAttribute ("SocketSndBufSize", "QuicSocketBase maximum transmit buffer size (bytes)",
+                   UintegerValue (131072),                                  // 128k
+                   MakeUintegerAccessor (&QuicSocketBase::GetSocketSndBufSize,
+                                         &QuicSocketBase::SetSocketSndBufSize),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddAttribute ("SocketRcvBufSize", "QuicSocketBase maximum receive buffer size (bytes)",
+                   UintegerValue (131072),                                  // 128k
+                   MakeUintegerAccessor (&QuicSocketBase::GetSocketRcvBufSize,
+                                         &QuicSocketBase::SetSocketRcvBufSize),
+                   MakeUintegerChecker<uint32_t> ())
+    //	.AddAttribute ("StatelessResetToken, "Stateless Reset Token",
+    //				   UintegerValue (0),
+    //				   MakeUintegerAccessor (&QuicSocketBase::m_stateless_reset_token),
+    //				   MakeUintegerChecker<uint128_t> ())
+    .AddAttribute ("AckDelayExponent", "Ack Delay Exponent", 
+                   UintegerValue (3),
+                   MakeUintegerAccessor (&QuicSocketBase::m_ack_delay_exponent),
+                   MakeUintegerChecker<uint8_t> ())
+    .AddAttribute ("FlushOnClose", "Determines the connection close behavior",
+                   BooleanValue (true),
+                   MakeBooleanAccessor (&QuicSocketBase::m_flushOnClose),
+                   MakeBooleanChecker ())
+    .AddAttribute ("kMaxTLPs",
+                   "Maximum number of tail loss probes before an RTO fires",
+                   UintegerValue (2),
+                   MakeUintegerAccessor (&QuicSocketState::m_kMaxTLPs),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddAttribute ("kReorderingThreshold", "Maximum reordering in packet number space before FACK style loss detection considers a packet lost",
+                   UintegerValue (3),
+                   MakeUintegerAccessor (&QuicSocketState::m_kReorderingThreshold),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddAttribute ("kTimeReorderingFraction", "Maximum reordering in time space before time based loss detection considers a packet lost",
+                   DoubleValue (9 / 8),
+                   MakeDoubleAccessor (&QuicSocketState::m_kTimeReorderingFraction),
+                   MakeDoubleChecker<double> (0))
+    .AddAttribute ("kUsingTimeLossDetection", "Whether time based loss detection is in use", 
+                   BooleanValue (false),
+                   MakeBooleanAccessor (&QuicSocketState::m_kUsingTimeLossDetection),
+                   MakeBooleanChecker ())
+    .AddAttribute ("kMinTLPTimeout", "Minimum time in the future a tail loss probe alarm may be set for",
+                   TimeValue (MilliSeconds (10)),
+                   MakeTimeAccessor (&QuicSocketState::m_kMinTLPTimeout),
+                   MakeTimeChecker ())
+    .AddAttribute ("kMinRTOTimeout", "Minimum time in the future an RTO alarm may be set for",
+                   TimeValue (MilliSeconds (200)),
+                   MakeTimeAccessor (&QuicSocketState::m_kMinRTOTimeout),
+                   MakeTimeChecker ())
+    .AddAttribute ("kDelayedAckTimeout", "The length of the peer's delayed ACK timer",
+                   TimeValue (MilliSeconds (25)),
+                   MakeTimeAccessor (&QuicSocketState::m_kDelayedAckTimeout),
+                   MakeTimeChecker ())
+    .AddAttribute ("kDefaultInitialRtt", "The default RTT used before an RTT sample is taken",
+                   TimeValue (MilliSeconds (100)),
+                   MakeTimeAccessor (&QuicSocketState::m_kDefaultInitialRtt),
+                   MakeTimeChecker ())
+    .AddAttribute ("InitialSlowStartThreshold",
+                   "QUIC initial slow start threshold (bytes)",
+                   UintegerValue (INT32_MAX),
+                   MakeUintegerAccessor (&QuicSocketBase::GetInitialSSThresh,
+                                         &QuicSocketBase::SetInitialSSThresh),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddAttribute ("InitialPacketSize",
+                   "QUIC initial slow start threshold (bytes)",
+                   UintegerValue (1200),
+                   MakeUintegerAccessor (&QuicSocketBase::GetInitialPacketSize,
+                                         &QuicSocketBase::SetInitialPacketSize),
+                   MakeUintegerChecker<uint32_t> (
+                     QuicSocketBase::MIN_INITIAL_PACKET_SIZE, UINT32_MAX))
+    .AddAttribute ("SchedulingPolicy",
+                   "Scheduling policy among streams",
+                   TypeIdValue (QuicSocketTxScheduler::GetTypeId ()),
+                   MakeTypeIdAccessor (&QuicSocketBase::m_schedulingTypeId),
+                   MakeTypeIdChecker ())
+    .AddAttribute ("DefaultLatency",
+                   "Default latency bound for the EDF scheduler",
+                   TimeValue (MilliSeconds (100)),
+                   MakeTimeAccessor (&QuicSocketBase::m_defaultLatency),
+                   MakeTimeChecker ())
+    .AddAttribute ("LegacyCongestionControl", "When true, use TCP implementations for the congestion control",
+                   BooleanValue (false),
+                   MakeBooleanAccessor (&QuicSocketBase::m_quicCongestionControlLegacy),
+                   MakeBooleanChecker ())
+    .AddAttribute ("TCB",
+                   "The connection's QuicSocketState",
+                   PointerValue (),
+                   MakePointerAccessor (&QuicSocketBase::m_tcb),
+                   MakePointerChecker<QuicSocketState> ())
+    // .AddTraceSource ("RTO", "Retransmission timeout",
+    //                  MakeTraceSourceAccessor (&QuicSocketBase::m_rto),
+    //                  "ns3::Time::TracedValueCallback").AddTraceSource (
+    //     "IdleTO", "Idle timeout",
+    //     MakeTraceSourceAccessor (&QuicSocketBase::m_idleTimeout),
+    //     "ns3::Time::TracedValueCallback").AddTraceSource (
+    //     "DrainingPeriodTO", "Draining Period timeout",
+    //     MakeTraceSourceAccessor (&QuicSocketBase::m_drainingPeriodTimeout),
+    //     "ns3::Time::TracedValueCallback");
+    .AddTraceSource ("RTO",
+                     "Retransmission timeout",
+                     MakeTraceSourceAccessor (&QuicSocketBase::m_rto),
+                     "ns3::Time::TracedValueCallback")
+    .AddTraceSource ("RTT",
+                     "Last RTT sample",
+                     MakeTraceSourceAccessor (&QuicSocketBase::m_lastRtt),
+                     "ns3::Time::TracedValueCallback")
+    .AddTraceSource ("NextTxSequence",
+                     "Next sequence number to send (SND.NXT)",
+                     MakeTraceSourceAccessor (&QuicSocketBase::m_nextTxSequenceTrace),
+                     "ns3::SequenceNumber32TracedValueCallback")
+    .AddTraceSource ("HighestSequence",
+                     "Highest sequence number ever sent in socket's life time",
+                     MakeTraceSourceAccessor (&QuicSocketBase::m_highTxMarkTrace),
+                     "ns3::SequenceNumber32TracedValueCallback")
+    // .AddTraceSource ("State",
+    //                  "TCP state",
+    //                  MakeTraceSourceAccessor (&QuicSocketBase::m_state),
+    //                  "ns3::TcpStatesTracedValueCallback")
+    .AddTraceSource ("CongState",
+                     "TCP Congestion machine state",
+                     MakeTraceSourceAccessor (&QuicSocketBase::m_congStateTrace),
+                     "ns3::TcpSocketState::TcpCongStatesTracedValueCallback")
+    // .AddTraceSource ("AdvWND",
+    //                  "Advertised Window Size",
+    //                  MakeTraceSourceAccessor (&QuicSocketBase::m_advWnd),
+    //                  "ns3::TracedValueCallback::Uint32")
+    // .AddTraceSource ("RWND",
+    //                  "Remote side's flow control window",
+    //                  MakeTraceSourceAccessor (&QuicSocketBase::m_rWnd),
+    //                  "ns3::TracedValueCallback::Uint32")
+    // .AddTraceSource ("BytesInFlight",
+    //                  "Socket estimation of bytes in flight",
+    //                  MakeTraceSourceAccessor (&QuicSocketBase::m_bytesInFlight),
+    //                  "ns3::TracedValueCallback::Uint32")
+    // .AddTraceSource ("HighestRxSequence",
+    //                  "Highest sequence number received from peer",
+    //                  MakeTraceSourceAccessor (&QuicSocketBase::m_highRxMark),
+    //                  "ns3::SequenceNumber32TracedValueCallback")
+    // .AddTraceSource ("HighestRxAck",
+    //                  "Highest ack received from peer",
+    //                  MakeTraceSourceAccessor (&QuicSocketBase::m_highRxAckMark),
+    //                  "ns3::SequenceNumber32TracedValueCallback")
+    .AddTraceSource ("CongestionWindow",
+                     "The QUIC connection's congestion window",
+                     MakeTraceSourceAccessor (&QuicSocketBase::m_cWndTrace),
+                     "ns3::TracedValueCallback::Uint32")
+    .AddTraceSource ("SlowStartThreshold",
+                     "TCP slow start threshold (bytes)",
+                     MakeTraceSourceAccessor (&QuicSocketBase::m_ssThTrace),
+                     "ns3::TracedValueCallback::Uint32")
+    .AddTraceSource ("Tx",
+                     "Send QUIC packet to UDP protocol",
+                     MakeTraceSourceAccessor (&QuicSocketBase::m_txTrace),
+                     "ns3::QuicSocketBase::QuicTxRxTracedCallback")
+    .AddTraceSource ("Rx",
+                     "Receive QUIC packet from UDP protocol",
+                     MakeTraceSourceAccessor (&QuicSocketBase::m_rxTrace),
+                     "ns3::QuicSocketBase::QuicTxRxTracedCallback")
+    .AddTraceSource ("PacketsLost",
+                     "Classify packets as lost",
+                     MakeTraceSourceAccessor (&QuicSocketBase::m_pxLstTrace),
+                     "ns3::QuicSocketBase::QuicPxLstTracedCallback")
+  ;
+  return tid;
+}
+
+TypeId
+QuicSocketState::GetTypeId (void)
+{
+  static TypeId tid =
+    TypeId ("ns3::QuicSocketState")
+    .SetParent<TcpSocketState> ()
+    .SetGroupName ("Internet")
+    .AddAttribute ("kMaxTLPs",
+                   "Maximum number of tail loss probes before an RTO fires",
+                   UintegerValue (2),
+                   MakeUintegerAccessor (&QuicSocketState::m_kMaxTLPs),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddAttribute ("kReorderingThreshold",
+                   "Maximum reordering in packet number space before FACK style loss detection considers a packet lost",
+                   UintegerValue (3),
+                   MakeUintegerAccessor (&QuicSocketState::m_kReorderingThreshold),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddAttribute ("kTimeReorderingFraction",
+                   "Maximum reordering in time space before time based loss detection considers a packet lost",
+                   DoubleValue (9 / 8),
+                   MakeDoubleAccessor (&QuicSocketState::m_kTimeReorderingFraction),
+                   MakeDoubleChecker<double> (0))
+    .AddAttribute ("kUsingTimeLossDetection",
+                   "Whether time based loss detection is in use", BooleanValue (false),
+                   MakeBooleanAccessor (&QuicSocketState::m_kUsingTimeLossDetection),
+                   MakeBooleanChecker ())
+    .AddAttribute ("kMinTLPTimeout",
+                   "Minimum time in the future a tail loss probe alarm may be set for",
+                   TimeValue (MilliSeconds (10)),
+                   MakeTimeAccessor (&QuicSocketState::m_kMinTLPTimeout),
+                   MakeTimeChecker ())
+    .AddAttribute ("kMinRTOTimeout",
+                   "Minimum time in the future an RTO alarm may be set for",
+                   TimeValue (MilliSeconds (200)),
+                   MakeTimeAccessor (&QuicSocketState::m_kMinRTOTimeout),
+                   MakeTimeChecker ())
+    .AddAttribute ("kDelayedAckTimeout", "The lenght of the peer's delayed ack timer",
+                   TimeValue (MilliSeconds (25)),
+                   MakeTimeAccessor (&QuicSocketState::m_kDelayedAckTimeout),
+                   MakeTimeChecker ())
+    .AddAttribute ("kDefaultInitialRtt",
+                   "The default RTT used before an RTT sample is taken",
+                   TimeValue (MilliSeconds (100)),
+                   MakeTimeAccessor (&QuicSocketState::m_kDefaultInitialRtt),
+                   MakeTimeChecker ())
+    .AddAttribute ("kMaxPacketsReceivedBeforeAckSend",
+                   "The maximum number of packets without sending an ACK",
+                   UintegerValue (20),
+                   MakeUintegerAccessor (&QuicSocketState::m_kMaxPacketsReceivedBeforeAckSend),
+                   MakeUintegerChecker<uint32_t> ())
+  ;
+  return tid;
+}
+
+QuicSocketState::QuicSocketState ()
+  : TcpSocketState (),
+    m_lossDetectionAlarm (),
+    m_handshakeCount (0),
+    m_tlpCount (
+      0),
+    m_rtoCount (0),
+    m_largestSentBeforeRto (0),
+    m_timeOfLastSentPacket (
+      Seconds (0)),
+    m_largestAckedPacket (0),
+    m_smoothedRtt (Seconds (0)),
+    m_rttVar (0),
+    m_minRtt (
+      Seconds (0)),
+    m_maxAckDelay (Seconds (0)),
+    m_lossTime (Seconds (0)),
+    m_kMinimumWindow (
+      2 * m_segmentSize),
+    m_kLossReductionFactor (0.5),
+    m_endOfRecovery (0),
+    m_kMaxTLPs (
+      2),
+    m_kReorderingThreshold (3),
+    m_kTimeReorderingFraction (9 / 8),
+    m_kUsingTimeLossDetection (
+      false),
+    m_kMinTLPTimeout (MilliSeconds (10)),
+    m_kMinRTOTimeout (
+      MilliSeconds (200)),
+    m_kDelayedAckTimeout (MilliSeconds (25)),
+    m_alarmType (0),
+    m_nextAlarmTrigger (Seconds (100)),
+    m_kDefaultInitialRtt (
+      MilliSeconds (100)),
+    m_kMaxPacketsReceivedBeforeAckSend (20)
+{
+  m_lossDetectionAlarm.Cancel ();
+}
+
+QuicSocketState::QuicSocketState (const QuicSocketState &other)
+  : TcpSocketState (other),
+    m_lossDetectionAlarm (other.m_lossDetectionAlarm),
+    m_handshakeCount (
+      other.m_handshakeCount),
+    m_tlpCount (other.m_tlpCount),
+    m_rtoCount (
+      other.m_rtoCount),
+    m_largestSentBeforeRto (
+      other.m_largestSentBeforeRto),
+    m_timeOfLastSentPacket (
+      other.m_timeOfLastSentPacket),
+    m_largestAckedPacket (
+      other.m_largestAckedPacket),
+    m_smoothedRtt (
+      other.m_smoothedRtt),
+    m_rttVar (other.m_rttVar),
+    m_minRtt (
+      other.m_minRtt),
+    m_maxAckDelay (other.m_maxAckDelay),
+    m_lossTime (
+      other.m_lossTime),
+    m_kMinimumWindow (other.m_kMinimumWindow),
+    m_kLossReductionFactor (
+      other.m_kLossReductionFactor),
+    m_endOfRecovery (
+      other.m_endOfRecovery),
+    m_kMaxTLPs (other.m_kMaxTLPs),
+    m_kReorderingThreshold (
+      other.m_kReorderingThreshold),
+    m_kTimeReorderingFraction (
+      other.m_kTimeReorderingFraction),
+    m_kUsingTimeLossDetection (
+      other.m_kUsingTimeLossDetection),
+    m_kMinTLPTimeout (
+      other.m_kMinTLPTimeout),
+    m_kMinRTOTimeout (other.m_kMinRTOTimeout),
+    m_kDelayedAckTimeout (
+      other.m_kDelayedAckTimeout),
+    m_kDefaultInitialRtt (
+      other.m_kDefaultInitialRtt),
+    m_kMaxPacketsReceivedBeforeAckSend (other.m_kMaxPacketsReceivedBeforeAckSend)
+{
+  m_lossDetectionAlarm.Cancel ();
+}
+
+QuicSocketBase::QuicSocketBase (void)
+  : QuicSocket (),
+    m_endPoint (0),
+    m_endPoint6 (0),
+    m_node (0),
+    m_quicl4 (0),
+    m_quicl5 (0),
+    m_socketState (
+      IDLE),
+    m_transportErrorCode (
+      QuicSubheader::TransportErrorCodes_t::NO_ERROR),
+    m_serverBusy (false),
+    m_errno (
+      ERROR_NOTERROR),
+    m_connected (false),
+    m_connectionId (0),
+    m_vers (
+      QUIC_VERSION_NS3_IMPL),
+    m_keyPhase (QuicHeader::PHASE_ZERO),
+    m_lastReceived (Seconds (0.0)),
+    m_initial_max_stream_data (
+      0),
+    m_max_data (0),
+    m_initial_max_stream_id_bidi (0),
+    m_idleTimeout (
+      Seconds (300.0)),
+    m_omit_connection_id (false),
+    m_ack_delay_exponent (
+      3),
+    m_initial_max_stream_id_uni (0),
+    m_maxTrackedGaps (20),
+    m_receivedTransportParameters (
+      false),
+    m_couldContainTransportParameters (true),
+    m_rto (
+      Seconds (30.0)),
+    m_drainingPeriodTimeout (Seconds (90.0)),
+    m_closeOnEmpty (false),
+    m_congestionControl (
+      0),
+    m_lastRtt (Seconds (0.0)),
+    m_queue_ack (false),
+    m_numPacketsReceivedSinceLastAckSent (0),
+    m_pacingTimer (Timer::REMOVE_ON_DESTROY)
+{
+  NS_LOG_FUNCTION (this);
+
+
+  m_rxBuffer = CreateObject<QuicSocketRxBuffer> ();
+  m_txBuffer = CreateObject<QuicSocketTxBuffer> ();
+  m_receivedPacketNumbers = std::vector<SequenceNumber32> ();
+
+  m_tcb = CreateObject<QuicSocketState> ();
+  m_tcb->m_cWnd = m_tcb->m_initialCWnd;
+  m_tcb->m_ssThresh = m_tcb->m_initialSsThresh;
+  m_quicCongestionControlLegacy = false;
+  m_txBuffer->SetQuicSocketState (m_tcb);
+
+  m_tcb->m_pacingRate = m_tcb->m_maxPacingRate;
+  m_pacingTimer.SetFunction (&QuicSocketBase::NotifyPacingPerformed, this);
+
+  /**
+   * [IETF DRAFT 10 - Quic Transport: sec 5.7.1]
+   *
+   * The initial number for a packet number MUST be selected randomly from a range between
+   * 0 and 2^32 -1025 (inclusive).
+   * However, in this implementation, we set the sequence number to 0
+   *
+   */
+  if (!m_quicCongestionControlLegacy)
+    {
+      Ptr<UniformRandomVariable> rand =
+        CreateObject<UniformRandomVariable> ();
+      m_tcb->m_nextTxSequence = SequenceNumber32 (0);
+      // (uint32_t) rand->GetValue (0, pow (2, 32) - 1025));
+    }
+
+  // connect callbacks
+  bool ok;
+  ok = m_tcb->TraceConnectWithoutContext ("CongestionWindow",
+                                          MakeCallback (&QuicSocketBase::UpdateCwnd, this));
+  NS_ASSERT_MSG (ok == true, "Failed connection to CWND trace");
+
+  ok = m_tcb->TraceConnectWithoutContext ("SlowStartThreshold",
+                                          MakeCallback (&QuicSocketBase::UpdateSsThresh, this));
+  NS_ASSERT_MSG (ok == true, "Failed connection to SSTHR trace");
+
+  ok = m_tcb->TraceConnectWithoutContext ("CongState",
+                                          MakeCallback (&QuicSocketBase::UpdateCongState, this));
+  NS_ASSERT_MSG (ok == true, "Failed connection to CongState trace");
+
+  ok = m_tcb->TraceConnectWithoutContext ("NextTxSequence",
+                                          MakeCallback (&QuicSocketBase::UpdateNextTxSequence, this));
+  NS_ASSERT_MSG (ok == true, "Failed connection to TxSequence trace");
+
+  ok = m_tcb->TraceConnectWithoutContext ("HighestSequence",
+                                          MakeCallback (&QuicSocketBase::UpdateHighTxMark, this));
+  NS_ASSERT_MSG (ok == true, "Failed connection to highest sequence trace");
+
+}
+
+QuicSocketBase::QuicSocketBase (const QuicSocketBase& sock)   // Copy constructor
+  : QuicSocket (sock),
+    m_endPoint (0),
+    m_endPoint6 (0),
+    m_node (sock.m_node),
+    m_quicl4 (sock.m_quicl4),
+    m_quicl5 (0),
+    m_socketState (LISTENING),
+    m_transportErrorCode (sock.m_transportErrorCode),
+    m_serverBusy (sock.m_serverBusy),
+    m_errno (sock.m_errno),
+    m_connected (sock.m_connected),
+    m_connectionId (0),
+    m_vers (sock.m_vers),
+    m_keyPhase (QuicHeader::PHASE_ZERO),
+    m_lastReceived (sock.m_lastReceived),
+    m_initial_max_stream_data (sock.m_initial_max_stream_data),
+    m_max_data (sock.m_max_data),
+    m_initial_max_stream_id_bidi (sock.m_initial_max_stream_id_bidi),
+    m_idleTimeout (sock.m_idleTimeout),
+    m_omit_connection_id (sock.m_omit_connection_id),
+    m_ack_delay_exponent (sock.m_ack_delay_exponent),
+    m_initial_max_stream_id_uni (sock.m_initial_max_stream_id_uni),
+    m_maxTrackedGaps (sock.m_maxTrackedGaps),
+    m_receivedTransportParameters (sock.m_receivedTransportParameters),
+    m_couldContainTransportParameters (sock.m_couldContainTransportParameters),
+    m_rto (sock.m_rto),
+    m_drainingPeriodTimeout (sock.m_drainingPeriodTimeout),
+    m_closeOnEmpty (sock.m_closeOnEmpty),
+    m_lastRtt (sock.m_lastRtt),
+    m_quicCongestionControlLegacy (sock.m_quicCongestionControlLegacy),
+    m_queue_ack (sock.m_queue_ack),
+    m_numPacketsReceivedSinceLastAckSent (sock.m_numPacketsReceivedSinceLastAckSent),
+    m_lastMaxData(0),
+    m_maxDataInterval(10),
+    m_pacingTimer (Timer::REMOVE_ON_DESTROY),
+    m_txTrace (sock.m_txTrace),
+    m_rxTrace (sock.m_rxTrace),
+    m_pxLstTrace (sock.m_pxLstTrace)
+{
+  NS_LOG_FUNCTION (this);
+
+//  Callback<void, Ptr< Socket > > vPS = MakeNullCallback<void, Ptr<Socket> > ();
+//  Callback<void, Ptr<Socket>, const Address &> vPSA = MakeNullCallback<void, Ptr<Socket>, const Address &> ();
+//  Callback<void, Ptr<Socket>, uint32_t> vPSUI = MakeNullCallback<void, Ptr<Socket>, uint32_t> ();
+//  SetConnectCallback (vPS, vPS);
+//  SetDataSentCallback (vPSUI);
+//  SetSendCallback (vPSUI);
+//  SetRecvCallback (vPS);
+  m_txBuffer = CopyObject (sock.m_txBuffer);
+  m_rxBuffer = CopyObject (sock.m_rxBuffer);
+  m_receivedPacketNumbers = std::vector<SequenceNumber32> ();
+
+  m_tcb = CopyObject (sock.m_tcb);
+  if (sock.m_congestionControl)
+    {
+      m_congestionControl = sock.m_congestionControl->Fork ();
+    }
+  m_quicCongestionControlLegacy = sock.m_quicCongestionControlLegacy;
+  m_txBuffer->SetQuicSocketState (m_tcb);
+
+  m_tcb->m_pacingRate = m_tcb->m_maxPacingRate;
+  m_pacingTimer.SetFunction (&QuicSocketBase::NotifyPacingPerformed, this);
+
+  /**
+   * [IETF DRAFT 10 - Quic Transport: sec 5.7.1]
+   *
+   * The initial value for a packet number MUST be selected randomly from a range between
+   * 0 and 2^32 -1025 (inclusive).
+   *
+   */
+  if (!m_quicCongestionControlLegacy)
+    {
+      Ptr<UniformRandomVariable> rand =
+        CreateObject<UniformRandomVariable> ();
+      m_tcb->m_nextTxSequence = SequenceNumber32 (0);
+      // (uint32_t) rand->GetValue (0, pow (2, 32) - 1025));
+    }
+}
+
+QuicSocketBase::~QuicSocketBase (void)
+{
+  NS_LOG_FUNCTION (this);
+
+  m_node = 0;
+  if (m_endPoint != nullptr)
+    {
+      NS_ASSERT (m_quicl4 != nullptr);
+      NS_ASSERT (m_endPoint != nullptr);
+      m_quicl4->DeAllocate (m_endPoint);
+      NS_ASSERT (m_endPoint == nullptr);
+    }
+  if (m_endPoint6 != nullptr)
+    {
+      NS_ASSERT (m_quicl4 != nullptr);
+      NS_ASSERT (m_endPoint6 != nullptr);
+      m_quicl4->DeAllocate (m_endPoint6);
+      NS_ASSERT (m_endPoint6 == nullptr);
+    }
+  m_quicl4 = 0;
+  //CancelAllTimers ();
+  m_pacingTimer.Cancel ();
+}
+
+/* Inherit from Socket class: Bind socket to an end-point in QuicL4Protocol */
+int
+QuicSocketBase::Bind (void)
+{
+  //NS_LOG_FUNCTION (this);
+  m_endPoint = m_quicl4->Allocate ();
+  if (0 == m_endPoint)
+    {
+      m_errno = ERROR_ADDRNOTAVAIL;
+      return -1;
+    }
+
+  m_quicl4->UdpBind (this);
+  return SetupCallback ();
+}
+
+int
+QuicSocketBase::Bind (const Address &address)
+{
+  NS_LOG_FUNCTION (this);
+  if (InetSocketAddress::IsMatchingType (address))
+    {
+      InetSocketAddress transport = InetSocketAddress::ConvertFrom (address);
+      Ipv4Address ipv4 = transport.GetIpv4 ();
+      uint16_t port = transport.GetPort ();
+      //SetIpTos (transport.GetTos ());
+      if (ipv4 == Ipv4Address::GetAny () && port == 0)
+        {
+          m_endPoint = m_quicl4->Allocate ();
+        }
+      else if (ipv4 == Ipv4Address::GetAny () && port != 0)
+        {
+          m_endPoint = m_quicl4->Allocate (GetBoundNetDevice (), port);
+        }
+      else if (ipv4 != Ipv4Address::GetAny () && port == 0)
+        {
+          m_endPoint = m_quicl4->Allocate (ipv4);
+        }
+      else if (ipv4 != Ipv4Address::GetAny () && port != 0)
+        {
+          m_endPoint = m_quicl4->Allocate (GetBoundNetDevice (), ipv4, port);
+        }
+      if (0 == m_endPoint)
+        {
+          m_errno = port ? ERROR_ADDRINUSE : ERROR_ADDRNOTAVAIL;
+          return -1;
+        }
+    }
+  else if (Inet6SocketAddress::IsMatchingType (address))
+    {
+      Inet6SocketAddress transport = Inet6SocketAddress::ConvertFrom (address);
+      Ipv6Address ipv6 = transport.GetIpv6 ();
+      uint16_t port = transport.GetPort ();
+      if (ipv6 == Ipv6Address::GetAny () && port == 0)
+        {
+          m_endPoint6 = m_quicl4->Allocate6 ();
+        }
+      else if (ipv6 == Ipv6Address::GetAny () && port != 0)
+        {
+          m_endPoint6 = m_quicl4->Allocate6 (GetBoundNetDevice (), port);
+        }
+      else if (ipv6 != Ipv6Address::GetAny () && port == 0)
+        {
+          m_endPoint6 = m_quicl4->Allocate6 (ipv6);
+        }
+      else if (ipv6 != Ipv6Address::GetAny () && port != 0)
+        {
+          m_endPoint6 = m_quicl4->Allocate6 (GetBoundNetDevice (), ipv6, port);
+        }
+      if (0 == m_endPoint6)
+        {
+          m_errno = port ? ERROR_ADDRINUSE : ERROR_ADDRNOTAVAIL;
+          return -1;
+        }
+    }
+  else
+    {
+      m_errno = ERROR_INVAL;
+      return -1;
+    }
+
+  m_quicl4->UdpBind (address, this);
+  return SetupCallback ();
+}
+
+int
+QuicSocketBase::Bind6 (void)
+{
+  NS_LOG_FUNCTION (this);
+  m_endPoint6 = m_quicl4->Allocate6 ();
+  if (0 == m_endPoint6)
+    {
+      m_errno = ERROR_ADDRNOTAVAIL;
+      return -1;
+    }
+
+  m_quicl4->UdpBind6 (this);
+  return SetupCallback ();
+}
+
+/* Inherit from Socket class: Bind this socket to the specified NetDevice */
+void
+QuicSocketBase::BindToNetDevice (Ptr<NetDevice> netdevice)
+{
+  NS_LOG_FUNCTION (this);
+
+  m_quicl4->BindToNetDevice (this, netdevice);
+}
+
+int
+QuicSocketBase::Listen (void)
+{
+  NS_LOG_FUNCTION (this);
+  if (m_socketType == NONE)
+    {
+      m_socketType = SERVER;
+    }
+
+  if (m_socketState != IDLE and m_socketState != QuicSocket::CONNECTING_SVR)
+    {
+      //m_errno = ERROR_INVAL;
+      return -1;
+    }
+
+  bool res = m_quicl4->SetListener (this);
+  NS_ASSERT (res);
+
+  SetState (LISTENING);
+
+  return 0;
+}
+
+int
+QuicSocketBase::Connect (const Address & address)
+{
+  NS_LOG_FUNCTION (this);
+
+  if (InetSocketAddress::IsMatchingType (address))
+    {
+      if (m_endPoint == nullptr)
+        {
+          if (Bind () == -1)
+            {
+              NS_ASSERT (m_endPoint == nullptr);
+              return -1; // Bind() failed
+            }
+          NS_ASSERT (m_endPoint != nullptr);
+        }
+      InetSocketAddress transport = InetSocketAddress::ConvertFrom (address);
+      m_endPoint->SetPeer (transport.GetIpv4 (), transport.GetPort ());
+      //SetIpTos (transport.GetTos ());
+      m_endPoint6 = nullptr;
+
+      // Get the appropriate local address and port number from the routing protocol and set up endpoint
+      /*if (SetupEndpoint () != 0)
+        {
+          NS_LOG_ERROR ("Route to destination does not exist ?!");
+          return -1;
+        }*/
+    }
+  else if (Inet6SocketAddress::IsMatchingType (address))
+    {
+      // If we are operating on a v4-mapped address, translate the address to
+      // a v4 address and re-call this function
+      Inet6SocketAddress transport = Inet6SocketAddress::ConvertFrom (address);
+      Ipv6Address v6Addr = transport.GetIpv6 ();
+      if (v6Addr.IsIpv4MappedAddress () == true)
+        {
+          Ipv4Address v4Addr = v6Addr.GetIpv4MappedAddress ();
+          return Connect (InetSocketAddress (v4Addr, transport.GetPort ()));
+        }
+
+      if (m_endPoint6 == nullptr)
+        {
+          if (Bind6 () == -1)
+            {
+              NS_ASSERT (m_endPoint6 == nullptr);
+              return -1; // Bind() failed
+            }
+          NS_ASSERT (m_endPoint6 != nullptr);
+        }
+      m_endPoint6->SetPeer (v6Addr, transport.GetPort ());
+      m_endPoint = nullptr;
+
+      // Get the appropriate local address and port number from the routing protocol and set up endpoint
+      /*if (SetupEndpoint6 () != 0)
+        {
+          NS_LOG_ERROR ("Route to destination does not exist ?!");
+          return -1;
+        }*/
+    }
+  else
+    {
+      m_errno = ERROR_INVAL;
+      return -1;
+    }
+
+
+  if (m_socketType == NONE)
+    {
+      m_socketType = CLIENT;
+    }
+
+  if (m_quicl5 == 0)
+    {
+      m_quicl5 = CreateStreamController ();
+      m_quicl5->CreateStream (QuicStream::BIDIRECTIONAL, 0);   // Create Stream 0 (necessary)
+    }
+
+  // check if the address is in a list of known and authenticated addresses
+  auto result = std::find (
+    m_quicl4->GetAuthAddresses ().begin (), m_quicl4->GetAuthAddresses ().end (),
+    InetSocketAddress::ConvertFrom (address).GetIpv4 ());
+
+  if (result != m_quicl4->GetAuthAddresses ().end ()
+      || m_quicl4->Is0RTTHandshakeAllowed ())
+    {
+      NS_LOG_INFO (
+        "CONNECTION AUTHENTICATED Client found the Server " << InetSocketAddress::ConvertFrom (address).GetIpv4 () << " port " << InetSocketAddress::ConvertFrom (address).GetPort () << " in authenticated list");
+      // connect the underlying UDP socket
+      m_quicl4->UdpConnect (address, this);
+      return DoFastConnect ();
+    }
+  else
+    {
+      NS_LOG_INFO (
+        "CONNECTION not authenticated: cannot perform 0-RTT Handshake");
+      // connect the underlying UDP socket
+      m_quicl4->UdpConnect (address, this);
+      return DoConnect ();
+    }
+
+}
+
+/* Inherit from Socket class: Invoked by upper-layer application */
+int
+QuicSocketBase::Send (Ptr<Packet> p, uint32_t flags)
+{
+  NS_LOG_FUNCTION (this << flags);
+  int data = 0;
+
+  if (m_drainingPeriodEvent.IsRunning ())
+    {
+      NS_LOG_INFO ("Socket in draining state, cannot send packets");
+      return 0;
+    }
+
+  if (flags == 0)
+    {
+      data = Send (p);
+    }
+  else
+    {
+      data = m_quicl5->DispatchSend (p, flags);
+    }
+  return data;
+}
+
+int
+QuicSocketBase::Send (Ptr<Packet> p)
+{
+  NS_LOG_FUNCTION (this);
+
+  if (m_drainingPeriodEvent.IsRunning ())
+    {
+      NS_LOG_INFO ("Socket in draining state, cannot send packets");
+      return 0;
+    }
+
+  int data = m_quicl5->DispatchSend (p);
+
+  return data;
+}
+
+int
+QuicSocketBase::AppendingTx (Ptr<Packet> frame)
+{
+  NS_LOG_FUNCTION (this);
+
+  if (m_socketState != IDLE)
+    {
+      bool done = m_txBuffer->Add (frame);
+      if (!done)
+        {
+          NS_LOG_INFO ("Exceeding Socket Tx Buffer Size");
+          m_errno = ERROR_MSGSIZE;
+        }
+      else
+        {
+          uint32_t win = AvailableWindow ();
+          NS_LOG_DEBUG (
+            "Added packet to the buffer - txBufSize = " << m_txBuffer->AppSize ()
+                                                        << " AvailableWindow = " << win << " state " << QuicStateName[m_socketState]);
+        }
+
+
+      if (m_socketState != IDLE)
+        {
+          if (!m_sendPendingDataEvent.IsRunning ())
+            {
+              m_sendPendingDataEvent = Simulator::Schedule (
+                TimeStep (1), &QuicSocketBase::SendPendingData, this,
+                m_connected);
+            }
+        }
+      if (done)
+        {
+          return frame->GetSize ();
+        }
+      return -1;
+    }
+  else
+    {
+
+      NS_ABORT_MSG ("Sending in state" << QuicStateName[m_socketState]);
+      return -1;
+    }
+}
+
+uint32_t
+QuicSocketBase::SendPendingData (bool withAck)
+{
+  NS_LOG_FUNCTION (this << withAck);
+
+  if (m_txBuffer->AppSize () == 0)
+    {
+      if (m_closeOnEmpty)
+        {
+          m_drainingPeriodEvent.Cancel ();
+          SendConnectionClosePacket (0, "Scheduled connection close - no error");
+        }
+      NS_LOG_INFO ("Nothing to send");
+      return false;
+    }
+
+  uint32_t nPacketsSent = 0;
+
+  // prioritize stream 0
+  while (m_txBuffer->GetNumFrameStream0InBuffer () > 0)
+    {
+      // check pacing timer
+      if (m_tcb->m_pacing)
+        {
+          NS_LOG_DEBUG ("Pacing is enabled");
+          if (m_pacingTimer.IsRunning ())
+            {
+              NS_LOG_INFO ("Skipping Packet due to pacing - for " << m_pacingTimer.GetDelayLeft ());
+              break;
+            }
+          NS_LOG_DEBUG ("Pacing Timer is not running");
+        }
+
+      NS_LOG_DEBUG ("Send a frame for stream 0");
+      SequenceNumber32 next = ++m_tcb->m_nextTxSequence;
+      NS_LOG_INFO ("SN " << m_tcb->m_nextTxSequence);
+
+      uint32_t win = AvailableWindow ();
+      uint32_t connWin = ConnectionWindow ();
+      uint32_t bytesInFlight = BytesInFlight ();
+      NS_LOG_DEBUG (
+        "BEFORE stream 0 Available Window " << win
+                                            << " Connection RWnd " << connWin
+                                            << " BytesInFlight " << bytesInFlight
+                                            << " BufferedSize " << m_txBuffer->AppSize ()
+                                            << " MaxPacketSize " << GetSegSize ());
+
+      // uint32_t sz =
+      SendDataPacket (next, 0, m_queue_ack);
+
+      win = AvailableWindow ();
+      connWin = ConnectionWindow ();
+      bytesInFlight = BytesInFlight ();
+      NS_LOG_DEBUG (
+        "AFTER stream 0 Available Window " << win
+                                           << " Connection RWnd " << connWin
+                                           << " BytesInFlight " << bytesInFlight
+                                           << " BufferedSize " << m_txBuffer->AppSize ()
+                                           << " MaxPacketSize " << GetSegSize ());
+
+      ++nPacketsSent;
+    }
+  uint32_t availableWindow = AvailableWindow ();
+
+  while (availableWindow > 0 and m_txBuffer->AppSize () > 0)
+    {
+      // check draining period
+      if (m_drainingPeriodEvent.IsRunning ())
+        {
+          NS_LOG_INFO ("Draining period: no packets can be sent");
+          return false;
+        }
+
+      // check pacing timer
+      if (m_tcb->m_pacing)
+        {
+          NS_LOG_DEBUG ("Pacing is enabled");
+          if (m_pacingTimer.IsRunning ())
+            {
+              NS_LOG_INFO ("Skipping Packet due to pacing - for " << m_pacingTimer.GetDelayLeft ());
+              break;
+            }
+          NS_LOG_DEBUG ("Pacing Timer is not running");
+        }
+
+      // check the state of the socket!
+      if (m_socketState == CONNECTING_CLT || m_socketState == CONNECTING_SVR)
+        {
+          NS_LOG_INFO ("CONNECTING_CLT and CONNECTING_SVR state; no data to transmit");
+          break;
+        }
+
+      uint32_t availableData = m_txBuffer->AppSize ();
+
+      if (availableData < availableWindow and !m_closeOnEmpty)
+        {
+          NS_LOG_INFO ("Ask the app for more data before trying to send");
+          NotifySend (GetTxAvailable ());
+        }
+
+      if (availableWindow < GetSegSize () and availableData > availableWindow and !m_closeOnEmpty)
+        {
+          NS_LOG_INFO ("Preventing Silly Window Syndrome. Wait to Send.");
+          break;
+        }
+
+      SequenceNumber32 next = ++m_tcb->m_nextTxSequence;
+
+      uint32_t s = std::min (availableWindow, GetSegSize ());
+
+      uint32_t win = AvailableWindow ();
+      uint32_t connWin = ConnectionWindow ();
+      uint32_t bytesInFlight = BytesInFlight ();
+      NS_LOG_DEBUG (
+        "BEFORE Available Window " << win
+                                   << " Connection RWnd " << connWin
+                                   << " BytesInFlight " << bytesInFlight
+                                   << " BufferedSize " << m_txBuffer->AppSize ()
+                                   << " MaxPacketSize " << GetSegSize ());
+
+      // uint32_t sz =
+      SendDataPacket (next, s, withAck);
+
+      win = AvailableWindow ();
+      connWin = ConnectionWindow ();
+      bytesInFlight = BytesInFlight ();
+      NS_LOG_DEBUG (
+        "AFTER Available Window " << win
+                                  << " Connection RWnd " << connWin
+                                  << " BytesInFlight " << bytesInFlight
+                                  << " BufferedSize " << m_txBuffer->AppSize ()
+                                  << " MaxPacketSize " << GetSegSize ());
+
+      ++nPacketsSent;
+
+      availableWindow = AvailableWindow ();
+    }
+
+  if (nPacketsSent > 0)
+    {
+      NS_LOG_INFO ("SendPendingData sent " << nPacketsSent << " packets");
+    }
+  else
+    {
+      NS_LOG_INFO ("SendPendingData no packets sent");
+    }
+
+  return nPacketsSent;
+}
+
+void
+QuicSocketBase::SetSegSize (uint32_t size)
+{
+  NS_LOG_FUNCTION (this << size);
+  NS_ABORT_MSG_UNLESS (m_socketState == IDLE || m_tcb->m_segmentSize == size,
+                       "Cannot change segment size dynamically.");
+
+  m_tcb->m_segmentSize = size;
+  // Update minimum congestion window
+  m_tcb->m_initialCWnd = 2 * size;
+  m_tcb->m_kMinimumWindow = 2 * size;
+}
+
+uint32_t
+QuicSocketBase::GetSegSize (void) const
+{
+  return m_tcb->m_segmentSize;
+}
+
+void
+QuicSocketBase::MaybeQueueAck ()
+{
+  NS_LOG_FUNCTION (this);
+  ++m_numPacketsReceivedSinceLastAckSent;
+  NS_LOG_INFO ("m_numPacketsReceivedSinceLastAckSent " << m_numPacketsReceivedSinceLastAckSent << " m_queue_ack " << m_queue_ack);
+
+  // handle the list of m_receivedPacketNumbers
+  if (m_receivedPacketNumbers.empty ())
+    {
+      NS_LOG_INFO ("Nothing to ACK");
+      m_queue_ack = false;
+      return;
+    }
+
+  // if(m_txBuffer->AppSize() > 0)
+  // {
+  //   NS_LOG_INFO("There are packets to be transmitted in the TX buffer, piggyback the ACK");
+  //   return;
+  // }
+
+  if (m_numPacketsReceivedSinceLastAckSent > m_tcb->m_kMaxPacketsReceivedBeforeAckSend)
+    {
+      NS_LOG_INFO ("immediately send ACK - max number of unacked packets reached");
+      m_queue_ack = true;
+      if (!m_sendAckEvent.IsRunning ())
+        {
+          m_sendAckEvent = Simulator::Schedule (TimeStep (1), &QuicSocketBase::SendAck, this);
+        }
+    }
+
+  if (HasReceivedMissing ())  // immediately queue the ACK
+    {
+      NS_LOG_INFO ("immediately send ACK - some packets have been received out of order");
+      m_queue_ack = true;
+      if (!m_sendAckEvent.IsRunning ())
+        {
+          m_sendAckEvent = Simulator::Schedule (TimeStep (1), &QuicSocketBase::SendAck, this);
+        }
+    }
+
+  if (!m_queue_ack)
+    {
+      if (m_numPacketsReceivedSinceLastAckSent > 2) // QUIC decimation option
+        {
+          NS_LOG_INFO ("immediately send ACK - more than 2 packets received");
+          m_queue_ack = true;
+          if (!m_sendAckEvent.IsRunning ())
+            {
+              m_sendAckEvent = Simulator::Schedule (TimeStep (1), &QuicSocketBase::SendAck, this);
+            }
+        }
+      else
+        {
+          if (!m_delAckEvent.IsRunning ())
+            {
+              NS_LOG_INFO ("Schedule a delayed ACK");
+              // schedule a delayed ACK
+              m_delAckEvent = Simulator::Schedule (
+                m_tcb->m_kDelayedAckTimeout, &QuicSocketBase::SendAck, this);
+            }
+          else
+            {
+              NS_LOG_INFO ("Delayed ACK timer already running");
+            }
+        }
+    }
+}
+
+bool
+QuicSocketBase::HasReceivedMissing ()
+{
+  // TODO implement this
+  return false;
+}
+
+void
+QuicSocketBase::SendAck ()
+{
+  NS_LOG_FUNCTION (this);
+  m_delAckEvent.Cancel ();
+  m_sendAckEvent.Cancel ();
+  m_queue_ack = false;
+
+  m_numPacketsReceivedSinceLastAckSent = 0;
+
+  Ptr<Packet> p = Create<Packet> ();
+  p->AddAtEnd (OnSendingAckFrame ());
+  SequenceNumber32 packetNumber = ++m_tcb->m_nextTxSequence;
+
+  QuicHeader head;
+
+  head = QuicHeader::CreateShort (m_connectionId, packetNumber,
+                                  !m_omit_connection_id, m_keyPhase);
+
+  // if (m_socketState == CONNECTING_SVR)
+  //   {
+  //     m_connected = true;
+  //     head = QuicHeader::CreateHandshake (m_connectionId, m_vers,
+  //                                         packetNumber);
+  //   }
+  // else if (m_socketState == CONNECTING_CLT)
+  //   {
+  //     head = QuicHeader::CreateInitial (m_connectionId, m_vers, packetNumber);
+  //   }
+  // else if (m_socketState == OPEN)
+  //   {
+  //     if (!m_connected and !m_quicl4->Is0RTTHandshakeAllowed ())
+  //       {
+  //         m_connected = true;
+  //         head = QuicHeader::CreateHandshake (m_connectionId, m_vers,
+  //                                             packetNumber);
+  //       }
+  //     else if (!m_connected and m_quicl4->Is0RTTHandshakeAllowed ())
+  //       {
+  //         head = QuicHeader::Create0RTT (m_connectionId, m_vers,
+  //                                        packetNumber);
+  //         m_connected = true;
+  //         m_keyPhase == QuicHeader::PHASE_ONE ? m_keyPhase =
+  //                                                   QuicHeader::PHASE_ZERO :
+  //                                               m_keyPhase =
+  //                                                   QuicHeader::PHASE_ONE;
+  //       }
+  //     else
+  //       {
+  //         head = QuicHeader::CreateShort (m_connectionId, packetNumber,
+  //                                         !m_omit_connection_id, m_keyPhase);
+  //       }
+  //   }
+  // else
+  //   {
+  //     NS_FATAL_ERROR("ACK not possible in this state");
+  //   }
+
+  m_txBuffer->UpdateAckSent (packetNumber, p->GetSerializedSize () + head.GetSerializedSize ());
+
+  NS_LOG_INFO ("Send ACK packet with header " << head);
+  m_txTrace (p, head, this);
+  m_quicl4->SendPacket (this, p, head);
+}
+
+uint32_t
+QuicSocketBase::SendDataPacket (SequenceNumber32 packetNumber,
+                                uint32_t maxSize, bool withAck)
+{
+  NS_LOG_FUNCTION (this << packetNumber << maxSize << withAck);
+
+  if (!m_drainingPeriodEvent.IsRunning ())
+    {
+      m_idleTimeoutEvent.Cancel ();
+      NS_LOG_LOGIC (
+        this << " SendDataPacket Schedule Close at time " << Simulator::Now ().GetSeconds () << " to expire at time " << (Simulator::Now () + m_idleTimeout.Get ()).GetSeconds ());
+      m_idleTimeoutEvent = Simulator::Schedule (m_idleTimeout,
+                                                &QuicSocketBase::Close, this);
+    }
+  else
+    {
+      NS_LOG_INFO ("Draining period event running");
+      return -1;
+    }
+
+  Ptr<Packet> p;
+
+  if (m_txBuffer->GetNumFrameStream0InBuffer () > 0)
+    {
+      p = m_txBuffer->NextStream0Sequence (packetNumber);
+      NS_ABORT_MSG_IF (p == 0, "No packet for stream 0 in the buffer!");
+    }
+  else
+    {
+      NS_LOG_LOGIC (
+        this << " SendDataPacket - sending packet " << packetNumber.GetValue () << " of size " << maxSize << " at time " << Simulator::Now ().GetSeconds ());
+      m_idleTimeoutEvent = Simulator::Schedule (m_idleTimeout,
+                                                &QuicSocketBase::Close, this);
+      p = m_txBuffer->NextSequence (maxSize, packetNumber);
+    }
+
+  uint32_t sz = p->GetSize ();
+
+  // check whether the connection is appLimited, i.e. not enough data to fill a packet
+  if (sz < maxSize and m_txBuffer->AppSize () == 0 and m_tcb->m_bytesInFlight.Get () < m_tcb->m_cWnd)
+    {
+      NS_LOG_LOGIC ("Connection is Application-Limited. sz = " << sz << " < maxSize = " << maxSize);
+      m_tcb->m_appLimitedUntil = m_tcb->m_delivered + m_tcb->m_bytesInFlight.Get () ? : 1U;
+    }
+
+  // perform pacing
+  if (m_tcb->m_pacing)
+    {
+      NS_LOG_DEBUG ("Pacing is enabled");
+      if (m_pacingTimer.IsExpired ())
+        {
+          NS_LOG_DEBUG ("Current Pacing Rate " << m_tcb->m_pacingRate);
+          NS_LOG_DEBUG ("Pacing Timer is in expired state, activate it. Expires in " <<
+                        m_tcb->m_pacingRate.Get ().CalculateBytesTxTime (sz));
+          m_pacingTimer.Schedule (m_tcb->m_pacingRate.Get ().CalculateBytesTxTime (sz));
+        }
+      else
+        {
+          NS_LOG_INFO ("Pacing Timer is already in running state");
+        }
+    }
+
+  bool isAckOnly = ((sz == 0) & (withAck));
+
+  if (withAck && !m_receivedPacketNumbers.empty ())
+    {
+      p->AddAtEnd (OnSendingAckFrame ());
+    }
+
+
+  QuicHeader head;
+
+  if (m_socketState == CONNECTING_SVR)
+    {
+      m_connected = true;
+      head = QuicHeader::CreateHandshake (m_connectionId, m_vers,
+                                          packetNumber);
+    }
+  else if (m_socketState == CONNECTING_CLT)
+    {
+      head = QuicHeader::CreateInitial (m_connectionId, m_vers, packetNumber);
+    }
+  else if (m_socketState == OPEN)
+    {
+      if (!m_connected and !m_quicl4->Is0RTTHandshakeAllowed ())
+        {
+          m_connected = true;
+          head = QuicHeader::CreateHandshake (m_connectionId, m_vers,
+                                              packetNumber);
+        }
+      else if (!m_connected and m_quicl4->Is0RTTHandshakeAllowed ())
+        {
+          head = QuicHeader::Create0RTT (m_connectionId, m_vers,
+                                         packetNumber);
+          m_connected = true;
+          m_keyPhase == QuicHeader::PHASE_ONE ? m_keyPhase =
+            QuicHeader::PHASE_ZERO :
+            m_keyPhase =
+              QuicHeader::PHASE_ONE;
+        }
+      else
+        {
+          head = QuicHeader::CreateShort (m_connectionId, packetNumber,
+                                          !m_omit_connection_id, m_keyPhase);
+        }
+    }
+  else
+    {
+      // 0 bytes sent - the socket is closed!
+      return 0;
+    }
+
+  NS_LOG_INFO ("SendDataPacket of size " << p->GetSize ());
+  m_txTrace (p, head, this);
+  m_quicl4->SendPacket (this, p, head);
+  NotifyDataSent (sz);
+
+  m_txBuffer->UpdatePacketSent (packetNumber, sz);
+
+  if (!m_quicCongestionControlLegacy)
+    {
+      DynamicCast<QuicCongestionOps> (m_congestionControl)->OnPacketSent (
+        m_tcb, packetNumber, isAckOnly);
+    }
+  if (!isAckOnly)
+    {
+      SetReTxTimeout ();
+    }
+
+  return sz;
+}
+
+void
+QuicSocketBase::SetReTxTimeout ()
+{
+  //TODO check for special packets
+  NS_LOG_FUNCTION (this);
+
+  // Don't arm the alarm if there are no packets with retransmittable data in flight.
+  //if (numRetransmittablePacketsOutstanding == 0)
+  if (false)
+    {
+      m_tcb->m_lossDetectionAlarm.Cancel ();
+      return;
+    }
+
+  if (m_tcb->m_kUsingTimeLossDetection)
+    {
+      m_tcb->m_lossTime = Simulator::Now () + m_tcb->m_kTimeReorderingFraction * m_tcb->m_smoothedRtt;
+    }
+
+  Time alarmDuration;
+  // Handshake packets are outstanding
+  if (m_socketState == CONNECTING_CLT || m_socketState == CONNECTING_SVR)
+    {
+      NS_LOG_INFO ("Connecting, set alarm");
+      // Handshake retransmission alarm.
+      if (m_tcb->m_smoothedRtt == Seconds (0))
+        {
+          alarmDuration = 2 * m_tcb->m_kDefaultInitialRtt;
+        }
+      else
+        {
+          alarmDuration = 2 * m_tcb->m_smoothedRtt;
+        }
+      alarmDuration = std::max (alarmDuration + m_tcb->m_maxAckDelay,
+                                m_tcb->m_kMinTLPTimeout);
+      alarmDuration = alarmDuration * (2 ^ m_tcb->m_handshakeCount);
+      m_tcb->m_alarmType = 0;
+    }
+  else if (m_tcb->m_lossTime != Seconds (0))
+    {
+      NS_LOG_INFO ("Early retransmit timer");
+      // Early retransmit timer or time loss detection.
+      alarmDuration = m_tcb->m_lossTime - m_tcb->m_timeOfLastSentPacket;
+      m_tcb->m_alarmType = 1;
+    }
+  else if (m_tcb->m_tlpCount < m_tcb->m_kMaxTLPs)
+    {
+      NS_LOG_LOGIC ("m_tcb->m_tlpCount < m_tcb->m_kMaxTLPs");
+      // Tail Loss Probe
+      alarmDuration = std::max (
+        (3 / 2) * m_tcb->m_smoothedRtt + m_tcb->m_maxAckDelay,
+        m_tcb->m_kMinTLPTimeout);
+      m_tcb->m_alarmType = 2;
+    }
+  else
+    {
+      NS_LOG_LOGIC ("RTO");
+      alarmDuration = m_tcb->m_smoothedRtt + 4 * m_tcb->m_rttVar
+        + m_tcb->m_maxAckDelay;
+      alarmDuration = std::max (alarmDuration, m_tcb->m_kMinRTOTimeout);
+      alarmDuration = alarmDuration * (2 ^ m_tcb->m_rtoCount);
+      m_tcb->m_alarmType = 3;
+    }
+  NS_LOG_INFO ("Schedule ReTxTimeout at time " << Simulator::Now ().GetSeconds () << " to expire at time " << (Simulator::Now () + alarmDuration).GetSeconds ());
+  NS_LOG_INFO ("Alarm after " << alarmDuration.GetSeconds () << " seconds");
+  m_tcb->m_lossDetectionAlarm = Simulator::Schedule (alarmDuration,
+                                                     &QuicSocketBase::ReTxTimeout, this);
+  m_tcb->m_nextAlarmTrigger = Simulator::Now () + alarmDuration;
+}
+
+void
+QuicSocketBase::DoRetransmit (std::vector<Ptr<QuicSocketTxItem> > lostPackets)
+{
+  NS_LOG_FUNCTION (this);
+  // Get packets to retransmit
+  SequenceNumber32 next = ++m_tcb->m_nextTxSequence;
+  uint32_t toRetx = m_txBuffer->Retransmission (next);
+  NS_LOG_INFO (toRetx << " bytes to retransmit");
+  NS_LOG_DEBUG ("Send the retransmitted frame");
+  uint32_t win = AvailableWindow ();
+  uint32_t connWin = ConnectionWindow ();
+  uint32_t bytesInFlight = BytesInFlight ();
+  NS_LOG_DEBUG (
+    "BEFORE Available Window " << win
+                               << " Connection RWnd " << connWin
+                               << " BytesInFlight " << bytesInFlight
+                               << " BufferedSize " << m_txBuffer->AppSize ()
+                               << " MaxPacketSize " << GetSegSize ());
+
+  // Send the retransmitted data
+  NS_LOG_INFO ("Retransmitted packet, next sequence number " << m_tcb->m_nextTxSequence);
+  SendDataPacket (next, toRetx, m_connected);
+}
+
+void
+QuicSocketBase::ReTxTimeout ()
+{
+  if (Simulator::Now () < m_tcb->m_nextAlarmTrigger)
+    {
+      NS_LOG_INFO ("Canceled alarm");
+      return;
+    }
+  NS_LOG_FUNCTION (this);
+  NS_LOG_INFO ("ReTxTimeout Expired at time " << Simulator::Now ().GetSeconds ());
+  // Handshake packets are outstanding)
+  if (m_tcb->m_alarmType == 0 && (m_socketState == CONNECTING_CLT || m_socketState == CONNECTING_SVR))
+    {
+      // Handshake retransmission alarm.
+      //TODO retransmit handshake packets
+      //RetransmitAllHandshakePackets();
+      m_tcb->m_handshakeCount++;
+    }
+  else if (m_tcb->m_alarmType == 1 && m_tcb->m_lossTime != Seconds (0))
+    {
+      std::vector<Ptr<QuicSocketTxItem> > lostPackets = m_txBuffer->DetectLostPackets ();
+      NS_LOG_INFO ("RTO triggered: early retransmit");
+      // Early retransmit or Time Loss Detection.
+      if (m_quicCongestionControlLegacy)
+        {
+          // TCP early retransmit logic [RFC 5827]: enter recovery (RFC 6675, Sec. 5)
+          if (m_tcb->m_congState != TcpSocketState::CA_RECOVERY)
+            {
+              m_tcb->m_congState = TcpSocketState::CA_RECOVERY;
+              m_tcb->m_cWnd = m_tcb->m_ssThresh;
+              m_tcb->m_endOfRecovery = m_tcb->m_highTxMark;
+              m_congestionControl->CongestionStateSet (
+                m_tcb, TcpSocketState::CA_RECOVERY);
+              m_tcb->m_ssThresh = m_congestionControl->GetSsThresh (
+                m_tcb, BytesInFlight ());
+            }
+        }
+      else
+        {
+          Ptr<QuicCongestionOps> cc = dynamic_cast<QuicCongestionOps*> (&(*m_congestionControl));
+          cc->OnPacketsLost (m_tcb, lostPackets);
+        }
+      // Retransmit all lost packets immediately
+      DoRetransmit (lostPackets);
+    }
+  else if (m_tcb->m_alarmType == 2 && m_tcb->m_tlpCount < m_tcb->m_kMaxTLPs)
+    {
+      // Tail Loss Probe. Send one new data packet, do not retransmit - IETF Draft QUIC Recovery, Sec. 4.3.2
+      SequenceNumber32 next = ++m_tcb->m_nextTxSequence;
+      NS_LOG_INFO ("TLP triggered");
+      uint32_t s = std::min (ConnectionWindow (), GetSegSize ());
+
+      // cancel pacing to send packet immediately
+      m_pacingTimer.Cancel ();
+
+      SendDataPacket (next, s, m_connected);
+      m_tcb->m_tlpCount++;
+    }
+  else if (m_tcb->m_alarmType == 3)
+    {
+      // RTO.
+      if (m_tcb->m_rtoCount == 0)
+        {
+          m_tcb->m_largestSentBeforeRto = m_tcb->m_highTxMark;
+        }
+      // RTO. Send two new data packets, do not retransmit - IETF Draft QUIC Recovery, Sec. 4.3.3
+      NS_LOG_INFO ("RTO triggered");
+      SequenceNumber32 next = ++m_tcb->m_nextTxSequence;
+      uint32_t s = std::min (AvailableWindow (), GetSegSize ());
+
+      // cancel pacing to send packet immediately
+      m_pacingTimer.Cancel ();
+
+      SendDataPacket (next, s, m_connected);
+      next = ++m_tcb->m_nextTxSequence;
+
+      s = std::min (AvailableWindow (), GetSegSize ());
+
+      // cancel pacing, again
+      m_pacingTimer.Cancel ();
+
+      SendDataPacket (next, s, m_connected);
+
+      m_tcb->m_rtoCount++;
+    }
+}
+
+uint32_t
+QuicSocketBase::AvailableWindow () const
+{
+  NS_LOG_FUNCTION (this);
+
+  NS_LOG_DEBUG ("m_max_data " << m_max_data << " m_tcb->m_cWnd.Get () " << m_tcb->m_cWnd.Get ());
+  uint32_t win = std::min (m_max_data, m_tcb->m_cWnd.Get ());   // Number of bytes allowed to be outstanding
+  uint32_t inflight = BytesInFlight ();   // Number of outstanding bytes
+
+  if (inflight > win)
+    {
+      NS_LOG_INFO (
+        "InFlight=" << inflight << ", Win=" << win << " availWin=0");
+      return 0;
+    }
+
+  NS_LOG_INFO (
+    "InFlight=" << inflight << ", Win=" << win << " availWin=" << win - inflight);
+  return win - inflight;
+
+}
+
+uint32_t
+QuicSocketBase::ConnectionWindow () const
+{
+  NS_LOG_FUNCTION (this);
+
+  uint32_t inFlight = BytesInFlight ();
+
+  NS_LOG_INFO (
+    "Returning calculated Connection: MaxData " << m_max_data << " InFlight: " << inFlight);
+
+  return (inFlight > m_max_data) ? 0 : m_max_data - inFlight;
+}
+
+uint32_t
+QuicSocketBase::BytesInFlight () const
+{
+  NS_LOG_FUNCTION (this);
+
+  uint32_t bytesInFlight = m_txBuffer->BytesInFlight ();
+
+  NS_LOG_INFO ("Returning calculated bytesInFlight: " << bytesInFlight);
+  m_tcb->m_bytesInFlight = bytesInFlight;
+  return bytesInFlight;
+}
+
+/* Inherit from Socket class: In QuicSocketBase, it is same as Send() call */
+int
+QuicSocketBase::SendTo (Ptr<Packet> p, uint32_t flags, const Address &address)
+{
+  NS_LOG_FUNCTION (this);
+
+  return Send (p, flags);
+}
+
+/* Inherit from Socket class: Return data to upper-layer application. Parameter flags
+ is not used. Data is returned as a packet of size no larger than maxSize */
+Ptr<Packet>
+QuicSocketBase::Recv (uint32_t maxSize, uint32_t flags)
+{
+  NS_LOG_FUNCTION (this);
+  NS_ABORT_MSG_IF (flags,
+                   "use of flags is not supported in QuicSocketBase::Recv()");
+
+  if (m_rxBuffer->Size () == 0 && m_socketState == CLOSING)
+    {
+      return Create<Packet> ();
+    }
+  Ptr<Packet> outPacket = m_rxBuffer->Extract (maxSize);
+  return outPacket;
+}
+
+/* Inherit from Socket class: Recv and return the remote's address */
+Ptr<Packet>
+QuicSocketBase::RecvFrom (uint32_t maxSize, uint32_t flags,
+                          Address &fromAddress)
+{
+  NS_LOG_FUNCTION (this);
+
+  Ptr<Packet> packet = m_rxBuffer->Extract (maxSize);
+
+  if (packet != nullptr && packet->GetSize () != 0)
+    {
+      if (m_endPoint != nullptr)
+        {
+          fromAddress = InetSocketAddress (m_endPoint->GetPeerAddress (), m_endPoint->GetPeerPort ());
+        }
+      else if (m_endPoint6 != nullptr)
+        {
+          fromAddress = Inet6SocketAddress (m_endPoint6->GetPeerAddress (), m_endPoint6->GetPeerPort ());
+        }
+      else
+        {
+          fromAddress = InetSocketAddress (Ipv4Address::GetZero (), 0);
+        }
+    }
+
+  return packet;
+}
+
+void
+QuicSocketBase::ScheduleCloseAndSendConnectionClosePacket ()
+{
+  m_drainingPeriodEvent.Cancel ();
+  NS_LOG_LOGIC (this << " Close Schedule DoClose at time " << Simulator::Now ().GetSeconds () << " to expire at time " << (Simulator::Now () + m_drainingPeriodTimeout.Get ()).GetSeconds ());
+  m_drainingPeriodEvent = Simulator::Schedule (m_drainingPeriodTimeout, &QuicSocketBase::DoClose, this);
+  SendConnectionClosePacket (0, "Scheduled connection close - no error");
+}
+
+
+int
+QuicSocketBase::Close (void)
+{
+  NS_LOG_FUNCTION (this);
+  NS_LOG_INFO (this << " Close at time " << Simulator::Now ().GetSeconds ());
+
+  m_receivedTransportParameters = false;
+
+  if (m_idleTimeoutEvent.IsRunning () and m_socketState != IDLE
+      and m_socketState != CLOSING)   //Connection Close from application signal
+    {
+      SetState (CLOSING);
+      if (m_flushOnClose)
+        {
+          m_closeOnEmpty = true;
+        }
+      else
+        {
+          ScheduleCloseAndSendConnectionClosePacket ();
+        }
+    }
+  else if (m_idleTimeoutEvent.IsExpired () and m_socketState != CLOSING
+           and m_socketState != IDLE and m_socketState != LISTENING) //Connection Close due to Idle Period termination
+    {
+      SetState (CLOSING);
+      m_drainingPeriodEvent.Cancel ();
+      NS_LOG_LOGIC (
+        this << " Close Schedule DoClose at time " << Simulator::Now ().GetSeconds () << " to expire at time " << (Simulator::Now () + m_drainingPeriodTimeout.Get ()).GetSeconds ());
+      m_drainingPeriodEvent = Simulator::Schedule (m_drainingPeriodTimeout,
+                                                   &QuicSocketBase::DoClose,
+                                                   this);
+    }
+  else if (m_idleTimeoutEvent.IsExpired ()
+           and m_drainingPeriodEvent.IsExpired () and m_socketState != CLOSING
+           and m_socketState != IDLE) //close last listening sockets
+    {
+      NS_LOG_LOGIC (this << " Closing listening socket");
+      DoClose ();
+    }
+  else if (m_idleTimeoutEvent.IsExpired ()
+           and m_drainingPeriodEvent.IsExpired () and m_socketState == IDLE)
+    {
+      NS_LOG_LOGIC (this << " Has already been closed");
+    }
+
+  return 0;
+}
+
+/* Send a CONNECTION_CLOSE frame */
+uint32_t
+QuicSocketBase::SendConnectionClosePacket (uint16_t errorCode, std::string phrase)
+{
+  NS_LOG_FUNCTION (this);
+
+  Ptr<Packet> p = Create<Packet> ();
+  SequenceNumber32 packetNumber = ++m_tcb->m_nextTxSequence;
+
+  QuicSubheader qsb = QuicSubheader::CreateConnectionClose (errorCode, phrase.c_str ());
+  p->AddHeader (qsb);
+
+
+  QuicHeader head;
+
+  head = QuicHeader::CreateShort (m_connectionId, packetNumber,
+                                  !m_omit_connection_id, m_keyPhase);
+
+
+  NS_LOG_DEBUG ("Send Connection Close packet with header " << head);
+  m_txTrace (p, head, this);
+  m_quicl4->SendPacket (this, p, head);
+
+  return 0;
+}
+
+/* Inherit from Socket class: Signal a termination of send */
+int
+QuicSocketBase::ShutdownSend (void)
+{
+  NS_LOG_FUNCTION (this);
+
+
+
+  return 0;
+}
+
+/* Inherit from Socket class: Signal a termination of receive */
+int
+QuicSocketBase::ShutdownRecv (void)
+{
+  NS_LOG_FUNCTION (this);
+
+  return 0;
+}
+
+void
+QuicSocketBase::SetNode (Ptr<Node> node)
+{
+//NS_LOG_FUNCTION (this);
+
+  m_node = node;
+}
+
+Ptr<Node>
+QuicSocketBase::GetNode (void) const
+{
+//NS_LOG_FUNCTION_NOARGS ();
+
+  return m_node;
+}
+
+/* Inherit from Socket class: Return local address:port */
+int
+QuicSocketBase::GetSockName (Address &address) const
+{
+  NS_LOG_FUNCTION (this);
+
+  return m_quicl4->GetSockName (this, address);
+}
+
+int
+QuicSocketBase::GetPeerName (Address &address) const
+{
+  NS_LOG_FUNCTION (this);
+
+  return m_quicl4->GetPeerName (this, address);
+}
+
+/* Inherit from Socket class: Get the max number of bytes an app can send */
+uint32_t
+QuicSocketBase::GetTxAvailable (void) const
+{
+  NS_LOG_FUNCTION (this);
+
+  return m_txBuffer->Available ();
+}
+
+/* Inherit from Socket class: Get the max number of bytes an app can read */
+uint32_t
+QuicSocketBase::GetRxAvailable (void) const
+{
+  NS_LOG_FUNCTION (this);
+
+  return m_rxBuffer->Available ();
+}
+
+/* Inherit from Socket class: Returns error code */
+enum Socket::SocketErrno
+QuicSocketBase::GetErrno (void) const
+{
+  return m_errno;
+}
+
+/* Inherit from Socket class: Returns socket type, NS3_SOCK_STREAM */
+enum Socket::SocketType
+QuicSocketBase::GetSocketType (void) const
+{
+  return NS3_SOCK_STREAM;
+}
+
+//////////////////////////////////////////////////////////////////////////////////////
+
+/* Clean up after Bind. Set up callback functions in the end-point. */
+int
+QuicSocketBase::SetupCallback (void)
+{
+  NS_LOG_FUNCTION (this);
+
+  if (m_quicl4 == 0)
+    {
+      return -1;
+    }
+  else
+    {
+      m_quicl4->SetRecvCallback (
+        MakeCallback (&QuicSocketBase::ReceivedData, this), this);
+    }
+
+  return 0;
+}
+
+int
+QuicSocketBase::AppendingRx (Ptr<Packet> frame, Address &address)
+{
+
+  NS_LOG_FUNCTION (this);
+
+  if (!m_rxBuffer->Add (frame))
+    {
+      // Insert failed: No data or RX buffer full
+      NS_LOG_INFO ("Dropping packet due to full RX buffer");
+      return 0;
+    }
+  else
+    {
+      NS_LOG_INFO ("Notify Data Recv");
+      NotifyDataRecv ();   // trigger the application method
+    }
+
+  return frame->GetSize ();
+}
+
+void
+QuicSocketBase::SetQuicL4 (Ptr<QuicL4Protocol> quic)
+{
+  NS_LOG_FUNCTION (this);
+
+  m_quicl4 = quic;
+}
+
+void
+QuicSocketBase::SetConnectionId (uint64_t connectionId)
+{
+  NS_LOG_FUNCTION_NOARGS ();
+
+  m_connectionId = connectionId;
+}
+
+void
+QuicSocketBase::InitializeScheduling ()
+{
+  ObjectFactory schedulerFactory;
+  schedulerFactory.SetTypeId (m_schedulingTypeId);
+  Ptr<QuicSocketTxScheduler> sched = schedulerFactory.Create<QuicSocketTxScheduler> ();
+  m_txBuffer->SetScheduler (sched);
+  SetDefaultLatency (m_defaultLatency);
+}
+
+uint64_t
+QuicSocketBase::GetConnectionId (void) const
+{
+  NS_LOG_FUNCTION_NOARGS ();
+
+  return m_connectionId;
+}
+
+void
+QuicSocketBase::SetVersion (uint32_t version)
+{
+  NS_LOG_FUNCTION (this);
+
+  m_vers = version;
+  return;
+}
+
+//////////////////////////////////////////////////////////////////////////////////////
+
+bool
+QuicSocketBase::SetAllowBroadcast (bool allowBroadcast)
+{
+  NS_LOG_FUNCTION (this);
+
+  return (!allowBroadcast);
+}
+
+bool
+QuicSocketBase::GetAllowBroadcast (void) const
+{
+  return false;
+}
+
+Ptr<QuicL5Protocol>
+QuicSocketBase::CreateStreamController ()
+{
+  NS_LOG_FUNCTION (this);
+
+  Ptr<QuicL5Protocol> quicl5 = CreateObject<QuicL5Protocol> ();
+
+  quicl5->SetSocket (this);
+  quicl5->SetNode (m_node);
+  quicl5->SetConnectionId (m_connectionId);
+
+  return quicl5;
+}
+
+void
+QuicSocketBase::SendInitialHandshake (uint8_t type,
+                                      const QuicHeader &quicHeader,
+                                      Ptr<Packet> packet)
+{
+  NS_LOG_FUNCTION (this << m_vers);
+
+  if (type == QuicHeader::VERSION_NEGOTIATION)
+    {
+      NS_LOG_INFO ("Create VERSION_NEGOTIATION");
+      m_receivedTransportParameters = false;
+      m_couldContainTransportParameters = true;
+
+      std::vector<uint32_t> supportedVersions;
+      supportedVersions.push_back (QUIC_VERSION);
+      supportedVersions.push_back (QUIC_VERSION_DRAFT_10);
+      supportedVersions.push_back (QUIC_VERSION_NS3_IMPL);
+
+      uint8_t *buffer = new uint8_t[4 * supportedVersions.size ()];
+
+      Ptr<Packet> payload = Create<Packet> (buffer,
+                                            4 * supportedVersions.size ());
+
+      for (uint8_t i = 0; i < (uint8_t) supportedVersions.size (); i++)
+        {
+
+          buffer[4 * i] = (supportedVersions[i]);
+          buffer[4 * i + 1] = (supportedVersions[i] >> 8);
+          buffer[4 * i + 2] = (supportedVersions[i] >> 16);
+          buffer[4 * i + 3] = (supportedVersions[i] >> 24);
+          //NS_LOG_INFO(" " << (uint64_t) buffer[4*i] << " " << (uint64_t)buffer[4*i+1] << " " << (uint64_t)buffer[4*i+2] << " " << (uint64_t)buffer[4*i+3] );
+
+        }
+
+      Ptr<Packet> p = Create<Packet> (buffer, 4 * supportedVersions.size ());
+      QuicHeader head = QuicHeader::CreateVersionNegotiation (
+        quicHeader.GetConnectionId (),
+        QUIC_VERSION_NEGOTIATION,
+        supportedVersions);
+
+      // Set initial congestion window and Ssthresh
+      m_tcb->m_cWnd = m_tcb->m_initialCWnd;
+      m_tcb->m_ssThresh = m_tcb->m_initialSsThresh;
+
+      m_txTrace (p, head, this);
+      m_quicl4->SendPacket (this, p, head);
+      NotifyDataSent (p->GetSize ());
+
+    }
+  else if (type == QuicHeader::INITIAL)
+    {
+      // Set initial congestion window and Ssthresh
+      m_tcb->m_cWnd = m_tcb->m_initialCWnd;
+      m_tcb->m_ssThresh = m_tcb->m_initialSsThresh;
+
+      NS_LOG_INFO ("Create INITIAL");
+      Ptr<Packet> p = Create<Packet> ();
+      p->AddHeader (OnSendingTransportParameters ());
+      // the RFC says that
+      // "Clients MUST ensure that the first Initial packet they
+      // send is sent in a UDP datagram that is at least 1200 octets."
+      Ptr<Packet> payload = Create<Packet> (
+        GetInitialPacketSize () - p->GetSize ());
+      p->AddAtEnd (payload);
+
+      m_quicl5->DispatchSend (p, 0);
+
+    }
+  else if (type == QuicHeader::RETRY)
+    {
+      NS_LOG_INFO ("Create RETRY");
+      Ptr<Packet> p = Create<Packet> ();
+      p->AddHeader (OnSendingTransportParameters ());
+      Ptr<Packet> payload = Create<Packet> (
+        GetInitialPacketSize () - p->GetSize ());
+      p->AddAtEnd (payload);
+
+      m_quicl5->DispatchSend (p, 0);
+    }
+  else if (type == QuicHeader::HANDSHAKE)
+    {
+      NS_LOG_INFO ("Create HANDSHAKE");
+      Ptr<Packet> p = Create<Packet> ();
+      if (m_socketState == CONNECTING_SVR)
+        {
+          p->AddHeader (OnSendingTransportParameters ());
+        }
+
+      Ptr<Packet> payload = Create<Packet> (
+        GetInitialPacketSize () - p->GetSize ());
+      p->AddAtEnd (payload);
+
+      m_quicl5->DispatchSend (p, 0);
+      m_congestionControl->CongestionStateSet (m_tcb,
+                                               TcpSocketState::CA_OPEN);
+    }
+  else if (type == QuicHeader::ZRTT_PROTECTED)
+    {
+      NS_LOG_INFO ("Create ZRTT_PROTECTED");
+      Ptr<Packet> p = Create<Packet> ();
+      p->AddHeader (OnSendingTransportParameters ());
+
+      m_quicl5->DispatchSend (p, 0);
+
+    }
+  else
+    {
+
+      NS_LOG_INFO ("Wrong Handshake Type");
+
+      return;
+
+    }
+}
+
+void
+QuicSocketBase::OnReceivedFrame (QuicSubheader &sub)
+{
+  NS_LOG_FUNCTION (this << (uint64_t)sub.GetFrameType ());
+
+  uint8_t frameType = sub.GetFrameType ();
+
+  switch (frameType)
+    {
+
+      case QuicSubheader::ACK:
+        NS_LOG_INFO ("Received ACK frame");
+        OnReceivedAckFrame (sub);
+        break;
+
+      case QuicSubheader::CONNECTION_CLOSE:
+        NS_LOG_INFO ("Received CONNECTION_CLOSE frame");
+        Close ();
+        break;
+
+      case QuicSubheader::APPLICATION_CLOSE:
+        NS_LOG_INFO ("Received APPLICATION_CLOSE frame");
+        DoClose ();
+        break;
+
+      case QuicSubheader::PADDING:
+        NS_LOG_INFO ("Received PADDING frame");
+        // no need to do anything
+        break;
+
+      case QuicSubheader::MAX_DATA:
+        // set the maximum amount of data that can be sent
+        // on this connection
+        NS_LOG_INFO ("Received MAX_DATA frame");
+        SetConnectionMaxData (sub.GetMaxData ());
+        break;
+
+      case QuicSubheader::MAX_STREAM_ID:
+        // TODO update the maximum stream ID
+        NS_LOG_INFO ("Received MAX_STREAM_ID frame");
+        break;
+
+      case QuicSubheader::PING:
+        // TODO
+        NS_LOG_INFO ("Received PING frame");
+        break;
+
+      case QuicSubheader::BLOCKED:
+        // TODO
+        NS_LOG_INFO ("Received BLOCKED frame");
+        break;
+
+      case QuicSubheader::STREAM_ID_BLOCKED:
+        // TODO
+        NS_LOG_INFO ("Received STREAM_ID_BLOCKED frame");
+        break;
+
+      case QuicSubheader::NEW_CONNECTION_ID:
+        // TODO
+        NS_LOG_INFO ("Received NEW_CONNECTION_ID frame");
+        break;
+
+      case QuicSubheader::PATH_CHALLENGE:
+        // TODO reply with a PATH_RESPONSE with the same value
+        // as that carried by the PATH_CHALLENGE
+        NS_LOG_INFO ("Received PATH_CHALLENGE frame");
+        break;
+
+      case QuicSubheader::PATH_RESPONSE:
+        // TODO check if it matches what was sent in a PATH_CHALLENGE
+        // otherwise abort with a UNSOLICITED_PATH_RESPONSE error
+        NS_LOG_INFO ("Received PATH_RESPONSE frame");
+        break;
+
+      default:
+        AbortConnection (
+          QuicSubheader::TransportErrorCodes_t::PROTOCOL_VIOLATION,
+          "Received Corrupted Frame");
+        return;
+    }
+
+}
+
+Ptr<Packet>
+QuicSocketBase::OnSendingAckFrame ()
+{
+  NS_LOG_FUNCTION (this);
+
+  NS_ABORT_MSG_IF (m_receivedPacketNumbers.empty (),
+                   " Sending Ack Frame without packets to acknowledge");
+
+//m_delAckEvent.Cancel();
+//m_delAckCount = 0;
+
+  NS_LOG_INFO ("Attach an ACK frame to the packet");
+
+  std::sort (m_receivedPacketNumbers.begin (), m_receivedPacketNumbers.end (),
+             std::greater<SequenceNumber32> ());
+
+  SequenceNumber32 largestAcknowledged = *(m_receivedPacketNumbers.begin ());
+
+  uint32_t ackBlockCount = 0;
+  std::vector<uint32_t> additionalAckBlocks;
+  std::vector<uint32_t> gaps;
+
+  std::vector<SequenceNumber32>::const_iterator curr_rec_it =
+    m_receivedPacketNumbers.begin ();
+  std::vector<SequenceNumber32>::const_iterator next_rec_it =
+    m_receivedPacketNumbers.begin () + 1;
+
+  for (; next_rec_it != m_receivedPacketNumbers.end ();
+       ++curr_rec_it, ++next_rec_it)
+    {
+
+      if (((*curr_rec_it) - (*next_rec_it) - 1 > 0)
+          and ((*curr_rec_it) != (*next_rec_it)))
+        {
+          //std::clog << "curr " << (*curr_rec_it) << " next " << (*next_rec_it) << " ";
+          additionalAckBlocks.push_back ((*next_rec_it).GetValue ());
+          gaps.push_back ((*curr_rec_it).GetValue () - 1);
+          ackBlockCount++;
+        }
+      // Limit the number of gaps that are sent in an ACK (older packets have already been retransmitted)
+      if (ackBlockCount >= m_maxTrackedGaps)
+        {
+          break;
+        }
+    }
+
+
+  Time delay = Simulator::Now () - m_lastReceived;
+  uint64_t ack_delay = delay.GetMicroSeconds ();
+  QuicSubheader sub = QuicSubheader::CreateAck (
+    largestAcknowledged.GetValue (), ack_delay, largestAcknowledged.GetValue (),
+    gaps, additionalAckBlocks);
+
+  Ptr<Packet> ackFrame = Create<Packet> ();
+  ackFrame->AddHeader (sub);
+
+  if (m_lastMaxData < m_maxDataInterval)
+    {
+      m_lastMaxData++;
+    }
+  else
+    {
+      QuicSubheader maxData = QuicSubheader::CreateMaxData (m_quicl5->GetMaxData ());
+      ackFrame->AddHeader (maxData);
+      m_lastMaxData = 0;
+    }
+
+  return ackFrame;
+}
+
+void
+QuicSocketBase::OnReceivedAckFrame (QuicSubheader &sub)
+{
+  NS_LOG_FUNCTION (this);
+  NS_LOG_INFO ("Process ACK");
+
+  // Generate RateSample
+  struct RateSample * rs = m_txBuffer->GetRateSample ();
+  rs->m_priorInFlight = m_tcb->m_bytesInFlight.Get ();
+
+  uint32_t lostOut = m_txBuffer->GetLost ();
+  uint32_t delivered = m_tcb->m_delivered;
+
+  uint32_t previousWindow = m_txBuffer->BytesInFlight ();
+
+  std::vector<uint32_t> additionalAckBlocks = sub.GetAdditionalAckBlocks ();
+  std::vector<uint32_t> gaps = sub.GetGaps ();
+  uint32_t largestAcknowledged = sub.GetLargestAcknowledged ();
+  m_tcb->m_lastAckedSeq = largestAcknowledged;
+  uint32_t ackBlockCount = sub.GetAckBlockCount ();
+
+  NS_ABORT_MSG_IF (
+    ackBlockCount != additionalAckBlocks.size ()
+    and ackBlockCount != gaps.size (),
+    "Received Corrupted Ack Frame.");
+
+  std::vector<Ptr<QuicSocketTxItem> > ackedPackets = m_txBuffer->OnAckUpdate (
+    m_tcb, largestAcknowledged, additionalAckBlocks, gaps);
+
+  // Count newly acked bytes
+  uint32_t ackedBytes = previousWindow - m_txBuffer->BytesInFlight ();
+
+  m_txBuffer->GenerateRateSample ();
+  rs->m_packetLoss = std::abs ((int) lostOut - (int) m_txBuffer->GetLost ());
+  m_tcb->m_lastAckedSackedBytes = m_tcb->m_delivered - delivered;
+
+  // RTO packet acknowledged - IETF Draft QUIC Recovery, Sec. 4.3.3
+  if (m_tcb->m_rtoCount > 0)
+    {
+      // Packets after the RTO have been acknowledged
+      if (m_tcb->m_largestSentBeforeRto.GetValue () < largestAcknowledged)
+        {
+
+          uint32_t newPackets = (largestAcknowledged
+                                 - m_tcb->m_largestSentBeforeRto.GetValue ()) / GetSegSize ();
+          uint32_t inFlightBeforeRto = m_txBuffer->BytesInFlight ();
+          m_txBuffer->ResetSentList (newPackets);
+          std::vector<Ptr<QuicSocketTxItem> > lostPackets =
+            m_txBuffer->DetectLostPackets ();
+          if (m_quicCongestionControlLegacy && !lostPackets.empty ())
+            {
+              // Reset congestion window and go into loss mode
+              m_tcb->m_cWnd = m_tcb->m_kMinimumWindow;
+              m_tcb->m_endOfRecovery = m_tcb->m_highTxMark;
+              m_tcb->m_ssThresh = m_congestionControl->GetSsThresh (
+                m_tcb, inFlightBeforeRto);
+              m_tcb->m_congState = TcpSocketState::CA_LOSS;
+              m_congestionControl->CongestionStateSet (
+                m_tcb, TcpSocketState::CA_LOSS);
+            }
+        }
+      else
+        {
+          m_tcb->m_rtoCount = 0;
+        }
+    }
+
+  // Tail loss probe packet acknowledged - IETF Draft QUIC Recovery, Sec. 4.3.2
+  if (m_tcb->m_tlpCount > 0 && !ackedPackets.empty ())
+    {
+      m_tcb->m_tlpCount = 0;
+    }
+
+  // Find lost packets
+  std::vector<Ptr<QuicSocketTxItem> > lostPackets =
+    m_txBuffer->DetectLostPackets ();
+  // Recover from losses
+  if (!lostPackets.empty ())
+    {
+
+      //Trace lost packets
+      m_pxLstTrace((uint32_t) lostPackets.size(), this);
+
+      //... or trace lost packets for short headers only??
+      // uint32_t numLostPackets = 0;
+      // for (int i = 0; i < (uint32_t) lostPackets.size(); i++) {
+      //   QuicHeader header;
+      //   lostPackets.at(i)->m_packet->PeekHeader(header);
+      //   if (header.IsShort())
+      //     {
+      //       numLostPackets++;
+      //     }
+      // }
+      // m_pxLstTrace(numLostPackets, this);
+
+      if (m_quicCongestionControlLegacy)
+        {
+          //Enter recovery (RFC 6675, Sec. 5)
+          if (m_tcb->m_congState != TcpSocketState::CA_RECOVERY)
+            {
+              m_tcb->m_congState = TcpSocketState::CA_RECOVERY;
+              m_tcb->m_endOfRecovery = m_tcb->m_highTxMark;
+              m_congestionControl->CongestionStateSet (
+                m_tcb, TcpSocketState::CA_RECOVERY);
+              m_tcb->m_ssThresh = m_congestionControl->GetSsThresh (
+                m_tcb, BytesInFlight ());
+              m_tcb->m_cWnd = m_tcb->m_ssThresh;
+            }
+          NS_ASSERT (m_tcb->m_congState == TcpSocketState::CA_RECOVERY);
+        }
+      else
+        {
+          DynamicCast<QuicCongestionOps> (m_congestionControl)->OnPacketsLost (
+            m_tcb, lostPackets);
+        }
+      DoRetransmit (lostPackets);
+    }
+  /* else */ if (ackedBytes > 0)
+    {
+      if (!m_quicCongestionControlLegacy)
+        {
+          NS_LOG_INFO ("Update the variables in the congestion control (QUIC)");
+          // Process the ACK
+          DynamicCast<QuicCongestionOps> (m_congestionControl)->OnAckReceived (
+            m_tcb, sub, ackedPackets, rs);
+          m_lastRtt = m_tcb->m_lastRtt;
+        }
+      else
+        {
+          uint32_t ackedSegments = ackedBytes / GetSegSize ();
+
+          NS_LOG_INFO ("Update the variables in the congestion control (legacy), ackedBytes "
+                       << ackedBytes << " ackedSegments " << ackedSegments);
+          // new acks are ordered from the highest packet number to the smalles
+          Ptr<QuicSocketTxItem> lastAcked = ackedPackets.at (0);
+
+          NS_LOG_LOGIC ("Updating RTT estimate");
+          // If the largest acked is newly acked, update the RTT.
+          if (lastAcked->m_packetNumber >= m_tcb->m_largestAckedPacket)
+            {
+              Time ackDelay = MicroSeconds (sub.GetAckDelay ());
+              m_tcb->m_lastRtt = Now () - lastAcked->m_lastSent - ackDelay;
+              m_lastRtt = m_tcb->m_lastRtt;
+            }
+          if (m_tcb->m_congState != TcpSocketState::CA_RECOVERY
+              && m_tcb->m_congState != TcpSocketState::CA_LOSS)
+            {
+              // Increase the congestion window
+              m_congestionControl->PktsAcked (m_tcb, ackedSegments,
+                                              m_tcb->m_lastRtt);
+              m_congestionControl->IncreaseWindow (m_tcb, ackedSegments);
+            }
+          else
+            {
+              if (m_tcb->m_endOfRecovery.GetValue () > largestAcknowledged)
+                {
+                  m_congestionControl->PktsAcked (m_tcb, ackedSegments,
+                                                  m_tcb->m_lastRtt);
+                  m_congestionControl->IncreaseWindow (m_tcb, ackedSegments);
+                }
+              else
+                {
+                  m_tcb->m_congState = TcpSocketState::CA_OPEN;
+                  m_congestionControl->PktsAcked (m_tcb, ackedSegments, m_tcb->m_lastRtt);
+                  m_congestionControl->CongestionStateSet (m_tcb, TcpSocketState::CA_OPEN);
+                }
+            }
+        }
+    }
+  else
+    {
+      NS_LOG_INFO ("Received an ACK to ack an ACK");
+    }
+
+  // notify the application that more data can be sent
+  if (GetTxAvailable () > 0)
+    {
+      NotifySend (GetTxAvailable ());
+    }
+
+  // try to send more data
+  SendPendingData (m_connected);
+
+  // Compute timers
+  SetReTxTimeout ();
+}
+
+QuicTransportParameters
+QuicSocketBase::OnSendingTransportParameters ()
+{
+  NS_LOG_FUNCTION (this);
+
+  QuicTransportParameters transportParameters;
+  transportParameters = transportParameters.CreateTransportParameters (
+    m_initial_max_stream_data, m_max_data, m_initial_max_stream_id_bidi,
+    (uint16_t) m_idleTimeout.Get ().GetSeconds (),
+    (uint8_t) m_omit_connection_id, m_tcb->m_segmentSize,
+    m_ack_delay_exponent, m_initial_max_stream_id_uni);
+
+  return transportParameters;
+}
+
+void
+QuicSocketBase::OnReceivedTransportParameters (
+  QuicTransportParameters transportParameters)
+{
+  NS_LOG_FUNCTION (this);
+
+  if (m_receivedTransportParameters)
+    {
+      AbortConnection (
+        QuicSubheader::TransportErrorCodes_t::TRANSPORT_PARAMETER_ERROR,
+        "Duplicate transport parameters reception");
+      return;
+    }
+  m_receivedTransportParameters = true;
+
+// TODO: A client MUST NOT include a stateless reset token. A server MUST treat receipt of a stateless_reset_token_transport
+//   parameter as a connection error of type TRANSPORT_PARAMETER_ERROR
+
+  uint32_t mask = transportParameters.GetInitialMaxStreamIdBidi ()
+    & 0x00000003;
+  if ((mask == 0) && m_socketState != CONNECTING_CLT)
+    {
+      // TODO AbortConnection(QuicSubheader::TransportErrorCodes_t::TRANSPORT_PARAMETER_ERROR, "Invalid Initial Max Stream Id Bidi value provided from Server");
+      return;
+    }
+  else if ((mask == 1) && m_socketState != CONNECTING_SVR)
+    {
+      // TODO AbortConnection(QuicSubheader::TransportErrorCodes_t::TRANSPORT_PARAMETER_ERROR, "Invalid Initial Max Stream Id Bidi value provided from Client");
+      return;
+    }
+
+  mask = transportParameters.GetInitialMaxStreamIdUni () & 0x00000003;
+  if ((mask == 2) && m_socketState != CONNECTING_CLT)
+    {
+      // TODO AbortConnection(QuicSubheader::TransportErrorCodes_t::TRANSPORT_PARAMETER_ERROR, "Invalid Initial Max Stream Id Uni value provided from Server");
+      return;
+    }
+  else if ((mask == 3) && m_socketState != CONNECTING_SVR)
+    {
+      // TODO AbortConnection(QuicSubheader::TransportErrorCodes_t::TRANSPORT_PARAMETER_ERROR, "Invalid Initial Max Stream Id Uni value provided from Client");
+      return;
+    }
+
+  if (transportParameters.GetMaxPacketSize ()
+      < QuicSocketBase::MIN_INITIAL_PACKET_SIZE
+      or transportParameters.GetMaxPacketSize () > 65527)
+    {
+      AbortConnection (
+        QuicSubheader::TransportErrorCodes_t::TRANSPORT_PARAMETER_ERROR,
+        "Invalid Max Packet Size value provided");
+      return;
+    }
+
+// version 15 has removed the upper bound on the idle timeout
+// if (transportParameters.GetIdleTimeout () > 600)
+//   {
+//     AbortConnection (
+//         QuicSubheader::TransportErrorCodes_t::TRANSPORT_PARAMETER_ERROR,
+//         "Invalid Idle Timeout value provided");
+//     return;
+//   }
+
+  NS_LOG_DEBUG (
+    "Before applying received transport parameters " << " m_initial_max_stream_data " << m_initial_max_stream_data << " m_max_data " << m_max_data << " m_initial_max_stream_id_bidi " << m_initial_max_stream_id_bidi << " m_idleTimeout " << m_idleTimeout << " m_omit_connection_id " << m_omit_connection_id << " m_tcb->m_segmentSize " << m_tcb->m_segmentSize << " m_ack_delay_exponent " << m_ack_delay_exponent << " m_initial_max_stream_id_uni " << m_initial_max_stream_id_uni);
+
+  m_initial_max_stream_data = std::min (
+    transportParameters.GetInitialMaxStreamData (),
+    m_initial_max_stream_data);
+  m_quicl5->UpdateInitialMaxStreamData (m_initial_max_stream_data);
+
+  m_max_data = std::min (transportParameters.GetInitialMaxData (),
+                         m_max_data);
+
+  m_initial_max_stream_id_bidi = std::min (
+    transportParameters.GetInitialMaxStreamIdBidi (),
+    m_initial_max_stream_id_bidi);
+
+  m_idleTimeout = Time (
+    std::min (transportParameters.GetIdleTimeout (),
+              (uint16_t) m_idleTimeout.Get ().GetSeconds ()) * 1e9);
+
+  m_omit_connection_id = std::min (transportParameters.GetOmitConnection (),
+                                   (uint8_t) m_omit_connection_id);
+
+  SetSegSize (
+    std::min ((uint32_t) transportParameters.GetMaxPacketSize (),
+              m_tcb->m_segmentSize));
+
+//m_stateless_reset_token = std::min(transportParameters.getStatelessResetToken(), m_stateless_reset_token);
+  m_ack_delay_exponent = std::min (transportParameters.GetAckDelayExponent (),
+                                   m_ack_delay_exponent);
+
+  m_initial_max_stream_id_uni = std::min (
+    transportParameters.GetInitialMaxStreamIdUni (),
+    m_initial_max_stream_id_uni);
+
+  NS_LOG_DEBUG (
+    "After applying received transport parameters " << " m_initial_max_stream_data " << m_initial_max_stream_data << " m_max_data " << m_max_data << " m_initial_max_stream_id_bidi " << m_initial_max_stream_id_bidi << " m_idleTimeout " << m_idleTimeout << " m_omit_connection_id " << m_omit_connection_id << " m_tcb->m_segmentSize " << m_tcb->m_segmentSize << " m_ack_delay_exponent " << m_ack_delay_exponent << " m_initial_max_stream_id_uni " << m_initial_max_stream_id_uni);
+}
+
+int
+QuicSocketBase::DoConnect (void)
+{
+  NS_LOG_FUNCTION (this);
+
+  if (m_socketState != IDLE and m_socketState != QuicSocket::LISTENING)
+    {
+      //m_errno = ERROR_INVAL;
+      return -1;
+    }
+
+  if (m_socketState == LISTENING)
+    {
+      SetState (CONNECTING_SVR);
+    }
+  else if (m_socketState == IDLE)
+    {
+      SetState (CONNECTING_CLT);
+      QuicHeader q;
+      SendInitialHandshake (QuicHeader::INITIAL, q, 0);
+    }
+  return 0;
+}
+
+int
+QuicSocketBase::DoFastConnect (void)
+{
+  NS_LOG_FUNCTION (this);
+  NS_ABORT_MSG_IF (!IsVersionSupported (m_vers),
+                   "0RTT Handshake requested with wrong Initial Version");
+
+  if (m_socketState != IDLE)
+    {
+      //m_errno = ERROR_INVAL;
+      return -1;
+    }
+
+  else if (m_socketState == IDLE)
+    {
+      SetState (OPEN);
+      Simulator::ScheduleNow (&QuicSocketBase::ConnectionSucceeded, this);
+      m_congestionControl->CongestionStateSet (m_tcb,
+                                               TcpSocketState::CA_OPEN);
+      QuicHeader q;
+      SendInitialHandshake (QuicHeader::ZRTT_PROTECTED, q, 0);
+    }
+  return 0;
+}
+
+void
+QuicSocketBase::ConnectionSucceeded ()
+{ // Wrapper to protected function NotifyConnectionSucceeded() so that it can
+  // be called as a scheduled event
+  NotifyConnectionSucceeded ();
+  // The if-block below was moved from ProcessSynSent() to here because we need
+  // to invoke the NotifySend() only after NotifyConnectionSucceeded() to
+  // reflect the behaviour in the real world.
+  if (GetTxAvailable () > 0)
+    {
+      NotifySend (GetTxAvailable ());
+    }
+}
+
+int
+QuicSocketBase::DoClose (void)
+{
+  NS_LOG_FUNCTION (this);
+  NS_LOG_INFO (this << " DoClose at time " << Simulator::Now ().GetSeconds ());
+
+  if (m_socketState != IDLE)
+    {
+      SetState (IDLE);
+    }
+
+  SetRecvCallback (MakeNullCallback<void, Ptr<Socket> > ());
+  return m_quicl4->RemoveSocket (this);
+}
+
+void
+QuicSocketBase::ReceivedData (Ptr<Packet> p, const QuicHeader& quicHeader,
+                              Address &address)
+{
+  NS_LOG_FUNCTION (this);
+
+  m_rxTrace (p, quicHeader, this);
+
+  NS_LOG_INFO ("Received packet of size " << p->GetSize ());
+
+  // check if this packet is not received during the draining period
+  if (!m_drainingPeriodEvent.IsRunning ())
+    {
+      m_idleTimeoutEvent.Cancel ();   // reset the IDLE timeout
+      NS_LOG_LOGIC (
+        this << " ReceivedData Schedule Close at time " << Simulator::Now ().GetSeconds () << " to expire at time " << (Simulator::Now () + m_idleTimeout.Get ()).GetSeconds ());
+      m_idleTimeoutEvent = Simulator::Schedule (m_idleTimeout,
+                                                &QuicSocketBase::Close, this);
+    }
+  else   // If the socket is in Draining Period, discard the packets
+    {
+      return;
+    }
+
+  int onlyAckFrames = 0;
+  bool unsupportedVersion = false;
+
+  if (quicHeader.IsORTT () and m_socketState == LISTENING)
+    {
+
+      if (m_serverBusy)
+        {
+          AbortConnection (QuicSubheader::TransportErrorCodes_t::SERVER_BUSY,
+                           "Server too busy to accept new connections");
+          return;
+        }
+
+      m_couldContainTransportParameters = true;
+
+      onlyAckFrames = m_quicl5->DispatchRecv (p, address);
+      m_receivedPacketNumbers.push_back (quicHeader.GetPacketNumber ());
+
+      m_connected = true;
+      m_keyPhase == QuicHeader::PHASE_ONE ? m_keyPhase =
+        QuicHeader::PHASE_ZERO :
+        m_keyPhase =
+          QuicHeader::PHASE_ONE;
+      SetState (OPEN);
+      Simulator::ScheduleNow (&QuicSocketBase::ConnectionSucceeded, this);
+      m_congestionControl->CongestionStateSet (m_tcb,
+                                               TcpSocketState::CA_OPEN);
+      m_couldContainTransportParameters = false;
+
+    }
+  else if (quicHeader.IsInitial () and m_socketState == CONNECTING_SVR)
+    {
+      NS_LOG_INFO ("Server receives INITIAL");
+      if (m_serverBusy)
+        {
+          AbortConnection (QuicSubheader::TransportErrorCodes_t::SERVER_BUSY,
+                           "Server too busy to accept new connections");
+          return;
+        }
+
+      if (p->GetSize () < QuicSocketBase::MIN_INITIAL_PACKET_SIZE)
+        {
+          std::stringstream error;
+          error << "Initial Packet smaller than "
+                << QuicSocketBase::MIN_INITIAL_PACKET_SIZE << " octects";
+          AbortConnection (
+            QuicSubheader::TransportErrorCodes_t::PROTOCOL_VIOLATION,
+            error.str ().c_str ());
+          return;
+        }
+
+      onlyAckFrames = m_quicl5->DispatchRecv (p, address);
+      m_receivedPacketNumbers.push_back (quicHeader.GetPacketNumber ());
+
+      if (IsVersionSupported (quicHeader.GetVersion ()))
+        {
+          m_couldContainTransportParameters = false;
+          SendInitialHandshake (QuicHeader::HANDSHAKE, quicHeader, p);
+        }
+      else
+        {
+          NS_LOG_INFO (this << " WRONG VERSION " << quicHeader.GetVersion ());
+          unsupportedVersion = true;
+          SendInitialHandshake (QuicHeader::VERSION_NEGOTIATION, quicHeader,
+                                p);
+        }
+      return;
+    }
+  else if (quicHeader.IsHandshake () and m_socketState == CONNECTING_CLT)   // Undefined compiler behaviour if i try to receive transport parameters
+    {
+      NS_LOG_INFO ("Client receives HANDSHAKE");
+
+      onlyAckFrames = m_quicl5->DispatchRecv (p, address);
+      m_receivedPacketNumbers.push_back (quicHeader.GetPacketNumber ());
+
+      SetState (OPEN);
+      Simulator::ScheduleNow (&QuicSocketBase::ConnectionSucceeded, this);
+      m_congestionControl->CongestionStateSet (m_tcb,
+                                               TcpSocketState::CA_OPEN);
+      m_couldContainTransportParameters = false;
+
+      SendInitialHandshake (QuicHeader::HANDSHAKE, quicHeader, p);
+      return;
+    }
+  else if (quicHeader.IsHandshake () and m_socketState == CONNECTING_SVR)
+    {
+      NS_LOG_INFO ("Server receives HANDSHAKE");
+
+      onlyAckFrames = m_quicl5->DispatchRecv (p, address);
+      m_receivedPacketNumbers.push_back (quicHeader.GetPacketNumber ());
+
+      SetState (OPEN);
+      Simulator::ScheduleNow (&QuicSocketBase::ConnectionSucceeded, this);
+      m_congestionControl->CongestionStateSet (m_tcb,
+                                               TcpSocketState::CA_OPEN);
+      SendPendingData (true);
+      return;
+    }
+  else if (quicHeader.IsVersionNegotiation ()
+           and m_socketState == CONNECTING_CLT)
+    {
+      NS_LOG_INFO ("Client receives VERSION_NEGOTIATION");
+
+      uint8_t *buffer = new uint8_t[p->GetSize ()];
+      p->CopyData (buffer, p->GetSize ());
+
+      std::vector<uint32_t> receivedVersions;
+      for (uint8_t i = 0; i < p->GetSize (); i = i + 4)
+        {
+          receivedVersions.push_back (
+            buffer[i] + (buffer[i + 1] << 8) + (buffer[i + 2] << 16)
+            + (buffer[i + 3] << 24));
+          //NS_LOG_INFO(" " << (uint64_t) buffer[i] << " " << (uint64_t)buffer[i+1] << " " << (uint64_t)buffer[i+2] << " " << (uint64_t)buffer[i+3] );
+        }
+
+      std::vector<uint32_t> supportedVersions;
+      supportedVersions.push_back (QUIC_VERSION);
+      supportedVersions.push_back (QUIC_VERSION_DRAFT_10);
+      supportedVersions.push_back (QUIC_VERSION_NS3_IMPL);
+
+      uint32_t foundVersion = 0;
+      for (uint8_t i = 0; i < receivedVersions.size (); i++)
+        {
+          for (uint8_t j = 0; j < supportedVersions.size (); j++)
+            {
+//			NS_LOG_INFO("rec " << receivedVersions[i] << " myvers " << m_supportedVersions[j] );
+              if (receivedVersions[i] == supportedVersions[j])
+                {
+                  foundVersion = receivedVersions[i];
+                }
+            }
+        }
+
+      if (foundVersion != 0)
+        {
+          NS_LOG_INFO ("A matching supported version is found " << foundVersion << " re-send initial");
+          m_vers = foundVersion;
+          SendInitialHandshake (QuicHeader::INITIAL, quicHeader, p);
+        }
+      else
+        {
+          AbortConnection (
+            QuicSubheader::TransportErrorCodes_t::VERSION_NEGOTIATION_ERROR,
+            "No supported Version found by the Client");
+          return;
+        }
+      return;
+    }
+  else if (quicHeader.IsShort () and m_socketState == OPEN)
+    {
+      // TODOACK here?
+      // we need to check if the packet contains only an ACK frame
+      // in this case we cannot explicitely ACK it!
+      // check if delayed ACK is used
+      m_receivedPacketNumbers.push_back (quicHeader.GetPacketNumber ());
+      onlyAckFrames = m_quicl5->DispatchRecv (p, address);
+
+    }
+  else if (m_socketState == CLOSING)
+    {
+
+      AbortConnection (m_transportErrorCode,
+                       "Received packet in Closing state");
+
+    }
+  else
+    {
+
+      return;
+    }
+
+  // trigger the process for ACK handling if the received packet was not ACK only
+  NS_LOG_DEBUG ("onlyAckFrames " << onlyAckFrames << " unsupportedVersion " << unsupportedVersion);
+  if (onlyAckFrames == 1 && !unsupportedVersion)
+    {
+      m_lastReceived = Simulator::Now ();
+      NS_LOG_DEBUG ("Call MaybeQueueAck");
+      MaybeQueueAck ();
+    }
+
+}
+
+uint32_t
+QuicSocketBase::GetInitialMaxStreamData () const
+{
+  return m_initial_max_stream_data;
+}
+
+uint32_t
+QuicSocketBase::GetConnectionMaxData () const
+{
+  return m_max_data;
+}
+
+void
+QuicSocketBase::SetConnectionMaxData (uint32_t maxData)
+{
+  m_max_data = maxData;
+}
+
+QuicSocket::QuicStates_t
+QuicSocketBase::GetSocketState () const
+{
+  return m_socketState;
+}
+
+void
+QuicSocketBase::SetState (TracedValue<QuicStates_t> newstate)
+{
+  NS_LOG_FUNCTION (this);
+
+  if (m_quicl4->IsServer ())
+    {
+      NS_LOG_INFO (
+        "Server " << QuicStateName[m_socketState] << " -> " << QuicStateName[newstate] << "");
+    }
+  else
+    {
+      NS_LOG_INFO (
+        "Client " << QuicStateName[m_socketState] << " -> " << QuicStateName[newstate] << "");
+    }
+
+  m_socketState = newstate;
+}
+
+bool
+QuicSocketBase::IsVersionSupported (uint32_t version)
+{
+  if (version == QUIC_VERSION || version == QUIC_VERSION_DRAFT_10
+      || version == QUIC_VERSION_NS3_IMPL)
+    {
+      return true;
+    }
+  else
+    {
+      return false;
+    }
+}
+
+void
+QuicSocketBase::AbortConnection (uint16_t transportErrorCode,
+                                 const char* reasonPhrase,
+                                 bool applicationClose)
+{
+  NS_LOG_FUNCTION (this);
+
+  NS_LOG_INFO (
+    "Abort connection " << transportErrorCode << " because " << reasonPhrase);
+
+  m_transportErrorCode = transportErrorCode;
+
+  QuicSubheader quicSubheader;
+  Ptr<Packet> frame = Create<Packet> ();
+  if (!applicationClose)
+    {
+      quicSubheader = QuicSubheader::CreateConnectionClose (
+        m_transportErrorCode, reasonPhrase);
+    }
+  else
+    {
+      quicSubheader = QuicSubheader::CreateApplicationClose (
+        m_transportErrorCode, reasonPhrase);
+    }
+  frame->AddHeader (quicSubheader);
+
+  QuicHeader quicHeader;
+  switch (m_socketState)
+    {
+      case CONNECTING_CLT:
+        quicHeader = QuicHeader::CreateInitial (m_connectionId, m_vers,
+                                                m_tcb->m_nextTxSequence++);
+        break;
+      case CONNECTING_SVR:
+        quicHeader = QuicHeader::CreateHandshake (m_connectionId, m_vers,
+                                                  m_tcb->m_nextTxSequence++);
+        break;
+      case OPEN:
+        quicHeader =
+          !m_connected ?
+          QuicHeader::CreateHandshake (m_connectionId, m_vers,
+                                       m_tcb->m_nextTxSequence++) :
+          QuicHeader::CreateShort (m_connectionId,
+                                   m_tcb->m_nextTxSequence++,
+                                   !m_omit_connection_id, m_keyPhase);
+        break;
+      case CLOSING:
+        quicHeader = QuicHeader::CreateShort (m_connectionId,
+                                              m_tcb->m_nextTxSequence++,
+                                              !m_omit_connection_id,
+                                              m_keyPhase);
+        break;
+      default:
+        NS_ABORT_MSG (
+          "AbortConnection in unfeasible Socket State for the request");
+        return;
+    }
+  Ptr<Packet> packet = Create<Packet> ();
+  packet->AddAtEnd (frame);
+  uint32_t sz = packet->GetSize ();
+
+  m_txTrace (packet, quicHeader, this);
+  m_quicl4->SendPacket (this, packet, quicHeader);
+  NotifyDataSent (sz);
+
+  Close ();
+}
+
+bool
+QuicSocketBase::GetReceivedTransportParametersFlag () const
+{
+  return m_receivedTransportParameters;
+}
+
+bool
+QuicSocketBase::CheckIfPacketOverflowMaxDataLimit (
+  std::vector<std::pair<Ptr<Packet>, QuicSubheader> > disgregated)
+{
+  NS_LOG_FUNCTION (this);
+  uint32_t validPacketSize = 0;
+
+  for (auto frame_recv_it = disgregated.begin ();
+       frame_recv_it != disgregated.end () and !disgregated.empty ();
+       ++frame_recv_it)
+    {
+      QuicSubheader sub = (*frame_recv_it).second;
+      // (*frame_recv_it)->PeekHeader (sub);
+
+      if (sub.IsStream () and sub.GetStreamId () != 0)
+        {
+          validPacketSize += (*frame_recv_it).first->GetSize ();
+        }
+    }
+
+  if ((m_max_data < m_rxBuffer->Size () + validPacketSize))
+    {
+      return true;
+    }
+  return false;
+}
+
+uint32_t
+QuicSocketBase::GetMaxStreamId () const
+{
+  return std::max (m_initial_max_stream_id_bidi, m_initial_max_stream_id_uni);
+}
+
+uint32_t
+QuicSocketBase::GetMaxStreamIdBidirectional () const
+{
+  return m_initial_max_stream_id_bidi;
+}
+
+uint32_t
+QuicSocketBase::GetMaxStreamIdUnidirectional () const
+{
+  return m_initial_max_stream_id_uni;
+}
+
+bool
+QuicSocketBase::CouldContainTransportParameters () const
+{
+  return m_couldContainTransportParameters;
+}
+
+void
+QuicSocketBase::SetCongestionControlAlgorithm (Ptr<TcpCongestionOps> algo)
+{
+  NS_LOG_FUNCTION (this << algo);
+  if (DynamicCast<QuicCongestionOps> (algo) != 0)
+    {
+      NS_LOG_INFO ("Non-legacy congestion control");
+      m_quicCongestionControlLegacy = false;
+    }
+  else
+    {
+      NS_LOG_INFO (
+        "Legacy congestion control, using only TCP standard functions");
+      m_quicCongestionControlLegacy = true;
+    }
+  m_congestionControl = algo;
+}
+
+void
+QuicSocketBase::SetSocketSndBufSize (uint32_t size)
+{
+  NS_LOG_FUNCTION (this << size);
+  m_socketTxBufferSize = size;
+  m_txBuffer->SetMaxBufferSize (size);
+}
+
+uint32_t
+QuicSocketBase::GetSocketSndBufSize (void) const
+{
+  return m_txBuffer->GetMaxBufferSize ();
+}
+
+void
+QuicSocketBase::SetSocketRcvBufSize (uint32_t size)
+{
+  NS_LOG_FUNCTION (this << size);
+  m_socketRxBufferSize = size;
+  m_rxBuffer->SetMaxBufferSize (size);
+}
+
+uint32_t
+QuicSocketBase::GetSocketRcvBufSize (void) const
+{
+  return m_rxBuffer->GetMaxBufferSize ();
+}
+
+void
+QuicSocketBase::UpdateCwnd (uint32_t oldValue, uint32_t newValue)
+{
+  m_cWndTrace (oldValue, newValue);
+}
+
+void
+QuicSocketBase::UpdateSsThresh (uint32_t oldValue, uint32_t newValue)
+{
+  m_ssThTrace (oldValue, newValue);
+}
+
+void
+QuicSocketBase::UpdateCongState (TcpSocketState::TcpCongState_t oldValue,
+                                 TcpSocketState::TcpCongState_t newValue)
+{
+  m_congStateTrace (oldValue, newValue);
+}
+
+void
+QuicSocketBase::UpdateNextTxSequence (SequenceNumber32 oldValue,
+                                      SequenceNumber32 newValue)
+
+{
+  m_nextTxSequenceTrace (oldValue.GetValue (), newValue.GetValue ());
+}
+
+void
+QuicSocketBase::UpdateHighTxMark (SequenceNumber32 oldValue, SequenceNumber32 newValue)
+{
+  m_highTxMarkTrace (oldValue.GetValue (), newValue.GetValue ());
+}
+
+void
+QuicSocketBase::SetInitialSSThresh (uint32_t threshold)
+{
+  NS_ABORT_MSG_UNLESS ( (m_socketState == IDLE) || threshold == m_tcb->m_initialSsThresh,
+                        "QuicSocketBase::SetSSThresh() cannot change initial ssThresh after connection started.");
+
+  m_tcb->m_initialSsThresh = threshold;
+}
+
+uint32_t
+QuicSocketBase::GetInitialSSThresh (void) const
+{
+  return m_tcb->m_initialSsThresh;
+}
+
+void
+QuicSocketBase::SetInitialPacketSize (uint32_t size)
+{
+  NS_ABORT_MSG_IF (size < 1200, "The size of the initial packet should be at least 1200 bytes");
+  m_initialPacketSize = size;
+}
+
+uint32_t
+QuicSocketBase::GetInitialPacketSize () const
+{
+  return m_initialPacketSize;
+}
+
+void QuicSocketBase::SetLatency (uint32_t streamId, Time latency)
+{
+  m_txBuffer->SetLatency (streamId, latency);
+}
+
+Time QuicSocketBase::GetLatency (uint32_t streamId)
+{
+  return m_txBuffer->GetLatency (streamId);
+}
+
+void QuicSocketBase::SetDefaultLatency (Time latency)
+{
+  m_txBuffer->SetDefaultLatency (latency);
+}
+
+Time QuicSocketBase::GetDefaultLatency ()
+{
+  return m_txBuffer->GetDefaultLatency ();
+}
+
+void
+QuicSocketBase::NotifyPacingPerformed (void)
+{
+  NS_LOG_FUNCTION (this);
+  NS_LOG_INFO ("Pacing timer expired, try sending a packet");
+  SendPendingData (m_connected);
+}
+
+} // namespace ns3
diff --git a/src/quic/model/quic-socket-base.h b/src/quic/model/quic-socket-base.h
new file mode 100644
index 000000000..61219e2df
--- /dev/null
+++ b/src/quic/model/quic-socket-base.h
@@ -0,0 +1,854 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *          Umberto Paro <umberto.paro@me.com>
+ *
+ */
+
+#ifndef QUICSOCKETBASE_H
+#define QUICSOCKETBASE_H
+
+#include "ns3/node.h"
+#include "ns3/packet.h"
+#include "ns3/ptr.h"
+#include "ns3/timer.h"
+#include "ns3/socket.h"
+#include "ns3/traced-value.h"
+#include "quic-socket.h"
+#include "ns3/event-id.h"
+#include "quic-socket-rx-buffer.h"
+#include "quic-socket-tx-buffer.h"
+#include "quic-header.h"
+#include "quic-subheader.h"
+#include "quic-transport-parameters.h"
+// #include "ns3/ipv4-end-point.h"
+#include "ns3/tcp-socket-base.h"
+#include "ns3/tcp-congestion-ops.h"
+#include "quic-socket-tx-scheduler.h"
+
+namespace ns3 {
+
+class QuicL5Protocol;
+class QuicL4Protocol;
+
+/**
+ * \brief Data structure that records the congestion state of a connection
+ *
+ * In this data structure, basic informations that should be passed between
+ * socket and the congestion control algorithm are saved.
+ */
+class QuicSocketState : public TcpSocketState
+{
+public:
+  /**
+   * Get the type ID.
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+
+  QuicSocketState ();
+  QuicSocketState (const QuicSocketState &other);
+  virtual  ~QuicSocketState (void)
+  {}
+
+  // Loss Detection variables of interest
+  EventId m_lossDetectionAlarm;            //!< Multi-modal alarm used for loss detection.
+  uint32_t m_handshakeCount;               /**< The number of times the handshake packets have been retransmitted
+                                            *   without receiving an ack. */
+  uint32_t m_tlpCount;                     /**< The number of times a tail loss probe has been sent without
+                                            *   receiving an ack. */
+  uint32_t m_rtoCount;                      //!< The number of times an rto has been sent without receiving an ack.
+  SequenceNumber32 m_largestSentBeforeRto;  //!< The last packet number sent prior to the first retransmission timeout.
+  Time m_timeOfLastSentPacket;              //!< The time the most recent packet was sent.
+  SequenceNumber32 m_largestAckedPacket;    //!< The largest packet number acknowledged in an ACK frame.
+  Time m_latestRtt;                         /**< The most recent RTT measurement made when receiving an ack for a
+                                             *   previously unacked packet. */
+  Time m_smoothedRtt;                       //!< The smoothed RTT of the connection, computed as described in [RFC6298].
+  Time m_rttVar;                            //!< The RTT variance, computed as described in [RFC6298].
+  Time m_minRtt;                            //!< The minimum RTT seen in the connection, ignoring ack delay.
+  Time m_maxAckDelay;                       /**< The maximum ack delay in an incoming ACK frame for this connection.
+                                             *   Excludes ack delays for ack only packets and those that create an
+                                             *   RTT sample less than m_minRtt. */
+  Time m_lossTime;                          /**< The time at which the next packet will be considered lost based
+                                             *   on early transmit or exceeding the reordering window in time. */
+
+  // Congestion Control constants of interests
+  uint32_t m_kMinimumWindow;      //!< Default minimum congestion window.
+  double m_kLossReductionFactor;  //!< Reduction in congestion window when a new loss event is detected.
+
+  // Congestion Control variables of interests
+  SequenceNumber32 m_endOfRecovery;  /**< The largest packet number sent when QUIC detects a loss. When a larger packet
+                                      *   is acknowledged, QUIC exits recovery. */
+
+  // Loss Detection constants of interest
+  uint32_t m_kMaxTLPs;                          //!< Maximum number of tail loss probes before an RTO fires.
+  uint32_t m_kReorderingThreshold;              /**< Maximum reordering in packet number space before FACK style loss
+                                                 *   detection considers a packet lost. */
+  double m_kTimeReorderingFraction;               /**< Maximum reordering in time space before time based loss detection
+                                                 *   considers a packet lost. In fraction of an RTT. */
+  bool m_kUsingTimeLossDetection;               /**< Whether time based loss detection is in use. If false, uses FACK
+                                                 *   style loss detection. */
+  Time m_kMinTLPTimeout;                        //!< Minimum time in the future a tail loss probe alarm may be set for.
+  Time m_kMinRTOTimeout;                        //!< Minimum time in the future an RTO alarm may be set for.
+  Time m_kDelayedAckTimeout;                    //!< The lenght of the peer's delayed ack timer.
+  uint8_t m_alarmType;                          //!< The type of the next alarm
+  Time m_nextAlarmTrigger;                      //<! Time of the next alarm
+  Time m_kDefaultInitialRtt;                    //!< The default RTT used before an RTT sample is taken.
+  uint32_t m_kMaxPacketsReceivedBeforeAckSend;  //!< The number of packets to be received before an ACK is triggered
+
+  // RateSample variables of interest
+  uint64_t              m_delivered       {0};              //!< The total amount of data in bytes delivered so far
+  Time                  m_deliveredTime   {Seconds (0)};    //!< Simulation time when m_delivered was last updated
+  Time                  m_firstSentTime   {Seconds (0)};    //!< The send time of the packet that was most recently marked as delivered
+  uint64_t              m_appLimitedUntil {0};              //!< Connection is application-limited until m_appLimitedUntil > m_delivered
+  uint32_t              m_txItemDelivered {0};              /**< amount of data (in bytes) delivered when last packet
+                                                                marked asdelivered was first sent */
+  uint32_t              m_lastAckedSackedBytes {0};         //!< Size of data sacked in the last ack
+  uint32_t              m_ackBytesSent    {0};              //!< amount of ACK-only bytes sent
+};
+
+/**
+ * \ingroup socket
+ * \ingroup quic
+ *
+ * \brief A base class for implementation a QUIC socket.
+ *
+ * This class mimics the TcpSocketBase class implementation (and documentation).
+ * It contains the essential components of QUIC, as well as a sockets
+ * interface for upper layers to call. This class provides capabilities to
+ * set up a connection, possibly with multiple streams, and manages the life cycle of
+ * the connection. As for the TCP implementation, congestion control
+ * is delegated to subclasses of QuicCongestionOps. In order to mimic the
+ * TcpSocketBase implementation and avoid repeating code, the implementation is
+ * not perfectly compliant with the QUIC Internet Draft; e.g., sequence numbers
+ * are 32 bits long instead of 64. Deviations from the standard are commented
+ *
+ * Congestion control interface
+ * ---------------------------
+ *
+ * Congestion control, as in the TCP implementation, has been split from
+ * QuicSocketBase. The goal is to provide compatibility with the TCP congestion
+ * control implementations, as well as the possibility of extending it with
+ * new QUIC-related capabilities
+ *
+ * Transmission Control Block (TCB)
+ * --------------------------------
+ *
+ * Taking as a reference the TCP implementation, the variables needed to congestion
+ * control classes to operate correctly have been moved inside the QuicSocketState
+ * class. Extending TcpSocketState, the class contains information on both the Quic
+ * and the TCP windows and thresholds as well as the Congestion state machine of TCP.
+ *
+ * Streams
+ * --------------------------------
+ *
+ * Streams in QUIC constitute a lightweight, ordered byte-stream abstraction within a
+ * QUIC connection. The multiplexing/demultiplexing of frames in streams is handled
+ * through L5 Protocol that plays a dispatcher role. Frames are buffered in reception
+ * and in transmission and are processed in QuicStreams according to QUIC semantics.
+ *
+ */
+class QuicSocketBase : public QuicSocket
+{
+public:
+  static const uint16_t MIN_INITIAL_PACKET_SIZE;
+
+  /**
+   * Get the type ID.
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+
+  /**
+   * \brief Get the instance TypeId
+   * \return the instance TypeId
+   */
+  virtual TypeId GetInstanceTypeId () const;
+
+  /**
+   * \brief Build an object. InitializeScheduling() must be called after construction to instantiate the frame scheduler, or the construction will fail
+   *
+   */
+  QuicSocketBase (void);
+  QuicSocketBase (const QuicSocketBase&);
+
+  virtual ~QuicSocketBase (void);
+
+  /**
+   * \brief Install a congestion control algorithm on this socket
+   *
+   * \param algo Algorithm to be installed
+   */
+  void SetCongestionControlAlgorithm (Ptr<TcpCongestionOps> algo);
+
+  /**
+   * \brief Common part of the two Bind(), i.e. set callback to receive data
+   *
+   * \returns 0 on success, -1 on failure
+   */
+  int SetupCallback (void);
+
+  /**
+   * \brief Send the initial handshake command to the other endpoint
+   *
+   * This method sends packets to initiate different handshakes,
+   * according to the type parameters
+   *
+   * \param type the type of handshake (from QuicHeader)
+   * \param quicHeader the QUIC header to be used
+   * \param packet a packet
+   */
+  void SendInitialHandshake (uint8_t type, const QuicHeader &quicHeader,
+                             Ptr<Packet> packet);
+
+  /**
+   * \brief Called by QuicL5Protocol to forward to the socket a control frame.
+   * In this implementation, only ACK, CONNECTION_CLOSE and APPLICATION_CLOSE
+   * are supported.
+   *
+   * \param sub the QuicSubheader of the control frame
+   */
+  void OnReceivedFrame (QuicSubheader &sub);
+
+  /**
+   * \brief Called when an ACK frame is received
+   *
+   * \param sub the QuicSubheader of the ACK frame
+   */
+  void OnReceivedAckFrame (QuicSubheader &sub);
+
+  /**
+   * \brief Called on sending an ACK frame
+   *
+   * \return the generated ACK frame
+   */
+  Ptr<Packet> OnSendingAckFrame ();
+
+  /**
+   * \brief Return an object with the transport parameters of this socket
+   *
+   * \return the transport parameters of the socket
+   */
+  QuicTransportParameters OnSendingTransportParameters ();
+
+  /**
+   * \brief Called when Quic transport parameters are received
+   *
+   * \param transportParameters the received transport parameters
+   */
+  void OnReceivedTransportParameters (QuicTransportParameters transportParameters);
+
+  /**
+   * \brief Add a stream frame to the TX buffer and call SendPendingData
+   *
+   * \param frame a smart pointer to a packet
+   * \return the size of the frame
+   */
+  int AppendingTx (Ptr<Packet> frame);
+
+  /**
+   * \brief Add a stream frame to the RX buffer and call NotifyDataRecv
+   *
+   * \param frame a smart pointer to a packet
+   * \param the RX address
+   * \return the size of the frame added, 0 if the buffer is full
+   */
+  int AppendingRx (Ptr<Packet> frame, Address &address);
+
+  /**
+   * \brief Set the L4 Protocol
+   *
+   * \param quic the L4 Protocol to be set
+   */
+  void SetQuicL4 (Ptr<QuicL4Protocol> quic);
+
+  /**
+   * \brief Initialize socket TX buffer scheduler
+   */
+  void InitializeScheduling ();
+
+  /**
+   * \brief Set the connection ID, e.g., for client-initiated connections
+   *
+   * \param connectionId the connection ID
+   */
+  void SetConnectionId (uint64_t connectionId);
+
+  /**
+   * \brief Get the connection ID
+   *
+   * \return the connection ID
+   */
+  uint64_t GetConnectionId (void) const;
+
+  /**
+   * \brief Set the Quic protocol version
+   *
+   * \param version the Quic protocol version
+   */
+  void SetVersion (uint32_t version);
+
+  /**
+   * \brief Get the available window
+   *
+   * \return the available window
+   */
+  uint32_t AvailableWindow () const;
+
+  /**
+   * \brief Get the connection window
+   *
+   * \return the connection window
+   */
+  uint32_t ConnectionWindow () const;
+
+
+
+  /**
+   * \brief Return total bytes in flight
+   *
+   * \returns total bytes in flight
+   */
+  uint32_t BytesInFlight () const;
+
+  /**
+   * \brief Get the maximum amount of data that can be sent on the connection
+   *
+   * \return the maximum amount of data that can be sent on the connection
+   */
+  uint32_t GetConnectionMaxData () const;
+
+  /**
+   * \brief Set the maximum amount of data that can be sent on the connection
+   *
+   * \param maxData the maximum amount of data that can be sent on the connection
+   */
+  void SetConnectionMaxData (uint32_t maxData);
+
+  /**
+   * \brief Get the maximum amount of data per stream
+   *
+   * 0 means unlimited
+   *
+   * \return the maximum amount of data per stream
+   */
+  uint32_t GetInitialMaxStreamData () const;
+
+  /**
+   * \brief Get the state in the Congestion state machine
+   *
+   * \return the state in the Congestion state machine
+   */
+  QuicSocket::QuicStates_t GetSocketState () const;
+
+  /**
+   * \brief abort the connection due to an error
+   *
+   * \param transportErrorCode the error code
+   * \param a sentence explaining the error
+   * \param applicationClose a bool that signals that the application trigger the abortion
+   */
+  void AbortConnection (uint16_t transportErrorCode, const char* reasonPhrase,
+                        bool applicationClose = false);
+
+  /**
+   * \brief Check if transport parameters are ever being received
+   *
+   * \return true if received, false otherwise
+   */
+  bool GetReceivedTransportParametersFlag () const;
+
+  /**
+   * \brief check if the data received in this connection exceeds MAX_DATA
+   *
+   * \param a vector of pairs with received frames and subheaders
+   * \return a boolean, true if the limit was exceeded
+   */
+  bool CheckIfPacketOverflowMaxDataLimit (std::vector<std::pair<Ptr<Packet>, QuicSubheader> > disgregated);
+
+  /**
+   * \brief Get the maximum of stream ID (i.e., number of streams - 1)
+   *
+   * Consider the maximum between the unidirectional and bidirectional
+   * stream IDs
+   *
+   * \return the maximum stream ID
+   */
+  uint32_t GetMaxStreamId () const;
+
+  /**
+   * \brief return true if the packet that has just been received contains transport params
+   *
+   * \return a boolean, true if the packet that has just been received contains transport params
+   */
+  bool CouldContainTransportParameters () const;
+
+  /**
+   * \brief Get the maximum of stream ID for bidirectional streams (i.e., number of streams - 1)
+   *
+   * Consider bidirectional stream IDs
+   *
+   * \return the maximum bidirectional stream ID
+   */
+  uint32_t GetMaxStreamIdBidirectional () const;
+
+  /**
+   * \brief Get the maximum of stream ID for unidirectional streams (i.e., number of streams - 1)
+   *
+   * Consider unidirectional stream IDs
+   *
+   * \return the maximum unidirectional stream ID
+   */
+  uint32_t GetMaxStreamIdUnidirectional () const;
+
+  /**
+   * \brief Set the socket TX buffer size.
+   *
+   * \param size the buffer size (in bytes)
+   */
+  void SetSocketSndBufSize (uint32_t size);
+
+  /**
+   * \brief Get the socket TX buffer size.
+   é
+   * \returns the buffer size (in bytes)
+   */
+  uint32_t GetSocketSndBufSize (void) const;
+
+  /**
+   * \brief Set the socket RX buffer size.
+   *
+   * \param size the buffer size (in bytes)
+   */
+  void SetSocketRcvBufSize (uint32_t size);
+
+  /**
+   * \brief Get the socket RX buffer size.
+   *
+   * \returns the buffer size (in bytes)
+   */
+  uint32_t GetSocketRcvBufSize (void) const;
+
+  /**
+   * \brief Schedule a queue ACK has if needed
+   */
+  void MaybeQueueAck ();
+
+  /**
+   * \brief Callback function to hook to QuicSocketState congestion window
+   *
+   * \param oldValue old cWnd value
+   * \param newValue new cWnd value
+   */
+  void UpdateCwnd (uint32_t oldValue, uint32_t newValue);
+
+  /**
+   * \brief Callback function to hook to QuicSocketState slow start threshold
+   *
+   * \param oldValue old ssTh value
+   * \param newValue new ssTh value
+   */
+  void UpdateSsThresh (uint32_t oldValue, uint32_t newValue);
+
+  /**
+   * \brief Callback function to hook to QuicSocketState congestion state
+   *
+   * \param oldValue old congestion state value
+   * \param newValue new congestion state value
+   */
+  void UpdateCongState (TcpSocketState::TcpCongState_t oldValue,
+                        TcpSocketState::TcpCongState_t newValue);
+
+  /**
+   * \brief Callback function to hook to QuicSocketState high tx mark
+   *
+   * \param oldValue old high tx mark
+   * \param newValue new high tx mark
+   */
+  void UpdateHighTxMark (SequenceNumber32 oldValue, SequenceNumber32 newValue);
+
+  /**
+   * \brief Callback function to hook to QuicSocketState next tx sequence
+   *
+   * \param oldValue old nextTxSeq value
+   * \param newValue new nextTxSeq value
+   */
+  void UpdateNextTxSequence (SequenceNumber32 oldValue, SequenceNumber32 newValue);
+
+  /**
+   * \brief Set the initial Slow Start Threshold.
+   *
+   * \param threshold the Slow Start Threshold (in bytes)
+   */
+  void SetInitialSSThresh (uint32_t threshold);
+
+  /**
+   * \brief Get the initial Slow Start Threshold.
+   *
+   * \returns the Slow Start Threshold (in bytes)
+   */
+  uint32_t GetInitialSSThresh (void) const;
+
+  /**
+   * \brief Set the size of initial packet of the handshake
+   * It must be at least 1200 bytes
+   *
+   * \param the size in bytes
+   */
+  void SetInitialPacketSize (uint32_t size);
+
+  /**
+   * \brief Get the size of initial packet of the handshake
+   *
+   * \returns the size (in bytes)
+   */
+  uint32_t GetInitialPacketSize (void) const;
+
+  // Implementation of ns3::Socket virtuals
+
+  /**
+   * Send a packet on a stream
+   *
+   * \param p a smart pointer for the packet
+   * \param flags the streamId
+   */
+  virtual int Send (Ptr<Packet> p, uint32_t flags);
+  /**
+   * Send a packet without specifying the stream
+   * Load balancing of the different streams will be applied
+   *
+   * \param p a smart pointer for the packet
+   */
+  virtual int Send (Ptr<Packet> p);
+  virtual int SendTo (Ptr<Packet> p, uint32_t flags, const Address &toAddress);
+  virtual Ptr<Packet> Recv (uint32_t maxSize, uint32_t flags);
+  virtual Ptr<Packet> RecvFrom (uint32_t maxSize, uint32_t flags, Address &fromAddress);
+  virtual int Bind (void);  // Bind a socket by setting up the UDP socket in QuicL4Protocol
+  virtual int Bind (const Address &address);
+  virtual int Bind6 (void);
+  virtual void BindToNetDevice (Ptr<NetDevice> netdevice);
+  virtual void SetSegSize (uint32_t size);
+  virtual uint32_t GetSegSize (void) const;
+  virtual int Listen (void);
+  virtual int Connect (const Address &address);  // Setup endpoint and create the QUIC L5 protocol
+  virtual int Close (void);
+  virtual int ShutdownSend (void);
+  virtual int ShutdownRecv (void);
+  virtual void SetNode (Ptr<Node> node);
+  virtual Ptr<Node> GetNode (void) const;
+  virtual int GetSockName (Address &address) const;
+  virtual int GetPeerName (Address &address) const;
+  virtual uint32_t GetTxAvailable (void) const;
+  virtual uint32_t GetRxAvailable (void) const;
+  virtual enum SocketErrno GetErrno (void) const;
+  virtual enum SocketType GetSocketType (void) const;
+
+  /**
+   * Set the latency bound for a specified stream
+   *
+   * \param streamId The stream ID
+   * \param latency The stream's maximum latency
+   */
+  void SetLatency (uint32_t streamId, Time latency);
+
+  /**
+   * Get the latency bound for a specified stream
+   *
+   * \param streamId The stream ID
+   * \return The stream's maximum latency, or 0 if the stream is not registered
+   */
+  Time GetLatency (uint32_t streamId);
+
+  /**
+   * Set the default latency bound
+   *
+   * \param latency The default maximum latency
+   */
+  void SetDefaultLatency (Time latency);
+
+  /**
+   * Get the default latency bound
+   *
+   * \param streamId The stream ID
+   * \return The default maximum latency
+   */
+  Time GetDefaultLatency ();
+
+  /**
+   * \brief TracedCallback signature for QUIC packet transmission or reception events.
+   *
+   * \param [in] packet The packet.
+   * \param [in] header The QuicHeaders
+   * \param [in] socket This socket
+   */
+  typedef void (*QuicTxRxTracedCallback)(const Ptr<const Packet> packet, const QuicHeader& header,
+                                         const Ptr<const QuicSocketBase> socket);
+
+  /**
+   * \brief TracedCallback signature for QUIC packet loss event detection.
+   *
+   * \param [in] packetsLost The number of packets newly considered lost
+   * \param [in] socket This socket
+   * 
+   */
+  typedef void (*QuicPxLstTracedCallback)(int32_t packetsLost, const Ptr<const QuicSocketBase> socket);
+
+protected:
+  // Implementation of QuicSocket virtuals
+  virtual bool SetAllowBroadcast (bool allowBroadcast);
+  virtual bool GetAllowBroadcast (void) const;
+
+  /**
+   * \brief Creates a Quic L5 Protocol
+   *
+   * \return the created Quic L5 Protocol
+   */
+  Ptr<QuicL5Protocol> CreateStreamController ();
+
+  /**
+   * \brief Set the RTO timer (called when packets or ACKs are sent)
+   */
+  void SetReTxTimeout ();
+
+  /**
+   * \brief Handle what happens in case of an RTO
+   */
+  void ReTxTimeout ();
+
+  /**
+   * \brief Handle retransmission after loss
+   */
+  void DoRetransmit (std::vector<Ptr<QuicSocketTxItem> > lostPackets);
+
+  /**
+   * \brief Extract at most maxSize bytes from the TxBuffer at sequence packetNumber, add the
+   *        QUIC header, and send to QuicL4Protocol
+   *
+   * According to the internal state of the socket, a different header is built.
+   * Sequence numbers should be 64 bits in the QUIC standard, but we use 32 to
+   * be compatible with the TcpSocketBase class
+   *
+   * \param seq the sequence number
+   * \param maxSize the maximum data block to be transmitted (in bytes)
+   * \param withAck forces an ACK to be sent
+   * \returns the number of bytes sent
+   */
+  uint32_t SendDataPacket (SequenceNumber32 packetNumber, uint32_t maxSize,
+                           bool withAck);
+
+  /**
+   * \brief Send a Connection Close frame
+   *
+   * \param errorCode the error code that caused the connection close event
+   * \param phrase human-readable error description
+   * \return 0 on success
+   */
+  uint32_t SendConnectionClosePacket (uint16_t errorCode, std::string phrase);
+
+  /**
+   * \brief Send as much pending data as possible according to the Tx window.
+   *
+   * \param withAck forces an ACK to be sent
+   * \return the number of packets sent
+   */
+  uint32_t SendPendingData (bool withAck = false);
+
+  /**
+   * \brief Perform the real connection tasks: start the initial handshake for non-0-RTT
+   *
+   * \return 0 on success
+   */
+  int DoConnect (void);
+
+  /**
+   * \brief Perform the real connection tasks: start the initial 0-RTT handshake
+   *
+   * \return 0 on success
+   */
+  int DoFastConnect (void);
+
+  /**
+   * \brief Set the socket to IDLE, nullify the callbacks and remove this socket from the QuicL4Protocol
+   *
+   * \return 1 on success
+   */
+  int DoClose (void);
+
+  /**
+   * \brief receive a QUIC packet
+   *
+   * \param p a smart pointer to a packet
+   * \param quicHeader the header of the packet
+   * \param address the Address from which the packet was received
+   */
+  void ReceivedData (Ptr<Packet> p, const QuicHeader& quicHeader,
+                     Address &address);
+
+  /**
+   * \brief Update the state of the internal state machine
+   *
+   * \param the new state
+   */
+  void SetState (TracedValue<QuicStates_t> state);
+
+  /**
+   * \brief Check if a version is supported by the QuicSocket
+   *
+   * \param version the version to be checked
+   */
+  bool IsVersionSupported (uint32_t version);
+
+  /**
+   * \brief Check if there are missing packets in the m_receivedPacketNumbers list
+   *
+   * \return true if there are missing packets
+   */
+  bool HasReceivedMissing ();
+
+  /**
+   * \brief Send an ACK packet
+   */
+  void SendAck ();
+
+  /**
+   * \brief Call Socket::NotifyConnectionSucceeded()
+   */
+  void ConnectionSucceeded (void);
+
+  /**
+   * \brief Notify Pacing
+   */
+  void NotifyPacingPerformed (void);
+  /**
+   * Send the connection close packet and schedule
+   * the DoClose method
+   */
+  void ScheduleCloseAndSendConnectionClosePacket ();
+
+  // Connections to other layers of the Stack
+  Ipv4EndPoint* m_endPoint;      //!< the IPv4 endpoint
+  Ipv6EndPoint* m_endPoint6;     //!< the IPv6 endpoint
+  Ptr<Node> m_node;              //!< The associated node
+  Ptr<QuicL4Protocol> m_quicl4;  //!< The associated L4 Protocol
+  Ptr<QuicL5Protocol> m_quicl5;  //!< The associated L5 Protocol
+
+  // Rx and Tx buffer management
+  Ptr<QuicSocketRxBuffer> m_rxBuffer;                     //!< RX buffer
+  Ptr<QuicSocketTxBuffer> m_txBuffer;                     //!< TX buffer
+  uint32_t m_socketTxBufferSize;                          //!< Size of the socket TX buffer
+  uint32_t m_socketRxBufferSize;                          //!< Size of the socket RX buffer
+  std::vector<SequenceNumber32> m_receivedPacketNumbers;  //!< Received packet number vector
+  TypeId m_schedulingTypeId;                                                      //!< The socket type of the packet scheduler
+  Time m_defaultLatency;                                                                  //!< The default latency bound (only used by the EDF scheduler)
+
+  // State-related attributes
+  TracedValue<QuicStates_t> m_socketState;  //!< State in the Congestion state machine
+  uint16_t m_transportErrorCode;            //!< Quic transport error code
+  bool m_serverBusy;                        //!< If true, server too busy to accept new connections
+  mutable enum SocketErrno m_errno;         //!< Socket error code
+  bool m_connected;                         //!< Check if connection is established
+  uint64_t m_connectionId;                  //!< Connection id
+  uint32_t m_vers;                          //!< Quic protocol version
+  QuicHeader::KeyPhase_t m_keyPhase;        //!< Key phase
+  Time m_lastReceived;                      //!< Time of last received packet
+
+  // Transport Parameters values
+  uint32_t m_initial_max_stream_data;    //!< The initial value for the maximum data that can be sent on any newly created stream
+  uint32_t m_max_data;                   //!< The maximum amount of data that can be sent on the connection
+  uint32_t m_initial_max_stream_id_bidi; //!< The the initial maximum number of application-owned bidirectional streams the peer may initiate
+  TracedValue<Time> m_idleTimeout;       //!< The idle timeout value in seconds
+  bool m_omit_connection_id;             //!< The flag that indicates if the connection id is required in the upcoming connection
+/*uint128_t  m_stateless_reset_token;*/  //!< The stateless reset token
+  uint8_t m_ack_delay_exponent;          //!< The exponent used to decode the ack delay field in the ACK frame
+  uint32_t m_initial_max_stream_id_uni;  //!< The initial maximum number of application-owned unidirectional streams the peer may initiate
+  uint32_t m_maxTrackedGaps;             //!< The maximum number of gaps in an ACK
+
+  // Transport Parameters management
+  bool m_receivedTransportParameters;      //!< Check if Transport Parameters are already been received
+  bool m_couldContainTransportParameters;  //!< Check if in the actual conditions can receive Transport Parameters
+
+  // Timers and Events
+  EventId m_sendPendingDataEvent;             //!< Micro-delay event to send pending data
+  EventId m_retxEvent;                        //!< Retransmission event
+  EventId m_idleTimeoutEvent;                 //!< Event triggered upon receiving or sending a packet, when it expires the connection closes
+  EventId m_drainingPeriodEvent;              //!< Event triggered upon idle timeout or immediate connection close, when it expires all closes
+  TracedValue<Time> m_rto;                    //!< Retransmit timeout
+  TracedValue<Time> m_drainingPeriodTimeout;  //!< Draining Period timeout
+  EventId m_sendAckEvent;                     //!< Send ACK timeout event
+  EventId m_delAckEvent;                      //!< Delayed ACK timeout event
+  bool m_flushOnClose;                        //!< Control behavior on connection close
+  bool m_closeOnEmpty;                        //!< True if the socket will close after sending the buffered packets
+
+  // Congestion Control
+  Ptr<QuicSocketState> m_tcb;                     //!< Congestion control informations
+  Ptr<TcpCongestionOps> m_congestionControl;      //!< Congestion control
+  TracedValue<Time> m_lastRtt;                                 //!< Latest measured RTT
+  bool m_quicCongestionControlLegacy;             //!< Quic Congestion control if true, TCP Congestion control if false
+  bool m_queue_ack;                               //!< Indicates a request for a queue ACK if true
+  uint32_t m_numPacketsReceivedSinceLastAckSent;  //!< Number of packets received since last ACK sent
+  uint32_t m_lastMaxData;                                                 //!< Last MaxData ACK
+  uint32_t m_maxDataInterval;                                     //!< Interval between successive MaxData frames in ACKs
+
+  uint32_t m_initialPacketSize; //!< size of the first packet to be sent durin the handshake (at least 1200 bytes, per RFC)
+
+  // Pacing timer
+  Timer m_pacingTimer       {Timer::REMOVE_ON_DESTROY}; //!< Pacing Event
+
+  /**
+  * \brief Callback pointer for cWnd trace chaining
+  */
+  TracedCallback<uint32_t, uint32_t> m_cWndTrace;
+
+  /**
+  * \brief Callback pointer for ssTh trace chaining
+  */
+  TracedCallback<uint32_t, uint32_t> m_ssThTrace;
+
+  /**
+  * \brief Callback pointer for congestion state trace chaining
+  */
+  TracedCallback<TcpSocketState::TcpCongState_t, TcpSocketState::TcpCongState_t> m_congStateTrace;
+
+  /**
+  * \brief Callback pointer for high transmission mark trace chaining
+  */
+  TracedCallback<uint32_t, uint32_t> m_highTxMarkTrace;
+
+  /**
+  * \brief Callback pointer for tx sequence trace chaining
+  */
+  TracedCallback<uint32_t, uint32_t> m_nextTxSequenceTrace;
+
+  // The following two traces pass a packet with a QUIC header
+  TracedCallback<Ptr<const Packet>, const QuicHeader&,
+                 Ptr<const QuicSocketBase> > m_txTrace; //!< Trace of transmitted packets
+
+  TracedCallback<Ptr<const Packet>, const QuicHeader&,
+                 Ptr<const QuicSocketBase> > m_rxTrace; //!< Trace of received packets
+
+  TracedCallback<int32_t, Ptr<const QuicSocketBase>> m_pxLstTrace; //!< Trace of lost packets
+
+};
+
+} //namespace ns3
+#endif /* QUIC_SOCKET_BASE_H_ */
diff --git a/src/quic/model/quic-socket-factory.cc b/src/quic/model/quic-socket-factory.cc
new file mode 100644
index 000000000..013724aef
--- /dev/null
+++ b/src/quic/model/quic-socket-factory.cc
@@ -0,0 +1,79 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *
+ */
+
+#include "quic-socket-factory.h"
+#include "ns3/socket.h"
+#include "ns3/assert.h"
+#include "ns3/log.h"
+
+
+namespace ns3 {
+NS_LOG_COMPONENT_DEFINE ("QuicSocketFactory");
+
+NS_OBJECT_ENSURE_REGISTERED (QuicSocketFactory);
+
+TypeId QuicSocketFactory::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicSocketFactory")
+    .SetParent<SocketFactory> ()
+    .SetGroupName ("Internet")
+    .AddConstructor<QuicSocketFactory> ()
+  ;
+  return tid;
+}
+
+QuicSocketFactory::QuicSocketFactory ()
+  : m_quicl4 (0)
+{
+  NS_LOG_INFO ("Creating QuicSocketFactory");
+  m_sockets = std::vector<Ptr<QuicSocketBase> > ();
+}
+
+QuicSocketFactory::~QuicSocketFactory ()
+{
+  NS_LOG_INFO ("Destroying QuicSocketFactory");
+  NS_ASSERT (m_quicl4 == 0);
+}
+
+void
+QuicSocketFactory::SetQuicL4 (Ptr<QuicL4Protocol> quic)
+{
+  m_quicl4 = quic;
+}
+
+Ptr<Socket>
+QuicSocketFactory::CreateSocket (void)
+{
+  NS_LOG_INFO ("QuicSocketFactory -- creating socket");
+  return m_quicl4->CreateSocket ();
+}
+
+void
+QuicSocketFactory::DoDispose (void)
+{
+  m_quicl4 = 0;
+  SocketFactory::DoDispose ();
+}
+
+} // namespace ns3
diff --git a/src/quic/model/quic-socket-factory.h b/src/quic/model/quic-socket-factory.h
new file mode 100644
index 000000000..5f47d1183
--- /dev/null
+++ b/src/quic/model/quic-socket-factory.h
@@ -0,0 +1,84 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *
+ */
+
+#ifndef QUICSOCKETFACTORY_H
+#define QUICSOCKETFACTORY_H
+
+#include "ns3/socket-factory.h"
+#include "quic-socket-base.h"
+#include "ns3/node.h"
+#include "quic-l4-protocol.h"
+
+namespace ns3 {
+
+/**
+ * \ingroup socket
+ * \ingroup quic
+ *
+ * \brief API to create QUIC socket instances
+ *
+ * This class defines the API for QUIC socket factory.
+ * All QUIC socket factoty implementations must provide an implementation
+ * of CreateSocket below.
+ *
+ */
+class QuicSocketFactory : public SocketFactory
+{
+public:
+  QuicSocketFactory ();
+  virtual ~QuicSocketFactory ();
+
+  /**
+   * Get the type ID.
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+
+  /**
+   * \brief Implements a method to create a QUIC-based socket and return a base class smart pointer to the socket
+   *
+   * \return smart pointer to Socket
+   */
+  virtual Ptr<Socket> CreateSocket (void);
+
+  /**
+   * \brief Set the associated QUIC L4 protocol.
+   *
+   * \param quic the QUIC L4 protocol
+   */
+  void SetQuicL4 (Ptr<QuicL4Protocol> quic);
+
+protected:
+  virtual void DoDispose (void);
+
+private:
+  Ptr<QuicL4Protocol> m_quicl4;                 //!< The associated QUIC L4 protocol
+  std::vector<Ptr<QuicSocketBase> > m_sockets;  //!< The list of QuicSocketBase
+
+};
+
+} // namespace ns3
+
+#endif /* QUIC_SOCKET_FACTORY_H */
diff --git a/src/quic/model/quic-socket-rx-buffer.cc b/src/quic/model/quic-socket-rx-buffer.cc
new file mode 100644
index 000000000..f325dae14
--- /dev/null
+++ b/src/quic/model/quic-socket-rx-buffer.cc
@@ -0,0 +1,219 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *
+ */
+
+#include "ns3/packet.h"
+#include "ns3/fatal-error.h"
+#include "ns3/log.h"
+#include "quic-socket-rx-buffer.h"
+// #include "ns3/ipv4-end-point-demux.h"
+// #include "ns3/ipv6-end-point-demux.h"
+// #include "ns3/ipv4-end-point.h"
+// #include "ns3/ipv6-end-point.h"
+// #include "ns3/ipv4-l3-protocol.h"
+// #include "ns3/ipv6-l3-protocol.h"
+// #include "ns3/ipv6-routing-protocol.h"
+#include <algorithm>
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("QuicSocketRxBuffer");
+
+QuicSocketRxItem::QuicSocketRxItem ()
+  : m_packet (0),
+  m_offset (0),
+  m_fin (false)
+{
+}
+
+QuicSocketRxItem::QuicSocketRxItem (const QuicSocketRxItem &other)
+  : m_packet (other.m_packet),
+  m_offset (other.m_offset),
+  m_fin (other.m_fin)
+{
+}
+
+void
+QuicSocketRxItem::Print (std::ostream &os) const
+{
+  os << "[OFF " << m_offset << "]";
+
+  if (m_fin)
+    {
+      os << "|fin|";
+    }
+
+}
+
+NS_OBJECT_ENSURE_REGISTERED (QuicSocketRxBuffer);
+
+TypeId
+QuicSocketRxBuffer::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicSocketRxBuffer")
+    .SetParent<Object> ()
+    .SetGroupName ("Internet")
+    .AddConstructor<QuicSocketRxBuffer> ()
+  ;
+  return tid;
+}
+
+QuicSocketRxBuffer::QuicSocketRxBuffer ()
+  : m_recvSize (0),
+  m_recvSizeTot (0),
+  m_maxBuffer (32768)
+{
+  m_socketRecvList = QuicSocketRxPacketList ();
+}
+
+QuicSocketRxBuffer::~QuicSocketRxBuffer ()
+{
+}
+
+bool
+QuicSocketRxBuffer::Add (Ptr<Packet> p)
+{
+  NS_LOG_FUNCTION (this << p);
+
+  NS_LOG_INFO (
+    "Try to append " << p->GetSize () << " bytes " << ", availSize=" << Available ());
+
+  if (p->GetSize () <= Available ())
+    {
+      if (p->GetSize () > 0)
+        {
+          m_socketRecvList.insert (m_socketRecvList.end (), p->Copy ());
+          m_recvSize += p->GetSize ();
+          m_recvSizeTot += p->GetSize ();
+
+          NS_LOG_INFO ("Update: Received Size = " << m_recvSize);
+          return true;
+        }
+      else
+        {
+          NS_LOG_WARN ("Discarded. Try to insert empty packet.");
+          return false;
+        }
+    }
+  NS_LOG_WARN ("Rejected. Not enough room to buffer packet.");
+  return false;
+}
+
+Ptr<Packet>
+QuicSocketRxBuffer::Extract (uint32_t maxSize)
+{
+  NS_LOG_FUNCTION (this << maxSize);
+
+  uint32_t extractSize = std::min (maxSize, m_recvSize);
+  NS_LOG_INFO (
+    "Requested to extract " << extractSize << " bytes from QuicSocketRxBuffer of size=" << m_recvSize);
+
+  if (extractSize == 0)
+    {
+      return 0;
+    }
+
+  Ptr<Packet> outPkt = Create<Packet> ();
+
+  QuicSocketRxPacketList::iterator it = m_socketRecvList.begin ();
+
+  while (extractSize > 0 && !m_socketRecvList.empty () && it != m_socketRecvList.end ())
+    {
+      it = m_socketRecvList.begin ();
+      Ptr<Packet> currentPacket = *it;
+
+      if (currentPacket->GetSize () + outPkt->GetSize () <= extractSize)   // Merge
+        {
+
+          outPkt->AddAtEnd ((*it));
+          m_socketRecvList.erase (it);
+
+          m_recvSize -= (*it)->GetSize ();
+          extractSize -= (*it)->GetSize ();
+          NS_LOG_LOGIC ("Added packet of size " << (*it)->GetSize ());
+          continue;
+        }
+      else
+        {
+          break;
+        }
+
+      it++;
+    }
+
+  if (outPkt->GetSize () == 0)
+    {
+      NS_LOG_LOGIC ("Nothing extracted.");
+      return 0;
+    }
+  NS_LOG_INFO (
+    "Extracted " << outPkt->GetSize () << " bytes from QuicSocketRxBuffer. New buffer size=" << m_recvSize);
+  return outPkt;
+}
+
+uint32_t
+QuicSocketRxBuffer::Available (void) const
+{
+  return m_maxBuffer - m_recvSize;
+}
+
+uint32_t
+QuicSocketRxBuffer::GetMaxBufferSize (void) const
+{
+  return m_maxBuffer;
+}
+
+uint32_t
+QuicSocketRxBuffer::Size (void) const
+{
+  NS_LOG_FUNCTION (this);
+
+  return m_recvSize;
+}
+
+void
+QuicSocketRxBuffer::SetMaxBufferSize (uint32_t s)
+{
+  m_maxBuffer = s;
+}
+
+void
+QuicSocketRxBuffer::Print (std::ostream & os) const
+{
+  NS_LOG_FUNCTION (this);
+  QuicSocketRxBuffer::QuicSocketRxPacketList::const_iterator it;
+  std::stringstream ss;
+  std::stringstream as;
+
+  for (it = m_socketRecvList.begin (); it != m_socketRecvList.end (); ++it)
+    {
+      (*it)->Print (ss);
+    }
+
+  os << "Socket Recv list: \n" << ss.str () << "\n\nCurrent Status: "
+     << "\nNumber of receptions = " << m_socketRecvList.size ()
+     << "\nReceived Size = " << m_recvSize;
+
+}
+
+} //namepsace ns3
diff --git a/src/quic/model/quic-socket-rx-buffer.h b/src/quic/model/quic-socket-rx-buffer.h
new file mode 100644
index 000000000..b9c5cc3c6
--- /dev/null
+++ b/src/quic/model/quic-socket-rx-buffer.h
@@ -0,0 +1,165 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *
+ */
+
+#ifndef QUICSOCKETRXBUFFER_H
+#define QUICSOCKETRXBUFFER_H
+
+#include <map>
+#include "ns3/traced-value.h"
+#include "ns3/trace-source-accessor.h"
+#include "ns3/sequence-number.h"
+#include "ns3/ptr.h"
+#include "quic-header.h"
+#include "quic-subheader.h"
+#include "quic-l5-protocol.h"
+#include "ns3/object.h"
+
+namespace ns3 {
+
+/**
+ * \ingroup quic
+ *
+ * \brief Item that encloses the received Quic Stream frame
+ */
+class QuicSocketRxItem
+{
+public:
+  QuicSocketRxItem ();
+  QuicSocketRxItem (const QuicSocketRxItem &other);
+
+  /**
+   * \brief Print the Item
+   * \param os ostream
+   */
+  void Print (std::ostream &os) const;
+
+  /**
+   * Comparison operator
+   * \param other rhs operand
+   * \return true if the rhs operand offset is greater than the lhs one
+   */
+  bool operator< (const QuicSocketRxItem& other)
+  {
+    return m_offset < other.m_offset;
+  }
+
+  /**
+   * Equal operator
+   * \param other rhs operand
+   * \return true if the operands are equal
+   */
+  bool operator== (const QuicSocketRxItem& other)
+  {
+    return (this->m_offset == other.m_offset) and (this->m_fin == other.m_fin) and (this->m_packet == other.m_packet);
+  }
+
+  Ptr<Packet> m_packet;  //!< Stream Frame
+  uint64_t m_offset;     //!< Offset of the Stream Frame
+  bool m_fin;            //!< FIN bit of the Stream Frame
+};
+
+/**
+ * \ingroup quic
+ *
+ * \brief Rx socket buffer for QUIC
+ */
+class QuicSocketRxBuffer : public Object
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+
+  QuicSocketRxBuffer ();
+  virtual ~QuicSocketRxBuffer ();
+
+  /**
+   * Print the buffer information to a string,
+   * including the list of received packets
+   *
+   * \param os the std::ostream object
+   */
+  void Print (std::ostream & os) const;
+
+  /**
+   * Get the buffer occupancy in bytes
+   *
+   * \return the buffer occupancy in bytes
+   */
+  uint32_t Size (void) const;
+
+  /**
+   * Get the maximum buffer size
+   *
+   * \return the buffer size
+   */
+  uint32_t GetMaxBufferSize (void) const;
+
+  /**
+   * Set the maximum buffer size
+   *
+   * \param s the new buffer size
+   */
+  void SetMaxBufferSize (uint32_t s);
+
+  /**
+   * Return the available space in the buffer
+   *
+   * \return the available buffer memory
+   */
+  uint32_t Available () const;
+
+  /**
+   * Add a packet in the buffer
+   *
+   * \param p a pointer to the packet
+   * \return true if the insertion was successful
+   */
+  bool Add (Ptr<Packet> p);
+
+  /**
+   * Try to extract maxSize bytes from the buffer
+   *
+   * \param maxSize the number of bytes to extract
+   * \return a smart pointer to the packet; a pointer to 0 if there is no data to extract
+   * (or the first packet in the buffer is larger than maxSize)
+   */
+  Ptr<Packet> Extract (uint32_t maxSize);
+
+private:
+  typedef std::vector<QuicSocketRxItem*> QuicStreamRxPacketList;  //!< Container for data stored in the buffer
+  typedef std::vector<Ptr<Packet> > QuicSocketRxPacketList;       //!< Container for data stored in the buffer
+
+  QuicSocketRxPacketList m_socketRecvList;  //!< List of received packets with additional info
+  uint32_t m_recvSize;                      //!< Current buffer occupancy
+  uint32_t m_recvSizeTot;                   //!< Total number of bytes received
+  uint32_t m_maxBuffer;                     //!< Maximum buffer size
+
+};
+
+} //namepsace ns3
+
+#endif /* QUIC_SOCKET_RX_BUFFER_H */
diff --git a/src/quic/model/quic-socket-tx-buffer.cc b/src/quic/model/quic-socket-tx-buffer.cc
new file mode 100644
index 000000000..4f0c82ea9
--- /dev/null
+++ b/src/quic/model/quic-socket-tx-buffer.cc
@@ -0,0 +1,865 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2020 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *
+ */
+
+#include "quic-socket-tx-buffer.h"
+
+#include <algorithm>
+#include <iostream>
+#include <sstream>
+#include "ns3/simulator.h"
+
+#include "ns3/packet.h"
+#include "ns3/log.h"
+#include "ns3/abort.h"
+#include "quic-subheader.h"
+#include "quic-socket-base.h"
+#include "quic-socket-tx-scheduler.h"
+#include "quic-socket-tx-edf-scheduler.h"
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("QuicSocketTxBuffer");
+
+TypeId QuicSocketTxItem::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicSocketTxItem")
+    .SetParent<Object>()
+    .SetGroupName ("Internet")
+    .AddConstructor<QuicSocketTxItem>()
+//    .AddTraceSource ("UnackSequence",
+//                     "First unacknowledged sequence number (SND.UNA)",
+//                     MakeTraceSourceAccessor (&QuicSocketTxBuffer::m_sentSize),
+//                     "ns3::SequenceNumber32TracedValueCallback")
+  ;
+  return tid;
+}
+
+QuicSocketTxItem::QuicSocketTxItem () 
+  : m_packet (0), 
+    m_packetNumber (0), 
+    m_lost (false), 
+    m_retrans (false), 
+    m_sacked (false), 
+    m_acked (false), 
+    m_isStream (false), 
+    m_isStream0 (false), 
+    m_lastSent (Time::Min ())
+{
+  m_generated = Simulator::Now ();
+}
+
+QuicSocketTxItem::QuicSocketTxItem (const QuicSocketTxItem &other)
+  : m_packet (other.m_packet),
+    m_packetNumber (other.m_packetNumber), 
+    m_lost (other.m_lost), 
+    m_retrans (other.m_retrans), 
+    m_sacked (other.m_sacked), 
+    m_acked (other.m_acked), 
+    m_isStream (other.m_isStream), 
+    m_isStream0 (other.m_isStream0), 
+    m_lastSent (other.m_lastSent), 
+    m_generated (other.m_generated)
+{
+  m_packet = other.m_packet->Copy ();
+}
+
+void QuicSocketTxItem::Print (std::ostream &os) const
+{
+  NS_LOG_FUNCTION (this);
+  os << "[SN " << m_packetNumber.GetValue () << " - Last Sent: " << m_lastSent
+     << " size " << m_packet->GetSize () << "]";
+
+  if (m_lost)
+    {
+      os << "|lost|";
+    }
+  if (m_retrans)
+    {
+      os << "|retr|";
+    }
+  if (m_sacked)
+    {
+      os << "|ackd|";
+    }
+}
+
+void QuicSocketTxItem::MergeItems (QuicSocketTxItem &t1, QuicSocketTxItem &t2)
+{
+
+  if (t1.m_sacked == true && t2.m_sacked == true)
+    {
+      t1.m_sacked = true;
+    }
+  else
+    {
+      t1.m_sacked = false;
+    }
+  if (t1.m_acked == true && t2.m_acked == true)
+    {
+      t1.m_acked = true;
+    }
+  else
+    {
+      t1.m_acked = false;
+    }
+
+  if (t2.m_retrans == true && t1.m_retrans == false)
+    {
+      t1.m_retrans = true;
+    }
+  if (t1.m_lastSent < t2.m_lastSent)
+    {
+      t1.m_lastSent = t2.m_lastSent;
+    }
+  if (t2.m_lost)
+    {
+      t1.m_lost = true;
+    }
+  if (t1.m_ackTime > t2.m_ackTime)
+    {
+      t1.m_ackTime = t2.m_ackTime;
+    }
+  if (t1.m_generated > t2.m_generated)
+    {
+      t1.m_generated = t2.m_generated;
+    }
+
+  t1.m_packet->AddAtEnd (t2.m_packet);
+}
+
+void QuicSocketTxItem::SplitItems (QuicSocketTxItem &t1, QuicSocketTxItem &t2,
+                                   uint32_t size)
+{
+  uint32_t initialSize = t1.m_packet->GetSize ();
+
+  t2.m_sacked = t1.m_sacked;
+  t2.m_retrans = t1.m_retrans;
+  t2.m_lastSent = t1.m_lastSent;
+  t2.m_lost = t1.m_lost;
+  if (t1.m_lastSent < t2.m_lastSent)
+    {
+      t1.m_lastSent = t2.m_lastSent;
+    }
+  if (t2.m_lost)
+    {
+      t1.m_lost = true;
+    }
+  t2.m_generated = t1.m_generated;
+  // Copy the packet into t2
+  t2.m_packet = t1.m_packet->Copy ();
+  // Remove the first size bytes from t2
+  t2.m_packet->RemoveAtStart (size);
+
+  // Change subheader
+  QuicSubheader qsb;
+  t1.m_packet->RemoveHeader (qsb);
+  qsb.SetLength (t1.m_packet->GetSize () - size);
+  t1.m_packet->AddHeader (qsb);
+
+  NS_ASSERT_MSG (t2.m_packet->GetSize () == initialSize - size,
+                 "Wrong size " << t2.m_packet->GetSize ());
+  qsb.SetLength (t2.m_packet->GetSize ());
+  t2.m_packet->AddHeader (qsb);
+  // Remove the bytes from size to end from t1
+  t1.m_packet->RemoveAtEnd (t1.m_packet->GetSize () - size);
+  NS_ASSERT_MSG (t1.m_packet->GetSize () == size,
+                 "Wrong size " << t1.m_packet->GetSize ());
+}
+
+NS_OBJECT_ENSURE_REGISTERED (QuicSocketTxBuffer);
+
+TypeId QuicSocketTxBuffer::GetTypeId (void)
+{
+  static TypeId tid =
+    TypeId ("ns3::QuicSocketTxBuffer").SetParent<Object>().SetGroupName (
+      "Internet").AddConstructor<QuicSocketTxBuffer>()
+//    .AddTraceSource ("UnackSequence",
+//                     "First unacknowledged sequence number (SND.UNA)",
+//                     MakeTraceSourceAccessor (&QuicSocketTxBuffer::m_sentSize),
+//                     "ns3::SequenceNumber32TracedValueCallback")
+  ;
+  return tid;
+}
+
+QuicSocketTxBuffer::QuicSocketTxBuffer () :
+  m_maxBuffer (32768), m_streamZeroSize (0), m_sentSize (0), m_numFrameStream0InBuffer (
+    0)
+{
+  m_streamZeroList = QuicTxPacketList ();
+  m_sentList = QuicTxPacketList ();
+}
+
+QuicSocketTxBuffer::~QuicSocketTxBuffer (void)
+{
+  QuicTxPacketList::iterator it;
+
+  m_sentList = QuicTxPacketList ();
+  m_streamZeroList = QuicTxPacketList ();
+  m_sentSize = 0;
+  m_streamZeroSize = 0;
+}
+
+void QuicSocketTxBuffer::Print (std::ostream &os) const
+{
+  NS_LOG_FUNCTION (this);
+  QuicSocketTxBuffer::QuicTxPacketList::const_iterator it;
+  std::stringstream ss;
+  std::stringstream as;
+
+  for (it = m_sentList.begin (); it != m_sentList.end (); ++it)
+    {
+      (*it)->Print (ss);
+    }
+
+  for (it = m_streamZeroList.begin (); it != m_streamZeroList.end (); ++it)
+    {
+      (*it)->Print (as);
+    }
+
+  os << Simulator::Now ().GetSeconds () << "\nStream 0 list: \n" << as.str ()
+     << "\n\nSent list: \n" << ss.str () << "\n\nCurrent Status: "
+     << "\nNumber of transmissions = " << m_sentList.size ()
+     << "\nSent Size = " << m_sentSize
+     << "\nNumber of stream 0 packets waiting = "
+     << m_streamZeroList.size () << "\nStream 0 waiting packet size = "
+     << m_streamZeroSize;
+}
+
+bool QuicSocketTxBuffer::Add (Ptr<Packet> p)
+{
+  NS_LOG_FUNCTION (this << p);
+  QuicSubheader qsb;
+  uint32_t headerSize = p->PeekHeader (qsb);
+  NS_LOG_INFO (
+    "Try to append " << p->GetSize () << " bytes " << ", availSize=" << Available () << " offset " << qsb.GetOffset () << " on stream " << qsb.GetStreamId ());
+
+  if (p->GetSize () <= Available ())
+    {
+      if (p->GetSize () > 0)
+        {
+          Ptr<QuicSocketTxItem> item = CreateObject<QuicSocketTxItem> ();
+          item->m_packet = p;
+          // check to which stream this packet belongs to
+          uint32_t streamId = 0;
+          bool isStream = false;
+          if (headerSize)
+            {
+              streamId = qsb.GetStreamId ();
+              isStream = qsb.IsStream ();
+            }
+          else
+            {
+              NS_ABORT_MSG ("No QuicSubheader in this QUIC frame " << p);
+            }
+          item->m_isStream = isStream;
+          item->m_isStream0 = (streamId == 0);
+          m_numFrameStream0InBuffer += (streamId == 0);
+          if (streamId == 0)
+            {
+              m_streamZeroList.insert (m_streamZeroList.end (), item);
+              m_streamZeroSize += item->m_packet->GetSize ();
+            }
+          else
+            {
+              m_scheduler->Add (item, false);
+            }
+
+          NS_LOG_INFO (
+            "Update: Application Size = " << m_scheduler->AppSize () << ", offset " << qsb.GetOffset ());
+          return true;
+        }
+      else
+        {
+          NS_LOG_WARN ("Discarded. Try to insert empty packet.");
+          return false;
+        }
+    }
+  NS_LOG_WARN ("Rejected. Not enough room to buffer packet.");
+  return false;
+}
+
+Ptr<Packet> QuicSocketTxBuffer::NextStream0Sequence (
+  const SequenceNumber32 seq)
+{
+  NS_LOG_FUNCTION (this << seq);
+
+  Ptr<QuicSocketTxItem> outItem = CreateObject<QuicSocketTxItem> ();
+
+  QuicTxPacketList::iterator it = m_streamZeroList.begin ();
+  if (it != m_streamZeroList.end ())
+    {
+      Ptr<Packet> currentPacket = (*it)->m_packet;
+      outItem->m_packetNumber = seq;
+      outItem->m_lastSent = Now ();
+      outItem->m_packet = currentPacket;
+      outItem->m_isStream0 = (*it)->m_isStream0;
+      m_streamZeroList.erase (it);
+      m_streamZeroSize -= currentPacket->GetSize ();
+      m_sentList.insert (m_sentList.end (), outItem);
+      m_sentSize += outItem->m_packet->GetSize ();
+      --m_numFrameStream0InBuffer;
+      Ptr<Packet> toRet = outItem->m_packet;
+      return toRet;
+    }
+  return 0;
+}
+
+Ptr<Packet> QuicSocketTxBuffer::NextSequence (uint32_t numBytes,
+                                              const SequenceNumber32 seq)
+{
+  NS_LOG_FUNCTION (this << numBytes << seq);
+
+  Ptr<QuicSocketTxItem> outItem = GetNewSegment (numBytes);
+
+  if (outItem != nullptr)
+    {
+      NS_LOG_INFO ("Extracting " << outItem->m_packet->GetSize () << " bytes");
+      outItem->m_packetNumber = seq;
+      outItem->m_lastSent = Now ();
+      Ptr<Packet> toRet = outItem->m_packet;
+      return toRet;
+    }
+  else
+    {
+      NS_LOG_INFO ("Empty packet");
+      return Create<Packet>();
+    }
+
+}
+
+Ptr<QuicSocketTxItem> QuicSocketTxBuffer::GetNewSegment (uint32_t numBytes)
+{
+  NS_LOG_FUNCTION (this << numBytes);
+
+  Ptr<QuicSocketTxItem> outItem = m_scheduler->GetNewSegment (numBytes);
+
+  if (outItem->m_packet->GetSize () > 0)
+    {
+      NS_LOG_LOGIC ("Adding packet to sent buffer");
+      m_sentList.insert (m_sentList.end (), outItem);
+      m_sentSize += outItem->m_packet->GetSize ();
+    }
+
+  NS_LOG_INFO (
+    "Update: Sent Size = " << m_sentSize << " remaining App Size " << m_scheduler->AppSize () << " object size " << outItem->m_packet->GetSize ());
+
+  //Print(std::cout);
+
+  return outItem;
+}
+
+std::vector<Ptr<QuicSocketTxItem> > QuicSocketTxBuffer::OnAckUpdate (
+  Ptr<TcpSocketState> tcb, const uint32_t largestAcknowledged,
+  const std::vector<uint32_t> &additionalAckBlocks,
+  const std::vector<uint32_t> &gaps)
+{
+  NS_LOG_FUNCTION (this);
+  std::vector<uint32_t> compAckBlocks = additionalAckBlocks;
+  std::vector<uint32_t> compGaps = gaps;
+
+  std::vector<Ptr<QuicSocketTxItem> > newlyAcked;
+  Ptr<QuicSocketState> tcbd = dynamic_cast<QuicSocketState*> (&(*tcb));
+
+  compAckBlocks.insert (compAckBlocks.begin (), largestAcknowledged);
+  uint32_t ackBlockCount = compAckBlocks.size ();
+
+  std::vector<uint32_t>::const_iterator ack_it = compAckBlocks.begin ();
+  std::vector<uint32_t>::const_iterator gap_it = compGaps.begin ();
+
+  std::stringstream gap_print;
+  for (auto i = gaps.begin (); i != gaps.end (); ++i)
+    {
+      gap_print << (*i) << " ";
+    }
+
+  std::stringstream block_print;
+  for (auto i = compAckBlocks.begin (); i != compAckBlocks.end (); ++i)
+    {
+      block_print << (*i) << " ";
+    }
+
+  NS_LOG_INFO (
+    "Largest ACK: " << largestAcknowledged << ", blocks: " << block_print.str () << ", gaps: " << gap_print.str ());
+
+  // Iterate over the ACK blocks and gaps
+  for (uint32_t numAckBlockAnalyzed = 0; numAckBlockAnalyzed < ackBlockCount;
+       ++numAckBlockAnalyzed, ++ack_it, ++gap_it)
+    {
+      for (auto sent_it = m_sentList.rbegin ();
+           sent_it != m_sentList.rend () and !m_sentList.empty (); ++sent_it)                    // Visit sentList in reverse Order for optimization
+        {
+          NS_LOG_LOGIC (
+            "Consider packet " << (*sent_it)->m_packetNumber << " (ACK block " << SequenceNumber32 ((*ack_it)) << ")");
+          // The packet is in the next gap
+          bool inGap = (gap_it < compGaps.end ())
+            && ((*sent_it)->m_packetNumber
+                <= SequenceNumber32 ((*gap_it)));
+          if (inGap)               // Just for optimization we suppose All is perfectly ordered
+            {
+              NS_LOG_LOGIC (
+                "Packet " << (*sent_it)->m_packetNumber << " missing");
+              break;
+            }
+          // The packet is in the current block: ACK it
+          NS_LOG_LOGIC ("Packet " << (*sent_it)->m_packetNumber << " ACKed");
+          bool notInGap =
+            ((gap_it >= compGaps.end ())
+             || ((*sent_it)->m_packetNumber
+                 > SequenceNumber32 ((*gap_it))));
+
+          if ((*sent_it)->m_packetNumber <= SequenceNumber32 ((*ack_it))
+              and notInGap and (*sent_it)->m_sacked == false)
+            {
+              (*sent_it)->m_sacked = true;
+              (*sent_it)->m_ackTime = Now ();
+              newlyAcked.push_back ((*sent_it));
+              UpdateRateSample ((*sent_it));
+            }
+
+        }
+    }
+  NS_LOG_LOGIC ("Mark lost packets");
+  // Mark packets as lost as in RFC (Sec. 4.2.1 of draft-ietf-quic-recovery-15)
+  uint32_t index = m_sentList.size ();
+  bool lost = false;
+  bool outstanding = false;
+  auto acked_it = m_sentList.rend ();
+  // Iterate over the sent packet list in reverse
+  for (auto sent_it = m_sentList.rbegin ();
+       sent_it != m_sentList.rend () and !m_sentList.empty ();
+       ++sent_it, --index)
+    {
+      // All previous packets are lost
+      if (lost)
+        {
+          if (!(*sent_it)->m_sacked)
+            {
+              (*sent_it)->m_lost = true;
+              NS_LOG_LOGIC (
+                "Packet " << (*sent_it)->m_packetNumber << " lost");
+            }
+        }
+      else
+        {
+          // The packet is the last ACKed packet
+          if ((*sent_it)->m_packetNumber.GetValue () == largestAcknowledged)
+            {
+              // Mark the packet as ACKed
+              acked_it = sent_it;
+              outstanding = true;
+            }
+          else if (outstanding && !(*sent_it)->m_sacked)
+            {
+              //ACK-based detection
+              if (largestAcknowledged - (*sent_it)->m_packetNumber.GetValue ()
+                  >= tcbd->m_kReorderingThreshold)
+                {
+                  (*sent_it)->m_lost = true;
+                  lost = true;
+                  NS_LOG_INFO (
+                    "Largest ACK " << largestAcknowledged << ", lost packet " << (*sent_it)->m_packetNumber.GetValue () << " - reordering " << tcbd->m_kReorderingThreshold);
+                }
+              // Time-based detection (optional)
+              if (tcbd->m_kUsingTimeLossDetection)
+                {
+                  double lhsComparison = ((*acked_it)->m_ackTime
+                                          - (*sent_it)->m_lastSent).GetSeconds ();
+                  double rhsComparison = tcbd->m_kTimeReorderingFraction
+                    * tcbd->m_smoothedRtt.GetSeconds ();
+                  if (lhsComparison >= rhsComparison)
+                    {
+                      NS_LOG_UNCOND (
+                        "Largest ACK " << largestAcknowledged << ", lost packet " << (*sent_it)->m_packetNumber.GetValue () << " - time " << rhsComparison);
+                      (*sent_it)->m_lost = true;
+                      lost = true;
+                    }
+                }
+            }
+        }
+    }
+
+  // Clean up acked packets and return new ACKed packet vector
+  CleanSentList ();
+  return newlyAcked;
+}
+
+void QuicSocketTxBuffer::ResetSentList (uint32_t keepItems)
+{
+  NS_LOG_FUNCTION (this << keepItems);
+  uint32_t kept = 0;
+  for (auto sent_it = m_sentList.rbegin ();
+       sent_it != m_sentList.rend () and !m_sentList.empty ();
+       ++sent_it, kept++)
+    {
+      if (kept >= keepItems && !(*sent_it)->m_sacked)
+        {
+          (*sent_it)->m_lost = true;
+        }
+    }
+}
+
+bool QuicSocketTxBuffer::MarkAsLost (const SequenceNumber32 seq)
+{
+  NS_LOG_FUNCTION (this << seq);
+  bool found = false;
+  for (auto sent_it = m_sentList.begin ();
+       sent_it != m_sentList.end () and !m_sentList.empty (); ++sent_it)
+    {
+      if ((*sent_it)->m_packetNumber == seq)
+        {
+          found = true;
+          (*sent_it)->m_lost = true;
+        }
+    }
+  return found;
+}
+
+uint32_t QuicSocketTxBuffer::Retransmission (SequenceNumber32 packetNumber)
+{
+  NS_LOG_FUNCTION (this);
+  uint32_t toRetx = 0;
+  // First pass: add lost packets to the application buffer
+  for (auto sent_it = m_sentList.rbegin (); sent_it != m_sentList.rend ();
+       ++sent_it)
+    {
+      Ptr<QuicSocketTxItem> item = *sent_it;
+      if (item->m_lost)
+        {
+          // Add lost packet contents to app buffer
+          Ptr<QuicSocketTxItem> retx = CreateObject<QuicSocketTxItem> ();
+          retx->m_packetNumber = packetNumber++;
+          retx->m_isStream = item->m_isStream;
+          retx->m_isStream0 = item->m_isStream0;
+          retx->m_packet = Create<Packet>();
+          NS_LOG_INFO (
+            "Retx packet " << item->m_packetNumber << " as " << retx->m_packetNumber.GetValue ());
+          QuicSocketTxItem::MergeItems (*retx, *item);
+          retx->m_lost = false;
+          retx->m_retrans = true;
+          toRetx += retx->m_packet->GetSize ();
+          m_sentSize -= retx->m_packet->GetSize ();
+          if (retx->m_isStream0)
+            {
+              NS_LOG_INFO ("Lost stream 0 packet, re-inserting in list");
+              m_streamZeroList.insert (m_streamZeroList.begin (), retx);
+              m_streamZeroSize += retx->m_packet->GetSize ();
+              m_numFrameStream0InBuffer++;
+            }
+          else
+            {
+              m_scheduler->Add (retx, true);
+            }
+        }
+    }
+
+  NS_LOG_LOGIC ("Remove retransmitted packets from sent list");
+  auto sent_it = m_sentList.begin ();
+  // Remove lost packets from the sent list
+  while (!m_sentList.empty () && sent_it != m_sentList.end ())
+    {
+      Ptr<QuicSocketTxItem> item = *sent_it;
+      if (item->m_lost)
+        {
+          // Remove lost packet from sent vector
+          sent_it = m_sentList.erase (sent_it);
+        }
+      else
+        {
+          sent_it++;
+        }
+    }
+  return toRetx;
+}
+
+std::vector<Ptr<QuicSocketTxItem> > QuicSocketTxBuffer::DetectLostPackets ()
+{
+  NS_LOG_FUNCTION (this);
+  std::vector<Ptr<QuicSocketTxItem> > lost;
+
+  for (auto sent_it = m_sentList.begin ();
+       sent_it != m_sentList.end () and !m_sentList.empty (); ++sent_it)
+    {
+      if ((*sent_it)->m_lost)
+        {
+          lost.push_back ((*sent_it));
+          NS_LOG_INFO ("Packet " << (*sent_it)->m_packetNumber << " is lost");
+        }
+    }
+  return lost;
+}
+
+uint32_t QuicSocketTxBuffer::GetLost ()
+{
+  NS_LOG_FUNCTION (this);
+  uint32_t lostCount = 0;
+  for (auto sent_it = m_sentList.begin ();
+       sent_it != m_sentList.end () and !m_sentList.empty (); ++sent_it)
+    {
+      if ((*sent_it)->m_lost)
+        {
+          lostCount += (*sent_it)->m_packet->GetSize ();
+        }
+    }
+  return lostCount;
+}
+
+void QuicSocketTxBuffer::CleanSentList ()
+{
+  NS_LOG_FUNCTION (this);
+  auto sent_it = m_sentList.begin ();
+  // All packets up to here are ACKed (already sent to the receiver app)
+  while (!m_sentList.empty () && (*sent_it)->m_sacked && !(*sent_it)->m_lost)
+    {
+      // Remove ACKed packet from sent vector
+      Ptr<QuicSocketTxItem> item = *sent_it;
+      item->m_acked = true;
+      m_sentSize -= item->m_packet->GetSize ();
+      m_sentList.erase (sent_it);
+      NS_LOG_LOGIC (
+        "Packet " << (*sent_it)->m_packetNumber << " received and ACKed. Removing from sent buffer");
+      sent_it = m_sentList.begin ();
+    }
+}
+
+uint32_t QuicSocketTxBuffer::Available (void) const
+{
+  return m_maxBuffer - m_streamZeroSize - m_scheduler->AppSize ();
+}
+
+uint32_t QuicSocketTxBuffer::GetMaxBufferSize (void) const
+{
+  return m_maxBuffer;
+}
+
+void QuicSocketTxBuffer::SetMaxBufferSize (uint32_t n)
+{
+  m_maxBuffer = n;
+}
+
+uint32_t QuicSocketTxBuffer::AppSize (void) const
+{
+  return m_streamZeroSize + m_scheduler->AppSize ();
+}
+
+uint32_t QuicSocketTxBuffer::GetNumFrameStream0InBuffer (void) const
+{
+  return m_numFrameStream0InBuffer;
+}
+
+uint32_t QuicSocketTxBuffer::BytesInFlight () const
+{
+  NS_LOG_FUNCTION (this);
+
+  uint32_t inFlight = 0;
+
+  for (auto sent_it = m_sentList.begin ();
+       sent_it != m_sentList.end () and !m_sentList.empty (); ++sent_it)
+    {
+      if (!(*sent_it)->m_isStream0 && (*sent_it)->m_isStream
+          && !(*sent_it)->m_sacked)
+        {
+          inFlight += (*sent_it)->m_packet->GetSize ();
+        }
+    }
+
+  NS_LOG_INFO (
+    "Compute bytes in flight " << inFlight << " m_sentSize " << m_sentSize << " m_appSize " << m_streamZeroSize + m_scheduler->AppSize ());
+  return inFlight;
+
+}
+
+void QuicSocketTxBuffer::SetQuicSocketState (Ptr<QuicSocketState> tcb)
+{
+  NS_LOG_FUNCTION (this);
+  m_tcb = tcb;
+}
+
+void QuicSocketTxBuffer::SetScheduler (Ptr<QuicSocketTxScheduler> sched)
+{
+  NS_LOG_FUNCTION (this);
+  m_scheduler = sched;
+}
+
+void QuicSocketTxBuffer::UpdatePacketSent (SequenceNumber32 seq, uint32_t sz)
+{
+  NS_LOG_FUNCTION (this << seq << sz);
+
+  if (m_tcb == nullptr or sz == 0)
+    {
+      return;
+    }
+
+  if (m_tcb->m_bytesInFlight.Get () == 0)
+    {
+      m_tcb->m_firstSentTime = Simulator::Now ();
+      m_tcb->m_deliveredTime = Simulator::Now ();
+    }
+
+  Ptr<QuicSocketTxItem> item = nullptr;
+  for (auto it = m_sentList.rbegin (); it != m_sentList.rend (); ++it)
+    {
+      if ((*it)->m_packetNumber == seq)
+        {
+          item = *it;
+          break;
+        }
+    }
+  NS_ASSERT_MSG (item != nullptr, "not found seq " << seq);
+  item->m_firstSentTime = m_tcb->m_firstSentTime;
+  item->m_deliveredTime = m_tcb->m_deliveredTime;
+  item->m_isAppLimited = (m_tcb->m_appLimitedUntil > m_tcb->m_delivered);
+  item->m_delivered = m_tcb->m_delivered;
+  item->m_ackBytesSent = m_tcb->m_ackBytesSent;
+}
+
+void
+QuicSocketTxBuffer::UpdateAckSent (SequenceNumber32 seq, uint32_t sz)
+{
+  if (m_tcb == nullptr or sz == 0)
+    {
+      return;
+    }
+
+  m_tcb->m_ackBytesSent += sz;
+}
+
+struct RateSample*
+QuicSocketTxBuffer::GetRateSample ()
+{
+  NS_LOG_FUNCTION (this);
+  return &m_rs;
+}
+
+void
+QuicSocketTxBuffer::UpdateRateSample (Ptr<QuicSocketTxItem> item)
+{
+  NS_LOG_FUNCTION (this << item);
+
+  if (m_tcb == nullptr or item->m_deliveredTime == Time::Max ())
+    {
+      // item already SACKed
+      return;
+    }
+
+  m_tcb->m_delivered         += item->m_packet->GetSize ();
+  m_tcb->m_deliveredTime      = Simulator::Now ();
+
+  if (item->m_delivered > m_rs.m_priorDelivered)
+    {
+      m_rs.m_priorDelivered   = item->m_delivered;
+      m_rs.m_priorTime        = item->m_deliveredTime;
+      m_rs.m_isAppLimited     = item->m_isAppLimited;
+      m_rs.m_sendElapsed      = item->m_lastSent - item->m_firstSentTime;
+      m_rs.m_ackElapsed       = m_tcb->m_deliveredTime - item->m_deliveredTime;
+      m_tcb->m_firstSentTime  = item->m_lastSent;
+      m_rs.m_priorAckBytesSent  = item->m_ackBytesSent;
+    }
+
+  /* Mark the packet as delivered once it is SACKed to avoid
+   * being used again when it's cumulatively acked.
+   */
+  item->m_deliveredTime = Time::Max ();
+  m_tcb->m_txItemDelivered = item->m_delivered;
+}
+
+bool
+QuicSocketTxBuffer::GenerateRateSample ()
+{
+  NS_LOG_FUNCTION (this);
+
+  if (m_tcb == nullptr)
+    {
+      return false;
+    }
+
+  if (m_rs.m_priorTime == Seconds (0))
+    {
+      return false;
+    }
+
+  m_rs.m_interval = std::max (m_rs.m_sendElapsed, m_rs.m_ackElapsed);
+
+  m_rs.m_delivered = m_tcb->m_delivered - m_rs.m_priorDelivered;
+
+
+  if (m_rs.m_ackBytesSent < m_tcb->m_ackBytesSent - m_rs.m_priorAckBytesSent or++ m_rs.m_ackBytesMaxWin > 5) //quick maxfilter implementation
+    {
+      m_rs.m_ackBytesSent = m_tcb->m_ackBytesSent - m_rs.m_priorAckBytesSent;
+      m_rs.m_ackBytesMaxWin = 0;
+    }
+
+  uint32_t discountedDelivered = m_rs.m_delivered > m_rs.m_ackBytesSent ? m_rs.m_delivered - m_rs.m_ackBytesSent : 0U;
+
+  if (m_rs.m_interval < m_tcb->m_minRtt)
+    {
+      m_rs.m_interval = Seconds (0);
+      return false;
+    }
+
+  if (m_rs.m_interval != Seconds (0))
+    {
+      m_rs.m_deliveryRate = DataRate (discountedDelivered * 8.0 / m_rs.m_interval.GetSeconds ());
+    }
+  NS_LOG_DEBUG ("computed delivery rate: " << m_rs.m_deliveryRate);
+  return true;
+}
+
+
+void QuicSocketTxBuffer::SetLatency (uint32_t streamId, Time latency)
+{
+  // Only relevant for the EDF scheduler
+  if (m_scheduler->GetTypeId () == QuicSocketTxEdfScheduler::GetTypeId ())
+    {
+      (DynamicCast<QuicSocketTxEdfScheduler> (m_scheduler))->SetLatency (streamId, latency);
+    }
+}
+
+Time QuicSocketTxBuffer::GetLatency (uint32_t streamId)
+{
+  // Only relevant for the EDF scheduler
+  if (m_scheduler->GetTypeId () == QuicSocketTxEdfScheduler::GetTypeId ())
+    {
+      return (DynamicCast<QuicSocketTxEdfScheduler> (m_scheduler))->GetLatency (streamId);
+    }
+  else
+    {
+      return Seconds (0);
+    }
+}
+
+void QuicSocketTxBuffer::SetDefaultLatency (Time latency)
+{
+  // Only relevant for the EDF scheduler
+  if (m_scheduler->GetTypeId () == QuicSocketTxEdfScheduler::GetTypeId ())
+    {
+      (DynamicCast<QuicSocketTxEdfScheduler> (m_scheduler))->SetDefaultLatency (latency);
+    }
+}
+
+Time QuicSocketTxBuffer::GetDefaultLatency ()
+{
+  return GetLatency (0);
+}
+
+}
diff --git a/src/quic/model/quic-socket-tx-buffer.h b/src/quic/model/quic-socket-tx-buffer.h
new file mode 100644
index 000000000..0ac667eb8
--- /dev/null
+++ b/src/quic/model/quic-socket-tx-buffer.h
@@ -0,0 +1,376 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2020 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *          Umberto Paro <umberto.paro@me.com>
+ */
+
+#ifndef QUICSOCKETTXBUFFER_H
+#define QUICSOCKETTXBUFFER_H
+
+#include "ns3/object.h"
+#include "ns3/traced-value.h"
+#include "ns3/sequence-number.h"
+#include "ns3/nstime.h"
+#include "quic-subheader.h"
+#include "ns3/packet.h"
+#include "ns3/tcp-socket-base.h"
+#include "ns3/data-rate.h"
+#include "quic-socket-tx-scheduler.h"
+
+namespace ns3 {
+
+class QuicSocketState;
+
+struct RateSample
+{
+  DataRate m_deliveryRate;         //!< The delivery rate sample
+  bool m_isAppLimited { false };       //!< Indicates whether the rate sample is application-limited
+  Time m_interval;             //!< The length of the sampling interval
+  uint32_t m_delivered { 0 };       //!< The amount of data marked as delivered over the sampling interval
+  uint32_t m_priorDelivered { 0 };       //!< The delivered count of the most recent packet delivered
+  Time m_priorTime;       //!< The delivered time of the most recent packet delivered
+  Time m_sendElapsed;       //!< Send time interval calculated from the most recent packet delivered
+  Time m_ackElapsed;       //!< ACK time interval calculated from the most recent packet delivered
+  uint32_t m_packetLoss;
+  uint32_t m_priorInFlight;
+  uint32_t m_ackBytesSent { 0 };       //!< amount of ACK-only bytes sent over the sampling interval
+  uint32_t m_priorAckBytesSent { 0 };       //!< amount of ACK-only bytes sent up to a flight ago
+  uint8_t m_ackBytesMaxWin { 0 };
+};
+
+/**
+ * \ingroup quic
+ *
+ * \brief Item that encloses the application packet and some flags for it
+ */
+class QuicSocketTxItem : public Object
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+
+  QuicSocketTxItem ();
+  QuicSocketTxItem (const QuicSocketTxItem &other);
+
+  /**
+   * \brief Merge two QuicSocketTxItem
+   *
+   * Merge t2 in t1. It consists in copying the lastSent field if t2 is more
+   * recent than t1. Retransmitted field is copied only if it set in t2 but not
+   * in t1. Sacked is copied only if it is true in both items.
+   *
+   * \param t1 first item
+   * \param t2 second item
+   */
+  static void MergeItems (QuicSocketTxItem &t1, QuicSocketTxItem &t2);
+
+  // Available only for streams
+  static void SplitItems (QuicSocketTxItem &t1, QuicSocketTxItem &t2,
+                          uint32_t size);
+
+  /**
+   * \brief Print the Item
+   * \param os ostream
+   */
+  void Print (std::ostream &os) const;
+
+  Ptr<Packet> m_packet;              //!< packet associated to this QuicSocketTxItem
+  SequenceNumber32 m_packetNumber;        //!< sequence number
+  bool m_lost;                            //!< true if the packet is lost
+  bool m_retrans;                         //!< true if it is a retx
+  bool m_sacked;                          //!< true if already acknowledged
+  bool m_acked;                       //!< true if already passed to the application
+  bool m_isStream;                    //!< true for frames of a stream (not control)
+  bool m_isStream0;                       //!< true for a frame from stream 0
+  Time m_lastSent;                        //!< time at which it was sent
+  Time m_ackTime;       //!< time at which the packet was first acked (if m_sacked is true)
+  Time m_generated;       //!< expiration deadline for the TX item
+
+  uint64_t m_delivered { 0 };       //!< Connection's delivered data at the time the packet was sent
+  Time m_deliveredTime { Time::Max () };      //!< Connection's delivered time at the time the packet was sent
+  Time m_firstSentTime { Seconds (0) };      //!< Connection's first sent time at the time the packet was sent
+  bool m_isAppLimited { false };       //!< Connection's app limited at the time the packet was sent
+  uint32_t m_ackBytesSent { 0 };       //!< Connection's ACK-only bytes sent at the time the packet was sent
+};
+
+/**
+ * \ingroup quic
+ *
+ * \brief Tx socket buffer for QUIC
+ */
+class QuicSocketTxBuffer : public Object
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+
+  QuicSocketTxBuffer ();
+  virtual ~QuicSocketTxBuffer (void);
+
+  /**
+   * Print the buffer information to a string,
+   * including the list of sent packets
+   *
+   * \param os the std::ostream object
+   */
+  void Print (std::ostream &os) const;
+  //friend std::ostream & operator<< (std::ostream & os, QuicSocketTxBuffer const & quicTxBuf);
+
+  /**
+   * Add a packet to the tx buffer
+   *
+   * \param p a smart pointer to a packet
+   * \return true if the insertion was successful
+   */
+  bool Add (Ptr<Packet> p);
+
+  /**
+   * \brief Request the next packet to transmit
+   *
+   * \param numBytes the number of bytes of the next packet to transmit requested
+   * \param seq the sequence number of the next packet to transmit
+   * \return the next packet to transmit
+   */
+  Ptr<Packet> NextSequence (uint32_t numBytes, const SequenceNumber32 seq);
+
+  /**
+   * \brief Get a block of data not transmitted yet and move it into SentList
+   *
+   * \param numBytes number of bytes of the QuicSocketTxItem requested
+   * \return the item that contains the right packet
+   */
+  Ptr<QuicSocketTxItem> GetNewSegment (uint32_t numBytes);
+
+  /**
+   * Process an acknowledgment, set the packets in the send buffer as acknowledged, mark
+   * lost packets (according to the QUIC IETF draft) and return pointers to the newly
+   * acked packets
+   *
+   * \brief Process an ACK
+   *
+   * \param tcb The state of the socket (used for loss detection)
+   * \param largestAcknowledged The largest acknowledged sequence number
+   * \param additionalAckBlocks The sequence numbers that were just acknowledged
+   * \param gaps The gaps in the acknowledgment
+   * \return a vector containing the newly acked packets for congestion control purposes
+   */
+  std::vector<Ptr<QuicSocketTxItem> > OnAckUpdate (Ptr<TcpSocketState> tcb,
+                                                   const uint32_t largestAcknowledged,
+                                                   const std::vector<uint32_t> &additionalAckBlocks,
+                                                   const std::vector<uint32_t> &gaps);
+
+  /**
+   * Get the max size of the buffer
+   *
+   * \return the maximum buffer size in bytes
+   */
+  uint32_t GetMaxBufferSize (void) const;
+
+  /**
+   * Set the max size of the buffer
+   *
+   * \param n the maximum buffer size in bytes
+   */
+  void SetMaxBufferSize (uint32_t n);
+
+  /**
+   * \brief Get all the packets marked as lost
+   *
+   * \return a vector containing the packets marked as lost
+   */
+  std::vector<Ptr<QuicSocketTxItem> > DetectLostPackets ();
+
+  /**
+   * \brief Count the amount of lost bytes
+   *
+   * \return the number of bytes considered lost
+   */
+  uint32_t GetLost ();
+
+  /**
+   * Compute the available space in the buffer
+   *
+   * \return the available space in the buffer
+   */
+  uint32_t Available (void) const;
+
+  /**
+   * Returns the total number of bytes in the application buffer
+   *
+   * \return the total number of bytes in the application buffer
+   */
+  uint32_t AppSize (void) const;
+
+  /**
+   * \brief Return total bytes in flight
+   *
+   * \returns total bytes in flight
+   */
+  uint32_t BytesInFlight () const;
+
+  /**
+   * Return the number of frames for stream 0 is in the buffer
+   *
+   * \return the number of frames for stream 0 is in the buffer
+   */
+  uint32_t GetNumFrameStream0InBuffer (void) const;
+
+  /**
+   * Return the next frame for stream 0 to be sent
+   * and add this packet to the sent list
+   *
+   * \param seq the sequence number of the packet
+   * \return a smart pointer to the packet, 0 if there are no packets from stream 0
+   */
+  Ptr<Packet> NextStream0Sequence (const SequenceNumber32 seq);
+
+  /**
+   * \brief Reset the sent list
+   *
+   * Move all but the first 'keepItems' packets from the sent list to the
+   * appList.  By default, the HEAD of the sent list is kept and all others
+   * moved to the appList.  All items kept on the sent list
+   * are then marked as un-sacked, un-retransmitted, and lost.
+   *
+   * \param keepItems Keep a number of items at the front of the sent list
+   */
+  void ResetSentList (uint32_t keepItems = 1);
+
+  /**
+   * Mark a packet as lost
+   * \param the sequence number of the packet
+   * \return true if the packet is in the send buffer
+   */
+  bool MarkAsLost (const SequenceNumber32 seq);
+
+  /**
+   * Put the lost packets at the beginning of the application buffer to retransmit them
+   * \param the sequence number of the retransmitted packet
+   * \return the number of lost bytes
+   */
+  uint32_t Retransmission (SequenceNumber32 packetNumber);
+
+  /**
+   * Set the TcpSocketState (tcb)
+   * \param The TcpSocketState object
+   */
+  void SetQuicSocketState (Ptr<QuicSocketState> tcb);
+
+  /**
+   * Set the socket scheduler
+   * \param The scheduler object
+   */
+  void SetScheduler (Ptr<QuicSocketTxScheduler> sched);
+
+  /**
+   * Updates per packet variables required for rate sampling on each packet transmission
+   * \param The sequence number of the sent packet
+   * \param The size of the sent packet
+   */
+  void UpdatePacketSent (SequenceNumber32 seq, uint32_t sz);
+
+  /**
+   * Updates ACK related variables required by RateSample to discount the delivery rate.
+   * \param The sequence number of the sent ACK packet
+   * \param The size of the sent ACK packet
+   */
+  void UpdateAckSent (SequenceNumber32 seq, uint32_t sz);
+
+  /**
+   * Get the current rate sample
+   * \return A pointer to the current rate sample
+   */
+  struct RateSample* GetRateSample ();
+
+  /**
+   * Updates rate samples rate on arrival of each acknowledgement.
+   * \param The QuicSocketTxItem containing the acknowledgment
+   */
+  void UpdateRateSample (Ptr<QuicSocketTxItem> pps);
+
+  /**
+   * Calculates delivery rate on arrival of each acknowledgement.
+   * \return True if the calculation is performed correctly
+   */
+  bool GenerateRateSample ();
+
+  /**
+   * Set the latency bound for a specified stream
+   *
+   * \param streamId The stream ID
+   * \param latency The stream's maximum latency
+   */
+  void SetLatency (uint32_t streamId, Time latency);
+
+  /**
+   * Get the latency bound for a specified stream
+   *
+   * \param streamId The stream ID
+   * \return The stream's maximum latency, or 0 if the stream is not registered
+   */
+  Time GetLatency (uint32_t streamId);
+
+  /**
+   * Set the default latency bound
+   *
+   * \param latency The default maximum latency
+   */
+  void SetDefaultLatency (Time latency);
+
+  /**
+   * Get the default latency bound
+   *
+   * \param streamId The stream ID
+   * \return The default maximum latency
+   */
+  Time GetDefaultLatency ();
+
+private:
+  typedef std::list<Ptr<QuicSocketTxItem> > QuicTxPacketList;      //!< container for data stored in the buffer
+
+  /**
+   * Discard acknowledged data from the sent list
+   */
+  void CleanSentList ();
+
+
+
+  QuicTxPacketList m_sentList;        //!< List of sent packets with additional info
+  QuicTxPacketList m_streamZeroList;       //!< List of waiting stream 0 packets with additional info
+  uint32_t m_maxBuffer;            //!< Max number of data bytes in buffer (SND.WND)
+  uint32_t m_streamZeroSize;       //!< Size of all stream 0 data in the application list
+  uint32_t m_sentSize;                       //!< Size of all data in the sent list
+  uint32_t m_numFrameStream0InBuffer;        //!< Number of Stream 0 frames buffered
+
+  Ptr<QuicSocketTxScheduler> m_scheduler { nullptr };         //!< Scheduler
+  Ptr<QuicSocketState> m_tcb { nullptr };
+  struct RateSample m_rs;
+};
+
+} // namepsace ns3
+
+#endif /* QUIC_SOCKET_TX_BUFFER_H */
diff --git a/src/quic/model/quic-socket-tx-edf-scheduler.cc b/src/quic/model/quic-socket-tx-edf-scheduler.cc
new file mode 100644
index 000000000..87474646c
--- /dev/null
+++ b/src/quic/model/quic-socket-tx-edf-scheduler.cc
@@ -0,0 +1,189 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2020 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Umberto Paro <umberto.paro@me.com>
+ *
+ */
+
+#include "quic-socket-tx-edf-scheduler.h"
+
+#include <algorithm>
+#include <iostream>
+#include <sstream>
+#include "ns3/simulator.h"
+
+#include "ns3/packet.h"
+#include "ns3/log.h"
+#include "ns3/abort.h"
+#include "quic-subheader.h"
+#include "quic-socket-base.h"
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("QuicSocketTxEdfScheduler");
+
+NS_OBJECT_ENSURE_REGISTERED (QuicSocketTxEdfScheduler);
+
+TypeId QuicSocketTxEdfScheduler::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicSocketTxEdfScheduler")
+    .SetParent<QuicSocketTxScheduler>()
+    .SetGroupName ("Internet")
+    .AddConstructor<QuicSocketTxEdfScheduler>()
+    .AddAttribute ("RetxFirst", "Prioritize retransmissions regardless of stream",
+                   BooleanValue (false),
+                   MakeBooleanAccessor (&QuicSocketTxEdfScheduler::m_retxFirst),
+                   MakeBooleanChecker ())
+  ;
+  return tid;
+}
+
+QuicSocketTxEdfScheduler::QuicSocketTxEdfScheduler () :
+  QuicSocketTxScheduler (), m_retxFirst (false)
+{
+  m_defaultLatency = Seconds (0.1);
+}
+
+QuicSocketTxEdfScheduler::QuicSocketTxEdfScheduler (
+  const QuicSocketTxEdfScheduler &other) :
+  QuicSocketTxScheduler (other), m_retxFirst (
+    other.m_retxFirst)
+{
+  m_defaultLatency = other.m_defaultLatency;
+  m_latencyMap = other.m_latencyMap;
+}
+
+QuicSocketTxEdfScheduler::~QuicSocketTxEdfScheduler (void)
+{}
+
+void QuicSocketTxEdfScheduler::Add (Ptr<QuicSocketTxItem> item, bool retx)
+{
+  NS_LOG_FUNCTION (this << item);
+
+  if (retx)
+    {
+      if (m_retxFirst)
+        {
+          QuicSubheader sub;
+          item->m_packet->PeekHeader (sub);
+          NS_LOG_INFO ("Adding retransmitted packet with highest priority");
+          AddScheduleItem (CreateObject<QuicSocketTxScheduleItem> (sub.GetStreamId (), sub.GetOffset (), -1, item), retx);
+        }
+      else
+        {
+          uint32_t dataSizeByte = item->m_packet->GetSize ();
+          QuicSubheader sub;
+          item->m_packet->PeekHeader (sub);
+          if (sub.GetSerializedSize () + sub.GetLength ()
+              < dataSizeByte)
+            {
+
+              NS_LOG_INFO (
+                "Disgregate packet to be retransmitted" << dataSizeByte << "; first fragment size" << sub.GetSerializedSize () + sub.GetLength ());
+              Ptr<Packet> remaining = item->m_packet->Copy ();
+
+              // the packet could contain multiple frames
+              // each of them starts with a subheader
+              // cycle through the data packet and extract the frames
+              for (uint32_t start = 0; start < dataSizeByte;)
+                {
+                  item->m_packet->RemoveHeader (sub);
+                  Ptr<Packet> nextFragment = Create<Packet> ();
+                  if (sub.IsStream ())
+                    {
+                      NS_LOG_INFO (
+                        "subheader " << sub << " dataSizeByte " << dataSizeByte << " remaining " << item->m_packet->GetSize () << " frame size " << sub.GetLength ());
+                      nextFragment = item->m_packet->Copy ();
+                      NS_LOG_INFO ("fragment size " << nextFragment->GetSize () << " " << sub.GetLength ());
+                      nextFragment->RemoveAtEnd (
+                        nextFragment->GetSize () - sub.GetLength ());
+                      NS_LOG_INFO ("fragment size " << nextFragment->GetSize ());
+
+                      // remove the first portion of the packet
+                      item->m_packet->RemoveAtStart (sub.GetLength ());
+                    }
+                  nextFragment->AddHeader (sub);
+                  start += nextFragment->GetSize ();
+                  Ptr<QuicSocketTxItem> it = CreateObject<QuicSocketTxItem> (
+                    *item);
+                  uint64_t streamId = sub.GetStreamId ();
+                  uint64_t offset = sub.GetOffset ();
+                  it->m_packet = nextFragment;
+                  NS_LOG_INFO (
+                    "Added retx fragment on stream " << streamId << " with offset " << offset << " and length " << it->m_packet->GetSize () << ", pointer " << GetPointer (it->m_packet));
+                  AddScheduleItem (CreateObject<QuicSocketTxScheduleItem> (streamId, offset, GetDeadline (it).GetSeconds (), it), false);
+                }
+            }
+          else
+            {
+              NS_LOG_INFO (
+                "Added retx packet on stream " << sub.GetStreamId () << " with offset " << sub.GetOffset ());
+              AddScheduleItem (CreateObject<QuicSocketTxScheduleItem> (sub.GetStreamId (), sub.GetOffset (), GetDeadline (item).GetSeconds (), item), false);
+            }
+        }
+    }
+  else
+    {
+      QuicSubheader sub;
+      item->m_packet->PeekHeader (sub);
+      NS_LOG_INFO (
+        "Added packet on stream " << sub.GetStreamId () << " with offset " << sub.GetOffset ());
+      AddScheduleItem (CreateObject<QuicSocketTxScheduleItem> (sub.GetStreamId (), sub.GetOffset (), GetDeadline (item).GetSeconds (), item), retx);
+    }
+}
+
+void QuicSocketTxEdfScheduler::SetLatency (uint32_t streamId, Time latency)
+{
+  m_latencyMap[streamId] = latency;
+}
+
+const Time QuicSocketTxEdfScheduler::GetLatency (uint32_t streamId)
+{
+  Time latency = m_defaultLatency;
+  if (m_latencyMap.count (streamId) > 0)
+    {
+      latency = m_latencyMap.at (streamId);
+    }
+  else
+    {
+      NS_LOG_INFO (
+        "Stream " << streamId << " does not have a pre-specified latency, using default");
+    }
+  return latency;
+}
+
+void QuicSocketTxEdfScheduler::SetDefaultLatency (Time latency)
+{
+  m_defaultLatency = latency;
+}
+
+const Time QuicSocketTxEdfScheduler::GetDefaultLatency ()
+{
+  return m_defaultLatency;
+}
+
+Time QuicSocketTxEdfScheduler::GetDeadline (Ptr<QuicSocketTxItem> item)
+{
+  Ptr<Packet> packet = item->m_packet;
+  QuicSubheader sub;
+  packet->PeekHeader (sub);
+  return item->m_generated + GetLatency (sub.GetStreamId ());
+}
+
+}
diff --git a/src/quic/model/quic-socket-tx-edf-scheduler.h b/src/quic/model/quic-socket-tx-edf-scheduler.h
new file mode 100644
index 000000000..07018fdae
--- /dev/null
+++ b/src/quic/model/quic-socket-tx-edf-scheduler.h
@@ -0,0 +1,109 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2020 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Umberto Paro <umberto.paro@me.com>
+ *
+ */
+
+
+
+#ifndef QUICSOCKETTXEDFSCHED_H
+#define QUICSOCKETTXEDFSCHED_H
+
+#include "quic-socket-tx-scheduler.h"
+#include <queue>
+#include <map>
+#include <vector>
+#include "ns3/nstime.h"
+
+namespace ns3 {
+
+/**
+ * \brief The EDF implementation
+ *
+ * This class is an Earliest Deadline First implementation of the socket scheduler, which prioritizes the packet with the earliest deadline
+ */
+class QuicSocketTxEdfScheduler : public QuicSocketTxScheduler
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+
+  QuicSocketTxEdfScheduler ();
+  QuicSocketTxEdfScheduler (const QuicSocketTxEdfScheduler &other);
+  virtual ~QuicSocketTxEdfScheduler (void);
+
+  /**
+   * Add a tx item to the scheduling list and assign priority
+   *
+   * \param item a smart pointer to a transmission item
+   * \param retx true if the transmission item is being retransmitted
+   *
+   */
+  void Add (Ptr<QuicSocketTxItem> item, bool retx) override;
+
+  /**
+   * Set the latency bound for a specified stream
+   *
+   * \param streamId The stream ID
+   * \param latency The stream's maximum latency
+   */
+  void SetLatency (uint32_t streamId, Time latency);
+
+  /**
+   * Get the latency bound for a specified stream
+   *
+   * \param streamId The stream ID
+   * \return The stream's maximum latency, or 0 if the stream is not registered
+   */
+  const Time GetLatency (uint32_t streamId);
+
+  /**
+   * Set the default latency bound
+   *
+   * \param latency The default maximum latency
+   */
+  void SetDefaultLatency (Time latency);
+
+  /**
+   * Get the default latency bound
+   *
+   * \param streamId The stream ID
+   * \return The default maximum latency
+   */
+  const Time GetDefaultLatency ();
+
+private:
+  /**
+   * Gets the deadline for a transmission item
+   * \param item The pointer to the item
+   */
+  Time GetDeadline (Ptr<QuicSocketTxItem> item);
+
+  bool m_retxFirst;
+  Time m_defaultLatency;
+  std::map<uint32_t, Time> m_latencyMap;
+};
+
+} // namepsace ns3
+
+#endif /* QUICSOCKETTXEDFSCHED_H */
diff --git a/src/quic/model/quic-socket-tx-pfifo-scheduler.cc b/src/quic/model/quic-socket-tx-pfifo-scheduler.cc
new file mode 100644
index 000000000..d91e076f4
--- /dev/null
+++ b/src/quic/model/quic-socket-tx-pfifo-scheduler.cc
@@ -0,0 +1,89 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2020 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Umberto Paro <umberto.paro@me.com>
+ *
+ */
+
+#include "quic-socket-tx-pfifo-scheduler.h"
+
+#include <algorithm>
+#include <iostream>
+#include <sstream>
+#include "ns3/simulator.h"
+
+#include "ns3/packet.h"
+#include "ns3/log.h"
+#include "ns3/abort.h"
+#include "quic-subheader.h"
+#include "quic-socket-base.h"
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("QuicSocketTxPFifoScheduler");
+
+NS_OBJECT_ENSURE_REGISTERED (QuicSocketTxPFifoScheduler);
+
+TypeId QuicSocketTxPFifoScheduler::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicSocketTxPFifoScheduler")
+    .SetParent<QuicSocketTxScheduler> ()
+    .SetGroupName ("Internet")
+    .AddConstructor<QuicSocketTxPFifoScheduler> ()
+    .AddAttribute ("RetxFirst", "Prioritize retransmissions regardless of stream",
+                   BooleanValue (false),
+                   MakeBooleanAccessor (&QuicSocketTxPFifoScheduler::m_retxFirst),
+                   MakeBooleanChecker ())
+  ;
+  return tid;
+}
+
+QuicSocketTxPFifoScheduler::QuicSocketTxPFifoScheduler () :
+  QuicSocketTxScheduler (), m_retxFirst (false)
+{}
+
+QuicSocketTxPFifoScheduler::QuicSocketTxPFifoScheduler (
+  const QuicSocketTxPFifoScheduler &other) :
+  QuicSocketTxScheduler (other), m_retxFirst (
+    other.m_retxFirst)
+{}
+
+QuicSocketTxPFifoScheduler::~QuicSocketTxPFifoScheduler (void)
+{}
+
+void
+QuicSocketTxPFifoScheduler::Add (Ptr<QuicSocketTxItem> item, bool retx)
+{
+  NS_LOG_FUNCTION (this << item);
+  QuicSubheader qsb;
+  item->m_packet->PeekHeader (qsb);
+  NS_LOG_INFO ("Adding packet on stream " << qsb.GetStreamId ());
+  if (!retx)
+    {
+      NS_LOG_INFO ("Standard item, add at end (offset " << qsb.GetOffset () << ")");
+    }
+  else
+    {
+      NS_LOG_INFO ("Retransmitted item, add at beginning (offset " << qsb.GetOffset () << ")");
+    }
+  AddScheduleItem (CreateObject<QuicSocketTxScheduleItem> (qsb.GetStreamId (), qsb.GetOffset (), 0, item), (retx && m_retxFirst));
+}
+
+
+}
diff --git a/src/quic/model/quic-socket-tx-pfifo-scheduler.h b/src/quic/model/quic-socket-tx-pfifo-scheduler.h
new file mode 100644
index 000000000..cfb39ec29
--- /dev/null
+++ b/src/quic/model/quic-socket-tx-pfifo-scheduler.h
@@ -0,0 +1,66 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2020 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Umberto Paro <umberto.paro@me.com>
+ *
+ */
+
+#ifndef QUICSOCKETTXPFIFOSCHEDULER_H
+#define QUICSOCKETTXPFIFOSCHEDULER_H
+
+#include "quic-socket-tx-scheduler.h"
+#include <queue>
+#include <vector>
+
+namespace ns3 {
+
+/**
+ * \brief The PFIFO implementation
+ *
+ * This class is a Priority FIFO implementation of the socket scheduler, which prioritizes streams with a lower stream number
+ */
+class QuicSocketTxPFifoScheduler : public QuicSocketTxScheduler
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+
+  QuicSocketTxPFifoScheduler ();
+  QuicSocketTxPFifoScheduler (const QuicSocketTxPFifoScheduler &other);
+  virtual ~QuicSocketTxPFifoScheduler (void);
+
+  /**
+   * Add a tx item to the scheduling list and assign priority
+   *
+   * \param item a smart pointer to a transmission item
+   * \param retx true if the transmission item is being retransmitted
+   *
+   */
+  void Add (Ptr<QuicSocketTxItem> item, bool retx) override;
+
+private:
+  bool m_retxFirst;
+};
+
+} // namepsace ns3
+
+#endif /* QUIC_SOCKET_TX_PFIFO_SCHEDULER_H */
diff --git a/src/quic/model/quic-socket-tx-scheduler.cc b/src/quic/model/quic-socket-tx-scheduler.cc
new file mode 100644
index 000000000..8e7016d97
--- /dev/null
+++ b/src/quic/model/quic-socket-tx-scheduler.cc
@@ -0,0 +1,326 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2020 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Umberto Paro <umberto.paro@me.com>
+ *
+ */
+
+#include "quic-socket-tx-scheduler.h"
+
+#include <algorithm>
+#include <iostream>
+#include <sstream>
+#include "ns3/simulator.h"
+
+#include "ns3/packet.h"
+#include "ns3/log.h"
+#include "ns3/abort.h"
+#include "quic-subheader.h"
+#include "quic-socket-tx-buffer.h"
+#include "quic-socket-base.h"
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("QuicSocketTxScheduler");
+
+NS_OBJECT_ENSURE_REGISTERED (QuicSocketTxScheduler);
+NS_OBJECT_ENSURE_REGISTERED (QuicSocketTxScheduleItem);
+
+TypeId
+QuicSocketTxScheduleItem::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicSocketTxScheduleItem")
+    .SetParent<Object> ()
+    .SetGroupName ("Internet")
+  ;
+  return tid;
+}
+
+int
+QuicSocketTxScheduleItem::Compare (const QuicSocketTxScheduleItem & o) const
+{
+  if (m_priority != o.m_priority)
+    {
+      return (m_priority < o.m_priority) ? -1 : 1;
+    }
+  if (m_streamId != o.m_streamId)
+    {
+      return (m_streamId < o.m_streamId) ? -1 : 1;
+    }
+  if (m_offset != o.m_offset)
+    {
+      return (m_offset < o.m_offset) ? -1 : 1;
+    }
+
+  return 0;
+}
+
+
+
+QuicSocketTxScheduleItem::QuicSocketTxScheduleItem (uint64_t id, uint64_t off, double p, Ptr<QuicSocketTxItem> it)
+  : m_streamId (id), 
+    m_offset (off), 
+    m_priority (p), 
+    m_item (it)
+{}
+
+QuicSocketTxScheduleItem::QuicSocketTxScheduleItem (const QuicSocketTxScheduleItem &other)
+  : m_streamId (other.m_streamId), 
+    m_offset (other.m_offset), 
+    m_priority (other.m_priority)
+{
+  m_item = CreateObject<QuicSocketTxItem> (*(other.m_item));
+}
+
+
+Ptr<QuicSocketTxItem>
+QuicSocketTxScheduleItem::GetItem () const
+{
+  return m_item;
+}
+
+uint64_t
+QuicSocketTxScheduleItem::GetStreamId () const
+{
+  return m_streamId;
+}
+
+
+uint64_t
+QuicSocketTxScheduleItem::GetOffset () const
+{
+  return m_offset;
+}
+
+double
+QuicSocketTxScheduleItem::GetPriority () const
+{
+  return m_priority;
+}
+
+void
+QuicSocketTxScheduleItem::SetPriority (double priority)
+{
+  m_priority = priority;
+}
+
+
+
+TypeId
+QuicSocketTxScheduler::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicSocketTxScheduler")
+    .SetParent<Object> ()
+    .SetGroupName ("Internet")
+    .AddConstructor<QuicSocketTxScheduler> ()
+  ;
+  return tid;
+}
+
+QuicSocketTxScheduler::QuicSocketTxScheduler () : m_appSize (0)
+{
+  m_appList = QuicTxPacketList ();
+}
+
+QuicSocketTxScheduler::QuicSocketTxScheduler (const QuicSocketTxScheduler &other) : m_appSize (other.m_appSize)
+{
+  m_appList = other.m_appList;
+}
+
+QuicSocketTxScheduler::~QuicSocketTxScheduler (void)
+{
+  m_appList = QuicTxPacketList ();
+  m_appSize = 0;
+}
+
+
+void
+QuicSocketTxScheduler::Add (Ptr<QuicSocketTxItem> item, bool retx)
+{
+  NS_LOG_FUNCTION (this << item);
+  QuicSubheader qsb;
+  item->m_packet->PeekHeader (qsb);
+  double priority = -1;
+  NS_LOG_INFO ("Adding packet on stream " << qsb.GetStreamId ());
+  if (!retx)
+    {
+      NS_LOG_INFO ("Standard item, add at end (offset " << qsb.GetOffset () << ")");
+      priority = Simulator::Now ().GetSeconds ();
+    }
+  else
+    {
+      NS_LOG_INFO ("Retransmitted item, add at beginning (offset " << qsb.GetOffset () << ")");
+    }
+  Ptr<QuicSocketTxScheduleItem> sched = CreateObject<QuicSocketTxScheduleItem> (qsb.GetStreamId (), qsb.GetOffset (), priority, item);
+  AddScheduleItem (sched, retx);
+}
+
+
+void
+QuicSocketTxScheduler::AddScheduleItem (Ptr<QuicSocketTxScheduleItem> item, bool retx)
+{
+  NS_LOG_FUNCTION (this << item);
+  m_appList.push (item);
+  m_appSize += item->GetItem ()->m_packet->GetSize ();
+  QuicSubheader qsb;
+  item->GetItem ()->m_packet->PeekHeader (qsb);
+  NS_LOG_INFO ("Adding packet on stream " << qsb.GetStreamId () << " with priority " << item->GetPriority ());
+  if (!retx)
+    {
+      NS_LOG_INFO ("Standard item, add at end (offset " << qsb.GetOffset () << ")");
+    }
+  else
+    {
+      NS_LOG_INFO ("Retransmitted item, add at beginning (offset " << qsb.GetOffset () << ")");
+    }
+}
+
+Ptr<QuicSocketTxItem>
+QuicSocketTxScheduler::GetNewSegment (uint32_t numBytes)
+{
+  NS_LOG_FUNCTION (this << numBytes);
+
+  bool firstSegment = true;
+  Ptr<Packet> currentPacket = 0;
+  Ptr<QuicSocketTxItem> currentItem = 0;
+  Ptr<QuicSocketTxItem> outItem = CreateObject<QuicSocketTxItem>();
+  outItem->m_isStream = true;   // Packets sent with this method are always stream packets
+  outItem->m_isStream0 = false;
+  outItem->m_packet = Create<Packet> ();
+  uint32_t outItemSize = 0;
+
+
+  while (m_appSize > 0 && outItemSize < numBytes)
+    {
+      Ptr<QuicSocketTxScheduleItem> scheduleItem = m_appList.top ();
+      currentItem = scheduleItem->GetItem ();
+      currentPacket = currentItem->m_packet;
+      m_appSize -= currentPacket->GetSize ();
+      m_appList.pop ();
+
+      if (outItemSize + currentItem->m_packet->GetSize ()   /*- subheaderSize*/
+          <= numBytes)       // Merge
+        {
+          NS_LOG_LOGIC ("Add complete frame to the outItem - size "
+                        << currentItem->m_packet->GetSize ()
+                        << " m_appSize " << m_appSize);
+          QuicSubheader qsb;
+          currentPacket->PeekHeader (qsb);
+          NS_LOG_INFO ("Packet: stream " << qsb.GetStreamId () << ", offset " << qsb.GetOffset ());
+          QuicSocketTxItem::MergeItems (*outItem, *currentItem);
+          outItemSize += currentItem->m_packet->GetSize ();
+
+          NS_LOG_LOGIC ("Updating application buffer size: " << m_appSize);
+          continue;
+        }
+      else if (firstSegment)  // we cannot transmit a full packet, so let's split it and update the subheaders
+        {
+          firstSegment = false;
+
+          // get the currentPacket subheader
+          QuicSubheader qsb;
+          currentPacket->PeekHeader (qsb);
+
+          // new packet size
+          int newPacketSizeInt = (int)numBytes - outItemSize - qsb.GetSerializedSize ();
+          if (newPacketSizeInt <= 0)
+            {
+              NS_LOG_INFO ("Not enough bytes even for the header");
+              m_appList.push (scheduleItem);
+              m_appSize += currentPacket->GetSize ();
+              break;
+            }
+          else
+            {
+              NS_LOG_INFO ("Split packet on stream " << qsb.GetStreamId () << ", sending " << newPacketSizeInt << " bytes from offset " << qsb.GetOffset ());
+
+              currentPacket->RemoveHeader (qsb);
+              uint32_t newPacketSize = (uint32_t)newPacketSizeInt;
+
+              NS_LOG_LOGIC ("Add incomplete frame to the outItem");
+              uint32_t totPacketSize = currentItem->m_packet->GetSize ();
+              NS_LOG_LOGIC ("Extracted " << outItemSize << " bytes");
+
+              uint32_t oldOffset = qsb.GetOffset ();
+              uint32_t newOffset = oldOffset + newPacketSize;
+              bool oldOffBit = !(oldOffset == 0);
+              bool newOffBit = true;
+              uint32_t oldLength = qsb.GetLength ();
+              uint32_t newLength = 0;
+              bool newLengthBit = true;
+              newLength = totPacketSize - newPacketSize;
+              if (oldLength == 0)
+                {
+                  newLengthBit = false;
+                }
+              bool lengthBit = true;
+              bool oldFinBit = qsb.IsStreamFin ();
+              bool newFinBit = false;
+
+              QuicSubheader newQsbToTx = QuicSubheader::CreateStreamSubHeader (qsb.GetStreamId (),
+                                                                               oldOffset, newPacketSize, oldOffBit, lengthBit, newFinBit);
+              QuicSubheader newQsbToBuffer = QuicSubheader::CreateStreamSubHeader (qsb.GetStreamId (),
+                                                                                   newOffset, newLength, newOffBit, newLengthBit, oldFinBit);
+
+              Ptr<Packet> firstPartPacket = currentItem->m_packet->CreateFragment (
+                0, newPacketSize);
+              NS_ASSERT_MSG (firstPartPacket->GetSize () == newPacketSize,
+                             "Wrong size " << firstPartPacket->GetSize ());
+              firstPartPacket->AddHeader (newQsbToTx);
+              // firstPartPacket->Print (std::cerr);
+
+              NS_LOG_INFO ("Split packet, putting second part back in application buffer - stream " << newQsbToBuffer.GetStreamId () << ", storing from offset " << newQsbToBuffer.GetOffset ());
+
+
+              Ptr<Packet> secondPartPacket = currentItem->m_packet->CreateFragment (
+                newPacketSize, newLength);
+              secondPartPacket->AddHeader (newQsbToBuffer);
+
+              Ptr<QuicSocketTxItem> toBeBuffered = CreateObject<QuicSocketTxItem> (*currentItem);
+              toBeBuffered->m_packet = secondPartPacket;
+              currentItem->m_packet = firstPartPacket;
+
+              QuicSocketTxItem::MergeItems (*outItem, *currentItem);
+              outItemSize += currentItem->m_packet->GetSize ();
+
+              m_appList.push (CreateObject<QuicSocketTxScheduleItem> (scheduleItem->GetStreamId (), scheduleItem->GetOffset (), scheduleItem->GetPriority (), toBeBuffered));
+              m_appSize += toBeBuffered->m_packet->GetSize ();
+
+
+              NS_LOG_LOGIC ("Buffer size: " << m_appSize << " (put back " << toBeBuffered->m_packet->GetSize () << " bytes)");
+              break; // at most one segment
+            }
+        }
+    }
+
+  NS_LOG_INFO ("Update: remaining App Size " << m_appSize << ", object size " << outItemSize);
+
+  //Print(std::cout);
+
+  return outItem;
+}
+
+uint32_t
+QuicSocketTxScheduler::AppSize (void) const
+{
+  return m_appSize;
+}
+
+
+}
diff --git a/src/quic/model/quic-socket-tx-scheduler.h b/src/quic/model/quic-socket-tx-scheduler.h
new file mode 100644
index 000000000..23456268b
--- /dev/null
+++ b/src/quic/model/quic-socket-tx-scheduler.h
@@ -0,0 +1,180 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2020 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Umberto Paro <umberto.paro@me.com>
+ *
+ */
+
+#ifndef QUICSOCKETTXSCHEDULER_H
+#define QUICSOCKETTXSCHEDULER_H
+
+#include "quic-socket.h"
+#include <queue>
+#include <vector>
+
+namespace ns3 {
+
+class QuicSocketTxItem;
+
+/**
+ * \ingroup quic
+ *
+ * \brief Tx item for QUIC with priority
+ */
+class QuicSocketTxScheduleItem : public Object
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+
+  QuicSocketTxScheduleItem (uint64_t id, uint64_t off, double p, Ptr<QuicSocketTxItem> it);
+  QuicSocketTxScheduleItem (const QuicSocketTxScheduleItem &other);
+
+  /**
+   *  Compare \p this to another QuicSocketTxScheduleItem
+   *
+   *  \param [in] o The other item
+   *  \return -1,0,+1 if `this < o`, `this == o`, or `this > o`
+   */
+  int Compare (const QuicSocketTxScheduleItem & o) const;
+
+  inline bool operator < (const QuicSocketTxScheduleItem& other) const
+  {
+    return Compare (other) < 0;
+  }
+  inline bool operator > (const QuicSocketTxScheduleItem& other) const
+  {
+    return Compare (other) > 0;
+  }
+  inline bool operator <= (const QuicSocketTxScheduleItem& other) const
+  {
+    return Compare (other) <= 0;
+  }
+  inline bool operator >= (const QuicSocketTxScheduleItem& other) const
+  {
+    return Compare (other) >= 0;
+  }
+
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  Ptr<QuicSocketTxItem> GetItem () const;
+
+  /**
+   * \brief Get the ID of the stream the item belongs to.
+   * \return the stream ID
+   */
+  uint64_t GetStreamId () const;
+
+  /**
+   * \brief Get the offset of the item in the stream.
+   * \return the offset
+   */
+  uint64_t GetOffset () const;
+
+  /**
+   * \brief Get the priority.
+   * \return the item priority
+   */
+  double GetPriority () const;
+
+  /**
+   * \brief Change the priority of the item.
+   * \param priority the new priority
+   */
+  void SetPriority (double priority);
+
+private:
+  uint64_t m_streamId;                //!< ID of the stream the item belongs to
+  uint64_t m_offset;                  //!< offset on the stream
+  double m_priority;                  //!< Priority level of the item (lowest is sent first)
+  Ptr<QuicSocketTxItem> m_item;       //!< TxItem containing the packet
+};
+
+
+class CompareScheduleItems
+{
+public:
+  bool operator() (Ptr<QuicSocketTxScheduleItem> ita, Ptr<QuicSocketTxScheduleItem> itb)
+  {
+    return (*ita) > (*itb);
+  }
+};
+/**
+ * \ingroup quic
+ *
+ * \brief Tx socket buffer for QUIC
+ */
+class QuicSocketTxScheduler : public Object
+{
+public:
+
+  QuicSocketTxScheduler ();
+  QuicSocketTxScheduler (const QuicSocketTxScheduler &other);
+  virtual ~QuicSocketTxScheduler (void);
+
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+
+  /**
+   * Add a tx item to the scheduling list (default behavior: FIFO scheduling)
+   *
+   * \param item a smart pointer to a transmission item
+   * \param retx true if the transmission item is being retransmitted
+   */
+  virtual void Add (Ptr<QuicSocketTxItem> item, bool retx);
+
+  /**
+   * \brief Get the next scheduled packet with a specified size
+   *
+   * \param numBytes number of bytes of the QuicSocketTxItem requested
+   * \return the item that contains the right packet
+   */
+  Ptr<QuicSocketTxItem> GetNewSegment (uint32_t numBytes);
+
+  /**
+   * Returns the total number of bytes in the application buffer
+   *
+   * \return the total number of bytes in the application buffer
+   */
+  uint32_t AppSize (void) const;
+  /**
+   * Add a schedule tx item to the scheduling list
+   *
+   * \param item a scheduling item with priority
+   * \param retx true if the item is being retransmitted
+   */
+  void AddScheduleItem (Ptr<QuicSocketTxScheduleItem> item, bool retx);
+
+private:
+  typedef std::priority_queue<Ptr<QuicSocketTxScheduleItem>, std::vector<Ptr<QuicSocketTxScheduleItem> >, CompareScheduleItems> QuicTxPacketList;        //!< container for data stored in the buffer
+  QuicTxPacketList m_appList;
+  uint32_t m_appSize;
+};
+
+} // namespace ns-3
+
+#endif /* QUIC_SOCKET_TX_SCHEDULER_H */
diff --git a/src/quic/model/quic-socket.cc b/src/quic/model/quic-socket.cc
new file mode 100644
index 000000000..79627c58f
--- /dev/null
+++ b/src/quic/model/quic-socket.cc
@@ -0,0 +1,106 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *
+ */
+
+#define __STDC_LIMIT_MACROS
+
+#include "ns3/object.h"
+#include "ns3/log.h"
+#include "ns3/uinteger.h"
+#include "ns3/double.h"
+#include "ns3/boolean.h"
+#include "ns3/trace-source-accessor.h"
+#include "ns3/nstime.h"
+#include "quic-socket.h"
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("QuicSocket");
+
+NS_OBJECT_ENSURE_REGISTERED (QuicSocket);
+
+const char* const
+QuicSocket::QuicStateName[QuicSocket::LAST_STATE] = {
+  "IDLE", "LISTENING", "CONNECTING_SVR",
+  "CONNECTING_CLT", "OPEN", "CLOSING"
+};
+
+TypeId
+QuicSocket::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicSocket")
+    .SetParent<Socket> ()
+    .SetGroupName ("Internet")
+  ;
+  return tid;
+}
+
+QuicSocket::QuicSocket ()
+  : Socket (),
+  m_socketType (NONE)
+{
+  NS_LOG_FUNCTION_NOARGS ();
+}
+
+QuicSocket::QuicSocket (const QuicSocket& sock)
+  : Socket (sock),
+  m_socketType (sock.m_socketType)
+{
+  NS_LOG_FUNCTION_NOARGS ();
+}
+
+QuicSocket::~QuicSocket ()
+{
+  NS_LOG_FUNCTION_NOARGS ();
+}
+
+QuicSocket::QuicSocketTypes_t
+QuicSocket::GetQuicSocketType () const
+{
+  return m_socketType;
+}
+
+void
+QuicSocket::SetQuicSocketType (QuicSocketTypes_t m_socketType)
+{
+  QuicSocket::m_socketType = m_socketType;
+}
+
+bool
+QuicSocket::CheckVersionNegotiation (uint32_t version)
+{
+  if (version == QUIC_VERSION_NEGOTIATION)
+    {
+      return true;
+    }
+  else if ((version & QUIC_VERSION_NEGOTIATION_PATTERN) == QUIC_VERSION_NEGOTIATION_PATTERN)
+    {
+      return true;
+    }
+  else
+    {
+      return false;
+    }
+}
+
+} // namespace ns3
diff --git a/src/quic/model/quic-socket.h b/src/quic/model/quic-socket.h
new file mode 100644
index 000000000..c93dbd3d5
--- /dev/null
+++ b/src/quic/model/quic-socket.h
@@ -0,0 +1,170 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *
+ */
+
+#ifndef QUICSOCKET_H
+#define QUICSOCKET_H
+
+#include "ns3/socket.h"
+
+/**
+ * [IETF DRAFT 10 - Quic Transport: sec 4]
+ *
+ * QUIC versions are identified using a 32-bit unsigned number. The version 0x00000000 is
+ * reserved to represent version negotiation. This version of the specification is
+ * identified by 0x00000001. Other versions of QUIC might have different properties to
+ * this version.
+ *
+ * Versions with the most significant 16 bits of the version number cleared are reserved
+ * for use in future IETF consensus docs. Versions that follow the pattern 0x?a?a?a?a are
+ * reserved for use in forcing version negotiation to be exercised. Version numbers used
+ * to identify IETF drafts are created by adding the draft number to 0xff000000.
+ *
+ * Implementors are encouraged to register version numbers of QUIC that they are using for
+ * private experimentation on the github wiki (here QUIC_UNI):
+ * https://github.com/quicwg/base-drafts/wiki/QUIC-Versions
+ */
+
+#define QUIC_VERSION 0x00000001 // This version of the specification
+#define QUIC_VERSION_NEGOTIATION 0x00000000 // Version negotiation
+#define QUIC_VERSION_NEGOTIATION_PATTERN 0x0A0A0A0A // Version negotiation pattern
+#define QUIC_VERSION_DRAFT_10 0xff00000A // Version IETF draft 10
+#define QUIC_VERSION_NS3_IMPL 0xf1f1f1f1 // Version Unipd
+
+namespace ns3 {
+
+/**
+ * \ingroup socket
+ * \ingroup quic
+ *
+ * \brief (abstract) base class of all QuicSockets
+ *
+ * This class exists solely for hosting QuicSocket attributes that can
+ * be reused across different implementations.
+ */
+class QuicSocket : public Socket
+{
+public:
+  /**
+   * Get the type ID.
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+
+  QuicSocket (void);
+  QuicSocket (const QuicSocket&);
+  virtual ~QuicSocket (void);
+
+  /**
+   * \brief Quic Socket types
+   */
+  typedef enum
+  {
+    CLIENT = 0,  //!< Client Socket
+    SERVER,      //!< Server Socket
+    NONE         //!< Unknown Socket
+  } QuicSocketTypes_t;
+
+  /**
+   * \brief Quic Socket states
+   */
+  typedef enum
+  {
+    IDLE = 0,         //!< Idle (no state yet)
+    LISTENING,        //!< Waiting for connection incoming
+    CONNECTING_SVR,   //!< Connection being set-up, server side
+    CONNECTING_CLT,   //!< Connection being set-up, client side
+    OPEN,             //!< Connection open
+    CLOSING,          //!< Termination of the connection
+    LAST_STATE,       //!< Last State for debug
+  } QuicStates_t;
+
+
+  /**
+   * \brief Literal names of QUIC Socket states for use in log messages
+   */
+  static const char* const QuicStateName[QuicSocket::LAST_STATE];
+
+  /**
+   * Get the socket type
+   *
+   * \return a QuicSocketTypes_t with the socket type
+   */
+  QuicSocketTypes_t GetQuicSocketType () const;
+
+  /**
+   * Set the socket type
+   *
+   * \param socketType a QuicSocketTypes_t with the socket type
+   */
+  void SetQuicSocketType (QuicSocketTypes_t socketType);
+
+  /**
+   * Check if the Quic version indicates a Version Negotiation request
+   *
+   * \param version the version to be checked
+   * \return true if the version indicates a Version Negotiation request, false otherwise
+   */
+  bool CheckVersionNegotiation (uint32_t version);
+
+protected:
+  QuicSocketTypes_t m_socketType;  //!< Quic Socket type
+
+private:
+  // Indirect the attribute setting and getting through private virtual methods
+
+  /**
+   * \brief Set the send buffer size.
+   * \param size the buffer size (in bytes)
+   */
+  //virtual void SetSndBufSize (uint32_t size) = 0;
+
+  /**
+   * \brief Get the send buffer size.
+   * \returns the buffer size (in bytes)
+   */
+  //virtual uint32_t GetSndBufSize (void) const = 0;
+
+  /**
+   * \brief Set the receive buffer size.
+   * \param size the buffer size (in bytes)
+   */
+  //virtual void SetRcvBufSize (uint32_t size) = 0;
+
+  /**
+   * \brief Get the receive buffer size.
+   * \returns the buffer size (in bytes)
+   */
+  //virtual uint32_t GetRcvBufSize (void) const = 0;
+
+
+  //eventuali set e get di altri parametri interessanti
+
+};
+
+} // namespace ns3
+
+#endif /* QUIC_SOCKET_H */
+
+
diff --git a/src/quic/model/quic-stream-base.cc b/src/quic/model/quic-stream-base.cc
new file mode 100644
index 000000000..b854890be
--- /dev/null
+++ b/src/quic/model/quic-stream-base.cc
@@ -0,0 +1,747 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *
+ */
+/*
+#define NS_LOG_APPEND_CONTEXT \
+  if (m_node and m_connectionId and (m_streamId >= 0)) { std::clog << " [node " << m_node->GetId () << " socket " << m_connectionId << " stream " << m_streamId << " " << StreamDirectionTypeToString () << "] "; }
+*/
+
+#include "ns3/abort.h"
+#include "ns3/node.h"
+#include "ns3/log.h"
+#include "ns3/simulation-singleton.h"
+#include "ns3/simulator.h"
+#include "ns3/packet.h"
+#include "ns3/uinteger.h"
+#include "ns3/double.h"
+#include "ns3/pointer.h"
+#include "ns3/trace-source-accessor.h"
+#include "quic-stream-base.h"
+#include "quic-header.h"
+#include "quic-transport-parameters.h"
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("QuicStreamBase");
+
+NS_OBJECT_ENSURE_REGISTERED (QuicStreamBase);
+
+TypeId
+QuicStreamBase::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicStreamBase")
+    .SetParent<QuicStream> ()
+    .SetGroupName ("Internet")
+    .AddConstructor<QuicStreamBase> ()
+    .AddAttribute ("StreamSndBufSize",
+                   "QuicStreamBase maximum transmit buffer size (bytes)",
+                   UintegerValue (131072), // 128k
+                   MakeUintegerAccessor (&QuicStreamBase::m_streamTxBufferSize),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddAttribute ("StreamRcvBufSize",
+                   "QuicStreamBase maximum receive buffer size (bytes)",
+                   UintegerValue (131072), // 128k
+                   MakeUintegerAccessor (&QuicStreamBase::m_streamRxBufferSize),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddAttribute ("MaxDataInterval",
+                   "Interval between MAX_DATA frames",
+                   UintegerValue (15000),                 // 10 packets
+                   MakeUintegerAccessor (&QuicStreamBase::m_maxDataInterval),
+                   MakeUintegerChecker<uint32_t> ())
+  ;
+  return tid;
+}
+
+TypeId
+QuicStreamBase::GetInstanceTypeId () const
+{
+  return QuicStreamBase::GetTypeId ();
+}
+
+
+QuicStreamBase::QuicStreamBase (void) 
+  : QuicStream (),
+  m_streamType (NONE),
+  m_streamDirectionType (UNKNOWN),
+  m_streamStateSend (IDLE),
+  m_streamStateRecv (IDLE),
+  m_node (0),
+  m_connectionId (0),
+  m_streamId (0),
+  m_quicl5 (0),
+  m_maxStreamData (0),
+  m_maxAdvertisedData (0),
+  m_sentSize (0),
+  m_recvSize (0),
+  m_fin (false)
+{
+  NS_LOG_FUNCTION (this);
+  m_rxBuffer = CreateObject<QuicStreamRxBuffer> ();
+  m_txBuffer = CreateObject<QuicStreamTxBuffer> ();
+}
+
+QuicStreamBase::~QuicStreamBase (void)
+{
+  NS_LOG_FUNCTION (this);
+}
+
+void
+QuicStreamBase::SetQuicL5 (Ptr<QuicL5Protocol> quicl5)
+{
+  NS_LOG_FUNCTION (this);
+  m_quicl5 = quicl5;
+  SetStreamRcvBufSize (m_streamRxBufferSize);
+  SetStreamSndBufSize (m_streamTxBufferSize);
+}
+
+
+int
+QuicStreamBase::Send (Ptr<Packet> frame)
+{
+  NS_LOG_FUNCTION (this);
+
+  SetStreamStateSendIf (m_streamStateSend == IDLE and (m_streamDirectionType == SENDER or m_streamDirectionType == BIDIRECTIONAL), OPEN);
+
+  if (m_streamStateSend == OPEN or m_streamStateSend == SEND)
+    {
+      int sent = AppendingTx (frame);
+
+
+      NS_LOG_LOGIC ("Sending packets in stream. TxBufSize = " << m_txBuffer->AppSize () << " AvailableWindow = " << AvailableWindow () << " state " << QuicStreamStateName[m_streamStateSend]);
+
+      if ((m_streamStateSend == OPEN or m_streamStateSend == SEND) and AvailableWindow () > 0)
+        {
+          if (!m_streamSendPendingDataEvent.IsRunning ())
+            {
+              m_streamSendPendingDataEvent = Simulator::Schedule (TimeStep (1), &QuicStreamBase::SendPendingData, this);
+            }
+        }
+      return sent;
+    }
+  else
+    {
+      NS_ABORT_MSG ("Sending in state" << QuicStreamStateName[m_streamStateSend]);
+      //m_errno = ERROR_NOTCONN;
+      return -1;
+    }
+}
+
+int
+QuicStreamBase::AppendingTx (Ptr<Packet> frame)
+{
+  NS_LOG_FUNCTION (this);
+
+  if (!m_txBuffer->Add (frame))
+    {
+      if (frame->GetSize () > 0)
+        NS_LOG_WARN ("Exceeding Stream Tx Buffer Size");
+      //m_quicl5->SignalAbortConnection (QuicSubheader::TransportErrorCodes_t::PROTOCOL_VIOLATION,
+      //                                     "Received RST_STREAM in Stream 0");
+      //m_errno = ERROR_MSGSIZE;
+      return -1;
+    }
+  return frame->GetSize ();
+}
+
+uint32_t
+QuicStreamBase::GetStreamTxAvailable () const
+{
+  return m_txBuffer->Available ();
+}
+
+
+uint32_t
+QuicStreamBase::SendPendingData (void)
+{
+  NS_LOG_FUNCTION (this);
+
+  if (m_txBuffer->AppSize () == 0)
+    {
+      NS_LOG_INFO ("Nothing to send");
+      return false;
+    }
+
+  uint32_t nFrameSent = 0;
+  uint32_t availableWindow = AvailableWindow ();
+
+  while (availableWindow > 0 and m_txBuffer->AppSize () > 0)
+    {
+//	  uint32_t availableData = m_txBuffer->Available();
+
+//	  if(availableData < availableWindow)
+//	  {
+//	          NS_LOG_INFO("Ask the app for more data before trying to send");
+//		  NotifySend(GetTxAvailable());
+//	  }
+
+//	  if(availableWindow < m_quicl5->GetMaxPacketSize() and availableData > availableWindow)
+//	  {
+//	          NS_LOG_INFO("Preventing Silly Windows Syndrome. Wait to Send.");
+//		  break;
+//	  }
+
+
+      uint32_t s = std::min (availableWindow, (uint32_t)m_quicl5->GetMaxPacketSize ());
+
+      NS_LOG_DEBUG ("BEFOREAvailable Window " << AvailableWindow () <<
+                    "Stream RWnd " << StreamWindow () <<
+                    "BytesInFlight " << m_txBuffer->BytesInFlight () << "BufferedSize " << m_txBuffer->AppSize () <<
+                    "MaxPacketSize " << (uint32_t)m_quicl5->GetMaxPacketSize ());
+
+      int success = SendDataFrame ((SequenceNumber32)m_sentSize, s);
+
+      availableWindow = AvailableWindow ();
+
+      if (success < 0)
+        {
+          return -1;
+        }
+
+      NS_LOG_DEBUG ("AFTERAvailable Window " << AvailableWindow () <<
+                    "Stream RWnd " << StreamWindow () <<
+                    "BytesInFlight " << m_txBuffer->BytesInFlight () << "BufferedSize " << m_txBuffer->AppSize () <<
+                    "MaxPacketSize " << (uint32_t)m_quicl5->GetMaxPacketSize ());
+
+      ++nFrameSent;
+
+    }
+
+  if (nFrameSent > 0)
+    {
+      NS_LOG_INFO ("SendPendingData sent " << nFrameSent << " frames");
+    }
+  else
+    {
+      NS_LOG_INFO ("SendPendingData no frames sent");
+    }
+
+  return nFrameSent;
+}
+
+uint32_t
+QuicStreamBase::SendDataFrame (SequenceNumber32 seq, uint32_t maxSize)
+{
+  NS_LOG_FUNCTION (this);
+
+  if (m_streamStateSend == OPEN and (m_streamDirectionType == SENDER or m_streamDirectionType == BIDIRECTIONAL))
+    {
+      SetStreamStateSend (SEND);
+    }
+
+  Ptr<Packet> frame = m_txBuffer->NextSequence (maxSize, seq);
+
+  bool lengthBit = true;
+
+  QuicSubheader sub = QuicSubheader::CreateStreamSubHeader (m_streamId, (uint64_t)seq.GetValue (), frame->GetSize (), m_sentSize != 0, lengthBit, m_fin);
+  m_sentSize += frame->GetSize ();
+
+  frame->AddHeader (sub);
+  int size = m_quicl5->Send (frame);
+  if (size < 0)
+    {
+      frame->RemoveHeader (sub);
+      m_txBuffer->Rejected (frame);
+      NS_LOG_WARN ("Sending error - could not append packet to socket buffer. Putting packet back in stream buffer");
+      m_sentSize -= frame->GetSize ();
+    }
+  else if (m_streamStateSend == SEND and m_fin and (m_streamDirectionType == SENDER or m_streamDirectionType == BIDIRECTIONAL))
+    {
+      SetStreamStateSend (DATA_SENT);
+    }
+
+  return size;
+}
+
+uint32_t
+QuicStreamBase::AvailableWindow () const
+{
+  NS_LOG_FUNCTION (this);
+  uint32_t streamRWnd = (m_streamId != 0) ? StreamWindow () : m_maxStreamData;
+  return streamRWnd;
+}
+
+uint32_t
+QuicStreamBase::StreamWindow () const
+{
+  NS_LOG_FUNCTION (this);
+  uint32_t inFlight = m_txBuffer->BytesInFlight ();
+
+  return (inFlight > m_maxStreamData) ? 0 : m_maxStreamData - inFlight;
+}
+
+int
+QuicStreamBase::Recv (Ptr<Packet> frame, const QuicSubheader& sub, Address &address)
+{
+  NS_LOG_FUNCTION (this);
+
+  uint8_t frameType = sub.GetFrameType ();
+
+  switch (frameType)
+    {
+
+    case QuicSubheader::RST_STREAM:
+      // TODO reset and close this stream
+      if (m_streamId == 0)
+        {
+          m_quicl5->SignalAbortConnection (QuicSubheader::TransportErrorCodes_t::PROTOCOL_VIOLATION,
+                                           "Received RST_STREAM in Stream 0");
+          return -1;
+        }
+
+      if (!(m_streamDirectionType == RECEIVER or m_streamDirectionType == BIDIRECTIONAL))
+        {
+          m_quicl5->SignalAbortConnection (QuicSubheader::TransportErrorCodes_t::PROTOCOL_VIOLATION,
+                                           "Received RST_STREAM in send-only Stream");
+          return -1;
+        }
+
+      if ((m_streamStateRecv == DATA_READ or m_streamStateRecv == RESET_READ))
+        {
+          m_quicl5->SignalAbortConnection (QuicSubheader::TransportErrorCodes_t::PROTOCOL_VIOLATION,
+                                           "Receiving RST_STREAM Frames in DATA_READ or RESET_READ Stream State");
+          return -1;
+        }
+
+      if (m_fin and m_rxBuffer->GetFinalSize () != sub.GetOffset ())
+        {
+          m_quicl5->SignalAbortConnection (QuicSubheader::TransportErrorCodes_t::FINAL_OFFSET_ERROR,
+                                           "RST_STREAM causes final offset to change for a Stream");
+          return -1;
+        }
+
+      SetStreamStateRecvIf (m_streamStateRecv == RECV or m_streamStateSend == SIZE_KNOWN or m_streamStateSend == DATA_RECVD, RESET_RECVD);
+
+      break;
+
+    case QuicSubheader::MAX_STREAM_DATA:
+      if (!(m_streamDirectionType == SENDER or m_streamDirectionType == BIDIRECTIONAL))
+        {
+          m_quicl5->SignalAbortConnection (QuicSubheader::TransportErrorCodes_t::PROTOCOL_VIOLATION,
+                                           "Received MAX_STREAM_DATA in receive-only Stream");
+          return -1;
+        }
+      else
+        {
+          SetMaxStreamData (sub.GetMaxStreamData ());
+          NS_LOG_INFO ("Max stream data (flow control) - " << m_maxStreamData);
+        }
+
+      break;
+
+    case QuicSubheader::STREAM_BLOCKED:
+      // TODO block the stream
+      if (!(m_streamDirectionType == RECEIVER or m_streamDirectionType == BIDIRECTIONAL))
+        {
+          m_quicl5->SignalAbortConnection (QuicSubheader::TransportErrorCodes_t::PROTOCOL_VIOLATION,
+                                           "Received STREAM_BLOCKED in send-only Stream");
+          return -1;
+        }
+
+      break;
+
+    case QuicSubheader::STOP_SENDING:
+      // TODO implement a mechanism to stop sending data
+      if (!(m_streamDirectionType == SENDER or m_streamDirectionType == BIDIRECTIONAL))
+        {
+          m_quicl5->SignalAbortConnection (QuicSubheader::TransportErrorCodes_t::PROTOCOL_VIOLATION,
+                                           "Received STOP_SENDING in receive-only Stream");
+          return -1;
+        }
+
+      break;
+
+    case QuicSubheader::STREAM000:
+    case QuicSubheader::STREAM001:
+    case QuicSubheader::STREAM010:
+    case QuicSubheader::STREAM011:
+    case QuicSubheader::STREAM100:
+    case QuicSubheader::STREAM101:
+    case QuicSubheader::STREAM110:
+    case QuicSubheader::STREAM111:
+
+
+      if (!(m_streamDirectionType == RECEIVER or m_streamDirectionType == BIDIRECTIONAL))
+        {
+          m_quicl5->SignalAbortConnection (QuicSubheader::TransportErrorCodes_t::PROTOCOL_VIOLATION,
+                                           "Received STREAM in send-only Stream");
+          return -1;
+        }
+
+      if (!(m_streamStateRecv == IDLE or m_streamStateRecv == RECV or m_streamStateRecv == SIZE_KNOWN))
+        {
+          m_quicl5->SignalAbortConnection (QuicSubheader::TransportErrorCodes_t::PROTOCOL_VIOLATION,
+                                           "Received STREAM in State unequal to IDLE, RECV, SIZE_KNOWN");
+          return -1;
+        }
+
+      if (m_rxBuffer->Size () + sub.GetLength () > m_maxStreamData)
+        {
+          m_quicl5->SignalAbortConnection (QuicSubheader::TransportErrorCodes_t::FLOW_CONTROL_ERROR,
+                                           "Received more data w.r.t. Max Stream Data limit");
+          return -1;
+        }
+
+      SetStreamStateRecvIf (m_streamStateRecv == IDLE, RECV);
+
+      if (m_quicl5->ContainsTransportParameters () and m_streamId == 0)
+        {
+          QuicTransportParameters transport;
+          frame->RemoveHeader (transport);
+          m_quicl5->OnReceivedTransportParameters (transport);
+        }
+
+      if (m_fin and sub.IsStreamFin () and m_rxBuffer->GetFinalSize () != sub.GetOffset ())
+        {
+          m_quicl5->SignalAbortConnection (QuicSubheader::TransportErrorCodes_t::FINAL_OFFSET_ERROR,
+                                           "STREAM causes final offset to change for a Stream");
+          return -1;
+        }
+
+      m_fin = sub.IsStreamFin ();
+
+      if (m_fin && m_streamId == 0)
+        {
+          m_quicl5->SignalAbortConnection (QuicSubheader::TransportErrorCodes_t::PROTOCOL_VIOLATION,
+                                           "Received Stream FIN in Stream 0");
+          return -1;
+        }
+
+      SetStreamStateRecvIf (m_streamStateRecv == RECV and m_fin, SIZE_KNOWN);
+
+      if (m_recvSize == sub.GetOffset ())
+        {
+
+          NS_LOG_INFO ("Received a frame with the correct order of size " << sub.GetLength ());
+          m_recvSize += sub.GetLength ();
+
+          if (m_maxAdvertisedData == 0 || m_recvSize + m_rxBuffer->Available () > m_maxAdvertisedData + m_maxDataInterval)
+            {
+              m_maxAdvertisedData = m_recvSize + m_rxBuffer->Available ();
+              QuicSubheader sub = QuicSubheader::CreateMaxData (m_recvSize + m_rxBuffer->Available ());
+              // build empty packet
+              Ptr<Packet> maxStream = Create<Packet> (0);
+              maxStream->AddHeader (sub);
+              m_quicl5->Send (maxStream);
+            }
+
+          NS_LOG_LOGIC ("Try to Flush RxBuffer if Available - offset " << m_recvSize);
+          // check if the packets in the RX buffer can be released (in order release)
+          std::pair<uint64_t, uint64_t> offSetLength = m_rxBuffer->GetDeliverable (m_recvSize);
+          NS_LOG_LOGIC ("Extracting " << offSetLength.second << " bytes from RxBuffer");
+          if (offSetLength.second > 0)
+            {
+              Ptr<Packet> payload = m_rxBuffer->Extract (offSetLength.second);
+              m_recvSize += offSetLength.second;
+              frame->AddAtEnd (payload);
+            }
+          NS_LOG_LOGIC ("Flushed RxBuffer - new offset " << m_recvSize << ", " << m_rxBuffer->Available () << "bytes available");
+
+          SetStreamStateRecvIf (m_streamStateRecv == SIZE_KNOWN and m_rxBuffer->Size () == 0, DATA_RECVD);
+
+          if (m_streamId != 0 )
+            {
+              if (sub.GetMaxStreamData () > 0)
+                {
+                  SetMaxStreamData (sub.GetMaxStreamData ());
+                  NS_LOG_LOGIC ("Received window set to offset " << sub.GetMaxStreamData ());
+                }
+              m_quicl5->Recv (frame, address);
+            }
+          else
+            {
+              NS_LOG_INFO ("Received handshake Message in Stream 0");
+            }
+
+          SetStreamStateRecvIf (m_streamStateRecv == DATA_RECVD, DATA_READ);
+
+        }
+      else
+        {
+          if (m_streamId != 0 && sub.GetMaxStreamData () > 0)
+            {
+              SetMaxStreamData (sub.GetMaxStreamData ());
+              NS_LOG_LOGIC ("Received window set to offset " << sub.GetMaxStreamData ());
+            }
+          NS_LOG_INFO ("Buffering unordered received frame - offset " << m_recvSize << ", frame offset " << sub.GetOffset ());
+          if (!m_rxBuffer->Add (frame, sub) && frame->GetSize () > 0)
+            {
+              // Insert failed: No or duplicate data, or RX buffer full
+              NS_LOG_WARN ("Dropping packet as it could not be inserted in RX buffer");
+              if (frame->GetSize() > m_rxBuffer->Available()) {
+                  // Abort connection if indeed buffer is full
+                  m_quicl5->SignalAbortConnection (QuicSubheader::TransportErrorCodes_t::NO_ERROR, "Aborting connection due to full RX buffer");
+              }
+            }
+        }
+
+      break;
+
+    default:
+
+      NS_ABORT_MSG ("Received Corrupted Frame");
+      break;
+    }
+
+  return 0;
+}
+
+// void
+// QuicStreamBase::CommandFlow (uint8_t type)
+// {
+//   NS_LOG_FUNCTION (this);
+
+//   switch (type)
+//     {
+
+//     case QuicSubheader::RST_STREAM:
+//       // TODO
+//       NS_ABORT_MSG_IF (!(m_streamDirectionType == SENDER or m_streamDirectionType == BIDIRECTIONAL), " Sending RstStream Frames in Receiver Stream");
+//       NS_ABORT_MSG_IF ((m_streamStateRecv == DATA_READ or m_streamStateRecv == RESET_READ or m_streamStateRecv == RESET_SENT), " Sending RstStream Frames in " << QuicStreamStateName[m_streamStateRecv] << " State");
+
+//       SetStreamStateSendIf (m_streamStateSend == OPEN or m_streamStateSend == SEND or m_streamStateSend == DATA_SENT, RESET_SENT);
+//       //	if((m_streamStateSend = OPEN or m_streamStateSend == SEND or m_streamStateSend == DATA_SENT)){SetStreamStateSend(RESET_SENT);}
+
+//       break;
+
+//     case QuicSubheader::MAX_STREAM_DATA:
+//       // TODO
+//       NS_ABORT_MSG_IF (!(m_streamDirectionType == RECEIVER or m_streamDirectionType == BIDIRECTIONAL), " Sending MaxStreamData Frame in Sender Stream");
+
+//       break;
+
+//     case QuicSubheader::STREAM_BLOCKED:
+//       // TODO
+//       NS_ABORT_MSG_IF (!(m_streamDirectionType == SENDER or m_streamDirectionType == BIDIRECTIONAL), " Sending StreamBlocked Frame in Receiver Stream");
+
+//       break;
+
+//     case QuicSubheader::STOP_SENDING:
+//       // TODO
+//       NS_ABORT_MSG_IF (!(m_streamDirectionType == RECEIVER or m_streamDirectionType == BIDIRECTIONAL), " Sending StopSending Frame in Sender Stream");
+
+//       break;
+
+//     default:
+//       NS_ABORT_MSG ("Received Corrupted Command");
+//       break;
+
+//     }
+
+// }
+
+uint32_t
+QuicStreamBase::SendMaxStreamData ()
+{
+  return m_recvSize + m_rxBuffer->Available ();
+}
+
+void
+QuicStreamBase::SetMaxStreamData (uint32_t maxStreamData)
+{
+  NS_LOG_FUNCTION (this << maxStreamData);
+  NS_LOG_DEBUG ("Update max stream data from " << m_maxStreamData << " to " << maxStreamData);
+  m_maxStreamData = maxStreamData;
+}
+
+uint32_t
+QuicStreamBase::GetMaxStreamData () const
+{
+  return m_maxStreamData;
+}
+
+void
+QuicStreamBase::SetStreamDirectionType (const QuicStreamDirectionTypes_t& streamDirectionType)
+{
+  NS_LOG_FUNCTION (this);
+  m_streamDirectionType = streamDirectionType;
+}
+
+QuicStream::QuicStreamDirectionTypes_t
+QuicStreamBase::GetStreamDirectionType ()
+{
+  return m_streamDirectionType;
+}
+
+void
+QuicStreamBase::SetStreamType (const QuicStreamTypes_t& streamType)
+{
+  NS_LOG_FUNCTION (this);
+  m_streamType = streamType;
+}
+
+void
+QuicStreamBase::SetStreamStateSend (const QuicStreamStates_t& streamState)
+{
+  NS_LOG_FUNCTION (this);
+
+  if (m_streamType == SERVER_INITIATED_BIDIRECTIONAL or m_streamType == SERVER_INITIATED_UNIDIRECTIONAL)
+    {
+
+      NS_LOG_INFO ("Server Stream " << QuicStreamStateName[m_streamStateSend] << " -> " << QuicStreamStateName[streamState] << "");
+
+    }
+  else
+    {
+
+      NS_LOG_INFO ("Client Stream " << QuicStreamStateName[m_streamStateSend] << " -> " << QuicStreamStateName[streamState] << "");
+
+    }
+
+  m_streamStateSend = streamState;
+}
+
+void
+QuicStreamBase::SetStreamStateSendIf (bool condition, const QuicStreamStates_t& streamState)
+{
+  NS_LOG_FUNCTION (this);
+  if (condition)
+    {
+      SetStreamStateSend (streamState);
+    }
+}
+
+
+void
+QuicStreamBase::SetStreamStateRecv (const QuicStreamStates_t& streamState)
+{
+  NS_LOG_FUNCTION (this);
+
+  if (m_streamType == SERVER_INITIATED_BIDIRECTIONAL or m_streamType == SERVER_INITIATED_UNIDIRECTIONAL)
+    {
+
+      NS_LOG_INFO ("Server Stream " << QuicStreamStateName[m_streamStateRecv] << " -> " << QuicStreamStateName[streamState] << "");
+
+    }
+  else
+    {
+
+      NS_LOG_INFO ("Client Stream " << QuicStreamStateName[m_streamStateRecv] << " -> " << QuicStreamStateName[streamState] << "");
+
+    }
+
+  m_streamStateRecv = streamState;
+}
+
+void
+QuicStreamBase::SetStreamStateRecvIf (bool condition, const QuicStreamStates_t& streamState)
+{
+  NS_LOG_FUNCTION (this);
+  if (condition)
+    {
+      SetStreamStateRecv (streamState);
+    }
+}
+
+void
+QuicStreamBase::SetNode (Ptr<Node> node)
+{
+  NS_LOG_FUNCTION (this);
+  m_node = node;
+}
+
+void
+QuicStreamBase::SetStreamId (uint64_t streamId)
+{
+  NS_LOG_FUNCTION (this);
+  m_streamId = streamId;
+
+  uint64_t mask = 0x00000003;
+
+  switch (m_streamId & mask)
+    {
+
+    case 0:
+      SetStreamType (QuicStream::CLIENT_INITIATED_BIDIRECTIONAL);
+      break;
+    case 1:
+      SetStreamType (QuicStream::SERVER_INITIATED_BIDIRECTIONAL);
+      break;
+    case 2:
+      SetStreamType (QuicStream::CLIENT_INITIATED_UNIDIRECTIONAL);
+      break;
+    case 3:
+      SetStreamType (QuicStream::SERVER_INITIATED_UNIDIRECTIONAL);
+      break;
+    }
+
+}
+
+uint64_t
+QuicStreamBase::GetStreamId (void)
+{
+  return m_streamId;
+}
+
+void
+QuicStreamBase::SetConnectionId (uint64_t connId)
+{
+  NS_LOG_FUNCTION (this << connId);
+  m_connectionId = connId;
+}
+
+std::string
+QuicStreamBase::StreamDirectionTypeToString () const
+{
+  static const char* StreamDirectionTypeNames[6] = {
+    "SENDER",
+    "RECEIVER",
+    "BIDIRECTIONAL",
+    "UNKNOWN"
+  };
+
+  std::string typeDescription = "";
+
+  typeDescription.append (StreamDirectionTypeNames[m_streamDirectionType]);
+
+  return typeDescription;
+}
+
+void
+QuicStreamBase::SetStreamSndBufSize (uint32_t size)
+{
+  NS_LOG_FUNCTION (this << size);
+  m_streamTxBufferSize = size;
+  m_txBuffer->SetMaxBufferSize (size);
+}
+
+uint32_t
+QuicStreamBase::GetStreamSndBufSize (void) const
+{
+  return m_txBuffer->GetMaxBufferSize ();
+}
+
+void
+QuicStreamBase::SetStreamRcvBufSize (uint32_t size)
+{
+  NS_LOG_FUNCTION (this << size);
+  m_streamRxBufferSize = size;
+  m_rxBuffer->SetMaxBufferSize (size);
+}
+
+uint32_t
+QuicStreamBase::GetStreamRcvBufSize (void) const
+{
+  return m_rxBuffer->GetMaxBufferSize ();
+}
+
+} // namespace ns3
diff --git a/src/quic/model/quic-stream-base.h b/src/quic/model/quic-stream-base.h
new file mode 100644
index 000000000..6d0e4efb9
--- /dev/null
+++ b/src/quic/model/quic-stream-base.h
@@ -0,0 +1,225 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *
+ */
+
+#ifndef QUICSTREAMBASE_H_
+#define QUICSTREAMBASE_H_
+
+#include "ns3/ptr.h"
+#include "ns3/traced-value.h"
+#include "quic-stream.h"
+#include "ns3/event-id.h"
+#include "quic-stream-rx-buffer.h"
+#include "quic-stream-tx-buffer.h"
+#include "quic-subheader.h"
+#include "quic-header.h"
+#include "quic-l5-protocol.h"
+//#include "quic-frame-manager.h"
+
+
+namespace ns3 {
+
+/**
+ * \ingroup quic
+ *
+ * \brief A base class for implementation of a QUIC stream
+ *
+ * This class contains the essential components of Quic Streams, as well as streams
+ * interfaces to call. This class provides credit-based flow control; congestion
+ * control is delegated to subclasses of QuicCongestionOps
+ *
+ */
+class QuicStreamBase : public QuicStream
+{
+public:
+  /**
+   * Get the type ID.
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+
+  /**
+   * \brief Get the instance TypeId
+   * \return the instance TypeId
+   */
+  virtual TypeId GetInstanceTypeId () const;
+
+  QuicStreamBase (void);
+  virtual ~QuicStreamBase (void);
+
+  /**
+   * \brief Set the QUIC L5 object
+   *
+   * \param quicL5 a smart pointer to a QuicL5Protocol object
+   */
+  void SetQuicL5 (Ptr<QuicL5Protocol> quicl5);
+
+  /**
+   * \brief Insert a frame in the TX buffer and trigger SendPendingData
+   *
+   * \param frame a smart pointer to a packer
+   * \return -1 in case of errors, the size of the packet sent otherwise
+   */
+  int Send (Ptr<Packet> frame);
+
+  /**
+   * \brief Perform flow control by checking the available window
+   *   according to what was negotiated with the other endpoint
+   *   and the bytes in flight.
+   * \warning This method handles differently stream 0 and the other streams.
+   *
+   * \return the available window for the transmission
+   */
+  uint32_t AvailableWindow () const;
+
+  /**
+   * \brief Compute the stream window for streams different from 0
+   *
+   * \return the amount of data that can be sent on the stream
+   */
+  uint32_t StreamWindow () const;
+
+  /**
+   * \brief Called by the QuicL5Protocol class to forward a frame for this stream
+   *
+   * \param frame a smart pointer for the received frame
+   * \param sub the QuicSubheader of the received frame
+   * \param address the Address of the sender
+   * \return -1 in case of errors, 0 otherwise
+   */
+  int Recv (Ptr<Packet> frame, const QuicSubheader& subb, Address &address);
+
+  /**
+   * \brief Insert the frame in the buffer, or return -1 if the buffer is full
+   *
+   * \param frame a smart pointer to a packet
+   * \return the size of the packet added to the frame, or -1 if the buffer is full
+   */
+  int AppendingTx (Ptr<Packet> frame);
+
+  /**
+   * \brief Check if there is data to send, and call SendDataFrame
+   *
+   * \return nFrameSent the number of frames sent in the stream
+   */
+  uint32_t SendPendingData (void);
+
+  /**
+   * \brief Send a data frame of size maxSize
+   *
+   * \param seq the sequence number in the buffer of the next packet to be sent
+   * \param the size of the frame to be sent
+   * \return the size of the frame sent
+   */
+  uint32_t SendDataFrame (SequenceNumber32 seq, uint32_t maxSize);
+
+  /**
+     * \brief Calculate the maximum amount of data that can be received by this stream
+     *
+     * \return a uint32_t with the maximum amount of data
+     */
+  uint32_t SendMaxStreamData ();
+
+  // void CommandFlow (uint8_t type);
+
+  /**
+   * \brief Set the maximum amount of data that can be sent in this stream
+   *
+   * \param maxStreamData a uint32_t with the maximum amount of data
+   */
+  void SetMaxStreamData (uint32_t maxStreamData);
+
+  /**
+   * \brief Get the maximum amount of data that can be sent in this stream
+   *
+   * \return a uint32_t with the maximum amount of data
+   */
+  uint32_t GetMaxStreamData () const;
+
+  /**
+   * \brief Set the stream TX buffer size.
+   * \param size the buffer size (in bytes)
+   */
+  void SetStreamSndBufSize (uint32_t size);
+
+  /**
+   * \brief Get the stream TX buffer size.
+   * \returns the buffer size (in bytes)
+   */
+  uint32_t GetStreamSndBufSize (void) const;
+
+  /**
+   * \brief Set the stream RX buffer size.
+   * \param size the buffer size (in bytes)
+   */
+  void SetStreamRcvBufSize (uint32_t size);
+
+  /**
+   * \brief Get the stream RX buffer size.
+   * \returns the buffer size (in bytes)
+   */
+  uint32_t GetStreamRcvBufSize (void) const;
+
+  // Implementation of QuicStream virtuals
+  std::string StreamDirectionTypeToString () const;
+  void SetStreamDirectionType (const QuicStreamDirectionTypes_t& streamDirectionType);
+  QuicStreamDirectionTypes_t GetStreamDirectionType ();
+  void SetStreamType (const QuicStreamTypes_t& streamType);
+  void SetStreamStateSendIf (bool condition, const QuicStreamStates_t& streamState);
+  void SetStreamStateSend (const QuicStreamStates_t& streamState);
+  void SetStreamStateRecv (const QuicStreamStates_t& streamState);
+  void SetStreamStateRecvIf (bool condition, const QuicStreamStates_t& streamState);
+  void SetNode (Ptr<Node> node);
+  void SetConnectionId (uint64_t connId);
+  void SetStreamId (uint64_t streamId);
+  uint64_t GetStreamId (void);
+  uint32_t GetStreamTxAvailable (void) const;
+
+protected:
+  QuicStreamTypes_t m_streamType;                    //!< The stream type
+  QuicStreamDirectionTypes_t m_streamDirectionType;  //!< The stream direction
+  QuicStreamStates_t m_streamStateSend;              //!< The state of the send stream
+  QuicStreamStates_t m_streamStateRecv;              //!< The state of the receive stream
+  Ptr<Node> m_node;                                  //!< The node this stream is associated with
+  uint64_t m_connectionId;                           //!< The connection ID
+  uint64_t m_streamId;                               //!< The stream ID
+  Ptr<QuicL5Protocol>  m_quicl5;                     //!< The L5 Protocol this stack is associated with
+
+  // Flow Control Parameters
+  uint32_t m_maxStreamData;                          //!< Maximum amount of data that can be sent/received on the stream
+  uint32_t m_maxAdvertisedData;                                          //!< Last advertised MaxData
+  uint32_t m_maxDataInterval;                                            //!< Interval between MaxData frames
+  uint64_t m_sentSize;                               //!< Amount of data sent in this stream
+  uint64_t m_recvSize;                               //!< Amount of data received in this stream
+  bool m_fin;                                        //!< A flag indicating if the FIN bit has already been received/sent
+  Ptr<QuicStreamRxBuffer> m_rxBuffer;                //!< Rx buffer (reordering buffer)
+  Ptr<QuicStreamTxBuffer> m_txBuffer;                //!< Tx buffer
+  uint32_t m_streamTxBufferSize;                     //!< Size of the stream TX buffer
+  uint32_t m_streamRxBufferSize;                     //!< Size of the stream RX buffer
+  EventId m_streamSendPendingDataEvent;              //!< Micro-delay event to send pending data
+
+};
+
+} //namespace ns3
+#endif /* QUIC_STREAM_BASE_H_ */
diff --git a/src/quic/model/quic-stream-rx-buffer.cc b/src/quic/model/quic-stream-rx-buffer.cc
new file mode 100644
index 000000000..170fd856f
--- /dev/null
+++ b/src/quic/model/quic-stream-rx-buffer.cc
@@ -0,0 +1,304 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *
+ */
+
+#include "ns3/packet.h"
+#include "ns3/fatal-error.h"
+#include "ns3/log.h"
+// #include "ns3/ipv4-end-point-demux.h"
+// #include "ns3/ipv6-end-point-demux.h"
+// #include "ns3/ipv4-end-point.h"
+// #include "ns3/ipv6-end-point.h"
+// #include "ns3/ipv4-l3-protocol.h"
+// #include "ns3/ipv6-l3-protocol.h"
+// #include "ns3/ipv6-routing-protocol.h"
+#include <algorithm>
+#include "quic-stream-rx-buffer.h"
+#include "quic-subheader.h"
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("QuicStreamRxBuffer");
+
+QuicStreamRxItem::QuicStreamRxItem ()
+  : m_packet (0),
+  m_offset (0),
+  m_fin (false)
+{
+}
+
+QuicStreamRxItem::QuicStreamRxItem (const QuicStreamRxItem &other)
+  : m_packet (other.m_packet),
+  m_offset (other.m_offset),
+  m_fin (other.m_fin)
+{
+}
+
+void
+QuicStreamRxItem::Print (std::ostream &os) const
+{
+  os << "[OFF " << m_offset << "]";
+
+  if (m_fin)
+    {
+      os << "|fin|";
+    }
+
+}
+
+NS_OBJECT_ENSURE_REGISTERED (QuicStreamRxBuffer);
+
+TypeId
+QuicStreamRxBuffer::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicStreamRxBuffer")
+    .SetParent<Object> ()
+    .SetGroupName ("Internet")
+    .AddConstructor<QuicStreamRxBuffer> ()
+  ;
+  return tid;
+}
+
+QuicStreamRxBuffer::QuicStreamRxBuffer ()
+  : m_numBytesInBuffer (0),
+  m_finalSize (0),
+  m_maxBuffer (131072),
+  m_recvFin (
+    false)
+{
+  m_streamRecvList = QuicStreamRxPacketList ();
+}
+
+QuicStreamRxBuffer::~QuicStreamRxBuffer ()
+{
+}
+
+bool
+QuicStreamRxBuffer::Add (Ptr<Packet> p, const QuicSubheader& sub)
+{
+  NS_LOG_FUNCTION (this << p << sub);
+
+  NS_LOG_INFO (
+    "Try to append " << p->GetSize () << " bytes " << ", availSize=" << Available ());
+
+  if (p->GetSize () <= Available ())
+    {
+      if (p->GetSize () > 0)
+        {
+
+          QuicStreamRxItem *item = new QuicStreamRxItem ();
+          item->m_packet = p->Copy ();
+          item->m_offset = sub.GetOffset ();
+          item->m_fin = sub.IsStreamFin ();
+
+          QuicStreamRxPacketList::iterator it;
+
+          // FIN packet for the stream
+          if (sub.IsStreamFin ())
+            {
+              NS_LOG_LOGIC ("FIN packet for the stream");
+              m_finalSize = sub.GetOffset () + p->GetSize ();
+              m_recvFin = true;
+              m_streamRecvList.insert (m_streamRecvList.end (), item);
+              return true;
+            }
+
+          // Find the right place to insert packet (TODO: binary search would be more efficient)
+          bool inserted = false;
+          for (it = m_streamRecvList.begin (); it < m_streamRecvList.end ();
+               ++it)
+            {
+              if (item->m_offset == (*it)->m_offset)
+                {
+                  // Duplicate packet
+                  NS_LOG_WARN ("Discarded duplicate packet.");
+                  return false;
+                }
+              if (item->m_offset < (*it)->m_offset)
+                {
+                  m_streamRecvList.insert (it, item);
+                  NS_LOG_LOGIC ("Inserted packet");
+                  inserted = true;
+                  break;
+                }
+            }
+          // The packet is not in the buffer, append it to the end
+          if (!inserted)
+            {
+              NS_LOG_LOGIC ("Appending packet");
+              m_streamRecvList.insert (m_streamRecvList.end (), item);
+            }
+          m_numBytesInBuffer += p->GetSize ();
+          NS_LOG_INFO ("Update: Received Size = " << m_numBytesInBuffer);
+          return true;
+
+        }
+      else
+        {
+          NS_LOG_WARN ("Discarded. Trying to insert empty packet.");
+          return false;
+        }
+    }
+  NS_LOG_WARN ("Rejected. Not enough room to buffer packet.");
+  return false;
+}
+
+Ptr<Packet>
+QuicStreamRxBuffer::Extract (uint32_t maxSize)
+{
+  NS_LOG_FUNCTION (this << maxSize);
+
+  uint32_t extractSize = std::min (maxSize, m_numBytesInBuffer);
+  NS_LOG_INFO (
+    "Requested to extract " << extractSize << " bytes from QuicStreamRxBuffer of size = " << m_numBytesInBuffer);
+
+  if (extractSize == 0)
+    {
+      return 0;
+    }
+
+  Ptr<Packet> outPkt = Create<Packet> ();
+
+  QuicStreamRxPacketList::iterator it = m_streamRecvList.begin ();
+
+  while (extractSize > 0 && !m_streamRecvList.empty ()
+         && it != m_streamRecvList.end ())
+    {
+      it = m_streamRecvList.begin ();
+      Ptr<Packet> currentPacket = (*it)->m_packet;
+
+      if (currentPacket->GetSize () <= extractSize)   // Merge
+        {
+
+          outPkt->AddAtEnd (currentPacket);
+          m_streamRecvList.erase (it);
+          NS_LOG_LOGIC ("Extracted and removed packet " << (*it)->m_offset << " from RxBuffer, bytes to extract: " << extractSize);
+
+          m_numBytesInBuffer -= currentPacket->GetSize ();
+          extractSize -= currentPacket->GetSize ();
+
+          continue;
+        }
+      else
+        {
+          break;
+        }
+
+      it++;
+    }
+
+  if (outPkt->GetSize () == 0)
+    {
+      NS_LOG_INFO ("Nothing extracted.");
+      return 0;
+    }
+
+  return outPkt;
+}
+
+std::pair<uint64_t, uint64_t>
+QuicStreamRxBuffer::GetDeliverable (uint64_t currRecvOffset)
+{
+  NS_LOG_FUNCTION (this);
+  uint64_t offsetToExtract = currRecvOffset;
+  uint64_t lengthToExtract = 0;
+  NS_LOG_LOGIC ("Calculating deliverable size");
+
+  QuicStreamRxPacketList::iterator i;
+
+  for (i = m_streamRecvList.begin (); i != m_streamRecvList.end (); ++i)
+    {
+      if ((*i)->m_offset == currRecvOffset + lengthToExtract)
+        {
+          offsetToExtract = (*i)->m_offset;
+          lengthToExtract += (*i)->m_packet->GetSize ();
+        }
+      NS_LOG_LOGIC ("Inspected packet with offset " << (*i)->m_offset);
+    }
+
+  return std::make_pair (offsetToExtract, lengthToExtract);
+}
+
+uint32_t
+QuicStreamRxBuffer::Size (void) const
+{
+  NS_LOG_FUNCTION (this);
+
+  // uint32_t inFlight = 0;
+  // for (auto recv_it = m_streamRecvList.begin (); recv_it != m_streamRecvList.end () and !m_streamRecvList.empty (); ++recv_it)
+  //   {
+  //     inFlight += (*recv_it)->m_packet->GetSize ();
+  //   }
+
+  return m_numBytesInBuffer;
+}
+
+uint32_t
+QuicStreamRxBuffer::Available (void) const
+{
+  return m_maxBuffer - m_numBytesInBuffer;
+}
+
+uint32_t
+QuicStreamRxBuffer::GetMaxBufferSize (void) const
+{
+  return m_maxBuffer;
+}
+
+void
+QuicStreamRxBuffer::SetMaxBufferSize (uint32_t s)
+{
+  m_maxBuffer = s;
+}
+
+uint32_t
+QuicStreamRxBuffer::GetFinalSize () const
+{
+  return m_finalSize;
+}
+
+void
+QuicStreamRxBuffer::Print (std::ostream & os) const
+{
+  NS_LOG_FUNCTION (this);
+  QuicStreamRxBuffer::QuicStreamRxPacketList::const_iterator it;
+  std::stringstream ss;
+  std::stringstream as;
+
+  for (it = m_streamRecvList.begin (); it != m_streamRecvList.end (); ++it)
+    {
+      (*it)->Print (ss);
+    }
+
+  os << "Stream Recv list: \n" << ss.str () << "\n\nCurrent Status: "
+     << "\nNumber of receptions = " << m_streamRecvList.size ()
+     << "\nReceived Size = " << m_numBytesInBuffer;
+  if (m_recvFin)
+    {
+      os << "\nFinal Size = " << m_finalSize;
+
+    }
+
+}
+
+} //namepsace ns3
diff --git a/src/quic/model/quic-stream-rx-buffer.h b/src/quic/model/quic-stream-rx-buffer.h
new file mode 100644
index 000000000..bb0824362
--- /dev/null
+++ b/src/quic/model/quic-stream-rx-buffer.h
@@ -0,0 +1,182 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *
+ */
+
+#ifndef QUICSTREAMRXBUFFER_H
+#define QUICSTREAMRXBUFFER_H
+
+#include <map>
+#include "ns3/traced-value.h"
+#include "ns3/trace-source-accessor.h"
+#include "ns3/sequence-number.h"
+#include "ns3/ptr.h"
+#include "quic-subheader.h"
+#include "ns3/object.h"
+
+namespace ns3 {
+
+/**
+ * \ingroup quic
+ *
+ * \brief Item that encloses the received Quic Stream frame
+ */
+class QuicStreamRxItem
+{
+public:
+  QuicStreamRxItem ();
+  QuicStreamRxItem (const QuicStreamRxItem &other);
+
+  /**
+   * \brief Print the Item
+   * \param os ostream
+   */
+  void Print (std::ostream &os) const;
+
+  /**
+   * Comparison operator
+   * \param other rhs operand
+   * \return true if the rhs operand offset is greater than the lhs one
+   */
+  bool operator< (const QuicStreamRxItem& other)
+  {
+    return m_offset < other.m_offset;
+  }
+
+  /**
+   * Equal operator
+   * \param other rhs operand
+   * \return true if the operands are equal
+   */
+  bool operator== (const QuicStreamRxItem& other)
+  {
+    return (this->m_offset == other.m_offset) and (this->m_fin == other.m_fin) and (this->m_packet == other.m_packet);
+  }
+
+  Ptr<Packet> m_packet;  //!< Stream Frame
+  uint64_t m_offset;     //!< Offset of the Stream Frame
+  bool m_fin;            //!< FIN bit of the Stream Frame
+
+};
+
+/**
+ * \ingroup quic
+ *
+ * \brief Rx stream buffer for QUIC
+ */
+class QuicStreamRxBuffer : public Object
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+
+  QuicStreamRxBuffer ();
+  virtual ~QuicStreamRxBuffer ();
+
+  /**
+   * Print the buffer information to a string,
+   * including the list of received packets
+   *
+   * \param os the std::ostream object
+   */
+  void Print (std::ostream & os) const;
+
+  /**
+   * Get the max size of the buffer
+   *
+   * \return the maximum buffer size in bytes
+   */
+  uint32_t GetMaxBufferSize (void) const;
+
+  /**
+   * Set the max size of the buffer
+   *
+   * \param n the maximum buffer size in bytes
+   */
+  void SetMaxBufferSize (uint32_t n);
+
+  /**
+   * Compute the available space in the buffer
+   *
+   * \return the available space in the buffer
+   */
+  uint32_t Available () const;
+
+  /**
+   * Check how many bytes can be released from the buffer (i.e., how many in-order bytes
+   * are present from a certain offset)
+   *
+   * \param currRecvOffset the current offset in the stream sequence
+   * \return a pair with the offset of the last packet to extract and the total number of bytes to extract
+   */
+  std::pair<uint64_t, uint64_t> GetDeliverable (uint64_t currRecvOffset);
+
+  /**
+   * Add a packet to the receive buffer
+   *
+   * \param p a smart pointer to a packet
+   * \param sub the QuicSubheader of the packet
+   * \return true if the insertion was successful
+   */
+  bool Add (Ptr<Packet> p, const QuicSubheader& sub);
+
+  /**
+   * Extract maxSize bytes from the buffer
+   *
+   * \param maxSize the number of bytes to be extracted
+   * \return a smart pointer to the extracted packet
+   */
+  Ptr<Packet> Extract (uint32_t maxSize);
+
+  /**
+   * Get the total amount of data received in a stream
+   * which has received a frame with the FIN bit set
+   *
+   * \return the final size of the stream
+   */
+  uint32_t GetFinalSize () const;
+
+  /**
+   * Return the number of bytes in the buffer
+   *
+   * \return the buffer occupancy in bytes
+   */
+  uint32_t Size (void) const;
+
+private:
+  // TODO consider replacing std::vector with a ordered data structure
+  typedef std::vector<QuicStreamRxItem*> QuicStreamRxPacketList;  //!< container for data stored in the buffer
+
+  QuicStreamRxPacketList m_streamRecvList;  //!< List of received packets with additional info
+  uint32_t m_numBytesInBuffer;              //!< Current buffer occupancy
+  uint32_t m_finalSize;                     //!< Final buffer size
+  uint32_t m_maxBuffer;                     //!< Maximum buffer size
+  bool m_recvFin;                           //!< FIN bit reception flag
+
+};
+
+} //namepsace ns3
+
+#endif /* QUIC_SREAM_RX_BUFFER_H */
diff --git a/src/quic/model/quic-stream-tx-buffer.cc b/src/quic/model/quic-stream-tx-buffer.cc
new file mode 100644
index 000000000..215cd0ead
--- /dev/null
+++ b/src/quic/model/quic-stream-tx-buffer.cc
@@ -0,0 +1,425 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *
+ */
+
+#include <algorithm>
+#include <iostream>
+
+#include "ns3/packet.h"
+#include "ns3/log.h"
+#include "ns3/abort.h"
+#include "quic-subheader.h"
+#include "quic-stream-tx-buffer.h"
+#include "quic-socket-base.h"
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("QuicStreamTxBuffer");
+
+QuicStreamTxItem::QuicStreamTxItem ()
+  : m_packetNumberSequence (0),
+    m_packet (0),
+    m_lost (false),
+    m_retrans (false),
+    m_sacked (false),
+    m_lastSent (Time::Min ()),
+    m_id (0)
+{}
+
+QuicStreamTxItem::QuicStreamTxItem (const QuicStreamTxItem &other)
+  : m_packetNumberSequence (other.m_packetNumberSequence),
+    m_packet (other.m_packet),
+    m_lost (other.m_lost),
+    m_retrans (other.m_retrans),
+    m_sacked (other.m_sacked),
+    m_lastSent (other.m_lastSent),
+    m_id (other.m_id)
+{}
+
+QuicStreamTxItem::~QuicStreamTxItem ()
+{}
+
+void
+QuicStreamTxItem::Print (std::ostream &os) const
+{
+  NS_LOG_FUNCTION (this);
+  os << "[ID " << m_id << " SN " << m_packetNumberSequence.GetValue () << " - Last Sent: " << m_lastSent << "]";
+
+  if (m_lost)
+    {
+      os << "|lost|";
+    }
+  if (m_retrans)
+    {
+      os << "|retr|";
+    }
+  if (m_sacked)
+    {
+      os << "|ackd|";
+    }
+}
+
+NS_OBJECT_ENSURE_REGISTERED (QuicStreamTxBuffer);
+
+TypeId
+QuicStreamTxBuffer::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicStreamTxBuffer")
+    .SetParent<Object> ()
+    .SetGroupName ("Internet")
+    .AddConstructor<QuicStreamTxBuffer> ()
+//    .AddTraceSource ("UnackSequence",
+//                     "First unacknowledged sequence number (SND.UNA)",
+//                     MakeTraceSourceAccessor (&QuicStreamTxBuffer::m_sentSize),
+//                     "ns3::SequenceNumber32TracedValueCallback")
+  ;
+  return tid;
+}
+
+QuicStreamTxBuffer::QuicStreamTxBuffer ()
+  : m_maxBuffer (131072),
+    m_appSize (0),
+    m_sentSize (0)
+{
+  m_appList = QuicTxPacketList ();
+  m_sentList = QuicTxPacketList ();
+}
+
+QuicStreamTxBuffer::~QuicStreamTxBuffer (void)
+{}
+
+void
+QuicStreamTxBuffer::Print (std::ostream & os) const
+{
+  NS_LOG_FUNCTION (this);
+  QuicStreamTxBuffer::QuicTxPacketList::const_iterator it;
+  std::stringstream ss;
+  std::stringstream as;
+
+  for (it = m_sentList.begin (); it != m_sentList.end (); ++it)
+    {
+      (*it)->Print (ss);
+    }
+
+  for (it = m_appList.begin (); it != m_appList.end (); ++it)
+    {
+      (*it)->Print (as);
+    }
+
+  os << "App list: \n" << as.str () <<
+    "\n\nSent list: \n" << ss.str () <<
+    "\n\nCurrent Status: " <<
+    "\nNumber of transmissions = " << m_sentList.size () <<
+    "\nApplication Size = " << m_appSize <<
+    "\nSent Size = " << m_sentSize;
+}
+
+bool
+QuicStreamTxBuffer::Add (Ptr<Packet> p)
+{
+  NS_LOG_FUNCTION (this << p);
+  NS_LOG_INFO ("Try to append " << p->GetSize () << " bytes " << ", availSize=" << Available ());
+
+  if (p->GetSize () <= Available ())
+    {
+      if (p->GetSize () > 0)
+        {
+          Ptr<QuicStreamTxItem> item = CreateObject<QuicStreamTxItem> ();
+          item->m_packet = p;
+          m_appList.insert (m_appList.end (), item);
+          m_appSize += p->GetSize ();
+
+          NS_LOG_INFO ("Update: Application Size = " << m_appSize);
+          return true;
+        }
+      else
+        {
+          NS_LOG_WARN ("Discarded. Try to insert empty packet.");
+          return false;
+        }
+    }
+  NS_LOG_WARN ("Rejected. Not enough room to buffer packet.");
+
+  return false;
+}
+
+bool
+QuicStreamTxBuffer::Rejected (Ptr<Packet> p)
+{
+  NS_LOG_FUNCTION (this << p);
+  QuicSubheader qsb;
+  p->PeekHeader (qsb);
+  NS_LOG_INFO ("Packet of size " << p->GetSize () << " bytes rejected, reappending. Offset " << qsb.GetOffset ());
+
+  if (p->GetSize () <= Available ())
+    {
+      if (p->GetSize () > 0)
+        {
+          Ptr<QuicStreamTxItem> item = CreateObject<QuicStreamTxItem> ();
+          item->m_packet = p;
+          m_appList.insert (m_appList.begin (), item);
+          m_appSize += p->GetSize ();
+          m_sentList.pop_back ();
+          m_sentSize -= p->GetSize ();
+          Ptr<Packet> added = (*m_appList.begin ())->m_packet;
+          added->PeekHeader (qsb);
+          NS_LOG_INFO ("Update: Application Size = " << m_appSize << " added packet with offset " << qsb.GetOffset ());
+          return true;
+        }
+      else
+        {
+          NS_LOG_WARN ("Discarded. Try to insert empty packet.");
+          return false;
+        }
+    }
+  NS_LOG_WARN ("Rejected. Not enough room to buffer packet.");
+  return false;
+}
+
+
+Ptr<Packet>
+QuicStreamTxBuffer::NextSequence (uint32_t numBytes, const SequenceNumber32 seq)
+{
+  NS_LOG_FUNCTION (this << numBytes << seq);
+
+  Ptr<QuicStreamTxItem> outItem = GetNewSegment (numBytes);
+
+  if (outItem != nullptr)
+    {
+      outItem->m_packetNumberSequence = seq;
+      outItem->m_lastSent = Simulator::Now ();
+      Ptr<Packet> toRet = outItem->m_packet->Copy ();
+      return toRet;
+    }
+  else
+    {
+      return Create<Packet> ();
+    }
+
+}
+
+Ptr<QuicStreamTxItem>
+QuicStreamTxBuffer::GetNewSegment (uint32_t numBytes)
+{
+  NS_LOG_FUNCTION (this << numBytes);
+
+  bool toInsert = false;
+  Ptr<Packet> currentPacket = 0;
+  Ptr<QuicStreamTxItem> currentItem = 0;
+  Ptr<QuicStreamTxItem> outItem = CreateObject<QuicStreamTxItem> ();
+  outItem->m_packet = Create<Packet> ();
+  uint32_t outItemSize = 0;
+  QuicTxPacketList::iterator it = m_appList.begin ();
+
+  while (it != m_appList.end () && outItemSize < numBytes)
+    {
+      currentItem = *it;
+      currentPacket = currentItem->m_packet;
+
+//	  uint32_t subheaderSize = 0;
+//	  if(m_TxBufferType == SOCKET)
+//	  {
+//		  QuicSubheader sub;
+//		  currentItem->m_packet->PeekHeader(sub);
+//		  subheaderSize = sub.GetSerializedSize();
+//	  }
+
+      if (outItemSize + currentItem->m_packet->GetSize () /*- subheaderSize*/ <= numBytes)   // Merge
+        {
+          QuicSubheader qsb;
+          NS_LOG_LOGIC ("Extracting packet from stream TX buffer");
+          toInsert = true;
+          MergeItems (*outItem, *currentItem);
+          outItemSize += currentItem->m_packet->GetSize ();
+
+          m_appList.erase (it);
+          m_appSize -= currentItem->m_packet->GetSize ();
+
+          it = m_appList.begin (); // Restart to find other possible merges
+          continue;
+        }
+      else
+        {
+          // The packet is too large, split it
+          uint32_t split = numBytes - outItemSize;
+
+          Ptr<QuicStreamTxItem> toBeBuffered = CreateObject<QuicStreamTxItem> ();
+          SplitItems (*currentItem, *toBeBuffered, split);
+
+          // Add left part of the split to subframe
+          NS_LOG_LOGIC ("Add incomplete subframe to the outItem");
+          MergeItems (*outItem, *currentItem);
+          outItemSize += currentItem->m_packet->GetSize ();
+
+          m_appList.erase (it);
+          m_appSize -= currentItem->m_packet->GetSize ();
+
+          m_appList.push_front (toBeBuffered);
+
+        }
+
+      it++;
+    }
+
+  if (toInsert)
+    {
+      m_sentList.insert (m_sentList.end (), outItem);
+      m_sentSize += outItem->m_packet->GetSize ();
+    }
+
+  NS_LOG_INFO ("Update: Sent Size = " << m_sentSize);
+
+  return outItem;
+}
+
+void
+QuicStreamTxBuffer::OnAckUpdate (const uint64_t largestAcknowledged, const std::vector<uint64_t> &additionalAckBlocks, const std::vector<uint64_t> &gaps)
+{
+  NS_LOG_FUNCTION (this);
+  std::vector<uint64_t> compAckBlocks = additionalAckBlocks;
+  std::vector<uint64_t> compGaps = additionalAckBlocks;
+
+  NS_LOG_INFO ("Handling Ack - highest packet " << largestAcknowledged);
+  compAckBlocks.insert (compAckBlocks.begin (), largestAcknowledged);
+  compGaps.push_back (0);
+  uint64_t ackBlockCount = compAckBlocks.size ();
+
+  std::vector<uint64_t>::const_iterator ack_it = compAckBlocks.begin ();
+  std::vector<uint64_t>::const_iterator gap_it = compGaps.begin ();
+
+  for (uint64_t numAckBlockAnalyzed = 0; numAckBlockAnalyzed < ackBlockCount; numAckBlockAnalyzed++, ack_it++, gap_it++)
+    {
+      for (auto sent_it = m_sentList.rbegin (); sent_it != m_sentList.rend () and !m_sentList.empty (); ++sent_it)       // Visit sentList in reverse Order for optimization
+        {
+          if ((*sent_it)->m_packetNumberSequence < (SequenceNumber32)(*gap_it) )              // Just for optimization we suppose All is perfectly ordered
+            {
+              break;
+            }
+
+          if ((*sent_it)->m_packetNumberSequence <= (SequenceNumber32)(*ack_it) and (*sent_it)->m_packetNumberSequence > (SequenceNumber32)(*gap_it) and (*sent_it)->m_sacked == false)
+            {
+              NS_LOG_LOGIC ("Acked packet " << (*sent_it)->m_packetNumberSequence);
+              (*sent_it)->m_sacked = true;
+            }
+
+        }
+    }
+}
+
+
+void
+QuicStreamTxBuffer::MergeItems (QuicStreamTxItem &t1, QuicStreamTxItem &t2) const
+{
+  NS_LOG_FUNCTION (this);
+
+  if (t1.m_sacked == true && t2.m_sacked == true)
+    {
+      t1.m_sacked = true;
+    }
+  else
+    {
+      t1.m_sacked = false;
+    }
+
+  if (t2.m_retrans == true && t1.m_retrans == false)
+    {
+      t1.m_retrans = true;
+    }
+  if (t1.m_lastSent < t2.m_lastSent)
+    {
+      t1.m_lastSent = t2.m_lastSent;
+    }
+  if (t2.m_lost)
+    {
+      t1.m_lost = true;
+    }
+
+  t1.m_packet->AddAtEnd (t2.m_packet);
+}
+
+void
+QuicStreamTxBuffer::SplitItems (QuicStreamTxItem &t1, QuicStreamTxItem &t2, uint32_t size) const
+{
+  uint32_t initialSize = t1.m_packet->GetSize ();
+
+  t2.m_sacked = t1.m_sacked;
+  t2.m_retrans = t1.m_retrans;
+  t2.m_lastSent = t1.m_lastSent;
+  t2.m_lost = t1.m_lost;
+  if (t1.m_lastSent < t2.m_lastSent)
+    {
+      t1.m_lastSent = t2.m_lastSent;
+    }
+  if (t2.m_lost)
+    {
+      t1.m_lost = true;
+    }
+  // Copy the packet into t2
+  t2.m_packet = t1.m_packet->Copy ();
+  // Remove the first size bytes from t2
+  t2.m_packet->RemoveAtStart (size);
+
+  NS_ASSERT_MSG (t2.m_packet->GetSize () == initialSize - size,
+                 "Wrong size " << t2.m_packet->GetSize ());
+  // Remove the bytes from size to end from t1
+  t1.m_packet->RemoveAtEnd (t1.m_packet->GetSize () - size);
+  NS_ASSERT_MSG (t1.m_packet->GetSize () == size,
+                 "Wrong size " << t1.m_packet->GetSize ());
+}
+
+
+uint32_t
+QuicStreamTxBuffer::Available (void) const
+{
+  return m_maxBuffer - m_appSize;
+}
+
+uint32_t
+QuicStreamTxBuffer::GetMaxBufferSize (void) const
+{
+  return m_maxBuffer;
+}
+
+void
+QuicStreamTxBuffer::SetMaxBufferSize (uint32_t n)
+{
+  m_maxBuffer = n;
+}
+
+uint32_t
+QuicStreamTxBuffer::AppSize (void) const
+{
+  return m_appSize;
+}
+
+uint32_t
+QuicStreamTxBuffer::BytesInFlight () const
+{
+  NS_LOG_FUNCTION (this);
+
+  return m_sentSize;
+
+}
+
+
+}
diff --git a/src/quic/model/quic-stream-tx-buffer.h b/src/quic/model/quic-stream-tx-buffer.h
new file mode 100644
index 000000000..6533f167d
--- /dev/null
+++ b/src/quic/model/quic-stream-tx-buffer.h
@@ -0,0 +1,208 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *
+ */
+
+#ifndef QUICSTREAMTXBUFFER_H
+#define QUICSTREAMTXBUFFER_H
+
+#include "ns3/object.h"
+#include "ns3/traced-value.h"
+#include "ns3/sequence-number.h"
+#include "ns3/nstime.h"
+#include "quic-subheader.h"
+
+namespace ns3 {
+
+/**
+ * \ingroup quic
+ *
+ * \brief Item that encloses the frame packet and some flags for it
+ */
+class QuicStreamTxItem : public Object
+{
+public:
+  QuicStreamTxItem ();
+  QuicStreamTxItem (const QuicStreamTxItem &other);
+  ~QuicStreamTxItem ();
+
+  /**
+   * \brief Print the Item
+   * \param os ostream
+   */
+  void Print (std::ostream &os) const;
+
+  SequenceNumber32 m_packetNumberSequence;  //!< Sequence number of the application packet associated with this frame
+  Ptr<Packet> m_packet;                     //!< packet associated to this QuicStreamTxItem
+  bool m_lost;                              //!< true if the frame is lost
+  bool m_retrans;                           //!< true if it is a retx
+  bool m_sacked;                            //!< true if already acknowledged
+  Time m_lastSent;                          //!< time at which it was sent
+  uint64_t m_id; // UNUSED !!?
+
+
+};
+
+/**
+ * \ingroup quic
+ *
+ * \brief Tx stream buffer for QUIC
+ */
+class QuicStreamTxBuffer : public Object
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+
+  QuicStreamTxBuffer ();
+  virtual ~QuicStreamTxBuffer (void);
+
+  /**
+   * Print the buffer information to a string,
+   * including the list of sent packets
+   *
+   * \param os the std::ostream object
+   */
+  void Print (std::ostream & os) const;
+  //friend std::ostream & operator<< (std::ostream & os, QuicTxBuffer const & quicTxBuf);
+
+  /**
+   * Add a packet to the tx buffer
+   *
+   * \param p a smart pointer to a packet
+   * \return true if the insertion was successful
+   */
+  bool Add (Ptr<Packet> p);
+
+  /**
+   * ReAdd a rejected packet from the socket tx buffer to the stream tx buffer
+   *
+   * \param p a smart pointer to a packet
+   * \return true if the insertion was successful
+   */
+  bool Rejected (Ptr<Packet> p);
+
+  /**
+   * \brief Request the next frame to transmit
+   *
+   * \param numBytes the number of bytes of the next frame to transmit requested
+   * \param seq the sequence number of the next frame to transmit
+   * \return the next frame to transmit
+   */
+  Ptr<Packet> NextSequence (uint32_t numBytes, const SequenceNumber32 seq);
+
+  /**
+   * \brief Get a block of data not transmitted yet and move it into SentList
+   *
+   * \param numBytes number of bytes of the QuicSocketTxItem requested
+   * \return the item that contains the right packet
+   */
+  Ptr<QuicStreamTxItem> GetNewSegment (uint32_t numBytes);
+
+  /**
+   * Process an acknowledgment, set the frames in the send buffer as acknowledged, mark
+   * lost frames (according to the QUIC IETF draft)
+   *
+   * \brief Process an ACK
+   *
+   * \param largestAcknowledged The largest acknowledged sequence number
+   * \param additionalAckBlocks The sequence numbers that were just acknowledged
+   * \param gaps The gaps in the acknowledgment
+   */
+  void OnAckUpdate (const uint64_t largestAcknowledged, const std::vector<uint64_t> &additionalAckBlocks, const std::vector<uint64_t> &gaps);
+
+  /**
+   * Get the max size of the buffer
+   *
+   * \return the maximum buffer size in bytes
+   */
+  uint32_t GetMaxBufferSize (void) const;
+
+  /**
+   * Set the max size of the buffer
+   *
+   * \param n the maximum buffer size in bytes
+   */
+  void SetMaxBufferSize (uint32_t n);
+
+  /**
+   * Compute the available space in the buffer
+   *
+   * \return the available space in the buffer
+   */
+  uint32_t Available (void) const;
+
+  /**
+   * Returns the total number of bytes in the application buffer
+   *
+   * \return the total number of bytes in the application buffer
+   */
+  uint32_t AppSize (void) const;
+
+  /**
+   * \brief Return total bytes in flight
+   *
+   * \returns total bytes in flight
+   */
+  uint32_t BytesInFlight () const;
+
+private:
+  typedef std::list<Ptr<QuicStreamTxItem>> QuicTxPacketList;  //!< container for data stored in the buffer
+
+  /**
+   * \brief Merge two QuicStreamTxItem
+   *
+   * Merge t2 in t1. It consists in copying the lastSent field if t2 is more
+   * recent than t1. Retransmitted field is copied only if it set in t2 but not
+   * in t1. Sacked is copied only if it is true in both items.
+   *
+   * \param t1 first item
+   * \param t2 second item
+   */
+  void MergeItems (QuicStreamTxItem &t1, QuicStreamTxItem &t2) const;
+
+  /**
+   * \brief Split one QuicStreamTxItem
+   *
+   * Move "size" bytes from t2 into t1, copying all the fields.
+   *
+   * \param t1 first item
+   * \param t2 second item
+   * \param size Size to split
+   */
+  void SplitItems (QuicStreamTxItem &t1, QuicStreamTxItem &t2, uint32_t size) const; // Available only for streams
+
+  QuicTxPacketList m_appList;   //!< List of buffered application data to be transmitted with additional info
+  QuicTxPacketList m_sentList;  //!< List of sent frame with additional info
+  uint32_t m_maxBuffer;         //!< Max number of data bytes in buffer (SND.WND)
+  uint32_t m_appSize;           //!< Size of all data in the application list
+  uint32_t m_sentSize;          //!< Size of all data in the sent list
+
+};
+
+
+}
+
+#endif /* QUIC_STREAM_TX_BUFFER_H */
diff --git a/src/quic/model/quic-stream.cc b/src/quic/model/quic-stream.cc
new file mode 100644
index 000000000..050a2264a
--- /dev/null
+++ b/src/quic/model/quic-stream.cc
@@ -0,0 +1,67 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *
+ */
+
+#define __STDC_LIMIT_MACROS
+
+#include "ns3/object.h"
+#include "ns3/log.h"
+#include "ns3/uinteger.h"
+#include "ns3/double.h"
+#include "ns3/boolean.h"
+#include "ns3/trace-source-accessor.h"
+#include "ns3/nstime.h"
+#include "quic-stream.h"
+#include "ns3/node.h"
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("QuicStream");
+
+NS_OBJECT_ENSURE_REGISTERED (QuicStream);
+
+const char* const
+QuicStream::QuicStreamStateName[QuicStream::LAST_STATE] = {"IDLE", "OPEN", "SEND", "RECV", "SIZE_KNOWN", "DATA_SENT", "DATA_RECVD", "DATA_READ", "RESET_SENT", "RESET_RECVD", "RESET_READ"};
+
+TypeId
+QuicStream::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicStream")
+    .SetParent<Object> ()
+    .SetGroupName ("Internet")
+  ;
+  return tid;
+}
+
+QuicStream::QuicStream ()
+  : Object ()
+{
+  NS_LOG_FUNCTION_NOARGS ();
+}
+
+QuicStream::~QuicStream ()
+{
+  NS_LOG_FUNCTION_NOARGS ();
+}
+
+} // namespace ns3
diff --git a/src/quic/model/quic-stream.h b/src/quic/model/quic-stream.h
new file mode 100644
index 000000000..9d143342e
--- /dev/null
+++ b/src/quic/model/quic-stream.h
@@ -0,0 +1,202 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *
+ */
+
+#ifndef QUICSTREAM_H
+#define QUICSTREAM_H
+
+//#include "ns3/stream.h"
+#include "ns3/node.h"
+
+
+namespace ns3 {
+
+/**
+ * \ingroup quic
+ *
+ * \see QuicStreamBase
+ * \brief (abstract) base class of all QuicStreams
+ *
+ * This class constitutes a basic implementation of a Quic Stream.
+ *
+ */
+class QuicStream : public Object
+{
+public:
+  /**
+   * Get the type ID.
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+
+  QuicStream (void);
+  virtual ~QuicStream (void);
+
+  /**
+   * \brief Quic Stream types, which are represented by the 2 lsb of stream Id
+   */
+  typedef enum
+  {
+    CLIENT_INITIATED_BIDIRECTIONAL = 0,  //!< Client Initiated Bidirectional Stream
+    SERVER_INITIATED_BIDIRECTIONAL,      //!< Server Initiated Bidirectional Stream
+    CLIENT_INITIATED_UNIDIRECTIONAL,     //!< Client Initiated Unidirectional Stream
+    SERVER_INITIATED_UNIDIRECTIONAL,     //!< Server Initiated Unidirectional Stream
+    NONE                                 //!< Unknown Stream types
+  } QuicStreamTypes_t;
+
+  /**
+   * \brief Quic Stream direction types
+   */
+  typedef enum
+  {
+    SENDER = 0,     //!< Sender Stream
+    RECEIVER,       //!< Receiver Stream
+    BIDIRECTIONAL,  //!< Bidirectional Stream
+    UNKNOWN         //!< Unknown direction type
+  } QuicStreamDirectionTypes_t;
+
+  /**
+   * \brief Quic Stream states
+   */
+  typedef enum
+  {
+    IDLE = 0,     //!< Idle (no state yet)
+    OPEN,         //!< Initial state for a Sender Stream [Sender]
+    SEND,         //!< Endpoint transmits data in STREAM frames [Sender]
+    RECV,         //!< Initial state for a Receiver Stream [Receiver]
+    SIZE_KNOWN,   //!< Final offset of stream data received is known (FIN received) [Receiver]
+    DATA_SENT,    //!< Application indicates that stream data sent is complete (FIN sent) [Sender]
+    DATA_RECVD,   //!< All stream data has been successfully acknowledged [Sender] / all data for the stream has been received [Receiver]
+    DATA_READ,    //!< All data has been delivered to the application [Receiver]
+    RESET_SENT,   //!< Abandon transmission of stream data [Sender]
+    RESET_RECVD,  //!< Packet containing a RST_STREAM has been acknowledged [Sender] / delivery of stream data to the application to be interrupted [Receiver]
+    RESET_READ,   //!< Application has been delivered the signal indicating that the Receiver stream has been reset [Receiver]
+    LAST_STATE    //!< Last State for debug
+  } QuicStreamStates_t;
+
+  /**
+   * \brief return a string with the QuicStreamDirectionTypes_t
+   *
+   * \return a string with the QuicStreamDirectionTypes_t
+   */
+  virtual std::string StreamDirectionTypeToString () const = 0;
+
+  /**
+   * \brief Literal names of Quic Stream states for use in log messages
+   */
+  static const char* const QuicStreamStateName[QuicStream::LAST_STATE];
+
+  /**
+   * Set the stream direction
+   *
+   * \param streamDirectionType a QuicStreamDirectionTypes_t with the stream direction
+   */
+  virtual void SetStreamDirectionType (const QuicStreamDirectionTypes_t& streamDirectionType) = 0;
+
+  /**
+   * Get the stream direction
+   *
+   * \return a QuicStreamDirectionTypes_t with the stream direction
+   */
+  virtual QuicStreamDirectionTypes_t GetStreamDirectionType () = 0;
+
+  /**
+   * \brief Set the stream type
+   *
+   * \param streamType the stream type
+   */
+  virtual void SetStreamType (const QuicStreamTypes_t& streamType) = 0;
+
+  /**
+   * \brief check the input condition, and, if true, set the input stream state for the send stream
+   *
+   * \param condition a boolean condition
+   * \param streamState the new QuicStreamStates_t to be applied if the condition holds
+   */
+  virtual void SetStreamStateSendIf (bool condition, const QuicStreamStates_t& streamState) = 0;
+
+  /**
+   * \brief set the input stream state for the send stream
+   *
+   * \param streamState the new QuicStreamStates_t to be applied
+   */
+  virtual void SetStreamStateSend (const QuicStreamStates_t& streamState) = 0;
+
+  /**
+   * \brief set the input stream state for the rx stream
+   *
+   * \param streamState the new QuicStreamStates_t to be applied
+   */
+  virtual void SetStreamStateRecv (const QuicStreamStates_t& streamState) = 0;
+
+  /**
+   * \brief check the input condition, and, if true, set the input stream state for the rx stream
+   *
+   * \param condition a boolean condition
+   * \param streamState the new QuicStreamStates_t to be applied if the condition holds
+   */
+  virtual void SetStreamStateRecvIf (bool condition, const QuicStreamStates_t& streamState) = 0;
+
+  /**
+   * Set the node of this stream
+   *
+   * \param node a smart pointer to the node
+   */
+  virtual void SetNode (Ptr<Node> node) = 0;
+
+  /**
+   * Set the connection ID in the stream
+   *
+   * \param connId the connection ID
+   */
+  virtual void SetConnectionId (uint64_t connId) = 0;
+
+  /**
+   * \brief Set the stream ID and the stream type using the 2 least significant bits
+   *
+   * \param streamId the stream ID
+   */
+  virtual void SetStreamId (uint64_t streamId) = 0;
+
+  /**
+   * \brief Get the stream ID
+   *
+   * \return the stream ID
+   */
+  virtual uint64_t GetStreamId (void) = 0;
+
+  /**
+   * \brief Get available space left in the TX buffer
+   *
+   * \return the available space left in the TX buffer
+   */
+  virtual uint32_t GetStreamTxAvailable (void) const = 0;
+
+};
+
+} // namespace ns3
+
+#endif /* QUIC_STREAM_H */
+
+
diff --git a/src/quic/model/quic-subheader.cc b/src/quic/model/quic-subheader.cc
new file mode 100644
index 000000000..7503b1164
--- /dev/null
+++ b/src/quic/model/quic-subheader.cc
@@ -0,0 +1,1534 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *
+ */
+
+#include <stdint.h>
+#include <iostream>
+#include "quic-subheader.h"
+#include "ns3/buffer.h"
+#include "ns3/address-utils.h"
+#include "ns3/log.h"
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("QuicSubheader");
+
+NS_OBJECT_ENSURE_REGISTERED (QuicSubheader);
+
+QuicSubheader::QuicSubheader ()
+  : m_frameType (PADDING),
+    m_streamId (0),
+    m_errorCode (0),
+    m_offset (0),
+    m_reasonPhraseLength (0),
+    m_maxData (0),
+    m_maxStreamData (0),
+    m_maxStreamId (0),
+    m_sequence (0),
+    m_connectionId (0),
+    //statelessResetToken(0),
+    m_largestAcknowledged (0),
+    m_ackDelay (0),
+    m_ackBlockCount (0),
+    m_firstAckBlock (0),
+    m_data (0),
+    m_length (0)
+{
+  m_reasonPhrase = std::vector<uint8_t> ();
+  m_additionalAckBlocks = std::vector<uint32_t> ();
+  m_gaps = std::vector<uint32_t> ();
+}
+
+QuicSubheader::~QuicSubheader ()
+{}
+
+TypeId
+QuicSubheader::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicSubHeader")
+    .SetParent<Header> ()
+    .SetGroupName ("Internet")
+    .AddConstructor<QuicSubheader> ()
+  ;
+  return tid;
+}
+
+TypeId
+QuicSubheader::GetInstanceTypeId (void) const
+{
+  return GetTypeId ();
+}
+
+std::string
+QuicSubheader::FrameTypeToString () const
+{
+  static const char* frameTypeNames[24] = {
+    "PADDING",
+    "RST_STREAM",
+    "CONNECTION_CLOSE",
+    "APPLICATION_CLOSE",
+    "MAX_DATA",
+    "MAX_STREAM_DATA",
+    "MAX_STREAM_ID",
+    "PING",
+    "BLOCKED",
+    "STREAM_BLOCKED",
+    "STREAM_ID_BLOCKED",
+    "NEW_CONNECTION_ID",
+    "STOP_SENDING",
+    "ACK",
+    "PATH_CHALLENGE",
+    "PATH_RESPONSE",
+    "STREAM000",
+    "STREAM001",
+    "STREAM010",
+    "STREAM011",
+    "STREAM100",
+    "STREAM101",
+    "STREAM110",
+    "STREAM111"
+  };
+  std::string typeDescription = "";
+
+  typeDescription.append (frameTypeNames[m_frameType]);
+
+  return typeDescription;
+}
+
+std::string
+QuicSubheader::TransportErrorCodeToString () const
+{
+  static const char* transportErrorCodeNames[13] = {
+    "NO_ERROR",
+    "INTERNAL_ERROR",
+    "SERVER_BUSY",
+    "FLOW_CONTROL_ERROR",
+    "STREAM_ID_ERROR",
+    "STREAM_STATE_ERROR",
+    "FINAL_OFFSET_ERROR",
+    "FRAME_FORMAT_ERROR",
+    "TRANSPORT_PARAMETER_ERROR",
+    "VERSION_NEGOTIATION_ERROR",
+    "PROTOCOL_VIOLATION",
+    "UNSOLICITED_PATH_ERROR",
+    "FRAME_ERROR"
+  };
+  std::string typeDescription = "";
+
+  typeDescription.append (transportErrorCodeNames[m_errorCode]);
+
+  return typeDescription;
+}
+
+
+uint32_t
+QuicSubheader::GetSerializedSize (void) const
+{
+  NS_LOG_FUNCTION (this << (uint64_t)m_frameType);
+
+  return CalculateSubHeaderLength ();
+}
+
+uint32_t
+QuicSubheader::CalculateSubHeaderLength () const
+{
+  NS_LOG_FUNCTION (this);
+  NS_ASSERT (m_frameType >= PADDING and m_frameType <= STREAM111);
+  uint32_t len = 8;
+
+  switch (m_frameType)
+    {
+      case PADDING:
+
+        break;
+
+      case RST_STREAM:
+
+        len += GetVarInt64Size (m_streamId);
+        len += 16;
+        len += GetVarInt64Size (m_offset);
+        break;
+
+      case CONNECTION_CLOSE:
+
+        len += 16;
+        len += GetVarInt64Size (m_reasonPhraseLength);
+        len += (m_reasonPhraseLength * 8);
+        break;
+
+      case APPLICATION_CLOSE:
+
+        len += 16;
+        len += GetVarInt64Size (m_reasonPhraseLength);
+        len += (m_reasonPhraseLength * 8);
+        break;
+
+      case MAX_DATA:
+
+        len += GetVarInt64Size (m_maxData);
+        break;
+
+      case MAX_STREAM_DATA:
+
+        len += GetVarInt64Size (m_streamId);
+        len += GetVarInt64Size (m_maxStreamData);
+        break;
+
+      case MAX_STREAM_ID:
+
+        len += GetVarInt64Size (m_maxStreamId);
+        break;
+
+      case PING:
+
+        break;
+
+      case BLOCKED:
+
+        len += GetVarInt64Size (m_offset);
+        break;
+
+      case STREAM_BLOCKED:
+
+        len += GetVarInt64Size (m_streamId);
+        len += GetVarInt64Size (m_offset);
+        break;
+
+      case STREAM_ID_BLOCKED:
+
+        len += GetVarInt64Size (m_streamId);
+        break;
+
+      case NEW_CONNECTION_ID:
+
+        len += GetVarInt64Size (m_sequence);
+        len += 64;
+        //len += 128;
+        break;
+
+      case STOP_SENDING:
+
+        len += GetVarInt64Size (m_streamId);
+        len += 16;
+        break;
+
+      case ACK:
+
+        len += GetVarInt64Size (m_largestAcknowledged);
+        len += GetVarInt64Size (m_ackDelay);
+        len += GetVarInt64Size (m_ackBlockCount);
+        len += GetVarInt64Size (m_firstAckBlock);
+        for (uint64_t j = 0; j < m_ackBlockCount; j++)
+          {
+            len += GetVarInt64Size (m_gaps[j]);
+            len += GetVarInt64Size (m_additionalAckBlocks[j]);
+          }
+        break;
+
+      case PATH_CHALLENGE:
+
+        len += 8;
+        break;
+
+      case PATH_RESPONSE:
+
+        len += 8;
+        break;
+
+      case STREAM000:
+
+        len += GetVarInt64Size (m_streamId);
+        break;
+
+
+      case STREAM001:
+
+        len += GetVarInt64Size (m_streamId);
+        // The frame marks the end of the stream
+        break;
+
+      case STREAM010:
+
+        len += GetVarInt64Size (m_streamId);
+        len += GetVarInt64Size (m_length);
+        break;
+
+      case STREAM011:
+
+        len += GetVarInt64Size (m_streamId);
+        len += GetVarInt64Size (m_length);
+        // The frame marks the end of the stream
+        break;
+
+      case STREAM100:
+
+        len += GetVarInt64Size (m_streamId);
+        len += GetVarInt64Size (m_offset);
+        break;
+
+      case STREAM101:
+
+        len += GetVarInt64Size (m_streamId);
+        len += GetVarInt64Size (m_offset);
+        // The frame marks the end of the stream
+        break;
+
+      case STREAM110:
+
+        len += GetVarInt64Size (m_streamId);
+        len += GetVarInt64Size (m_offset);
+        len += GetVarInt64Size (m_length);
+        break;
+
+      case STREAM111:
+
+        len += GetVarInt64Size (m_streamId);
+        len += GetVarInt64Size (m_offset);
+        len += GetVarInt64Size (m_length);
+        // The frame marks the end of the stream
+        break;
+
+    }
+
+  NS_LOG_LOGIC ("CalculateSubHeaderLength - len" << len << " " << len / 8);
+
+  NS_ABORT_MSG_IF (len % 8 != 0, "len not divisible by 8 " << len);
+  //NS_ABORT_MSG_IF (len > 255, "len too long " << len);
+
+  return (len / 8);
+}
+
+void
+QuicSubheader::Serialize (Buffer::Iterator start) const
+{
+  NS_LOG_FUNCTION (this << (uint64_t)m_frameType);
+  NS_ASSERT (m_frameType >= PADDING and m_frameType <= STREAM111);
+
+  Buffer::Iterator i = start;
+  i.WriteU8 ((uint8_t)m_frameType);
+
+  switch (m_frameType)
+    {
+
+      case PADDING:
+
+        break;
+
+      case RST_STREAM:
+
+        WriteVarInt64 (i, m_streamId);
+        i.WriteU16 (m_errorCode);
+        WriteVarInt64 (i, m_offset);
+        break;
+
+      case CONNECTION_CLOSE:
+
+        i.WriteU16 (m_errorCode);
+        WriteVarInt64 (i, m_reasonPhraseLength);
+        for (auto& elem : m_reasonPhrase)
+          {
+            i.WriteU8 (elem);
+          }
+        break;
+
+      case APPLICATION_CLOSE:
+
+        i.WriteU16 (m_errorCode);
+        WriteVarInt64 (i, m_reasonPhraseLength);
+        for (auto& elem : m_reasonPhrase)
+          {
+            i.WriteU8 (elem);
+          }
+        break;
+
+      case MAX_DATA:
+
+        WriteVarInt64 (i, m_maxData);
+        break;
+
+      case MAX_STREAM_DATA:
+
+        WriteVarInt64 (i, m_streamId);
+        WriteVarInt64 (i, m_maxStreamData);
+        break;
+
+      case MAX_STREAM_ID:
+
+        WriteVarInt64 (i, m_maxStreamId);
+        break;
+
+      case PING:
+
+        break;
+
+      case BLOCKED:
+
+        WriteVarInt64 (i, m_offset);
+        break;
+
+      case STREAM_BLOCKED:
+
+        WriteVarInt64 (i, m_streamId);
+        WriteVarInt64 (i, m_offset);
+        break;
+
+      case STREAM_ID_BLOCKED:
+
+        WriteVarInt64 (i, m_streamId);
+        break;
+
+      case NEW_CONNECTION_ID:
+
+        WriteVarInt64 (i, m_sequence);
+        i.WriteHtonU64 (m_connectionId);
+        //i.WriteHtonU128 (m_statelessResetToken);
+        break;
+
+      case STOP_SENDING:
+
+        WriteVarInt64 (i, m_streamId);
+        i.WriteU16 (m_errorCode);
+        break;
+
+      case ACK:
+
+        WriteVarInt64 (i, m_largestAcknowledged);
+        WriteVarInt64 (i, m_ackDelay);
+        WriteVarInt64 (i, m_ackBlockCount);
+        WriteVarInt64 (i, m_firstAckBlock);
+        for (uint64_t j = 0; j < m_ackBlockCount; j++)
+          {
+            WriteVarInt64 (i, m_gaps[j]);
+            WriteVarInt64 (i, m_additionalAckBlocks[j]);
+          }
+        break;
+
+      case PATH_CHALLENGE:
+
+        i.WriteU8 (m_data);
+        break;
+
+      case PATH_RESPONSE:
+
+        i.WriteU8 (m_data);
+        break;
+
+      case STREAM000:
+
+        WriteVarInt64 (i, m_streamId);
+        break;
+
+      case STREAM001:
+
+        WriteVarInt64 (i, m_streamId);
+        // The frame marks the end of the stream
+        break;
+
+      case STREAM010:
+
+        WriteVarInt64 (i, m_streamId);
+        WriteVarInt64 (i, m_length);
+        break;
+
+      case STREAM011:
+
+        WriteVarInt64 (i, m_streamId);
+        WriteVarInt64 (i, m_length);
+        // The frame marks the end of the stream
+        break;
+
+      case STREAM100:
+
+        WriteVarInt64 (i, m_streamId);
+        WriteVarInt64 (i, m_offset);
+        break;
+
+      case STREAM101:
+
+        WriteVarInt64 (i, m_streamId);
+        WriteVarInt64 (i, m_offset);
+        // The frame marks the end of the stream
+        break;
+
+      case STREAM110:
+
+        WriteVarInt64 (i, m_streamId);
+        WriteVarInt64 (i, m_offset);
+        WriteVarInt64 (i, m_length);
+        break;
+
+      case STREAM111:
+
+        WriteVarInt64 (i, m_streamId);
+        WriteVarInt64 (i, m_offset);
+        WriteVarInt64 (i, m_length);
+        // The frame marks the end of the stream
+        break;
+
+    }
+}
+
+uint32_t
+QuicSubheader::Deserialize (Buffer::Iterator start)
+{
+  Buffer::Iterator i = start;
+  m_frameType = i.ReadU8 ();
+
+  NS_LOG_FUNCTION (this << (uint64_t)m_frameType);
+
+  NS_ASSERT (m_frameType >= PADDING and m_frameType <= STREAM111);
+
+  switch (m_frameType)
+    {
+
+      case PADDING:
+
+        break;
+
+      case RST_STREAM:
+
+        m_streamId = ReadVarInt64 (i);
+        m_errorCode = i.ReadU16 ();
+        m_offset = ReadVarInt64 (i);
+        break;
+
+      case CONNECTION_CLOSE:
+
+        m_errorCode = i.ReadU16 ();
+        m_reasonPhraseLength = ReadVarInt64 (i);
+        for (uint64_t j = 0; j < m_reasonPhraseLength; j++)
+          {
+            m_reasonPhrase.push_back (i.ReadU8 ());
+          }
+        break;
+
+      case APPLICATION_CLOSE:
+
+        m_errorCode = i.ReadU16 ();
+        m_reasonPhraseLength = ReadVarInt64 (i);
+        for (uint64_t j = 0; j < m_reasonPhraseLength; j++)
+          {
+            m_reasonPhrase.push_back (i.ReadU8 ());
+          }
+        break;
+
+      case MAX_DATA:
+
+        m_maxData = ReadVarInt64 (i);
+        break;
+
+      case MAX_STREAM_DATA:
+
+        m_streamId = ReadVarInt64 (i);
+        m_maxStreamData = ReadVarInt64 (i);
+        break;
+
+      case MAX_STREAM_ID:
+
+        m_maxStreamId = ReadVarInt64 (i);
+        break;
+
+      case PING:
+
+        break;
+
+      case BLOCKED:
+
+        m_offset = ReadVarInt64 (i);
+        break;
+
+      case STREAM_BLOCKED:
+
+        m_streamId = ReadVarInt64 (i);
+        m_offset = ReadVarInt64 (i);
+        break;
+
+      case STREAM_ID_BLOCKED:
+
+        m_streamId = ReadVarInt64 (i);
+        break;
+
+      case NEW_CONNECTION_ID:
+
+        m_sequence = ReadVarInt64 (i);
+        m_connectionId = i.ReadNtohU64 ();
+        //m_statelessResetToken = i.ReadNtohU128();
+        break;
+
+      case STOP_SENDING:
+
+        m_streamId = ReadVarInt64 (i);
+        m_errorCode = i.ReadU16 ();
+        break;
+
+      case ACK:
+
+        m_largestAcknowledged = ReadVarInt64 (i);
+        m_ackDelay = ReadVarInt64 (i);
+        m_ackBlockCount = ReadVarInt64 (i);
+        m_firstAckBlock = ReadVarInt64 (i);
+        for (uint64_t j = 0; j < m_ackBlockCount; j++)
+          {
+            m_gaps.push_back (ReadVarInt64 (i));
+            m_additionalAckBlocks.push_back (ReadVarInt64 (i));
+          }
+        break;
+
+      case PATH_CHALLENGE:
+
+        m_data = i.ReadU8 ();
+        break;
+
+      case PATH_RESPONSE:
+
+        m_data = i.ReadU8 ();
+        break;
+
+      case STREAM000:
+
+        m_streamId = ReadVarInt64 (i);
+        break;
+
+      case STREAM001:
+
+        m_streamId = ReadVarInt64 (i);
+        // The frame marks the end of the stream
+        break;
+
+      case STREAM010:
+
+        m_streamId = ReadVarInt64 (i);
+        m_length = ReadVarInt64 (i);
+        break;
+
+      case STREAM011:
+
+        m_streamId = ReadVarInt64 (i);
+        m_length = ReadVarInt64 (i);
+        // The frame marks the end of the stream
+        break;
+
+      case STREAM100:
+
+        m_streamId = ReadVarInt64 (i);
+        m_offset = ReadVarInt64 (i);
+        break;
+
+      case STREAM101:
+
+        m_streamId = ReadVarInt64 (i);
+        m_offset = ReadVarInt64 (i);
+        // The frame marks the end of the stream
+        break;
+
+      case STREAM110:
+
+        m_streamId = ReadVarInt64 (i);
+        m_offset = ReadVarInt64 (i);
+        m_length = ReadVarInt64 (i);
+        break;
+
+      case STREAM111:
+
+        m_streamId = ReadVarInt64 (i);
+        m_offset = ReadVarInt64 (i);
+        m_length = ReadVarInt64 (i);
+        // The frame marks the end of the stream
+        break;
+
+    }
+
+  NS_LOG_INFO ("Deserialized a subheader of size " << GetSerializedSize ());
+  return GetSerializedSize ();
+}
+
+void
+QuicSubheader::Print (std::ostream &os) const
+{
+  NS_LOG_FUNCTION (this << (uint64_t) m_frameType);
+  NS_ASSERT (m_frameType >= PADDING and m_frameType <= STREAM111);
+
+  os << "|" << FrameTypeToString () << "|\n";
+  switch (m_frameType)
+    {
+
+      case PADDING:
+
+        break;
+
+      case RST_STREAM:
+
+        os << "|Stream Id " << m_streamId << "|\n";
+        os << "|Application Error Code " << m_errorCode << "|\n";
+        os << "|Final Offset " << m_offset << "|\n";
+        break;
+
+      case CONNECTION_CLOSE:
+
+        os << "|Application Error Code " << TransportErrorCodeToString () << "|\n";
+        os << "|Reason Phrase Length " << m_reasonPhraseLength << "|\n";
+        os << "|Reason Phrase ";
+        for (auto& elem : m_reasonPhrase)
+          {
+            os << elem;
+          }
+        os << "|\n";
+        break;
+
+      case APPLICATION_CLOSE:
+
+        os << "|Application Error Code " << m_errorCode << "|\n";
+        os << "|Reason Phrase Length " << m_reasonPhraseLength << "|\n";
+        os << "|Reason Phrase ";
+        for (auto& elem : m_reasonPhrase)
+          {
+            os << elem;
+          }
+        os << "|\n";
+        break;
+
+      case MAX_DATA:
+
+        os << "|Maximum Data " << m_maxData << "|\n";
+        break;
+
+      case MAX_STREAM_DATA:
+
+        os << "|Stream Id " << m_streamId << "|\n";
+        os << "|Maximum Stream Data " << m_maxStreamData << "|\n";
+        break;
+
+      case MAX_STREAM_ID:
+        os << "|Maximum Stream Id " << m_maxStreamId << "|\n";
+        break;
+
+      case PING:
+
+        break;
+
+      case BLOCKED:
+        os << "|Offset " << m_offset << "|\n";
+        break;
+
+      case STREAM_BLOCKED:
+
+        os << "|Stream Id " << m_streamId << "|\n";
+        os << "|Offset " << m_offset << "|\n";
+        break;
+
+      case STREAM_ID_BLOCKED:
+
+        os << "|Stream Id " << m_streamId << "|\n";
+        break;
+
+      case NEW_CONNECTION_ID:
+
+        os << "|Sequence " << m_sequence << "|\n";
+        os << "|Connection Id " << m_connectionId << "|\n";
+        //os << "|Stateless Reset Token " << m_statelessResetToken << "|\n";
+        break;
+
+      case STOP_SENDING:
+
+        os << "|Stream Id " << m_streamId << "|\n";
+        os << "|Application Error Code " << m_errorCode << "|\n";
+        break;
+
+      case ACK:
+
+        os << "|Largest Acknowledged " << m_largestAcknowledged << "|\n";
+        os << "|Ack Delay " << m_ackDelay << "|\n";
+        os << "|Ack Block Count " << m_ackBlockCount << "|\n";
+        os << "|First Ack Block " << m_firstAckBlock << "|\n";
+        for (uint64_t j = 0; j < m_ackBlockCount; j++)
+          {
+            os << "|Gap " << m_gaps[j] << "|\n";
+            os << "|Additional Ack Block " << m_additionalAckBlocks[j] << "|\n";
+          }
+        break;
+
+      case PATH_CHALLENGE:
+
+        os << "|Data " << (uint64_t)m_data << "|\n";
+        break;
+
+      case PATH_RESPONSE:
+
+        os << "|Data " << (uint64_t)m_data << "|\n";
+        break;
+
+      case STREAM000:
+
+        os << "|Stream Id " << m_streamId << "|\n";
+        break;
+
+      case STREAM001:
+
+        os << "|Stream Id " << m_streamId << "|\n";
+        // The frame marks the end of the stream
+        break;
+
+      case STREAM010:
+
+        os << "|Stream Id " << m_streamId << "|\n";
+        os << "|Length " << m_length << "|\n";
+        break;
+
+      case STREAM011:
+
+        os << "|Stream Id " << m_streamId << "|\n";
+        os << "|Length " << m_length << "|\n";
+        // The frame marks the end of the stream
+        break;
+
+      case STREAM100:
+
+        os << "|Stream Id " << m_streamId << "|\n";
+        os << "|Offset " << m_offset << "|\n";
+        break;
+
+      case STREAM101:
+
+        os << "|Stream Id " << m_streamId << "|\n";
+        os << "|Offset " << m_offset << "|\n";
+        // The frame marks the end of the stream
+        break;
+
+      case STREAM110:
+
+        os << "|Stream Id " << m_streamId << "|\n";
+        os << "|Offset " << m_offset << "|\n";
+        os << "|Length " << m_length << "|\n";
+        break;
+
+      case STREAM111:
+
+        os << "|Stream Id " << m_streamId << "|\n";
+        os << "|Offset " << m_offset << "|\n";
+        os << "|Length " << m_length << "|\n";
+        // The frame marks the end of the stream
+        break;
+    }
+}
+
+bool
+operator== (const QuicSubheader &lhs, const QuicSubheader &rhs)
+{
+  return (lhs.m_frameType == rhs.m_frameType);
+}
+
+std::ostream&
+operator<< (std::ostream& os, QuicSubheader& tc)
+{
+  tc.Print (os);
+  return os;
+}
+
+
+void
+QuicSubheader::WriteVarInt64 (Buffer::Iterator& i, uint64_t varInt64) const
+{
+  //NS_LOG_FUNCTION(this);
+
+  uint8_t mask = 0x00;
+  if (varInt64 <= 63)
+    {
+      uint8_t buffer[1];
+      buffer[0] = (uint8_t)varInt64;
+      i.WriteU8 (buffer[0]);
+    }
+  else if (varInt64 <= 16383)
+    {
+      mask = 0x40;
+      uint8_t buffer[2];
+      buffer[0] = (uint8_t)(varInt64 >> 8);
+      buffer[1] = (uint8_t)varInt64;
+      buffer[0] |= mask;
+
+      for (int j = 0; j < 2; j++)
+        {
+          i.WriteU8 (buffer[j]);
+        }
+    }
+  else if (varInt64 <= 1073741823)
+    {
+      mask = 0x80;
+      uint8_t buffer[4];
+      for (int i = 0; i < 4; i++)
+        {
+          buffer[i] = (uint8_t)(varInt64 >> (8 * (3 - i)));
+          //NS_LOG_INFO("WriteVarInt64 - buffer[i] " << (uint64_t)buffer[i]);
+        }
+
+      buffer[0] |= mask;
+
+      for (int j = 0; j < 4; j++)
+        {
+          i.WriteU8 (buffer[j]);
+        }
+
+    }
+  else if (varInt64 <= 4611686018427387903)
+    {
+      mask = 0xC0;
+      uint8_t buffer[8];
+
+      for (int i = 0; i < 8; i++)
+        {
+          buffer[i] = (uint8_t)(varInt64 >> (8 * (7 - i)));
+          //NS_LOG_INFO("WriteVarInt64 - buffer[i] " << (uint64_t)buffer[i]);
+        }
+
+      buffer[0] |= mask;
+
+      for (int j = 0; j < 8; j++)
+        {
+          i.WriteU8 (buffer[j]);
+        }
+    }
+  else
+    {
+      return;           // Error too much large
+    }
+
+  //NS_LOG_INFO("WriteVarInt64 - bytestream32 " << (uint64_t)bytestream32 << " varInt64 " << varInt64 << " mask " << mask);
+
+}
+
+uint64_t
+QuicSubheader::ReadVarInt64 (Buffer::Iterator& i)
+{
+  //NS_LOG_FUNCTION(this);
+
+  uint8_t bytestream8 = i.ReadU8 ();
+  uint8_t mask = bytestream8 & 0b11000000;
+  bytestream8 &= 0b00111111;
+
+  uint64_t bytestream64 = 0;
+
+  if (mask == 0x00)
+    {
+      bytestream64 = (uint64_t)bytestream8;
+    }
+  else if (mask == 0x40)
+    {
+      bytestream64 = ((uint64_t)bytestream8 << 8) | (uint64_t)i.ReadU8 ();
+    }
+  else if (mask == 0x80)
+    {
+      bytestream64 = ((uint64_t)bytestream8 << 24) | ((uint64_t)i.ReadU8 () << 16) | ((uint64_t)i.ReadU8 () << 8) | (uint64_t)i.ReadU8 ();
+    }
+  else if (mask == 0xC0)
+    {
+      bytestream64 = ((uint64_t)bytestream8 << 56) | ((uint64_t)i.ReadU8 () << 48) | ((uint64_t)i.ReadU8 () << 40) | ((uint64_t)i.ReadU8 () << 32) | ((uint64_t)i.ReadU8 () << 24) | ((uint64_t)i.ReadU8 () << 16) | ((uint64_t)i.ReadU8 () << 8) | (uint64_t)i.ReadU8 ();
+    }
+
+  //NS_LOG_INFO("ReadVarInt64 - bytestream8 " << (uint64_t)bytestream8 << " bytestream64 " << bytestream64 << " mask " << (uint64_t)mask);
+
+  return bytestream64;
+}
+
+uint32_t
+QuicSubheader::GetVarInt64Size (uint64_t varInt64)
+{
+
+  //NS_LOG_FUNCTION(this);
+
+  if (varInt64 <= 63)
+    {
+      return (uint32_t) 8;
+    }
+  else if (varInt64 <= 16383)
+    {
+      return (uint32_t) 16;
+    }
+  else if (varInt64 <= 1073741823)
+    {
+      return (uint32_t) 32;
+    }
+  else if (varInt64 <= 4611686018427387903)
+    {
+      return (uint32_t) 64;
+    }
+  else
+    {
+      return 0;
+    }
+
+}
+
+QuicSubheader
+QuicSubheader::CreatePadding (void)
+{
+  NS_LOG_INFO ("Created Padding Header");
+
+  QuicSubheader sub;
+  sub.SetFrameType (PADDING);
+
+  return sub;
+}
+
+QuicSubheader
+QuicSubheader::CreateRstStream (uint64_t streamId, uint16_t applicationErrorCode, uint64_t finalOffset)
+{
+  NS_LOG_INFO ("Created RstStream Header");
+
+  QuicSubheader sub;
+  sub.SetFrameType (RST_STREAM);
+  sub.SetStreamId (streamId);
+  sub.SetErrorCode (applicationErrorCode);
+  sub.SetOffset (finalOffset);
+
+  return sub;
+}
+
+QuicSubheader
+QuicSubheader::CreateConnectionClose (uint16_t errorCode, const char* reasonPhrase)
+{
+  NS_LOG_INFO ("Created ConnectionClose Header");
+
+  QuicSubheader sub;
+  sub.SetFrameType (CONNECTION_CLOSE);
+  sub.SetErrorCode (errorCode);
+
+  std::vector<uint8_t> rpvec;
+  for (int i = 0; reasonPhrase[i] != '\0'; i++)
+    {
+      rpvec.push_back ((uint8_t)reasonPhrase[i]);
+    }
+
+  sub.SetReasonPhraseLength (rpvec.size ());
+  sub.SetReasonPhrase (rpvec);
+
+  return sub;
+}
+
+
+QuicSubheader
+QuicSubheader::CreateApplicationClose (uint16_t errorCode, const char* reasonPhrase)
+{
+  NS_LOG_INFO ("Created ApplicationClose Header");
+
+  QuicSubheader sub;
+  sub.SetFrameType (APPLICATION_CLOSE);
+  sub.SetErrorCode (errorCode);
+
+  std::vector<uint8_t> rpvec;
+  for (int i = 0; reasonPhrase[i] != '\0'; i++)
+    {
+      rpvec.push_back ((uint8_t)reasonPhrase[i]);
+    }
+
+  sub.SetReasonPhraseLength (rpvec.size ());
+  sub.SetReasonPhrase (rpvec);
+
+  return sub;
+}
+
+
+QuicSubheader
+QuicSubheader::CreateMaxData (uint64_t maxData)
+{
+  NS_LOG_INFO ("Created MaxData Header");
+
+  QuicSubheader sub;
+  sub.SetFrameType (MAX_DATA);
+  sub.SetMaxData (maxData);
+  sub.SetLength (0);
+
+  return sub;
+}
+
+QuicSubheader
+QuicSubheader::CreateMaxStreamData (uint64_t streamId, uint64_t maxStreamData)
+{
+  NS_LOG_INFO ("Created MaxStreamData Header");
+
+  QuicSubheader sub;
+  sub.SetFrameType (MAX_STREAM_DATA);
+  sub.SetStreamId (streamId);
+  sub.SetMaxStreamData (maxStreamData);
+
+  return sub;
+}
+
+QuicSubheader
+QuicSubheader::CreateMaxStreamId (uint64_t maxStreamId)
+{
+  NS_LOG_INFO ("Created MaxStreamId Header");
+
+  QuicSubheader sub;
+  sub.SetFrameType (MAX_STREAM_ID);
+  sub.SetMaxStreamId (maxStreamId);
+
+  return sub;
+}
+
+QuicSubheader
+QuicSubheader::CreatePing (void)
+{
+  NS_LOG_INFO ("Created Ping Header");
+
+  QuicSubheader sub;
+  sub.SetFrameType (PING);
+
+  return sub;
+}
+
+QuicSubheader
+QuicSubheader::CreateBlocked (uint64_t offset)
+{
+  NS_LOG_INFO ("Created Blocked Header");
+
+  QuicSubheader sub;
+  sub.SetFrameType (BLOCKED);
+  sub.SetOffset (offset);
+
+  return sub;
+}
+
+QuicSubheader
+QuicSubheader::CreateStreamBlocked (uint64_t streamId, uint64_t offset)
+{
+  NS_LOG_INFO ("Created StreamBlocked Header");
+
+  QuicSubheader sub;
+  sub.SetFrameType (STREAM_BLOCKED);
+  sub.SetStreamId (streamId);
+  sub.SetOffset (offset);
+
+  return sub;
+}
+
+QuicSubheader
+QuicSubheader::CreateStreamIdBlocked (uint64_t streamId)
+{
+  NS_LOG_INFO ("Created StreamIdBlocked Header");
+
+  QuicSubheader sub;
+  sub.SetFrameType (STREAM_ID_BLOCKED);
+  sub.SetStreamId (streamId);
+
+  return sub;
+}
+
+QuicSubheader
+QuicSubheader::CreateNewConnectionId (uint64_t sequence, uint64_t connectionId) //uint128_t statelessResetToken);
+{
+  NS_LOG_INFO ("Created NewConnectionId Header");
+
+  QuicSubheader sub;
+  sub.SetFrameType (NEW_CONNECTION_ID);
+  sub.SetSequence (sequence);
+  sub.SetConnectionId (connectionId);
+
+  return sub;
+}
+
+QuicSubheader
+QuicSubheader::CreateStopSending (uint64_t streamId, uint16_t applicationErrorCode)
+{
+  NS_LOG_INFO ("Created StopSending Header");
+
+  QuicSubheader sub;
+  sub.SetFrameType (STOP_SENDING);
+  sub.SetStreamId (streamId);
+  sub.SetErrorCode (applicationErrorCode);
+
+  return sub;
+}
+
+QuicSubheader
+QuicSubheader::CreateAck (uint32_t largestAcknowledged, uint64_t ackDelay, uint32_t firstAckBlock, std::vector<uint32_t>& gaps, std::vector<uint32_t>& additionalAckBlocks)
+{
+  NS_LOG_INFO ("Created Ack Header");
+
+  QuicSubheader sub;
+  sub.SetFrameType (ACK);
+  sub.SetLargestAcknowledged (largestAcknowledged);
+  sub.SetAckDelay (ackDelay);
+  sub.SetAckBlockCount (gaps.size ());
+  sub.SetFirstAckBlock (firstAckBlock);
+  sub.SetGaps (gaps);
+  sub.SetAdditionalAckBlocks (additionalAckBlocks);
+
+  return sub;
+}
+
+QuicSubheader
+QuicSubheader::CreatePathChallenge (uint8_t data)
+{
+  NS_LOG_INFO ("Created PathChallenge Header");
+
+  QuicSubheader sub;
+  sub.SetFrameType (PATH_CHALLENGE);
+  sub.SetData (data);
+
+  return sub;
+}
+
+QuicSubheader
+QuicSubheader::CreatePathResponse (uint8_t data)
+{
+  NS_LOG_INFO ("Created PathResponse Header");
+
+  QuicSubheader sub;
+  sub.SetFrameType (PATH_RESPONSE);
+  sub.SetData (data);
+
+  return sub;
+}
+
+QuicSubheader
+QuicSubheader::CreateStreamSubHeader (uint64_t streamId, uint64_t offset, uint64_t length, bool offBit, bool lengthBit, bool finBit)
+{
+  NS_LOG_INFO ("Created Stream SubHeader");
+
+  QuicSubheader sub;
+
+  uint8_t frameType = 0b00010000 | (offBit << 2) | (lengthBit << 1) | (finBit);
+
+  sub.SetFrameType (frameType);
+  sub.SetStreamId (streamId);
+
+  if (offBit)
+    {
+      sub.SetOffset (offset);
+    }
+  if (lengthBit)
+    {
+      sub.SetLength (length);
+    }
+
+  return sub;
+}
+
+bool
+QuicSubheader::IsPadding () const
+{
+  return m_frameType == PADDING;
+}
+
+bool
+QuicSubheader::IsRstStream () const
+{
+  return m_frameType == RST_STREAM;
+}
+
+bool
+QuicSubheader::IsConnectionClose () const
+{
+  return m_frameType == CONNECTION_CLOSE;
+}
+
+bool
+QuicSubheader::IsApplicationClose () const
+{
+  return m_frameType == APPLICATION_CLOSE;
+}
+
+bool
+QuicSubheader::IsMaxData () const
+{
+  return m_frameType == MAX_DATA;
+}
+
+bool
+QuicSubheader::IsMaxStreamData () const
+{
+  return m_frameType == MAX_STREAM_DATA;
+}
+
+bool
+QuicSubheader::IsMaxStreamId () const
+{
+  return m_frameType == MAX_STREAM_ID;
+}
+
+bool
+QuicSubheader::IsPing () const
+{
+  return m_frameType == PING;
+}
+
+bool
+QuicSubheader::IsBlocked () const
+{
+  return m_frameType == BLOCKED;
+}
+
+bool
+QuicSubheader::IsStreamBlocked () const
+{
+  return m_frameType == STREAM_BLOCKED;
+}
+
+bool
+QuicSubheader::IsStreamIdBlocked () const
+{
+  return m_frameType == STREAM_ID_BLOCKED;
+}
+
+bool
+QuicSubheader::IsNewConnectionId () const
+{
+  return m_frameType == NEW_CONNECTION_ID;
+}
+
+bool
+QuicSubheader::IsStopSending () const
+{
+  return m_frameType == STOP_SENDING;
+}
+
+bool
+QuicSubheader::IsAck () const
+{
+  return m_frameType == ACK;
+}
+
+bool
+QuicSubheader::IsPathChallenge () const
+{
+  return m_frameType == PATH_CHALLENGE;
+}
+
+bool
+QuicSubheader::IsPathResponse () const
+{
+  return m_frameType == PATH_RESPONSE;
+}
+
+bool
+QuicSubheader::IsStream () const
+{
+  return m_frameType >= STREAM000 and m_frameType <= STREAM111;
+}
+
+bool
+QuicSubheader::IsStreamFin () const
+{
+  return m_frameType & 0b00000001;
+}
+
+uint32_t QuicSubheader::GetAckBlockCount () const
+{
+  return m_ackBlockCount;
+}
+
+void QuicSubheader::SetAckBlockCount (uint32_t ackBlockCount)
+{
+  m_ackBlockCount = ackBlockCount;
+}
+
+const std::vector<uint32_t>& QuicSubheader::GetAdditionalAckBlocks () const
+{
+  return m_additionalAckBlocks;
+}
+
+void QuicSubheader::SetAdditionalAckBlocks (const std::vector<uint32_t>& ackBlocks)
+{
+  m_additionalAckBlocks = ackBlocks;
+}
+
+uint64_t QuicSubheader::GetAckDelay () const
+{
+  return m_ackDelay;
+}
+
+void QuicSubheader::SetAckDelay (uint64_t ackDelay)
+{
+  m_ackDelay = ackDelay;
+}
+
+uint64_t QuicSubheader::GetConnectionId () const
+{
+  return m_connectionId;
+}
+
+void QuicSubheader::SetConnectionId (uint64_t connectionId)
+{
+  m_connectionId = connectionId;
+}
+
+uint8_t QuicSubheader::GetData () const
+{
+  return m_data;
+}
+
+void QuicSubheader::SetData (uint8_t data)
+{
+  m_data = data;
+}
+
+uint16_t QuicSubheader::GetErrorCode () const
+{
+  return m_errorCode;
+}
+
+void QuicSubheader::SetErrorCode (uint16_t errorCode)
+{
+  m_errorCode = errorCode;
+}
+
+uint8_t QuicSubheader::GetFrameType () const
+{
+  return m_frameType;
+}
+
+void QuicSubheader::SetFrameType (uint8_t frameType)
+{
+  m_frameType = frameType;
+}
+
+const std::vector<uint32_t>& QuicSubheader::GetGaps () const
+{
+  return m_gaps;
+}
+
+void QuicSubheader::SetGaps (const std::vector<uint32_t>& gaps)
+{
+  m_gaps = gaps;
+}
+
+uint32_t QuicSubheader::GetLargestAcknowledged () const
+{
+  return m_largestAcknowledged;
+}
+
+void QuicSubheader::SetLargestAcknowledged (uint32_t largestAcknowledged)
+{
+  m_largestAcknowledged = largestAcknowledged;
+}
+
+uint64_t QuicSubheader::GetLength () const
+{
+  return m_length;
+}
+
+void QuicSubheader::SetLength (uint64_t length)
+{
+  m_length = length;
+}
+
+uint64_t QuicSubheader::GetMaxData () const
+{
+  return m_maxData;
+}
+
+void QuicSubheader::SetMaxData (uint64_t maxData)
+{
+  m_maxData = maxData;
+}
+
+uint64_t QuicSubheader::GetMaxStreamData () const
+{
+  return m_maxStreamData;
+}
+
+void QuicSubheader::SetMaxStreamData (uint64_t maxStreamData)
+{
+  m_maxStreamData = maxStreamData;
+}
+
+uint64_t QuicSubheader::GetMaxStreamId () const
+{
+  return m_maxStreamId;
+}
+
+void QuicSubheader::SetMaxStreamId (uint64_t maxStreamId)
+{
+  m_maxStreamId = maxStreamId;
+}
+
+uint64_t QuicSubheader::GetOffset () const
+{
+  return m_offset;
+}
+
+void QuicSubheader::SetOffset (uint64_t offset)
+{
+  m_offset = offset;
+}
+
+const std::vector<uint8_t>& QuicSubheader::GetReasonPhrase () const
+{
+  return m_reasonPhrase;
+}
+
+void QuicSubheader::SetReasonPhrase (const std::vector<uint8_t>& reasonPhrase)
+{
+  m_reasonPhrase = reasonPhrase;
+}
+
+uint64_t QuicSubheader::GetReasonPhraseLength () const
+{
+  return m_reasonPhraseLength;
+}
+
+void QuicSubheader::SetReasonPhraseLength (uint64_t reasonPhraseLength)
+{
+  m_reasonPhraseLength = reasonPhraseLength;
+}
+
+uint64_t QuicSubheader::GetSequence () const
+{
+  return m_sequence;
+}
+
+void QuicSubheader::SetSequence (uint64_t sequence)
+{
+  m_sequence = sequence;
+}
+
+uint64_t QuicSubheader::GetStreamId () const
+{
+  return m_streamId;
+}
+
+void QuicSubheader::SetStreamId (uint64_t streamId)
+{
+  m_streamId = streamId;
+}
+
+//uint128_t QuicSubheader::getStatelessResetToken() const {
+//	return m_statelessResetToken;
+//}
+//
+//void QuicSubheader::SetStatelessResetToken(uint128_t statelessResetToken) {
+//	m_statelessResetToken = statelessResetToken;
+//}
+
+uint64_t QuicSubheader::GetFirstAckBlock () const
+{
+  return m_firstAckBlock;
+}
+
+void QuicSubheader::SetFirstAckBlock (uint64_t firstAckBlock)
+{
+  m_firstAckBlock = firstAckBlock;
+}
+
+} // namespace ns3
+
+
diff --git a/src/quic/model/quic-subheader.h b/src/quic/model/quic-subheader.h
new file mode 100644
index 000000000..08ab11180
--- /dev/null
+++ b/src/quic/model/quic-subheader.h
@@ -0,0 +1,751 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *
+ */
+
+#ifndef QUICSUBHEADER_H
+#define QUICSUBHEADER_H
+
+#include <stdint.h>
+#include "ns3/header.h"
+#include "ns3/buffer.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/ipv6-address.h"
+#include "ns3/sequence-number.h"
+
+namespace ns3 {
+
+/**
+ * \ingroup quic
+ * \brief SubHeader for the QUIC Protocol
+ *
+ * This class has fields corresponding to those in a QUIC subheader
+ * (stream id, connection id, error code, offset, flags, etc) as well
+ * as methods for serialization to and deserialization from a buffer.
+ *
+ * Frames and Frame Types [Quic IETF Draft 13 Transport - sec. 5]
+ * --------------------------------------------------------------
+ *
+ * The payload of all packets, after removing packet protection, consists
+ * of a sequence of frames. Version Negotiation and Stateless Reset do not
+ * contain frames. Payloads MUST contain at least one frame, and MAY
+ * contain multiple frames and multiple frame types.
+ *
+ *    0                   1                   2                   3
+ *    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+ *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+ *   |                          Frame 1 (*)                        ...
+ *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+ *   |                          Frame 2 (*)                        ...
+ *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+ *                                  ...
+ *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+ *   |                          Frame N (*)                        ...
+ *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+ *
+ * Frames MUST fit within a single QUIC packet and MUST NOT span a QUIC
+ * packet boundary. Each frame begins  with a Frame Type, indicating
+ * its type, followed by additional type-dependent fields.
+ *
+ *    0                   1                   2                   3
+ *    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+ *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+ *   |                           Type (i)                          ...
+ *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+ *   |                   Type-Dependent Fields (*)                 ...
+ *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+ *
+ * Variable-Length Integer Encoding [Quic IETF Draft 13 Transport - sec. 7.1]
+ * --------------------------------------------------------------------------
+ *
+ * QUIC frames commonly use a variable-length encoding for non-negative
+ * integer values. This encoding ensures that smaller integer values
+ * need fewer octets to encode. The QUIC variable-length integer encoding
+ * reserves the two most significant bits of the first octet to encode the
+ * base 2 logarithm of the integer encoding length in octets. The integer
+ * value is encoded on the remaining bits, in network byte order. This
+ * means that integers are encoded on 1, 2, 4, or 8 octets and can encode
+ * 6, 14, 30, or 62 bit values respectively.
+ *
+ *   +------+--------+-------------+-----------------------+
+ *   | 2Bit | Length | Usable Bits | Range                 |
+ *   +------+--------+-------------+-----------------------+
+ *   | 00   | 1      | 6           | 0-63                  |
+ *   |      |        |             |                       |
+ *   | 01   | 2      | 14          | 0-16383               |
+ *   |      |        |             |                       |
+ *   | 10   | 4      | 30          | 0-1073741823          |
+ *   |      |        |             |                       |
+ *   | 11   | 8      | 62          | 0-4611686018427387903 |
+ *   +------+--------+-------------+-----------------------+
+ *
+ */
+class QuicSubheader : public Header
+{
+public:
+  /**
+   * \brief Quic subheader type frame values
+   */
+  typedef enum
+  {
+    PADDING = 0x00,            //!< Padding
+    RST_STREAM = 0x01,         //!< Rst Stream
+    CONNECTION_CLOSE = 0x02,   //!< Connection Close
+    APPLICATION_CLOSE = 0x03,  //!< Application Close
+    MAX_DATA = 0x04,           //!< Max Data
+    MAX_STREAM_DATA = 0x05,    //!< Max Stream Data
+    MAX_STREAM_ID = 0x06,      //!< Max Stream Id
+    PING = 0x07,               //!< Ping
+    BLOCKED = 0x08,            //!< Blocked
+    STREAM_BLOCKED = 0x09,     //!< Stream Blocked
+    STREAM_ID_BLOCKED = 0x0A,  //!< Stream Id Blocked
+    NEW_CONNECTION_ID = 0x0B,  //!< New Connection Id
+    STOP_SENDING = 0x0C,       //!< Stop Sending
+    ACK = 0x0D,                //!< Ack
+    PATH_CHALLENGE = 0x0E,     //!< Path Challenge
+    PATH_RESPONSE = 0x0F,      //!< Path Response
+    STREAM000 = 0x10,          //!< Stream (offset=0, length=0, fin=0)
+    STREAM001 = 0x11,          //!< Stream (offset=0, length=0, fin=1)
+    STREAM010 = 0x12,          //!< Stream (offset=0, length=1, fin=0)
+    STREAM011 = 0x13,          //!< Stream (offset=0, length=1, fin=1)
+    STREAM100 = 0x14,          //!< Stream (offset=1, length=0, fin=0)
+    STREAM101 = 0x15,          //!< Stream (offset=1, length=0, fin=1)
+    STREAM110 = 0x16,          //!< Stream (offset=1, length=1, fin=0)
+    STREAM111 = 0x17           //!< Stream (offset=1, length=1, fin=1)
+  } TypeFrame_t;
+
+  /**
+   * \brief Quic subheader transport error codes values
+   */
+  typedef enum
+  {
+    NO_ERROR = 0x00,                   // No error
+    INTERNAL_ERROR = 0x01,             // Implementation error
+    SERVER_BUSY = 0x02,                // Server currently busy
+    FLOW_CONTROL_ERROR = 0x03,         // Flow control error
+    STREAM_ID_ERROR = 0x04,            // Invalid stream ID
+    STREAM_STATE_ERROR = 0x05,         // Frame received in invalid stream state
+    FINAL_OFFSET_ERROR = 0x06,         // Change to final stream offset
+    FRAME_FORMAT_ERROR = 0x07,         // Generic frame format error
+    TRANSPORT_PARAMETER_ERROR = 0x08,  // Error in transport parameters
+    VERSION_NEGOTIATION_ERROR = 0x09,  // Version negotiation failure
+    PROTOCOL_VIOLATION = 0x0A,         // Generic protocol violation
+    UNSOLICITED_PATH_ERROR = 0x0B,     // Unsolicited PATH_RESPONSE frame
+    FRAME_ERROR = 0x100                // Specific frame format error [0x100-0x1FF] -> will simply use Frame Error 0x100 as a mask and summing specific TypeFrame_t
+  } TransportErrorCodes_t;
+
+  QuicSubheader ();
+  virtual ~QuicSubheader ();
+
+  // Inherited from Header
+  static TypeId GetTypeId (void);
+  virtual TypeId GetInstanceTypeId (void) const;
+  virtual void Print (std::ostream &os) const;
+  virtual uint32_t GetSerializedSize (void) const;
+  virtual void Serialize (Buffer::Iterator start) const;
+  virtual uint32_t Deserialize (Buffer::Iterator start);
+
+  /**
+   * \brief Print a Quic subheader into an output stream
+   *
+   * \param os output stream
+   * \param tc Quic subheader to print
+   * \return The ostream passed as first argument
+   */
+  friend std ::ostream& operator<< (std::ostream& os, QuicSubheader & tc);
+
+  /**
+   * \brief Converts the frame type flag into a human readable string description
+   *
+   * \return the generated string
+   **/
+  std::string FrameTypeToString () const;
+
+  /**
+   * \brief Converts the transport error code into a human readable string description
+   *
+   * \return the generated string
+   **/
+  std::string TransportErrorCodeToString () const;
+
+  /**
+   * \brief Write a variable-length 64-bit integer on a buffer according to the encoding standards
+   *
+   * \param i the buffer iterator
+   * \param varInt64 the variable-length 64-bit integer
+   **/
+  void WriteVarInt64 (Buffer::Iterator& i, uint64_t varInt64) const;
+
+  /**
+   * \brief Read a variable-length 64-bit integer from a buffer according to the encoding standards
+   *
+   * \param i the buffer iterator
+   * \return the variable-length 64-bit integer
+   **/
+  uint64_t ReadVarInt64 (Buffer::Iterator& i);
+
+  /**
+   * \brief Get the variable-length 64-bit integer size according to the encoding standards (in bits)
+   *
+   * \param varInt64 the variable-length 64-bit integer
+   * \return the size of the variable-length 64-bit integer (in bits)
+   **/
+  static uint32_t GetVarInt64Size (uint64_t varInt64);
+
+  /**
+   * Create a Padding subheader
+   *
+   * \return the generated QuicSubheader
+   */
+  static QuicSubheader CreatePadding (void);
+
+  /**
+   * Create a Max Stream Data subheader
+   *
+   * \param streamId the stream id of the stream being terminated
+   * \param applicationErrorCode the error code that indicates why the stream is being closed
+   * \param finalOffset the absolute byte offset of the end of data written on this stream by the RST_STREAM sender
+   * \return the generated QuicSubheader
+   */
+  static QuicSubheader CreateRstStream (uint64_t streamId, uint16_t applicationErrorCode, uint64_t finalOffset);
+
+  /**
+   * Create a Connection Close subheader
+   *
+   * \param errorCode the error code that indicates the reason for closing this connection
+   * \param reasonPhrase the human-readable explanation for why the connection has been closed
+   * \return the generated QuicSubheader
+   */
+  static QuicSubheader CreateConnectionClose (uint16_t errorCode, const char* reasonPhrase);
+
+  /**
+   * Create a Application Close subheader
+   *
+   * \param errorCode the error code that indicates the reason for closing this connection
+   * \param reasonPhrase the human-readable explanation for why the connection has been closed
+   * \return the generated QuicSubheader
+   */
+  static QuicSubheader CreateApplicationClose (uint16_t errorCode, const char* reasonPhrase);
+
+  /**
+   * Create a Max Data subheader
+   *
+   * \param maxData the maximum amount of data that can be sent on the entire connection
+   * \return the generated QuicSubheader
+   */
+  static QuicSubheader CreateMaxData (uint64_t maxData);
+
+  /**
+   * Create a Max Stream Data subheader
+   *
+   * \param streamId The stream id of the stream that is affected
+   * \param maxStreamData the maximum amount of data that can be sent on the identified stream
+   * \return the generated QuicSubheader
+   */
+  static QuicSubheader CreateMaxStreamData (uint64_t streamId, uint64_t maxStreamData);
+
+  /**
+   * Create a Max Stream Id subheader
+   *
+   * \param maxStreamId the id of the maximum unidirectional or bidirectional peer-initiated stream id for the connection
+   * \return the generated QuicSubheader
+   */
+  static QuicSubheader CreateMaxStreamId (uint64_t maxStreamId);
+
+  /**
+   * Create a Ping subheader
+   *
+   * \return the generated QuicSubheader
+   */
+  static QuicSubheader CreatePing (void);
+
+  /**
+   * Create a Blocked subheader
+   *
+   * \param offset the connection-level offset at which the blocking occurred
+   * \return the generated QuicSubheader
+   */
+  static QuicSubheader CreateBlocked (uint64_t offset);
+
+  /**
+   * Create a Stream Blocked subheader
+   *
+   * \param streamId the stream which is flow control blocked
+   * \param offset the offset of the stream at which the blocking occurred
+   * \return the generated QuicSubheader
+   */
+  static QuicSubheader CreateStreamBlocked (uint64_t streamId, uint64_t offset);
+
+  /**
+   * Create a Stream Id Blocked subheader
+   *
+   * \param streamId the highest stream id that the sender was permitted to open
+   * \return the generated QuicSubheader
+   */
+  static QuicSubheader CreateStreamIdBlocked (uint64_t streamId);
+
+  /**
+   * Create a New Connection Id subheader
+   *
+   * \param sequence this value starts at 0 and increases by 1 for each connection ID that is provided by the server
+   * \param connectionId the new connection id
+   * \param statelessResetToken the 128-bit value that will be used to for a stateless reset when the associated connection ID is used
+   * \return the generated QuicSubheader
+   */
+  static QuicSubheader CreateNewConnectionId (uint64_t sequence, uint64_t connectionId);     //uint128_t statelessResetToken);
+
+  /**
+   * Create a Stop Sending subheader
+   *
+   * \param streamId the stream id of the stream being ignored
+   * \param applicationErrorCode the application-specified reason the sender is ignoring the stream
+   * \return the generated QuicSubheader
+   */
+  static QuicSubheader CreateStopSending (uint64_t streamId, uint16_t applicationErrorCode);
+
+  /**
+   * Create a Ack subheader
+   *
+   * \param largestAcknowledged the largest packet number the peer is acknowledging
+   * \param ackDelay the time in microseconds that the largest acknowledged packet, was received by this peer to when this ACK was sent
+   * \param firstAckBlock the number of contiguous packets preceding the Largest Acknowledged that are being acknowledged
+   * \param gaps the vector where each field contains the number of contiguous unacknowledged packets preceding the packet number one lower than the smallest in the preceding ack block
+   * \param additionalAckBlocks the vector where each field contains the number of contiguous acknowledged packets preceding the largest packet number
+   * \return the generated QuicSubheader
+   */
+  static QuicSubheader CreateAck (uint32_t largestAcknowledged, uint64_t ackDelay, uint32_t firstAckBlock, std::vector<uint32_t>& gaps, std::vector<uint32_t>& additionalAckBlocks);
+
+  /**
+   * Create a Path Response subheader
+   *
+   * \param data the data word of the Path Challenge subheader
+   * \return the generated QuicSubheader
+   */
+  static QuicSubheader CreatePathChallenge (uint8_t data);
+
+  /**
+   * Create a Path Response subheader
+   *
+   * \param data the data word of the Path Response subheader
+   * \return the generated QuicSubheader
+   */
+  static QuicSubheader CreatePathResponse (uint8_t data);
+
+  /**
+   * Create a Stream subheader
+   *
+   * \param streamId the ID of the stream
+   * \param offset the offset of the first byte of the frame in the stream
+   * \param length the packet size
+   * \param offBit a flag to indicate whether the offset is carried or not
+   * \param lengthBit a flag to indicate whether the length is carried or not
+   * \param finBit a flag to indicate the FIN bit
+   * \return the generated QuicSubheader
+   */
+  static QuicSubheader CreateStreamSubHeader (uint64_t streamId, uint64_t offset, uint64_t length, bool offBit = false, bool lengthBit = false, bool finBit = false);
+
+  // Getters, Setters and Controls
+
+  /**
+   * \brief Get the ack block count
+   * \return The ack block count for this QuicSubheader
+   */
+  uint32_t GetAckBlockCount () const;
+
+  /**
+   * \brief Set the ack block count
+   * \param ackBlockCount the ack block count for this QuicSubheader
+   */
+  void SetAckBlockCount (uint32_t ackBlockCount);
+
+  /**
+   * \brief Get the additional ack block vector
+   * \return The additional ack block vector for this QuicSubheader
+   */
+  const std::vector<uint32_t>& GetAdditionalAckBlocks () const;
+
+  /**
+   * \brief Set the additional ack block vector
+   * \param ackBlocks the additional ack block vector for this QuicSubheader
+   */
+  void SetAdditionalAckBlocks (const std::vector<uint32_t>& ackBlocks);
+
+  /**
+   * \brief Get the ack delay
+   * \return The ack delay for this QuicSubheader
+   */
+  uint64_t GetAckDelay () const;
+
+  /**
+   * \brief Set the ack delay
+   * \param ackDelay the ack delay for this QuicSubheader
+   */
+  void SetAckDelay (uint64_t ackDelay);
+
+  /**
+   * \brief Get the connection id
+   * \return The connection id for this QuicSubheader
+   */
+  uint64_t GetConnectionId () const;
+
+  /**
+   * \brief Set the connection id
+   * \param connectionId the connection id for this QuicSubheader
+   */
+  void SetConnectionId (uint64_t connectionId);
+
+  /**
+   * \brief Get the data word
+   * \return The data word for this QuicSubheader
+   */
+  uint8_t GetData () const;
+
+  /**
+   * \brief Set the data word
+   * \param data the data word for this QuicSubheader
+   */
+  void SetData (uint8_t data);
+
+  /**
+   * \brief Get the error code
+   * \return The data word for this QuicSubheader
+   */
+  uint16_t GetErrorCode () const;
+
+  /**
+   * \brief Set the error code
+   * \param errorCode the error code for this QuicSubheader
+   */
+  void SetErrorCode (uint16_t errorCode);
+
+  /**
+   * \brief Get the frame type
+   * \return The frame type for this QuicSubheader
+   */
+  uint8_t GetFrameType () const;
+
+  /**
+   * \brief Set the frame type
+   * \param frameType the frame type for this QuicSubheader
+   */
+  void SetFrameType (uint8_t frameType);
+
+  /**
+   * \brief Get the gap vector
+   * \return The gap vector for this QuicSubheader
+   */
+  const std::vector<uint32_t>& GetGaps () const;
+
+  /**
+   * \brief Set the gap vector
+   * \param gaps the gap for this QuicSubheader
+   */
+  void SetGaps (const std::vector<uint32_t>& gaps);
+
+  /**
+   * \brief Get the largest acknowledged
+   * \return The largest acknowledged for this QuicSubheader
+   */
+  uint32_t GetLargestAcknowledged () const;
+
+  /**
+   * \brief Set the largest acknowledged
+   * \param largestAcknowledged the largest acknowledged for this QuicSubheader
+   */
+  void SetLargestAcknowledged (uint32_t largestAcknowledged);
+
+  /**
+   * \brief Get the length
+   * \return The length for this QuicSubheader
+   */
+  uint64_t GetLength () const;
+
+  /**
+   * \brief Set the length
+   * \param length the length for this QuicSubheader
+   */
+  void SetLength (uint64_t length);
+
+  /**
+   * \brief Get the max data
+   * \return The max data for this QuicSubheader
+   */
+  uint64_t GetMaxData () const;
+
+  /**
+   * \brief Set the max data
+   * \param maxData the max data for this QuicSubheader
+   */
+  void SetMaxData (uint64_t maxData);
+
+  /**
+   * \brief Get the max stream data
+   * \return The max stream data for this QuicSubheader
+   */
+  uint64_t GetMaxStreamData () const;
+
+  /**
+   * \brief Set the max stream data
+   * \param maxStreamData the max stream data for this QuicSubheader
+   */
+  void SetMaxStreamData (uint64_t maxStreamData);
+
+  /**
+   * \brief Get the max stream id
+   * \return The max stream id for this QuicSubheader
+   */
+  uint64_t GetMaxStreamId () const;
+
+  /**
+   * \brief Set the max stream id
+   * \param maxStreamId the max stream id for this QuicSubheader
+   */
+  void SetMaxStreamId (uint64_t maxStreamId);
+
+  /**
+   * \brief Get the offset
+   * \return The offset for this QuicSubheader
+   */
+  uint64_t GetOffset () const;
+
+  /**
+   * \brief Set the offset
+   * \param offset the offset for this QuicSubheader
+   */
+  void SetOffset (uint64_t offset);
+
+  /**
+   * \brief Get the reason phrase vector
+   * \return The reason phrase vector for this QuicSubheader
+   */
+  const std::vector<uint8_t>& GetReasonPhrase () const;
+
+  /**
+   * \brief Set the reason phrase vector
+   * \param reasonPhrase the reason phrase vector for this QuicSubheader
+   */
+  void SetReasonPhrase (const std::vector<uint8_t>& reasonPhrase);
+
+  /**
+   * \brief Get the reason phrase length
+   * \return The reason phrase length for this QuicSubheader
+   */
+  uint64_t GetReasonPhraseLength () const;
+
+  /**
+   * \brief Set the reason phrase length
+   * \param reasonPhraseLength the reason phrase length for this QuicSubheader
+   */
+  void SetReasonPhraseLength (uint64_t reasonPhraseLength);
+
+  /**
+   * \brief Get the sequence
+   * \return The sequence for this QuicSubheader
+   */
+  uint64_t GetSequence () const;
+
+  /**
+   * \brief Set the sequence
+   * \param sequence the sequence for this QuicSubheader
+   */
+  void SetSequence (uint64_t sequence);
+
+  /**
+   * \brief Get the stream Id
+   * \return The stream Id for this QuicSubheader
+   */
+  uint64_t GetStreamId () const;
+
+  /**
+   * \brief Set the stream Id
+   * \param streamId the stream Id for this QuicSubheader
+   */
+  void SetStreamId (uint64_t streamId);
+
+  /**
+   * \brief Get the first ack block
+   * \return The first ack block for this QuicSubheader
+   */
+  uint64_t GetFirstAckBlock () const;
+
+  /**
+   * \brief Set the first ack block
+   * \param firstAckBlock the first ack block for this QuicSubheader
+   */
+  void SetFirstAckBlock (uint64_t firstAckBlock);
+
+  // TODO: Implement Stateless Reset Token functionality
+  // uint128_t getStatelessResetToken() const;
+  // void SetStatelessResetToken(uint128_t statelessResetToken);
+
+  /**
+   * \brief Check if the subheader is Padding
+   * \return true if the subheader is Padding, false otherwise
+   */
+  bool IsPadding () const;
+
+  /**
+   * \brief Check if the subheader is Rst Stream
+   * \return true if the subheader is Rst Stream, false otherwise
+   */
+  bool IsRstStream () const;
+
+  /**
+   * \brief Check if the subheader is Connection Close
+   * \return true if the subheader is Connection Close, false otherwise
+   */
+  bool IsConnectionClose () const;
+
+  /**
+   * \brief Check if the subheader is Application Close
+   * \return true if the subheader is Application Close, false otherwise
+   */
+  bool IsApplicationClose () const;
+
+  /**
+   * \brief Check if the subheader is Max Data
+   * \return true if the subheader is Max Data, false otherwise
+   */
+  bool IsMaxData () const;
+
+  /**
+   * \brief Check if the subheader is Max Stream Data
+   * \return true if the subheader is Max Stream Data, false otherwise
+   */
+  bool IsMaxStreamData () const;
+
+  /**
+   * \brief Check if the subheader is Max Stream Id
+   * \return true if the subheader is Max Stream Id, false otherwise
+   */
+  bool IsMaxStreamId () const;
+
+  /**
+   * \brief Check if the subheader is Ping
+   * \return true if the subheader is Ping, false otherwise
+   */
+  bool IsPing () const;
+
+  /**
+   * \brief Check if the subheader is Blocked
+   * \return true if the subheader is Blocked, false otherwise
+   */
+  bool IsBlocked () const;
+
+  /**
+   * \brief Check if the subheader is Stream Blocked
+   * \return true if the subheader is Stream Blocked, false otherwise
+   */
+  bool IsStreamBlocked () const;
+
+  /**
+   * \brief Check if the subheader is Stream Id Blocked
+   * \return true if the subheader is Stream Id Blocked, false otherwise
+   */
+  bool IsStreamIdBlocked () const;
+
+  /**
+   * \brief Check if the subheader is New Connection Id
+   * \return true if the subheader is New Connection Id, false otherwise
+   */
+  bool IsNewConnectionId () const;
+
+  /**
+   * \brief Check if the subheader is Stop Sending
+   * \return true if the subheader is Stop Sending, false otherwise
+   */
+  bool IsStopSending () const;
+
+  /**
+   * \brief Check if the subheader is Ack
+   * \return true if the subheader is Ack, false otherwise
+   */
+  bool IsAck () const;
+
+  /**
+   * \brief Check if the subheader is Path Challenge
+   * \return true if the subheader is Path Challenge, false otherwise
+   */
+  bool IsPathChallenge () const;
+
+  /**
+   * \brief Check if the subheader is Path Response
+   * \return true if the subheader is Path Response, false otherwise
+   */
+  bool IsPathResponse () const;
+
+  /**
+   * \brief Check if the subheader is Stream
+   * \return true if the subheader is Stream, false otherwise
+   */
+  bool IsStream () const;
+
+  /**
+   * \brief Check if the subheader is Stream and the FIN bit is true
+   * \return true if the subheader is Stream and the FIN bit is true, false otherwise
+   */
+  bool IsStreamFin () const;
+
+  /**
+   * Comparison operator
+   * \param lhs left operand
+   * \param rhs right operand
+   * \return true if the operands are equal
+   */
+  friend bool operator== (const QuicSubheader &lhs, const QuicSubheader &rhs);
+
+  /**
+   * \brief Calculates the subheader length (in words)
+   *
+   * Given the standard size of the subheader, the method checks for options
+   * and calculates the real length (in words).
+   *
+   * \return subheader length in 4-byte words
+   */
+  uint32_t CalculateSubHeaderLength () const;
+
+private:
+  uint8_t m_frameType;                          //!< Frame type
+  uint64_t m_streamId;                          //!< Stream id
+  uint16_t m_errorCode;                         //!< Error code
+  uint64_t m_offset;                            //!< Offset
+  uint64_t m_reasonPhraseLength;                //!< Reason phrase length
+  std::vector<uint8_t> m_reasonPhrase;          //!< Reason phrase
+  uint64_t m_maxData;                           //!< Max data limit
+  uint64_t m_maxStreamData;                     //!< Max stream data limit
+  uint64_t m_maxStreamId;                       //!< Max stream id limit
+  uint64_t m_sequence;                          //!< Sequence
+  uint64_t m_connectionId;                      //!< Connection id
+  //uint128_t statelessResetToken;              //!< Stateless reset token
+  uint32_t m_largestAcknowledged;               //!< Largest acknowledged
+  uint32_t m_ackDelay;                          //!< Ack delay
+  uint32_t m_ackBlockCount;                     //!< Ack block count
+  uint32_t m_firstAckBlock;                     //!< First Ack block
+  std::vector<uint32_t> m_additionalAckBlocks;  //!< Additional ack blocks vector
+  std::vector<uint32_t> m_gaps;                 //!< Gaps vector
+  uint8_t m_data;                               //!< Data word
+  uint64_t m_length;                            //!< Length
+};
+
+} // namespace ns3
+
+#endif /* QUIC_SUBHEADER_H_ */
diff --git a/src/quic/model/quic-transport-parameters.cc b/src/quic/model/quic-transport-parameters.cc
new file mode 100644
index 000000000..159616f91
--- /dev/null
+++ b/src/quic/model/quic-transport-parameters.cc
@@ -0,0 +1,272 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *
+ */
+
+#include <stdint.h>
+#include <iostream>
+#include "quic-transport-parameters.h"
+#include "ns3/buffer.h"
+#include "ns3/address-utils.h"
+#include "ns3/log.h"
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("QuicTransportParameters");
+
+NS_OBJECT_ENSURE_REGISTERED (QuicTransportParameters);
+
+QuicTransportParameters::QuicTransportParameters ()
+  : m_initial_max_stream_data (0),
+  m_initial_max_data (0),
+  m_initial_max_stream_id_bidi (0),
+  m_idleTimeout (300),
+  m_omit_connection (false),
+  m_max_packet_size (65527),
+  //m_stateless_reset_token(0),
+  m_ack_delay_exponent (3),
+  m_initial_max_stream_id_uni (0)
+{
+}
+
+
+QuicTransportParameters::~QuicTransportParameters ()
+{
+}
+
+TypeId
+QuicTransportParameters::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicTransportParameters")
+    .SetParent<Header> ()
+    .SetGroupName ("Internet")
+    .AddConstructor<QuicTransportParameters> ()
+  ;
+  return tid;
+}
+
+TypeId
+QuicTransportParameters::GetInstanceTypeId (void) const
+{
+  return GetTypeId ();
+}
+
+uint32_t
+QuicTransportParameters::GetSerializedSize (void) const
+{
+  uint32_t serializesSize = CalculateHeaderLength ();
+  NS_LOG_INFO ("Serialized Size " << serializesSize);
+
+  return serializesSize;
+}
+
+uint32_t
+QuicTransportParameters::CalculateHeaderLength () const
+{
+  uint32_t len = 32 * 4 + 16 * 2 + 8 * 2;
+
+  return len / 8;
+}
+
+
+void
+QuicTransportParameters::Serialize (Buffer::Iterator start) const
+{
+  NS_LOG_FUNCTION (this);
+  NS_LOG_INFO ("Serialize::Serialized Size " << CalculateHeaderLength ());
+
+  Buffer::Iterator i = start;
+
+  i.WriteHtonU32 (m_initial_max_stream_data);
+  i.WriteHtonU32 (m_initial_max_data);
+  i.WriteHtonU32 (m_initial_max_stream_id_bidi);
+  i.WriteHtonU16 (m_idleTimeout);
+  i.WriteU8 (m_omit_connection);
+  i.WriteHtonU16 (m_max_packet_size);
+  //i.WriteHtonU128(m_stateless_reset_token);
+  i.WriteU8 (m_ack_delay_exponent);
+  i.WriteHtonU32 (m_initial_max_stream_id_uni);
+
+}
+
+uint32_t
+QuicTransportParameters::Deserialize (Buffer::Iterator start)
+{
+  NS_LOG_FUNCTION (this);
+
+  Buffer::Iterator i = start;
+
+  m_initial_max_stream_data = i.ReadNtohU32 ();
+  m_initial_max_data = i.ReadNtohU32 ();
+  m_initial_max_stream_id_bidi = i.ReadNtohU32 ();
+  m_idleTimeout = i.ReadNtohU16 ();
+  m_omit_connection = i.ReadU8 ();
+  m_max_packet_size = i.ReadNtohU16 ();
+  //m_stateless_reset_token = i.ReadNtohU128();
+  m_ack_delay_exponent = i.ReadU8 ();
+  m_initial_max_stream_id_uni = i.ReadNtohU32 ();
+
+  NS_LOG_INFO ("Deserialize::Serialized Size " << CalculateHeaderLength ());
+
+  return GetSerializedSize ();
+}
+
+void
+QuicTransportParameters::Print (std::ostream &os) const
+{
+  os << "[initial_max_stream_data " << m_initial_max_stream_data << "|\n";
+  os << "|initial_max_data " << m_initial_max_data << "|\n";
+  os << "|initial_max_stream_id_bidi " << m_initial_max_stream_id_bidi << "|\n";
+  os << "|idleTimeout " << m_idleTimeout << "|\n";
+  os << "|omit_connection " << (uint16_t)m_omit_connection << "|\n";
+  os << "|max_packet_size " << m_max_packet_size << "|\n";
+  //os << "|stateless_reset_token " << m_stateless_reset_token << "|\n";
+  os << "|ack_delay_exponent " << (uint16_t)m_ack_delay_exponent << "|\n";
+  os << "|initial_max_stream_id_uni " << m_initial_max_stream_id_uni << "]\n";
+}
+
+QuicTransportParameters
+QuicTransportParameters::CreateTransportParameters (uint32_t initial_max_stream_data, uint32_t initial_max_data, uint32_t initial_max_stream_id_bidi, uint16_t idleTimeout,
+                                                    uint8_t omit_connection, uint16_t max_packet_size, /*uint128_t stateless_reset_token,*/ uint8_t ack_delay_exponent, uint32_t initial_max_stream_id_uni)
+{
+  NS_LOG_INFO ("Create Transport Parameters Helper called");
+
+  QuicTransportParameters transport;
+  transport.SetInitialMaxStreamData (initial_max_stream_data);
+  transport.SetInitialMaxData (initial_max_data);
+  transport.SetInitialMaxStreamIdBidi (initial_max_stream_id_bidi);
+  transport.SetIdleTimeout (idleTimeout);
+  transport.SetOmitConnection (omit_connection);
+  transport.SetMaxPacketSize (max_packet_size);
+  //transport.SetStatelessResetToken(stateless_reset_token);
+  transport.SetAckDelayExponent (ack_delay_exponent);
+  transport.SetInitialMaxStreamIdUni (initial_max_stream_id_uni);
+
+  return transport;
+}
+
+
+bool
+operator== (const QuicTransportParameters &lhs, const QuicTransportParameters &rhs)
+{
+  return (
+    lhs.m_initial_max_stream_data == rhs.m_initial_max_stream_data
+    && lhs.m_initial_max_data == rhs.m_initial_max_data
+    && lhs.m_initial_max_stream_id_bidi  == rhs.m_initial_max_stream_id_bidi
+    && lhs.m_idleTimeout == rhs.m_idleTimeout
+    && lhs.m_omit_connection == rhs.m_omit_connection
+    && lhs.m_max_packet_size == rhs.m_max_packet_size
+    //&& lhs.m_stateless_reset_token == rhs.m_stateless_reset_token
+    && lhs.m_ack_delay_exponent == rhs.m_ack_delay_exponent
+    && lhs.m_initial_max_stream_id_uni == rhs.m_initial_max_stream_id_uni
+    );
+}
+
+std::ostream&
+operator<< (std::ostream& os, QuicTransportParameters& tc)
+{
+  tc.Print (os);
+  return os;
+}
+
+uint8_t QuicTransportParameters::GetAckDelayExponent () const
+{
+  return m_ack_delay_exponent;
+}
+
+void QuicTransportParameters::SetAckDelayExponent (uint8_t ackDelayExponent)
+{
+  m_ack_delay_exponent = ackDelayExponent;
+}
+
+uint16_t QuicTransportParameters::GetIdleTimeout () const
+{
+  return m_idleTimeout;
+}
+
+void QuicTransportParameters::SetIdleTimeout (uint16_t idleTimeout)
+{
+  m_idleTimeout = idleTimeout;
+}
+
+uint32_t QuicTransportParameters::GetInitialMaxData () const
+{
+  return m_initial_max_data;
+}
+
+void QuicTransportParameters::SetInitialMaxData (uint32_t initialMaxData)
+{
+  m_initial_max_data = initialMaxData;
+}
+
+uint32_t QuicTransportParameters::GetInitialMaxStreamData () const
+{
+  return m_initial_max_stream_data;
+}
+
+void QuicTransportParameters::SetInitialMaxStreamData (uint32_t initialMaxStreamData)
+{
+  m_initial_max_stream_data = initialMaxStreamData;
+}
+
+uint32_t QuicTransportParameters::GetInitialMaxStreamIdBidi () const
+{
+  return m_initial_max_stream_id_bidi;
+}
+
+void QuicTransportParameters::SetInitialMaxStreamIdBidi (uint32_t initialMaxStreamIdBidi)
+{
+  m_initial_max_stream_id_bidi = initialMaxStreamIdBidi;
+}
+
+uint32_t QuicTransportParameters::GetInitialMaxStreamIdUni () const
+{
+  return m_initial_max_stream_id_uni;
+}
+
+void QuicTransportParameters::SetInitialMaxStreamIdUni (uint32_t initialMaxStreamIdUni)
+{
+  m_initial_max_stream_id_uni = initialMaxStreamIdUni;
+}
+
+uint16_t QuicTransportParameters::GetMaxPacketSize () const
+{
+  return m_max_packet_size;
+}
+
+void QuicTransportParameters::SetMaxPacketSize (uint16_t maxPacketSize)
+{
+  m_max_packet_size = maxPacketSize;
+}
+
+uint8_t QuicTransportParameters::GetOmitConnection () const
+{
+  return m_omit_connection;
+}
+
+void QuicTransportParameters::SetOmitConnection (uint8_t omitConnection)
+{
+  m_omit_connection = omitConnection;
+}
+
+} // namespace ns3
+
diff --git a/src/quic/model/quic-transport-parameters.h b/src/quic/model/quic-transport-parameters.h
new file mode 100644
index 000000000..f8cfb614f
--- /dev/null
+++ b/src/quic/model/quic-transport-parameters.h
@@ -0,0 +1,228 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *
+ */
+
+#ifndef QUICTRANSPORTPARAMETERS_H
+#define QUICTRANSPORTPARAMETERS_H
+
+#include <stdint.h>
+#include "ns3/header.h"
+#include "ns3/buffer.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/ipv6-address.h"
+#include "ns3/sequence-number.h"
+
+namespace ns3 {
+
+/**
+ * \ingroup quic
+ * \brief Transport Parameters for the QUIC Protocol
+ *
+ * This class has fields corresponding to those in QUIC Transport Parameters
+ * as well as methods for serialization to and deserialization from a buffer.
+ *
+ * Transport Parameters [Quic IETF Draft 13 Transport - sec. 6.6]
+ * --------------------------------------------------------------
+ *
+ * During connection establishment, both endpoints make authenticated
+ * declarations of their transport parameters. These declarations are
+ * made unilaterally by each endpoint. Endpoints are required to comply
+ * of with the restrictions implied by these parameters; the description
+ * each parameter includes rules for its handling. QUIC encodes
+ * transport parameters into a sequence of octets, which are then
+ * included in the cryptographic handshake. Once the handshake
+ * completes, the transport parameters declared by the peer are
+ * available. Each endpoint validates the value provided by its peer.
+ *
+ */
+class QuicTransportParameters : public Header
+{
+public:
+  QuicTransportParameters ();
+  virtual ~QuicTransportParameters ();
+
+  // Inherited from Header
+  static TypeId GetTypeId (void);
+  virtual TypeId GetInstanceTypeId (void) const;
+  virtual void Print (std::ostream &os) const;
+  virtual uint32_t GetSerializedSize (void) const;
+  virtual void Serialize (Buffer::Iterator start) const;
+  virtual uint32_t Deserialize (Buffer::Iterator start);
+
+  /**
+   * \brief Print Quic Transport Parameters into an output stream
+   *
+   * \param os output stream
+   * \param tc Quic Transport Parameters to print
+   * \return The ostream passed as first argument
+   */
+  friend std ::ostream& operator<< (std::ostream& os, QuicTransportParameters & tc);
+
+  /**
+   * Create the Transport Parameters block
+   *
+   * \param initial_max_stream_data the initial value for the maximum data that can be sent on any newly created stream
+   * \param initial_max_data the initial value for the maximum amount of data that can be sent on the connection
+   * \param initial_max_stream_id_bidi the the initial maximum number of application-owned bidirectional streams the peer may initiate
+   * \param idleTimeout the idle timeout value in seconds
+   * \param omit_connection the flag that indicates if the connection id is required in the upcoming connection
+   * \param max_packet_size the limit on the size of packets that the endpoint is willing to receive
+   * \param stateless_reset_token the stateless reset token
+   * \param ack_delay_exponent the exponent used to decode the ack delay field in the ACK frame
+   * \param initial_max_stream_id_uni the initial maximum number of application-owned unidirectional streams the peer may initiate
+   * \return the generated QuicTransportParameters
+   */
+  static QuicTransportParameters CreateTransportParameters (uint32_t initial_max_stream_data, uint32_t initial_max_data, uint32_t initial_max_stream_id_bidi, uint16_t idleTimeout,
+                                                            uint8_t omit_connection, uint16_t max_packet_size, /*uint128_t stateless_reset_token,*/ uint8_t ack_delay_exponent, uint32_t initial_max_stream_id_uni);
+
+  // Getters, Setters and Controls
+
+  /**
+   * \brief Get the ack delay exponent
+   * \return The ack delay exponent for this QuicTransportParameters
+   */
+  uint8_t GetAckDelayExponent () const;
+
+  /**
+   * \brief Set the ack delay exponent
+   * \param ackDelayExponent the ack delay exponent for this QuicTransportParameters
+   */
+  void SetAckDelayExponent (uint8_t ackDelayExponent);
+
+  /**
+   * \brief Get the idle timeout
+   * \return The idle timeout for this QuicTransportParameters
+   */
+  uint16_t GetIdleTimeout () const;
+
+  /**
+   * \brief Set the idle timeout
+   * \param idleTimeout the idle timeout for this QuicTransportParameters
+   */
+  void SetIdleTimeout (uint16_t idleTimeout);
+
+  /**
+   * \brief Get the initial max data limit
+   * \return The initial max data limit for this QuicTransportParameters
+   */
+  uint32_t GetInitialMaxData () const;
+
+  /**
+   * \brief Set the initial max data limit
+   * \param initialMaxData the initial max data limit for this QuicTransportParameters
+   */
+  void SetInitialMaxData (uint32_t initialMaxData);
+
+  /**
+   * \brief Get the initial max stream data limit
+   * \return The initial max stream data limit for this QuicTransportParameters
+   */
+  uint32_t GetInitialMaxStreamData () const;
+
+  /**
+   * \brief Set the initial max stream data limit
+   * \param initialMaxStreamData the initial max stream data limit for this QuicTransportParameters
+   */
+  void SetInitialMaxStreamData (uint32_t initialMaxStreamData);
+
+  /**
+   * \brief Get the initial max bidirectional stream id limit
+   * \return The initial max bidirectional stream id limit for this QuicTransportParameters
+   */
+  uint32_t GetInitialMaxStreamIdBidi () const;
+
+  /**
+   * \brief Set the initial max bidirectional stream id limit
+   * \param initialMaxStreamIdBidi the initial max bidirectional stream id limit for this QuicTransportParameters
+   */
+  void SetInitialMaxStreamIdBidi (uint32_t initialMaxStreamIdBidi);
+
+  /**
+   * \brief Get the initial max unidirectional stream id limit
+   * \return The initial max unidirectional stream id limit for this QuicTransportParameters
+   */
+  uint32_t GetInitialMaxStreamIdUni () const;
+
+  /**
+   * \brief Set the initial max unidirectional stream id limit
+   * \param initialMaxStreamIdUni the initial max unidirectional stream id limit for this QuicTransportParameters
+   */
+  void SetInitialMaxStreamIdUni (uint32_t initialMaxStreamIdUni);
+
+  /**
+   * \brief Get the max packet size limit
+   * \return The max packet size limit for this QuicTransportParameters
+   */
+  uint16_t GetMaxPacketSize () const;
+
+  /**
+   * \brief Set the max packet size limit
+   * \param maxPacketSize the max packet size limit for this QuicTransportParameters
+   */
+  void SetMaxPacketSize (uint16_t maxPacketSize);
+
+  /**
+   * \brief Get the omit connection id flag
+   * \return The omit connection id flag for this QuicTransportParameters
+   */
+  uint8_t GetOmitConnection () const;
+
+  /**
+   * \brief Set the omit connection id flag
+   * \param omitConnection the omit connection id flag for this QuicTransportParameters
+   */
+  void SetOmitConnection (uint8_t omitConnection);
+
+  /**
+   * Comparison operator
+   * \param lhs left operand
+   * \param rhs right operand
+   * \return true if the operands are equal
+   */
+  friend bool operator== (const QuicTransportParameters &lhs, const QuicTransportParameters &rhs);
+
+private:
+  /**
+   * \brief Calculates the Transpor Parameters block length (in words)
+   *
+   * Given the standard size of the Transport Parameters block, the method checks for options
+   * and calculates the real length (in words).
+   *
+   * \return Transpor Parameters block length in 4-byte words
+   */
+  uint32_t CalculateHeaderLength () const;
+
+  uint32_t m_initial_max_stream_data;     //!< The initial value for the maximum data that can be sent on any newly created stream
+  uint32_t m_initial_max_data;            //!< The initial value for the maximum amount of data that can be sent on the connection
+  uint32_t m_initial_max_stream_id_bidi;  //!< The the initial maximum number of application-owned bidirectional streams the peer may initiate
+  uint16_t m_idleTimeout;                 //!< The idle timeout value in seconds
+  uint8_t m_omit_connection;              //!< The flag that indicates if the connection id is required in the upcoming connection
+  uint16_t m_max_packet_size;             //!< The limit on the size of packets that the endpoint is willing to receive
+  //uint128_t m_stateless_reset_token;    //!< The stateless reset token
+  uint8_t m_ack_delay_exponent;           //!< The exponent used to decode the ack delay field in the ACK frame
+  uint32_t m_initial_max_stream_id_uni;   //!< The initial maximum number of application-owned unidirectional streams the peer may initiate
+};
+
+} // namespace ns3
+
+#endif /* QUIC_TRANSPORT_PARAMETERS_H_ */
\ No newline at end of file
diff --git a/src/quic/model/windowed-filter.h b/src/quic/model/windowed-filter.h
new file mode 100644
index 000000000..52dfd32c0
--- /dev/null
+++ b/src/quic/model/windowed-filter.h
@@ -0,0 +1,238 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ *  Copyright (c) 2016 The Chromium Authors. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ *    * Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ *    * Redistributions in binary form must reproduce the above
+ * copyright notice, this list of conditions and the following disclaimer
+ * in the documentation and/or other materials provided with the
+ * distribution.
+ *    * Neither the name of Google Inc. nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/*
+ *  Note: This code is modified to work under ns-3's environment.
+ *  Modified by: Vivek Jain <jain.vivek.anand@gmail.com>
+ *               Viyom Mittal <viyommittal@gmail.com>
+ *               Mohit P. Tahiliani <tahiliani@nitk.edu.in>
+ */
+
+// Implements Kathleen Nichols' algorithm for tracking the minimum (or maximum)
+// estimate of a stream of samples over some fixed time interval. (E.g.,
+// the minimum RTT over the past five minutes.) The algorithm keeps track of
+// the best, second best, and third best min (or max) estimates, maintaining an
+// invariant that the measurement time of the n'th best >= n-1'th best.
+// The algorithm works as follows. On a reset, all three estimates are set to
+// the same sample. The second best estimate is then recorded in the second
+// quarter of the window, and a third best estimate is recorded in the second
+// half of the window, bounding the worst case error when the true min is
+// monotonically increasing (or true max is monotonically decreasing) over the
+// window.
+//
+// A new best sample replaces all three estimates, since the new best is lower
+// (or higher) than everything else in the window and it is the most recent.
+// The window thus effectively gets reset on every new min. The same property
+// holds true for second best and third best estimates. Specifically, when a
+// sample arrives that is better than the second best but not better than the
+// best, it replaces the second and third best estimates but not the best
+// estimate. Similarly, a sample that is better than the third best estimate
+// but not the other estimates replaces only the third best estimate.
+//
+// Finally, when the best expires, it is replaced by the second best, which in
+// turn is replaced by the third best. The newest sample replaces the third
+// best.
+
+#ifndef WINDOWED_FILTER_H_
+#define WINDOWED_FILTER_H_
+
+namespace ns3 {
+// Compares two values and returns true if the first is less than or equal
+// to the second.
+template <class T>
+struct MinFilter
+{
+public:
+  bool operator() (const T& lhs, const T& rhs) const
+  {
+    if (rhs == 0 || lhs == 0)
+      {
+        return false;
+      }
+    return lhs <= rhs;
+  }
+};
+// Compares two values and returns true if the first is greater than or equal
+// to the second.
+template <class T>
+struct MaxFilter
+{
+public:
+  bool operator() (const T& lhs, const T& rhs) const
+  {
+    if (rhs == 0 || lhs == 0)
+      {
+        return false;
+      }
+    return lhs >= rhs;
+  }
+};
+// Use the following to construct a windowed filter object of type T.
+// For example, a min filter using QuicTime as the time type:
+//   WindowedFilter<T, MinFilter<T>, QuicTime, QuicTime::Delta> ObjectName;
+// A max filter using 64-bit integers as the time type:
+//   WindowedFilter<T, MaxFilter<T>, uint64_t, int64_t> ObjectName;
+// Specifically, this template takes four arguments:
+// 1. T -- type of the measurement that is being filtered.
+// 2. Compare -- MinFilter<T> or MaxFilter<T>, depending on the type of filter
+//    desired.
+// 3. TimeT -- the type used to represent timestamps.
+// 4. TimeDeltaT -- the type used to represent continuous time intervals between
+//    two timestamps.  Has to be the type of (a - b) if both |a| and |b| are
+//    of type TimeT.
+template <class T, class Compare, typename TimeT, typename TimeDeltaT>
+class WindowedFilter
+{
+public:
+  WindowedFilter ()
+  {
+  }
+
+  // |windowLength| is the period after which a best estimate expires.
+  // |zeroValue| is used as the uninitialized value for objects of T.
+  // Importantly, |zeroValue| should be an invalid value for a true sample.
+  WindowedFilter (TimeDeltaT windowLength, T zeroValue, TimeT zeroTime)
+    : m_windowLength (windowLength),
+    m_zeroValue (zeroValue),
+    m_samples
+    {
+     Sample (m_zeroValue, zeroTime),
+     Sample (m_zeroValue, zeroTime),
+     Sample (m_zeroValue, zeroTime)
+    }
+  {
+  }
+  // Changes the window length.  Does not update any current samples.
+  void SetWindowLength (TimeDeltaT windowLength)
+  {
+    m_windowLength = windowLength;
+  }
+  // Updates best estimates with |sample|, and expires and updates best
+  // estimates as necessary.
+  void Update (T new_sample, TimeT new_time)
+  {
+    // Reset all estimates if they have not yet been initialized, if new sample
+    // is a new best, or if the newest recorded estimate is too old.
+    if (m_samples[0].sample == m_zeroValue
+        || Compare () (new_sample, m_samples[0].sample)
+        || new_time - m_samples[2].time > m_windowLength)
+      {
+        Reset (new_sample, new_time);
+        return;
+      }
+    if (Compare () (new_sample, m_samples[1].sample))
+      {
+        m_samples[1] = Sample (new_sample, new_time);
+        m_samples[2] = m_samples[1];
+      }
+    else if (Compare () (new_sample, m_samples[2].sample))
+      {
+        m_samples[2] = Sample (new_sample, new_time);
+      }
+    // Expire and update estimates as necessary.
+    if (new_time - m_samples[0].time > m_windowLength)
+      {
+        // The best estimate hasn't been updated for an entire window, so promote
+        // second and third best estimates.
+        m_samples[0] = m_samples[1];
+        m_samples[1] = m_samples[2];
+        m_samples[2] = Sample (new_sample, new_time);
+        // Need to iterate one more time. Check if the new best estimate is
+        // outside the window as well, since it may also have been recorded a
+        // long time ago. Don't need to iterate once more since we cover that
+        // case at the beginning of the method.
+        if (new_time - m_samples[0].time > m_windowLength)
+          {
+            m_samples[0] = m_samples[1];
+            m_samples[1] = m_samples[2];
+          }
+        return;
+      }
+    if (m_samples[1].sample == m_samples[0].sample
+        && new_time - m_samples[1].time > m_windowLength >> 2)
+      {
+        // A quarter of the window has passed without a better sample, so the
+        // second-best estimate is taken from the second quarter of the window.
+        m_samples[2] = m_samples[1] = Sample (new_sample, new_time);
+        return;
+      }
+    if (m_samples[2].sample == m_samples[1].sample
+        && new_time - m_samples[2].time > m_windowLength >> 1)
+      {
+        // We've passed a half of the window without a better estimate, so take
+        // a third-best estimate from the second half of the window.
+        m_samples[2] = Sample (new_sample, new_time);
+      }
+  }
+
+  // Resets all estimates to new sample.
+  void Reset (T new_sample, TimeT new_time)
+  {
+    m_samples[0] = m_samples[1] = m_samples[2] = Sample (new_sample, new_time);
+  }
+
+  T GetBest () const
+  {
+    return m_samples[0].sample;
+  }
+
+  T GetSecondBest () const
+  {
+    return m_samples[1].sample;
+  }
+
+  T GetThirdBest () const
+  {
+    return m_samples[2].sample;
+  }
+
+  struct Sample
+  {
+    T sample;
+    TimeT time;
+    Sample ()
+    {
+    }
+
+    Sample (T init_sample, TimeT init_time)
+      : sample (init_sample),
+      time (init_time)
+    {
+    }
+  };
+
+  TimeDeltaT m_windowLength;    //!< Time length of window.
+  T          m_zeroValue;       //!< Uninitialized value of T.
+  Sample     m_samples[3];      //!< Best estimate is element 0.
+};
+
+}  // namespace ns3
+#endif  // WINDOWED_FILTER_H_
diff --git a/src/quic/quic-applications/helper/quic-client-server-helper.cc b/src/quic/quic-applications/helper/quic-client-server-helper.cc
new file mode 100644
index 000000000..fed7b9887
--- /dev/null
+++ b/src/quic/quic-applications/helper/quic-client-server-helper.cc
@@ -0,0 +1,105 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2008 INRIA
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Mohamed Amine Ismail <amine.ismail@sophia.inria.fr>
+ */
+#include "quic-client-server-helper.h"
+#include "ns3/quic-server.h"
+#include "ns3/quic-client.h"
+#include "ns3/uinteger.h"
+#include "ns3/string.h"
+
+namespace ns3 {
+
+QuicServerHelper::QuicServerHelper ()
+{
+  m_factory.SetTypeId (QuicServer::GetTypeId ());
+}
+
+QuicServerHelper::QuicServerHelper (uint16_t port)
+{
+  m_factory.SetTypeId (QuicServer::GetTypeId ());
+  SetAttribute ("Port", UintegerValue (port));
+}
+
+void
+QuicServerHelper::SetAttribute (std::string name, const AttributeValue &value)
+{
+  m_factory.Set (name, value);
+}
+
+ApplicationContainer
+QuicServerHelper::Install (NodeContainer c)
+{
+  ApplicationContainer apps;
+  for (NodeContainer::Iterator i = c.Begin (); i != c.End (); ++i)
+    {
+      Ptr<Node> node = *i;
+
+      m_server = m_factory.Create<QuicServer> ();
+      node->AddApplication (m_server);
+      apps.Add (m_server);
+
+    }
+  return apps;
+}
+
+Ptr<QuicServer>
+QuicServerHelper::GetServer (void)
+{
+  return m_server;
+}
+
+QuicClientHelper::QuicClientHelper ()
+{
+  m_factory.SetTypeId (QuicClient::GetTypeId ());
+}
+
+QuicClientHelper::QuicClientHelper (Address address, uint16_t port)
+{
+  m_factory.SetTypeId (QuicClient::GetTypeId ());
+  SetAttribute ("RemoteAddress", AddressValue (address));
+  SetAttribute ("RemotePort", UintegerValue (port));
+}
+
+QuicClientHelper::QuicClientHelper (Address address)
+{
+  m_factory.SetTypeId (QuicClient::GetTypeId ());
+  SetAttribute ("RemoteAddress", AddressValue (address));
+}
+
+void
+QuicClientHelper::SetAttribute (std::string name, const AttributeValue &value)
+{
+  m_factory.Set (name, value);
+}
+
+ApplicationContainer
+QuicClientHelper::Install (NodeContainer c)
+{
+  ApplicationContainer apps;
+  for (NodeContainer::Iterator i = c.Begin (); i != c.End (); ++i)
+    {
+      Ptr<Node> node = *i;
+      Ptr<QuicClient> client = m_factory.Create<QuicClient> ();
+      node->AddApplication (client);
+      apps.Add (client);
+    }
+  return apps;
+}
+
+} // namespace ns3
diff --git a/src/quic/quic-applications/helper/quic-client-server-helper.h b/src/quic/quic-applications/helper/quic-client-server-helper.h
new file mode 100644
index 000000000..f5a807db0
--- /dev/null
+++ b/src/quic/quic-applications/helper/quic-client-server-helper.h
@@ -0,0 +1,150 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2008 INRIA
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Mohamed Amine Ismail <amine.ismail@sophia.inria.fr>
+ */
+#ifndef QUIC_CLIENT_SERVER_HELPER_H
+#define QUIC_CLIENT_SERVER_HELPER_H
+
+#include <stdint.h>
+#include "ns3/application-container.h"
+#include "ns3/node-container.h"
+#include "ns3/object-factory.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/quic-server.h"
+#include "ns3/quic-client.h"
+namespace ns3 {
+/**
+ * \ingroup quicclientserver
+ * \brief Create a server application which waits for input QUIC packets
+ *        and uses the information carried into their payload to compute
+ *        delay and to determine if some packets are lost.
+ */
+class QuicServerHelper
+{
+public:
+  /**
+   * Create QuicServerHelper which will make life easier for people trying
+   * to set up simulations with quic-client-server application.
+   *
+   */
+  QuicServerHelper ();
+
+  /**
+   * Create QuicServerHelper which will make life easier for people trying
+   * to set up simulations with quic-client-server application.
+   *
+   * \param port The port the server will wait on for incoming packets
+   */
+  QuicServerHelper (uint16_t port);
+
+  /**
+   * Record an attribute to be set in each Application after it is is created.
+   *
+   * \param name the name of the attribute to set
+   * \param value the value of the attribute to set
+   */
+  void SetAttribute (std::string name, const AttributeValue &value);
+
+  /**
+   * Create one QUIC server application on each of the Nodes in the
+   * NodeContainer.
+   *
+   * \param c The nodes on which to create the Applications.  The nodes
+   *          are specified by a NodeContainer.
+   * \returns The applications created, one Application per Node in the
+   *          NodeContainer.
+   */
+  ApplicationContainer Install (NodeContainer c);
+
+  /**
+   * \brief Return the last created server.
+   *
+   * This function is mainly used for testing.
+   *
+   * \returns a Ptr to the last created server application
+   */
+  Ptr<QuicServer> GetServer (void);
+
+private:
+  ObjectFactory m_factory; //!< Object factory.
+  Ptr<QuicServer> m_server; //!< The last created server application
+};
+
+/**
+ * \ingroup quicclientserver
+ * \brief Create a client application which sends QUIC packets carrying
+ *  a 32bit sequence number and a 64 bit time stamp.
+ *
+ */
+class QuicClientHelper
+{
+
+public:
+  /**
+   * Create QuicClientHelper which will make life easier for people trying
+   * to set up simulations with quic-client-server.
+   *
+   */
+  QuicClientHelper ();
+
+  /**
+   *  Create QuicClientHelper which will make life easier for people trying
+   * to set up simulations with quic-client-server. Use this variant with
+   * addresses that do not include a port value (e.g., Ipv4Address and
+   * Ipv6Address).
+   *
+   * \param ip The IP address of the remote QUIC server
+   * \param port The port number of the remote QUIC server
+   */
+
+  QuicClientHelper (Address ip, uint16_t port);
+  /**
+   *  Create QuicClientHelper which will make life easier for people trying
+   * to set up simulations with quic-client-server. Use this variant with
+   * addresses that do include a port value (e.g., InetSocketAddress and
+   * Inet6SocketAddress).
+   *
+   * \param addr The address of the remote QUIC server
+   */
+
+  QuicClientHelper (Address addr);
+
+  /**
+   * Record an attribute to be set in each Application after it is is created.
+   *
+   * \param name the name of the attribute to set
+   * \param value the value of the attribute to set
+   */
+  void SetAttribute (std::string name, const AttributeValue &value);
+
+  /**
+     * \param c the nodes
+     *
+     * Create one QUIC client application on each of the input nodes
+     *
+     * \returns the applications created, one application per input node.
+     */
+  ApplicationContainer Install (NodeContainer c);
+
+private:
+  ObjectFactory m_factory; //!< Object factory.
+};
+
+} // namespace ns3
+
+#endif /* QUIC_CLIENT_SERVER_H */
diff --git a/src/quic/quic-applications/helper/quic-echo-helper.cc b/src/quic/quic-applications/helper/quic-echo-helper.cc
new file mode 100644
index 000000000..421a8105f
--- /dev/null
+++ b/src/quic/quic-applications/helper/quic-echo-helper.cc
@@ -0,0 +1,154 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Davide Marcato <davide.marcato.4@studenti.unipd.it>
+ *          Stefano Ravazzolo <stefano.ravazzolo@studenti.unipd.it>
+ *          Alvise De Biasio <alvise.debiasio@studenti.unipd.it>
+ */
+
+#include "quic-echo-helper.h"
+#include "ns3/quic-echo-server.h"
+#include "ns3/quic-echo-client.h"
+#include "ns3/uinteger.h"
+#include "ns3/names.h"
+#include "ns3/log.h"
+
+NS_LOG_COMPONENT_DEFINE ("QuicEchoHelper");
+
+namespace ns3 {
+
+QuicEchoServerHelper::QuicEchoServerHelper (uint16_t port)
+{
+  m_factory.SetTypeId (QuicEchoServer::GetTypeId ());
+  SetAttribute ("Port", UintegerValue (port));
+}
+
+void
+QuicEchoServerHelper::SetAttribute (
+  std::string name,
+  const AttributeValue &value)
+{
+  m_factory.Set (name, value);
+}
+
+ApplicationContainer
+QuicEchoServerHelper::Install (Ptr<Node> node) const
+{
+  return ApplicationContainer (InstallPriv (node));
+}
+
+ApplicationContainer
+QuicEchoServerHelper::Install (std::string nodeName) const
+{
+  Ptr<Node> node = Names::Find<Node> (nodeName);
+  return ApplicationContainer (InstallPriv (node));
+}
+
+ApplicationContainer
+QuicEchoServerHelper::Install (NodeContainer c) const
+{
+  ApplicationContainer apps;
+  for (NodeContainer::Iterator i = c.Begin (); i != c.End (); ++i)
+    {
+      apps.Add (InstallPriv (*i));
+    }
+
+  return apps;
+}
+
+Ptr<Application>
+QuicEchoServerHelper::InstallPriv (Ptr<Node> node) const
+{
+
+  Ptr<Application> app = m_factory.Create<QuicEchoServer> ();
+  node->AddApplication (app);
+  NS_LOG_INFO ("Installing app " << app << " in node " << node);
+  return app;
+}
+
+QuicEchoClientHelper::QuicEchoClientHelper (Address address, uint16_t port)
+{
+  m_factory.SetTypeId (QuicEchoClient::GetTypeId ());
+  SetAttribute ("RemoteAddress", AddressValue (address));
+  SetAttribute ("RemotePort", UintegerValue (port));
+}
+
+QuicEchoClientHelper::QuicEchoClientHelper (Address address)
+{
+  m_factory.SetTypeId (QuicEchoClient::GetTypeId ());
+  SetAttribute ("RemoteAddress", AddressValue (address));
+}
+
+void
+QuicEchoClientHelper::SetAttribute (
+  std::string name,
+  const AttributeValue &value)
+{
+  m_factory.Set (name, value);
+}
+
+void
+QuicEchoClientHelper::SetFill (Ptr<Application> app, std::string fill)
+{
+  app->GetObject<QuicEchoClient>()->SetFill (fill);
+}
+
+void
+QuicEchoClientHelper::SetFill (Ptr<Application> app, uint8_t fill, uint32_t dataLength)
+{
+  app->GetObject<QuicEchoClient>()->SetFill (fill, dataLength);
+}
+
+void
+QuicEchoClientHelper::SetFill (Ptr<Application> app, uint8_t *fill, uint32_t fillLength, uint32_t dataLength)
+{
+  app->GetObject<QuicEchoClient>()->SetFill (fill, fillLength, dataLength);
+}
+
+ApplicationContainer
+QuicEchoClientHelper::Install (Ptr<Node> node) const
+{
+  return ApplicationContainer (InstallPriv (node));
+}
+
+ApplicationContainer
+QuicEchoClientHelper::Install (std::string nodeName) const
+{
+  Ptr<Node> node = Names::Find<Node> (nodeName);
+  return ApplicationContainer (InstallPriv (node));
+}
+
+ApplicationContainer
+QuicEchoClientHelper::Install (NodeContainer c) const
+{
+  ApplicationContainer apps;
+  for (NodeContainer::Iterator i = c.Begin (); i != c.End (); ++i)
+    {
+      apps.Add (InstallPriv (*i));
+    }
+
+  return apps;
+}
+
+Ptr<Application>
+QuicEchoClientHelper::InstallPriv (Ptr<Node> node) const
+{
+  Ptr<Application> app = m_factory.Create<QuicEchoClient> ();
+  node->AddApplication (app);
+
+  return app;
+}
+
+} // namespace ns3
diff --git a/src/quic/quic-applications/helper/quic-echo-helper.h b/src/quic/quic-applications/helper/quic-echo-helper.h
new file mode 100644
index 000000000..2a785fcda
--- /dev/null
+++ b/src/quic/quic-applications/helper/quic-echo-helper.h
@@ -0,0 +1,233 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Davide Marcato <davide.marcato.4@studenti.unipd.it>
+ *          Stefano Ravazzolo <stefano.ravazzolo@studenti.unipd.it>
+ *          Alvise De Biasio <alvise.debiasio@studenti.unipd.it>
+ */
+
+#ifndef QUIC_ECHO_HELPER_H
+#define QUIC_ECHO_HELPER_H
+
+#include <stdint.h>
+#include "ns3/application-container.h"
+#include "ns3/node-container.h"
+#include "ns3/object-factory.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/ipv6-address.h"
+
+namespace ns3 {
+
+/**
+ * \ingroup quicecho
+ * \brief Create a server application which waits for input QUIC packets
+ *        and sends them back to the original sender.
+ */
+class QuicEchoServerHelper
+{
+public:
+  /**
+   * Create QuicEchoServerHelper which will make life easier for people trying
+   * to set up simulations with echos.
+   *
+   * \param port The port the server will wait on for incoming packets
+   */
+  QuicEchoServerHelper (uint16_t port);
+
+  /**
+   * Record an attribute to be set in each Application after it is is created.
+   *
+   * \param name the name of the attribute to set
+   * \param value the value of the attribute to set
+   */
+  void SetAttribute (std::string name, const AttributeValue &value);
+
+  /**
+   * Create a QuicEchoServerApplication on the specified Node.
+   *
+   * \param node The node on which to create the Application.  The node is
+   *             specified by a Ptr<Node>.
+   *
+   * \returns An ApplicationContainer holding the Application created,
+   */
+  ApplicationContainer Install (Ptr<Node> node) const;
+
+  /**
+   * Create a QuicEchoServerApplication on specified node
+   *
+   * \param nodeName The node on which to create the application.  The node
+   *                 is specified by a node name previously registered with
+   *                 the Object Name Service.
+   *
+   * \returns An ApplicationContainer holding the Application created.
+   */
+  ApplicationContainer Install (std::string nodeName) const;
+
+  /**
+   * \param c The nodes on which to create the Applications.  The nodes
+   *          are specified by a NodeContainer.
+   *
+   * Create one quic echo server application on each of the Nodes in the
+   * NodeContainer.
+   *
+   * \returns The applications created, one Application per Node in the
+   *          NodeContainer.
+   */
+  ApplicationContainer Install (NodeContainer c) const;
+
+private:
+  /**
+   * Install an ns3::QuicEchoServer on the node configured with all the
+   * attributes set with SetAttribute.
+   *
+   * \param node The node on which an QuicEchoServer will be installed.
+   * \returns Ptr to the application installed.
+   */
+  Ptr<Application> InstallPriv (Ptr<Node> node) const;
+
+  ObjectFactory m_factory; //!< Object factory.
+};
+
+/**
+ * \ingroup quicecho
+ * \brief Create an application which sends a QUIC packet and waits for an echo of this packet
+ */
+class QuicEchoClientHelper
+{
+public:
+  /**
+   * Create QuicEchoClientHelper which will make life easier for people trying
+   * to set up simulations with echos. Use this variant with addresses that do
+   * not include a port value (e.g., Ipv4Address and Ipv6Address).
+   *
+   * \param ip The IP address of the remote quic echo server
+   * \param port The port number of the remote quic echo server
+   */
+  QuicEchoClientHelper (Address ip, uint16_t port);
+  /**
+   * Create QuicEchoClientHelper which will make life easier for people trying
+   * to set up simulations with echos. Use this variant with addresses that do
+   * include a port value (e.g., InetSocketAddress and Inet6SocketAddress).
+   *
+   * \param addr The address of the remote quic echo server
+   */
+  QuicEchoClientHelper (Address addr);
+
+  /**
+   * Record an attribute to be set in each Application after it is is created.
+   *
+   * \param name the name of the attribute to set
+   * \param value the value of the attribute to set
+   */
+  void SetAttribute (std::string name, const AttributeValue &value);
+
+  /**
+   * Given a pointer to a QuicEchoClient application, set the data fill of the
+   * packet (what is sent as data to the server) to the contents of the fill
+   * string (including the trailing zero terminator).
+   *
+   * \warning The size of resulting echo packets will be automatically adjusted
+   * to reflect the size of the fill string -- this means that the PacketSize
+   * attribute may be changed as a result of this call.
+   *
+   * \param app Smart pointer to the application (real type must be QuicEchoClient).
+   * \param fill The string to use as the actual echo data bytes.
+   */
+  void SetFill (Ptr<Application> app, std::string fill);
+
+  /**
+   * Given a pointer to a QuicEchoClient application, set the data fill of the
+   * packet (what is sent as data to the server) to the contents of the fill
+   * byte.
+   *
+   * The fill byte will be used to initialize the contents of the data packet.
+   *
+   * \warning The size of resulting echo packets will be automatically adjusted
+   * to reflect the dataLength parameter -- this means that the PacketSize
+   * attribute may be changed as a result of this call.
+   *
+   * \param app Smart pointer to the application (real type must be QuicEchoClient).
+   * \param fill The byte to be repeated in constructing the packet data..
+   * \param dataLength The desired length of the resulting echo packet data.
+   */
+  void SetFill (Ptr<Application> app, uint8_t fill, uint32_t dataLength);
+
+  /**
+   * Given a pointer to a QuicEchoClient application, set the data fill of the
+   * packet (what is sent as data to the server) to the contents of the fill
+   * buffer, repeated as many times as is required.
+   *
+   * Initializing the fill to the contents of a single buffer is accomplished
+   * by providing a complete buffer with fillLength set to your desired
+   * dataLength
+   *
+   * \warning The size of resulting echo packets will be automatically adjusted
+   * to reflect the dataLength parameter -- this means that the PacketSize
+   * attribute of the Application may be changed as a result of this call.
+   *
+   * \param app Smart pointer to the application (real type must be QuicEchoClient).
+   * \param fill The fill pattern to use when constructing packets.
+   * \param fillLength The number of bytes in the provided fill pattern.
+   * \param dataLength The desired length of the final echo data.
+   */
+  void SetFill (Ptr<Application> app, uint8_t *fill, uint32_t fillLength, uint32_t dataLength);
+
+  /**
+   * Create a quic echo client application on the specified node.  The Node
+   * is provided as a Ptr<Node>.
+   *
+   * \param node The Ptr<Node> on which to create the QuicEchoClientApplication.
+   *
+   * \returns An ApplicationContainer that holds a Ptr<Application> to the
+   *          application created
+   */
+  ApplicationContainer Install (Ptr<Node> node) const;
+
+  /**
+   * Create a quic echo client application on the specified node.  The Node
+   * is provided as a string name of a Node that has been previously
+   * associated using the Object Name Service.
+   *
+   * \param nodeName The name of the node on which to create the QuicEchoClientApplication
+   *
+   * \returns An ApplicationContainer that holds a Ptr<Application> to the
+   *          application created
+   */
+  ApplicationContainer Install (std::string nodeName) const;
+
+  /**
+   * \param c the nodes
+   *
+   * Create one quic echo client application on each of the input nodes
+   *
+   * \returns the applications created, one application per input node.
+   */
+  ApplicationContainer Install (NodeContainer c) const;
+
+private:
+  /**
+   * Install an ns3::QuicEchoClient on the node configured with all the
+   * attributes set with SetAttribute.
+   *
+   * \param node The node on which an QuicEchoClient will be installed.
+   * \returns Ptr to the application installed.
+   */
+  Ptr<Application> InstallPriv (Ptr<Node> node) const;
+  ObjectFactory m_factory; //!< Object factory.
+};
+
+} // namespace ns3
+
+#endif /* QUIC_ECHO_HELPER_H */
diff --git a/src/quic/quic-applications/model/quic-client.cc b/src/quic/quic-applications/model/quic-client.cc
new file mode 100644
index 000000000..fd2472065
--- /dev/null
+++ b/src/quic/quic-applications/model/quic-client.cc
@@ -0,0 +1,229 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2007,2008,2009 INRIA, UDCAST
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Amine Ismail <amine.ismail@sophia.inria.fr>
+ *                      <amine.ismail@udcast.com>
+ */
+#include "ns3/log.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/nstime.h"
+#include "ns3/inet-socket-address.h"
+#include "ns3/inet6-socket-address.h"
+#include "ns3/socket.h"
+#include "ns3/simulator.h"
+#include "ns3/socket-factory.h"
+#include "ns3/packet.h"
+#include "ns3/uinteger.h"
+#include "quic-client.h"
+#include "seq-ts-header.h"
+#include <cstdlib>
+#include <cstdio>
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("QuicClient");
+
+NS_OBJECT_ENSURE_REGISTERED (QuicClient);
+
+TypeId
+QuicClient::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicClient")
+    .SetParent<Application> ()
+    .SetGroupName ("Applications")
+    .AddConstructor<QuicClient> ()
+    .AddAttribute ("MaxPackets",
+                   "The maximum number of packets the application will send",
+                   UintegerValue (100),
+                   MakeUintegerAccessor (&QuicClient::m_count),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddAttribute ("Interval",
+                   "The time to wait between packets", TimeValue (Seconds (1.0)),
+                   MakeTimeAccessor (&QuicClient::m_interval),
+                   MakeTimeChecker ())
+    .AddAttribute ("RemoteAddress",
+                   "The destination Address of the outbound packets",
+                   AddressValue (),
+                   MakeAddressAccessor (&QuicClient::m_peerAddress),
+                   MakeAddressChecker ())
+    .AddAttribute ("RemotePort", "The destination port of the outbound packets",
+                   UintegerValue (100),
+                   MakeUintegerAccessor (&QuicClient::m_peerPort),
+                   MakeUintegerChecker<uint16_t> ())
+    .AddAttribute ("PacketSize",
+                   "Size of packets generated. The minimum packet size is 12 bytes which is the size of the header carrying the sequence number and the time stamp.",
+                   UintegerValue (1024),
+                   MakeUintegerAccessor (&QuicClient::m_size),
+                   MakeUintegerChecker<uint32_t> (12,1500))
+    .AddAttribute ("NumStreams",
+                   "Number of streams to be used in the underlying QUIC socket",
+                   UintegerValue (1),
+                   MakeUintegerAccessor (&QuicClient::m_numStreams),
+                   MakeUintegerChecker<uint32_t> (1,20)) // TODO check the max value
+  ;
+  return tid;
+}
+
+QuicClient::QuicClient ()
+{
+  NS_LOG_FUNCTION (this);
+  m_sent = 0;
+  m_socket = 0;
+  m_lastUsedStream = 1;
+  m_sendEvent = EventId ();
+}
+
+QuicClient::~QuicClient ()
+{
+  NS_LOG_FUNCTION (this);
+}
+
+void
+QuicClient::SetRemote (Address ip, uint16_t port)
+{
+  NS_LOG_FUNCTION (this << ip << port);
+  m_peerAddress = ip;
+  m_peerPort = port;
+}
+
+void
+QuicClient::SetRemote (Address addr)
+{
+  NS_LOG_FUNCTION (this << addr);
+  m_peerAddress = addr;
+}
+
+void
+QuicClient::DoDispose (void)
+{
+  NS_LOG_FUNCTION (this);
+  Application::DoDispose ();
+}
+
+void
+QuicClient::StartApplication (void)
+{
+  NS_LOG_FUNCTION (this);
+
+  if (m_socket == 0)
+    {
+      TypeId tid = TypeId::LookupByName ("ns3::QuicSocketFactory");
+      m_socket = Socket::CreateSocket (GetNode (), tid);
+      if (Ipv4Address::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind () == -1)
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (InetSocketAddress (Ipv4Address::ConvertFrom (m_peerAddress), m_peerPort));
+        }
+      else if (Ipv6Address::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind6 () == -1)
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (Inet6SocketAddress (Ipv6Address::ConvertFrom (m_peerAddress), m_peerPort));
+        }
+      else if (InetSocketAddress::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind () == -1)
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (m_peerAddress);
+        }
+      else if (Inet6SocketAddress::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind6 () == -1) \
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (m_peerAddress);
+        }
+      else
+        {
+          NS_ASSERT_MSG (false, "Incompatible address type: " << m_peerAddress);
+        }
+    }
+
+  m_socket->SetRecvCallback (MakeNullCallback<void, Ptr<Socket> > ());
+  m_socket->SetAllowBroadcast (true);
+  m_sendEvent = Simulator::Schedule (Seconds (0), &QuicClient::Send, this);
+}
+
+void
+QuicClient::StopApplication (void)
+{
+  NS_LOG_FUNCTION (this);
+  Simulator::Cancel (m_sendEvent);
+  if (m_socket != 0)
+    {
+      m_socket->Close ();
+      m_socket = 0;
+    }
+}
+
+void
+QuicClient::Send (void)
+{
+  NS_LOG_FUNCTION (this);
+  NS_ASSERT (m_sendEvent.IsExpired ());
+  SeqTsHeader seqTs;
+  seqTs.SetSeq (m_sent);
+  Ptr<Packet> p = Create<Packet> (m_size); // 8+4 : the size of the seqTs header
+  // p->AddHeader (seqTs);
+
+  std::stringstream peerAddressStringStream;
+  if (Ipv4Address::IsMatchingType (m_peerAddress))
+    {
+      peerAddressStringStream << Ipv4Address::ConvertFrom (m_peerAddress);
+    }
+  else if (Ipv6Address::IsMatchingType (m_peerAddress))
+    {
+      peerAddressStringStream << Ipv6Address::ConvertFrom (m_peerAddress);
+    }
+
+  if ((m_socket->Send (p, m_lastUsedStream)) >= 0)
+    {
+      ++m_sent;
+      NS_LOG_INFO ("TraceDelay TX " << m_size << " bytes to "
+                                    << peerAddressStringStream.str () << " Uid: "
+                                    << p->GetUid () << " Time: "
+                                    << (Simulator::Now ()).GetSeconds ());
+
+    }
+  else
+    {
+      NS_LOG_INFO ("Error while sending " << m_size << " bytes to "
+                                          << peerAddressStringStream.str ());
+    }
+
+  // apply a round robin policy for the streams (i.e., one packet per stream)
+  m_lastUsedStream++;
+  if (m_lastUsedStream > m_numStreams)
+    {
+      m_lastUsedStream = 1;
+    }
+
+  if (m_sent < m_count)
+    {
+      m_sendEvent = Simulator::Schedule (m_interval, &QuicClient::Send, this);
+    }
+}
+
+} // Namespace ns3
diff --git a/src/quic/quic-applications/model/quic-client.h b/src/quic/quic-applications/model/quic-client.h
new file mode 100644
index 000000000..df767ed64
--- /dev/null
+++ b/src/quic/quic-applications/model/quic-client.h
@@ -0,0 +1,98 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2007,2008,2009 INRIA, UDCAST
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Amine Ismail <amine.ismail@sophia.inria.fr>
+ *                      <amine.ismail@udcast.com>
+ *
+ */
+
+#ifndef QUIC_CLIENT_H
+#define QUIC_CLIENT_H
+
+#include "ns3/application.h"
+#include "ns3/event-id.h"
+#include "ns3/ptr.h"
+#include "ns3/ipv4-address.h"
+
+namespace ns3 {
+
+class Socket;
+class Packet;
+
+/**
+ * \ingroup quicclientserver
+ *
+ * \brief A QUIC client. Sends QUIC packet carrying sequence number and time stamp
+ *  in their payloads
+ *
+ */
+class QuicClient : public Application
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+
+  QuicClient ();
+
+  virtual ~QuicClient ();
+
+  /**
+   * \brief set the remote address and port
+   * \param ip remote IP address
+   * \param port remote port
+   */
+  void SetRemote (Address ip, uint16_t port);
+  /**
+   * \brief set the remote address
+   * \param addr remote address
+   */
+  void SetRemote (Address addr);
+
+protected:
+  virtual void DoDispose (void);
+
+private:
+
+  virtual void StartApplication (void);
+  virtual void StopApplication (void);
+
+  /**
+   * \brief Send a packet
+   */
+  void Send (void);
+
+  uint32_t m_count; //!< Maximum number of packets the application will send
+  Time m_interval; //!< Packet inter-send time
+  uint32_t m_size; //!< Size of the sent packet (including the SeqTsHeader)
+
+  uint32_t m_sent; //!< Counter for sent packets
+  Ptr<Socket> m_socket; //!< Socket
+  Address m_peerAddress; //!< Remote peer address
+  uint16_t m_peerPort; //!< Remote peer port
+  EventId m_sendEvent; //!< Event to send the next packet
+
+  uint32_t m_numStreams;
+  uint32_t m_lastUsedStream;
+
+};
+
+} // namespace ns3
+
+#endif /* QUIC_CLIENT_H */
diff --git a/src/quic/quic-applications/model/quic-echo-client.cc b/src/quic/quic-applications/model/quic-echo-client.cc
new file mode 100644
index 000000000..21e69f411
--- /dev/null
+++ b/src/quic/quic-applications/model/quic-echo-client.cc
@@ -0,0 +1,514 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Davide Marcato <davide.marcato.4@studenti.unipd.it>
+ *          Stefano Ravazzolo <stefano.ravazzolo@studenti.unipd.it>
+ *          Alvise De Biasio <alvise.debiasio@studenti.unipd.it>
+ */
+
+#include "ns3/log.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/ipv6-address.h"
+#include "ns3/nstime.h"
+#include "ns3/inet-socket-address.h"
+#include "ns3/inet6-socket-address.h"
+#include "ns3/socket.h"
+#include "ns3/simulator.h"
+#include "ns3/socket-factory.h"
+#include "ns3/packet.h"
+#include "ns3/uinteger.h"
+#include "ns3/trace-source-accessor.h"
+#include "quic-echo-client.h"
+#include "ns3/quic-header.h"
+
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("QuicEchoClientApplication");
+
+NS_OBJECT_ENSURE_REGISTERED (QuicEchoClient);
+
+TypeId
+QuicEchoClient::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicEchoClient")
+    .SetParent<Application> ()
+    .SetGroupName ("Applications")
+    .AddConstructor<QuicEchoClient> ()
+    .AddAttribute ("MaxPackets",
+                   "The maximum number of packets the application will send",
+                   UintegerValue (100),
+                   MakeUintegerAccessor (&QuicEchoClient::m_count),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddAttribute ("Interval",
+                   "The time to wait between packets",
+                   TimeValue (Seconds (1.0)),
+                   MakeTimeAccessor (&QuicEchoClient::m_interval),
+                   MakeTimeChecker ())
+    .AddAttribute ("RemoteAddress",
+                   "The destination Address of the outbound packets",
+                   AddressValue (),
+                   MakeAddressAccessor (&QuicEchoClient::m_peerAddress),
+                   MakeAddressChecker ())
+    .AddAttribute ("RemotePort",
+                   "The destination port of the outbound packets",
+                   UintegerValue (0),
+                   MakeUintegerAccessor (&QuicEchoClient::m_peerPort),
+                   MakeUintegerChecker<uint16_t> ())
+    .AddAttribute ("PacketSize", "Size of echo data in outbound packets",
+                   UintegerValue (100),
+                   MakeUintegerAccessor (&QuicEchoClient::GetDataSize,
+                                         &QuicEchoClient::SetDataSize),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddAttribute ("StreamId",
+                   "Identifier of the stream to be used in the QUIC connection",
+                   UintegerValue (2),
+                   MakeUintegerAccessor (&QuicEchoClient::GetStreamId,
+                                         &QuicEchoClient::SetStreamId),
+                   MakeUintegerChecker<uint32_t> ())
+    .AddTraceSource ("Tx", "A new packet is created and is sent",
+                     MakeTraceSourceAccessor (&QuicEchoClient::m_txTrace),
+                     "ns3::Packet::TracedCallback")
+  ;
+  return tid;
+}
+
+
+QuicEchoClient::QuicEchoClient ()
+{
+  NS_LOG_FUNCTION (this);
+  m_sent = 0;
+  m_socket = 0;
+  m_sendEvent = EventId ();
+  m_data = 0;
+  m_dataSize = 0;
+}
+
+QuicEchoClient::~QuicEchoClient ()
+{
+  NS_LOG_FUNCTION (this);
+  m_socket = 0;
+
+  delete [] m_data;
+  m_data = 0;
+  m_dataSize = 0;
+}
+
+void
+QuicEchoClient::SetRemote (Address ip, uint16_t port)
+{
+  NS_LOG_FUNCTION (this << ip << port);
+  m_peerAddress = ip;
+  m_peerPort = port;
+}
+
+void
+QuicEchoClient::SetRemote (Address addr)
+{
+  NS_LOG_FUNCTION (this << addr);
+  m_peerAddress = addr;
+}
+
+void
+QuicEchoClient::DoDispose (void)
+{
+  NS_LOG_FUNCTION (this);
+  Application::DoDispose ();
+}
+
+void
+QuicEchoClient::StartApplication (void)
+{
+  NS_LOG_INFO ("##########  QUIC Echo Client START at time " << Simulator::Now ().GetSeconds () << " ##########");
+  NS_LOG_FUNCTION (this);
+
+  if (m_socket == 0)
+    {
+      TypeId tid = TypeId::LookupByName ("ns3::QuicSocketFactory");
+
+      m_socket = Socket::CreateSocket (GetNode (), tid);
+      if (Ipv4Address::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind () == -1)
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (InetSocketAddress (Ipv4Address::ConvertFrom (m_peerAddress), m_peerPort));
+        }
+      else if (Ipv6Address::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind6 () == -1)
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (Inet6SocketAddress (Ipv6Address::ConvertFrom (m_peerAddress), m_peerPort));
+        }
+      else if (InetSocketAddress::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind () == -1)
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (m_peerAddress);
+        }
+      else if (Inet6SocketAddress::IsMatchingType (m_peerAddress) == true)
+        {
+          if (m_socket->Bind6 () == -1)
+            {
+              NS_FATAL_ERROR ("Failed to bind socket");
+            }
+          m_socket->Connect (m_peerAddress);
+        }
+      else
+        {
+          NS_ASSERT_MSG (false, "Incompatible address type: " << m_peerAddress);
+        }
+    }
+
+  m_socket->SetRecvCallback (MakeCallback (&QuicEchoClient::HandleRead, this));
+  m_socket->SetAllowBroadcast (true);
+  ScheduleTransmit (Seconds (2.));
+}
+
+void
+QuicEchoClient::StopApplication ()
+{
+  NS_LOG_INFO ("##########  QUIC Echo Client STOP at time " << Simulator::Now ().GetSeconds () << " ##########");
+  NS_LOG_FUNCTION (this);
+
+  if (m_socket != 0)
+    {
+      m_socket->Close ();
+      m_socket->SetRecvCallback (MakeNullCallback<void, Ptr<Socket> > ());
+      m_socket = 0;
+    }
+
+  Simulator::Cancel (m_sendEvent);
+}
+
+void
+QuicEchoClient::SetDataSize (uint32_t dataSize)
+{
+  NS_LOG_FUNCTION (this << dataSize);
+
+  //
+  // If the client is setting the echo packet data size this way, we infer
+  // that she doesn't care about the contents of the packet at all, so
+  // neither will we.
+  //
+  delete [] m_data;
+  m_data = 0;
+  m_dataSize = 0;
+  m_size = dataSize;
+}
+
+uint32_t
+QuicEchoClient::GetDataSize (void) const
+{
+  NS_LOG_FUNCTION (this);
+  return m_size;
+}
+
+void
+QuicEchoClient::SetFill (std::string fill)
+{
+  NS_LOG_FUNCTION (this << fill);
+
+  uint32_t dataSize = fill.size () + 1;
+
+  if (dataSize != m_dataSize)
+    {
+      delete [] m_data;
+      m_data = new uint8_t [dataSize];
+      m_dataSize = dataSize;
+    }
+
+  memcpy (m_data, fill.c_str (), dataSize);
+
+  //
+  // Overwrite packet size attribute.
+  //
+  m_size = dataSize;
+}
+
+void
+QuicEchoClient::SetFill (uint8_t fill, uint32_t dataSize)
+{
+  NS_LOG_FUNCTION (this << fill << dataSize);
+  if (dataSize != m_dataSize)
+    {
+      delete [] m_data;
+      m_data = new uint8_t [dataSize];
+      m_dataSize = dataSize;
+    }
+
+  memset (m_data, fill, dataSize);
+
+  //
+  // Overwrite packet size attribute.
+  //
+  m_size = dataSize;
+}
+
+void
+QuicEchoClient::SetFill (uint8_t *fill, uint32_t fillSize, uint32_t dataSize)
+{
+  NS_LOG_FUNCTION (this << fill << fillSize << dataSize);
+  if (dataSize != m_dataSize)
+    {
+      delete [] m_data;
+      m_data = new uint8_t [dataSize];
+      m_dataSize = dataSize;
+    }
+
+  if (fillSize >= dataSize)
+    {
+      memcpy (m_data, fill, dataSize);
+      m_size = dataSize;
+      return;
+    }
+
+  //
+  // Do all but the final fill.
+  //
+  uint32_t filled = 0;
+  while (filled + fillSize < dataSize)
+    {
+      memcpy (&m_data[filled], fill, fillSize);
+      filled += fillSize;
+    }
+
+  //
+  // Last fill may be partial
+  //
+  memcpy (&m_data[filled], fill, dataSize - filled);
+
+  //
+  // Overwrite packet size attribute.
+  //
+  m_size = dataSize;
+}
+
+void
+QuicEchoClient::ScheduleTransmit (Time dt)
+{
+  NS_LOG_FUNCTION (this << dt);
+  m_sendEvent = Simulator::Schedule (dt, &QuicEchoClient::Send, this);
+}
+
+void
+QuicEchoClient::ScheduleClosing (Time dt)
+{
+  NS_LOG_FUNCTION (this << dt);
+  m_closeEvent = Simulator::Schedule (dt, &QuicEchoClient::Close, this);
+}
+
+void
+QuicEchoClient::ScheduleRestart (Time dt)
+{
+  NS_LOG_FUNCTION (this << dt);
+  m_connectEvent = Simulator::Schedule (dt, &QuicEchoClient::Restart, this);
+}
+
+void
+QuicEchoClient::Restart (void)
+{
+  NS_LOG_INFO ("##########  QUIC Echo Client RESTART at time " << Simulator::Now ().GetSeconds () << " ##########");
+  NS_LOG_FUNCTION (this);
+  NS_ASSERT (m_connectEvent.IsExpired ());
+
+  TypeId tid = TypeId::LookupByName ("ns3::QuicSocketFactory");
+  //NS_LOG_INFO("node is "<< GetNode());
+  m_socket = Socket::CreateSocket (GetNode (), tid);
+  if (Ipv4Address::IsMatchingType (m_peerAddress) == true)
+    {
+      if (m_socket->Bind () == -1)
+        {
+          NS_FATAL_ERROR ("Failed to bind socket");
+        }
+      m_socket->Connect (InetSocketAddress (Ipv4Address::ConvertFrom (m_peerAddress), m_peerPort));
+    }
+  else if (Ipv6Address::IsMatchingType (m_peerAddress) == true)
+    {
+      if (m_socket->Bind6 () == -1)
+        {
+          NS_FATAL_ERROR ("Failed to bind socket");
+        }
+      m_socket->Connect (Inet6SocketAddress (Ipv6Address::ConvertFrom (m_peerAddress), m_peerPort));
+    }
+  else if (InetSocketAddress::IsMatchingType (m_peerAddress) == true)
+    {
+      if (m_socket->Bind () == -1)
+        {
+          NS_FATAL_ERROR ("Failed to bind socket");
+        }
+      m_socket->Connect (m_peerAddress);
+    }
+  else if (Inet6SocketAddress::IsMatchingType (m_peerAddress) == true)
+    {
+      if (m_socket->Bind6 () == -1)
+        {
+          NS_FATAL_ERROR ("Failed to bind socket");
+        }
+      m_socket->Connect (m_peerAddress);
+    }
+  else
+    {
+      NS_ASSERT_MSG (false, "Incompatible address type: " << m_peerAddress);
+    }
+
+  m_socket->SetRecvCallback (MakeCallback (&QuicEchoClient::HandleRead, this));
+  m_socket->SetAllowBroadcast (true);
+  SetFill ("Re-Hello World");
+  ScheduleTransmit (Seconds (2.));
+}
+
+
+void
+QuicEchoClient::Close (void)
+{
+  NS_LOG_INFO ("##########  QUIC Echo Client CLOSING at time " << Simulator::Now ().GetSeconds () << " ##########");
+  NS_LOG_FUNCTION (this);
+  NS_ASSERT (m_closeEvent.IsExpired ());
+
+  m_socket->Close ();
+}
+
+
+void
+QuicEchoClient::Send (void)
+{
+  NS_LOG_INFO ("##########  QUIC Echo Client SENDING at time " << Simulator::Now ().GetSeconds () << " ##########");
+  NS_LOG_FUNCTION (this);
+
+  NS_ASSERT (m_sendEvent.IsExpired ());
+
+  Ptr<Packet> p;
+  if (m_dataSize)
+    {
+      // If m_dataSize is non-zero, we have a data buffer of the same size that we
+      // are expected to copy and send.  This state of affairs is created if one of
+      // the Fill functions is called.  In this case, m_size must have been set
+      // to agree with m_dataSize
+      //
+      NS_ASSERT_MSG (m_dataSize == m_size, "QuicEchoClient::Send(): m_size and m_dataSize inconsistent");
+      NS_ASSERT_MSG (m_data, "QuicEchoClient::Send(): m_dataSize but no m_data");
+      p = Create<Packet> (m_data, m_dataSize);
+    }
+  else
+    {
+      NS_LOG_INFO ("no data");
+      //
+      // If m_dataSize is zero, the client has indicated that it doesn't care
+      // about the data itself either by specifying the data size by setting
+      // the corresponding attribute or by not calling a SetFill function.  In
+      // this case, we don't worry about it either.  But we do allow m_size
+      // to have a value different from the (zero) m_dataSize.
+      //
+      p = Create<Packet> (m_size);
+    }
+  // call to the trace sinks before the packet is actually sent,
+  // so that tags added to the packet can be sent as well
+  m_txTrace (p);
+
+  // send and use the flags param in the Send API to let the QUIC socket know
+  // about which stream should be used for data
+  int sent = m_socket->Send (p, m_streamId);
+
+  NS_ASSERT_MSG (sent - p->GetSize () == 0, "Could not send data (packet and sent size inconsistent)");
+
+  ++m_sent;
+
+  if (Ipv4Address::IsMatchingType (m_peerAddress))
+    {
+      NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s client sent " << m_size << " bytes to " <<
+                   Ipv4Address::ConvertFrom (m_peerAddress) << " port " << m_peerPort);
+    }
+  else if (Ipv6Address::IsMatchingType (m_peerAddress))
+    {
+      NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s client sent " << m_size << " bytes to " <<
+                   Ipv6Address::ConvertFrom (m_peerAddress) << " port " << m_peerPort);
+    }
+  else if (InetSocketAddress::IsMatchingType (m_peerAddress))
+    {
+      NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s client sent " << m_size << " bytes to " <<
+                   InetSocketAddress::ConvertFrom (m_peerAddress).GetIpv4 () << " port " << InetSocketAddress::ConvertFrom (m_peerAddress).GetPort ());
+    }
+  else if (Inet6SocketAddress::IsMatchingType (m_peerAddress))
+    {
+      NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s client sent " << m_size << " bytes to " <<
+                   Inet6SocketAddress::ConvertFrom (m_peerAddress).GetIpv6 () << " port " << Inet6SocketAddress::ConvertFrom (m_peerAddress).GetPort ());
+    }
+
+  uint8_t *buffer = new uint8_t[p->GetSize ()];
+  p->CopyData (buffer, p->GetSize ());
+  std::string s = std::string ((char*)buffer);
+  NS_LOG_INFO ("Client sent: " << s << "");
+
+  if (m_sent < m_count)
+    {
+      ScheduleTransmit (m_interval);
+    }
+}
+
+void
+QuicEchoClient::HandleRead (Ptr<Socket> socket)
+{
+  NS_LOG_INFO ("##########  QUIC Echo Client RECEIVING at time " << Simulator::Now ().GetSeconds () << " ##########");
+  NS_LOG_FUNCTION (this);
+
+  Ptr<Packet> packet;
+  Address from;
+  while ((packet = socket->RecvFrom (from)))
+    {
+      packet->RemoveAllByteTags ();
+      packet->RemoveAllPacketTags ();
+
+      if (InetSocketAddress::IsMatchingType (from))
+        {
+          NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s client received " << packet->GetSize () << " bytes from " <<
+                       InetSocketAddress::ConvertFrom (from).GetIpv4 () << " port " <<
+                       InetSocketAddress::ConvertFrom (from).GetPort ());
+        }
+      else if (Inet6SocketAddress::IsMatchingType (from))
+        {
+          NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s client received " << packet->GetSize () << " bytes from " <<
+                       Inet6SocketAddress::ConvertFrom (from).GetIpv6 () << " port " <<
+                       Inet6SocketAddress::ConvertFrom (from).GetPort ());
+        }
+
+      uint8_t *buffer = new uint8_t[packet->GetSize ()];
+      packet->CopyData (buffer, packet->GetSize ());
+      std::string s = std::string ((char*)buffer);
+      NS_LOG_INFO ("Client received: " << s << "");
+    }
+}
+
+void
+QuicEchoClient::SetStreamId (uint32_t streamId)
+{
+  NS_LOG_FUNCTION (this << streamId);
+  NS_ABORT_MSG_IF (streamId == 0, "Stream 0 cannot be used for application data");
+
+  m_streamId = streamId;
+}
+
+uint32_t
+QuicEchoClient::GetStreamId (void) const
+{
+  return m_streamId;
+}
+
+} // Namespace ns3
diff --git a/src/quic/quic-applications/model/quic-echo-client.h b/src/quic/quic-applications/model/quic-echo-client.h
new file mode 100644
index 000000000..1ba6fba19
--- /dev/null
+++ b/src/quic/quic-applications/model/quic-echo-client.h
@@ -0,0 +1,207 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Davide Marcato <davide.marcato.4@studenti.unipd.it>
+ *          Stefano Ravazzolo <stefano.ravazzolo@studenti.unipd.it>
+ *          Alvise De Biasio <alvise.debiasio@studenti.unipd.it>
+ */
+
+#ifndef QUIC_ECHO_CLIENT_H
+#define QUIC_ECHO_CLIENT_H
+
+#include "ns3/application.h"
+#include "ns3/event-id.h"
+#include "ns3/ptr.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/traced-callback.h"
+
+namespace ns3 {
+
+class Socket;
+class Packet;
+
+/**
+ * \ingroup quicecho
+ * \brief A Quic Echo client
+ *
+ * Every packet sent should be returned by the server and received here.
+ */
+class QuicEchoClient : public Application
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+
+  QuicEchoClient ();
+
+  virtual ~QuicEchoClient ();
+
+  /**
+   * \brief set the remote address and port
+   * \param ip remote IP address
+   * \param port remote port
+   */
+  void SetRemote (Address ip, uint16_t port);
+  /**
+   * \brief set the remote address
+   * \param addr remote address
+   */
+  void SetRemote (Address addr);
+
+  /**
+   * Set the data size of the packet (the number of bytes that are sent as data
+   * to the server).  The contents of the data are set to unspecified (don't
+   * care) by this call.
+   *
+   * \warning If you have set the fill data for the echo client using one of the
+   * SetFill calls, this will undo those effects.
+   *
+   * \param dataSize The size of the echo data you want to sent.
+   */
+  void SetDataSize (uint32_t dataSize);
+
+  /**
+   * Get the number of data bytes that will be sent to the server.
+   *
+   * \warning The number of bytes may be modified by calling any one of the
+   * SetFill methods.  If you have called SetFill, then the number of
+   * data bytes will correspond to the size of an initialized data buffer.
+   * If you have not called a SetFill method, the number of data bytes will
+   * correspond to the number of don't care bytes that will be sent.
+   *
+   * \returns The number of data bytes.
+   */
+  uint32_t GetDataSize (void) const;
+
+  /**
+   * Set the data fill of the packet (what is sent as data to the server) to
+   * the zero-terminated contents of the fill string string.
+   *
+   * \warning The size of resulting echo packets will be automatically adjusted
+   * to reflect the size of the fill string -- this means that the PacketSize
+   * attribute may be changed as a result of this call.
+   *
+   * \param fill The string to use as the actual echo data bytes.
+   */
+  void SetFill (std::string fill);
+
+  /**
+   * Set the data fill of the packet (what is sent as data to the server) to
+   * the repeated contents of the fill byte.  i.e., the fill byte will be
+   * used to initialize the contents of the data packet.
+   *
+   * \warning The size of resulting echo packets will be automatically adjusted
+   * to reflect the dataSize parameter -- this means that the PacketSize
+   * attribute may be changed as a result of this call.
+   *
+   * \param fill The byte to be repeated in constructing the packet data..
+   * \param dataSize The desired size of the resulting echo packet data.
+   */
+  void SetFill (uint8_t fill, uint32_t dataSize);
+
+  /**
+   * Set the data fill of the packet (what is sent as data to the server) to
+   * the contents of the fill buffer, repeated as many times as is required.
+   *
+   * Initializing the packet to the contents of a provided single buffer is
+   * accomplished by setting the fillSize set to your desired dataSize
+   * (and providing an appropriate buffer).
+   *
+   * \warning The size of resulting echo packets will be automatically adjusted
+   * to reflect the dataSize parameter -- this means that the PacketSize
+   * attribute of the Application may be changed as a result of this call.
+   *
+   * \param fill The fill pattern to use when constructing packets.
+   * \param fillSize The number of bytes in the provided fill pattern.
+   * \param dataSize The desired size of the final echo data.
+   */
+  void SetFill (uint8_t *fill, uint32_t fillSize, uint32_t dataSize);
+
+  void ScheduleClosing (Time dt);
+
+  void ScheduleRestart (Time dt);
+
+  /**
+   * Set the ID of the stream to be used in the underlying QUIC socket
+   *
+   * \param streamId the ID of the stream (>0)
+   */
+  void SetStreamId (uint32_t streamId);
+
+  /**
+   * Get the stream ID to be used in the underlying QUIC socket
+   *
+   * \return the stream ID
+   */
+  uint32_t GetStreamId (void) const;
+
+protected:
+  virtual void DoDispose (void);
+
+private:
+
+  virtual void StartApplication (void);
+  virtual void StopApplication (void);
+
+  /**
+   * \brief Schedule the next packet transmission
+   * \param dt time interval between packets.
+   */
+  void ScheduleTransmit (Time dt);
+
+  /**
+   * \brief Send a packet
+   */
+  void Send (void);
+  void Close (void);
+  void Restart (void);
+
+  /**
+ * \brief Handle a packet reception.
+ *
+ * This function is called by lower layers.
+ *
+ * \param socket the socket the packet was received to.
+ */
+  void HandleRead (Ptr<Socket> socket);
+
+  uint32_t m_count; //!< Maximum number of packets the application will send
+  Time m_interval; //!< Packet inter-send time
+  uint32_t m_size; //!< Size of the sent packet
+
+  uint32_t m_dataSize; //!< packet payload size (must be equal to m_size)
+  uint8_t *m_data; //!< packet payload data
+
+  uint32_t m_sent; //!< Counter for sent packets
+  Ptr<Socket> m_socket; //!< Socket
+  Address m_peerAddress; //!< Remote peer address
+  uint16_t m_peerPort; //!< Remote peer port
+  EventId m_sendEvent; //!< Event to send the next packet
+  EventId m_closeEvent;
+  EventId m_connectEvent;
+
+
+  /// Callbacks for tracing the packet Tx events
+  TracedCallback<Ptr<const Packet> > m_txTrace;
+
+  uint32_t m_streamId;
+};
+
+} // namespace ns3
+
+#endif /* QUIC_ECHO_CLIENT_H */
diff --git a/src/quic/quic-applications/model/quic-echo-server.cc b/src/quic/quic-applications/model/quic-echo-server.cc
new file mode 100644
index 000000000..677fdd314
--- /dev/null
+++ b/src/quic/quic-applications/model/quic-echo-server.cc
@@ -0,0 +1,240 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Davide Marcato <davide.marcato.4@studenti.unipd.it>
+ *          Stefano Ravazzolo <stefano.ravazzolo@studenti.unipd.it>
+ *          Alvise De Biasio <alvise.debiasio@studenti.unipd.it>
+ */
+
+#include "ns3/log.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/ipv6-address.h"
+#include "ns3/address-utils.h"
+#include "ns3/nstime.h"
+#include "ns3/inet-socket-address.h"
+#include "ns3/inet6-socket-address.h"
+#include "ns3/socket.h"
+#include "ns3/quic-socket.h"
+#include "ns3/simulator.h"
+#include "ns3/socket-factory.h"
+#include "ns3/packet.h"
+#include "ns3/uinteger.h"
+
+#include "quic-echo-server.h"
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("QuicEchoServerApplication");
+
+NS_OBJECT_ENSURE_REGISTERED (QuicEchoServer);
+
+TypeId
+QuicEchoServer::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicEchoServer")
+    .SetParent<Application> ()
+    .SetGroupName ("Applications")
+    .AddConstructor<QuicEchoServer> ()
+    .AddAttribute ("Port", "Port on which we listen for incoming packets.",
+                   UintegerValue (9),
+                   MakeUintegerAccessor (&QuicEchoServer::m_port),
+                   MakeUintegerChecker<uint16_t> ())
+    .AddAttribute ("StreamId",
+                   "Identifier of the stream to be used in the QUIC connection",
+                   UintegerValue (2),
+                   MakeUintegerAccessor (&QuicEchoServer::GetStreamId,
+                                         &QuicEchoServer::SetStreamId),
+                   MakeUintegerChecker<uint32_t> ())
+  ;
+  return tid;
+}
+
+QuicEchoServer::QuicEchoServer ()
+{
+  NS_LOG_FUNCTION (this);
+}
+
+QuicEchoServer::~QuicEchoServer ()
+{
+  NS_LOG_FUNCTION (this);
+  m_socket = 0;
+  m_socket6 = 0;
+}
+
+void
+QuicEchoServer::DoDispose (void)
+{
+  NS_LOG_FUNCTION (this);
+  Application::DoDispose ();
+}
+
+void
+QuicEchoServer::StartApplication (void)
+{
+  NS_LOG_INFO ("##########  QUIC Echo Server START at time " << Simulator::Now ().GetSeconds () << " ##########");
+  NS_LOG_FUNCTION (this);
+  //il client ha bisogno di un socket udp per ogni socket quic
+  //il server per tutti i socket quic gli basta un socket udp che ascolta
+
+  if (m_socket == 0)
+    {
+      //NS_LOG_INFO("Need to create IPv4");
+      TypeId tid = TypeId::LookupByName ("ns3::QuicSocketFactory");
+      //NS_LOG_INFO("node is "<< GetNode());
+      m_socket = Socket::CreateSocket (GetNode (), tid);
+      //NS_LOG_INFO("Created IPv4 socket");
+      InetSocketAddress local = InetSocketAddress (Ipv4Address::GetAny (), m_port);
+      if (m_socket->Bind (local) == -1)
+        {
+          NS_FATAL_ERROR ("Failed to bind socket");
+        }
+      if (addressUtils::IsMulticast (m_local))
+        {
+          NS_FATAL_ERROR ("Error: Failed to join multicast group");
+        }
+    }
+
+//  if (m_socket6 == 0)
+//    {
+//      NS_LOG_INFO("Need to create IPv6");
+//      TypeId tid = TypeId::LookupByName ("ns3::QuicSocketFactory");
+//      m_socket6 = Socket::CreateSocket (GetNode (), tid);
+//      Inet6SocketAddress local6 = Inet6SocketAddress (Ipv6Address::GetAny (), m_port);
+//      if (m_socket6->Bind (local6) == -1)
+//        {
+//          NS_FATAL_ERROR ("Failed to bind socket");
+//        }
+//      if (addressUtils::IsMulticast (local6))
+//      {
+//       NS_FATAL_ERROR ("Error: Failed to join multicast group");
+//      }
+//    }
+
+  m_socket->Listen ();
+  m_socket->SetRecvCallback (MakeCallback (&QuicEchoServer::HandleRead, this));
+  //m_socket6->SetRecvCallback (MakeCallback (&QuicEchoServer::HandleRead, this));
+}
+
+void
+QuicEchoServer::StopApplication ()
+{
+  NS_LOG_INFO ("##########  QUIC Echo Server STOP at time " << Simulator::Now ().GetSeconds () << " ##########");
+  NS_LOG_FUNCTION (this);
+  if (m_socket != 0)
+    {
+      m_socket->Close ();
+      m_socket->SetRecvCallback (MakeNullCallback<void, Ptr<Socket> > ());
+    }
+  if (m_socket6 != 0)
+    {
+      m_socket6->Close ();
+      m_socket6->SetRecvCallback (MakeNullCallback<void, Ptr<Socket> > ());
+    }
+}
+
+void
+QuicEchoServer::HandleRead (Ptr<Socket> socket)
+{
+  NS_LOG_INFO ("##########  QUIC Echo Server RECEIVING at time " << Simulator::Now ().GetSeconds () << " ##########");
+  NS_LOG_FUNCTION (this);
+
+  Ptr<Packet> packet;
+  Address from;
+  while ((packet = socket->RecvFrom (from)))
+    {
+      if (InetSocketAddress::IsMatchingType (from))
+        {
+          NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s server received " << packet->GetSize () << " bytes from " <<
+                       InetSocketAddress::ConvertFrom (from).GetIpv4 () << " port " <<
+                       InetSocketAddress::ConvertFrom (from).GetPort ());
+        }
+      else if (Inet6SocketAddress::IsMatchingType (from))
+        {
+          NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s server received " << packet->GetSize () << " bytes from " <<
+                       Inet6SocketAddress::ConvertFrom (from).GetIpv6 () << " port " <<
+                       Inet6SocketAddress::ConvertFrom (from).GetPort ());
+        }
+
+      packet->RemoveAllPacketTags ();
+      packet->RemoveAllByteTags ();
+
+      // print the received packet
+      uint8_t *buffer = new uint8_t[packet->GetSize ()];
+      packet->CopyData (buffer, packet->GetSize ());
+      std::string s = std::string ((char*)buffer);
+      if (s != "CONNECTION_CLOSE")
+        {
+          NS_LOG_INFO ("Server received: " << s);
+        }
+      else
+        {
+          NS_LOG_INFO ("Server received: " << s);
+        }
+
+
+
+      if (s != "CONNECTION_CLOSE")
+        {
+          NS_LOG_INFO ("##########  QUIC Echo Server ECHOING at time " << Simulator::Now ().GetSeconds () << " ##########");
+          socket->SendTo (packet, 0, from);
+        }
+      //socket->Send (packet, 0);
+      //socket->SendTo (packet, 0, from);
+      //NS_LOG_LOGIC ("Echoed packet");
+      if (InetSocketAddress::IsMatchingType (from) and s != "CONNECTION_CLOSE")
+        {
+          NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s server sent " << packet->GetSize () << " bytes to " <<
+                       InetSocketAddress::ConvertFrom (from).GetIpv4 () << " port " <<
+                       InetSocketAddress::ConvertFrom (from).GetPort ());
+        }
+      else if (Inet6SocketAddress::IsMatchingType (from) and s != "CONNECTION_CLOSE")
+        {
+          NS_LOG_INFO ("At time " << Simulator::Now ().GetSeconds () << "s server sent " << packet->GetSize () << " bytes to " <<
+                       Inet6SocketAddress::ConvertFrom (from).GetIpv6 () << " port " <<
+                       Inet6SocketAddress::ConvertFrom (from).GetPort ());
+        }
+
+
+      if (s != "CONNECTION_CLOSE")
+        {
+          NS_LOG_INFO ("Server sent: " << s);
+        }
+
+      //NS_LOG_LOGIC ("Echoed packettt");
+    }
+}
+
+Ptr<Socket>
+QuicEchoServer::GetSocket ()
+{
+  return m_socket;
+}
+
+void
+QuicEchoServer::SetStreamId (uint32_t streamId)
+{
+  NS_LOG_FUNCTION (this << streamId);
+  NS_ABORT_MSG_IF (streamId == 0, "Stream 0 cannot be used for application data");
+
+  m_streamId = streamId;
+}
+
+uint32_t
+QuicEchoServer::GetStreamId (void) const
+{
+  return m_streamId;
+}
+
+} // Namespace ns3
diff --git a/src/quic/quic-applications/model/quic-echo-server.h b/src/quic/quic-applications/model/quic-echo-server.h
new file mode 100644
index 000000000..a7b331456
--- /dev/null
+++ b/src/quic/quic-applications/model/quic-echo-server.h
@@ -0,0 +1,100 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Davide Marcato <davide.marcato.4@studenti.unipd.it>
+ *          Stefano Ravazzolo <stefano.ravazzolo@studenti.unipd.it>
+ *          Alvise De Biasio <alvise.debiasio@studenti.unipd.it>
+ */
+
+#ifndef QUIC_ECHO_SERVER_H
+#define QUIC_ECHO_SERVER_H
+
+#include "ns3/application.h"
+#include "ns3/event-id.h"
+#include "ns3/ptr.h"
+#include "ns3/address.h"
+
+namespace ns3 {
+
+class Socket;
+class Packet;
+
+/**
+ * \ingroup applications
+ * \defgroup quicecho QuicEcho
+ */
+
+/**
+ * \ingroup quicecho
+ * \brief A Quic Echo server
+ *
+ * Every packet received is sent back.
+ */
+class QuicEchoServer : public Application
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+  QuicEchoServer ();
+  virtual ~QuicEchoServer ();
+
+  Ptr<Socket> GetSocket ();
+
+  /**
+   * Set the ID of the stream to be used in the underlying QUIC socket
+   *
+   * \param streamId the ID of the stream (>0)
+   */
+  void SetStreamId (uint32_t streamId);
+
+  /**
+   * Get the stream ID to be used in the underlying QUIC socket
+   *
+   * \return the stream ID
+   */
+  uint32_t GetStreamId (void) const;
+
+protected:
+  virtual void DoDispose (void);
+
+private:
+
+  virtual void StartApplication (void);
+  virtual void StopApplication (void);
+
+  /**
+   * \brief Handle a packet reception.
+   *
+   * This function is called by lower layers.
+   *
+   * \param socket the socket the packet was received to.
+   */
+  void HandleRead (Ptr<Socket> socket);
+
+  uint16_t m_port; //!< Port on which we listen for incoming packets.
+  Ptr<Socket> m_socket; //!< IPv4 Socket
+  Ptr<Socket> m_socket6; //!< IPv6 Socket
+  Address m_local; //!< local multicast address
+
+  uint32_t m_streamId;
+};
+
+} // namespace ns3
+
+#endif /* QUIC_ECHO_SERVER_H */
+
diff --git a/src/quic/quic-applications/model/quic-server.cc b/src/quic/quic-applications/model/quic-server.cc
new file mode 100644
index 000000000..c63fc514a
--- /dev/null
+++ b/src/quic/quic-applications/model/quic-server.cc
@@ -0,0 +1,182 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ *  Copyright (c) 2007,2008,2009 INRIA, UDCAST
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Amine Ismail <amine.ismail@sophia.inria.fr>
+ *                      <amine.ismail@udcast.com>
+ */
+
+#include "ns3/log.h"
+#include "ns3/ipv4-address.h"
+#include "ns3/nstime.h"
+#include "ns3/inet-socket-address.h"
+#include "ns3/inet6-socket-address.h"
+#include "ns3/socket.h"
+#include "ns3/simulator.h"
+#include "ns3/socket-factory.h"
+#include "ns3/packet.h"
+#include "ns3/uinteger.h"
+#include "ns3/string.h"
+#include "packet-loss-counter.h"
+
+#include "seq-ts-header.h"
+#include "quic-server.h"
+
+namespace ns3 {
+
+NS_LOG_COMPONENT_DEFINE ("QuicServer");
+
+NS_OBJECT_ENSURE_REGISTERED (QuicServer);
+
+
+TypeId
+QuicServer::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("ns3::QuicServer")
+    .SetParent<Application> ()
+    .SetGroupName ("Applications")
+    .AddConstructor<QuicServer> ()
+    .AddAttribute ("Port",
+                   "Port on which we listen for incoming packets.",
+                   UintegerValue (100),
+                   MakeUintegerAccessor (&QuicServer::m_port),
+                   MakeUintegerChecker<uint16_t> ())
+    .AddAttribute ("PacketWindowSize",
+                   "The size of the window used to compute the packet loss. This value should be a multiple of 8.",
+                   UintegerValue (128),
+                   MakeUintegerAccessor (&QuicServer::GetPacketWindowSize,
+                                         &QuicServer::SetPacketWindowSize),
+                   MakeUintegerChecker<uint16_t> (8,256))
+    .AddAttribute ("OutputFilename",
+                   "A string with the name of the file in which rx packets will be logged",
+                   StringValue ("QuicServerRx.txt"),
+                   MakeStringAccessor (&QuicServer::m_outFilename),
+                   MakeStringChecker ())
+  ;
+  return tid;
+}
+
+QuicServer::QuicServer ()
+  : m_lossCounter (0)
+{
+  NS_LOG_FUNCTION (this);
+  m_received = 0;
+}
+
+QuicServer::~QuicServer ()
+{
+  NS_LOG_FUNCTION (this);
+}
+
+uint16_t
+QuicServer::GetPacketWindowSize () const
+{
+  NS_LOG_FUNCTION (this);
+  return m_lossCounter.GetBitMapSize ();
+}
+
+void
+QuicServer::SetPacketWindowSize (uint16_t size)
+{
+  NS_LOG_FUNCTION (this << size);
+  m_lossCounter.SetBitMapSize (size);
+}
+
+uint32_t
+QuicServer::GetLost (void) const
+{
+  NS_LOG_FUNCTION (this);
+  return m_lossCounter.GetLost ();
+}
+
+uint64_t
+QuicServer::GetReceived (void) const
+{
+  NS_LOG_FUNCTION (this);
+  return m_received;
+}
+
+void
+QuicServer::DoDispose (void)
+{
+  NS_LOG_FUNCTION (this);
+  Application::DoDispose ();
+}
+
+void
+QuicServer::StartApplication (void)
+{
+  NS_LOG_FUNCTION (this);
+
+  if (m_socket == 0)
+    {
+      TypeId tid = TypeId::LookupByName ("ns3::QuicSocketFactory");
+      m_socket = Socket::CreateSocket (GetNode (), tid);
+      InetSocketAddress local = InetSocketAddress (Ipv4Address::GetAny (),
+                                                   m_port);
+      if (m_socket->Bind (local) == -1)
+        {
+          NS_FATAL_ERROR ("Failed to bind socket");
+        }
+    }
+
+  m_socket->Listen ();
+  m_socket->SetRecvCallback (MakeCallback (&QuicServer::HandleRead, this));
+
+  if (m_socket6 == 0)
+    {
+      TypeId tid = TypeId::LookupByName ("ns3::QuicSocketFactory");
+      m_socket6 = Socket::CreateSocket (GetNode (), tid);
+      Inet6SocketAddress local = Inet6SocketAddress (Ipv6Address::GetAny (),
+                                                     m_port);
+      if (m_socket6->Bind (local) == -1)
+        {
+          NS_FATAL_ERROR ("Failed to bind socket");
+        }
+    }
+
+  m_socket->Listen ();
+  m_socket6->SetRecvCallback (MakeCallback (&QuicServer::HandleRead, this));
+
+}
+
+void
+QuicServer::StopApplication ()
+{
+  NS_LOG_FUNCTION (this);
+
+  if (m_socket != 0)
+    {
+      m_socket->SetRecvCallback (MakeNullCallback<void, Ptr<Socket> > ());
+    }
+}
+
+void
+QuicServer::HandleRead (Ptr<Socket> socket)
+{
+  NS_LOG_FUNCTION (this << socket);
+  Ptr<Packet> packet;
+  Address from;
+  while ((packet = socket->RecvFrom (from)))
+    {
+      if (packet->GetSize () > 0)
+        {
+          m_received++;
+        }
+    }
+}
+
+} // Namespace ns3
diff --git a/src/quic/quic-applications/model/quic-server.h b/src/quic/quic-applications/model/quic-server.h
new file mode 100644
index 000000000..630630266
--- /dev/null
+++ b/src/quic/quic-applications/model/quic-server.h
@@ -0,0 +1,118 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2007,2008,2009 INRIA, UDCAST
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Author: Amine Ismail <amine.ismail@sophia.inria.fr>
+ *                      <amine.ismail@udcast.com>
+ *
+ */
+
+#ifndef QUIC_SERVER_H
+#define QUIC_SERVER_H
+
+#include "ns3/application.h"
+#include "ns3/event-id.h"
+#include "ns3/ptr.h"
+#include "ns3/address.h"
+#include "packet-loss-counter.h"
+#include <iostream>
+#include <fstream>
+
+namespace ns3 {
+/**
+ * \ingroup applications
+ * \defgroup quicclientserver QuicClientServer
+ */
+
+/**
+ * \ingroup quicclientserver
+ *
+ * \brief A QUIC server, receives QUIC packets from a remote host.
+ *
+ * QUIC packets carry a 32bits sequence number followed by a 64bits time
+ * stamp in their payloads. The application uses the sequence number
+ * to determine if a packet is lost, and the time stamp to compute the delay.
+ */
+class QuicServer : public Application
+{
+public:
+  /**
+   * \brief Get the type ID.
+   * \return the object TypeId
+   */
+  static TypeId GetTypeId (void);
+  QuicServer ();
+  virtual ~QuicServer ();
+  /**
+   * \brief Returns the number of lost packets
+   * \return the number of lost packets
+   */
+  uint32_t GetLost (void) const;
+
+  /**
+   * \brief Returns the number of received packets
+   * \return the number of received packets
+   */
+  uint64_t GetReceived (void) const;
+
+  /**
+   * \brief Returns the size of the window used for checking loss.
+   * \return the size of the window used for checking loss.
+   */
+  uint16_t GetPacketWindowSize () const;
+
+  /**
+   * \brief Set the size of the window used for checking loss. This value should
+   *  be a multiple of 8
+   * \param size the size of the window used for checking loss. This value should
+   *  be a multiple of 8
+   */
+  void SetPacketWindowSize (uint16_t size);
+
+protected:
+  virtual void DoDispose (void);
+
+private:
+
+  virtual void StartApplication (void);
+  virtual void StopApplication (void);
+
+  /**
+   * \brief Handle a packet reception.
+   *
+   * This function is called by lower layers.
+   *
+   * \param socket the socket the packet was received to.
+   */
+  void HandleRead (Ptr<Socket> socket);
+
+  uint16_t m_port; //!< Port on which we listen for incoming packets.
+  Ptr<Socket> m_socket; //!< IPv4 Socket
+  Ptr<Socket> m_socket6; //!< IPv6 Socket
+  uint64_t m_received; //!< Number of received packets
+  PacketLossCounter m_lossCounter; //!< Lost packet counter
+
+  Time m_txTs; //!< Time at which the last packet with header was received
+  // uint32_t m_currentSequenceNumber; //!< SN of the last packet with header
+  // uint32_t m_hSize; //!< Size of the last header received
+
+  std::string m_outFilename;
+  std::ofstream m_outFile;
+};
+
+} // namespace ns3
+
+#endif /* QUIC_SERVER_H */
diff --git a/src/quic/test/quic-header-test.cc b/src/quic/test/quic-header-test.cc
new file mode 100644
index 000000000..3b46478ff
--- /dev/null
+++ b/src/quic/test/quic-header-test.cc
@@ -0,0 +1,1212 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *          
+ */
+
+#include "ns3/test.h"
+#include "ns3/core-module.h"
+#include "ns3/packet.h"
+#include "ns3/log.h"
+#include <vector>
+#include <stdio.h>
+#include <string.h>
+
+#include "ns3/quic-socket-rx-buffer.h"
+#include "ns3/quic-stream-rx-buffer.h"
+#include "ns3/buffer.h"
+#include "ns3/quic-header.h"
+#include "ns3/quic-subheader.h"
+
+using namespace ns3;
+
+#define GET_RANDOM_UINT64(RandomVariable) \
+  static_cast<uint64_t> (RandomVariable->GetInteger (0, UINT32_MAX << 31))
+
+#define GET_RANDOM_UINT32(RandomVariable) \
+  static_cast<uint32_t> (RandomVariable->GetInteger (0, UINT32_MAX))
+
+#define GET_RANDOM_UINT16(RandomVariable) \
+  static_cast<uint16_t> (RandomVariable->GetInteger (0, UINT16_MAX))
+
+#define GET_RANDOM_UINT8(RandomVariable) \
+  static_cast<uint8_t> (RandomVariable->GetInteger (0, UINT8_MAX))
+
+NS_LOG_COMPONENT_DEFINE("QuicHeaderTestSuite");
+
+/**
+ * \ingroup internet-tests
+ * \ingroup tests
+ *
+ * \brief The QuicHeader Test
+ */
+class QuicHeaderTestCase : public TestCase
+{
+public:
+  QuicHeaderTestCase ();
+
+private:
+  virtual void
+  DoRun (void);
+  virtual void
+  DoTeardown (void);
+
+  /**
+   * \brief Check the correct header serialization/deserialization.
+   */
+  void
+  TestQuicHeaderSerializeDeserialize ();
+
+};
+
+/**
+ * \ingroup internet-tests
+ * \ingroup tests
+ *
+ * \brief The QuicSubHeader Test
+ */
+class QuicSubHeaderTestCase : public TestCase
+{
+public:
+  QuicSubHeaderTestCase ();
+
+private:
+  virtual void
+  DoRun (void);
+  virtual void
+  DoTeardown (void);
+
+  /**
+   * \brief Check the correct subheader serialization/deserialization.
+   */
+  void
+  TestQuicSubHeaderSerializeDeserialize ();
+
+};
+
+
+QuicHeaderTestCase::QuicHeaderTestCase () :
+    TestCase ("QuicHeader Test")
+{
+}
+
+void
+QuicHeaderTestCase::DoRun ()
+{
+  TestQuicHeaderSerializeDeserialize ();
+}
+
+QuicSubHeaderTestCase::QuicSubHeaderTestCase () :
+    TestCase ("QuicSubHeader Test")
+{
+}
+
+void
+QuicSubHeaderTestCase::DoRun ()
+{
+  TestQuicSubHeaderSerializeDeserialize ();
+}
+
+
+void
+QuicHeaderTestCase::TestQuicHeaderSerializeDeserialize ()
+{
+  Buffer buffer;
+  QuicHeader head;
+  QuicHeader copyHead;
+
+  Ptr<UniformRandomVariable> x = CreateObject<UniformRandomVariable> ();
+  for (uint32_t i = 0; i < 1000; ++i)
+    {
+      uint64_t connectionId = GET_RANDOM_UINT64 (x);
+      uint32_t version = GET_RANDOM_UINT32 (x);
+      SequenceNumber32 packetNumber = SequenceNumber32(GET_RANDOM_UINT32 (x));
+      std::vector<uint32_t> supportedVersions;
+
+      for ( int h_case = QuicHeader::VERSION_NEGOTIATION; 
+        h_case != QuicHeader::NONE; h_case++ )
+        {
+          switch ( h_case )
+          {
+              case QuicHeader::VERSION_NEGOTIATION: // TODO: Update when full supported
+                  head = QuicHeader::CreateVersionNegotiation (connectionId, version, supportedVersions);
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), 17, 
+                    "QuicHeader for Long Packet is not 17 word");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFormat (), QuicHeader::LONG,
+                                             "Different format found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetTypeByte (), QuicHeader::VERSION_NEGOTIATION,
+                                             "Different type byte found");
+                  NS_TEST_ASSERT_MSG_EQ (connectionId, head.GetConnectionId (),
+                                             "Different connection id found");
+                  NS_TEST_ASSERT_MSG_EQ (version, head.GetVersion (),
+                                             "Different version found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), 17, 
+                    "QuicHeader for Long Packet is not 17 word");
+
+                  copyHead.Deserialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFormat (), QuicHeader::LONG,
+                                             "Different format found in deserialized header");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetTypeByte (), QuicHeader::VERSION_NEGOTIATION,
+                                         "Different type byte found in deserialized header");
+                  NS_TEST_ASSERT_MSG_EQ (connectionId, copyHead.GetConnectionId (),
+                                             "Different connection id found in deserialized header");
+                  NS_TEST_ASSERT_MSG_EQ (version, copyHead.GetVersion (),
+                                             "Different version found in deserialized header");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), 17, 
+                    "QuicHeader for Long Packet is not 17 word in deserialized header"); 
+                  break;
+              case QuicHeader::INITIAL:
+                  head = QuicHeader::CreateInitial (connectionId, version, packetNumber);
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), 17, 
+                    "QuicHeader for Long Packet is not 17 word");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFormat (), QuicHeader::LONG,
+                                             "Different format found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetTypeByte (), QuicHeader::INITIAL,
+                                             "Different type byte found");
+                  NS_TEST_ASSERT_MSG_EQ (connectionId, head.GetConnectionId (),
+                                             "Different connection id found");
+                  NS_TEST_ASSERT_MSG_EQ (version, head.GetVersion (),
+                                             "Different version found");
+                  NS_TEST_ASSERT_MSG_EQ (packetNumber, head.GetPacketNumber (),
+                                             "Different packet number found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), 17, 
+                    "QuicHeader for Long Packet is not 17 word");
+
+                  copyHead.Deserialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFormat (), QuicHeader::LONG,
+                                             "Different format found in deserialized header");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetTypeByte (), QuicHeader::INITIAL,
+                                         "Different type byte found in deserialized header");
+                  NS_TEST_ASSERT_MSG_EQ (connectionId, copyHead.GetConnectionId (),
+                                             "Different connection id found in deserialized header");
+                  NS_TEST_ASSERT_MSG_EQ (version, copyHead.GetVersion (),
+                                             "Different version found in deserialized header");
+                  NS_TEST_ASSERT_MSG_EQ (packetNumber, copyHead.GetPacketNumber (),
+                                             "Different packet number found in deserialized header");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), 17, 
+                    "QuicHeader for Long Packet is not 17 word in deserialized header"); 
+                  break;
+              case QuicHeader::RETRY:
+                  head = QuicHeader::CreateRetry (connectionId, version, packetNumber);
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), 17, 
+                    "QuicHeader for Long Packet is not 17 word");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFormat (), QuicHeader::LONG,
+                                             "Different format found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetTypeByte (), QuicHeader::RETRY,
+                                             "Different type byte found");
+                  NS_TEST_ASSERT_MSG_EQ (connectionId, head.GetConnectionId (),
+                                             "Different connection id found");
+                  NS_TEST_ASSERT_MSG_EQ (version, head.GetVersion (),
+                                             "Different version found");
+                  NS_TEST_ASSERT_MSG_EQ (packetNumber, head.GetPacketNumber (),
+                                             "Different packet number found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), 17, 
+                    "QuicHeader for Long Packet is not 17 word");
+
+                  copyHead.Deserialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFormat (), QuicHeader::LONG,
+                                             "Different format found in deserialized header");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetTypeByte (), QuicHeader::RETRY,
+                                         "Different type byte found in deserialized header");
+                  NS_TEST_ASSERT_MSG_EQ (connectionId, copyHead.GetConnectionId (),
+                                             "Different connection id found in deserialized header");
+                  NS_TEST_ASSERT_MSG_EQ (version, copyHead.GetVersion (),
+                                             "Different version found in deserialized header");
+                  NS_TEST_ASSERT_MSG_EQ (packetNumber, copyHead.GetPacketNumber (),
+                                             "Different packet number found in deserialized header");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), 17, 
+                    "QuicHeader for Long Packet is not 17 word in deserialized header"); 
+                  break;
+              case QuicHeader::HANDSHAKE:
+                  head = QuicHeader::CreateHandshake (connectionId, version, packetNumber);
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), 17, 
+                    "QuicHeader for Long Packet is not 17 word");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFormat (), QuicHeader::LONG,
+                                             "Different format found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetTypeByte (), QuicHeader::HANDSHAKE,
+                                             "Different type byte found");
+                  NS_TEST_ASSERT_MSG_EQ (connectionId, head.GetConnectionId (),
+                                             "Different connection id found");
+                  NS_TEST_ASSERT_MSG_EQ (version, head.GetVersion (),
+                                             "Different version found");
+                  NS_TEST_ASSERT_MSG_EQ (packetNumber, head.GetPacketNumber (),
+                                             "Different packet number found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), 17, 
+                    "QuicHeader for Long Packet is not 17 word");
+
+                  copyHead.Deserialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFormat (), QuicHeader::LONG,
+                                             "Different format found in deserialized header");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetTypeByte (), QuicHeader::HANDSHAKE,
+                                         "Different type byte found in deserialized header");
+                  NS_TEST_ASSERT_MSG_EQ (connectionId, copyHead.GetConnectionId (),
+                                             "Different connection id found in deserialized header");
+                  NS_TEST_ASSERT_MSG_EQ (version, copyHead.GetVersion (),
+                                             "Different version found in deserialized header");
+                  NS_TEST_ASSERT_MSG_EQ (packetNumber, copyHead.GetPacketNumber (),
+                                             "Different packet number found in deserialized header");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), 17, 
+                    "QuicHeader for Long Packet is not 17 word in deserialized header"); 
+                  break;
+              case QuicHeader::ZRTT_PROTECTED:
+                  head = QuicHeader::Create0RTT (connectionId, version, packetNumber);
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), 17, 
+                    "QuicHeader for Long Packet is not 17 word");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFormat (), QuicHeader::LONG,
+                                             "Different format found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetTypeByte (), QuicHeader::ZRTT_PROTECTED,
+                                             "Different type byte found");
+                  NS_TEST_ASSERT_MSG_EQ (connectionId, head.GetConnectionId (),
+                                             "Different connection id found");
+                  NS_TEST_ASSERT_MSG_EQ (version, head.GetVersion (),
+                                             "Different version found");
+                  NS_TEST_ASSERT_MSG_EQ (packetNumber, head.GetPacketNumber (),
+                                             "Different packet number found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), 17, 
+                    "QuicHeader for Long Packet is not 17 word");
+
+                  copyHead.Deserialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFormat (), QuicHeader::LONG,
+                                             "Different format found in deserialized header");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetTypeByte (), QuicHeader::ZRTT_PROTECTED,
+                                         "Different type byte found in deserialized header");
+                  NS_TEST_ASSERT_MSG_EQ (connectionId, copyHead.GetConnectionId (),
+                                             "Different connection id found in deserialized header");
+                  NS_TEST_ASSERT_MSG_EQ (version, copyHead.GetVersion (),
+                                             "Different version found in deserialized header");
+                  NS_TEST_ASSERT_MSG_EQ (packetNumber, copyHead.GetPacketNumber (),
+                                             "Different packet number found in deserialized header");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), 17, 
+                    "QuicHeader for Long Packet is not 17 word in deserialized header"); 
+                  break;
+               default:
+                  break;
+          }
+        }
+        
+        bool connectionIdFlag = (i % 2 == 0) ? true : false;
+        bool keyPhaseBit = (i % 2 == 0) ? QuicHeader::PHASE_ZERO : QuicHeader::PHASE_ONE;
+
+        head = QuicHeader::CreateShort (connectionId, packetNumber, connectionIdFlag, keyPhaseBit);
+
+        NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), 1 + 8*connectionIdFlag + head.GetPacketNumLen ()/8, 
+          "QuicHeader for Short Packet is not as expected");
+
+        buffer.AddAtStart (head.GetSerializedSize ());
+        head.Serialize (buffer.Begin ());
+
+        NS_TEST_ASSERT_MSG_EQ (head.GetFormat (), QuicHeader::SHORT,
+                                   "Different format found");
+        NS_TEST_ASSERT_MSG_EQ (head.GetKeyPhaseBit (), keyPhaseBit,
+                                   "Different key phase bit found");
+        NS_TEST_ASSERT_MSG_EQ (packetNumber, head.GetPacketNumber (),
+                                   "Different packet number found");        
+        if (connectionIdFlag) {
+          NS_TEST_ASSERT_MSG_EQ (connectionId, head.GetConnectionId (),
+                                             "Different connection id found");
+        }
+        NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), 1 + 8*connectionIdFlag + head.GetPacketNumLen ()/8, 
+          "QuicHeader for Short Packet is not as expected");
+
+        copyHead.Deserialize (buffer.Begin ());
+
+        NS_TEST_ASSERT_MSG_EQ (copyHead.GetFormat (), QuicHeader::SHORT,
+                                   "Different format found");
+        NS_TEST_ASSERT_MSG_EQ (copyHead.GetKeyPhaseBit (), keyPhaseBit,
+                                   "Different key phase bit found");
+        NS_TEST_ASSERT_MSG_EQ (packetNumber, copyHead.GetPacketNumber (),
+                                   "Different packet number found");        
+        if (connectionIdFlag) {
+          NS_TEST_ASSERT_MSG_EQ (connectionId, copyHead.GetConnectionId (),
+                                             "Different connection id found");
+        }
+        NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), 1 + 8*connectionIdFlag + copyHead.GetPacketNumLen ()/8, 
+          "QuicHeader for Short Packet is not as expected");
+    } 
+}
+
+void
+QuicSubHeaderTestCase::TestQuicSubHeaderSerializeDeserialize ()
+{
+  Buffer buffer;
+  QuicSubheader head;
+  QuicSubheader copyHead;
+
+  Ptr<UniformRandomVariable> x = CreateObject<UniformRandomVariable> ();
+  for (uint32_t i = 0; i < 1000; ++i)
+    {
+      uint32_t headSize = 0;
+      uint64_t streamId = GET_RANDOM_UINT64 (x);
+      uint16_t applicationErrorCode = GET_RANDOM_UINT16 (x);
+      uint64_t finalOffset = GET_RANDOM_UINT64 (x);
+      uint16_t errorCode = GET_RANDOM_UINT16 (x);
+      const char* reasonPhrase = "test";
+      uint64_t maxData = GET_RANDOM_UINT64 (x);
+      uint64_t maxStreamData = GET_RANDOM_UINT64 (x);
+      uint64_t maxStreamId = GET_RANDOM_UINT64 (x);
+      uint64_t offset = GET_RANDOM_UINT64 (x);
+      uint64_t sequence = GET_RANDOM_UINT64 (x);
+      uint64_t connectionId = GET_RANDOM_UINT64 (x);
+      uint32_t largestAcknowledged = GET_RANDOM_UINT32 (x);
+      uint64_t ackDelay = GET_RANDOM_UINT64 (x);
+      uint32_t firstAckBlock = GET_RANDOM_UINT32 (x);
+      std::vector<uint32_t> gaps(10, 1);
+      std::vector<uint32_t> additionalAckBlocks(10, 1);
+      uint8_t data = GET_RANDOM_UINT8 (x);
+      uint64_t length = GET_RANDOM_UINT64 (x);
+
+      for ( int h_case = QuicSubheader::PADDING; 
+        h_case != QuicSubheader::STREAM111 +1; h_case++ )
+        {
+          switch ( h_case )
+          {
+              case QuicSubheader::PADDING:
+                  head = QuicSubheader::CreatePadding ();
+
+                  headSize = 1;
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for PADDING frame is not as expected");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFrameType (), QuicSubheader::PADDING,
+                                             "Different frame type found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for PADDING frame is not as expected");
+
+                  copyHead.Deserialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFrameType (), QuicSubheader::PADDING,
+                                             "Different frame type found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for PADDING frame is not as expected in deserialized subheader");
+                  break;
+              case QuicSubheader::RST_STREAM:
+                  head = QuicSubheader::CreateRstStream (streamId, applicationErrorCode, finalOffset);
+
+                  headSize = 3 + QuicSubheader::GetVarInt64Size(streamId)/8 + QuicSubheader::GetVarInt64Size(finalOffset)/8;
+                  
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for RST_STREAM frame is not as expected");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFrameType (), QuicSubheader::RST_STREAM,
+                                             "Different frame type found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetStreamId (), streamId,
+                                             "Different stream id found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetErrorCode (), applicationErrorCode,
+                                             "Different application error code id found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetOffset (), finalOffset,
+                                             "Different final offset found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for RST_STREAM frame is not as expected");
+
+                  copyHead.Deserialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetFrameType (), QuicSubheader::RST_STREAM,
+                                             "Different frame type found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetStreamId (), streamId,
+                                             "Different stream id found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetErrorCode (), applicationErrorCode,
+                                             "Different application error code id found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetOffset (), finalOffset,
+                                             "Different final offset found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for RST_STREAM frame is not as expected in deserialized subheader");
+                  break;
+              case QuicSubheader::CONNECTION_CLOSE:
+                  head = QuicSubheader::CreateConnectionClose (errorCode, reasonPhrase);
+
+                  headSize = 3 + QuicSubheader::GetVarInt64Size(strlen(reasonPhrase))/8 + strlen(reasonPhrase);
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for CONNECTION_CLOSE frame is not as expected");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFrameType (), QuicSubheader::CONNECTION_CLOSE,
+                                             "Different frame type found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetErrorCode (), errorCode,
+                                             "Different error code id found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetReasonPhraseLength (), strlen(reasonPhrase),
+                                             "Different reason phrase lenght found");
+                  for (uint64_t j = 0; j < strlen(reasonPhrase); j++)
+                    {
+                      NS_TEST_ASSERT_MSG_EQ (head.GetReasonPhrase ()[j], reasonPhrase[j],
+                                               "Different reason phrase found");
+                    }
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for CONNECTION_CLOSE frame is not as expected");
+
+                  copyHead.Deserialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetFrameType (), QuicSubheader::CONNECTION_CLOSE,
+                                             "Different frame type found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetErrorCode (), errorCode,
+                                             "Different error code id found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetReasonPhraseLength (), strlen(reasonPhrase),
+                                             "Different reason phrase lenght found in deserialized subheader");
+                  for (uint64_t j = 0; j < strlen(reasonPhrase); j++)
+                    {
+                      NS_TEST_ASSERT_MSG_EQ (copyHead.GetReasonPhrase ()[j], reasonPhrase[j],
+                                               "Different reason phrase found");
+                    }
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for CONNECTION_CLOSE frame is not as expected in deserialized subheader");
+                  break;
+              case QuicSubheader::APPLICATION_CLOSE:
+                  head = QuicSubheader::CreateApplicationClose (errorCode, reasonPhrase);
+
+                  headSize = 3 + QuicSubheader::GetVarInt64Size(strlen(reasonPhrase))/8 + strlen(reasonPhrase);
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for APPLICATION_CLOSE frame is not as expected");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFrameType (), QuicSubheader::APPLICATION_CLOSE,
+                                             "Different frame type found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetErrorCode (), errorCode,
+                                             "Different error code id found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetReasonPhraseLength (), strlen(reasonPhrase),
+                                             "Different reason phrase lenght found");
+                  for (uint64_t j = 0; j < strlen(reasonPhrase); j++)
+                    {
+                      NS_TEST_ASSERT_MSG_EQ (head.GetReasonPhrase ()[j], reasonPhrase[j],
+                                               "Different reason phrase found");
+                    }
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for APPLICATION_CLOSE frame is not as expected");
+
+                  copyHead.Deserialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetFrameType (), QuicSubheader::APPLICATION_CLOSE,
+                                             "Different frame type found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetErrorCode (), errorCode,
+                                             "Different error code id found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetReasonPhraseLength (), strlen(reasonPhrase),
+                                             "Different reason phrase lenght found in deserialized subheader");
+                  for (uint64_t j = 0; j < strlen(reasonPhrase); j++)
+                    {
+                      NS_TEST_ASSERT_MSG_EQ (copyHead.GetReasonPhrase ()[j], reasonPhrase[j],
+                                               "Different reason phrase found");
+                    }
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for APPLICATION_CLOSE frame is not as expected in deserialized subheader");
+                  break;
+              case QuicSubheader::MAX_DATA:
+                  head = QuicSubheader::CreateMaxData (maxData);
+
+                  headSize = 1 + QuicSubheader::GetVarInt64Size(maxData)/8;
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for MAX_DATA frame is not as expected");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFrameType (), QuicSubheader::MAX_DATA,
+                                             "Different frame type found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetMaxData (), maxData,
+                                             "Different max data found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for MAX_DATA frame is not as expected");
+
+                  copyHead.Deserialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetFrameType (), QuicSubheader::MAX_DATA,
+                                             "Different frame type found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetMaxData (), maxData,
+                                             "Different max data found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for MAX_DATA frame is not as expected in deserialized subheader");
+                  break;
+              case QuicSubheader::MAX_STREAM_DATA:
+                  head = QuicSubheader::CreateMaxStreamData (streamId, maxStreamData);
+
+                  headSize = 1 + QuicSubheader::GetVarInt64Size(streamId)/8 + QuicSubheader::GetVarInt64Size(maxStreamData)/8;
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for MAX_STREAM_DATA frame is not as expected");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFrameType (), QuicSubheader::MAX_STREAM_DATA,
+                                             "Different frame type found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetStreamId (), streamId,
+                                             "Different stream id found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetMaxStreamData (), maxStreamData,
+                                             "Different max stream data found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for MAX_STREAM_DATA frame is not as expected");
+
+                  copyHead.Deserialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetFrameType (), QuicSubheader::MAX_STREAM_DATA,
+                                             "Different frame type found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetStreamId (), streamId,
+                                             "Different stream id found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetMaxStreamData (), maxStreamData,
+                                             "Different max stream data found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for MAX_STREAM_DATA frame is not as expected in deserialized subheader");
+                  break;
+              case QuicSubheader::MAX_STREAM_ID:
+                  head = QuicSubheader::CreateMaxStreamId (maxStreamId);
+
+                  headSize = 1 + QuicSubheader::GetVarInt64Size(maxStreamId)/8;
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for MAX_STREAM_ID frame is not as expected");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFrameType (), QuicSubheader::MAX_STREAM_ID,
+                                             "Different frame type found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetMaxStreamId (), maxStreamId,
+                                             "Different max stream id found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for MAX_STREAM_ID frame is not as expected");
+
+                  copyHead.Deserialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetFrameType (), QuicSubheader::MAX_STREAM_ID,
+                                             "Different frame type found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetMaxStreamId (), maxStreamId,
+                                             "Different max stream id found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for MAX_STREAM_ID frame is not as expected in deserialized subheader");
+                  break;
+              case QuicSubheader::PING:
+                  head = QuicSubheader::CreatePing ();
+
+                  headSize = 1;
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for PING frame is not as expected");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFrameType (), QuicSubheader::PING,
+                                             "Different frame type found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for PING frame is not as expected");
+
+                  copyHead.Deserialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetFrameType (), QuicSubheader::PING,
+                                             "Different frame type found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for PING frame is not as expected in deserialized subheader");
+                  break;
+              case QuicSubheader::BLOCKED:
+                  head = QuicSubheader::CreateBlocked (offset);
+
+                  headSize = 1 + QuicSubheader::GetVarInt64Size(offset)/8;
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for BLOCKED frame is not as expected");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFrameType (), QuicSubheader::BLOCKED,
+                                             "Different frame type found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetOffset (), offset,
+                                             "Different offset found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for BLOCKED frame is not as expected");
+
+                  copyHead.Deserialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetFrameType (), QuicSubheader::BLOCKED,
+                                             "Different frame type found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetOffset (), offset,
+                                             "Different offset found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for BLOCKED frame is not as expected in deserialized subheader");
+                  break;
+              case QuicSubheader::STREAM_BLOCKED:
+                  head = QuicSubheader::CreateStreamBlocked (streamId, offset);
+
+                  headSize = 1 + QuicSubheader::GetVarInt64Size(streamId)/8 + QuicSubheader::GetVarInt64Size(offset)/8;
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM_BLOCKED frame is not as expected");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFrameType (), QuicSubheader::STREAM_BLOCKED,
+                                             "Different frame type found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetOffset (), offset,
+                                             "Different offset found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetStreamId (), streamId,
+                                             "Different stream id found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM_BLOCKED frame is not as expected");
+
+                  copyHead.Deserialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetFrameType (), QuicSubheader::STREAM_BLOCKED,
+                                             "Different frame type found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetOffset (), offset,
+                                             "Different offset found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetStreamId (), streamId,
+                                             "Different stream id found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM_BLOCKED frame is not as expected in deserialized subheader");
+                  break;
+              case QuicSubheader::STREAM_ID_BLOCKED:
+                  head = QuicSubheader::CreateStreamIdBlocked (streamId);
+
+                  headSize = 1 + QuicSubheader::GetVarInt64Size(streamId)/8;
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM_ID_BLOCKED frame is not as expected");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFrameType (), QuicSubheader::STREAM_ID_BLOCKED,
+                                             "Different frame type found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetStreamId (), streamId,
+                                             "Different stream id found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM_ID_BLOCKED frame is not as expected");
+
+                  copyHead.Deserialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetFrameType (), QuicSubheader::STREAM_ID_BLOCKED,
+                                             "Different frame type found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetStreamId (), streamId,
+                                             "Different stream id found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM_ID_BLOCKED frame is not as expected in deserialized subheader");
+                  break;
+              case QuicSubheader::NEW_CONNECTION_ID:
+                  head = QuicSubheader::CreateNewConnectionId (sequence, connectionId);
+
+                  headSize = 9 + QuicSubheader::GetVarInt64Size(sequence)/8;
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for NEW_CONNECTION_ID frame is not as expected");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFrameType (), QuicSubheader::NEW_CONNECTION_ID,
+                                             "Different frame type found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetConnectionId (), connectionId,
+                                             "Different connection id found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSequence (), sequence,
+                                             "Different sequence found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for NEW_CONNECTION_ID frame is not as expected");
+
+                  copyHead.Deserialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetFrameType (), QuicSubheader::NEW_CONNECTION_ID,
+                                             "Different frame type found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetConnectionId (), connectionId,
+                                             "Different connection id found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSequence (), sequence,
+                                             "Different sequence found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for NEW_CONNECTION_ID frame is not as expected in deserialized subheader");
+                  break;
+              case QuicSubheader::STOP_SENDING:
+                  head = QuicSubheader::CreateStopSending (streamId, applicationErrorCode);
+
+                  headSize = 3 + QuicSubheader::GetVarInt64Size(streamId)/8;
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STOP_SENDING frame is not as expected");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFrameType (), QuicSubheader::STOP_SENDING,
+                                             "Different frame type found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetStreamId (), streamId,
+                                             "Different stream id found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetErrorCode (), applicationErrorCode,
+                                             "Different application error code found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STOP_SENDING frame is not as expected");
+
+                  copyHead.Deserialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetFrameType (), QuicSubheader::STOP_SENDING,
+                                             "Different frame type found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetStreamId (), streamId,
+                                             "Different stream id found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetErrorCode (), applicationErrorCode,
+                                             "Different application error code found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STOP_SENDING frame is not as expected in deserialized subheader");
+                  break;
+              case QuicSubheader::ACK:
+                  head = QuicSubheader::CreateAck (largestAcknowledged, ackDelay, firstAckBlock, gaps, additionalAckBlocks);
+
+                  headSize = 1 + QuicSubheader::GetVarInt64Size(largestAcknowledged)/8 + 
+                    QuicSubheader::GetVarInt64Size(ackDelay)/8 + QuicSubheader::GetVarInt64Size(gaps.size ())/8 +
+                    QuicSubheader::GetVarInt64Size(firstAckBlock)/8;
+                  for (uint64_t j = 0; j < gaps.size (); j++)
+                    {
+                      headSize += QuicSubheader::GetVarInt64Size (gaps[j])/8;
+                      headSize += QuicSubheader::GetVarInt64Size (additionalAckBlocks[j])/8;
+                    }
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for ACK frame is not as expected");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFrameType (), QuicSubheader::ACK,
+                                             "Different frame type found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetLargestAcknowledged (), largestAcknowledged,
+                                             "Different largest acknowledged found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetAckDelay (), ackDelay,
+                                             "Different ack delay found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetAckBlockCount (), gaps.size (),
+                                             "Different ack block count found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFirstAckBlock (), firstAckBlock,
+                                             "Different first ack block found");
+                  for (uint64_t j = 0; j < gaps.size (); j++)
+                    {
+                      NS_TEST_ASSERT_MSG_EQ (head.GetGaps ()[j], gaps[j],
+                                               "Different gap found");
+                      NS_TEST_ASSERT_MSG_EQ (head.GetAdditionalAckBlocks ()[j], additionalAckBlocks[j],
+                                               "Different additional ack block found");
+                    }
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for ACK frame is not as expected");
+
+                  copyHead.Deserialize (buffer.Begin ());
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetFrameType (), QuicSubheader::ACK,
+                                             "Different frame type found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetLargestAcknowledged (), largestAcknowledged,
+                                             "Different largest acknowledged found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetAckDelay (), ackDelay,
+                                             "Different ack delay found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetAckBlockCount (), gaps.size (),
+                                             "Different ack block count found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetFirstAckBlock (), firstAckBlock,
+                                             "Different first ack block found in deserialized subheader");
+
+                  for (uint64_t j = 0; j < gaps.size (); j++)
+                    {
+                      NS_TEST_ASSERT_MSG_EQ (copyHead.GetGaps ()[j], gaps[j],
+                                               "Different gap found in deserialized subheader");
+                      NS_TEST_ASSERT_MSG_EQ (copyHead.GetAdditionalAckBlocks ()[j], additionalAckBlocks[j],
+                                               "Different additional ack block found in deserialized subheader");
+                    }
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for ACK frame is not as expected in deserialized subheader");
+                  break;
+              case QuicSubheader::PATH_CHALLENGE:
+                  head = QuicSubheader::CreatePathChallenge (data);
+
+                  headSize = 2;
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for PATH_CHALLENGE frame is not as expected");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFrameType (), QuicSubheader::PATH_CHALLENGE,
+                                             "Different frame type found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetData (), data,
+                                             "Different data found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for PATH_CHALLENGE frame is not as expected");
+
+                  copyHead.Deserialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetFrameType (), QuicSubheader::PATH_CHALLENGE,
+                                             "Different frame type found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetData (), data,
+                                             "Different data found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for PATH_CHALLENGE frame is not as expected in deserialized subheader");
+                  break;
+              case QuicSubheader::PATH_RESPONSE:
+                  head = QuicSubheader::CreatePathResponse (data);
+
+                  headSize = 2;
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for PATH_RESPONSE frame is not as expected");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFrameType (), QuicSubheader::PATH_RESPONSE,
+                                             "Different frame type found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetData (), data,
+                                             "Different data found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for PATH_RESPONSE frame is not as expected");
+
+                  copyHead.Deserialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetFrameType (), QuicSubheader::PATH_RESPONSE,
+                                             "Different frame type found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetData (), data,
+                                             "Different data found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for PATH_RESPONSE frame is not as expected in deserialized subheader");
+                  break;
+              case QuicSubheader::STREAM000:
+                  head = QuicSubheader::CreateStreamSubHeader (streamId, offset, length, 
+                    false, false, false);
+
+                  headSize = 1 + QuicSubheader::GetVarInt64Size(streamId)/8;
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM000 frame is not as expected");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFrameType (), QuicSubheader::STREAM000,
+                                             "Different frame type found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetStreamId (), streamId,
+                                             "Different stream id found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM000 frame is not as expected");
+
+                  copyHead.Deserialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetFrameType (), QuicSubheader::STREAM000,
+                                             "Different frame type found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetStreamId (), streamId,
+                                             "Different stream id found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM000 frame is not as expected in deserialized subheader");
+                  break;
+              case QuicSubheader::STREAM001:
+                  head = QuicSubheader::CreateStreamSubHeader (streamId, offset, length, 
+                    false, false, true);
+
+                  headSize = 1 + QuicSubheader::GetVarInt64Size(streamId)/8;
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM001 frame is not as expected");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFrameType (), QuicSubheader::STREAM001,
+                                             "Different frame type found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetStreamId (), streamId,
+                                             "Different stream id found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM001 frame is not as expected");
+
+                  copyHead.Deserialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetFrameType (), QuicSubheader::STREAM001,
+                                             "Different frame type found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetStreamId (), streamId,
+                                             "Different stream id found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM001 frame is not as expected in deserialized subheader");
+                  break;
+              case QuicSubheader::STREAM010:
+                  head = QuicSubheader::CreateStreamSubHeader (streamId, offset, length, 
+                    false, true, false);
+
+                  headSize = 1 + QuicSubheader::GetVarInt64Size(streamId)/8 + QuicSubheader::GetVarInt64Size(length)/8;
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM010 frame is not as expected");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFrameType (), QuicSubheader::STREAM010,
+                                             "Different frame type found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetStreamId (), streamId,
+                                             "Different stream id found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetLength (), length,
+                                             "Different length found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM010 frame is not as expected");
+
+                  copyHead.Deserialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetFrameType (), QuicSubheader::STREAM010,
+                                             "Different frame type found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetStreamId (), streamId,
+                                             "Different stream id found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetLength (), length,
+                                             "Different length found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM010 frame is not as expected in deserialized subheader");
+                  break;
+              case QuicSubheader::STREAM011:
+                  head = QuicSubheader::CreateStreamSubHeader (streamId, offset, length, 
+                    false, true, true);
+
+                  headSize = 1 + QuicSubheader::GetVarInt64Size(streamId)/8 + QuicSubheader::GetVarInt64Size(length)/8;
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM011 frame is not as expected");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFrameType (), QuicSubheader::STREAM011,
+                                             "Different frame type found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetStreamId (), streamId,
+                                             "Different stream id found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetLength (), length,
+                                             "Different length found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM011 frame is not as expected");
+
+                  copyHead.Deserialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetFrameType (), QuicSubheader::STREAM011,
+                                             "Different frame type found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetStreamId (), streamId,
+                                             "Different stream id found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetLength (), length,
+                                             "Different length found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM011 frame is not as expected in deserialized subheader");
+                  break;
+              case QuicSubheader::STREAM100:
+                  head = QuicSubheader::CreateStreamSubHeader (streamId, offset, length, 
+                    true, false, false);
+
+                  headSize = 1 + QuicSubheader::GetVarInt64Size(streamId)/8 + QuicSubheader::GetVarInt64Size(offset)/8;
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM100 frame is not as expected");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFrameType (), QuicSubheader::STREAM100,
+                                             "Different frame type found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetStreamId (), streamId,
+                                             "Different stream id found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetOffset (), offset,
+                                             "Different offset found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM100 frame is not as expected");
+
+                  copyHead.Deserialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetFrameType (), QuicSubheader::STREAM100,
+                                             "Different frame type found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetStreamId (), streamId,
+                                             "Different stream id found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetOffset (), offset,
+                                             "Different offset in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM100 frame is not as expected in deserialized subheader");
+                  break;
+              case QuicSubheader::STREAM101:
+                  head = QuicSubheader::CreateStreamSubHeader (streamId, offset, length, 
+                    true, false, true);
+
+                  headSize = 1 + QuicSubheader::GetVarInt64Size(streamId)/8 + QuicSubheader::GetVarInt64Size(offset)/8;
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM101 frame is not as expected");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFrameType (), QuicSubheader::STREAM101,
+                                             "Different frame type found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetStreamId (), streamId,
+                                             "Different stream id found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetOffset (), offset,
+                                             "Different offset found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM101 frame is not as expected");
+
+                  copyHead.Deserialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetFrameType (), QuicSubheader::STREAM101,
+                                             "Different frame type found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetStreamId (), streamId,
+                                             "Different stream id found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetOffset (), offset,
+                                             "Different offset in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM101 frame is not as expected in deserialized subheader");
+                  break;
+              case QuicSubheader::STREAM110:
+                  head = QuicSubheader::CreateStreamSubHeader (streamId, offset, length, 
+                    true, true, false);
+
+                  headSize = 1 + QuicSubheader::GetVarInt64Size(streamId)/8 + QuicSubheader::GetVarInt64Size(offset)/8 + QuicSubheader::GetVarInt64Size(length)/8;
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM110 frame is not as expected");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFrameType (), QuicSubheader::STREAM110,
+                                             "Different frame type found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetStreamId (), streamId,
+                                             "Different stream id found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetOffset (), offset,
+                                             "Different offset found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetLength (), length,
+                                             "Different length found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM110 frame is not as expected");
+
+                  copyHead.Deserialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetFrameType (), QuicSubheader::STREAM110,
+                                             "Different frame type found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetStreamId (), streamId,
+                                             "Different stream id found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetOffset (), offset,
+                                             "Different offset in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetLength (), length,
+                                             "Different length found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM110 frame is not as expected in deserialized subheader");
+                  break;
+              case QuicSubheader::STREAM111:
+                  head = QuicSubheader::CreateStreamSubHeader (streamId, offset, length, 
+                    true, true, true);
+
+                  headSize = 1 + QuicSubheader::GetVarInt64Size(streamId)/8 + QuicSubheader::GetVarInt64Size(offset)/8 + QuicSubheader::GetVarInt64Size(length)/8;
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM111 frame is not as expected");
+
+                  buffer.AddAtStart (head.GetSerializedSize ());
+                  head.Serialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (head.GetFrameType (), QuicSubheader::STREAM111,
+                                             "Different frame type found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetStreamId (), streamId,
+                                             "Different stream id found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetOffset (), offset,
+                                             "Different offset found");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetLength (), length,
+                                             "Different length found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (head.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM111 frame is not as expected");
+
+                  copyHead.Deserialize (buffer.Begin ());
+
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetFrameType (), QuicSubheader::STREAM111,
+                                             "Different frame type found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetStreamId (), streamId,
+                                             "Different stream id found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetOffset (), offset,
+                                             "Different offset in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetLength (), length,
+                                             "Different length found in deserialized subheader");
+                  NS_TEST_ASSERT_MSG_EQ (copyHead.GetSerializedSize (), headSize, 
+                    "QuicSubHeader for STREAM111 frame is not as expected in deserialized subheader");
+                  break;
+               default:
+                  break;
+          }
+        }
+      
+    } 
+}
+
+
+
+void
+QuicHeaderTestCase::DoTeardown ()
+{
+}
+
+void
+QuicSubHeaderTestCase::DoTeardown ()
+{
+}
+
+/**
+ * \ingroup internet-test
+ * \ingroup tests
+ *
+ * \brief the TestSuite for the QuicHeader test cases
+ */
+class QuicHeaderTestSuite : public TestSuite
+{
+public:
+  QuicHeaderTestSuite () :
+      TestSuite ("quic-header", UNIT)
+  {
+    AddTestCase (new QuicHeaderTestCase, TestCase::QUICK);
+    AddTestCase (new QuicSubHeaderTestCase, TestCase::QUICK);
+  }
+};
+static QuicHeaderTestSuite g_QuicHeaderTestSuite;
diff --git a/src/quic/test/quic-rx-buffer-test.cc b/src/quic/test/quic-rx-buffer-test.cc
new file mode 100644
index 000000000..e4db65c96
--- /dev/null
+++ b/src/quic/test/quic-rx-buffer-test.cc
@@ -0,0 +1,384 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *          
+ */
+
+#include "ns3/test.h"
+#include "ns3/packet.h"
+#include "ns3/log.h"
+
+#include "ns3/quic-socket-rx-buffer.h"
+#include "ns3/quic-stream-rx-buffer.h"
+
+using namespace ns3;
+
+NS_LOG_COMPONENT_DEFINE("QuicRxBufferTestSuite");
+
+/**
+ * \ingroup internet-tests
+ * \ingroup tests
+ *
+ * \brief The QuicRxBuffer Test
+ */
+class QuicRxBufferTestCase : public TestCase
+{
+public:
+  QuicRxBufferTestCase ();
+
+private:
+  virtual void
+  DoRun (void);
+  virtual void
+  DoTeardown (void);
+
+  /*
+   * \brief Test the insertion of packets in the Socket RX buffer
+   */
+  void
+  TestSocketAdd ();
+  /*
+   * \brief Test the extraction of packets from the Socket RX buffer
+   */
+  void
+  TestSocketExtract ();
+  /**
+   * \brief Test the insertion of packets in the Stream RX buffer
+   */
+  void
+  TestStreamAdd ();
+  /**
+   * \brief Test the extraction of packets from the Stream RX buffer
+   */
+  void
+  TestStreamExtract ();
+};
+
+QuicRxBufferTestCase::QuicRxBufferTestCase () :
+    TestCase ("QuicRxBuffer Test")
+{
+}
+
+void
+QuicRxBufferTestCase::DoRun ()
+{
+  /*
+   * Test the insertion of packets in the Socket RX buffer:
+   * -> add packets till socket tx buffer overflow
+   * -> check correctness of buffer application size and available size
+   * -> checking availability count
+   */
+  TestSocketAdd ();
+
+  /*
+   * Test the extraction of packets from the Socket RX buffer
+   * -> add 3 packets 
+   * -> extract all packets and test that the buffer is empty
+   * -> check correctness of buffer application size and available size
+   * -> checking availability count
+   */
+  TestSocketExtract ();
+
+  /*
+   * Test the insertion of packets in the Stream RX buffer:
+   * -> add packets till stream tx buffer overflow
+   * -> check correctness of buffer application size and available size
+   * -> checking availability count
+   * -> check in-order buffer insertion and duplicate packets
+   * -> check FIN functionality
+   */
+  TestStreamAdd ();
+
+  /*
+   * Test the extraction of packets from the Stream RX buffer:
+   * -> add 3 packets 
+   * -> extract first 2 packets and readd them again
+   * -> extract all packets and test that the buffer is empty
+   * -> check correctness of buffer application size and available size
+   */
+  TestStreamExtract ();
+}
+
+void
+QuicRxBufferTestCase::TestSocketAdd ()
+{
+  // create the buffer
+  QuicSocketRxBuffer rxBuf;
+  rxBuf.SetMaxBufferSize (3000);
+
+  // add 1 packet to the socket rx buffer
+  Ptr<Packet> p = Create<Packet> (1200);
+  bool pos = rxBuf.Add (p);
+
+  NS_TEST_ASSERT_MSG_EQ(pos, true, "Failed to add packet");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Available (), 1800,
+                        "Availability differs from expected");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Size (), 1200,
+                        "Buffer size differs from expected");
+
+  // test full buffer
+  Ptr<Packet> p1 = Copy (p);
+  Ptr<Packet> p2 = Copy (p);
+
+  pos = rxBuf.Add (p1);
+  bool neg = rxBuf.Add (p2);
+
+  NS_TEST_ASSERT_MSG_EQ(pos, true, "Failed to add packet");
+  NS_TEST_ASSERT_MSG_EQ(neg, false, "Added wrong packet");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Available (), 600,
+                        "Availability differs from expected");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Size (), 2400,
+                        "Buffer size differs from expected");
+}
+
+void
+QuicRxBufferTestCase::TestSocketExtract ()
+{
+  // create the buffer
+  QuicSocketRxBuffer rxBuf;
+  rxBuf.SetMaxBufferSize (3600);
+
+  // add 3 packets to the socket rx buffer
+  Ptr<Packet> p = Create<Packet> (1200);
+  Ptr<Packet> p1 = Copy (p);
+  Ptr<Packet> p2 = Copy (p);
+
+  rxBuf.Add (p);
+  rxBuf.Add (p1);
+  rxBuf.Add (p2);
+
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Available (), 0,
+                        "Availability differs from expected");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Size (), 3600,
+                        "Buffer size differs from expected");
+
+  // extract first packet
+  Ptr<Packet> out = rxBuf.Extract (1200);
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Available (), 1200,
+                        "Availability differs from expected");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Size (), 2400,
+                        "Buffer size differs from expected");
+  NS_TEST_ASSERT_MSG_EQ(out->GetSize (), 1200,
+                        "Packet size differs from expected");
+
+  // extract another packet
+  out = rxBuf.Extract (1800);
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Available (), 2400,
+                        "Availability differs from expected");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Size (), 1200,
+                        "Buffer size differs from expected");
+  NS_TEST_ASSERT_MSG_EQ(out->GetSize (), 1200,
+                        "Packet size differs from expected");
+
+  // extract another packet
+  out = rxBuf.Extract (2400);
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Available (), 3600,
+                        "Availability differs from expected");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Size (), 0, "Buffer size differs from expected");
+  NS_TEST_ASSERT_MSG_EQ(out->GetSize (), 1200,
+                        "Packet size differs from expected");
+
+  // test empty buffer
+  out = rxBuf.Extract (3600);
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Available (), 3600,
+                        "Availability differs from expected");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Size (), 0, "Buffer size differs from expected");
+  NS_TEST_ASSERT_MSG_EQ(out, 0, "Packet size differs from expected");
+}
+
+void
+QuicRxBufferTestCase::TestStreamAdd ()
+{
+  // create the buffer
+  QuicStreamRxBuffer rxBuf;
+  rxBuf.SetMaxBufferSize (18000);
+
+  // create packet
+  Ptr<Packet> p = Create<Packet> (1200);
+  QuicSubheader sub = QuicSubheader::CreateStreamSubHeader (1, 0, p->GetSize (), false,
+                                                            true, false);
+  sub.SetOffset(0);
+
+  // add a packet
+  bool pos = rxBuf.Add (p, sub);
+  std::pair<uint64_t, uint64_t> deliverable = rxBuf.GetDeliverable (0);
+
+  NS_TEST_ASSERT_MSG_EQ(pos, true, "Failed to add packet");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Available (), 16800, "Wrong available data size");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Size (), 1200, "Wrong buffer size");
+  NS_TEST_ASSERT_MSG_EQ(deliverable.first, 0, "Wrong deliverable offset value");
+  NS_TEST_ASSERT_MSG_EQ(deliverable.second, 1200,
+                        "Wrong deliverable packet size");
+
+  // duplicate packet
+  bool neg = rxBuf.Add (p, sub);
+  deliverable = rxBuf.GetDeliverable (0);
+
+  NS_TEST_ASSERT_MSG_EQ(neg, false, "Added duplicate packet");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Available (), 16800, "Wrong available data size");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Size (), 1200, "Wrong buffer size");
+  NS_TEST_ASSERT_MSG_EQ(deliverable.first, 0, "Wrong deliverable offset value");
+  NS_TEST_ASSERT_MSG_EQ(deliverable.second, 1200,
+                        "Wrong deliverable packet size");
+
+  // add a second packet
+  sub.SetOffset (1200);
+  pos = rxBuf.Add (p, sub);
+  deliverable = rxBuf.GetDeliverable (0);
+  
+  NS_TEST_ASSERT_MSG_EQ(pos, true, "Failed to add packet");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Available (), 15600, "Wrong available data size");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Size (), 2400, "Wrong buffer size");
+  NS_TEST_ASSERT_MSG_EQ(deliverable.first, 1200,
+                        "Wrong deliverable offset value");
+  NS_TEST_ASSERT_MSG_EQ(deliverable.second, 2400,
+                        "Wrong deliverable packet size");
+
+  // insert out of order packet
+  sub.SetOffset (3600);
+  pos = rxBuf.Add (p, sub);
+  deliverable = rxBuf.GetDeliverable (0);
+
+  NS_TEST_ASSERT_MSG_EQ(pos, true, "Failed to add packet");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Available (), 14400, "Wrong available data size");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Size (), 3600, "Wrong buffer size");
+  NS_TEST_ASSERT_MSG_EQ(deliverable.first, 1200,
+                        "Wrong deliverable offset value");
+  NS_TEST_ASSERT_MSG_EQ(deliverable.second, 2400,
+                        "Wrong deliverable packet size");
+
+  // insert missing packet
+  sub.SetOffset (2400);
+  pos = rxBuf.Add (p, sub);
+  deliverable = rxBuf.GetDeliverable (0);
+
+  NS_TEST_ASSERT_MSG_EQ(pos, true, "Failed to add packet");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Available (), 13200, "Wrong available data size");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Size (), 4800, "Wrong buffer size");
+  NS_TEST_ASSERT_MSG_EQ(deliverable.first, 3600,
+                        "Wrong deliverable offset value");
+  NS_TEST_ASSERT_MSG_EQ(deliverable.second, 4800,
+                        "Wrong deliverable packet size");
+
+  // test full buffer
+  sub.SetOffset (4800);
+  Ptr<Packet> p1 = Create<Packet> (13200);
+  pos = rxBuf.Add (p1, sub);
+  deliverable = rxBuf.GetDeliverable (0);
+
+  NS_TEST_ASSERT_MSG_EQ(pos, true, "Failed to add packet");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Available (), 0, "Wrong available data size");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Size (), 18000, "Wrong buffer size");
+  NS_TEST_ASSERT_MSG_EQ(deliverable.first, 4800,
+                        "Wrong deliverable offset value");
+  NS_TEST_ASSERT_MSG_EQ(deliverable.second, 18000,
+                        "Wrong deliverable packet size");
+
+  // test buffer overflow
+  sub.SetOffset (18000);
+  neg = rxBuf.Add (p, sub);
+  deliverable = rxBuf.GetDeliverable (0);
+
+  NS_TEST_ASSERT_MSG_EQ(neg, false, "Buffer overflow");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Available (), 0, "Wrong available data size");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Size (), 18000, "Wrong buffer size");
+  NS_TEST_ASSERT_MSG_EQ(deliverable.first, 4800,
+                        "Wrong deliverable offset value");
+  NS_TEST_ASSERT_MSG_EQ(deliverable.second, 18000,
+                        "Wrong deliverable packet size");
+}
+
+void
+QuicRxBufferTestCase::TestStreamExtract ()
+{
+  // create the buffer
+  QuicStreamRxBuffer rxBuf;
+  rxBuf.SetMaxBufferSize (18000);
+
+  // create packet
+  Ptr<Packet> p = Create<Packet> (1200);
+  QuicSubheader sub = QuicSubheader::CreateStreamSubHeader (1, 0, p->GetSize (), false,
+                                                   true, false);
+  sub.SetOffset (0);
+
+  // add a packet
+  rxBuf.Add (p, sub);
+  std::pair<uint64_t, uint64_t> deliverable = rxBuf.GetDeliverable (0);
+
+  // add a second packet
+  sub.SetOffset (1200);
+  rxBuf.Add (p, sub);
+  deliverable = rxBuf.GetDeliverable (0);
+
+  // insert a third packet
+  sub.SetOffset (2400);
+  rxBuf.Add (p, sub);
+  deliverable = rxBuf.GetDeliverable (0);
+  
+  // extract first two packets
+  Ptr<Packet> outPkt = rxBuf.Extract(deliverable.second - 1200);
+  
+  NS_TEST_ASSERT_MSG_NE(outPkt, 0, "Failed to extract packets");
+  NS_TEST_ASSERT_MSG_EQ(outPkt->GetSize(),2400,  "Wrong packet size");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Available (), 16800, "Wrong available data size");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Size (), 1200, "Wrong buffer size");
+  
+  // insert missing packet
+  sub.SetOffset (0);
+  rxBuf.Add (outPkt, sub);
+  deliverable = rxBuf.GetDeliverable (0);
+  
+  // extract all packets
+  outPkt = rxBuf.Extract(deliverable.second);
+  
+  NS_TEST_ASSERT_MSG_NE(outPkt, 0, "Failed to extract packets");
+  NS_TEST_ASSERT_MSG_EQ(outPkt->GetSize(), 3600,  "Wrong packet size");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Available (), 18000, "Wrong available data size");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Size (), 0, "Wrong buffer size");
+
+  // test empty buffer
+  outPkt = rxBuf.Extract(1200);
+  NS_TEST_ASSERT_MSG_EQ(outPkt, 0, "Failed to extract packets");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Available (), 18000, "Wrong available data size");
+  NS_TEST_ASSERT_MSG_EQ(rxBuf.Size (), 0, "Wrong buffer size");
+}
+
+void
+QuicRxBufferTestCase::DoTeardown ()
+{
+}
+
+/**
+ * \ingroup internet-test
+ * \ingroup tests
+ *
+ * \brief the TestSuite for the QuicSocketRxBuffer and QuicStreamRxBuffer test cases
+ */
+class QuicRxBufferTestSuite : public TestSuite
+{
+public:
+  QuicRxBufferTestSuite () :
+      TestSuite ("quic-rx-buffer", UNIT)
+  {
+    AddTestCase (new QuicRxBufferTestCase, TestCase::QUICK);
+  }
+};
+static QuicRxBufferTestSuite g_quicRxBufferTestSuite;
diff --git a/src/quic/test/quic-tx-buffer-test.cc b/src/quic/test/quic-tx-buffer-test.cc
new file mode 100644
index 000000000..5e8f5a940
--- /dev/null
+++ b/src/quic/test/quic-tx-buffer-test.cc
@@ -0,0 +1,960 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * Copyright (c) 2019 SIGNET Lab, Department of Information Engineering, University of Padova
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors: Alvise De Biasio <alvise.debiasio@gmail.com>
+ *          Federico Chiariotti <chiariotti.federico@gmail.com>
+ *          Michele Polese <michele.polese@gmail.com>
+ *          Davide Marcato <davidemarcato@outlook.com>
+ *          
+ */
+
+#include "ns3/test.h"
+#include "ns3/quic-socket-tx-buffer.h"
+#include "ns3/quic-stream-tx-buffer.h"
+#include "ns3/quic-socket-tx-scheduler.h"
+
+#include "ns3/quic-socket-base.h"
+#include "ns3/packet.h"
+#include "ns3/simulator.h"
+#include "ns3/log.h"
+
+using namespace ns3;
+
+NS_LOG_COMPONENT_DEFINE("QuicTxBufferTestSuite");
+
+/**
+ * \ingroup internet-tests
+ * \ingroup tests
+ *
+ * \brief The QuicTxBuffer Test
+ */
+class QuicTxBufferTestCase : public TestCase
+{
+public:
+  /** \brief Constructor */
+  QuicTxBufferTestCase ();
+
+private:
+  virtual void
+  DoRun (void);
+  virtual void
+  DoTeardown (void);
+
+  /** \brief Test the generation of an unsent block */
+  void
+  TestNewBlock ();
+  /** \brief Test the block-based acknowledgment mechanism */
+  void
+  TestPartialAck ();
+  /** \brief Test the acknowledgment mechanism with losses */
+  void
+  TestAckLoss ();
+  /** \brief Test the direct loss setting mechanism */
+  void
+  TestSetLoss ();
+  /** \brief Test the edge cases for adding packets */
+  void
+  TestAddBlocks ();
+  /** \brief Test the handling of Stream 0 packets */
+  void
+  TestStream0 ();
+  /** \brief Test the insertion of packets in the Stream TX buffer */
+  void
+  TestStreamAdd ();
+  /** \brief Test the extraction of packets from the Stream TX buffer */
+  void
+  TestStreamExtract ();
+  /** \brief Test the Socket TX buffer rejection due to available space limitations */
+  void
+  TestRejection ();
+  /** \brief Test the Socket TX buffer retransmission of lost packets */
+  void
+  TestRetransmission ();
+};
+
+QuicTxBufferTestCase::QuicTxBufferTestCase () :
+    TestCase ("QuicTxBuffer Test")
+{
+}
+
+void
+QuicTxBufferTestCase::DoRun ()
+{
+  /*
+   * Cases for new block:
+   * -> add a small block (equal to minimum MSS)
+   * -> add a L5 block larger than the packet
+   * -> send a packet with two L5 blocks
+   * -> acknowledge everything
+   */
+   Simulator::Schedule (Seconds (0.0), &QuicTxBufferTestCase::TestNewBlock,
+                        this);
+
+  /*
+   * Partial ACK:
+   * -> add 6 small blocks
+   * -> acknowledge each one except the fifth
+   * -> check correctness of congestion window and lost packets
+   */
+   Simulator::Schedule (Seconds (0.0), &QuicTxBufferTestCase::TestPartialAck,
+                        this);
+
+  /*
+   * Partial ACK with loss:
+   * -> add 6 small blocks
+   * -> acknowledge each one except the second
+   * -> check correctness of loss indication
+   * -> check correctness of congestion window and lost packets
+   */
+  Simulator::Schedule (Seconds (0.0), &QuicTxBufferTestCase::TestAckLoss, this);
+
+  /*
+   * Mark a packet as lost:
+   * -> add 6 small blocks
+   * -> mark packet 4 as lost
+   * -> reset sent list to mark packets 1 and 2 as lost
+   * -> check correctness
+   * 
+   */
+   Simulator::Schedule (Seconds (0.0), &QuicTxBufferTestCase::TestSetLoss, this);
+
+  /*
+   * Edge cases of the block adding function:
+   * -> add 6 small blocks
+   * -> mark packet 4 as lost
+   * -> reset sent list to mark packets 1 and 2 as lost
+   * -> check correctness
+   * 
+   */
+   Simulator::Schedule (Seconds (0.0), &QuicTxBufferTestCase::TestAddBlocks,
+                        this);
+  /*
+   * Edge cases of the block adding function:
+   * -> add 1 block
+   * -> add a Stream 0 packet
+   * -> acknowledge everything
+   * -> check correctness of bytes in flight count
+   * 
+   */
+   Simulator::Schedule (Seconds (0.0), &QuicTxBufferTestCase::TestStream0, this);
+   Simulator::Run ();
+   Simulator::Destroy ();
+
+  /*
+   * Test the insertion of packets in the Stream TX buffer:
+   * -> add packets till stream tx buffer overflow
+   * -> check correctness of buffer application size and available size
+   */
+  TestStreamAdd ();
+
+  /*
+   * Test the extraction of packets from the Stream TX buffer:
+   * -> add 3 packets 
+   * -> extract first 2 packets and readd them again
+   * -> extract all packets and test that the buffer is empty
+   * -> check correctness of buffer application size and available size
+   */
+  TestStreamExtract ();
+
+  /*
+   * Test the Socket TX buffer rejection due to available space limitations:
+   * -> add 5 packets to the stream tx buffer
+   * -> extract first 2 packets and send them as frames to socket tx buffer
+   * -> extract 2 packets more and send them as frames to socket tx buffer
+   * -> reject the packets due to socket tx buffer available space limitations
+   * -> enqueue back the rejected packets to stream tx buffer
+   * -> check correctness of the two buffers application size and available size
+   */
+  TestRejection ();
+
+  /*
+   * Test the Socket TX buffer retransmission of lost packets:
+   * -> send 1 packet from socket tx buffer and ack the packet sent
+   * -> send other 2 packets from socket tx buffer but mark them as lost on ack
+   * -> retransmit the first of the two packets
+   * -> ack the previous packet but not the retransmitted one
+   * -> ack also the retransmitted packet
+   * -> check correctness of buffer application size and available size
+   * -> check correctness of bytes in flight count
+   * -> check correctness of acked and lost packets list
+   */
+  TestRetransmission ();
+}
+
+void
+QuicTxBufferTestCase::TestRetransmission ()
+{
+  // create the buffer
+  QuicSocketTxBuffer txBuf;
+  
+  Ptr<QuicSocketTxScheduler> sched = CreateObject<QuicSocketTxScheduler>();
+  txBuf.SetScheduler(sched);
+  Ptr<QuicSocketState> tcbd;
+
+  tcbd = CreateObject<QuicSocketState> ();
+
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 0, "TxBuf miscalculates initial size of in flight segments");
+
+  // send a packet from socket tx buffer
+  Ptr<Packet> p1 = Create<Packet> (1196);
+  QuicSubheader sub = QuicSubheader::CreateStreamSubHeader (1, 0, p1->GetSize (), 
+                                          false, true, false);
+  p1->AddHeader (sub);
+  txBuf.Add (p1);
+
+  Ptr<Packet> ptx = txBuf.NextSequence (1200, SequenceNumber32 (1));
+  NS_TEST_ASSERT_MSG_EQ(ptx->GetSize (), 1200, "TxBuf miscalculates size");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 1200, "TxBuf miscalculates size of in flight segments");
+
+  // ack the packet sent
+  std::vector<uint32_t> additionalAckBlocks;
+  std::vector<uint32_t> gaps;
+  uint32_t largestAcknowledged = 1;
+  additionalAckBlocks.push_back (0);
+  gaps.push_back (0);
+
+  std::vector<Ptr<QuicSocketTxItem>> acked = txBuf.OnAckUpdate (tcbd,
+                                                            largestAcknowledged,
+                                                            additionalAckBlocks,
+                                                            gaps);
+  NS_TEST_ASSERT_MSG_EQ(acked.size (), 1, "Wrong acked packet vector size");
+  NS_TEST_ASSERT_MSG_EQ(acked.at (0)->m_packet->GetSize (), 1200, "TxBuf miscalculates size");
+  NS_TEST_ASSERT_MSG_EQ(acked.at (0)->m_packetNumber, SequenceNumber32 (1),
+                        "TxBuf gets the wrong lost packet ID");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 0, "TxBuf miscalculates size of in flight segments");
+
+  // send other two packets from socket tx buffer but mark them as lost on ack
+  Ptr<Packet> p2 = Create<Packet> (1196);
+  sub = QuicSubheader::CreateStreamSubHeader (1, 1200, p2->GetSize (), 
+                                          false, true, false);
+  p2->AddHeader (sub);
+  txBuf.Add (p2);
+
+  ptx = txBuf.NextSequence (1200, SequenceNumber32 (2));
+  NS_TEST_ASSERT_MSG_EQ(ptx->GetSize (), 1200, "TxBuf miscalculates size");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 1200, "TxBuf miscalculates size of in flight segments");
+
+  Ptr<Packet> p3 = Create<Packet> (1196);
+  sub = QuicSubheader::CreateStreamSubHeader (1, 2400, p3->GetSize (), 
+                                          false, true, false);
+  p3->AddHeader (sub);
+  txBuf.Add (p3);
+
+  ptx = txBuf.NextSequence (1200, SequenceNumber32 (3));
+  NS_TEST_ASSERT_MSG_EQ(ptx->GetSize (), 1200, "TxBuf miscalculates size");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 2400, "TxBuf miscalculates size of in flight segments");
+
+  acked = txBuf.OnAckUpdate (tcbd,
+                             largestAcknowledged,
+                             additionalAckBlocks,
+                             gaps);
+  NS_TEST_ASSERT_MSG_EQ(acked.size (), 0, "Wrong acked packet vector size");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 2400, "TxBuf miscalculates size of in flight segments");
+
+  // retransmit the first of the two packets
+  uint32_t newPackets = 1;
+  txBuf.ResetSentList (newPackets);
+  std::vector<Ptr<QuicSocketTxItem>> lostPackets = txBuf.DetectLostPackets ();
+  NS_TEST_ASSERT_MSG_EQ(lostPackets.size (), 1, "Wrong lost packet vector size");
+  NS_TEST_ASSERT_MSG_EQ(lostPackets.at (0)->m_packet->GetSize (), 1200, "TxBuf miscalculates size");
+  NS_TEST_ASSERT_MSG_EQ(lostPackets.at (0)->m_packetNumber, SequenceNumber32 (2),
+                        "TxBuf gets the wrong lost packet ID");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 2400, "TxBuf miscalculates size of in flight segments");
+
+  uint32_t toRetx = txBuf.Retransmission (SequenceNumber32(2));
+  NS_TEST_ASSERT_MSG_EQ(toRetx, 1200, "wrong number of lost bytes");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 1200, "TxBuf miscalculates size of in flight segments");
+
+  ptx = txBuf.NextSequence (toRetx, SequenceNumber32 (4));
+  NS_TEST_ASSERT_MSG_EQ(ptx->GetSize (), 1200, "TxBuf miscalculates size");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 2400, "TxBuf miscalculates size of in flight segments");
+
+  // ack the previous packet but not the retransmitted one
+  largestAcknowledged = 3;
+  acked = txBuf.OnAckUpdate (tcbd,
+                             largestAcknowledged,
+                             additionalAckBlocks,
+                             gaps);
+  NS_TEST_ASSERT_MSG_EQ(acked.size (), 1, "Wrong acked packet vector size");
+  NS_TEST_ASSERT_MSG_EQ(acked.at (0)->m_packet->GetSize (), 1200, "TxBuf miscalculates size");
+  NS_TEST_ASSERT_MSG_EQ(acked.at (0)->m_packetNumber, SequenceNumber32 (3),
+                        "TxBuf gets the wrong lost packet ID");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 1200, "TxBuf miscalculates size of in flight segments");
+
+  // ack also the retransmitted packet
+  largestAcknowledged = 4;
+  acked = txBuf.OnAckUpdate (tcbd,
+                             largestAcknowledged,
+                             additionalAckBlocks,
+                             gaps);
+  NS_TEST_ASSERT_MSG_EQ(acked.size (), 1, "Wrong acked packet vector size");
+  NS_TEST_ASSERT_MSG_EQ(acked.at (0)->m_packet->GetSize (), 1200, "TxBuf miscalculates size");
+  NS_TEST_ASSERT_MSG_EQ(acked.at (0)->m_packetNumber, SequenceNumber32 (4),
+                        "TxBuf gets the wrong lost packet ID");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 0, "TxBuf miscalculates size of in flight segments");
+}
+
+void
+QuicTxBufferTestCase::TestRejection ()
+{
+  // create the two buffers
+  QuicStreamTxBuffer streamTxBuf;
+  streamTxBuf.SetMaxBufferSize (18000);
+
+  QuicSocketTxBuffer socketTxBuf;
+  Ptr<QuicSocketTxScheduler> sched = CreateObject<QuicSocketTxScheduler>();
+  socketTxBuf.SetScheduler(sched);
+  socketTxBuf.SetMaxBufferSize (4800);
+
+  // Create packet
+  Ptr<Packet> p = Create<Packet> (1200);
+  
+  // Add 5 packets
+  bool pos = streamTxBuf.Add(p);
+  pos = streamTxBuf.Add(p);
+  pos = streamTxBuf.Add(p);
+  pos = streamTxBuf.Add(p);
+  pos = streamTxBuf.Add(p);
+
+  NS_TEST_ASSERT_MSG_EQ(pos, true, "Failed to add packet");
+  NS_TEST_ASSERT_MSG_EQ(streamTxBuf.Available (), 12000, "Wrong available data size");
+  NS_TEST_ASSERT_MSG_EQ(streamTxBuf.AppSize (), 6000, "Wrong buffer size");
+
+  // Extract first two packets
+  Ptr<Packet> outPkt = streamTxBuf.NextSequence(2400, SequenceNumber32(0));
+
+  NS_TEST_ASSERT_MSG_NE(outPkt, 0, "Failed to extract packets");
+  NS_TEST_ASSERT_MSG_EQ(outPkt->GetSize(), 2400,  "Wrong packet size");
+  NS_TEST_ASSERT_MSG_EQ(streamTxBuf.Available (), 14400, "Wrong available data size");
+  NS_TEST_ASSERT_MSG_EQ(streamTxBuf.AppSize (), 3600, "Wrong buffer size");
+
+  // Send the extracted packets as frames to socket tx buffer
+  QuicSubheader sub = QuicSubheader::CreateStreamSubHeader (1, 0, outPkt->GetSize (), 
+                         false, true, false);
+  outPkt->AddHeader (sub);
+  NS_TEST_ASSERT_MSG_EQ(outPkt->GetSize(), 2400 + sub.GetSerializedSize (),  "Wrong packet size");
+
+  pos = socketTxBuf.Add (outPkt);
+  NS_TEST_ASSERT_MSG_EQ(pos, true, "Failed to add packet");
+  NS_TEST_ASSERT_MSG_EQ(socketTxBuf.Available (), 4800 - outPkt->GetSize (), "Wrong available data size");
+  NS_TEST_ASSERT_MSG_EQ(socketTxBuf.AppSize (), outPkt->GetSize (), "Wrong buffer size");
+
+  // Extract two packets more
+  Ptr<Packet> outPktMore = streamTxBuf.NextSequence(2400, SequenceNumber32(0));
+
+  NS_TEST_ASSERT_MSG_NE(outPktMore, 0, "Failed to extract packets");
+  NS_TEST_ASSERT_MSG_EQ(outPktMore->GetSize(), 2400,  "Wrong packet size");
+  NS_TEST_ASSERT_MSG_EQ(streamTxBuf.Available (), 16800, "Wrong available data size");
+  NS_TEST_ASSERT_MSG_EQ(streamTxBuf.AppSize (), 1200, "Wrong buffer size");
+
+  // Add the extracted packets as frames to socket tx buffer but this time is full
+  sub = QuicSubheader::CreateStreamSubHeader (1, 2400, outPktMore->GetSize (), 
+                         true, true, false);
+  outPktMore->AddHeader (sub);
+  NS_TEST_ASSERT_MSG_EQ(outPktMore->GetSize(), 2400 + sub.GetSerializedSize (),  "Wrong packet size");
+
+  pos = socketTxBuf.Add (outPktMore);
+  NS_TEST_ASSERT_MSG_EQ(pos, false, "Buffer overflow");
+  NS_TEST_ASSERT_MSG_EQ(socketTxBuf.Available (), 4800 - outPkt->GetSize (), "Wrong available data size");
+  NS_TEST_ASSERT_MSG_EQ(socketTxBuf.AppSize (), outPkt->GetSize (), "Wrong buffer size");
+
+  // Enqueue back the rejected packet to stream tx buffer
+  pos = streamTxBuf.Rejected(outPktMore);
+
+  NS_TEST_ASSERT_MSG_EQ(pos, true, "Failed to add packet");
+  NS_TEST_ASSERT_MSG_EQ(streamTxBuf.Available (), 14400 - sub.GetSerializedSize (), "Wrong available data size");
+  NS_TEST_ASSERT_MSG_EQ(streamTxBuf.AppSize (), 3600 + sub.GetSerializedSize (), "Wrong buffer size");
+}
+
+void
+QuicTxBufferTestCase::TestStreamAdd ()
+{
+  // create the buffer
+  QuicStreamTxBuffer txBuf;
+  txBuf.SetMaxBufferSize (18000);
+
+  // Create packet
+  Ptr<Packet> p = Create<Packet> (1200);
+  
+  // Add a packet
+  bool pos = txBuf.Add(p);
+
+  NS_TEST_ASSERT_MSG_EQ(pos, true, "Failed to add packet");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.Available (), 16800, "Wrong available data size");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.AppSize (), 1200, "Wrong buffer size");
+
+  // Add a second packet
+  pos = txBuf.Add(p);
+
+  NS_TEST_ASSERT_MSG_EQ(pos, true, "Failed to add packet");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.Available (), 15600, "Wrong available data size");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.AppSize (), 2400, "Wrong buffer size");
+
+  // Add a third packet
+  pos = txBuf.Add(p);
+
+  NS_TEST_ASSERT_MSG_EQ(pos, true, "Failed to add packet");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.Available (), 14400, "Wrong available data size");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.AppSize (), 3600, "Wrong buffer size");
+
+  // Test full buffer
+  p = Create<Packet> (14400);
+  pos = txBuf.Add(p);
+
+  NS_TEST_ASSERT_MSG_EQ(pos, true, "Failed to add packet");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.Available (), 0, "Wrong available data size");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.AppSize (), 18000, "Wrong buffer size");
+
+  // Test buffer overflow
+  pos = txBuf.Add(p);
+
+  NS_TEST_ASSERT_MSG_EQ(pos, false, "Buffer overflow");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.Available (), 0, "Wrong available data size");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.AppSize (), 18000, "Wrong buffer size");
+}
+
+void
+QuicTxBufferTestCase::TestStreamExtract ()
+{
+  // create the buffer
+  QuicStreamTxBuffer txBuf;
+  txBuf.SetMaxBufferSize (18000);
+
+  // Create packet
+  Ptr<Packet> p = Create<Packet> (1200);
+  
+  // Add a packet
+  bool pos = txBuf.Add(p);
+
+  // Add a second packet
+  pos = txBuf.Add(p);
+
+  // Add a third packet
+  pos = txBuf.Add(p);
+
+  NS_TEST_ASSERT_MSG_EQ(pos, true, "Failed to add packet");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.Available (), 14400, "Wrong available data size");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.AppSize (), 3600, "Wrong buffer size");
+
+  //Extract first two packets
+  Ptr<Packet> outPkt = txBuf.NextSequence(2400, SequenceNumber32(0));
+
+  NS_TEST_ASSERT_MSG_EQ(pos, true, "Failed to add packet");
+  NS_TEST_ASSERT_MSG_EQ(outPkt->GetSize(), 2400,  "Wrong packet size");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.Available (), 16800, "Wrong available data size");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.AppSize (), 1200, "Wrong buffer size");
+
+  //Insert missing packet
+  pos = txBuf.Add(outPkt);
+
+  NS_TEST_ASSERT_MSG_EQ(pos, true, "Failed to add packet");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.Available (), 14400, "Wrong available data size");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.AppSize (), 3600, "Wrong buffer size");
+
+  //Extract all packets
+  outPkt = txBuf.NextSequence(3600, SequenceNumber32(1));
+
+  NS_TEST_ASSERT_MSG_NE(outPkt, 0, "Failed to extract packets");
+  NS_TEST_ASSERT_MSG_EQ(outPkt->GetSize(), 3600,  "Wrong packet size");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.Available (), 18000, "Wrong available data size");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.AppSize (), 0, "Wrong buffer size");
+
+  // Test empty buffer
+  outPkt = txBuf.NextSequence(1200, SequenceNumber32(2));
+  NS_TEST_ASSERT_MSG_EQ(outPkt->GetSize(), 0,  "Wrong packet size");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.Available (), 18000, "Wrong available data size");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.AppSize (), 0, "Wrong buffer size");
+}
+
+void
+QuicTxBufferTestCase::TestNewBlock ()
+{
+  // create the buffer
+  QuicSocketTxBuffer txBuf;
+  Ptr<QuicSocketTxScheduler> sched = CreateObject<QuicSocketTxScheduler>();
+  txBuf.SetScheduler(sched);
+  Ptr<QuicSocketState> tcbd;
+
+  tcbd = CreateObject<QuicSocketState> ();
+
+  NS_TEST_ASSERT_MSG_EQ(
+      txBuf.BytesInFlight (), 0,
+      "TxBuf miscalculates initial size of in flight segments");
+
+  // get a packet which is exactly the same stored
+  Ptr<Packet> p1 = Create<Packet> (1196);
+  QuicSubheader sub = QuicSubheader::CreateStreamSubHeader (1, 0, p1->GetSize (), false,
+                                                   true, false);
+  p1->AddHeader (sub);
+  txBuf.Add (p1);
+  NS_TEST_ASSERT_MSG_EQ(p1->GetSize (), 1200, "Wrong header size");
+
+  
+  Ptr<Packet> ptx = txBuf.NextSequence (1200, SequenceNumber32 (1));
+  
+  NS_TEST_ASSERT_MSG_EQ(ptx->GetSize (), 1200, "TxBuf miscalculates size");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 1200,
+                        "TxBuf miscalculates size of in flight segments");
+  
+  std::vector<uint32_t> additionalAckBlocks;
+  std::vector<uint32_t> gaps;
+  uint32_t largestAcknowledged = 1;
+  additionalAckBlocks.push_back (1);
+  
+  std::vector<Ptr<QuicSocketTxItem>> acked = txBuf.OnAckUpdate (tcbd,
+                                                                largestAcknowledged,
+                                                                additionalAckBlocks,
+                                                                gaps);
+  NS_TEST_ASSERT_MSG_EQ(acked.size (), 1, "Wrong acked packet vector size");
+  NS_TEST_ASSERT_MSG_EQ(acked.at (0)->m_packet->GetSize (), 1200,
+                        "TxBuf miscalculates size");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 0,
+                        "TxBuf miscalculates size of in flight segments");
+  
+  // starts over the boundary, but ends earlier
+  
+  Ptr<Packet> p2 = Create<Packet> (2996);
+  sub = QuicSubheader::CreateStreamSubHeader (1, 0, p2->GetSize (), false,
+                                              true, false);
+  p2->AddHeader (sub);
+  txBuf.Add (p2);
+  
+  ptx = txBuf.NextSequence (1200, SequenceNumber32 (2));
+  NS_TEST_ASSERT_MSG_EQ(ptx->GetSize (), 1200,
+                        "Returned packet has different size than requested");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 1200,
+                        "TxBuf miscalculates size of in flight segments");
+  
+  ptx = txBuf.NextSequence (3000, SequenceNumber32 (3));
+  // Expecting 3000 (added, including QuicSubheader 4) - 1200 (extracted, including QuicSubheader 4)
+  // + 6 (QuicSubheader of the new packet, with both the length and the offset)
+  NS_TEST_ASSERT_MSG_EQ(ptx->GetSize (), 1806, 
+                        "Returned packet has different size than requested");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 3006,
+                        "TxBuf miscalculates size of in flight segments");
+  
+  // starts over the boundary, but ends after
+  Ptr<Packet> p3 = Create<Packet> (1196);
+  sub = QuicSubheader::CreateStreamSubHeader (1, 0, p3->GetSize (), false,
+                                              true, false);
+  p3->AddHeader (sub);
+  txBuf.Add (p3);
+  Ptr<Packet> p4 = Create<Packet> (1196);
+  sub = QuicSubheader::CreateStreamSubHeader (1, 0, p4->GetSize (), false,
+                                              true, false);
+  p4->AddHeader (sub);
+  txBuf.Add (p4);
+  ptx = txBuf.NextSequence (2400, SequenceNumber32 (4));
+  NS_TEST_ASSERT_MSG_EQ(ptx->GetSize (), 2400,
+                        "Returned packet has different size than requested");
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 5406,
+                        "TxBuf miscalculates size of in flight segments");
+  
+  additionalAckBlocks.pop_back ();
+  largestAcknowledged = 4;
+  // Clear everything
+  acked = txBuf.OnAckUpdate (tcbd, largestAcknowledged, additionalAckBlocks,
+                             gaps);
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 0,
+                        "TxBuf miscalculates size of in flight segments");
+  
+}
+
+void
+QuicTxBufferTestCase::TestPartialAck ()
+{
+  // create the buffer
+  QuicSocketTxBuffer txBuf;
+  Ptr<QuicSocketTxScheduler> sched = CreateObject<QuicSocketTxScheduler>();
+  txBuf.SetScheduler(sched);
+  Ptr<QuicSocketState> tcbd;
+
+  tcbd = CreateObject<QuicSocketState> ();
+
+  // get a packet which is exactly the same stored
+  Ptr<Packet> p1 = Create<Packet> (1196);
+  QuicSubheader sub = QuicSubheader::CreateStreamSubHeader (1, 0, p1->GetSize (), false,
+                                                   true, false);
+  p1->AddHeader (sub);
+
+  // create 5 identical packets
+  Ptr<Packet> p2 = Copy (p1);
+  Ptr<Packet> p3 = Copy (p1);
+  Ptr<Packet> p4 = Copy (p1);
+  Ptr<Packet> p5 = Copy (p1);
+  Ptr<Packet> p6 = Copy (p1);
+
+  // add the 6 packets to the send buffer
+  txBuf.Add (p1);
+  txBuf.Add (p2);
+  txBuf.Add (p3);
+  txBuf.Add (p4);
+  txBuf.Add (p5);
+  txBuf.Add (p6);
+
+  // send the packets with successive sequence numbers
+  Ptr<Packet> ptx1 = txBuf.NextSequence (1200, SequenceNumber32 (1));
+  Ptr<Packet> ptx2 = txBuf.NextSequence (1200, SequenceNumber32 (2));
+  Ptr<Packet> ptx3 = txBuf.NextSequence (1200, SequenceNumber32 (3));
+  Ptr<Packet> ptx4 = txBuf.NextSequence (1200, SequenceNumber32 (4));
+  Ptr<Packet> ptx5 = txBuf.NextSequence (1200, SequenceNumber32 (5));
+  Ptr<Packet> ptx6 = txBuf.NextSequence (1200, SequenceNumber32 (6));
+
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 7200,
+                        "TxBuf miscalculates size of in flight segments");
+
+  std::vector<uint32_t> additionalAckBlocks;
+  std::vector<uint32_t> gaps;
+  uint32_t largestAcknowledged = 6;
+  additionalAckBlocks.push_back (4);
+  gaps.push_back (5);
+
+  // acknowledge all packets except 5
+  std::vector<Ptr<QuicSocketTxItem>> acked = txBuf.OnAckUpdate (tcbd,
+                                                            largestAcknowledged,
+                                                            additionalAckBlocks,
+                                                            gaps);
+
+  std::vector<Ptr<QuicSocketTxItem>> lost = txBuf.DetectLostPackets ();
+  NS_TEST_ASSERT_MSG_EQ(lost.empty (), true,
+                        "TxBuf detects a non-existent loss");
+  //NS_TEST_ASSERT_MSG_EQ(
+   //   acked.size (), 5,
+     // "TxBuf does not correctly detect the number of ACKed packets");
+
+  // test ACK correctness
+  std::vector<uint32_t> pkts;
+  pkts.push_back (6);
+  pkts.push_back (4);
+  pkts.push_back (3);
+  pkts.push_back (2);
+  pkts.push_back (1);
+  uint32_t i = 0;
+  for (auto acked_it = acked.begin (); acked_it != acked.end ();
+      ++acked_it, i++)
+    {
+      NS_LOG_LOGIC("Hello");
+      NS_TEST_ASSERT_MSG_EQ(
+          (*acked_it)->m_packetNumber.GetValue (), pkts.at (i),
+          "TxBuf does not correctly detect the IDs of ACKed packets");
+    }
+
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 1200,
+                        "TxBuf miscalculates size of in flight segments");
+}
+
+void
+QuicTxBufferTestCase::TestAckLoss ()
+{
+  // create the buffer
+  QuicSocketTxBuffer txBuf;
+  Ptr<QuicSocketTxScheduler> sched = CreateObject<QuicSocketTxScheduler>();
+  txBuf.SetScheduler(sched);
+  Ptr<QuicSocketState> tcbd;
+
+  tcbd = CreateObject<QuicSocketState> ();
+
+  // get a packet which is exactly the same stored
+  Ptr<Packet> p1 = Create<Packet> (1196);
+  QuicSubheader sub = QuicSubheader::CreateStreamSubHeader (1, 0, p1->GetSize (), false,
+                                                   true, false);
+  p1->AddHeader (sub);
+
+  // create 5 identical packets
+  Ptr<Packet> p2 = Copy (p1);
+  Ptr<Packet> p3 = Copy (p1);
+  Ptr<Packet> p4 = Copy (p1);
+  Ptr<Packet> p5 = Copy (p1);
+  Ptr<Packet> p6 = Copy (p1);
+
+  // add the 6 packets to the send buffer
+  txBuf.Add (p1);
+  txBuf.Add (p2);
+  txBuf.Add (p3);
+  txBuf.Add (p4);
+  txBuf.Add (p5);
+  txBuf.Add (p6);
+
+  // send the packets with successive sequence numbers
+  Ptr<Packet> ptx1 = txBuf.NextSequence (1200, SequenceNumber32 (1));
+  Ptr<Packet> ptx2 = txBuf.NextSequence (1200, SequenceNumber32 (2));
+  Ptr<Packet> ptx3 = txBuf.NextSequence (1200, SequenceNumber32 (3));
+  Ptr<Packet> ptx4 = txBuf.NextSequence (1200, SequenceNumber32 (4));
+  Ptr<Packet> ptx5 = txBuf.NextSequence (1200, SequenceNumber32 (5));
+  Ptr<Packet> ptx6 = txBuf.NextSequence (1200, SequenceNumber32 (6));
+
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 7200,
+                        "TxBuf miscalculates size of in flight segments");
+
+  std::vector<uint32_t> additionalAckBlocks;
+  std::vector<uint32_t> gaps;
+  uint32_t largestAcknowledged = 6;
+  gaps.push_back (2);
+  additionalAckBlocks.push_back (1);
+
+  // acknowledge all packets except 5
+  std::vector<Ptr<QuicSocketTxItem>> acked = txBuf.OnAckUpdate (tcbd,
+                                                            largestAcknowledged,
+                                                            additionalAckBlocks,
+                                                            gaps);
+
+  std::vector<Ptr<QuicSocketTxItem>> lost = txBuf.DetectLostPackets ();
+  NS_TEST_ASSERT_MSG_EQ(
+      acked.size(), 5,
+      "TxBuf does not correctly detect the number of ACKed packets");
+
+  // test ACK correctness
+  std::vector<uint32_t> pkts;
+  pkts.push_back (6);
+  pkts.push_back (5);
+  pkts.push_back (4);
+  pkts.push_back (3);
+  pkts.push_back (1);
+  uint32_t i = 0;
+  for (auto acked_it = acked.begin (); acked_it != acked.end ();
+      ++acked_it, i++)
+    {
+
+      NS_TEST_ASSERT_MSG_EQ(
+          (*acked_it)->m_packetNumber.GetValue (), pkts.at (i),
+          "TxBuf does not correctly detect the IDs of ACKed packets");
+    }
+
+  NS_TEST_ASSERT_MSG_EQ(lost.size (), 1, "TxBuf misses a loss");
+
+  NS_TEST_ASSERT_MSG_EQ(
+      lost.at (0)->m_packetNumber.GetValue (), 2,
+      "TxBuf does not correctly detect the IDs of lost packets");
+
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 1200,
+                        "TxBuf miscalculates size of in flight segments");
+}
+
+void
+QuicTxBufferTestCase::TestSetLoss ()
+{
+  // create the buffer
+  QuicSocketTxBuffer txBuf;
+  Ptr<QuicSocketTxScheduler> sched = CreateObject<QuicSocketTxScheduler>();
+  txBuf.SetScheduler(sched);
+  Ptr<QuicSocketState> tcbd;
+
+  tcbd = CreateObject<QuicSocketState> ();
+
+  // get a packet which is exactly the same stored
+  Ptr<Packet> p1 = Create<Packet> (1196);
+  QuicSubheader sub = QuicSubheader::CreateStreamSubHeader (1, 0, p1->GetSize (), false,
+                                                   true, false);
+  p1->AddHeader (sub);
+
+  // create 5 identical packets
+  Ptr<Packet> p2 = Copy (p1);
+  Ptr<Packet> p3 = Copy (p1);
+  Ptr<Packet> p4 = Copy (p1);
+  Ptr<Packet> p5 = Copy (p1);
+  Ptr<Packet> p6 = Copy (p1);
+
+  // add the 6 packets to the send buffer
+  txBuf.Add (p1);
+  txBuf.Add (p2);
+  txBuf.Add (p3);
+  txBuf.Add (p4);
+  txBuf.Add (p5);
+  txBuf.Add (p6);
+
+  // send the packets with successive sequence numbers
+  Ptr<Packet> ptx1 = txBuf.NextSequence (1200, SequenceNumber32 (1));
+  Ptr<Packet> ptx2 = txBuf.NextSequence (1200, SequenceNumber32 (2));
+  Ptr<Packet> ptx3 = txBuf.NextSequence (1200, SequenceNumber32 (3));
+  Ptr<Packet> ptx4 = txBuf.NextSequence (1200, SequenceNumber32 (4));
+  Ptr<Packet> ptx5 = txBuf.NextSequence (1200, SequenceNumber32 (5));
+  Ptr<Packet> ptx6 = txBuf.NextSequence (1200, SequenceNumber32 (6));
+
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 7200,
+                        "TxBuf miscalculates size of in flight segments");
+  bool found = txBuf.MarkAsLost (SequenceNumber32 (4));
+
+  NS_TEST_ASSERT_MSG_EQ(found, true, "TxBuf misses lost packet");
+
+  // mark packet 4 as lost
+  std::vector<Ptr<QuicSocketTxItem>> lost = txBuf.DetectLostPackets ();
+
+  NS_TEST_ASSERT_MSG_EQ(lost.size (), 1,
+                        "TxBuf cannot set the correct number of lost packets");
+  NS_TEST_ASSERT_MSG_EQ(lost.at (0)->m_packetNumber, SequenceNumber32 (4),
+                        "TxBuf gets the wrong lost packet ID");
+
+  // mark packets 1 and 2 as lost (all except the last 4)
+  txBuf.ResetSentList (4);
+
+  lost = txBuf.DetectLostPackets ();
+
+  NS_TEST_ASSERT_MSG_EQ(lost.size (), 3,
+                        "TxBuf cannot set the correct number of lost packets");
+  NS_TEST_ASSERT_MSG_EQ(lost.at (0)->m_packetNumber, SequenceNumber32 (1),
+                        "TxBuf gets the wrong lost packet ID");
+  NS_TEST_ASSERT_MSG_EQ(lost.at (1)->m_packetNumber, SequenceNumber32 (2),
+                        "TxBuf gets the wrong lost packet ID");
+  NS_TEST_ASSERT_MSG_EQ(lost.at (2)->m_packetNumber, SequenceNumber32 (4),
+                        "TxBuf gets the wrong lost packet ID");
+
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 7200,
+                        "TxBuf miscalculates size of in flight segments");
+}
+
+void
+QuicTxBufferTestCase::TestAddBlocks ()
+{
+  // create the buffer
+  QuicSocketTxBuffer txBuf;
+  Ptr<QuicSocketTxScheduler> sched = CreateObject<QuicSocketTxScheduler>();
+  txBuf.SetScheduler(sched);
+  Ptr<QuicSocketState> tcbd;
+
+  // set buffer size
+  txBuf.SetMaxBufferSize (6000);
+
+  tcbd = CreateObject<QuicSocketState> ();
+
+  // get a packet which is exactly the same stored
+  Ptr<Packet> p1 = Create<Packet> (1196);
+  QuicSubheader sub = QuicSubheader::CreateStreamSubHeader (1, 0, p1->GetSize (), false,
+                                                   true, false);
+  p1->AddHeader (sub);
+
+  // create 5 identical packets
+  Ptr<Packet> p2 = Copy (p1);
+  Ptr<Packet> p3 = Copy (p1);
+  Ptr<Packet> p4 = Copy (p1);
+  Ptr<Packet> p5 = Copy (p1);
+  Ptr<Packet> p6 = Copy (p1);
+
+  // add the 6 packets to the send buffer
+  txBuf.Add (p1);
+  txBuf.Add (p2);
+  txBuf.Add (p3);
+  txBuf.Add (p4);
+  bool full = txBuf.Add (p5);
+  bool extra = txBuf.Add (p6);
+
+  NS_TEST_ASSERT_MSG_EQ(full, true, "TxBuf does not add a correct packet");
+  NS_TEST_ASSERT_MSG_EQ(extra, false, "TxBuf adds a packet in overflow");
+
+  // send the packets with successive sequence numbers
+  Ptr<Packet> ptx1 = txBuf.NextSequence (1200, SequenceNumber32 (1));
+  Ptr<Packet> ptx2 = txBuf.NextSequence (1200, SequenceNumber32 (2));
+  Ptr<Packet> ptx3 = txBuf.NextSequence (1200, SequenceNumber32 (3));
+  Ptr<Packet> ptx4 = txBuf.NextSequence (1200, SequenceNumber32 (4));
+  Ptr<Packet> ptx5 = txBuf.NextSequence (1200, SequenceNumber32 (5));
+  Ptr<Packet> ptx6 = txBuf.NextSequence (1200, SequenceNumber32 (6));
+
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 6000,
+                        "TxBuf miscalculates size of in flight segments");
+}
+
+void
+QuicTxBufferTestCase::TestStream0 ()
+{
+  // create the buffer
+  QuicSocketTxBuffer txBuf;
+  Ptr<QuicSocketTxScheduler> sched = CreateObject<QuicSocketTxScheduler>();
+  txBuf.SetScheduler(sched);
+  Ptr<QuicSocketState> tcbd;
+
+  tcbd = CreateObject<QuicSocketState> ();
+
+  // get a packet
+  Ptr<Packet> p1 = Create<Packet> (1196);
+  Ptr<Packet> p2 = Copy (p1);
+  QuicSubheader sub = QuicSubheader::CreateStreamSubHeader (1, 0, p1->GetSize (), false,
+                                                   true, false);
+  QuicSubheader sub0 = QuicSubheader::CreateStreamSubHeader (1, 0, p1->GetSize (), false,
+                                                    true, false);
+  p1->AddHeader (sub);
+  p2->AddHeader (sub0);
+
+  // create another identical packet
+  Ptr<Packet> p3 = Copy (p1);
+
+  // add the packets to the send buffer
+  txBuf.Add (p1);
+  txBuf.Add (p2);
+  txBuf.Add (p3);
+
+  // send the packets with successive sequence numbers
+  Ptr<Packet> ptx1 = txBuf.NextSequence (1200, SequenceNumber32 (1));
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 1200,
+                        "TxBuf miscalculates size of in flight segments");
+
+  Ptr<Packet> ptx2 = txBuf.NextStream0Sequence (SequenceNumber32 (2));
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 1200,
+                        "TxBuf miscalculates size of in flight segments");
+
+  Ptr<Packet> ptx3 = txBuf.NextSequence (1200, SequenceNumber32 (3));
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 2400,
+                        "TxBuf miscalculates size of in flight segments");
+
+  std::vector<uint32_t> additionalAckBlocks;
+  std::vector<uint32_t> gaps;
+  uint32_t largestAcknowledged = 1;
+  additionalAckBlocks.push_back (1);
+
+  // acknowledge all packets except 5
+  std::vector<Ptr<QuicSocketTxItem>> acked = txBuf.OnAckUpdate (tcbd,
+                                                            largestAcknowledged,
+                                                            additionalAckBlocks,
+                                                            gaps);
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 1200,
+                        "TxBuf miscalculates size of in flight segments");
+
+  largestAcknowledged = 2;
+  additionalAckBlocks.push_back (2);
+
+  // acknowledge all packets except 5
+  acked = txBuf.OnAckUpdate (tcbd,
+                                                            largestAcknowledged,
+                                                            additionalAckBlocks,
+                                                            gaps);
+  NS_TEST_ASSERT_MSG_EQ(txBuf.BytesInFlight (), 1200,
+                        "TxBuf miscalculates size of in flight segments");
+}
+
+void
+QuicTxBufferTestCase::DoTeardown ()
+{
+}
+
+/**
+ * \ingroup internet-test
+ * \ingroup tests
+ *
+ * \brief the TestSuite for the TcpTxBuffer test case
+ */
+class QuicTxBufferTestSuite : public TestSuite
+{
+public:
+  QuicTxBufferTestSuite () :
+      TestSuite ("quic-tx-buffer", UNIT)
+  {
+    LogComponentEnable ("QuicTxBufferTestSuite", LOG_LEVEL_ALL);
+    LogComponentEnable ("QuicSocketTxBuffer", LOG_LEVEL_LOGIC);
+
+    AddTestCase (new QuicTxBufferTestCase, TestCase::QUICK);
+  }
+};
+
+static QuicTxBufferTestSuite g_quicTxBufferTestSuite; //!< Static variable for test initialization
diff --git a/src/quic/wscript b/src/quic/wscript
new file mode 100644
index 000000000..89110330a
--- /dev/null
+++ b/src/quic/wscript
@@ -0,0 +1,71 @@
+# -*- Mode: python; py-indent-offset: 4; indent-tabs-mode: nil; coding: utf-8; -*-
+
+# def options(opt):
+#     pass
+
+# def configure(conf):
+#     conf.check_nonfatal(header_name='stdint.h', define_name='HAVE_STDINT_H')
+
+def build(bld):
+    module = bld.create_ns3_module('quic', ['internet', 'applications', 'flow-monitor', 'point-to-point'])
+    module.source = [
+        'model/quic-congestion-ops.cc',
+        'model/quic-socket.cc',
+        'model/quic-socket-base.cc',
+        'model/quic-socket-factory.cc',
+        'model/quic-l4-protocol.cc',
+        'model/quic-socket-rx-buffer.cc',
+        'model/quic-socket-tx-buffer.cc',
+        'model/quic-socket-tx-scheduler.cc',
+        'model/quic-socket-tx-pfifo-scheduler.cc',
+        'model/quic-socket-tx-edf-scheduler.cc',
+        'model/quic-stream.cc',
+        'model/quic-stream-base.cc',
+        'model/quic-l5-protocol.cc',
+        'model/quic-stream-tx-buffer.cc',
+        'model/quic-stream-rx-buffer.cc',
+        'model/quic-header.cc',
+        'model/quic-subheader.cc',
+        'model/quic-transport-parameters.cc',
+        'model/quic-bbr.cc',
+        'helper/quic-helper.cc'
+        ]
+
+    module_test = bld.create_ns3_module_test_library('quic')
+    module_test.source = [
+        'test/quic-rx-buffer-test.cc',
+        'test/quic-tx-buffer-test.cc',
+        'test/quic-header-test.cc',
+        ]
+
+    headers = bld(features='ns3header')
+    headers.module = 'quic'
+    headers.source = [
+        'model/quic-congestion-ops.h',
+        'model/quic-socket.h',
+        'model/quic-socket-base.h',
+        'model/quic-socket-factory.h',
+        'model/quic-l4-protocol.h',
+        'model/quic-socket-rx-buffer.h',
+        'model/quic-socket-tx-buffer.h',
+        'model/quic-socket-tx-scheduler.h',
+        'model/quic-socket-tx-pfifo-scheduler.h',
+        'model/quic-socket-tx-edf-scheduler.h',
+        'model/quic-stream.h',
+        'model/quic-stream-base.h',
+        'model/quic-l5-protocol.h',
+        'model/quic-stream-tx-buffer.h',
+        'model/quic-stream-rx-buffer.h',
+        'model/quic-header.h',
+        'model/quic-subheader.h',
+        'model/quic-transport-parameters.h',
+        'model/quic-bbr.h',
+        'helper/quic-helper.h',
+        'model/windowed-filter.h'
+        ]
+
+    if bld.env.ENABLE_EXAMPLES:
+        bld.recurse('examples')
+
+    # bld.ns3_python_bindings()
+
diff --git a/src/wifi/model/block-ack-type.h b/src/wifi/model/block-ack-type.h
index 07b21fb43..2fdfa76e2 100644
--- a/src/wifi/model/block-ack-type.h
+++ b/src/wifi/model/block-ack-type.h
@@ -21,6 +21,7 @@
 #ifndef BLOCK_ACK_TYPE_H
 #define BLOCK_ACK_TYPE_H
 
+#include <cstdint>
 #include <ostream>
 #include <vector>
 
-- 
2.43.0

